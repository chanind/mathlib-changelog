2022-07-08 13:36:19 1937dff
feat(analysis/normed_space/lp_space): normed_algebra structure (#15086)
This also golfs the `normed_ring` instance to go via `subring.to_ring`, as this saves us from having to build the power, nat_cast, and int_cast structures manually.
We also rename `lp.lp_submodule` to `lp_submodule` to avoid unhelpful repetition.

2022-07-08 11:29:27 e74e534
doc(tactic/wlog): use markdown lists rather than indentation (#15113)
The indentation used in this docstring was lost in the web docs.

2022-07-08 11:29:26 0bc51f0
feat(topology/metric_space/hausdorff_distance): Thickening a compact inside an open (#14926)
If a compact set is contained in an open set, then we can find a (closed) thickening of it still contained in the open.

2022-07-08 11:29:25 93be74b
feat(combinatorics/simple_graph/prod): Box product (#14867)
Define `simple_graph.box_prod`, the box product of simple graphs. Show that it's commutative and associative, and prove its connectivity properties.

2022-07-08 09:53:26 7c070c4
feat(data/finset/basic): Coercion of a product of finsets (#15011)
`↑(∏ i in s, f i) : set α) = ∏ i in s, ↑(f i)` for `f : ι → finset α`.

2022-07-08 05:24:53 d34b330
feat(data/set/basic,order/filter/basic): add semiconj lemmas about images and maps (#14970)
This adds `function.commute` and `function.semiconj` lemmas, and replaces all the uses of `_comm` lemmas with the `semiconj` version as it turns out that only this generality is needed.

2022-07-08 05:24:52 563a51a
chore(topology/algebra/semigroup): golf file (#14957)

2022-07-08 05:24:52 ba9f346
feat(topology/algebra/uniform_group): `uniform_group` is preserved by Inf and comap (#14889)
This is the uniform version of #11720

2022-07-08 02:55:33 6eeb941
refactor(set_theory/cardinal/basic): migrate from `fintype` to `finite` (#15175)
* add `finite_iff_exists_equiv_fin`;
* add `cardinal.mk_eq_nat_iff` and `cardinal.lt_aleph_0_iff_finite`;
* rename the old `cardinal.lt_aleph_0_iff_finite` to `cardinal.lt_aleph_0_iff_finite_set`;
* rename `cardinal.lt_aleph_0_of_fintype` to `cardinal.lt_aleph_0_of_finite`, assume `[finite]` instead of `[fintype]`;
* add an alias `set.finite.lt_aleph_0`;
* rename `W_type.cardinal_mk_le_max_aleph_0_of_fintype` to `W_type.cardinal_mk_le_max_aleph_0_of_finite`, fix assumption.

2022-07-08 02:55:32 a3c647b
feat(set_theory/ordinal/arithmetic): tweak theorems about `0` and `1` (#15174)
We add a few basic theorems on the `0` and `1` ordinals. We rename `one_eq_type_unit` to `type_unit`, and remove `one_eq_lift_type_unit` by virtue of being a trivial consequence of `type_unit` and `lift_one`.

2022-07-08 02:55:31 f0f4070
feat(topology/algebra/infinite_sum): Double sum is equal to a single value (#15157)
A generalized version of `tsum_eq_single` that works for a double indexed sum, when all but one summand is zero.

2022-07-08 02:55:30 8927a02
chore(tactic/lift): move a proof to `subtype.exists_pi_extension` (#15098)
* Move `_can_lift` attr to the bottom of the file, just before the
  rest of meta code.
* Use `ι → Sort*` instead of `Π i : ι, Sort*`.
* Move `pi_subtype.can_lift.prf` to a separate lemma.

2022-07-08 02:55:29 0e3184f
feat(data/fin/tuple/basic): add lemmas for rewriting exists and forall over `n+1`-tuples (#15048)
The lemma names `fin.forall_fin_succ_pi` and `fin.exists_fin_succ_pi` mirror the existing `fin.forall_fin_succ` and `fin.exists_fin_succ`.

2022-07-08 02:55:28 2a7ceb0
perf(linear_algebra): speed up `graded_algebra` instances (#14967)
Reduce `elaboration of graded_algebra` in:
+ `exterior_algebra.graded_algebra` from ~20s to 3s-
+ `tensor_algebra.graded_algebra` from 7s+ to 2s-
+ `clifford_algebra.graded_algebra` from 14s+ to 4s-
(These numbers were before `lift_ι` and `lift_ι_eq` were extracted from `exterior_algebra.graded_algebra` and `lift_ι_eq` was extracted from `clifford_algebra.graded_algebra` in #12182.)
Fix [timeout reported on Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/deterministic.20timeout/near/286996731)
Also shorten the statements of the first two without reducing clarity (I think).

2022-07-08 02:55:27 a5a6865
feat(combinatorics/set_family/intersecting): Intersecting families (#14475)
Define intersecting families, prove that intersecting families in `α` have size at most `card α / 2` and that all maximal intersecting families are this size.

2022-07-08 02:55:26 70a2708
feat(topology/continuous_function): Any T0 space embeds in a product of copies of the Sierpinski space (#14036)
Any T0 space embeds in a product of copies of the Sierpinski space

2022-07-08 00:21:19 646028a
refactor(data/finset/lattice): finset.{min,max} away from option (#15163)
Switch to a `with_top`/`with_bot` based API. This avoids exposing `option`
as implementation detail.
Redefines `polynomial.degree` to use `coe` instead of `some`

2022-07-07 22:47:30 8a80759
feat(order/filter/basic): add `map_le_map` and `map_injective` (#15128)
* Add `filter.map_le_map`, an `iff` version of `filter.map_mono`.
* Add `filter.map_injective`, a `function.injective` version of `filter.map_inj`.

2022-07-07 19:22:46 b4979cb
chore(data/rat): split `field ℚ` instance from definition of `ℚ` (#14893)
I want to refer to the rational numbers in the definition of a field, meaning we can't define the field structure on `ℚ` in the same file as `ℚ` itself.
This PR moves everything in `data/rat/basic.lean` that does not depend on `algebra/field/basic.lean` into a new file `data/rat/defs.lean`: definition of the type `ℚ`, the operations giving its algebraic structure, and the coercions from integers and natural numbers. Basically, everything except the actual `field ℚ` instance.
It turns out our basic lemmas on rational numbers only require a `comm_ring`, `comm_group_with_zero` and `is_domain` instance, so I defined those instances in `defs.lean` could leave all lemmas intact.
As a consequence, the transitive imports provided by `data.rat.basic` are somewhat smaller: no `linear_ordered_field` is needed until `data.rat.order`. I see this as a bonus but can also re-import `algebra.order.field` in `data.rat.basic` if desired.

2022-07-07 16:57:16 7428bd9
refactor(data/finite/set,data/set/finite): move most contents of one file to another (#15166)
* move most content of `data.finite.set` to `data.set.finite`;
* use `casesI nonempty_fintype _` instead of `letI := fintype.of_finite`; sometimes it lets us avoid `classical.choice`;
* merge `set.finite.of_fintype`, `set.finite_of_fintype`, and `set.finite_of_finite` into `set.to_finite`;
* rewrite `set.finite_univ_iff` and `finite.of_finite_univ` in terms of `set.finite`;
* replace some assumptions `[fintype (plift _)]` with `[finite _]`;
* generalize `set.cod_restrict` and some lemmas to allow domain in `Sort*`, use it for `finite.of_injective_finite.range`.

2022-07-07 16:57:15 691f04f
feat(order/rel_iso): two reflexive/irreflexive relations on a unique type are isomorphic (#14760)
We also rename `not_rel` to the more descriptive name `not_rel_of_subsingleton`.

2022-07-07 14:49:11 6df59d6
feat(data/list/basic): nth_le_enum (#15139)
Fill out some of the `enum` and `enum_from` API
Link the two via `map_fst_add_enum_eq_enum_from`.

2022-07-07 13:45:33 5852568
feat(combinatorics/simple_graph/{basic,subgraph,clique,coloring}): add induced graphs, characterization of cliques, and bounds for colorings (#14034)
This adds `simple_graph.map`, `simple_graph.comap`, and induced graphs and subgraphs. There are renamings: `simple_graph.subgraph.map` to `simple_graph.subgraph.inclusion`, `simple_graph.subgraph.map_top` to `simple_graph.subgraph.hom`, and `simple_graph.subgraph.map_spanning_top` to `simple_graph.subgraph.spanning_hom`. These changes originated to be able to express that a clique is a set of vertices whose induced subgraph is complete, which gives some clique-based bounds for chromatic numbers.

2022-07-07 08:40:00 1422d38
feat(order/succ_pred): expand API on `with_bot` and `with_top` (#15016)
We add a bunch of `simp` lemmas for successor and predecessors on `with_bot` and `with_top`, and golf some proofs.

2022-07-07 06:45:03 0d18630
chore(ring_theory/norm): generalise a couple of lemmas (#15160)
Using the generalisation linter

2022-07-07 05:04:33 bf735cd
chore(set_theory/ordinal/basic): remove `rel_iso_out` (#15145)
This is just a specific application of `rel_iso.cast`. Moreover, it's unused.

2022-07-07 05:04:32 9b2755b
chore(*): add missing `to_fun → apply` configurations for `simps` (#15112)
This improves the names of some generated lemmas for `continuous_map` and `quadratic_form`.

2022-07-07 05:04:31 ab99fd1
chore(data/nat): rename oddly named lemma odd_gt_zero (#13040)

2022-07-07 02:38:11 6d02dac
feat(order/lattice, order/lattice_intervals): coe inf/sup lemmas (#15136)
This PR adds simp lemmas for coercions of inf/sup in order instances on intervals. We also change the order of some arguments in instances/lemmas, by removing `variables` commands, so that typeclass arguments precede others.

2022-07-07 00:12:50 418373e
feat(combinatorics/simple_graph/basic): `dart.to_prod` is injective (#15150)

2022-07-07 00:12:49 3e52000
feat(data/quot): `is_equiv` instance for quotient equivalence (#15148)

2022-07-07 00:12:47 e034eb0
feat(order/rel_iso): add `rel_iso.cast` (#15144)

2022-07-07 00:12:46 e335a41
refactor(group_theory/congruence): use `quotient.map` (#15130)
Also add explicit universe levels in `algebra.category.Module.monoidal`.

2022-07-07 00:12:45 fdfc222
feat(measure_theory/integral): Circle integral transform (#13885)
Some basic definitions and results related to circle integrals of a function. These form part of #13500

2022-07-06 21:58:37 0a89f18
chore(set_theory/ordinal/basic): clean up `ordinal.card` API (#15147)
We tweak some spacing throughout this section of the file, and golf a few theorems/definitions.
Conflicts and is inspired by #15137.

2022-07-06 21:58:36 a54e63d
feat(set_theory/ordinal/basic): basic lemmas on `ordinal.lift`  (#15146)
We add some missing instances for preimages, and missing theorems for `ordinal.lift`. We remove `ordinal.lift_type`, as it was just a worse way of stating `ordinal.type_ulift`.
We also tweak some spacing and golf a few theorems.
This conflicts with (and is inspired by) some of the changes of #15137.

2022-07-06 19:18:30 b758104
feat(order/basic): a symmetric relation implies equality when it implies less-equal (#15149)

2022-07-06 15:08:32 d45a8ac
refactor(topology/separation): redefine `t0_space` (#15046)

2022-07-06 13:12:54 71b1be6
feat(analysis/inner_product_space): add simple lemmas for the orthogonal complement (#15020)
We show that the orthogonal complement of a dense subspace is trivial.

2022-07-06 11:16:59 f09322b
feat(geometry/manifold/local_invariant_properties): simplify definitions and proofs (#15116)
* Simplify the sets in `local_invariant_prop` and `lift_prop_within_at`
* Simplify many proofs in `local_invariant_properties.lean`
* Reorder the intersection in `cont_diff_within_at_prop` to be more consistent with all lemmas in `smooth_manifold_with_corners.lean`
* New lemmas, such as `cont_mdiff_within_at_iff_of_mem_source` and properties of `local_invariant_prop`
* I expect that some lemmas in `cont_mdiff.lean` can be simplified using the new definitions, but I don't do that in this PR.
* Lemma renamings:
```
cont_mdiff_within_at_iff -> cont_mdiff_within_at_iff'
cont_mdiff_within_at_iff' -> cont_mdiff_within_at_iff_of_mem_source'
cont_mdiff_within_at_iff'' -> cont_mdiff_within_at_iff [or iff.rfl]
```

2022-07-06 08:41:41 8ff5e11
feat(analysis/special_functions/complex/arg): add complex.abs_eq_one_iff (#15125)
This is a simpler formulation of `complex.range_exp_mul_I` below.

2022-07-06 08:41:40 d908bc0
chore(data/fintype): drop a `decidable_pred` assumption (#14971)
OTOH, now the proof depends on `classical.choice`.

2022-07-06 07:46:32 a95b442
feat(probability/martingale): Doob's maximal inequality (#14737)

2022-07-06 07:04:08 bd9c307
doc(overview): add probability theory (#15114)
Also:
* Add convolutions to overview and undergrad
* Add some other probability notions to undergrad
* Minor cleanup in probability module docs

2022-07-06 02:26:24 93e97d1
feat(analysis/convex/function): Variants of `convex_on.le_right_of_left_le` (#14821)
This PR adds four variants of `convex_on.le_right_of_left_le` that are useful when dealing with convex functions on the real numbers.

2022-07-05 23:18:42 71e11de
chore(analysis/normed/field/basic): add `@[simp]` to `real.norm_eq_abs (#15006)
* mark `real.norm_eq_abs` and `abs_nonneg` as `simp` lemmas;
* add `abs` versions of `is_o.norm_left` etc;
* add `inner_product_geometry.angle_smul_smul` and `linear_isometry.angle_map`.

2022-07-05 23:18:41 071dc90
feat(probability/martingale): positive part of a submartingale is also a submartingale (#14932)

2022-07-05 19:14:55 f10d0ab
feat(*): add lemmas about sigma types (#15085)
* move `set.range_sigma_mk` to `data.set.sigma`;
* add `set.preimage_image_sigma_mk_of_ne`, `set.image_sigma_mk_preimage_sigma_map_subset`, and `set.image_sigma_mk_preimage_sigma_map`;
* add `function.injective.of_sigma_map` and `function.injective.sigma_map_iff`;
* don't use pattern matching in the definition of `prod.to_sigma`;
* add `filter.map_sigma_mk_comap`

2022-07-05 16:26:49 527afb3
feat(topology/sets/compacts): prod constructions (#15118)

2022-07-05 15:04:58 db9cb46
feat(analysis/complex): equiv_real_prod_symm_apply (#15122)
Plus some minor lemmas for #15106.

2022-07-05 15:04:57 68ae182
feat(measure_theory/group/measure): a product of Haar measures is a Haar measure (#15120)

2022-07-05 12:32:49 365e30d
chore(data/set/*,order/*): add missing lemmas about `monotone_on` etc (#14943)
* Add `monotone_on`/`antitone`/`antitone_on` versions of existing `monotone` lemmas for `id`/`const`, `inf`/`sup`/`min`/`max`, `inter`/`union`, and intervals.
* Drop `set.monotone_prod`, leave `monotone.set_prod` only.
* Golf some proofs that were broken by removal of `set.monotone_prod`.

2022-07-05 10:10:27 dba3dce
feat(measure_theory/function/conditional_expectation): monotonicity of the conditional expectation (#15024)

2022-07-05 10:10:26 676e772
refactor(analysis/convex/specific_functions): Remove hypothesis from `deriv_sqrt_mul_log` (#15015)
This PR removes the `hx : 0 < x` hypothesis from `deriv_sqrt_mul_log`.

2022-07-05 08:48:19 83eda07
refactor(data/real/ennreal): golf, generalize (#14996)
## Add new lemmas
* `ennreal.bit0_strict_mono`, `ennreal.bit0_injective`, `ennreal.bit0_lt_bit0`, `ennreal.bit0_le_bit0`, `ennreal.bit0_top`;
* `ennreal.bit1_strict_mono`, `ennreal.bit1_injective`, `ennreal.bit1_lt_bit1`, `ennreal.bit1_le_bit1`, `ennreal.bit1_top`;
* `ennreal.div_eq_inv_mul`, `ennreal.of_real_mul'`;
* `filter.eventually.prod_nhds`.
## Generalize lemmas
* Drop unneeded assumption in `real.to_nnreal_bit0` and `ennreal.of_real_bit0`.
## Rename lemmas
* `ennreal.mul_div_cancel` → `ennreal.div_mul_cancel`, fixing a TODO;
* `prod_is_open.mem_nhds` → `prod_mem_nhds`: there are no open sets in the statement.
## Other changes
* Golf some proofs.
* Avoid non-final `simp`s here and there.
* Move `mul_inv_cancel` etc up to use them in other proofs.
* Move some `to_nnreal` lemmas above `to_real` lemmas, use them in `to_real` lemmas.
* Use `to_dual` in `order_iso.inv_ennreal`.

2022-07-04 23:23:06 1886093
chore(analysis/calculus/deriv): make the exponent explicit in pow lemmas (#15117)
This is useful to build derivatives for explicit functions using dot notation.

2022-07-04 21:37:31 73d15d7
feat(number_theory/wilson): add Wilson's Theorem (#14717)
The previous "Wilson's lemma" (zmod.wilsons_lemma) was a single direction of the iff for Wilson's Theorem. This finishes the proof by adding the (admittedly, much simpler) direction where, if the congruence is satisfied for `n`, then `n` is prime.

2022-07-04 20:40:33 06ac34b
feat(analysis/special_functions/complex/arg): `continuous_at_arg_coe_angle` (#14980)
Add the lemma that `complex.arg`, coerced to `real.angle`, is
continuous except at 0.

2022-07-04 19:58:37 8f391f5
feat(geometry/euclidean/basic): `continuous_at_angle` (#15021)
Add lemmas that (unoriented) angles are continuous, as a function of a
pair of vectors or a triple of points, except where one of the vectors
is zero or one of the end points equals the middle point.

2022-07-04 17:12:28 407f39b
chore(ring_theory/matrix_algebra): golf using `matrix.map` (#15040)
This replaces terms of the form `λ i j, a * algebra_map R A (m i j)` with the defeq `a • m.map (algebra_map R A)`, as then we get access to the API about `map`.
This also leverages existing bundled maps to avoid reproving linearity in the auxiliary constructions, removing `to_fun` and `to_fun_right_linear` as we can construct `to_fun_bilinear` directly with ease.

2022-07-04 01:38:58 051dffa
refactor(data/nat/parity): `nat.even_succ` -> `nat.even_add_one` (#14917)
Change `nat.even_succ` to be analogous to `int.even_add_one`.

2022-07-03 17:11:19 46344b4
feat(category_theory/limits): bilimit from kernel (#14452)

2022-07-03 11:47:31 024a423
refactor(category_theory): generalise universe levels in preservation statements (#15067)
This big refactoring of universe levels in the category theory library allows to express limit preservation statements like exactness of functors which are between categories that are not necessarily in the same universe level. For this change to make sense for fixed diagrams (like coequalizers or binary products), the corresponding index categories, the universe of which so far was pinned to the category they were used for, is now fixed to `Type`.

2022-07-03 09:05:56 6e8f25e
chore(ring_theory/dedekind_domain/ideal): fix style of a lemma statement  (#15097)

2022-07-02 14:14:01 9e701b9
feat(ring_theory/dedekind_domain): If `R/I` is isomorphic to `S/J` then the factorisations of `I` and `J` have the same shape (#11053)
In this PR, we show that given Dedekind domains `R` and `S` with ideals `I` and `J`respectively, if quotients `R/I` and `S/J` are isomorphic, then the prime factorizations of `I` and `J` have the same shape, i.e. they have the same number of prime factors and up to permutation these prime factors have the same multiplicities. We can then get [the Dedekind-Kummer theorem](https://kconrad.math.uconn.edu/blurbs/gradnumthy/dedekindf.pdf) as a corollary of this statement. 
For previous discussion concerning the structure of this PR and the results it proves, see #9345

2022-07-02 12:02:23 4823da2
feat(data/nat/basic): add `mul_div_mul_comm_of_dvd_dvd` (#15031)
Add lemma `mul_div_mul_comm_of_dvd_dvd (hac : c ∣ a) (hbd : d ∣ b) : (a * b) / (c * d) = (a / c) * (b / d)`
(Compare with `mul_div_mul_comm`, which holds for a `division_comm_monoid`)
Also adds the same lemma for a `euclidean_domain`.

2022-07-02 10:12:17 2d76f56
chore(algebra/associated): make `irreducible` not a class (#14713)
This functionality was rarely used and doesn't align with how `irreducible` is used in practice.
In a future PR, we can remove some `unfreezingI`s caused by this.

2022-07-02 04:29:20 855ed5c
chore(scripts): update nolints.txt (#15090)
I am happy to remove some nolints for you!

2022-07-01 20:56:46 5654410
chore(group_theory/group_action/opposite): add a missed smul/scalar rename (#15082)
…ename

2022-07-01 20:56:45 774e680
feat(data/fintype/basic): add noncomputable equivalences between finsets as fintypes and `fin s.card`, etc. (#15080)
As `s.card` is not defeq to `fintype.card s`, it is convenient to have these definitions in addition to `fintype.equiv_fin` and others (though we omit the computable ones).

2022-07-01 20:56:44 9fcf391
chore(group_theory/group_action/basic): relax monoid to mul_one_class (#15051)

2022-07-01 20:56:43 e94e5c0
feat(topology/uniform_space/basic): uniform continuity from/to an infimum of uniform spaces (#14892)
This adds uniform versions of various topological lemmas about continuity from/to infimas of topological spaces

2022-07-01 18:31:15 ff5e97a
feat(order/lattice, data/set): some helper lemmas (#14789)
This PR provides lemmas describing when `s ∪ a = t ∪ a`, in both necessary and iff forms, as well as intersection and lattice versions.

2022-07-01 18:31:14 7f95e22
feat(linear_algebra/*): add lemma `linear_independent.finite_of_is_noetherian` (#14714)
This replaces `fintype_of_is_noetherian_linear_independent` which gave the same
conclusion except demanded `strong_rank_condition R` instead of just `nontrivial R`.
Also some other minor gaps filled.

2022-07-01 14:39:25 2ae2065
chore(data/set,topology): fix 2 lemma names (#15079)
* rename `set.quot_mk_range_eq` to `set.range_quotient_mk`;
* rename `is_closed_infi_iff` to `is_closed_supr_iff`.

2022-07-01 14:39:24 8b69a4b
feat(ring_theory): Some missing lemmas (#15064)

2022-07-01 14:39:22 36ee9af
feat(topology/separation): `separation_quotient α` is a T₀ space (#15043)

2022-07-01 14:39:20 0369f20
feat(order/locally_finite): make `fintype.to_locally_finite_order` computable (#14733)

2022-07-01 12:26:35 0522ee0
refactor(ring_theory/jacobson): remove unnecessary `fintype.trunc_equiv_fin` (#15077)

2022-07-01 12:26:34 640955c
refactor(ring_theory/finiteness): remove unnecessary `fintype.trunc_equiv_fin` (#15076)

2022-07-01 12:26:33 f9b939c
feat(data/nat/enat): simple lemmas on `enat` (#15029)

2022-07-01 12:26:32 6e362f6
chore(algebra/order/monoid): golf proofs, fix docs (#14728)

2022-07-01 10:20:04 9e97baa
feat(data/list/basic): add filter_map_join (#14777)

2022-07-01 10:20:03 e73ac94
feat (analysis/normed_space/lp_space):add l_infinity ring instances (#14104)
We define pointwise multiplication on `lp E ∞` and give it has_mul, non_unital_ring, non_unital_normed_ring, ring, normed_ring, comm_ring and normed_comm_ring instances under the appropriate assumptions.

2022-07-01 08:11:22 ce332c1
refactor(algebra/group_power): split ring lemmas into a separate file (#15032)
This doesn't actually stop `algebra.ring.basic` being imported into `group_power.basic` yet, but it makes it easier to make that change in future. Two ~300 line files are also slightly easier to manage than one ~600 line file, and ring/add_group feels like a natural place to draw the line
All lemmas have just been moved, and none have been renamed. Some lemmas have had their `R` variables renamed to `M` to better reflect that they apply to monoids with zero.
By grouping together the `monoid_with_zero` lemmas from separate files, it become apparent that there's some overlap.
This PR does not attempt to clean this up, in the interest of limiting the the scope of this change to just moves.

2022-07-01 04:21:43 7e244d8
feat(algebra/category/Module): upgrade `free : Type ⥤ Module R` to a monoidal functor (#14328)

2022-06-30 21:59:47 9229b0e
chore(data/nat/factorization/basic): delete `import tactic.linarith` (#15075)
Removes the import of `tactic.linarith` that's no longer needed.

2022-06-30 21:59:46 e7425e7
feat(data/fin/basic): `induction_zero` and `induction_succ` lemmas (#15060)
This pull request introduces `fin.induction_zero` and `fin.induction_succ` simp lemmas for `fin.induction`, similar to `fin.cases_zero` and `fin.cases_succ` for `fin.cases`.

2022-06-30 19:45:49 806bbb0
refactor(algebra/group/defs): rename has_scalar to has_smul (#14559)
Discussion: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/scalar.20smul.20naming.20discrepancy

2022-06-30 17:18:22 c10efa6
refactor(algebra/hom/group): generalize basic API of `monoid_hom` to `monoid_hom_class` (#14997)
This PR generalizes part of the basic API of monoid homs to monoid_hom_class. This notably includes things like monoid_hom.mker, submonoid.map and submonoid.comap. I left the namespaces unchanged, for example `monoid_hom.mker` remains the same even though it is now defined for any `monoid_hom_class` morphism; this way dot notation still (mostly) works for actual monoid homs.

2022-06-30 12:40:15 eb85260
feat(topology/compact_open):  continuous_comp left functor C(-, γ) (#15068)

2022-06-30 06:53:03 050f9e6
feat(number_theory/legendre_symbol/mul_character): alternative implementation (#14768)
This is an alternative version of `number_theory/legendre_symbol/mul_character.lean`.
It defines `mul_character R R'` as a `monoid_hom` that sends non-units to zero.
This allows to define a `comm_group` structure on `mul_character R R'`.
There is an alternative implementation in #14716 ([side by side comparison](https://github.com/leanprover-community/mathlib/compare/legendre_symbol_mul_char...variant)).
See the [discussion on Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Implementation.20of.20multiplicative.20characters).

2022-06-30 04:08:55 ad154bd
chore(scripts): update nolints.txt (#15063)
I am happy to remove some nolints for you!

2022-06-29 23:58:49 5d8810a
feat(set_theory/cardinal/*): simp lemmas for `to_nat` and `to_enat` (#15059)

2022-06-29 23:58:48 68452ec
feat(set_theory/game/pgame): golf `le_trans`  (#14956)
This also adds `has_le.le.move_left_lf` and `has_le.le.lf_move_right` to enable dot notation. Note that we already have other pgame lemmas in the `has_le.le` namespace like `has_le.le.not_gf`.
To make this dot notation work even when these lemmas are partially-applied, we swap the arguments of `move_left_lf_of_le` and `lf_move_right_of_le`.

2022-06-29 22:22:06 501c1d4
feat(linear_algebra/linear_pmap): add has_smul and ext (#14915)
Adds the type-class `has_smul` for partially defined linear maps. We proof the ext lemma.

2022-06-29 22:22:05 a2a8c9b
refactor(ring_theory/graded_algebra): use `add_submonoid_class` to generalize to graded rings (#14583)
Now that we have `add_submonoid_class`, we don't need to consider only families of submodules.
For convenience, this keeps around `graded_algebra` as an alias for `graded_ring` over a family of submodules, as this can help with elaboration here and there.
This renames:
* `graded_algebra` to `graded_ring`
* `graded_algebra.proj_zero_ring_hom` to `graded_ring.proj_zero_ring_hom`
adds:
* `direct_sum.decompose_ring_equiv`
* `graded_ring.proj`
* `graded_algebra` (as an alias for a suitable `graded_ring`
and removes:
* `graded_algebra.is_internal`, which was just an alias anyway.

2022-06-29 20:39:00 1116684
chore(set_theory/game/pgame): golf various theorems about relabellings (#15054)

2022-06-29 20:38:59 108e3a0
refactor(group_theory/coset): redefine quotient group to be quotient by action of subgroup (#15045)
Given a group `α` and subgroup `s`, redefine the relation `left_rel` ("being in the same left coset") to
```lean
def left_rel : setoid α := mul_action.orbit_rel s.opposite α
```
This means that a quotient group is definitionally a quotient by a group action.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/two.20different.20quotients.20by.20subgroup)

2022-06-29 20:38:58 71985dc
feat(field_theory/minpoly): generalize statements about GCD domains (#14979)
Currently, the statements about the minimal polynomial over a GCD domain `R` require the element to be in a `K`-algebra, where `K` is the fraction field of `R`. We remove this assumption.
From flt-regular.

2022-06-29 20:38:57 6879dd0
feat(model_theory/satisfiability): The Łoś–Vaught Test (#14758)
Provides more API for elementary equivalence
Shows that a `κ`-categorical theory with only infinite models is complete.

2022-06-29 18:27:22 397d45f
feat(algebra/order/monoid): `a + b ≤ c → a ≤ c` (#15033)
Generalize four lemmas that were left by previous PRs before `canonically_ordered_monoid` was a thing.

2022-06-29 18:27:20 07726e2
chore(analysis/locally_convex/balanced_core_hull): Golf (#14987)
Golf and improve lemmas based on the naming convention:
* `balanced_mem` → `balanced_iff_smul_mem`
* `zero_singleton_balanced` → `balanced_zero`
* `balanced_core_emptyset` → `balanced_core_empty`
* `balanced_core_mem_iff` → `mem_balanced_core_iff`
* `balanced_hull_mem_iff` → `mem_balanced_hull_iff`
* `balanced_core_is_closed` → `is_closed.balanced_core`

2022-06-29 18:27:19 478773b
chore(data/nat/factorization/basic): golf rec_on_pos_prime_pos_coprime, remove import (#14935)
Golf the proof of `rec_on_pos_prime_pos_coprime`, eliminating the need for `tactic.interval_cases`

2022-06-29 17:31:54 ee8d588
refactor(logic/hydra): use `is_irrefl` (#15039)
`is_irrefl` seems to be the more commonly used spelling

2022-06-29 14:27:11 c8ab806
feat(tactic/alias.lean): use current namespace in alias (#14961)
This makes `alias foo <- bar` use the current namespace to resolve the new alias name `bar`, for consistency with `def bar := foo` and leanprover-community/mathlib4#293.

2022-06-29 14:27:10 5de765c
feat(linear_algebra/linear_pmap): definition of the graph (#14920)
Define the graph of a partial linear map as the pushforward of the graph of the underlying linear map
and prove some elementary facts.

2022-06-29 12:27:59 aa812bd
chore(group_theory/group_action/basic): split file (#15044)
Split the file `group_theory/group_action/basic` to remove the dependency on `group_theory/quotient_group`, moving everything involving quotients to a new file `group_theory/group_action/quotient`.

2022-06-29 10:03:54 ea9dae2
refactor(topology/*): Use `disjoint` (#14950)
Replace uses of `s ∩ t = ∅` by `disjoint s t` in the topology library. This shortens proofs.

2022-06-29 08:02:38 03374ee
feat(algebra/order/field): Linearly ordered semifields (#15027)
Define `linear_ordered_semifield` and generalize lemmas within `algebra.order.field`.

2022-06-29 02:12:43 55ec65a
feat(topology/algebra/module/basic): define continuous_(semi)linear_map_class (#14674)
This PR brings the morphism refactor to continuous (semi)linear maps. We define `continuous_semilinear_map_class` and `continuous_linear_map_class` in a way that parallels the non-continuous versions, along with a few extras (i.e. `add_monoid_hom_class` instance for `normed_group_hom`).
A few things I was not too sure about:
- When generalizing lemmas to a morphism class rather than a particular type of morphism, I used `𝓕` as the type (instead of just `F` as is done for most `fun_like` types) to avoid clashing with our convention of using `E`, `F`, etc for e.g. vector spaces.
- Namespacing: I placed lemmas like `isometry_of_norm`, `continuous_of_bound`, etc, under the `add_monoid_hom_class` namespace. Maybe the root namespace would make sense here.

2022-06-28 19:09:05 08b07a6
feat(order/succ_pred/basic): tag more lemmas with simp  (#14998)

2022-06-28 19:09:03 7db7667
feat(order/boolean_algebra): Interaction of disjointness and complements (#14925)
Prove `disjoint x yᶜ ↔ x ≤ y` and similar, transfer those results to `set`.
Lemma renames
* `subset_compl_iff_disjoint` → `subset_compl_iff_disjoint_right`
* `set.subset_compl_iff_disjoint` → `set.subset_compl_iff_disjoint_right`
* `disjoint_iff_le_compl_left` → `le_compl_iff_disjoint_left`
* `disjoint_iff_le_compl_right` → `le_compl_iff_disjoint_right`

2022-06-28 15:21:02 00c17d6
feat(algebra/ring/boolean_ring): `bool` is a Boolean ring (#15004)
and a few `bool` lemmas.

2022-06-28 12:51:25 78bc372
feat(data/{finset, set}/basic): tweak `nonempty_coe_sort` and `is_empty_coe_sort` (#14937)
This PR does the following:
- add lemmas `set.is_empty_coe_sort` and `finset.is_empty_coe_sort`
- made argument of both `nonempty_coe_sort` lemmas inferred
- fix some spacing

2022-06-28 09:03:25 3594b63
feat(probability_theory/independence): if a family of pi-systems is independent, then so are the generated measurable spaces (#9387)
The main result in this PR is `Indep_sets.Indep`: if π-systems are independent as sets of sets, then the
measurable space structures they generate are independent. We already had a version of this for two pi-systems instead of a family.
In order to prove this, and as preparation for a next PR about Kolmogorov's 0-1 law, a definition `pi_Union_Inter` is introduced to build a particular pi-system from a family of pi-systems.

2022-06-28 08:13:29 728e074
feat(measure_theory/function/lp_order): prove a `normed_lattice_add_comm_group` instance for Lp (#14999)

2022-06-28 03:59:01 dcedc04
feat(order/symm_diff): Triangle inequality for the symmetric difference (#14847)
Prove that `a ∆ c ≤ a ∆ b ⊔ b ∆ c`.

2022-06-28 02:30:01 ae3d572
chore(topology/uniform_space/basic): Make `to_topological_space_inf` and `inf_uniformity` true by definition (#14912)
Since the lattice API lets us provide a definition for `inf`, we may as well provide a nice one such that the obvious properties are true by rfl.

2022-06-28 00:05:04 cf4d987
chore(analysis/special_functions/trigonometric/angle): rfl lemmas for nat and int smul actions on angle (#15003)
These can't be simp, because the simp-normal form is multiplication.

2022-06-28 00:05:02 37bf8a2
chore(topology/separation): Extract `set` product lemma (#14958)
Move `prod_subset_compl_diagonal_iff_disjoint` to `data.set.prod`, where it belongs. Delete `diagonal_eq_range_diagonal_map` because it duplicates `set.diagonal_eq_range`. Move `set.disjoint_left`/`set.disjoint_right` to `data.set.basic` to avoid an import cycle.
Make variable semi-implicit in the RHS of `disjoint_left` and `disjoint_right`.

2022-06-28 00:05:01 ee7f38c
chore(data/set/basic): remove duplicate `nonempty_insert` in favor of `insert_nonempty` (#14884)
This name matches e.g. `univ_nonempty` and `singleton_nonempty`.

2022-06-28 00:04:54 365b2ee
feat(data/bool): bnot_ne (#10562)

2022-06-27 21:32:09 f6b728f
feat(data/finset/pointwise): `•` and `⊆` (#14968)
Port `set` lemmas to `finset`. Tag a few more lemmas with `norm_cast`. Add some missing `to_additive` attributes.

2022-06-27 21:32:08 7c6cd38
chore(set_theory/game/pgame): remove weird `simp` lemma (#14954)
I added this back before there was much API on casting natural numbers to pre-games, as a safeguard in case I used the wrong `1`. In retrospective this theorem was kind of dumb.

2022-06-27 21:32:07 2cdded9
feat(data/multiset/basic): add multiset.filter_singleton (#14938)
Adds a lemma, similar to `finset.filter_singleton`.

2022-06-27 21:32:05 927b468
chore(data/nat/factorization/basic): golf pow_succ_factorization_not_dvd, remove import (#14936)
Move `pow_succ_factorization_not_dvd` below `factorization_le_iff_dvd` and use this to golf it, eliminating the need for `tactic.linarith`

2022-06-27 21:32:04 f51286d
feat(analysis/locally_convex/bounded): continuous linear image of bounded set is bounded (#14907)
This is needed to prove that the usual strong topology on continuous linear maps satisfies `has_continuous_smul`.

2022-06-27 21:32:03 cf50ac1
chore(algebra/group/units): mark some lemmas as simp (#14871)
These seem like fairly natural candidates for simp lemmas.

2022-06-27 21:32:02 cad1a6c
feat(set_theory/cardinal/basic): lemmas about `#(finset α)` (#14850)
This PR does the following:
- prove `mk_finset_of_fintype : #(finset α) = 2 ^ℕ fintype.card α` for `fintype α`
- rename `mk_finset_eq_mk` to `mk_finset_of_infinite` to match the former
- rename `mk_finset` to `mk_coe_finset` to avoid confusion with these two lemmas

2022-06-27 21:32:00 fef4fb8
refactor(topology/inseparable): redefine `specializes` and `inseparable` (#14647)
* Redefine `specializes` and `inseparable` in terms of `nhds`.
* Review API.
* Define `inseparable_setoid` and `separation_quotient`.
* Add `function.surjective.subsingleton`.

2022-06-27 19:03:59 1cd2bf5
feat(analysis/special_functions/log/deriv): more power series for log (#14881)
This adds a power series expansion for `log ((a + 1) / a)`, and two lemmas that are needed for it. It's planned to be used in the proof of the Stirling formula.

2022-06-27 16:25:12 68e0160
chore(data/int/cast): redo #14890, moving field-specific lemmas (#14995)
In #14894, I want to refer to the rational numbers in the definition of a field, meaning we can't have `algebra.field.basic` in the transitive imports of `data.rat.defs`.
Apparently this dependency was re-added, so I'm going to have to split it again...

2022-06-27 16:25:11 2558b3b
feat(*): Upgrade to lean 3.44.1c (#14984)
The changes are:
* `reflected a` is now spelt `reflected _ a`, as the argument was made explicit to resolve type resolution issues. We need to add new instances for `with_top` and `with_bot` as these are no longer found via the `option` instance. These new instances are an improvement, as they can now use `bot` and `top` instead of `none`.
* Some nat order lemmas in core have been renamed or had their argument explicitness adjusted.
* `dsimp` now applies `iff` lemmas, which means it can end up making more progress than it used to. This appears to impact `split_ifs` too.
* `opposite.op_inj_iff` shouldn't be proved until after `opposite` is irreducible (where `iff.rfl` no longer works as a proof), otherwise `dsimp` is tricked into unfolding the irreducibility which puts the goal state in a form where no further lemmas can apply.
We skip Lean 3.44.0c because the support in that version for `iff` lemmas in `dsimp` had some unintended consequences which required many undesirable changes.

2022-06-27 13:50:22 05565f4
doc(analysis/convex/uniform_convex_space): End of sentence (#14986)
I kept the suspense for a month.

2022-06-27 13:50:15 5de7c34
feat(order/*): Miscellaneous results about the product order (#14977)
`≤`, `<`, `⩿`, `⋖`, `is_bot`, `is_top`, `is_min`, `is_max` in `α × β`.

2022-06-27 13:50:14 f5d2cc8
feat(measure_theory/function/l1_space): add some integrability lemmas (#14931)

2022-06-27 13:50:13 cf8b46d
feat(analysis/convex/special_functions): `sqrt * log` is strictly convex on x>1 (#14822)
This convexity result can be used to golf the proof of the main inequality in the proof of Bertrand's postulate (#8002).

2022-06-27 13:50:12 68d29f5
feat(probability/stopping): measurability of sets related to stopping times, under countable/encodable assumptions (#14750)
The file already contains similar lemmas under assumptions on the topology of the index set. The new results use countability hypotheses instead.

2022-06-27 11:38:35 331df5a
feat(probability/moments): moments and moment generating function of a real random variable (#14755)
This PR defines moments, central moments, moment generating function and cumulant generating function.

2022-06-27 11:38:34 3091b91
feat(probability/stopping): if a filtration is sigma finite, then the measure restricted to the sigma algebra generated by a stopping time is sigma finite (#14752)

2022-06-27 11:38:33 72fbe5c
feat(measure_theory/measure/finite_measure_weak_convergence): Characterize weak convergence of finite measures in terms of integrals of bounded continuous real-valued functions. (#14578)
Weak convergence of measures was defined in terms of integrals of bounded continuous nnreal-valued functions. This PR shows the equivalence to the textbook condition in terms of integrals of bounded continuous real-valued functions.
Also the file `measure_theory/measure/finite_measure_weak_convergence.lean` is divided to sections with dosctrings for clarity.

2022-06-27 09:14:45 cf0649c
chore(data/sigma/basic): make `sigma.reflect` universe-polymorphic (#14934)

2022-06-27 07:39:57 671c7c0
chore(algebra/direct_sum/ring): add new `int_cast` and `nat_cast` fields to match `ring` and `semiring` (#14976)
This was deliberately left to a follow up in #12182

2022-06-27 07:39:56 af8ca85
fix(linear_algebra/{exterior,clifford}_algebra/basic): add some missing namespaces (#14975)
These lemmas are about the auxiliary `{exterior,clifford}_algebra.graded_algebra.ι` not `{exterior,clifford}_algebra.ι`, so should have `graded_algebra` in their names.
This is a follow up to #12182

2022-06-27 04:03:50 d4f8a45
feat(algebra/group/units): add decidability instance for `is_unit` (#14873)
This adds a decidability instance for the `is_unit` predicate. See [here](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Decidability.20of.20.60is_unit.60.20on.20finite.20rings/near/286543269).

2022-06-27 03:03:23 0b18823
feat(set_theory/game/pgame): make `lt_iff_le_and_lf` true by def-eq (#14983)

2022-06-27 00:09:16 894f92b
refactor(order/upper_lower): Reverse the order on `upper_set` (#14982)
Having `upper_set` being ordered by reverse inclusion makes it order-isomorphic to `lower_set` (and antichains once we have them as a type) and it matches the order on `filter`.

2022-06-26 23:29:19 f63d925
feat(combinatorics/simple_graph/clique): The set of cliques (#14827)
Define `simple_graph.clique_set`, the `set` analogue to `simple_graph.clique_finset`.

2022-06-26 21:36:44 f2b108e
refactor(set_theory/cardinal/*): `cardinal.sup` → `supr` (#14569)
We remove `cardinal.sup` in favor of `supr`. We tweak many other theorems relating to cardinal suprema in the process.
A noteworthy consequence is that there's no longer universe constraints on the domain and codomain of the functions one takes the supremum of. When one does still have this constraint, one can use `bdd_above_range` to immediately prove their range is bounded above.
<!-- Lemmas `lift_sup_le`, `lift_sup_le_iff`, `lift_sup_le_lift_sup`, and `lift_sup_le_lift_sup'` have been removed by virtue of being trivial consequences of basic lemmas on suprema and `lift_supr`. -->
The result of this PR is the following replacements:
* `cardinal.sup` → `supr`
* `cardinal.le_sup` → `le_csupr`
* `cardinal.sup_le` → `csupr_le'`
* `cardinal.sup_le_sup` → `csupr_mono`
* `cardinal.sup_le_sum` → `cardinal.supr_le_sum`
* `cardinal.sum_le_sup` → `cardinal.sum_le_supr`
* `cardinal.sum_le_sup_lift` → `cardinal.sum_le_supr_lift`
* `cardinal.sup_eq_zero` → `cardinal.supr_of_empty`
* `cardinal.le_sup_iff` → `le_csupr_iff'`
* `cardinal.lift_sup` → `cardinal.lift_supr`
* `cardinal.lift_sup_le` → `cardinal.lift_supr` + `csupr_le'`
* `cardinal.lift_sup_le_iff` → `cardinal.lift_supr` + `csupr_le_iff`
* `cardinal.lift_sup_le_lift_sup` → `cardinal.lift_supr` + `csupr_le_iff'`
* `cardinal.lift_sup_le_lift_sup'` → `cardinal.lift_supr` + `csupr_mono'`
* `cardinal.sup_lt_lift` → `cardinal.supr_lt_lift`
* `cardinal.sup_lt` → `cardinal.supr_lt`

2022-06-26 19:48:44 33112c4
feat(data/nat/totient): more general multiplicativity lemmas for totient (#14842)
Adds lemmas: 
`totient_gcd_mul_totient_mul : φ (a.gcd b) * φ (a * b) = φ a * φ b * (a.gcd b)`
`totient_super_multiplicative : φ a * φ b ≤ φ (a * b)`
`totient_gcd_mul_totient_mul` is Theorem 2.5(b) in Apostol (1976) Introduction to Analytic Number Theory.
Developed while reviewing @CBirkbeck 's #14828

2022-06-26 18:50:48 381733a
feat(analysis/convex/stone_separation): Stone's separation theorem (#14677)
Disjoint convexes can be separated by a convex whose complement is also convex.

2022-06-26 17:01:08 4111ed9
docs(linear_algebra/invariant_basis_number): Drop a TODO (#14973)
This TODO was fixed some time ago by @riccardobrasca, reference the relevant instance in the docstring.

2022-06-26 17:01:07 ca070dd
feat(analysis/special_functions/trigonometric/angle): topology (#14969)
Give `real.angle` the structure of a `topological_add_group` (rather
than just an `add_comm_group`), so that it's possible to talk about
continuity for functions involving this type, and add associated
continuity lemmas for `coe : ℝ → angle`, `real.angle.sin` and
`real.angle.cos`.

2022-06-26 17:01:06 28a6f0a
feat(set_theory/surreal/basic): add `numeric.mk` lemma, golf (#14962)

2022-06-26 17:01:05 54352be
feat(combinatorics/catalan): definition and equality of recursive and explicit definition (#14869)
This PR defines the Catalan numbers via the recursive definition $$C (n+1) = \sum_{i=0}^n C (i) * C (n-i)$$. 
Furthermore, it shows that $$ n+1 | \binom {2n}{n}$$ and that the alternative $$C(n)=\frac{1}{n+1} \binom{2n}{n}$$ holds. 
The proof is based on the following stackexchange answer: https://math.stackexchange.com/questions/3304415/catalan-numbers-algebraic-proof-of-the-recurrence-relation which is quite elementary, so that the proof is relatively easy to formalise.

2022-06-26 14:56:15 ee7a886
feat({data/{finset,set},order/filter}/pointwise): Missing `smul_comm_class` instances (#14963)
Instances of the form `smul_comm_class α β (something γ)`.

2022-06-26 12:02:17 32b08ef
feat: `add_monoid_with_one`, `add_group_with_one` (#12182)
Adds two type classes `add_monoid_with_one R` and `add_group_with_one R` with operations for `ℕ → R` and `ℤ → R`, resp.  The type classes extend `add_monoid` and `add_group` because those seem to be the weakest type classes where such a `+₀₁`-homomorphism is guaranteed to exist.  The `nat.cast` function as well as `coe : ℕ → R` are implemented in terms of `add_monoid_with_one R`, removing the infamous `nat.cast` diamond.  Fixes #946.
Some lemmas are less general now because the algebraic hierarchy is not fine-grained enough, or because the lawful coercion only exists for monoids and above.  This generality was not used in mathlib as far as I could tell.  For example:
 - `char_p.char_p_to_char_zero` now requires a group instead of a left-cancellative monoid, because we don't have the `add_left_cancel_monoid_with_one` class
 - `nat.norm_cast_le` now requires a seminormed ring instead of a seminormed group, because we don't have `semi_normed_group_with_one`

2022-06-26 08:42:14 871fcd8
feat(data/zmod/algebra): add subsingleton instance for zmod-algebras (#14946)
This will be used to eliminate a diamond with `galois_field.algebra` in a followup PR.

2022-06-26 08:01:37 e0ecaa9
feat(set_theory/ordinal/notation): fast growing hierarchy (#14072)
Adds a definition `onote.fast_growing` which yields elements of the [fast-growing hierarchy](https://en.wikipedia.org/wiki/Fast-growing_hierarchy) up to and including ε₀. Because it is built on `onote` instead of `ordinal`, the definition is fully computable, and you can work out some small elements. For example `fast_growing_ε₀ 2 = 2048` and `fast_growing_ε₀ 3` is... big.

2022-06-26 04:37:04 cfbb97f
feat(data/{finset,set}/basic): More `∪`/`∩` laws (#14952)
Specialise lattice lemmas to `set` and `finset`.

2022-06-26 04:37:03 ccb1cf3
feat(data/set/lattice): Preimages are disjoint iff the sets are disjoint (#14951)
Prove `disjoint (f ⁻¹' s) (f ⁻¹' t) ↔ disjoint s t` and `disjoint (f '' s) (f '' t) ↔ disjoint s t` when `f` is surjective/injective. Delete `set.disjoint_preimage` in favor of `disjoint.preimage`. Fix the statement of `set.preimage_eq_empty_iff` (the name referred to the RHS).

2022-06-26 03:02:54 72cff84
feat(order/symm_diff): The symmetric difference is involutive (#14959)
`a ∆ (a ∆ b) = b` and `b ∆ a ∆ a = b`.

2022-06-26 00:12:23 b8c3e61
refactor(*): Use `finset.Iix`/`finset.Ixi` (#14448)
Now that `finset.Iix`/`finset.Ixi` work for empty types, there is no need for `univ.filter (λ j, j < i)` and similar.

2022-06-25 21:12:47 7ee73e4
feat(data/fintype/basic): Constructing an equivalence from a left inverse (#14816)
When `f : α → β`, `g : β → α` are inverses one way and `card α ≤ card β`, then they form an equivalence.

2022-06-25 21:12:46 8812752
feat(algebra/field/basic): Semifields (#14683)
Define division semirings and semifields.

2022-06-25 20:02:11 f9571f0
feat(analysis/normed*): add instances about balls and spheres (#14808)
Non-bc change: `has_inv.inv` on the unit circle is now defined using `has_inv.inv` instead of complex conjugation.

2022-06-25 13:57:10 6f923bd
chore(*): golf (#14939)
Some golfs I made while working on a large refactor.

2022-06-25 07:57:38 07c83c8
feat(linear_algebra/clifford_algebra/of_alternating): extend alternating maps to the exterior algebra (#14803)

2022-06-24 21:45:08 4fd263b
feat(representation_theory/character): characters of representations (#14453)

2022-06-24 19:24:10 8bf85d7
feat(algebra/indicator_function): add an apply version of `mul_indicator_finset_bUnion` (#14919)

2022-06-24 19:24:09 f94a64f
feat(probability/martingale): add some lemmas for submartingales (#14904)

2022-06-24 19:24:08 40fa2d8
feat(topology/metric_space): a countably generated uniformity is metrizable (#14052)

2022-06-24 17:15:45 fe322e1
refactor(algebra/order/monoid): use typeclasses instead of lemmas (#14848)
Use `covariant_class`/`contravariant_class` instead of type-specific `mul_le_mul_left` etc lemmas. Also, rewrite some proofs to use API about inequalities on `with_top`/`with_bot` instead of the exact form of the current definition.

2022-06-24 15:26:20 0e5f278
feat(linear_algebra/{multilinear, alternating}): add `cod_restrict` and lemmas (#14927)

2022-06-24 15:26:19 3e326fc
feat(data/finite/basic): add missing instances (#14913)
* Add `finite` instances for `prod`, `pprod`, `sigma`, and `psigma`.
* Don't depend on `classical.choice` in `finite_iff_nonempty_fintype`.
* Move `not_finite_iff_infinite` up, use it to golf some proofs.

2022-06-24 15:26:17 363bbd2
chore(topology/basic): golf a proof (#14911)

2022-06-24 15:26:16 475cf37
refactor(data/polynomial): extract/add lemmas and golf (#14888)
+ Extract lemmas `roots_multiset_prod_X_sub_C`, `nat_degree_multiset_prod_X_sub_C_eq_card`, `monic_prod_multiset_X_sub_C` from the proof of `C_leading_coeff_mul_prod_multiset_X_sub_C` in *ring_division.lean*.
+ Add the lemma `exists_prod_multiset_X_sub_C_mul` in *ring_division.lean* and `roots_ne_zero_of_splits` in *splitting_field.lean* and use them to golf `nat_degree_eq_card_roots` The proof of the latter originally depends on `eq_prod_roots_of_splits`, but now the dependency reversed, with `nat_degree_eq_card_roots` now used to golf `eq_prod_roots_of_splits` (and `roots_map` as well).
+ Move `prod_multiset_root_eq_finset_root` and `prod_multiset_X_sub_C_dvd` from *field_division.lean* to *ring_division.lean* and golf the proof of the latter, generalizing `field` to `is_domain`.
+ Remove redundant imports and the lemma `exists_multiset_of_splits`, because it is just one direction of `splits_iff_exists_multiset`, and it follows trivially from `eq_prod_roots_of_splits`. It couldn't be removed before this PR because `roots_map` and `eq_prod_roots_of_splits` depended on it.
+ Golf `splits_of_exists_multiset` (independent of other changes).

2022-06-24 15:26:15 dabb0c6
feat(probability/independence): equivalent ways to check indep_fun (#14814)
Prove:
- `indep_fun f g μ ↔ ∀ s t, measurable_set s → measurable_set t → μ (f ⁻¹' s ∩ g ⁻¹' t) = μ (f ⁻¹' s) * μ (g ⁻¹' t)`,
- `indep_fun f g μ ↔ ∀ s t, measurable_set s → measurable_set t → indep_set (f ⁻¹' s) (g ⁻¹' t) μ`.

2022-06-24 15:26:14 7c2ad75
feat(field_theory.intermediate_field):  intermediate_field.inclusion (#12596)

2022-06-24 13:23:16 e420232
feat(data/int/basic): add a better `has_reflect int` instance (#14906)
This closes a todo comment in `number_theory.lucas_lehmer`.
This also merges `rat.has_reflect` with `rat.reflect` to match `nat.reflect`.

2022-06-24 13:23:15 f05c49f
feat(meta/univs): Add a reflect_name tactic, make reflected instances universe polymorphic (#14766)
The existing `list.reflect` instance only works for `Type 0`, this version works for `Type u` providing `u` is known.

2022-06-24 11:15:40 8187142
feat(data/finset/pointwise): `s • t` is the union of the `a • t` (#14696)
and a few other results leading to it. Also tag `set.coe_bUnion` with `norm_cast` and rename `finset.image_mul_prod`/`finset.add_image_prod` to `finset.image_mul_product`/`finset.image_add_product`

2022-06-24 11:15:39 6d00cc2
feat(ring_theory/trace): Add `trace_eq_sum_automorphisms`, `norm_eq_prod_automorphisms`, `normal.alg_hom_equiv_aut` (#14523)

2022-06-24 09:56:29 efe794c
chore(order/filter): turn `tendsto_id'` into an `iff` lemma (#14791)

2022-06-24 09:16:09 6cefaf4
feat(measure_theory/function/conditional_expectation): conditional expectation w.r.t. the restriction of a measure to a set (#14751)
We prove `(μ.restrict s)[f | m] =ᵐ[μ.restrict s] μ[f | m]`.

2022-06-24 01:29:11 ac2e9db
feat(data/real/{e,}nnreal): add some order isomorphisms (#14900)
* If `a` is a nonnegative real number, then
  -  `set.Icc (0 : ℝ) (a : ℝ)` is order isomorphic to `set.Iic a`;
  - `set.Iic (a : ℝ≥0∞)` is order isomorphic to `set.Iic a`;
* Also, `ℝ≥0∞` is order isomorphic both to `Iic (1 : ℝ≥0∞)` and to the unit interval in `ℝ`.
* Use the latter fact to golf `ennreal.second_countable_topology`.
* Golf `ennreal.has_continuous_inv` using `order_iso.continuous`.
* Improve definitional equalities for `equiv.subtype_subtype_equiv_subtype_exists`, `equiv.subtype_subtype_equiv_subtype_inter`, `equiv.subtype_subtype_equiv_subtype`, `equiv.set.sep`, use `simps`.

2022-06-24 01:29:10 cb94893
refactor(order/complete_lattice): `Sup` lemmas before `Inf` lemmas (#14868)
Throughout the file, we make sure that `Sup` theorems always appear immediately before their `Inf` counterparts. This ensures consistency, and makes it much easier to golf theorems or detect missing API.
We choose to put `Sup` before `Inf` rather than the other way around, since this seems to minimize the amount of things that need to be moved around, and it matches the order that we define the two operations.
We also golf a few proofs throughout, and add some missing corresponding theorems, namely:
- `infi_extend_top`
- `infi_supr_ge_nat_add`
- `unary_relation_Inf_iff`
- `binary_relation_Inf_iff`

2022-06-24 01:29:09 649ca66
chore(*): Disparate generalizations to division monoids (#14686)
The leftover changes from the introduction of `division_monoid`.

2022-06-23 23:27:42 56185bd
feat(data/finset): add some lemmas about `finset.disj_union` (#14910)

2022-06-23 20:16:37 198cb64
refactor(ring_theory): generalize basic API of `ring_hom` to `ring_hom_class` (#14756)
This PR generalizes part of the basic API of ring homs to `ring_hom_class`. This notably includes things like `ring_hom.ker`, `ideal.map` and `ideal.comap`. I left the namespaces unchanged, for example `ring_hom.ker` remains the same even though it is now defined for any `ring_hom_class` morphism; this way dot notation still (mostly) works for actual ring homs.

2022-06-23 16:23:10 44d3fc0
chore(data/nat,int): move field-specific lemmas about cast (#14890)
I want to refer to the rational numbers in the definition of a field, meaning we can't have `algebra.field.basic` in the transitive imports of `data.rat.basic`.
This is a step in rearranging those imports: remove the definition of a field from the dependencies of the casts `ℕ → α` and `ℤ → α`, where `α` is a (semi)ring.

2022-06-23 16:23:08 c3e3d1a
feat(data/set): replace `set_coe.can_lift` by `subtype.can_lift` (#14792)

2022-06-23 16:23:07 4de20c5
feat(analysis/../log): log_nat_eq_sum_factorization (#14782)

2022-06-23 16:23:06 c2fcf9f
feat(data/polynomial/erase_lead): Characterizations of polynomials of small support (#14500)
This PR adds iff-lemmas `card_support_eq_one`, `card_support_eq_two`, and `card_support_eq_three`. These will be useful for irreducibility of x^n-x-1.

2022-06-23 14:10:06 ef24ace
feat(order/hom/basic): some lemmas about order homs and equivs  (#14872)
A few lemmas from #11053, which I have seperated from the original PR following @riccardobrasca's suggestion.

2022-06-23 14:10:05 dd2e7ad
feat(analysis/convex/strict_convex_space): isometries of strictly convex spaces are affine (#14837)
Add the result that isometries of (affine spaces for) real normed
spaces with strictly convex codomain are affine isometries.  In
particular, this applies to isometries of Euclidean spaces (we already
have the instance that real inner product spaces are uniformly convex
and thus strictly convex).  Strict convexity means the surjectivity
requirement of Mazur-Ulam can be avoided.

2022-06-23 14:10:04 966bb24
feat(group_theory/finite_abelian): Structure of finite abelian groups (#14736)
Any finitely generated abelian group is the product of a power of `ℤ` and a direct sum of some `zmod (p i ^ e i)` for some prime powers `p i ^ e i`.
Any finite abelian group is a direct sum of some `zmod (p i ^ e i)` for some prime powers `p i ^ e i`.
(TODO : prove uniqueness of this decomposition)

2022-06-23 14:10:03 cff439d
feat(analysis/seminorm): add add_group_seminorm (#14336)
We introduce `add_group_seminorm` and refactor `seminorm` to extend this new definition. This new `add_group_seminorm` structure will also be used in #14115 to define `ring_seminorm`.

2022-06-23 14:10:01 585a1bf
feat(number_theory): define ramification index and inertia degree (#14332)
We define ramification index `ramification_idx` and inertia degree `inertia_deg` for `P : ideal S` over `p : ideal R` given a ring extension `f : R →+* S`. The literature generally assumes `p` is included in `P`, both are maximal, `R` is the ring of integers of a number field `K` and `S` is the integral closure of `R` in `L`, a finite separable extension of `K`; we relax these assumptions as much as is practical.

2022-06-23 11:58:10 cc4b8e5
feat(data/sigma,data/ulift,logic/equiv): add missing lemmas (#14903)
Add lemmas and `equiv`s about `plift`, `psigma`, and `pprod`.

2022-06-23 10:25:45 cf23199
chore(number_theory/lucas_lehmer): remove `has_to_pexpr` instances (#14905)
These instances are sort of out-of-place, and aren't really needed anyway.
We already use the more verbose ``%%`(n)`` notation elsewhere in mathlib, which as an operation makes more conceptual sense.
Until #14901 these two instances were just special cases of `has_reflect.has_to_pexpr`. While unlike that instance these two instances are not diamond-forming, they're unecessary special cases that make antiquoting harder to understand.

2022-06-22 23:55:53 416edbd
chore(ring_theory/polynomial/symmetric): golf proofs (#14866)

2022-06-22 21:42:36 c45e5d5
fix(meta/expr): remove `has_reflect.has_to_pexpr` (#14901)
This instance (introduced in #3477) forms a diamond with the builtin `pexpr.has_to_pexpr`:
```lean
import meta.expr
#eval show tactic unit, from do
  let i1 : has_to_pexpr pexpr := pexpr.has_to_pexpr,
  let i2 : has_to_pexpr pexpr := has_reflect.has_to_pexpr,
  let e := ``(1),
  let p1 := @to_pexpr _ i1 e,
  let p2 := @to_pexpr _ i2 e,
  guard (p1 = p2) -- fails
```
The consequence is that in cases where `bar` is not a `pexpr` or `expr` but a value to be reflected, ``` ``(foo %%bar) ``` now has to be written ``` ``(foo %%`(bar)) ```; a spelling already used in various existing files.
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Instance.20diamonds.20in.20has_to_pexpr/near/287083928)

2022-06-22 18:31:24 2a732ed
chore(analysis/special_functions/log/basic): golf a proof (#14898)

2022-06-22 18:31:23 23918a5
feat(order/filter/basic): add some lemmas about `eventually_le` (#14891)

2022-06-22 18:31:21 12e5f2e
refactor(data/set/countable): make `set.countable` protected (#14886)
I'm going to add `_root_.countable` typeclass, a data-free version of `encodable`.

2022-06-22 18:31:20 d8fc588
refactor(data/finite/card): split from `basic` (#14885)

2022-06-22 18:31:18 c2719ad
feat(topology/basic): `sum.elim` of locally finite set families is locally finite (#14826)

2022-06-22 18:31:17 44bb35e
feat({algebra/big_operators/basic,data/rat/cast}): Missing cast lemmas (#14824)
`rat.cast_sum`, `rat.cast_prod` and `nat`, `int` lemmas about `multiset` and `list` big operators.

2022-06-22 16:29:05 38642ef
chore(data/rat): rename `data.rat.basic` to `data.rat.defs` (#14895)
This is a preparatory step for PR #14893 that moves only the `field ℚ` instance (and its small set of dependencies) back to `data.rat.basic`; doing this in two moves should produce a neater set of diffs.

2022-06-22 16:29:04 f57c0cd
chore(algebra/{group_power,order}): split off field lemmas (#14849)
I want to refer to the rational numbers in the definition of a field, meaning we can't have `algebra.field.basic` in the transitive imports of `data.rat.basic`.
This is half of rearranging those imports: remove the definition of a field from the dependencies of basic lemmas about `nsmul`, `npow`, `zsmul` and `zpow`.

2022-06-22 13:46:51 d939b0e
feat(topology/vector_bundle/hom): define the vector bundle of continuous linear maps (#14541)
* The changes in `topology/fiber_bundle` are not necessary for this PR, but perhaps nice additions
* Co-authored by: Heather Macbeth <25316162+hrmacbeth@users.noreply.github.com>
* Co-authored by: Patrick Massot <patrick.massot@u-psud.fr>

2022-06-22 08:58:26 ad49768
feat(set_theory/surreal/basic): define map `surreal →+o game` (#14783)

2022-06-22 04:11:06 61b837f
feat(combinatorics/simple_graph/connectivity): Connectivity is a graph property (#14865)
`simple_graph.preconnected` and `simple_graph.connected` are preserved under graph isomorphisms.

2022-06-22 02:09:00 f3cd150
fix(tactic/apply_fun.lean): instantiate mvars in apply_fun (#14882)
Fixes leanprover-community/lean#733

2022-06-21 16:31:41 3b6552e
chore(linear_algebra/alternating): more lemmas about `curry_left` (#14844)
This follows on from #14802

2022-06-21 16:31:40 d953773
feat(data/finsupp/basic): make `prod_add_index_of_disjoint` to_additive (#14786)
Adds lemma `sum_add_index_of_disjoint (h : disjoint f1.support f2.support) (g : α → M → β) : (f1 + f2).sum g = f1.sum g + f2.sum g`

2022-06-21 16:31:39 3e66afe
feat(data/sigma): add reflected instance (#14764)

2022-06-21 16:31:38 b779513
feat(order/conditionally_complete_lattice): add `cInf_le_cInf'` (#14719)
A version of `cInf_le_cInf` for `conditionally_complete_linear_order_bot`

2022-06-21 14:57:41 2d70b94
golf(data/polynomial): factorization into linear factors when #roots=degree  (#14862)
+ Golf the proofs of `prod_multiset_X_sub_C_of_monic_of_roots_card_eq` and `C_leading_coeff_mul_prod_multiset_X_sub_C` and move them from *splitting_field.lean* to *ring_division.lean*; instead of using the former to deduce the latter as is currently done in mathlib, we prove the latter first and deduce the former easily. Remove the less general auxiliary, `private` `_of_field` versions.
+ Move `pairwise_coprime_X_sub` from *field_division.lean* to *ring_division.lean*. Rename it to `pairwise_coprime_X_sub_C` to conform with existing convention. Golf its proof using the more general new lemma `is_coprime_X_sub_C_of_is_unit_sub`.
+ Golf `monic.irreducible_of_irreducible_map`, but it's essentially the same proof.

2022-06-21 14:57:40 ee12362
feat(topology/metric_space/basic): Add `ball_comm` lemmas (#14858)
This adds `closed_ball` and `sphere` comm lemmas to go with the existing `mem_ball_comm`.

2022-06-21 13:23:46 2b5a577
doc(data/polynomial/div): fix runaway code block (#14864)
Also use a fully-qualilfied name for linking

2022-06-21 13:23:45 65031ca
feat(ring_theory/dedekind_domain/ideal): drop an unneeded assumption (#14444)

2022-06-21 11:26:39 273986a
fix(topology/algebra/group_completion): add lemmas about nsmul and zsmul and fix diamonds (#14846)
This prevents a diamond forming between `uniform_space.completion.has_scalar` and the default `add_monoid.nsmul` and `sub_neg_monoid.zsmul` fields; by manually defining the latter to match the former.
To do this, we add two new instances of `has_uniform_continuous_smul` for nat- and int- actions.
To use the existing scalar actions, we had to shuffle the imports around a bit.

2022-06-21 11:26:38 2a7bde0
feat(data{finset,set}/pointwise): Pointwise monoids are domains (#14687)
`no_zero_divisors`/`no_zero_smul_divisors` instances for `set` and `finset`.

2022-06-21 09:14:05 481f991
refactor(algebra/{hom/equiv, ring/equiv}): rename `equiv_of_unique_of_unique` to `equiv_of_unique` (#14861)
This matches [`equiv.equiv_of_unique`](https://leanprover-community.github.io/mathlib_docs/logic/equiv/basic.html#equiv.equiv_of_unique).

2022-06-21 07:18:59 e1d7cc7
chore(set_theory/game/*): create `pgame` and `natural_ops` locales (#14856)

2022-06-21 07:18:57 67e026c
fix(tactic/norm_num): fix bad proof / bad test (#14852)
This is a bug in master but it was first noticed in #14683.

2022-06-21 05:57:01 8ac19d3
chore(data/finsupp/fin): fix spacing (#14860)

2022-06-21 04:38:57 326465d
chore(set_theory/ordinal/natural_ops): use derive (#14859)

2022-06-21 01:37:43 3b5441c
feat(data/fintype/basic): equivalence between `finset α` and `set α` for `fintype α` (#14840)

2022-06-21 00:01:30 87f4758
feat(polynomial/ring_division): strengthen/generalize various lemmas (#14839)
+ Generalize the assumption `function.injective f` in `le_root_multiplicity_map` to `map f p ≠ 0`. Strictly speaking this is not a generalization because the trivial case `p = 0` is excluded. If one do want to apply the lemma without assuming `p ≠ 0`, they can use the newly introduced `eq_root_multiplicity_map`, which is a strengthening of the original lemma (with the same hypothesis `function.injective f`).
+ Extract some common `variables` from four lemmas.
+ Generalize `eq_of_monic_of_dvd_of_nat_degree_le` to `eq_leading_coeff_mul_of_monic_of_dvd_of_nat_degree_le`: if a polynomial `q` is divisible by a monic polynomial `p` and has degree no greater than `p`, then `q = p`. Also remove the `is_domain` hypothesis and golf the proof.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/multiplicity.20of.20root.20in.20extension.20field/near/286736361)

2022-06-20 22:02:23 125055b
refactor(data/sym/basic): change notation for sym.cons (#14853)
Switch from `::` to `::ₛ` for `sym.cons` so that it no longer conflicts with `list.cons`. This (finally) puts it in line with other notations, like `::ₘ` for `multiset.cons`.

2022-06-20 16:13:29 9df2762
chore(data/nat/totient): golf a proof (#14851)

2022-06-20 13:49:56 f855a4b
feat(order/monotone): Monotonicity of `prod.map` (#14843)
If `f` and `g` are monotone/antitone, then `prod.map f g` is as well.

2022-06-20 13:49:55 66d3f89
feat(logic/unique): functions from a `unique` type is `const` (#14823)
+ A function `f` from a `unique` type is equal to the constant function with value `f default`, and the analogous heq version for dependent functions.
+ Also changes `Π a : α, Sort v` in the file to `α → Sort v`.
Inspired by https://github.com/leanprover-community/mathlib/pull/14724#discussion_r900542203

2022-06-20 13:49:54 0b806ba
docs(linear_algebra): refer to `pi.basis_fun` in `pi.basis` (#14505)
This is a common question so the more ways we can point to the standard basis, the better!
See also Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Standard.20basis

2022-06-20 11:25:39 c781c0e
feat(data/prod/basic): Involutivity of `prod.map` (#14845)
If `f` and `g` are involutive, then so is `prod.map f g`.

2022-06-20 11:25:38 c1abe06
refactor(linear_algebra/exterior_algebra): redefine `exterior_algebra` as `clifford_algebra 0` (#14819)
The motivation here is to avoid having to duplicate API between these two types, else we end up having to repeat every definition that works on `clifford_algebra Q` on `exterior_algebra` for the case when `Q = 0`. This also:
* Removes `as_exterior : clifford_algebra (0 : quadratic_form R M) ≃ₐ[R] exterior_algebra R M` as the two types are reducibly defeq.
* Removes support for working with exterior algebras over semirings; while it is entirely possible to generalize `clifford_algebra` to semirings to make this removal unnecessary, it creates difficulties with elaboration, and the support for semirings was without mathematical motivation in the first place. This is in line with a [vote on Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Exterior.20algebras.20over.20semiring/near/286660821).
The consequences are:
* A bunch of redundant code can be removed
* `x.reverse` and `x.involute` should now work on `x : exterior_algebra R M`.
* Future API will extend effortlessly from one to the other

2022-06-20 11:25:37 320ea39
feat(data/dfinsupp/basic): add missing lemmas about `single` (#14815)
These lemmas were missed in #13076:
* `comap_domain_single`
* `comap_domain'_single`
* `sigma_curry_single`
* `sigma_uncurry_single`
* `extend_with_single_zero`
* `extend_with_zero`
These are useful since many induction principles replace a generic `dfinsupp` with `dfinsupp.single`.

2022-06-20 11:25:36 c5e13ba
feat(algebra/order/pointwise): Supremum of pointwise operations (#13669)
Pointwise operations of sets distribute over the (conditional) supremum/infimum.

2022-06-20 09:15:57 f9c339e
feat(group_theory/group_action/sigma): Scalar action on a sigma type (#14825)
`(Π i, has_scalar α (β i)) → has_scalar α (Σ i, β i)` and similar.

2022-06-20 09:15:55 ff40b2c
chore(algebra/group/basic): lemmas about `bit0`, `bit1`, and addition (#14798)

2022-06-20 09:15:53 df50b88
feat(order/filter/bases): basis for directed (b)infi of filters (#14775)

2022-06-20 09:15:51 2604c04
feat(number_theory/number_field): add definitions and results about embeddings  (#14749)
We consider the embeddings of a number field into an algebraic closed field (of char. 0) and prove some results about those. 
We also prove the ```number_field``` instance  for ```adjoint_root``` of an irreducible polynomial of `ℚ[X]`. 
From flt-regular

2022-06-20 09:15:48 8263a4b
refactor(analysis/complex/upper_half_plane): move topology to a new file (#14748)
Also add some instances and lemmas about topology on the upper half plane.

2022-06-20 09:15:46 804afcb
feat(geometry/manifold/diffeomorph): some additions needed for smooth vector bundles (#14738)
* Define `diffeomorph.prod_comm`, `diffeomorph.prod_congr`, `diffeomorph.prod_assoc`
* Prove `cont_mdiff_on.comp_cont_mdiff`
* In `fiber_bundle`, define some lemmas for `local_triv_at` that were already there for `local_triv`
* Yes, this PR does a couple different things, but it is still very small
* This is part of #14412

2022-06-20 09:15:45 04f4505
feat(analysis/convex/join): Join of sets (#14676)
Define the join of two sets as the union of all segments between them.

2022-06-20 07:16:13 2903674
refactor(order/conditionally_complete_lattice): tweak `well_founded.conditionally_complete_linear_order_with_bot` (#14706)
We change the `well_founded` assumption on `well_founded.conditionally_complete_linear_order_bot` to an equivalent but more convenient `is_well_order` typeclass assumption. As such, we place it in the `is_well_order` namespace.

2022-06-20 04:10:04 ae5b695
refactor(number_theory/cyclotomic/*): refactor the definition of is_cyclotomic_extension (#14463)
We modify the definition of `is_cyclotomic_extension`, requiring the existence of a primitive root of unity rather than a root of the cyclotomic polynomial. This removes almost all the `ne_zero` assumptions.

2022-06-20 00:03:55 10a5275
feat(analysis/normed/group/basic): `isometry.norm_map_of_map_zero` (#14836)
Add the lemma that an isometry of `semi_normed_group`s that preserves
0 preserves the norm.

2022-06-19 23:24:05 cf118ee
feat(analysis/complex/upper_half_plane): add `upper_half_plane.mk` (#14795)

2022-06-19 17:24:08 26279c5
chore(algebraic_geometry/function_field): fix timeout in `function_field.algebra` (#14830)
Reduces `elaboration of function_field.algebra` from ~29.3s to ~0.4s.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/deterministic.20timeout/near/286714162)

2022-06-19 16:13:12 65c9ffb
feat(topology/algebra/infinite_sum) Sums over Z vs sums over N (#14667)
This PR adds some functions for handling infinite sums indexed by the integers, relating them to sums over the naturals.

2022-06-19 12:34:38 f460576
feat(group_theory/group_action/sum): Scalar action on a sum of types (#14818)
`has_scalar α β → has_scalar α γ → has_scalar α (β ⊕ γ)` and similar.

2022-06-19 09:55:31 5dabef8
feat(set_theory/game/basic): Basic lemmas on `inv` (#13840)
Note that we've redefined `inv` so that `inv x = 0` when `x ≈ 0`. This is because, in order to lift it to an operation on surreals, we need to prove that equivalent numeric games give equivalent numeric values, and this isn't the case otherwise.

2022-06-19 09:12:48 69686e7
feat(algebra/category/Module): Tannaka duality for rings (#14352)
Obviously this is not the most interesting statement that one might label "Tannaka duality", but perhaps it can get the ball rolling. :-)

2022-06-19 07:01:49 7f358d0
feat(category_theory/preadditive/eilenberg_moore): (Co)algebras over a (co)monad are preadditive (#14811)
The category of algebras over an additive monad on a preadditive category is preadditive (and the dual result).

2022-06-18 19:10:48 0a5b9eb
feat(set_theory/game/pgame): tweak lemmas (#14810)
This PR does the following:
- uncurry `le_of_forall_lf` and `le_of_forall_lt`.
- remove `lf_of_exists_le`, as it's made redundant by `lf_of_move_right_le` and `lf_of_le_move_left`.
- golfing.

2022-06-18 16:59:43 4264220
feat(analysis/asymptotics): add several lemmas (#14805)
Also make `𝕜` explicit in `asymptotics.is_O_with_const_one` and `asymptotics.is_O_const_one`.

2022-06-18 16:59:42 100975e
feat(geometry/euclidean/inversion) new file (#14692)
* Define `euclidean_geometry.inversion`.
* Prove Ptolemy's inequality.

2022-06-18 16:59:41 92d5fdf
feat(topology/metric_space/baire): generalize some lemmas (#14633)
Add `is_Gδ.dense_{s,b,}Union_interior_of_closed`.

2022-06-18 16:59:40 f1b0402
feat(tactic/core + test/list_summands): a function extracting a list of summands from an expression (#14617)
This meta def is used in #13483, where `move_add` is defined.
A big reason for splitting these 5 lines off the main PR is that they are not in a leaf of the import hierarchy: this hopefully saves lots of CI time, when doing trivial changes to the main PR.

2022-06-18 15:26:18 3a8e0a1
feat(group_theory/torsion): define the p-primary component of a group (#14312)

2022-06-18 12:50:23 3abee05
chore(order/pfilter): more `principal` API (#14759)
`principal` and `Inf` form a Galois coinsertion.

2022-06-18 09:28:02 39986ae
chore(data/nat/lattice): add `nat.infi_of_empty` to match `_root_.infi_of_empty` (#14797)

2022-06-18 08:28:16 7fb5ed2
feat(data/complex/basic): add `complex.abs_le_sqrt_two_mul_max` (#14804)

2022-06-17 23:41:50 bd6b98b
feat(linear_algebra/alternating): add more compositional API (#14802)
These will be helpful in relating `alternating_map`s to the `exterior_algebra`.
This adds:
* `alternating_map.curry_left`
* `alternating_map.const_linear_equiv_of_is_empty`
* `alternating_map.dom_dom_congr`

2022-06-17 23:41:49 0c47657
chore(order/symm_diff): add lemma about `bxor` (#14801)

2022-06-17 22:43:38 4ff9e93
feat(analysis/complex/basic): add a few lemmas about `dist` on `complex` (#14796)

2022-06-17 20:37:43 d2369bc
feat(data/set/intervals): add two `ssubset` lemmas (#14793)

2022-06-17 18:57:26 e23de85
feat(algebra/algebra/basic) : add ring_hom.equiv_rat_alg_hom (#14772)
Proves the equivalence between `ring_hom` and `rat_alg_hom`.
From flt-regular

2022-06-17 17:39:07 260d472
feat(order/topology/**/uniform*): Lemmas about uniform convergence (#14587)
To prove facts about uniform convergence, it is often useful to manipulate the various functions without dealing with the ε's and δ's. To do so, you need auxiliary lemmas about adding/muliplying/etc Cauchy sequences.
This commit adds several such lemmas. It supports #14090, which we're slowly transforming to use these lemmas instead of doing direct ε/δ manipulation.

2022-06-17 16:27:29 545f0fb
feat(category_theory/monad/kleisli): dualise kleisli of monad to cokleisli of comonad (#14799)
This PR defines the (co)Kleisli category of a comonad, defines the corresponding adjunction, and proves that it gives rise to the original comonad.

2022-06-17 15:08:42 ade72ab
refactor(linear_algebra/quadratic_form/basic): generalize to semiring (#14303)
This uses a slightly nicer strategy than the one suggested by @adamtopaz [on Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Exterior.20algebras.20over.20semiring/near/282808284).
The main motivation here is to be able to talk about `0 : quadratic_form R M` even when there is no negation available, as that will let us merge `clifford_algebra`  (which currently requires negation) and `exterior_algebra` (which does not).
It's likely this generalization is broadly not very useful, so this adds a `quadratic_form.of_polar` constructor to preserve the old more convenient API.
Note the `.bib` file changed slightly as I ran the autoformatting tool.

2022-06-17 13:35:37 9c2b890
feat(group_theory/sylow): API lemmas for smul and subtype  (#14521)
This PR adds some API lemmas for smul and subtype.

2022-06-17 11:03:20 0be36f6
feat(data/list/of_fn): Add `list.of_fn_add` and `list.of_fn_mul` (#14370)
This adds some lemmas to split up lists generated over `fin (n + m)` and `fin (n * m)` into their constituent parts.
It also adds a congr lemma to allow `list.of_fn (λ i : fin n, _)` to be rewritten into `list.of_fn (λ i : fin m, _)` by `simp` when `h : n = m` is available.
I'll need these eventually to prove some things about products of tensor powers.

2022-06-17 08:38:50 e427a0e
feat(set/basic, order/boolean_algebra): generalized `compl_comp_compl` (#14784)
This PR generalizes `compl_comp_compl` to apply whenever there is a `boolean_algebra` instance. We also make the set parameter of `compl_compl_image` explicit.

2022-06-17 01:10:15 d21469e
feat(set_theory/ordinal/basic): improve docs on `lift`, add `simp` lemmas (#14599)
This is pretty much the same thing as #14596, just on `ordinal.lift` instead of `cardinal.lift`.

2022-06-16 22:34:16 d0b93fa
feat(set_theory/{pgame, basic}): Notation for `relabelling`, golfing (#14155)
We introduce the notation `≡r` for relabellings between two pre-games. We also golf many theorems on relabellings.

2022-06-16 19:20:25 ae10dce
feat(algebra/direct_sum/decomposition): add decompositions into a direct sum (#14626)
This is a constructive version of `direct_sum.is_internal`, and generalizes the existing `graded_algebra`.
The main user-facing changes are:
* `graded_algebra.decompose` is now spelt `direct_sum.decompose_alg_hom`
* The simp normal form of decomposition is now `direct_sum.decompose`.
* `graded_algebra.support 𝒜 x` is now spelt `(decompose 𝒜 x).support`
* `left_inv` and `right_inv` has swapped, now with meaning "the decomposition is the (left|right) inverse of the canonical map" rather than the other way around
To keep this from growing even larger, I've left `graded_algebra.proj` alone for a future refactor.

2022-06-16 19:20:24 67da272
feat(analysis/inner_product_space): Gram-Schmidt Basis (#14514)
When the Gram-Schmidt procedure is given a basis, it produces a basis.
This pull request also refactors the lemma `gram_schmidt_span`. The new versions of the lemmas cover the span of `Iio`, the span of `Iic` and the span of the complete set of input vectors. I was also able to remove some type classes in the process.

2022-06-16 15:46:22 988f160
fix(data/rat/basic): Remove incorrect simp attribute (#14765)
Remove simp attribute that breaks `field_simp`.

2022-06-16 15:46:20 6c46641
feat(linear_algebra/clifford_algebra/fold): Add recursors for folding along generators (#14619)
This adds `clifford_algebra.fold{l,r}` and `clifford_algebra.{left,right}_induction`.
The former are analogous to `list.foldl` and `list.foldr`, while the latter are two stronger variants of `clifford_algebra.induction`.
We don't bother duplicating these for the `exterior_algebra`, as a future PR will make `exterior_algebra = clifford_algebra 0` true by `rfl`.
This construction can be used to show:
* `clifford_algebra Q ≃ₗ[R] exterior_algebra R M` (when `invertible 2`)
* `clifford_algebra Q ≃ₐ[R] clifford_algebra.even (Q' Q)` (where `Q' Q` is a quadratic form over an augmented `V`)
These will follow in future PRs.

2022-06-16 15:46:18 7584a10
feat(set_theory/game/ordinal): addition of ordinals on games matches natural addition (#14298)

2022-06-16 12:52:06 b05d845
feat(data/nat/basic): add a few lemmas (#14718)
Add a few lemmas about sub and mod.

2022-06-16 11:52:28 3feb151
feat(algebra/homology,category_theory/abelian): exact_comp_mono_iff (#14410)
From LTE.

2022-06-16 02:53:25 6834a24
feat(analysis/asymptotics): define `is_Theta` (#14567)
* define `f =Θ[l] g` and prove basic properties;
* add `is_O.const_smul_left`, `is_o.const_smul_left`;
* rename `is_O_const_smul_left_iff` and `is_o_const_smul_left_iff` to
  `is_O_const_smul_left` and `is_o_const_smul_left`.

2022-06-16 02:00:04 0053e3c
feat(analysis/special_functions/arsinh): add lemmas, review API (#14668)

2022-06-16 02:00:03 22f3255
refactor(set_theory/game/*): Delete `winner.lean` (#14271)
The file `winner.lean` currently consists of one-line definitions and theorems, including aliases for basic inequalities. This PR removes the file, inlines all previous definitions and theorems, and golfs various proofs in the process.

2022-06-15 23:36:05 f991b4d
chore(*): Bump to Lean 3.43.0 (#14684)
Most of the changes in this upgrade are a consequence of https://github.com/leanprover-community/lean/pull/675, which removed almost all of `init/data/set.lean` from lean core so it could be migrated to mathlib. Other relevant core changes are https://github.com/leanprover-community/lean/pull/714, which removed a few order decidability instances, and https://github.com/leanprover-community/lean/pull/711, which caused a docstring to be rejected.

2022-06-15 21:34:32 c81c6c9
feat(data/polynomial/erase_lead): `lt_nat_degree_of_mem_erase_lead_support` (#14745)
This PR adds a lemma `lt_nat_degree_of_mem_erase_lead_support` and adds term-mode proofs of a couple related lemmas.

2022-06-15 21:34:31 ea2dbcb
feat(analysis/special_functions/integrals): Add integral_cpow (#14491)
Also adds various helper lemmas.
The purpose of this commit is to provide a computed integral for the `cpow` function. The proof is functionally identical to that of `integral_rpow`, but places a different set of constraints on the various parameters due to different continuity constraints of the cpow function.
Some notes on future improvments:
  * The range of valid integration can be expanded using ae_covers a la #14147
  * We currently only contemplate a real argument. However, this should essentially work for any continuous path in the complex plane that avoids the negative real axis. That would require a lot more machinery, not currently in mathlib.
Despite these restrictions, why is this important? This, Abel summation, #13500, and #14090 are the key ingredients to bootstrapping Dirichlet series.

2022-06-15 21:34:27 7145043
feat(algebra/group/pi): Technical casework lemma for when two binomials are equal to each other (#14400)
This PR adds a technical casework lemma for when two binomials are equal to each other. It will be useful for irreducibility of x^n-x-1. If anyone can see how to golf the proof further, that would be appreciated!

2022-06-15 18:51:17 665cec2
chore(data/nat/factorization/basic): delete two duplicate lemmas (#14754)
Deleting two lemmas introduced in #14461 that are duplicates of lemmas already present, as follows:
```
lemma div_factorization_pos {q r : ℕ} (hr : nat.prime r) (hq : q ≠ 0) :
  q / (r ^ (q.factorization r)) ≠ 0 := div_pow_factorization_ne_zero r hq
```
```
lemma ne_dvd_factorization_div {q r : ℕ} (hr : nat.prime r) (hq : q ≠ 0) :
  ¬(r ∣ (q / (r ^ (q.factorization r)))) := not_dvd_div_pow_factorization hr hq
```

2022-06-15 18:51:16 a583244
feat(representation_theory/Action): a few lemmas about the rigid structure of Action (#14620)

2022-06-15 18:51:15 c4ef20e
feat(order/rel_classes): an irreflexive order on a subsingleton type is a well order (#14601)
This generalizes a previously existing lemma that the empty relation on a subsingleton type is a well order.

2022-06-15 17:10:38 94fa33b
fix(tactic/congrm): support multiple binders (#14753)

2022-06-15 17:10:37 430da94
chore(analysis/normed): move `normed.normed_field` to `normed.field.basic` (#14747)

2022-06-15 17:10:36 6a0f967
feat(data/finite/set): `finite` instances for set constructions (#14673)

2022-06-15 17:10:35 8eaeec2
chore(a few random files): golfing using the new tactic `congrm` (#14593)
This PR is simply intended to showcase some possible applications of the new tactic `congrm`, introduced in #14153.

2022-06-15 14:55:51 34ce784
refactor(algebra/group_with_zero/basic): Golf using division monoid lemmas (#14213)
Make all eligible `group_with_zero` lemmas one-liners from `division_monoid` ones and group them within the file.

2022-06-15 14:55:50 bbca289
feat(dynamics/periodic_pts): `chain.pairwise` on orbit (#12991)
We prove that a relation holds pairwise on an orbit iff it does for `f^[n] x` and `f^[n+1] x` for any `n`.

2022-06-15 13:13:12 4661473
chore(analysis/normed/normed_field): golf 2 proofs (#14746)

2022-06-15 13:13:11 dccdef6
chore(set_theory/ordinal/basic): golf ordinal addition definition (#14744)

2022-06-15 13:13:10 d2bfb32
feat(analysis/normed_space): range of `norm` (#14740)
* Add `exists_norm_eq`, `range_norm`, `range_nnnorm`, and `nnnorm_surjective`.
* Open `set` namespace.

2022-06-15 13:13:09 2aa3fd9
feat(analysis/convex): a convex set is contractible (#14732)

2022-06-15 13:13:08 7430d2d
feat(data/complex/exponential): more `simp` lemmas (#14731)
Add `simp` attrs and `simp` lemmas.

2022-06-15 13:13:07 fee91d7
feat(data/fin/vec_notation): add has_reflect instance and tests (#14670)

2022-06-15 13:13:06 764d7a9
feat(probability/stopping): first hitting time (#14630)
This PR adds the first hitting time (before some time) and proves that it is a stopping time in the discrete case.

2022-06-15 13:13:04 947c3c6
refactor(order/locally_finite): Allow `finset.Iix`/`finset.Ixi` on empty types (#14430)
Define `locally_finite_order_top` and `locally_finite_order_bot` are redefine `Ici`, `Ioi`, `iic`, `Iio` using them. Those new typeclasses are the same as `locally_finite_order` + `order_top`/`order_bot`, except that they allow the empty type, which is a surprisingly useful feature.

2022-06-15 11:13:37 114f543
feat(model_theory/semantics, elementary_maps): Defines elementary equivalence (#14723)
Defines elementary equivalence of structures
Shows that the domain and codomain of an elementary map are elementarily equivalent.

2022-06-15 11:13:36 9c40f30
refactor(set_theory/game/*): fix theorem names (#14685)
Some theorems about `exists` had `forall` in the name, other theorems about swapped `≤` or `⧏` used `le` and `lf` instead of `ge` and `gf`.
We also golf `le_of_forall_lt`.

2022-06-15 11:13:35 c667723
feat(model_theory/syntax, semantics): Mapping formulas given maps on terms and relations (#14466)
Defines `first_order.language.bounded_formula.map_term_rel`, which maps formulas given maps on terms and maps on relations.

2022-06-15 11:13:33 ea97606
feat(tactic/ring): recursive ring_nf (#14429)
As [reported on Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60ring_nf.60.20not.20consistently.20normalizing.3F). This allows `ring_nf` to rewrite inside the atoms of a ring expression, meaning that things like `f (a + b) + c` can simplify in both `+` expressions.

2022-06-15 10:32:10 6e0e270
feat(linear_algebra/matrix): positive definite (#14531)
Define positive definite matrices and connect them to positive definiteness of quadratic forms.

2022-06-15 09:13:28 784c703
docs(topology/basic): Fix typo in library note (#14743)

2022-06-15 08:32:58 1fbe118
golf(set_theory/game/pgame): golf `neg_le_neg_iff` (#14726)
Also in this PR:
+ slightly golf `subsequent.trans`
+ replace `->` by `→`
+ replace a nonterminal `simp` by `dsimp`

2022-06-15 08:32:57 7958e7d
chore(analysis/convex/extreme): Make arguments semi-implicit (#14698)
Change the definition of `is_extreme` from
```
B ⊆ A ∧ ∀ x₁ x₂ ∈ A, ∀ x ∈ B, x ∈ open_segment 𝕜 x₁ x₂ → x₁ ∈ B ∧ x₂ ∈ B
```
to
```
B ⊆ A ∧ ∀ ⦃x₁⦄, x₁ ∈ A → ∀ ⦃x₂⦄, x₂ ∈ A → ∀ ⦃x⦄, x ∈ B → x ∈ open_segment 𝕜 x₁ x₂ → x₁ ∈ B ∧ x₂ ∈ B
```
and similar for `extreme_points`.

2022-06-15 07:00:25 6b4f3f2
feat(data/nat/prime): prime.even_iff (#14688)
Adds a lemma saying that the only even prime is two.

2022-06-15 04:54:47 e86ab0b
refactor(src/algebra/order/monoid): make bot_eq_zero a simp lemma only when the order is linear (#14553)

2022-06-15 04:54:45 b4b816c
feat(number_theory/cyclotomic/primitive_roots): generalize finrank lemma  (#14550)
We generalize certain results from fields to domains.

2022-06-15 03:13:18 38ad656
chore(field_theory/intermediate_field): fix timeout (#14725)
+ Remove `@[simps]` from `intermediate_field_map` to reduce `decl post-processing of intermediate_field_map` from 18.3s to 46.4ms (on my machine).
+ Manually provide the two `simp` lemmas previously auto-generated by `@[simps]`. Mathlib compiles even without the two simp lemmas (see commit 1f5a7f1), but I am inclined to keep them in case some other branches/projects are using them.
[Zulip reports](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/deterministic.20timeout/near/285792556) about `intermediate_field_map` causing timeout in two separate branches

2022-06-15 03:13:17 dd4d8e6
feat(logic/hydra): basic lemmas on `cut_expand` (#14408)

2022-06-15 03:13:16 a16f1cf
feat(set_theory/game/basic): cast inequalities on `pgame` to `game` (#14405)

2022-06-15 00:05:51 bf2edb5
feat(data/vector/basic): reflected instance for vectors (#14669)
This means that a `vector` from a tactic block can be used in an expression.

2022-06-15 00:05:50 b134b2f
refactor(set_theory/game/state): rename `pgame.of` to `pgame.of_state` (#14658)
This is so that we can redefine `pgame.of x y = {x | y}` in #14659. Further, this is just a much clearer name.

2022-06-15 00:05:49 7b2970f
feat(set_theory/cardinal/basic): improve docs on `lift`, add `simp` lemmas (#14596)
We add some much needed documentation to the `cardinal.lift` API.  We also mark a few extra lemmas with `simp`.

2022-06-15 00:05:48 2e2d515
feat(data/nat/factorization): add lemma `coprime_of_div_pow_factorization` (#14576)
Add lemma `coprime_of_div_pow_factorization (hp : prime p) (hn : n ≠ 0) : coprime p (n / p ^ n.factorization p)`
Prompted by [this Zulip question](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/div.20by.20p_adic_val_nat.20is.20coprime).

2022-06-14 18:25:05 16728b3
feat(topology/homotopy/contractible): a few convenience lemmas (#14710)
If `X` and `Y` are homotopy equivalent spaces, then one is
contractible if and only if the other one is contractible.

2022-06-14 18:25:02 05aa960
feat(analysis/special_functions/trigonometric/deriv): compare `sinh x` with `x` (#14702)

2022-06-14 18:24:59 d5c7260
feat(order/monotone): add lemmas about `cmp` (#14689)
Also replace `order_dual.cmp_le_flip` with lemmas about `to_dual` and `of_dual`.

2022-06-14 17:04:56 6cdc30d
golf(set_theory/ordinal/basic): golf theorems on `cardinal.ord` and `ordinal.card`  (#14709)

2022-06-14 15:42:17 ed033f3
feat(linear_algebra/vandermonde): add lemmas about det equals zero (#14695)
Adding two lemmas about when the determinant is zero.
I shortened the first with the help of some code I found in `ring_theory/trace.lean`, lemma `det_trace_matrix_ne_zero'`.

2022-06-14 15:42:15 41eb958
feat({tactic + test}/congrm, logic/basic): `congrm = congr + pattern-match` (#14153)
This PR defines a tactic `congrm`.  If the goal is an equality, where the sides are "almost" equal, then calling `congrm <expr_with_mvars_for_differences>` will produce goals for each place where the given expression has metavariables and will try to close the goal assuming all equalities have been proven.
For instance,
```
example {a b : ℕ} (h : a = b) : (λ y : ℕ, ∀ z, a + a = z) = (λ x, ∀ z, b + a = z) :=
begin
  congrm λ x, ∀ w, _ + a = w,
  exact h,
end
```
works.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/variant.20syntax.20for.20.60congr'.60)

2022-06-14 13:35:08 32d8fc4
feat(topology/homeomorph): add `homeomorph.set.univ` (#14730)

2022-06-14 13:35:07 1c8f995
feat(analysis/special_functions/exp): add `real.exp_half` (#14729)

2022-06-14 13:35:06 da5a737
feat(data/complex/basic): ranges of `re`, `im`, `norm_sq`, and `abs` (#14727)

2022-06-14 13:35:05 b11f8e7
refactor(algebra/order/group): unify instances (#14705)
Drop `group.covariant_class_le.to_contravariant_class_le` etc in favor
of `group.covconv` (now an instance) and a new similar instance
`group.covconv_swap`.

2022-06-14 13:35:03 2b46992
feat(algebra/algebra/basic): define `alg_hom_class` and `non_unital_alg_hom_class` (#14679)
This PR defines `alg_hom_class` and `non_unital_alg_hom_class` as part of the morphism refactor.

2022-06-14 13:35:02 5d18a72
feat(order/{conditionally_complete_lattice,galois_connection): Supremum of `set.image2` (#14307)
`Sup` and `Inf` distribute over `set.image2` in the presence of appropriate Galois connections.

2022-06-14 13:35:01 300c439
feat(algebra/lie/weights): the zero root space is the Cartan subalgebra for a Noetherian Lie algebra (#14174)

2022-06-14 11:24:09 67dfb57
feat(set_theory/cardinal/cofinality): lemma on subsets of strong limit cardinal (#14442)

2022-06-14 01:31:50 7fee0f1
fix(data/list/nodup): change `Type` to `Type u` (#14721)
Change `Type` to `Type u` in `nodup_iff_nth_ne_nth` and two other lemmas added in #14371.

2022-06-14 01:31:49 659983c
feat(logic/equiv/basic): add `Pi_comm` aka `function.swap` as an `equiv` (#14561)

2022-06-14 01:31:48 18bf7af
refactor(algebra/order/monoid): Split field of `canonically_ordered_...` (#14556)
Replace
```
(le_iff_exists_add : ∀ a b : α, a ≤ b ↔ ∃ c, b = a + c)
```
by
```
(exists_add_of_le : ∀ {a b : α}, a ≤ b → ∃ c, b = a + c)
(le_self_add : ∀ a b : α, a ≤ a + b)
```
This makes our life easier because
* We can use existing `has_exists_add_of_le` instances to complete the `exists_add_of_le` field, and detect the missing ones.
* No need to substitute `b = a + c` every time.

2022-06-13 23:08:36 2967fae
refactor(data/option/defs): Swap arguments to `option.elim` (#14681)
Make `option.elim` a non-dependent version of `option.rec` rather than a non-dependent version of `option.rec_on`. Same for `option.melim`.
This replaces `option.cons`, and brings `option.elim` in line with `nat.elim`, `sum.elim`, and `iff.elim`.
It addresses the TODO comment added in 22c4291217925c6957c0f5a44551c9917b56c7cf.

2022-06-13 21:43:10 425dfe7
feat(set_theory/game/ordinal): golf `to_pgame_birthday` (#14662)

2022-06-13 19:21:13 3afafe6
doc(ring_theory/algebraic): clarify docstring (#14715)

2022-06-13 19:21:12 b44e742
feat(category_theory/limits): realise products as pullbacks (#14322)
This was mostly done in #10581, this just adds the isomorphisms between the objects produced by the `has_limit` API.

2022-06-13 19:21:11 a75460f
feat(algebra/module/pid): Classification of finitely generated torsion modules over a PID (#13524)
A finitely generated torsion module over a PID is isomorphic to a direct sum of some `R ⧸ R ∙ (p i ^ e i)` where the `p i ^ e i` are prime powers.
(TODO : This part should be generalisable to a Dedekind domain, see https://en.wikipedia.org/wiki/Dedekind_domain#Finitely_generated_modules_over_a_Dedekind_domain . Part of the proof is already generalised).
More generally, a finitely generated module over a PID is isomorphic to the product of a free module and a direct sum of some
`R ⧸ R ∙ (p i ^ e i)`.
(TODO : prove this decomposition is unique.)
(TODO : deduce the structure theorem for finite(ly generated) abelian groups).
- [x] depends on: #13414
- [x] depends on: #14376 
- [x] depends on: #14573

2022-06-13 17:42:16 3225926
feat(category_theory/monoidal): monoidal functors `Type ⥤  C` acting on powers (#14330)

2022-06-13 16:22:21 6ad2799
chore(analysis/locally_convex/weak_dual): golf using `seminorm.comp` (#14699)

2022-06-13 15:38:03 aae786c
feat(data/zmod/basic): fix a diamond in comm_ring and field (#14712)
Before this change the following diamond existed:
```lean
import data.zmod.basic
variables {p : ℕ} [fact p.prime]
example :
  @euclidean_domain.to_comm_ring _ (@field.to_euclidean_domain _ (zmod.field p)) = zmod.comm_ring p :=
rfl
```
as the eta-expanded `zmod.comm_ring` was not defeq to itself, as it is defined via cases.
We fix this by instead defining each field by cases, which looks worse but at least seems to resolve the issue.
See https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/zmod.20comm_ring.20field.20diamond/near/285847071 for discussion

2022-06-13 14:24:16 aed7f9a
feat(topology/uniform_space/basic): add three easy lemmas about `uniform_space.comap` (#14678)
These are uniform spaces versions of `filter.comap_inf`, `filter.comap_infi` and `filter.comap_mono`. I split them from #14534 which is already a quite big PR.

2022-06-13 13:01:51 b7b371e
doc(field_theory/finite/trace): fix module docstring (#14711)
This PR just fixes the docstring in `field_theory/finite/trace.lean`. It was still mentioning a definition that was removed.

2022-06-13 13:01:50 46ac3cb
chore(analysis/complex/upper_half_plane): move to a subdirectory (#14704)
I'm going to add more files to `analysis/complex/upper_half_plane/` soon.

2022-06-13 11:39:13 04019de
chore(algebra/big_operators/associated,ring_theory/unique_factorization_domain): golf (#14671)

2022-06-13 09:39:39 b100037
refactor(order/conditionally_complete_lattice): use `order_bot` (#14568)
Use `order_bot` instead of an explicit `c = ⊥` argument in
`well_founded.conditionally_complete_linear_order_with_bot`. Also
reuse `linear_order.to_lattice` and add `well_founded.min_le`.

2022-06-13 09:39:38 4b67645
chore(algebra/ring_quot): provide an explicit npow field (#14349)
While this probably shouldn't matter since `ring_quot` is irreducible, this matches what we do for `nsmul` and `zsmul`.

2022-06-13 08:58:22 716824d
feat(set_theory/surreal/dyadic): tweak API + golf (#14649)
This PR does the following changes:
- Get rid of `pgame.half`, as it's def-eq to `pow_half 1`, which has strictly more API.
- Fix the docstring on `pow_half`, which incorrectly stated `pow_half 0 = 0`.
- Remove `simp` from some type equality lemmas.
- Remove the redundant theorems `pow_half_move_left'` and `pow_half_move_right'`.
- Add instances for left and right moves of `pow_half`. 
- Rename `zero_lt_pow_half` to `pow_half_pos`.
- Prove `pow_half_le_one` and `pow_half_succ_lt_one`.
- Make arguments explicit throughout.
- Golf proofs throughout.

2022-06-13 03:45:17 dc9eab6
feat(tactic/lift): generalize pi.can_lift to Sort (#14700)

2022-06-12 20:34:14 8fb92bf
feat(measure_theory/integral/circle_integral): add lemma `circle_map_nmem_ball` (#14643)
The lemma `set.ne_of_mem_nmem` is unrelated except that both of these should be helpful for:
https://github.com/leanprover-community/mathlib/pull/13885

2022-06-12 16:53:57 d6eb634
feat(number_theory/legendre_symbol/auxiliary, *): add/move lemmas in/to various files, delete `auxiliary.lean` (#14572)
This is the first PR in a series that will culminate in providing the proof of Quadratic Reciprocity using Gauss sums.
Here we just add some lemmas to the file `auxiliary.lean` that will be used in new code later.
We also generalize the lemmas `neg_one_ne_one_of_char_ne_two` and `neg_ne_self_of_char_ne_two` from finite fields to more general rings.
See [this Zulipt topic](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/285053214) for more information.
**CHANGE OF PLAN:** Following the discussion on Zulip linked to above, the lemmas in `auxiliary.lean` are supposed to be moved to there proper places. I have added suggestions to each lemma or group of lemmas (or definitions) what the proper place could be (in some cases, there are alternatives). Please comment if you do not agree or to support one of the alternatives.

2022-06-12 16:03:11 97c9ef8
chore(measure_theory): use notation `measurable_set[m]` (#14690)

2022-06-12 11:53:19 8cad81a
feat(data/{finset,set}/basic): More `insert` and `erase` lemmas (#14675)
Also turn `finset.disjoint_iff_disjoint_coe` around and change `set.finite.to_finset_insert` take `(insert a s).finite` instead of `s.finite`.

2022-06-12 11:13:54 579d6f9
feat(data/polynomial/laurent): Laurent polynomials are a localization of polynomials (#14489)
This PR proves the lemma `is_localization (submonoid.closure ({X} : set R[X])) R[T;T⁻¹]`.

2022-06-12 08:43:37 4a3b22e
feat(number_theory/bernoulli_polynomials): Derivative of Bernoulli polynomial (#14625)
Add the statement that the derivative of `bernoulli k x` is `k * bernoulli (k-1) x`. This will be used in a subsequent PR to evaluate the even positive integer values of the Riemann zeta function.

2022-06-12 05:48:33 0926f07
feat(data/polynomial/eval): add some lemmas for `comp` (#14346)

2022-06-12 05:09:43 eb063e7
feat(category_theory/Fintype): equiv_equiv_iso (#13984)
From LTE.

2022-06-11 15:30:23 053a03d
feat(algebra/char_p): `char_p` of a local ring is zero or prime power (#14461)
For a local commutative ring the characteristics is either zero or a prime power.

2022-06-11 14:33:12 2e3a0a6
feat(analysis/special_functions/log): add `real.log_sqrt` (#14663)

2022-06-11 11:06:30 d1a6dd2
feat(topology/algebra/module/locally_convex): local convexity is preserved by `Inf` and `induced` (#12118)
I also generalized slightly `locally_convex_space.of_bases` and changed a `Sort*` to `Type*` in `filter.has_basis_infi` to correctly reflect the universe constraints.

2022-06-11 08:59:36 13b999c
feat(algebra/{group,hom}/units): Units in division monoids (#14212)
Copy over `group_with_zero` lemmas to the more general setting of `division_monoid`.

2022-06-11 02:10:15 050404a
feat(group_theory/sylow): Sylow subgroups are Hall subgroups (#14624)
This PR adds a lemma stating that Sylow subgroups are Hall subgroups (cardinality is coprime to index).

2022-06-10 14:50:29 18936e5
feat(topology/uniform_space/equiv): define uniform isomorphisms (#14537)
This adds a new file, mostly copy-pasted from `topology/homeomorph`, to analogously define uniform isomorphisms

2022-06-10 12:55:31 8c812fd
feat(topology/algebra/order): `coe : ℚ → 𝕜` has dense range (#14635)
* add `rat.dense_range_cast`, use it in `rat.dense_embedding_coe_real`;
* rename `dense_iff_forall_lt_exists_mem` to `dense_iff_exists_between`;
* add `dense_of_exists_between`, use it in `dense_iff_exists_between`.

2022-06-10 12:55:30 0f5a1f2
feat(data/rat): Add some lemmas to work with num/denom (#14456)

2022-06-10 10:43:10 95da649
feat(analysis/inner_product_space): Generalize Gram-Schmidt (#14379)
The generalisation is to allow a family of vectors indexed by a general indexing set `ι` (carrying appropriate order typeclasses) rather than just `ℕ`.

2022-06-10 10:04:50 391d178
feat(set_theory/game/ordinal): golf `to_pgame_injective` (#14661)
We also add the `eq_iff` version and remove an outdated todo comment.

2022-06-10 10:04:49 68dc07f
refactor(set_theory/game/pgame): rename and add theorems like `-y ≤ -x ↔ x ≤ y` (#14653)
For `*` in `le`, `lf`, `lt`, we rename `neg_*_iff : -y * -x ↔ x * y` to `neg_*_neg_iff`, and add the theorems `neg_*_iff : -y * x ↔ x * -y`.
We further add many missing corresponding theorems for equivalence and fuzziness.

2022-06-10 07:36:57 a912392
feat(data/fintype/basic): add `card_subtype_mono` (#14645)
This lemma naturally forms a counterpart to existing lemmas.
I've also renamed a lemma it uses that didn't seem to fit the existing naming pattern.

2022-06-10 07:36:56 771f2b7
chore(topology/metric_space/basic): add `metric_space.replace_bornology` (#14638)
We have the `pseudo_metric_space` version from #13927, but not the `metric_space` version.

2022-06-10 07:36:55 5bccb51
refactor(logic/equiv/basic): tweak lemmas on equivalences between `unique` types (#14605)
This PR does various simple and highly related things:
- Rename `equiv_of_unique_of_unique` to `equiv_of_unique` and make its arguments explicit, in order to match the lemma `equiv_of_empty` added in #14604.  
- Rename `equiv_punit_of_unique` to `equiv_punit` and make its argument explicit to match `equiv_pempty`.
- Fix their docstrings (which talked about a `subsingleton` type instead of a `unique` one).
- Move them much earlier in the file, together with the lemmas on empty types.
- Golf `prop_equiv_punit`.

2022-06-10 07:36:53 7691821
feat(data/polynomial/derivative): reduce assumptions (#14338)
The only changes here are to relax typeclass assumptions.
Specifically these changes relax `comm_semiring` to `semiring` in:
 * polynomial.derivative_eval
 * polynomial.derivative_map
 * polynomial.iterate_derivative_map
 * polynomial.iterate_derivative_cast_nat_mul
and relax `ring` to `semiring` as well as `char_zero` + `no_zero_divisors` to `no_zero_smul_divisors ℕ` in:
 * polynomial.mem_support_derivative
 * polynomial.degree_derivative_eq

2022-06-10 07:36:52 39184f4
feat(dynamics/periodic_pts): Orbit under periodic function (#12976)

2022-06-10 05:26:20 e3dade3
feat(data/finite/basic): `finite` predicate (#14373)
Introduces a `Prop`-valued finiteness predicate on types and adapts some subset of the `fintype` API to get started. Uses `nat.card` as the primary cardinality function.

2022-06-10 04:32:43 e9d2564
chore(measure_theory): golf (#14657)
Also use `@measurable_set α m s` instead of `m.measurable_set' s` in the definition of the partial order on `measurable_space`. This way we can use dot notation lemmas about measurable sets in a proof of `m₁ ≤ m₂`.

2022-06-10 02:04:07 ed2cfce
feat(set_theory/ordinal/basic): tweak theorems on order type of empty relation (#14650)
We move the theorems on the order type of an empty relation much earlier, and golf them. We also remove other redundant theorems.
`zero_eq_type_empty` is made redundant by `type_eq_zero_of_empty`, while `zero_eq_lift_type_empty`  is made redundant by the former lemma and `lift_zero`.

2022-06-09 23:59:52 2cf4746
chore(analysis/special_functions/gamma): tidy some proofs (#14615)

2022-06-09 23:59:51 3afb1fa
feat(ci): Add support for "notice"-level messages (#14443)
It looks like support for this was added recently, it's now documented at the same link already in our source code.

2022-06-09 22:24:53 6e13617
feat(set_theory/ordinal/basic): better definitions for `0` and `1` (#14651)
We define the `0` and `1` ordinals as the order types of the empty relation on `pempty` and `punit`, respectively. These definitions are definitionally equal to the previous ones, yet much clearer, for two reasons:
- They don't make use of the auxiliary `Well_order` type. 
- Much of the basic API for these ordinals uses this def-eq anyways.

2022-06-09 22:24:52 c89d319
feat(set_theory/cardinal): add `cardinal.aleph_0_le_mul_iff'` (#14648)
This version provides a more useful `iff.mpr`. Also review 2 proofs.

2022-06-09 22:24:51 405be36
feat(data/matrix): Lemmas about `vec_mul`, `mul_vec`, `dot_product`, `inv` (#14644)

2022-06-09 22:24:50 3e458e2
chore(topology/sequences): rename variables (#14631)
* types `X`, `Y`;
* sequence `x : ℕ → X`;
* a point `a : X`;
* sets `s`, `t`.

2022-06-09 19:45:28 81ab992
chore(set_theory/cardinal/basic): tidy lt_wf proof (#14574)

2022-06-09 19:45:27 34a9d0d
feat(algebra/order/ring): Binary rearrangement inequality (#14478)
Extract the binary case of the rearrangement inequality (`a * d + b * c ≤ a * c + b * d` if `a ≤ b` and `c ≤ d`) from the general one.

2022-06-09 19:45:25 7fbff0f
feat(data/nat/choose/central): arity of primes in central binomial coefficients (#14017)
Spun off of #8002. Lemmas about the arity of primes in central binomial coefficients.

2022-06-09 18:12:47 4d4de43
chore(ring_theory/unique_factorization_domain): drop simp annotation for factors_pow (#14646)
Followup to https://github.com/leanprover-community/mathlib/pull/14555.

2022-06-09 18:12:46 7b4680f
feat(analysis/inner_product_space/pi_L2): Distance formula in the euclidean space (#14642)
A few missing results about `pi_Lp 2` and `euclidean_space`.

2022-06-09 18:12:45 ac0ce64
feat(special_functions/integrals): exponential of complex multiple of x (#14623)
We add an integral for `exp (c * x)` for `c` complex (so this cannot be reduced to integration of `exp x` on the real line). This is useful for Fourier series.

2022-06-09 15:38:27 abee649
feat(data/set/intervals): add lemmas about unions of intervals (#14636)

2022-06-09 15:38:26 e0f3ea3
feat(topology/constructions): add `subtype.dense_iff` (#14632)
Also add `inducing.dense_iff`.

2022-06-09 15:38:25 48f557d
chore(analysis/convex/integral): use `variables` (#14592)
* Move some implicit arguments to `variables`.
* Move `ae_eq_const_or_exists_average_ne_compl` to the root namespace.
* Add `ae_eq_const_or_norm_set_integral_lt_of_norm_le_const`.

2022-06-09 13:27:25 c0b3ed7
feat(number_theory/padics/padic_val): add `padic_val_nat_def'` and generalise `pow_padic_val_nat_dvd` (#14637)
add `padic_val_nat_def' (hn : 0 < n) (hp : p ≠ 1) : ↑(padic_val_nat p n) = multiplicity p n`
`pow_padic_val_nat_dvd : p ^ (padic_val_nat p n) ∣ n` holds without the assumption that `p` is prime.

2022-06-09 13:27:23 dc766dd
refactor(group_theory/sylow): Golf proof of `pow_dvd_card_of_pow_dvd_card` (#14622)
This PR golfs the proof of `pow_dvd_card_of_pow_dvd_card`.

2022-06-09 13:27:22 cde6e63
feat(analysis/seminorm): removed unnecessary `norm_one_class` arguments (#14614)

2022-06-09 13:27:21 d997baa
refactor(logic/equiv/basic): remove `fin_equiv_subtype` (#14603)
The types `fin n` and `{m // m < n}` are definitionally equal, so it doesn't make sense to have a dedicated equivalence between them (other than `equiv.refl`). We remove this equivalence and golf the places where it was used.

2022-06-09 13:27:20 c2bb59e
feat(algebra/module/torsion.lean): various lemmas about torsion modules (#14573)
An intermediate PR for various lemmas about torsion modules needed at #13524

2022-06-09 13:27:19 dfc54a3
feat(combinatorics/ballot): the Ballot problem (#13592)

2022-06-09 11:44:36 d51aacb
feat(ring_theory/unique_factorization_domain): add some lemmas about … (#14555)

2022-06-09 09:58:31 dc2f6bb
chore(topology/metric_space): remove instances that duplicate lemmas (#14639)
We can use the structure projections directly as instances, rather than duplicating them with primed names. This removes;
* `metric_space.to_uniform_space'` (was misnamed, now `pseudo_metric_space.to_uniform_space`)
* `pseudo_metric_space.to_bornology'` (now `pseudo_metric_space.to_bornology`)
* `pseudo_emetric_space.to_uniform_space'` (now `pseudo_metric_space.to_uniform_space`)
* `emetric_space.to_uniform_space'` (redundant)
Follows up from review comments in #13927

2022-06-09 09:58:30 bc7b342
feat(topology/metric_space/basic): add lemma `exists_lt_mem_ball_of_mem_ball` (#14627)
This is apparently necessary in https://github.com/leanprover-community/mathlib/pull/13885

2022-06-09 09:58:29 6a1ce4e
feat(analysis/seminorm): add a `zero_hom_class` instance and remove `seminorm.zero` (#14613)

2022-06-09 09:58:28 6826bf0
doc(data/vector3): improve wording (#14610)

2022-06-09 09:58:27 ab64f63
refactor(algebra/sub{monoid,group,ring,semiring,field}): merge together the `restrict` and `cod_restrict` helpers (#14548)
This uses the new subobject typeclasses to merge together:
* `monoid_hom.mrestrict`, `monoid_hom.restrict`
* `monoid_hom.cod_mrestrict`, `monoid_hom.cod_restrict`
* `ring_hom.srestrict`, `ring_hom.restrict`, `ring_hom.restrict_field`
* `ring_hom.cod_srestrict`, `ring_hom.cod_restrict`, `ring_hom.cod_restrict_field`
For consistency, this also removes the `m` prefix from `mul_hom.mrestrict`

2022-06-09 09:58:26 732b79f
feat(order/compactly_generated): an independent subset of a well-founded complete lattice is finite (#14215)

2022-06-09 07:52:18 3a95d1d
feat(algebra/order/monoid): `zero_le_one_class` instances for `with_top` and `with_bot` (#14640)

2022-06-09 05:43:16 971a9b0
feat(logic/equiv/basic): two empty types are equivalent; remove various redundant lemmas (#14604)
We prove `equiv_of_is_empty`, which states two empty types are equivalent. This allows us to remove various redundant lemmas.
We keep `empty_equiv_empty` and `empty_equiv_pempty` as these specific instantiations of that lemma are widely used.

2022-06-09 04:07:37 9f19686
feat(logic/small): generalize + golf (#14584)
This PR does the following:
- add a lemma `small_lift`
- generalize the lemma `small_ulift`
- golf `small_self` and `small_max`

2022-06-09 01:54:18 b392bb2
feat(data/nat/factorization/basic): two trivial simp lemmas about factorizations (#14634)
For any `n : ℕ`, `n.factorization 0 = 0` and `n.factorization 1 = 0`

2022-06-09 01:54:16 4fc3539
refactor(data/finset/nat_antidiagonal): state lemmas with cons instead of insert (#14533)
This puts less of a burden on the caller rewriting in the forward direction, as they don't have to prove obvious things about membership when evaluating sums.
Since this adds the missing `finset.map_cons`, a number of uses of `multiset.map_cons` now need qualified names.

2022-06-08 23:44:35 0c08bd4
chore(data/set/basic): minor style fixes (#14628)

2022-06-08 20:36:43 c1faa2e
feat(linear_algebra/affine_space/affine_subspace/pointwise): Translations are an action on affine subspaces (#14230)

2022-06-08 20:36:42 84a1bd6
refactor(topology/metric_space/basic): add `pseudo_metric_space.to_bornology'` (#13927)
* add `pseudo_metric_space.to_bornology'` and `pseudo_metric_space.replace_bornology`;
* add `metric.is_bounded_iff` and a few similar lemmas;
* fix instances for `subtype`, `prod`, `pi`, and `pi_Lp` to use the correct bornology`;
* add `lipschitz_with.to_locally_bounded_map` and `lipschitz_with.comap_cobounded_le`;
* add `antilipschitz_with.tendsto_cobounded`.

2022-06-08 18:51:48 61df9c6
feat(set_theory/ordinal/basic): tweak `type_def` + golf `type_lt` (#14611)
We replace the original, redundant `type_def'` with a new more general lemma. We keep `type_def` as it enables `dsimp`, unlike `type_def'`. We golf `type_lt` using this new lemma.

2022-06-08 18:51:32 9c4a3d1
feat(ring_theory/valuation/valuation_subring): define unit group of valuation subring and provide basic API (#14540)
This PR defines the unit group of a valuation subring as a multiplicative subgroup of the units of the field. We show two valuation subrings are equivalent iff they have the same unit group. We show the map sending a valuation to its unit group is an order embedding.

2022-06-08 18:10:02 d315666
feat(model_theory/substructures): tweak universes for `lift_card_closure_le` (#14597)
Since `cardinal.lift.{(max u v) u} = cardinal.lift.{v u}`, the latter form should be preferred.

2022-06-08 15:58:47 8934884
feat(set_theory/ordinal/basic): `rel_iso.ordinal_type_eq` (#14602)

2022-06-08 15:58:46 09df85f
feat(order/rel_classes): any relation on an empty type is a well-order (#14600)

2022-06-08 15:58:45 201a3f4
chore(*): remove extra parentheses in universe annotations (#14595)
We change `f.{(max u v)}` to `f.{max u v}` throughout, and similarly for `imax`. This is for consistency with the rest of the code.
Note that `max` and `imax` take an arbitrary number of parameters, so if anyone wants to add a second universe parameter, they'll have to add the parentheses again.

2022-06-08 15:58:43 3e4d6aa
feat(algebra/algebra/basic): add instances `char_zero.no_zero_smul_divisors_int`, `char_zero.no_zero_smul_divisors_nat` (#14395)
The proofs are taken from #14338 where a specific need for these arose
Aside from the new instances, nothing else has changed; I moved the
`no_zero_smul_divisors` section lower down in the file since the new
instances need the `algebra ℤ R` structure carried by a ring `R`.

2022-06-08 13:42:41 bfb8ec8
feat(logic/basic): add lemma `pi_congr` (#14616)
This lemma is used in #14153, where `congrm` is defined.
A big reason for splitting these 3 lines off the main PR is that they are the only ones that are not in a leaf of the import hierarchy: this hopefully saves lots of CI time, when doing trivial changes to the main PR.

2022-06-08 13:42:38 700181a
refactor(algebra/is_prime_pow): move lemmas using `factorization` to new file (#14598)
As discussed in [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/squarefree.2C.20is_prime_pow.2C.20and.20factorization/near/285144241).

2022-06-08 12:10:16 db4531f
doc(data/qpf/multivariate/constructions/cofix): fix doc typos (#14609)

2022-06-08 12:10:15 0add876
chore(set_theory/cardinal/basic): remove unused universe + fix spacing (#14606)

2022-06-08 12:10:14 65fba4c
feat(algebra/lie/centralizer): define the centralizer of a Lie submodule and the upper central series (#14173)

2022-06-08 09:31:34 ffad43d
golf(*): `λ _, default` → `default` (#14608)

2022-06-08 09:31:33 60454dd
feat(algebra/order/monoid): `zero_le_one'` lemma with explicit type argument (#14594)

2022-06-08 09:31:32 f40cd3c
feat(topology/algebra/order/basic): in a second-countable linear order, only countably many points are isolated to the right (#14564)
This makes it possible to remove a useless `densely_ordered` assumption in a lemma in `borel_space`.

2022-06-08 09:31:31 a20032a
feat(group_theory/sylow): The index of a sylow subgroup is indivisible by the prime (#14518)
This PR adds a lemma stating that the index of a sylow subgroup is indivisible by the prime.

2022-06-08 09:31:30 54236f5
feat(topology/continuous_function/compact): `cstar_ring` instance on `C(α, β)` when `α` is compact (#14437)
We define the star operation on `C(α, β)` by applying `β`'s star operation pointwise. In the case when `α` is compact, then `C(α, β)` has a norm, and we show that it is a `cstar_ring`.

2022-06-08 07:33:27 e39af18
chore(data/finset): remove duplicated lemma (#14607)
The lemma `ssubset_iff_exists_insert_subset` was added in #11248 but is just a duplicate of the `ssubset_iff` lemma a few lines earlier in the file. It's only used once.

2022-06-08 00:23:16 9d04844
feat(data/int/basic): Sum of units casework lemma (#14557)
This PR adds a casework lemma for when the sum of two units equals the sum of two units. I needed this lemma for irreducibility of x^n-x-1.

2022-06-07 22:31:45 759516c
chore(ring_theory/dedekind_domain/ideal): speed up a proof (#14590)
... which causes recurring timeout at irrelevant places, see https://github.com/leanprover-community/mathlib/pull/14585#issuecomment-1148222373 and referenced Zulip discussion.
Feel free to push golfs that remains fast (1-2s)!

2022-06-07 21:09:01 905374c
feat(special_functions/gamma): better convergence bounds (#14496)
Use the stronger form of FTC-2 added #14147 to strengthen some results about the gamma function.

2022-06-07 17:43:24 cfa447e
chore(logic/hydra): tweak docs + minor golf (#14579)

2022-06-07 13:32:20 43f1af9
refactor(topology/continuous_function/basic): rename `map_specialization` (#14565)
Rename `continuous_map.map_specialization` to `continuous_map.map_specializes` to align with the name of the relation.

2022-06-07 12:37:21 544fdc0
chore(ring_theory/integral_closure): fix dot notation (#14589)

2022-06-07 11:40:32 6906627
refactor(algebra/squarefree): split out `nat` part to new file `data/nat/squarefree` (#14577)
As discussed in this Zulip [thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/squarefree.2C.20is_prime_pow.2C.20and.20factorization)

2022-06-07 07:06:14 4a4cd6d
feat(topology/metric_space/metrizable): assume `regular_space` (#14586)

2022-06-07 01:29:01 de648fd
chore(set_theory/game/basic): spacing tweaks + fix docstring typo (#14580)

2022-06-06 22:44:27 6ad1a55
feat(set_theory/game/pgame): induction on left/right moves of add/mul (#14345)

2022-06-06 20:46:31 c7a1319
feat(measure_theory/measure/measure_space): add `interval_oc_ae_eq_interval` (#14566)

2022-06-06 20:46:30 2c89306
chore(geometry/manifold/charted_space): make `M` an explicit argument (#14562)

2022-06-06 20:46:29 d0b7ecc
refactor(analysis/asymptotics): rename `is_O.join` to `is_O.sup` (#14558)
* rename `is_*.join` to `is_*.sup`;
* add `iff` versions.

2022-06-06 20:46:28 2b7e72b
feat(order/liminf_limsup): add a few lemmas (#14554)
* add `is_bounded_under.mono_le`, `is_bounded_under.mono_ge`;
* add `order_iso.is_bounded_under_le_comp`, `order_iso.is_bounded_under_ge_comp`;
* add `is_bounded_under_le_inv`, `is_bounded_under_le_inv`, and additive versions;
* rename `is_bounded_under_sup` and `is_bounded_under_inf` to `is_bounded_under.sup` and `is_bounded_under.inf`;
* add `iff` versions under names `is_bounded_under_le_sup` and `is_bounded_under_ge_inf`;
* add `is_bounded_under_le_abs`.

2022-06-06 20:46:27 029a955
refactor(../metric_space/baire): add baire_space class and instances (#14547)
* Add a `baire_space` class containing the Baire property (a countable intersection of open dense sets is dense).
* The Baire category theorem for complete metric spaces becomes an instance of `baire_space`.
* Previous consequences of the Baire property use `baire_space` as an hypothesis, instead of `pseudo_emetric_space` `complete_space`.
* Add an instance of `baire_space` for locally compact t2 spaces, in effect extending all the consequences of the Baire property to locally compact spaces.

2022-06-06 20:46:26 d28aa2c
feat(analysis/normed_space/banach): closed graph theorem (#14265)

2022-06-06 18:41:09 7b7da89
feat(algebra/order/*): typeclass for `0 ≤ 1` (#14510)
With this new typeclass, lemmas such as `zero_le_two` and `one_le_two` can be generalized to require just a few typeclasses for notation, `zero_add_class`, and some `covariant` class.

2022-06-06 14:27:28 abbc7f6
feat(measure_theory/measure/finite_measure_weak_convergence): Prove one implication of portmanteau theorem, convergence implies a limsup condition for measures of closed sets. (#14116)
This PR contains the proof of one implication of portmanteau theorem characterizing weak convergence: it is shown that weak convergence implies that for any closed set the limsup of measures is at most the limit measure.

2022-06-06 13:48:54 d6477a8
feat(analysis/convex/krein_milman): The Krein-Milman theorem (#8112)
This PR proves the Krein-Milman lemma and the Krein-Milman theorem.

2022-06-06 12:19:21 d490ad1
move(set_theory/ordinal/cantor_normal_form): move `CNF` to a new file (#14563)
We move the API for the Cantor Normal Form to a new file, in preparation for an API expansion.

2022-06-06 10:35:42 0f5ea39
feat(order/antichain, order/minimal): some antichain lemmas (#14507)
This PR adds a few lemmas about antichains, including their images under complementation and order isomorphisms.

2022-06-06 09:16:32 d88ecd5
chore(linear_algebra/std_basis): minor golfs (#14552)

2022-06-06 07:26:33 789af09
feat(algebra/char_p): add two helper lemmas about the cast of the characteristics being zero (#14464)
- `(ring_char R : R) = 0` and
- If there exists a positive `n` lifting to zero, then the characteristics is positive.

2022-06-05 20:50:27 769a934
feat(set_theory/*) `cardinal.min` → `Inf` (#13410)
We discard `cardinal.min` in favor of `Inf` (the original definition is really just `infi`). 
Note: `lift_min'` is renamed to `lift_min`, as the name clash no longer exists. For consistency, `lift_max'` is renamed to `lift_max` and `lift_max` is renamed to `lift_umax_eq`.

2022-06-05 19:28:46 736b4e5
feat(data/nat/factorization): Lemma on zero-ness of factorization (#14560)
Sad naming is sad.
[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)

2022-06-05 14:52:20 043fa29
feat(src/analysis/normed_space): various improvements for continuous bilinear maps (#14539)
* Add `simps` to `arrow_congrSL`
* `continuous_linear_map.flip (compSL F E H σ₂₁ σ₁₄)` takes almost 5 seconds to elaborate, but when giving the argument `(F →SL[σ₂₄] H)` for `G` explicitly, this goes down to 1 second.
* Reorder arguments of `is_bounded_bilinear_map_comp`
* Use `continuous_linear_map` results to prove `is_bounded_bilinear_map` results.
* Make arguments to `comp_continuous_multilinear_mapL` explicit
* Add `continuous[_on].clm_comp`, `cont_diff[_on].clm_comp` and `cont_diff.comp_cont_diff_on(₂|₃)`

2022-06-05 12:08:46 d9e72ff
feat(analysis/normed_space/hahn-banach/separation): Eidelheit's theorem (#14460)
Prove Eidelheit's theorem as a corollary to the geometric Hahn-Banach.

2022-06-05 07:36:59 b6395b3
refactor(set_theory/*): change `omega` to `aleph_0` + golf (#14467)
This PR does two things:
- we change `cardinal.omega` to `cardinal.aleph_0` and introduce the notation `ℵ₀`.
- we golf many proofs throughout

2022-06-05 04:57:10 8651b70
chore(set_theory/cardinal/cofinality): golf + fix spacing (#14509)

2022-06-05 02:47:09 10f4572
refactor(group_theory/group_action/defs): rename has_faithful_scalar (#14515)
This is the first scalar -> smul renaming transition.
Discussion: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/scalar.20smul.20naming.20discrepancy

2022-06-05 01:29:35 157013d
feat(set_theory/cardinal/cofinality): weaker definition for regular cardinals (#14433)
We weaken `c.ord.cof = c` to `c ≤ c.ord.cof` in the definition of regular cardinals, in order to slightly simplify proofs. The lemma `is_regular.cof_eq` shows that this leads to an equivalent definition.

2022-06-04 21:21:39 741f4de
feat(data/fin/tuple/monotone): new file (#14483)

2022-06-04 21:21:38 f65b160
feat(set_theory/cardinal/cofinality): basic lemmas on limit cardinals (#14439)

2022-06-04 19:44:08 d136cd5
chore(data/pi/lex): turn `pi.lex.linear_order` into an instance (#14389)
* Use `[is_well_order ι (<)]` instead of `(wf : well_founded ((<) : ι → ι → Prop))`. This way `pi.lex.linear_order` can be an instance.
* Add `pi.lex.order_bot`/`pi.lex.order_top`/`pi.lex.bounded_order`.

2022-06-04 19:44:07 9749297
feat(measure_theory/integral/interval_integral): integrability of nonnegative derivatives on open intervals (#14147)
Shows that derivatives of continuous functions are integrable when nonnegative.

2022-06-04 17:34:23 93fb534
refactor(topology/vector_bundle): split file (#14535)
Also:
* Rename `pullback` -> `topological_vector_bundle.pullback`
* Use `delta_instance` instead of `local attribute [reducible]`
* Change module doc
* Remove transitive import

2022-06-04 17:34:22 3103a89
feat(analysis/special_functions/exp): a lemma about `exp (f x) =O[l] const _ _` (#14524)

2022-06-04 17:34:21 19b5786
feat(tactic/set): fix a bug (#14488)
We make the behaviour of `tactic.interactive.set` closer to that of `tactic.interactive.let`, this should fix the following issue reported in https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/set.20bug.3F/near/284471523:
```lean
import ring_theory.adjoin.basic
example {R S : Type*} [comm_ring R] [comm_ring S] [algebra R S] (x : S): false :=
begin
  let y : algebra.adjoin R ({x} : set S) := ⟨x, algebra.self_mem_adjoin_singleton R x⟩, -- works
  set y : algebra.adjoin R ({x} : set S) := ⟨x, algebra.self_mem_adjoin_singleton R x⟩, -- error
  sorry
end
```
This is related to [lean#555
](https://github.com/leanprover-community/lean/pull/555)
I also fix two completely unrelated docstrings (where the list syntax created two lists instead of one) as I wouldn't want to separately add them to CI...

2022-06-04 17:34:20 a869df9
feat(analysis/asymptotics/asymptotics): generalize `is_*.inv_rev` (#14486)
Use weaker assumption `∀ᶠ x in l, f x = 0 → g x = 0` instead of `∀ᶠ x in l, f x ≠ 0`.

2022-06-04 17:34:19 8a6a793
refactor(data/fin/basic): reformulate `fin.strict_mono_iff_lt_succ` (#14482)
Use `fin.succ_cast` and `fin.succ`. This way we lose the case `n = 0`
but the statement looks more natural in other cases. Also add versions
for `monotone`, `antitone`, and `strict_anti`.

2022-06-04 17:34:18 cab5a45
refactor(order/directed): use `(≥)` instead of `swap (≤)` (#14474)

2022-06-04 17:34:17 b5973ba
feat(measure_theory/measure/measure_space): there exists a ball of positive measure (#14449)
Motivated by #12933

2022-06-04 15:25:58 cfcc3a1
chore(data/finsupp/basic): make arguments explicit (#14551)
This follow the pattern that arguments to an `=` lemma should be explicit if they're not implied by other arguments.

2022-06-04 15:25:56 b949240
feat(algebra/{lie/subalgebra,module/submodule/pointwise}): submodules and lie subalgebras form canonically ordered additive monoids under addition (#14529)
We can't actually make these instances because they result in loops for `simp`.
The `le_iff_exists_sup` lemma is probably not very useful for much beyond these new instances, but it matches `le_iff_exists_add`.

2022-06-04 15:25:56 83c1cd8
feat(set_theory/cardinal/cofinality): `ω` is a strong limit cardinal (#14436)

2022-06-04 15:25:55 0746194
feat(set_theory/cardinal/cofinality): limit cardinal is at least `ω` (#14432)

2022-06-04 15:25:54 15726ee
move(set_theory/{schroeder_bernstein → cardinal/schroeder_bernstein}): move file (#14426)
Schroeder-Bernstein is ultimately the statement that cardinals are a total order, so it should go in that folder.

2022-06-04 15:25:53 1f196cb
feat(data/list/nodup): Add `list.nodup_iff` (#14371)
Add `list.nodup_iff` and two helper lemmas `list.nth_le_eq_iff` and `list.some_nth_le_eq`

2022-06-04 13:17:06 aa7d90b
doc(set_theory/ordinal/natural_ops): mention alternate names (#14546)

2022-06-04 13:17:05 8ef2c02
chore(order/bounded_order): move `order_dual` instances up, use them to golf lemmas (#14544)
I only golf lemmas and `Prop`-valued instances to be sure that I don't add `order_dual`s to the statements.

2022-06-04 13:17:04 5002452
refactor(topology): move code around (#14525)
Create a new file `topology/inseparable` and more the definitions of `specializes` and `inseparable` to this file. This is a preparation to a larger refactor of these definitions.

2022-06-04 13:17:03 66b618d
perf(measure_theory/probability_mass_function/monad): speed up proof (#14519)
This causes a deterministic timeout in another PR.

2022-06-04 13:17:02 3f26dfe
feat(data/int/basic): Units are either equal or negatives of each other (#14517)
This PR adds a lemma stating that units in the integers are either equal or negatives of each other. I have found this lemma to be useful for casework.

2022-06-04 13:17:01 b332507
feat(data/int/basic): Forward direction of `is_unit_iff_nat_abs_eq` (#14516)
This PR adds the forward direction of `is_unit_iff_nat_abs_eq` as a separate lemma. This is useful since you often have `is_unit n` as a hypothesis, and `is_unit_iff_nat_abs_eq.mp hn` is a bit of a mouthful.

2022-06-04 13:17:00 2a9be5b
feat(analysis/special_functions): lemmas about filter `map`/`comap` (#14513)
* add `comap_inf_principal_range` and `comap_nhds_within_range`;
* add `@[simp]` to `real.comap_exp_nhds_within_Ioi_zero`;
* add `real.comap_exp_nhds_zero`, `complex.comap_exp_comap_abs_at_top`, `complex.comap_exp_nhds_zero`, `complex.comap_exp_nhds_within_zero`, and `complex.tendsto_exp_nhds_zero_iff`;
* add `complex.map_exp_comap_re_at_bot` and `complex.map_exp_comap_re_at_top`;
* add `comap_norm_nhds_zero` and `complex.comap_abs_nhds_zero`.

2022-06-04 13:16:59 0e943b1
feat(order/boolean_algebra, set/basic): some compl lemmas (#14508)
Added a few lemmas about complementation, and rephrased `compl_compl` and `mem_compl_image` to apply in `boolean_algebra` rather than `set (set _ ))`.

2022-06-04 13:16:58 27c4241
feat(set_theory/ordinal/arithmetic): `has_exists_add_of_le` instance for `ordinal` (#14499)

2022-06-04 11:12:53 7c57af9
feat(order/bounds): Bounds on `set.image2` (#14306)
`set.image2` analogues to the `set.image` lemmas.

2022-06-04 08:30:21 85fffda
feat(order/conditionally_complete_lattice,data/real/nnreal): add 2 lemmas (#14545)
Add `cInf_univ` and `nnreal.Inf_empty`.

2022-06-04 06:32:56 72ac40e
feat(data/multiset/basic): add some lemmas (#14421)

2022-06-04 04:55:08 a418945
chore(set_theory/surreal/basic): golf (#14168)
We also add some basic lemmas for simplifying the definition of `numeric` when either a game's left or right moves are empty.

2022-06-04 04:16:45 e1b3351
feat(set_theory/game/pgame): Add dot notation on many lemmas (#14149)

2022-06-03 22:33:16 0098286
feat(set_theory/ordinal/natural_ops): define natural addition (#14291)
We define the natural addition operation on ordinals. We prove the basic properties, like commutativity, associativity, and cancellativity. We also provide the type synonym `nat_ordinal` for ordinals with natural operations, which allows us to take full advantage of this rich algebraic structure.

2022-06-03 16:16:11 d63246c
feat(analysis/calculus/fderiv_measurable): the right derivative is measurable (#14527)
We already know that the full Fréchet derivative is measurable. In this PR, we follow the same proof to show that the right derivative of a function defined on the real line is also measurable (the target space may be any complete vector space).

2022-06-03 16:16:10 2a21a86
refactor(algebra/order/ring): turn `sq_le_sq` into an `iff` (#14511)
* `sq_le_sq` and `sq_lt_sq` are now `iff` lemmas;
* drop `abs_le_abs_of_sq_le_sq` and `abs_lt_abs_of_sq_lt_sq`.

2022-06-03 14:08:37 fa22603
docs(order/boolean_algebra): typo in generalized boolean algebra doc (#14536)

2022-06-03 12:27:32 6ca5910
feat(measure_theory/integral/lebesgue): approximate a function by a finite integral function in a sigma-finite measure space. (#14528)
If `L < ∫⁻ x, f x ∂μ`, then there exists a measurable function `g ≤ f` (even a simple function) with finite integral and `L < ∫⁻ x, g x ∂μ`, if the measure is sigma-finite.

2022-06-03 10:31:17 bec8b65
feat(analysis/calculus/tangent_cone): unique differentiability of open interval at endpoint (#14530)
We show that, if a point belongs to the closure of a convex set with nonempty interior, then it is a point of unique differentiability. We apply this to the specific situation of `Ioi` and `Iio`.

2022-06-03 10:31:16 705160e
feat(algebra/char_zero): add a lemma `ring_hom.injective_nat` (#14414)
Note that there is a lemma `ring_hom.injective_int`.

2022-06-03 10:31:15 d2dcb74
feat(data/polynomial/eval): reduce assumptions, add a lemma (#14391)
Note that there is a lemma `mv_polynomial.support_map_of_injective`.

2022-06-03 10:31:14 c9d69a4
feat(topology/algebra/module/finite_dimension): all linear maps from a finite dimensional T2 TVS are continuous (#13460)
Summary of the changes :
- generalize a bunch of results from `analysis/normed_space/finite_dimension` (main ones are : `continuous_equiv_fun_basis`, `linear_map.continuous_of_finite_dimensional`, and related constructions like `linear_map.to_continuous_linear_map`) to arbitrary TVSs, and move them to a new file `topology/algebra/module/finite_dimension`
- generalize `linear_map.continuous_iff_is_closed_ker` to arbitrary TVSs, and move it from `analysis/normed_space/operator_norm` to the new file
- as needed by the generalizations, add lemma `unique_topology_of_t2` : if `𝕜` is a nondiscrete normed field, any T2 topology on `𝕜` which makes it a topological vector space over itself (with the norm topology) is *equal* to the norm topology
- finally, change `pi_eq_sum_univ` to take any `decidable_eq` instance (not just the classical ones), and fix later uses

2022-06-03 08:57:19 31cbfbb
feat(linear_algebra/basis): repr_support_of_mem_span (#14504)
This lemma states that if a vector is in the span of a subset of the basis vectors, only this subset of basis vectors will be used in its `repr` representation.

2022-06-03 07:58:59 2b69bb4
feat(analysis/complex/upper_half_plane): extend action on upper half plane to GL_pos (#12415)
This extends the action on the upper half plane from `SL_2` to `GL_pos`,

2022-06-02 21:38:24 1a1895c
feat(data/nat/basic): add lemmas about `nat.bit_cases_on` (#14481)
Also drop `nat.bit_cases` (was the same definition with a different
order of arguments).

2022-06-02 19:38:29 ade30c3
feat(data/int/basic): Lemmas for when a square equals 1 (#14501)
This PR adds two lemmas for when a square equals one. The `lt` lemma will be useful for irreducibility of x^n-x-1.

2022-06-02 19:38:28 e443331
refactor(field_theory/normal): generalize `lift_normal` and `restrict_normal` (#14450)
This generalization seems useful. The example I have in mind is restricting a map `ϕ : E →ₐ[F] (algebraic_closure E)` to a map `ϕ : E →ₐ[F] E` when E/F is normal.
Coauthored by @mariainesdff

2022-06-02 17:31:51 ae02583
refactor(data/set/finite): protect `set.finite` (#14344)
This change will make it so that it does not conflict with a top-level `finite` that will be added to complement `infinite`.

2022-06-02 17:31:49 28031a8
feat(number_theory/factorization): evaluating arithmetic functions at prime powers (#13817)

2022-06-02 15:58:16 0575db0
feat(topology/vector_bundle): define some useful linear maps globally (#14484)
* Define `pretrivialization.symmₗ`, `pretrivialization.linear_map_at`, `trivialization.symmL`, `trivialization.continuous_linear_map_at`
* These are globally-defined (continuous) linear maps. They are linear equivalences on `e.base_set`, but it is useful to define these globally. They are defined as `0` outside `e.base_set`
* These are convenient to define the vector bundle of continuous linear maps.

2022-06-02 15:58:15 c5f8d78
doc(set_theory/cardinal/cofinality): add myself as author (#14469)

2022-06-02 15:58:14 4bd8c85
feat(category_theory/limits): is_kernel_of_comp (#14409)
From LTE.
Also rename `lift_comp_ι` to `lift_ι` for consistency with the general `has_limit` versions.

2022-06-02 15:58:13 2941590
feat(linear_algebra/matrix): Spectral theorem for matrices (#14231)

2022-06-02 13:48:11 4e1eeeb
feat(tactic/linear_combination): allow combinations of arbitrary proofs (#14229)
This changes the syntax of `linear_combination` so that the combination is expressed using arithmetic operation. Credit to @digama0 for the parser. See [Zulip](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.2313979.20arbitrary.20proof.20terms.20in.20.60linear_combination.60) for more details.

2022-06-02 09:08:42 57885b4
feat(topological_space/vector_bundle): reformulate linearity condition (#14485)
* Reformulate the linearity condition on (pre)trivializations of vector bundles using `total_space_mk`. Note: it is definitionally equal to the previous definition, but without using the coercion.
* Make one argument of `e.linear` implicit
* Simplify the proof of linearity of the product of vector bundles

2022-06-01 23:57:04 c414df7
feat(tactic/linear_combination): allow arbitrary proof terms (#13979)
This extends `linear_combination` to allow arbitrary proof terms of equalities instead of just local hypotheses. 
```lean
constants (qc : ℚ) (hqc : qc = 2*qc)
example (a b : ℚ) (h : ∀ p q : ℚ, p = q) : 3*a + qc = 3*b + 2*qc :=
by linear_combination (h a b, 3) (hqc)
```
This changes the syntax of `linear_combination` in the case where no coefficient is provided and it defaults to 1. A space-separated list of pexprs won't parse, since there's an ambiguity in `h1 h2` between an application or two arguments. So this case now requres parentheses around the argument:
`linear_combination (h1, 3) (h2)`
Does anyone object to this syntax change?

2022-06-01 20:32:56 12ad63e
feat(order/conditionally_complete_lattice): Map `Inf` by monotone function (#14118)

2022-06-01 17:27:02 9600f4f
feat(order/filter/bases): view a filter as a *bundled* filter basis (#14506)
We already have `filter.basis_sets` which says that the elements of a filter are a basis of itself (in the `has_basis` sense), but we don't have the fact that they form a filter basis (in the `filter_basis` sense), and `x ∈ f.basis_sets.is_basis.filter_basis` is not defeq to `x ∈ f`

2022-06-01 17:27:01 0950ba3
refactor(topology/separation): rename `indistinguishable` to `inseparable` (#14401)
* Replace `indistinguishable` by `inseparable` in the definition and lemma names. The word "indistinguishable" is too generic.
* Rename `t0_space_iff_distinguishable` to `t0_space_iff_not_inseparable` because the name `t0_space_iff_separable` is misleading, slightly golf the proof.
* Add `t0_space_iff_nhds_injective`, `nhds_injective`, reorder lemmas around these two.

2022-06-01 17:27:00 9b3ea03
feat(data/bundle): make arguments to proj and total_space_mk implicit (#14359)
I will wait for a later PR to (maybe) fix the reducibility/simp of these declarations.

2022-06-01 15:09:46 dba797a
feat(order/liminf_limsup): composition `g ∘ f` is bounded iff `f` is bounded (#14479)
* If `g` is a monotone function that tends to infinity at infinity, then a filter is bounded from above under `g ∘ f` iff it is bounded under `f`, similarly for antitone functions and/or filter bounded from below.
* A filter is bounded from above under `real.exp ∘ f` iff it is is bounded from above under `f`.
* Use `monotone` in `real.exp_monotone`.
* Add `@[mono]` to `real.exp_strict_mono`.

2022-06-01 15:09:45 047db39
feat(algebra/char_p/basic): add lemma `ring_char.char_ne_zero_of_finite` (#14454)
This adds the fact that a finite (not necessarily associative) ring cannot have characteristic zero.
See [this topic on Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Statements.20about.20finite.20rings).

2022-06-01 15:09:44 df057e3
feat(measure_theory/integral/lebesgue): integral over finite and countable sets (#14447)

2022-06-01 15:09:43 f0216ff
refactor(combinatorics/simple_graph/basic): rename induced embedding on complete graphs (#14404)

2022-06-01 15:09:42 0a0a60c
feat(data/set/finite,order/*): generalize some lemmas from sets to (co)frames (#14394)
* generalize `set.Union_inter_of_monotone` to an `order.frame`;
* add dual versions, both for `(co)frame`s and sets;
* same for `set.Union_Inter_of_monotone`.

2022-06-01 15:09:41 892f889
feat(data/matrix/basic): lemmas about mul_vec and single (#13835)
We seem to be proving variants of the same statement over and over again; this introduces a new lemma that we can use to prove all these variants trivially in term mode. The new lemmas are:
* `matrix.mul_vec_single`
* `matrix.single_vec_mul`
* `matrix.diagonal_mul_vec_single`
* `matrix.single_vec_mul_diagonal`
A lot of the proofs got shorter by avoiding `ext` which invokes a more powerful lemma than we actually need.

2022-06-01 13:00:47 f359d55
feat(analysis/asymptotics/asymptotics): generalize `is_O.smul` etc (#14487)
Allow `(k₁ : α → 𝕜) (k₂ : α → 𝕜')` instead of `(k₁ k₂ : α → 𝕜)`.

2022-06-01 13:00:46 4f1c8cf
feat(algebra/order/group): helper lemma `0 ≤ a + |a|` (#14457)
Helper lemma for integers and absolute values.

2022-06-01 12:13:54 f4fe790
feat(topology/vector_bundle): redefine continuous coordinate change (#14462)
* For any two trivializations, we define the coordinate change between the two trivializations: continous linear automorphism of `F`, defined by composing one trivialization with the inverse of the other. This is defined for any point in the intersection of their base sets, and we define it to be the identity function outside this set.
* Redefine `topological_vector_bundle`: we now require that this coordinate change between any two trivializations is continuous on the intersection of their base sets.
* Redefine `topological_vector_prebundle` with the existence of a continuous linear coordinate change function.
* Simplify the proofs that the coordinate change function is continuous for constructions on vector bundles.

2022-06-01 09:59:02 60371b8
refactor(topology/metric_space/lipschitz): use `function.End` (#14502)
This way we avoid dependency on `category_theory`.

2022-06-01 09:59:01 7d71343
chore(topology/algebra/uniform_field): Wrap in namespace (#14498)
Put everything in `topology.algebra.uniform_field` in the `uniform_space.completion` namespace.

2022-06-01 09:18:43 2a0f474
feat(analysis/normed_space/star/character_space): compactness of the character space of a normed algebra (#14135)
This PR puts a `compact_space` instance on `character_space 𝕜 A` for a normed algebra `A` using the Banach-Alaoglu theorem. This is a key step in developing the continuous functional calculus.

2022-06-01 01:59:39 6b18362
feat(data/zmod/quotient): More API for `orbit_zpowers_equiv` (#14181)
This PR adds another `symm_apply` API lemma for `orbit_zpowers_equiv`, taking `(k : ℤ)` rather than `(k : zmod (minimal_period ((•) a) b))`.

2022-05-31 22:07:31 bdf3e97
chore(data/polynomial/laurent): remove unused case distinction (#14490)

2022-05-31 20:07:53 26a62b0
fix(topology/algebra/module/multilinear): initialize simps projections (#14495)
* `continuous_multilinear_map.smul_right` has a `simps` attribute, causing the generation of the simps projections for `continuous_multilinear_map`, but without specific support for apply. We now initialize the simps projections correctly.
* This fixes an error in the sphere eversion project

2022-05-31 20:07:51 9dc4b8e
feat(algebra/group_power/basic): `a^2 = b^2 ↔ a = b ∨ a = -b` (#14431)
Generalize `a ^ 2 = 1 ↔ a = 1 ∨ a = -1` to `ring` + `no_zero_divisors` and prove `a ^ 2 = b ^ 2 ↔ a = b ∨ a = -b` under `comm_ring` + `no_zero_divisors`.

2022-05-31 18:03:22 8e522f8
feat(algebra/order/monoid): Missing `has_exists_mul_of_le` instances (#14476)
Add a few `has_exists_mul_of_le` instances, generalize `has_exists_mul_of_le` to `has_le` + `has_mul`.

2022-05-31 13:49:17 e0b2ad8
chore(algebra/lie/quotient): golf some instances (#14480)

2022-05-31 13:49:16 806f673
feat(algebra/star): star_single, star_update (#14477)

2022-05-31 11:57:57 3e79ce4
chore(combinatorics/simple_graph/basic): remove unnecessary lemma (#14468)
This lemma was added in #11371 for the Lean version bump, since the more powerful congr lemmas revealed a bug in fintype instances that were finally corrected in #14136.

2022-05-31 11:57:56 1eb7339
feat(topology/algebra/group): add `continuous_of_continuous_at_one` (#14451)
This lemma is more general than
`uniform_continuous_of_continuous_at_one` because it allows the
codomain to be a monoid.

2022-05-31 11:57:55 0f3e083
feat(algebra/algebra/basic): relax typeclass assumptions (#14415)

2022-05-31 11:57:54 346174e
feat(data/polynomial/laurent): a Laurent polynomial can be multiplied by a power of `X` to "become" a polynomial (#14106)
This PR proves two versions of the result mentioned in the title, one involving multiplying by a non-negative power of `T`, the other usable as an induction principle.

2022-05-31 09:48:05 87fbbd1
chore(analysis/asymptotics): golf 2 proofs (#14473)
Don't go back and forth between `∈ l` and `∀ᶠ l`.

2022-05-31 09:48:04 9e9cc57
feat(analysis/asymptotics/asymptotics): add `is_O_const_iff` (#14472)
* use `f =ᶠ[l] 0` instead of `∀ᶠ x in l, f x = 0` in
  `is_{O_with,O,o}_zero_right_iff`;
* generalize these lemmas from `0` in a `normed_group` to `0` in a `semi_normed_group`;
* add `is_O.is_bounded_under_le`, `is_O_const_of_ne`, and `is_O_const_iff`.

2022-05-31 09:48:03 615baba
feat(order/monotone): prove `nat.exists_strict_mono` etc (#14435)
* add `nat.exists_strict_mono`, `nat.exists_strict_anti`, `int.exists_strict_mono`, and `int.exists_strict_anti`;
* move `set.Iic.no_min_order` and `set.Ici.no_max_order` to `data.set.intervals.basic`;
* add `set.Iio.no_min_order` and `set.Ioi.no_max_order`;
* add `no_max_order.infinite` and `no_min_order.infinite`, use them in the proofs;
* rename `set.Ixx.infinite` to `set.Ixx_infinite`;
* add `set.Ixx.infinite` - lemmas and instances about `infinite`, not `set.infinite`.

2022-05-31 09:48:01 cafeaa3
feat(data/set/lattice): add lemmas about unions over natural numbers (#14393)
* Add `Union`/`Inter` versions of lemmas like `supr_ge_eq_supr_nat_add`.
* Make some arguments explicit.

2022-05-31 09:48:00 7127048
feat(data/polynomial/*): `support_binomial` and `support_trinomial` lemmas (#14385)
This PR adds lemmas for the support of binomials and trinomials. The trinomial lemmas will be helpful for irreducibility of x^n-x-1.

2022-05-31 09:47:59 8315ad0
refactor(group_theory/sylow): Move basic API earlier in the file (#14367)
This PR moves some basic sylow API to earlier in the file, so that it can be used earlier.

2022-05-31 09:47:58 111ce5b
feat(group_theory/subgroup/basic): `comap_le_comap` lemmas (#14365)
This PR adds some `comap_le_comap` lemmas.

2022-05-31 09:47:57 1b49d48
refactor(group_theory/order_of_element): Remove coercion in `order_eq_card_zpowers` (#14364)
This PR removes a coercion in `order_eq_card_zpowers`.

2022-05-31 09:47:56 6531c72
chore(algebra/algebra/restrict_scalars): put a right action on restricted scalars (#13996)
This provides `module Rᵐᵒᵖ (restrict_scalars R S M)` in terms of a `module Sᵐᵒᵖ M` action, by sending `Rᵐᵒᵖ` to `Sᵐᵒᵖ` through `algebra_map R S`.
This means that `restrict_scalars R S M` now works for right-modules and bi-modules in addition to left-modules.
This will become important if we change `algebra R A` to require `A` to be an `R`-bimodule, as otherwise `restrict_scalars R S A` would no longer be an algebra.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.2313996.20right.20actions.20on.20restrict_scalars/near/282045994)

2022-05-31 08:02:43 876cb64
feat({group,ring}_theory/sub{monoid,group,semiring,ring}): the action by the center is commutative (#14362)
None of these `smul_comm_class` instances carry data, so they cannot form diamonds.
This action is used to golf the proofs in `quadratic_form.associated`.

2022-05-30 23:53:46 6633283
fix(tactic/norm_num): fix ge unfolding bug (#14425)
As reported on [Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/bug.20in.20norm_num.20handling.20of.20ge.3F).

2022-05-30 22:37:30 e7cc0eb
feat(group_theory/perm/cycle): improve doc and namespace for cauchy's theorem (#14471)
Fix a few things in the module docstring, remove namespace, add an additive version and add docstrings for Cauchy's theorem.
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Existence.20of.20elements.20of.20order.20p.20in.20a.20group/near/284399583

2022-05-30 17:48:15 ba22440
feat(set_theory/cardinal/cofinality): use `bounded` and `unbounded` (#14438)
We change `∀ a, ∃ b ∈ s, ¬ r b a` to its def-eq predicate `unbounded r s`, and similarly for `bounded r s`.

2022-05-30 17:48:15 1de757e
feat(data/fin/basic): add `iff`lemmas about `nontrivial`/`subsingleton` (#14390)

2022-05-30 17:10:32 1791ed3
chore(ring_theory/polynomial/vieta): generalize universe (#14411)

2022-05-30 17:10:31 08c1412
feat(set_theory/game/pgame): `lt_or_equiv_or_gf` (#14407)

2022-05-30 16:30:46 59a1a50
chore(analysis/normed_space/pi_Lp): add `pi_Lp.linear_equiv` (#14380)
This is just a more bundled version of the `pi_Lp.equiv` we already have.
Also adds two missing simp lemmas about `pi_Lp.equiv`.

2022-05-30 13:47:58 01af73a
feat(alegbra/homology/short_exact/abelian.lean): Right split exact sequences + case of modules (#14376)
A right split short exact sequence in an abelian category is split.
Also, in the case of the Module category, a version fully expressed in terms of modules and linear maps is provided.

2022-05-30 12:53:32 3641bf9
refactor(algebraic_topology/*): use rw instead of erw where possible (#14320)

2022-05-30 11:01:47 af70f8e
feat(number_theory/bernoulli_polynomials): Added some lemmas (#14282)
Have added some lemmas regarding rearrangements of sums and evaluations of Bernoulli polynomials.

2022-05-30 04:06:04 475f18b
refactor(analysis/asymptotics): make `is_o`/`is_O` work with `calc` (#14129)
Reorder arguments of `is_O_with`/`is_O`/`is_o` as well as `trans` lemmas so that they work with `calc`.
Also adds `f =O[l] g` notation.
Fixes #2273

2022-05-29 17:50:03 55f32da
feat(topology/vector_bundle): the pullback of a vector bundle is a vector bundle (#8545)
We construct the pullback bundle of a vector bundle.
* Co-authored by: Heather Macbeth <25316162+hrmacbeth@users.noreply.github.com>
* Co-authored by: Floris van Doorn <fpvdoorn@gmail.com>
* Co-authored by: Sebastien Gouezel <sebastien.gouezel@univ-rennes1.fr>

2022-05-29 15:46:51 938eeeb
feat(algebra/group/with_one): add a recursor and a `no_zero_divisors` instance (#14434)

2022-05-29 13:40:03 b673ed8
feat(analysis/normed_space): Geometric Hahn Banach theorems (#7288)
This proves a range of variants of the Hahn-Banach separation theorems.

2022-05-29 11:50:46 98b7637
feat(category_theory/limits): monos have images (#14186)
Turning on an instance for `has_image` for any monomorphism.

2022-05-29 11:13:23 8d13a2d
feat(algebra/order/rearrangement): Equality case of the Rearrangement Inequality (#13245)
This PR deduces the cases of equality and strict inequality of the Rearrangement Inequality as a corollary to the existing statement of the rearrangement inequality.

2022-05-29 09:04:36 6b936a9
feat(data/set/basic): simp-normal form for `↥{x | p x}` (#14441)
We make `{x // p x}` the simp-normal form for `↥{x | p x}`. We also rewrite some lemmas to use the former instead of the latter.

2022-05-29 01:31:29 3e58d9c
feat(data/nat/enat): `is_well_order` instance for `enat` (#14416)

2022-05-28 20:10:48 ad2baee
feat(topology/separation): `t0_space` and `t1_space` for `α × β` and `Π i, α i` (#14418)

2022-05-28 17:52:57 f13e5df
refactor(set_theory/*) rename `wf` lemmas to `lt_wf` (#14417)
This is done for consistency with the rest of `mathlib` (`nat.lt_wf`, `enat.lt_wf`, `finset.lt_wf`, ...)

2022-05-28 17:52:56 762fc15
feat(set_theory/ordinal/arithmetic): Add missing instances for `ordinal` (#14128)
We add the following instances:
- `monoid_with_zero ordinal`
- `no_zero_divisors ordinal`
- `is_left_distrib_class ordinal`
- `contravariant_class ordinal ordinal (swap (+)) (<)`
- `is_antisymm ordinal (∣)`

2022-05-28 17:52:55 3280d00
feat(algebra/order/monoid_lemmas_zero_lt): add some lemmas assuming `mul_zero_class` `partial_order`, remove primes (#14060)

2022-05-28 15:49:21 1e46532
feat(measure_theory/integral/lebesgue): `lintegral_add` holds if 1 function is measurable (#14278)
* for any function `f` there exists a measurable function `g ≤ f` with the same Lebesgue integral;
* prove `∫⁻ a, f a + g a ∂μ = ∫⁻ a, f a ∂μ + ∫⁻ a, g a ∂μ` assuming **one** of the functions is (a.e.-)measurable; split `lintegral_add` into two lemmas `lintegral_add_(left|right)`;
* prove `∫⁻ a, f a ∂μ + ∫⁻ a, g a ∂μ ≤ ∫⁻ a, f a + g a ∂μ` for any `f`, `g`;
* prove a version of Markov's inequality for `μ {x | f x + ε ≤ g x}` with possibly non-measurable `f`;
* prove `f ≤ᵐ[μ] g → ∫⁻ x, f x ∂μ ≠ ∞ → ∫⁻ x, g x ∂μ ≤ ∫⁻ x, f x ∂μ → f =ᵐ[μ] g` for an a.e.-measurable function `f`;
* drop one measurability assumption in `lintegral_sub` and `lintegral_sub_le`;
* add `lintegral_strict_mono_of_ae_le_of_frequently_ae_lt`, a version of `lintegral_strict_mono_of_ae_le_of_ae_lt_on`;
* drop one measurability assumption in `lintegral_strict_mono_of_ae_le_of_ae_lt_on`, `lintegral_strict_mono`, and `set_lintegral_strict_mono`;
* prove `with_density_add` assuming measurability of one of the functions; replace it with `with_density_add_(left|right)`;
* drop measurability assumptions here and there in `mean_inequalities`.

2022-05-28 15:49:19 249f107
feat(algebra/order/monoid_lemmas): remove duplicates, add missing lemmas, fix inconsistencies (#13494)
Changes in the order:
`mul_lt_mul'''` has asymmetric typeclass assumptions. So I did the following 3 changes.
Rename `mul_lt_mul'''` to `left.mul_lt_mul`
Make an alias `mul_lt_mul'''` of `mul_lt_mul_of_lt_of_lt`
Add `right.mul_lt_mul`
Move `le_mul_of_one_le_left'` and `mul_le_of_le_one_left'` together with similar lemmas.
Move `lt_mul_of_one_lt_left'` together with similar lemmas.
Add `mul_lt_of_lt_one_right'` and `mul_lt_of_lt_one_left'`. These are analogs of other lemmas.
Following are changes of lemmas of the form `b ≤ c → a ≤ 1 → b * a ≤ c`, `b ≤ c → 1 ≤ a → b ≤ c * a`, `a ≤ 1 → b ≤ c → a * b ≤ c` and `1 ≤ a → b ≤ c → b ≤ a * c`. With the following changes, these 4 sections will be very similar.
For `b ≤ c → a ≤ 1 → b * a ≤ c`:
Remove `alias mul_le_of_le_of_le_one ← mul_le_one'`. This naming is not consistent with `left.mul_lt_one`.
Add `mul_lt_of_lt_of_lt_one'`.
Add `left.mul_le_one`.
Add `left.mul_lt_one_of_le_of_lt`.
Add `left.mul_lt_one_of_lt_of_le`.
Add `left.mul_lt_one'`.
For `b ≤ c → 1 ≤ a → b ≤ c * a`:
Rename `le_mul_of_le_of_le_one` to `le_mul_of_le_of_one_le`.
Remove `lt_mul_of_lt_of_one_le'`. It's exactly the same as `lt_mul_of_lt_of_one_le`.
Rename `one_le_mul_right` to `left.one_le_mul`.
Rename `one_le_mul` to `left.one_le_mul`.
Rename `one_lt_mul_of_lt_of_le'` to `left.one_lt_mul_of_lt_of_le'`.
Add `left.one_lt_mul`.
Rename `one_lt_mul'` to `left.one_lt_mul'`.
For `a ≤ 1 → b ≤ c → a * b ≤ c`:
Add `mul_lt_of_lt_one_of_lt'`.
Add `right.mul_le_one`.
Add `right.mul_lt_one_of_lt_of_le`.
Add `right.mul_lt_one'`.
For `1 ≤ a → b ≤ c → b ≤ a * c`:
Rename `lt_mul_of_one_lt_of_lt` to `lt_mul_of_one_lt_of_lt'`.
Add `lt_mul_of_one_lt_of_lt`.
Add `right.one_lt_mul_of_lt_of_le`.
Rename `one_lt_mul_of_le_of_lt'` to `right.one_lt_mul_of_le_of_lt`.
Add `right.one_lt_mul'`.
Then create aliases for all `left` lemmas in these 4 sections.
Rename `mul_eq_mul_iff_eq_and_eq` to `left.mul_eq_mul_iff_eq_and_eq`.
Add `right.mul_eq_mul_iff_eq_and_eq`.
Make an alias `mul_eq_mul_iff_eq_and_eq` of `left.mul_eq_mul_iff_eq_and_eq`.
Same for additive version.
However, the implicit parameter inconsistency has not been resolved. It affects too many files.

2022-05-28 13:51:33 2ce8482
feat(computability/regular_expressions): add power operator (#14261)
We can't make `regular_expression` a monoid, but we can put a power operator on it that's compatible with the power operator on languages.

2022-05-28 13:51:32 8a0e712
feat(category_theory/monoidal/discrete): simps (#14259)
This is a minuscule change, but it appears to work both on `master` and in the [shift functor refactor](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/trouble.20in.20.60shift_functor.60.20land) I'm aspiring towards, so I'm shipping it off for CI.

2022-05-28 13:51:31 dcd5ebd
feat({data/{finset,set},order/filter}/pointwise): More lemmas (#14216)
Lemmas about `s ^ n`, `0 * s` and `1 ∈ s / t`.
Other changes:
* `finset.mul_card_le` → `finset.card_mul_le`
* `finset.card_image_eq_iff_inj_on` → `finset.card_image_iff`.
* `zero_smul_subset` → `zero_smul_set_subset`
* Reorder lemmas slightly
* Add an explicit argument to `finset.coe_smul_finset`
* Remove an explicit argument to `set.empty`

2022-05-28 11:42:59 15fe782
doc(set_theory/lists): fix typo (#14427)

2022-05-28 11:42:58 d0efbcb
feat(model_theory/elementary_maps): Elementary maps respect all (bounded) formulas (#14252)
Generalizes `elementary_embedding.map_formula` to more classes of formula.

2022-05-28 11:42:57 599240f
refactor(order/bounds): general cleanup (#14127)
Apart from golfing, this PR does the following:
Add the following theorems (which are immediate from the non-self counterparts):
- `monotone_on.mem_upper_bounds_image_self`
- `monotone_on.mem_lower_bounds_image_self`
- `antitone_on.mem_upper_bounds_image_self`
- `antitone_on.mem_lower_bounds_image_self`
Remove the following theorems (as they're just `mem_X_bounds_image` under unnecessarily stronger assumptions):
- `monotone_on.is_lub_image_le`
- `monotone_on.le_is_glb_image`
- `antitone_on.is_lub_image_le`
- `antitone_on.le_is_glb_image`
- `monotone.is_lub_image_le`
- `monotone.le_is_glb_image`
- `antitone.is_lub_image_le`
- `antitone.le_is_glb_image`
Remove a redundant argument `s ⊆ t` from the following (the old theorems follow immediately from the new ones and `monotone_on.mono`):
- `monotone_on.map_is_greatest`
- `monotone_on.map_is_least`
- `antitone_on.map_is_greatest`
- `antitone_on.map_is_least`

2022-05-28 10:25:26 bb90598
feat(set_theory/ordinal/basic): Turn various lemmas into `simp` (#14075)

2022-05-28 05:34:51 dccab1c
feat(algebra/ring/basic): Generalize theorems on distributivity (#14140)
Many theorems assuming full distributivity only need left or right distributivity. We remedy this by making new `left_distrib_class` and `right_distrib_class` classes.
The main motivation here is to generalize various theorems on ordinals, like [ordinal.mul_add](https://leanprover-community.github.io/mathlib_docs/set_theory/ordinal/arithmetic.html#ordinal.mul_add).

2022-05-28 04:03:23 15b7e53
refactor(set_theory/cardinal/*): `cardinal.succ` → `order.succ` (#14273)

2022-05-28 00:43:54 5eb68b5
feat(data/polynomial/mirror): `nat_degree` and `nat_trailing_degree` of `p * p.mirror` (#14397)
This PR adds lemmas for the `nat_degree` and `nat_trailing_degree` of `p * p.mirror`. These lemmas tell you that you can recover `p.nat_degree` and `p.nat_trailing_degree` from `p * p.mirror`, which will be useful for irreducibility of x^n-x-1.

2022-05-27 23:26:09 a08d179
refactor(set_theory/ordinal/*): `ordinal.succ` → `order.succ` (#14243)
We inline the definition of `ordinal.succ` in the `succ_order` instance. This allows us to comfortably use all of the theorems about `order.succ` to our advantage.

2022-05-27 21:20:28 9919539
feat(category_theory): more API for isomorphisms (#14420)

2022-05-27 21:20:27 533cbf4
feat(data/int/{cast, char_zero}): relax typeclass assumptions (#14413)

2022-05-27 19:20:34 f598e58
feat(topology/vector_bundle): do not require topology on the fibers for topological_vector_prebundle (#14377)
* Separated from branch `vb-hom`

2022-05-27 19:20:33 a94ae0c
feat(data/list/min_max): add le_max_of_le, min_le_of_le  (#14340)

2022-05-27 19:20:32 41ca601
feat(analysis/convolution): The convolution of two functions (#13540)
* Define the convolution of two functions.
* Prove that when one of the functions has compact support and is `C^n` and the other function is locally integrable, the convolution is `C^n`.
* Compute the total derivative of the convolution (when one of the functions has compact support).
* Prove that when taking the convolution with functions that "tend to the Dirac delta function", the convolution tends to the original function.
* From the sphere eversion project.

2022-05-27 19:20:31 baad002
feat(analysis/complex/phragmen_lindelof): Phragmen-Lindelöf principle for some shapes (#13178)
Prove Phragmen-Lindelöf principle
- in a horizontal strip;
- in a vertical strip;
- in a coordinate quadrant;
- in the right half-plane (a few versions).

2022-05-27 17:41:19 1ccb7f0
feat(model_theory/syntax, semantics): Lemmas about relabeling variables (#14225)
Proves lemmas about relabeling variables in terms and formulas
Defines `first_order.language.bounded_formula.to_formula`, which turns turns all of the extra variables of a `bounded_formula` into free variables.

2022-05-27 17:02:33 4b9e57b
feat(model_theory/satisfiability): Upward Löwenheim–Skolem (#13982)
`first_order.language.Theory.exists_elementary_embedding_card_eq` proves the Upward Löwenheim–Skolem Theorem: every infinite `L`-structure `M` elementarily embeds into an `L`-structure of a given cardinality if that cardinality is larger than the cardinalities of `L` and `M`.

2022-05-27 08:53:16 25f75c4
chore(filter/pointwise): protect filter.has_involutive_inv (#14398)

2022-05-27 08:04:40 2a9b0f8
chore(ring_theory/artinian): clarify left/right -ness in doc strings (#14396)

2022-05-27 05:12:29 841aef2
feat(algebraic_topology): the nerve of a category (#14304)

2022-05-27 04:25:55 bae0229
feat(category_theory/monoidal/subcategory): full monoidal subcategories (#14311)
We use a type synonym for `{X : C // P X}` when `C` is a monoidal category and the property `P` is closed under the monoidal unit and tensor product so that `full_monoidal_subcategory` can be made an instance.

2022-05-27 02:02:29 48d831a
feat(order/bounded_order): define `with_bot.map` and `with_top.map` (#14163)
Also define `monotone.with_bot` etc.

2022-05-26 22:13:11 8dd4619
feat(combinatorics/simple_graph/connectivity): deleting edges outside a walk (#14110)

2022-05-26 20:25:47 27791f9
feat(data/real/nnreal): add mul csupr/cinfi lemmas (#13936)

2022-05-26 18:17:05 525cc65
feat(order/rel_classes): Reflexive relation from irreflexive and viceversa (#13411)

2022-05-26 15:16:47 b2973b1
feat(logic/function/basic): add `function.const_injective` (#14388)
Add `function.const_injective` and `function.const_inj`.

2022-05-26 15:16:46 d3b155b
chore(data/stream/defs): add spaces around infix operators (#14386)

2022-05-26 15:16:44 034cf66
chore(set_theory/ordinal/topology): add `variables` block (#14369)
We rename a bunch of variables, but don't fundamentally change any proof.

2022-05-26 15:16:39 be34b95
feat(topology/separation): split some proofs (#14337)

2022-05-26 13:56:36 70e784d
feat(data/polynomial/*): `(p * q).trailing_degree = p.trailing_degree + q.trailing_degree` (#14384)
We already had a `nat_trailing_degree_mul` lemma, but this PR does things properly, following the analogous results for `degree`. In particular, we now have some useful intermediate results that do not assume `no_zero_divisors`.

2022-05-26 11:04:30 5aeafaa
feat(algebra/order/monoid): add `le_iff_exists_mul'` (#14387)
Add a version of `le_iff_exists_mul'`/`le_iff_exists_add'`, versions of `le_iff_exists_mul`/`le_iff_exists_add` with multiplication on the other side.

2022-05-26 09:28:23 acd0509
feat(order/succ_pred/interval_succ): new file (#14294)
Add 2 lemmas about `set.Ioc (f x) (f (order.succ x))`, where `f` is a
monotone function.

2022-05-26 05:56:29 4bf1b02
feat(category_theory/limits): products give pullback squares (#14327)
Follow-up to #14220

2022-05-26 02:20:40 634bef9
feat(topology/continuous_function/stone_weierstrass): generalize the complex Stone-Weierstrass theorem to is_R_or_C fields (#14374)
This PR generalizes the complex Stone-Weierstrass theorem to hold for an `is_R_or_C` field.

2022-05-25 20:40:47 c5b3de8
refactor(data/polynomial/*): Make `support_C_mul_X_pow` match `support_monomial` (#14119)
This PR makes `support_C_mul_X_pow` match `support_monomial`.

2022-05-25 19:08:50 dc0fadd
feat(linear_algebra/prod): define the graph of a linear map (#14266)

2022-05-25 19:08:49 fae32b6
refactor(analysis/normed_space/M_structure): generalize to arbitrary faithful actions (#14222)
This follows up from a comment in review of #12173
The motivation here is to allow `X →L[𝕜] X`, `X →+ X`, and other weaker or stronger endomorphisms to also be used
This also tides up a few proof names and some poorly-rendering LaTeX

2022-05-25 17:33:44 189e5d1
feat(data/polynomial/degree/trailing_degree): The trailing degree of a product is at least the sum of the trailing degrees (#14253)
This PR adds lemmas for `nat_trailing_degree` analogous to `degree_mul_le` and `nat_degree_mul_le`.

2022-05-25 14:21:08 7e1c126
move(group_theory/perm/cycle/*): A cycle folder (#14285)
Move:
* `group_theory.perm.cycles` → `group_theory.perm.cycle.basic`
* `group_theory.perm.cycle_type` → `group_theory.perm.cycle.type`
* `group_theory.perm.concrete_cycle` → `group_theory.perm.cycle.concrete`

2022-05-25 10:28:06 ba1c3f3
feat(data/int/log): integer logarithms of linearly ordered fields (#13913)
Notably, this provides a way to find the position of the most significant digit of a decimal expansion

2022-05-25 09:48:16 f8d5c64
feat(topology/vector_bundle): use trivialization.symm to simplify the product of vector bundles (#14361)

2022-05-25 08:59:21 660918b
feat(measure_theory/function/conditional_expectation): Conditional expectation of an indicator (#14058)
The main lemma is this:
```lean
lemma condexp_indicator (hf_int : integrable f μ) (hs : measurable_set[m] s) :
  μ[s.indicator f | m] =ᵐ[μ] s.indicator (μ[f | m])
```
We also use it to prove that if two sigma algebras are "equal under an event", then the conditional expectations with respect to those two sigma algebras are equal under the same event.

2022-05-25 07:01:43 5da3731
feat(measure_theory/integral): add formulas for average over an interval (#14132)

2022-05-25 02:04:38 c1e2121
feat(data/set/finite): set priority for fintype_insert' and document (#14363)
This follows up with some review comments for #14136.

2022-05-25 00:18:41 f582298
feat(group_theory/subgroup/basic): `zpowers_eq_bot` (#14366)
This PR adds a lemma `zpowers_eq_bot`.

2022-05-24 19:56:59 ebb5206
chore(set_theory/surreal/basic): clarify some proofs (#14356)

2022-05-24 19:56:58 cdaa6d2
refactor(analysis/normed_space/pi_Lp): golf some instances (#14339)
* drop `pi_Lp.emetric_aux`;
* use `T₀` to get `(e)metric_space` from `pseudo_(e)metric_space`;
* restate `pi_Lp.(anti)lipschitz_with_equiv` with correct `pseudo_emetric_space` instances; while they're defeq, it's better not to leak auxiliary instances unless necessary.

2022-05-24 19:02:02 23f30a3
fix(topology/vector_bundle): squeeze simp, remove non-terminal simp (#14357)
For some reason I had to mention `trivialization.coe_coe` explicitly, even though it is in `mfld_simps` (maybe because another simp lemma would otherwise apply first?)

2022-05-24 16:46:14 88f8de3
feat(topology/local_homeomorph): define helper definition (#14360)
* Define `homeomorph.trans_local_homeomorph` and `local_homeomorph.trans_homeomorph`. They are equal to `local_homeomorph.trans`, but with better definitional behavior for `source` and `target`.
* Define similar operations for `local_equiv`.
* Use this to improve the definitional behavior of [`topological_fiber_bundle.trivialization.trans_fiber_homeomorph`](https://leanprover-community.github.io/mathlib_docs/find/topological_fiber_bundle.trivialization.trans_fiber_homeomorph)
* Also use `@[simps]` to generate a couple of extra simp-lemmas.

2022-05-24 16:46:12 483b54f
refactor(logic/equiv/set): open set namespace (#14355)

2022-05-24 16:46:11 ec8587f
chore(data/list/forall2): fix incorrect docstring (#14276)
The previous docstring was false, this corrects the definition.

2022-05-24 15:53:41 73a6125
feat(linear_algebra/bilinear_form): generalize scalar instances, fix diamonds (#14358)
This fixes the zsmul and nsmul diamonds, makes sub definitionally better, and makes the scalar instance apply more generally.
This also adds `linear_map.comp_bilin_form`.
These changes bring the API more in line with `quadratic_form`.

2022-05-24 14:54:33 28f7172
refactor(algebra/direct_sum/basic): use the new polymorphic subobject API   (#14341)
This doesn't let us deduplicate the lattice lemmas, but does eliminate the duplicate instances and definitions!
This merges:
* `direct_sum.add_submonoid_is_internal`, `direct_sum.add_subgroup_is_internal`, `direct_sum.submodule_is_internal` into `direct_sum.is_internal`
* `direct_sum.add_submonoid_coe`, `direct_sum.add_subgroup_coe` into `direct_sum.coe_add_monoid_hom`
* `direct_sum.add_submonoid_coe_ring_hom`, `direct_sum.add_subgroup_coe_ring_hom` into `direct_sum.coe_ring_hom`
* `add_submonoid.gsemiring`, `add_subgroup.gsemiring`, `submodule.gsemiring` into `set_like.gsemiring`
* `add_submonoid.gcomm_semiring`, `add_subgroup.gcomm_semiring`, `submodule.gcomm_semiring` into `set_like.gcomm_semiring`
Renames
* `direct_sum.submodule_coe` into `direct_sum.coe_linear_map`
* `direct_sum.submodule_coe_alg_hom` into `direct_sum.coe_alg_hom
And adds:
* `set_like.gnon_unital_non_assoc_semiring`, now that it doesn't need to be repeated three times!
A large number of related lemmas are also renamed to match the new definition names.
This was what originally motivated the `set_like` typeclass; thanks to @Vierkantor for doing the subobject follow up I never got around to!

2022-05-24 14:17:37 a07493a
feat(analysis/convolution): the predicate `convolution_exists` (#13541)
* This PR defines the predicate that a convolution exists.
* This is not that interesting by itself, but it is a preparation for #13540
* I'm using the full module doc for the convolution file, even though not everything promised in the module doc is in this PR.
* From the sphere eversion project

2022-05-24 12:33:08 dc22d65
doc(100.yaml): add Law of Large Numbers (#14353)

2022-05-24 12:33:07 9d193c5
feat(category_theory/comm_sq): functors mapping pullback/pushout squares (#14351)
```
lemma map_is_pullback [preserves_limit (cospan h i) F] (s : is_pullback f g h i) :
  is_pullback (F.map f) (F.map g) (F.map h) (F.map i) := ...
```

2022-05-24 12:33:06 53a70a0
feat(linear_algebra/tensor_power): Add notation for tensor powers, and a definition of multiplication (#14196)
This file introduces the notation `⨂[R]^n M` for `tensor_power R n M`, which in turn is an
abbreviation for `⨂[R] i : fin n, M`.
The proof that this multiplication forms a semiring will come in a later PR (#10255).

2022-05-24 12:33:05 8e3deff
feat(representation_theory/invariants): average_map is a projection onto the subspace of invariants (#14167)

2022-05-24 10:24:08 893f480
feat(group_theory/index): Lemmas for when `relindex` divides `index` (#14314)
This PR adds two lemmas for when `relindex` divides `index`.

2022-05-24 10:24:07 65f1f8e
feat(linear_algebra/quadratic_form/isometry): extract from `linear_algebra/quadratic_form/basic` (#14305)
150 lines seems worthy of its own file, especially if this grows `fun_like` boilerplate in future.
No lemmas have been renamed or proofs changed.

2022-05-24 10:24:06 9870d13
chore(order/bounded_order): Golf `disjoint` API (#14194)
Reorder lemmas and golf.
Lemma additions:
* `disjoint.eq_bot_of_ge`
* `is_compl.of_dual`
* `is_compl_to_dual_iff`
* `is_compl_of_dual_iff`
Lemma deletions:
* `eq_bot_of_disjoint_absorbs`: This is an unhelpful combination of `disjoint.eq_bot_of_ge` and `sup_eq_left`
* `inf_eq_bot_iff_le_compl`: This is a worse version of `is_compl.disjoint_left_iff`
Lemma renames:
* `is_compl.to_order_dual` → `is_compl.dual`

2022-05-24 08:19:34 533c67b
feat(analysis/sum_integral_comparisons): Comparison lemmas between finite sums and integrals (#13179)
In this pull request we target the following lemmas:
```lean
lemma antitone_on.integral_le_sum {x₀ : ℝ} {a : ℕ} {f : ℝ → ℝ}
   (hf : antitone_on f (Icc x₀ (x₀ + a))) :
   ∫ x in x₀..(x₀ + a), f x ≤ ∑ i in finset.range a, f (x₀ + i)
lemma antitone_on.sum_le_integral
   {x₀ : ℝ} {a : ℕ} {f : ℝ → ℝ}
   (hf : antitone_on f (Icc x₀ (x₀ + a))) :
   ∑ i in finset.range a, f (x₀ + i + 1) ≤ ∫ x in x₀..(x₀ + a), f x :=
```
as well as their `monotone_on` equivalents.
These lemmas are critical to many analytic facts, specifically because it so often is the way that error terms end up getting computed.

2022-05-24 07:08:08 93df724
feat(measure_theory/integral/integral_eq_improper): Covering finite intervals by finite intervals (#13514)
Currently, the ability to prove facts about improper integrals only allows for at least one infinite endpoint. However, it is a common need to work with functions that blow up at an end point (e.g., x^r on [0, 1] for r in (-1, 0)). As a step toward allowing that, we introduce `ae_cover`s that allow exhausting finite intervals by finite intervals.
Partially addresses: #12666

2022-05-24 06:28:33 0973ad4
feat(probability/strong_law): the strong law of large numbers (#13690)
We prove the almost sure version of the strong law of large numbers: given an iid sequence of integrable random variables `X_i`, then `(\sum_{i < n} X_i)/n` converges almost surely to `E(X)`. We follow Etemadi's proof, which only requires pairwise independence instead of full independence.

2022-05-24 05:19:10 0d14ee8
feat(field_theory/finite/galois_field): Finite fields are Galois (#14290)
This PR also generalizes a section of `field_theory/finite/basic` from `[char_p K p]` to `[algebra (zmod p) K]`. This is indeed a generalization, due to the presence of the instance `zmod.algebra`.

2022-05-24 03:06:12 179ae9e
feat(category_theory/preadditive): hom orthogonal families (#13871)
A family of objects in a category with zero morphisms is "hom orthogonal" if the only
morphism between distinct objects is the zero morphism.
We show that in any category with zero morphisms and finite biproducts,
a morphism between biproducts drawn from a hom orthogonal family `s : ι → C`
can be decomposed into a block diagonal matrix with entries in the endomorphism rings of the `s i`.
When the category is preadditive, this decomposition is an additive equivalence,
and intertwines composition and matrix multiplication.
When the category is `R`-linear, the decomposition is an `R`-linear equivalence.
If every object in the hom orthogonal family has an endomorphism ring with invariant basis number
(e.g. if each object in the family is simple, so its endomorphism ring is a division ring,
or otherwise if each endomorphism ring is commutative),
then decompositions of an object as a biproduct of the family have uniquely defined multiplicities.
We state this as:
```
lemma hom_orthogonal.equiv_of_iso (o : hom_orthogonal s) {f : α → ι} {g : β → ι}
  (i : ⨁ (λ a, s (f a)) ≅ ⨁ (λ b, s (g b))) : ∃ e : α ≃ β, ∀ a, g (e a) = f a
```
This is preliminary to defining semisimple categories.

2022-05-24 01:48:51 c340170
chore(set_theory/ordinal/*): improve autogenerated instance names for `o.out.α` (#14342)

2022-05-24 00:02:28 10f415a
feat(set_theory/game/basic): mul_cases lemmas (#14343)
These are the multiplicative analogs for `{left/right}_moves_add_cases`.

2022-05-23 23:25:06 dc36333
feat(set_theory/surreal/basic): ordinals are numeric (#14325)

2022-05-23 22:05:46 59ef070
feat(ring_theory/unique_factorization_domain): misc lemmas on factors (#14333)
Two little lemmas on the set of factors which I needed for #12287.

2022-05-23 20:34:27 3f0a2bb
feat(set_theory/cardinal/basic): Inline instances (#14130)
We inline some instances, thus avoiding redundant lemmas. We also clean up the code somewhat.

2022-05-23 17:51:44 b3ff79a
feat(topology/uniform_space/uniform_convergence): Uniform Cauchy sequences (#14003)
A sequence of functions `f_n` is pointwise Cauchy if `∀x ∀ε ∃N ∀(m, n) > N` we have `|f_m x - f_n x| < ε`. A sequence of functions is _uniformly_ Cauchy if `∀ε ∃N ∀(m, n) > N ∀x` we have `|f_m x - f_n x| < ε`.
As a sequence of functions is pointwise Cauchy if (and when the underlying space is complete, only if) the sequence converges, a sequence of functions is uniformly Cauchy if (and when the underlying space is complete, only if) the sequence uniformly converges. (Note that the parenthetical is not directly covered by this commit, but is an easy consequence of two of its lemmas.)
This notion is commonly used to bootstrap convergence into uniform convergence.

2022-05-23 16:11:41 dab06b6
refactor(topology/sequences): rename some `sequential_` to `seq_` (#14318)
## Rename
* `sequential_closure` → `seq_closure`, similarly rename lemmas;
* `sequentially_continuous` → `seq_continuous`, similarly rename lemmas;
* `is_seq_closed_of_is_closed` → `is_closed.is_seq_closed`;
* `mem_of_is_seq_closed` → `is_seq_closed.mem_of_tendsto`;
* `continuous.to_sequentially_continuous` → `continuous.seq_continuous`;
## Remove
* `mem_of_is_closed_sequential`: was a weaker version of `is_closed.mem_of_tendsto`;
## Add
* `is_seq_closed.is_closed`;
* `seq_continuous.continuous`;

2022-05-23 16:11:40 bbf5776
feat(group_theory/sylow): The number of sylow subgroups is indivisible by p (#14313)
A corollary of Sylow's third theorem is that the number of sylow subgroups is indivisible by p.

2022-05-23 16:11:39 7a6d850
feat(probability/stopping): measurability of comparisons of stopping times (#14061)
Among other related results, prove that `{x | τ x ≤ π x}` is measurable with respect to the sigma algebras generated by each of the two stopping times involved.

2022-05-23 14:09:34 8df8968
feat(data/set/function): add `monotone_on.monotone` etc (#14301)

2022-05-23 14:09:33 33262e0
feat(ring_theory/power_series): Added lemmas regarding rescale (#14283)
Added lemmas `rescale_mk`, `rescale_mul` and `rescale_rescale`.

2022-05-23 14:09:32 15e8bc4
feat(topology/vector_bundle): define pretrivialization.symm (#14192)
* Also adds some other useful lemmas about (pre)trivializations
* This splits out the part of #8545 that is unrelated to pullbacks
- Co-authored by Nicolo Cavalleri <nico@cavalleri.net>

2022-05-23 12:13:01 2b35fc7
refactor(data/set/finite): reorganize and put emphasis on fintype instances (#14136)
I went through `data/set/finite` and reorganized it by rough topic (and moved some lemmas to their proper homes; closes #11177). Two important parts of this module are (1) `fintype` instances for various set constructions and (2) ways to create `set.finite` terms. This change puts the module closer to following a design where the `set.finite` terms are created in a formulaic way from the `fintype` instances. One tool for this is a `set.finite_of_fintype` constructor, which lets typeclass inference do most of the work.
Included in this commit is changing `set.infinite` to be protected so that it does not conflict with `infinite`.

2022-05-23 10:20:39 34e450b
chore(linear_algebra/quadratic_form/basic): Reorder lemmas (#14326)
This moves the `fun_like` lemmas up to the top of the file next to the `coe_to_fun` instance, and condenses some sections containing only one lemma.

2022-05-23 10:20:38 275dd0f
feat(algebra/ne_zero): add helper methods (#14286)
Also golfs the inspiration for one of these, and cleans up some code around the area.

2022-05-23 10:20:35 15f49ae
feat(linear_algebra/tensor_algebra/basic): add `tensor_algebra.tprod` (#14197)
This is related to `exterior_power.ι_multi`.
Note the new import caused a proof to time out, so I squeezed the simps into term mode.

2022-05-23 09:19:36 9288a2d
feat(linear_algebra/affine_space/affine_equiv): extra lemmas and docstrings (#14319)
I was struggling to find this definition, so added some more lemmas and a docstring.

2022-05-23 08:30:52 aa6dc57
chore(measure_theory/function/l1_space): drop `integrable.sub'` (#14309)
It used to have weaker TC assumptions than `integrable.sub` but now it's just a weaker version of it.

2022-05-23 07:50:19 2962eab
feat(linear_algebra/trace): trace of transpose map (#13897)

2022-05-23 06:53:49 b5128b8
feat(category_theory/limits): pullback squares (#14220)
Per [zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/pushout.20of.20biprod.2Efst.20and.20biprod.2Esnd.20is.20zero).

2022-05-23 04:06:58 94644b7
chore(scripts): update nolints.txt (#14321)
I am happy to remove some nolints for you!

2022-05-23 01:49:47 542d06a
feat(measure_theory): use `pseudo_metrizable_space` instead of `metrizable_space` (#14310)

2022-05-23 01:49:46 c100004
refactor(category_theory/shift_functor): improve defeq of inverse (#14300)

2022-05-23 01:49:45 56de25e
chore(topology/separation): golf some proofs (#14279)
* extract `minimal_nonempty_closed_eq_singleton` out of the proof of
  `is_closed.exists_closed_singleton`;
* replace `exists_open_singleton_of_open_finset` with
  `exists_open_singleton_of_open_finite`, extract
  `minimal_nonempty_open_eq_singleton` out of its proof.
* add `exists_is_open_xor_mem`, an alias for `t0_space.t0`.

2022-05-23 01:49:44 01eda9a
feat(topology/instances/ennreal): golf, add lemmas about `supr_add_supr` (#14274)
* add `ennreal.bsupr_add'` etc that deal with
  `{ι : Sort*} {p : ι → Prop}` instead of `{ι : Type*} {s : set ι}`;
* golf some proofs by reusing more powerful generic lemmas;
* add `ennreal.supr_add_supr_le`, `ennreal.bsupr_add_bsupr_le`,
  and `ennreal.bsupr_add_bsupr_le'`.

2022-05-23 01:49:43 9861db0
feat(logic/hydra): termination of a hydra game (#14190)
+ The added file logic/hydra.lean deals with the following version of the hydra game: each head of the hydra is labelled by an element in a type `α`, and when you cut off one head with label `a`, it grows back an arbitrary but finite number of heads, all labelled by elements smaller than `a` with respect to a well-founded relation `r` on `α`. We show that no matter how (in what order) you choose cut off the heads, the game always terminates, i.e. all heads will eventually be cut off. The proof follows https://mathoverflow.net/a/229084/3332, and the notion of `fibration` and the `game_add` relation on the product of two types arise in the proof.
+ The results is used to show the well-foundedness of the intricate induction used to show that multiplication of games is well-defined on surreals, see [Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Well-founded.20recursion.20for.20pgames/near/282379832).
+ One lemma `add_singleton_eq_iff` is added to data/multiset/basic.
+ `acc.trans_gen` is added, closing [a comment](https://github.com/leanprover-community/lean/pull/713/files#r867394835) at lean#713.

2022-05-23 01:49:42 8304b95
refactor(algebra/big_operators/*): Generalize to division monoids (#14189)
Generalize big operators lemmas to `division_comm_monoid`. Rename `comm_group.inv_monoid_hom` to `inv_monoid_hom` because it is not about`comm_group` anymore and we do not use classes as namespaces.

2022-05-23 01:49:41 16a5286
feat(order/atoms): add lemmas (#14162)

2022-05-22 23:41:38 4cdde79
chore(set_theory/game/ordinal): minor golfing (#14317)
We open the `pgame` namespace to save a few characters. We also very slightly golf the proof of `to_pgame_le`.

2022-05-22 23:41:37 005df45
feat(topology/metric_space): use weaker TC assumptions (#14316)
Assume `t0_space` instead of `separated_space` in `metric.of_t0_pseudo_metric_space` and `emetric.of_t0_pseudo_emetric_space` (both definition used to have `t2` in their names).

2022-05-22 23:41:36 9e9a2c9
feat(algebra/ring/basic): add `no_zero_divisors.to_cancel_comm_monoid_with_zero` (#14302)
This already existed as `is_domain.to_cancel_comm_monoid_with_zero` with overly strong assumptions.

2022-05-22 23:41:35 dcb3cb1
chore(logic/equiv/set): golf definition (#14284)
I've no idea which name is better; for now, let's at least not implement the same function twice.

2022-05-22 23:41:34 60897e3
refactor(set_theory/game/nim): `0 ≈ nim 0` → `nim 0 ≈ 0` (#14270)
We invert the directions of a few simple equivalences/relabellings to a more natural order (simpler on the RHS).

2022-05-22 23:41:33 5a24374
doc(set_theory/game/basic): improve docs (#14268)

2022-05-22 23:41:32 cef5898
chore(linear_algebra): generalize conversion between matrices and bilinear forms to semirings (#14263)
Only one lemma was moved (`dual_distrib_apply`), none were renamed, and no proofs were meaningfully changed.
Section markers were shuffled around, and some variables exchanged for variables with weaker typeclass assumptions.
A few other things have been generalized to semiring at the same time; `linear_map.trace` and `linear_map.smul_rightₗ`

2022-05-22 23:41:31 e09e877
refactor(set_theory/cardinal/cofinality): infer arguments (#14251)
We make one of the arguments in `cof_type_le` and `lt_cof_type` implicit.

2022-05-22 23:41:30 d946573
chore(data/matrix/basic): add `matrix.star_mul_vec` and `matrix.star_vec_mul` (#14248)
This also generalizes some nearby typeclasses.

2022-05-22 23:41:29 684587b
feat(set_theory/game/pgame): `add_lf_add_of_lf_of_le` (#14150)
This generalizes the previously existing `add_lf_add` on `numeric` games.

2022-05-22 22:57:28 b7952ee
refactor(category_theory/shift): remove opaque_eq_to_iso (#14262)
It seems `opaque_eq_to_iso` was only needed because we had over-eager simp lemmas. After #14260, it is easy to remove.

2022-05-22 21:01:20 178456f
feat(set_theory/surreal/basic): definition of `≤` and `<` on numeric games (#14169)

2022-05-22 18:33:19 fe2b5ab
feat(set_theory/game/pgame): instances for empty moves of addition (#14297)

2022-05-22 17:01:21 1b7e918
chore(algebra/geom_sum): rename to odd.geom_sum_pos (#14264)
allowing dot notation :)

2022-05-22 16:14:11 eb8994b
feat(measure_theory): use more `[(pseudo_)metrizable_space]` (#14232)
* Use `[metrizable_space α]` or `[pseudo_metrizable_space α]` assumptions in some lemmas, replace `tendsto_metric` with `tendsto_metrizable` in the names of these lemmas.
* Drop `measurable_of_tendsto_metric'` and `measurable_of_tendsto_metric` in favor of `measurable_of_tendsto_metrizable'` and `measurable_of_tendsto_metrizable`.

2022-05-22 14:41:20 eae0510
feat(category_theory/natural_isomorphism): a simp lemma cancelling inverses (#14299)
I am not super happy to be adding lemmas like this, because it feels like better designed simp normal forms (or something else) could just avoid the need.
However my efforts to think about this keep getting stuck on the shift functor hole we're in, and this lemma is useful in the meantime to dig my way out of it. :-)

2022-05-22 14:41:19 e4a8db1
feat(data/real/ennreal): lemmas about unions and intersections (#14296)

2022-05-22 14:41:17 a836c6d
refactor(category_theory): remove some simp lemmas about eq_to_hom (#14260)
The simp lemma `eq_to_hom_map : F.map (eq_to_hom p) = eq_to_hom (congr_arg F.obj p)` is rather dangerous, but after it has fired it's much harder to see the functor `F` (e.g. to use naturality of a natural transformation).
This PR removes `@[simp]` from that lemma, at the expense of having a few `local attribute [simp]`s, and adding it explicitly to simp sets.
On the upside, we also get to *remove* some `simp [-eq_to_hom_map]`s. I'm hoping also to soon be able to remove `opaque_eq_to_hom`, as it was introduced to avoid the problem this simp lemma was causing.
The PR is part of an effort to solve some problems identified on [zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/trouble.20in.20.60shift_functor.60.20land).

2022-05-22 12:23:13 0386c3b
refactor(order/filter/lift): reformulate `lift_infi` etc (#14138)
* add `monotone.of_map_inf` and `monotone.of_map_sup`;
* add `filter.lift_infi_le`: this inequality doesn't need any assumptions;
* reformulate `filter.lift_infi` and `filter.lift'_infi` using `g (s ∩ t) = g s ⊓ g t` instead of `g s ⊓ g t = g (s ∩ t)`;
* rename `filter.lift_infi'` to `filter.lift_infi_of_directed`, use `g (s ∩ t) = g s ⊓ g t`;
* add `filter.lift_infi_of_map_univ` and `filter.lift'_infi_of_map_univ`.

2022-05-22 11:09:06 d036d3c
feat(probability/stopping): prove measurability of the stopped value (#14062)

2022-05-22 11:09:05 49b68e8
feat(analysis/convex/uniform): Uniformly convex spaces (#13480)
Define uniformly convex spaces and prove the implications `inner_product_space ℝ E → uniform_convex_space E` and `uniform_convex_space E → strict_convex_space ℝ E`.

2022-05-22 09:27:57 ac00603
feat(measure_theory/measure/measure_space): add some `null_measurable_set` lemmas (#14293)
Add `measure_bUnion₀`, `measure_sUnion₀`, and `measure_bUnion_finset₀`.

2022-05-22 09:27:56 726b9ce
feat(set_theory/ordinal/arithmetic): Lemmas about `bsup o.succ f` on a monotone function (#14289)

2022-05-22 09:27:55 e99ff88
feat(measure_theory): add `restrict_inter_add_diff` and `lintegral_inter_add_diff` (#14280)
* add `measure_theory.measure.restrict_inter_add_diff` and `measure_theory.lintegral_inter_add_diff`;
* drop one measurability assumption in `measure_theory.lintegral_union`;
* add `measure_theory.lintegral_max` and `measure_theory.set_lintegral_max`;
* drop `measure_theory.measure.lebesgue_decomposition.max_measurable_le`: use `set_lintegral_max` instead.

2022-05-22 09:27:53 2d9f791
feat(order/filter): add lemmas about filter.has_antitone_basis (#14131)
* add `filter.has_antitone_basis.comp_mono` and
  `filter.has_antitone_basis.comp_strict_mono`;
* add `filter.has_antitone_basis.subbasis_with_rel`;
* generalize `filter.has_basis.exists_antitone_subbasis` to `ι : Sort*`.
* add a missing docstring.

2022-05-22 09:27:53 52df6ab
refactor(category_theory): remove all decidability instances (#14046)
Make the category theory library thoroughly classical: mostly this is ceasing carrying around decidability instances for the indexing types of biproducts, and for the object and morphism types in `fin_category`.
It appears there was no real payoff: the category theory library is already extremely non-constructive.
As I was running into occasional problems providing decidability instances (when writing construction involving reindexing biproducts), it seems easiest to just remove this vestigial constructiveness from the category theory library.

2022-05-22 08:40:44 37647bf
feat(measure_theory/constructions/borel_space): add `norm_cast` lemmas (#14295)

2022-05-22 06:29:42 9b8588a
chore(algebra/order/ring): golf `mul_le_one` (#14245)
golf `mul_le_one`

2022-05-22 06:29:41 49ce967
feat(ring_theory/valuation/basic): notation for `with_zero (multiplicative ℤ)` (#14064)
And likewise for `with_zero (multiplicative ℕ)`

2022-05-22 04:22:45 a8a211f
feat(order/lattice): add `left_lt_inf` etc (#14152)
* add `left_lt_sup`, `right_lt_sup`, `left_or_right_lt_sup`, and their `inf` counterparts;
* generalize `is_top_or_exists_gt` and `is_bot_or_exists_lt` to directed orders, replacing `forall_le_or_exists_lt_inf` and `forall_le_or_exists_lt_sup`;
* generalize `exists_lt_of_sup` and `exists_lt_of_inf` to directed orders, rename them to `exists_lt_of_directed_le` and `exists_lt_of_directed_ge`.

2022-05-22 01:40:48 d8b6f76
feat(set_theory/game/birthday): More basic birthdays (#14287)

2022-05-21 11:38:54 f04684f
chore(data/set/pointwise): Move into the `set` namespace (#14281)
A bunch of lemmas about scalar multiplications of sets were dumped in root namespace for some reason.
The lemmas moved to `set.*` are:
* `zero_smul_set`
* `zero_smul_subset`
* `subsingleton_zero_smul_set`
* `zero_mem_smul_set`
* `zero_mem_smul_iff`
* `zero_mem_smul_set_iff`
* `smul_add_set`
* `smul_mem_smul_set_iff`
* `mem_smul_set_iff_inv_smul_mem`
* `mem_inv_smul_set_iff`
* `preimage_smul`
* `preimage_smul_inv`
* `set_smul_subset_set_smul_iff`
* `set_smul_subset_iff`
* `subset_set_smul_iff`
* `smul_mem_smul_set_iff₀`
* `mem_smul_set_iff_inv_smul_mem₀`
* `mem_inv_smul_set_iff₀`
* `preimage_smul₀`
* `preimage_smul_inv₀`
* `set_smul_subset_set_smul_iff₀`
* `set_smul_subset_iff₀`
* `subset_set_smul_iff₀`
* `smul_univ₀`
* `smul_set_univ₀`

2022-05-21 08:14:04 fc19a4e
feat({data/finset,order/filter}/pointwise): Multiplicative action on pointwise monoids (#14214)
`mul_action`, `distrib_mul_action`, `mul_distrib_mul_action` instances for `finset` and `filter`. Also delete `set.smul_add_set` because `smul_add` proves it.

2022-05-21 06:32:31 eaa771f
chore(tactic/cancel_denoms): remove an unused have (#14269)

2022-05-21 03:17:39 d787d49
feat(algebra/big_operators): add `finset.prod_comm'` (#14257)
* add a "dependent" version of `finset.prod_comm`;
* use it to prove the original lemma;
* slightly generalize `exists_eq_right_right` and `exists_eq_right_right'`;
* add two `simps` attributes.

2022-05-21 00:59:53 3fc6fbb
feat(algebra/divisibility): `is_refl` and `is_trans` instances for divisibility (#14240)

2022-05-21 00:22:23 0e095f0
feat(data/polynomial/mirror): `mirror` is injective (#14254)
This PR adds an `inj` lemma for `mirror`.

2022-05-20 23:44:35 d217e1d
feat(set_theory/game/pgame): `sub_self_equiv` (#14272)

2022-05-20 18:26:01 a6b90be
refactor(set_theory/cardinal/*): add `succ_order` instance, rename `succ` lemmas (#14244)
We rename the lemmas on `cardinal.succ` to better match those from `succ_order`.
- `succ_le` → `succ_le_iff`
- `lt_succ` → `lt_succ_iff`
- `lt_succ_self` → `lt_succ`
We also add `succ_le_of_lt` and `le_of_lt_succ`.

2022-05-20 17:46:23 113f7e4
feat(linear_algebra/trace): trace of projection maps  (#14165)
This is proved under the `field` assumption instead of the finite free module assumptions generally used to talk about the trace because we need the submodules `p` and `f.ker` to also be free and finite.
- [x] depends on: #13872

2022-05-20 16:36:21 1983e40
feat(data/zmod/basic): If the orbit is finite, then the minimal period is positive (#14201)
This PR adds an instance stating that if the orbit is finite, then the minimal period is positive.
The instance is needed for an explicit computation that involves a product indexed by `zmod (minimal_period ((•) a) b)`.

2022-05-20 15:32:16 846ed9f
chore(measure_theory/integral/lebesgue): golf some proofs (#14256)

2022-05-20 13:34:14 180d975
feat(set_theory/game/pgame): Tweak `pgame.add` API (#13611)
We modify the API for `pgame.add` as follows: 
- `left_moves_add` and `right_moves_add` are turned from type equivalences into type equalities.
- The former equivalences are prefixed with `to_` and inverted.
We also golf a few theorems and make some parameters explicit.

2022-05-20 11:17:03 1483eca
feat(algebra/algebra/operations): add right induction principles for power membership (#14219)
We already had the left-induction principles.
There's probably some clever trick to get these via `mul_opposite`, but I'm not sure if it's worth the effort.

2022-05-20 06:26:14 1e011e3
feat(linear_algebra/trace): trace of prod_map (#13872)
In this PR I prove that the trace is additive under `prod_map`, i.e. that `trace (prod_map f g) = trace f + trace g`.

2022-05-20 04:06:08 735fbe0
chore(scripts): update nolints.txt (#14255)
I am happy to remove some nolints for you!

2022-05-20 01:48:36 a5878bb
feat(data/polynomial/mirror): `mirror_eq_iff` (#14238)
This PR adds a lemma stating that `p.mirror = q ↔ p = q.mirror`.

2022-05-20 00:16:04 c9c9fa1
refactor(category_theory/discrete): make discrete irreducible (#13762)

2022-05-19 19:16:16 5cf7a1c
feat (algebra/group/prod): Showing that embed_product is injective (#14247)
Proves that `embed_product` is injective.

2022-05-19 19:16:15 3c6f16c
feat(algebra/group/conj): instances + misc (#13943)

2022-05-19 17:11:59 c8f2a1f
chore(*) : `zero_dvd_iff.1` → `eq_zero_of_zero_dvd` (#14241)
We already had a name for this theorem, so we might as well use it.

2022-05-19 17:11:58 ffe7002
feat(topology/locally_constant): Characteristic functions on clopen sets are locally constant (#11708)
Gives an API for characteristic functions on clopen sets, `char_fn`, which are locally constant functions.

2022-05-19 16:29:55 d403cad
chore(linear_algebra/quadratic_form/basic): remove redundant fields (#14246)
This renames `quadratic_form.mk_left` to `quadratic_form.mk` by removing the redundant fields in the structure, as the proof of `mk_left` didn't actually use the fact the ring was commutative as it claimed to in the docstring.
The only reason we could possibly want these is if addition were non-commutative, which seems extremely unlikely.

2022-05-19 14:21:27 218d66a
doc(tactic/lint/type_classes): Fix small typo (#14242)

2022-05-19 12:28:20 e29d911
feat(group_theory/quotient_group): properties of quotients of homomorphisms and equivalences (#13046)
Add `id`, `comp` for quotients of homomorphisms and `refl`, `symm`, `trans` for quotients of equivalences.

2022-05-19 10:20:40 18624ef
feat(order/complete_lattice): add `Sup_diff_singleton_bot` etc (#14205)
* add `Sup_diff_singleton_bot` and `Inf_diff_singleton_top`;
* add `set.sUnion_diff_singleton_empty` and `set.sInter_diff_singleton_univ`.

2022-05-19 09:41:31 6906b6f
feat(analysis/normed_space/pi_Lp): add missing nnnorm lemmas (#14221)
This renames `pi_Lp.dist` to `pi_Lp.dist_eq` and `pi_Lp.edist` to `pi_Lp.edist_eq` to match `pi_Lp.norm_eq`.
The `nndist` version of these lemmas is new.
The `pi_Lp.norm_eq_of_L2` lemma was not stated at the correct generality, and has been moved to an earlier file where doing so is easier.
The `nnnorm` version of this lemma is new.
Also replaces some `∀` binders with `Π` to match the pretty-printer, and tidies some whitespace.

2022-05-19 05:25:12 ea3009f
docs(category_theory/*): the last missing module docs (#14237)

2022-05-19 03:48:08 923a14d
chore(scripts): update nolints.txt (#14239)
I am happy to remove some nolints for you!

2022-05-19 01:41:46 83285b2
refactor(set_theory/game/pgame): Rename `le_def_lf` → `le_iff_forall_lf` (#14206)
One-sided variants of these have also been introduced.

2022-05-19 00:34:01 cc74bcb
feat(topology/algebra/module/basic): add `continuous_linear_map.apply_module` (#14223)
This matches `linear_map.apply_module`, but additionally provides `has_continuous_const_smul`.
This also adds the missing `continuous_linear_map.semiring` and `continuous_linear_map.monoid_with_zero` instances.

2022-05-18 23:17:05 76f9f45
feat(category_theory/limits): (co/bi)products over types with a unique term (#14191)

2022-05-18 22:19:04 c42cff1
doc(deprecated/*): all deprecated files now lint (#14233)
I am happy to remove some nolints for you.

2022-05-18 22:19:03 a5f4cf5
fix(algebra/ring_quot): fix a diamond in the int-smul action (#14226)
We already handle the `nsmul` diamond correctly in the lines above

2022-05-18 20:08:39 32700f5
refactor(*): `insert_singleton` → `pair` (#14210)
We rename various theorems with `insert_singleton` in the name to the more sensible and searchable `pair`. We also golf `finset.pair_comm`.

2022-05-18 20:08:38 5fe43a9
feat(linear_algebra/trace): trace of tensor_products and hom_tensor_hom is an equivalence (#13728)

2022-05-18 18:01:54 259c951
doc(src/deprecated/*): add module docstrings (#14224)
Although we don't ever import them now, I add module docstrings for a couple of deprecated files to make the linter happier. I also attempt to unify the style in the docstrings of all the deprecated files.

2022-05-18 18:01:53 4f31117
feat(data/set/basic): add `set.subset_range_iff_exists_image_eq` and `set.range_image` (#14203)
* add `set.subset_range_iff_exists_image_eq` and `set.range_image`;
* use the former to golf `set.can_lift` (name fixed from `set.set.can_lift`);
* golf `set.exists_eq_singleton_iff_nonempty_subsingleton`.

2022-05-18 16:04:05 470ddbd
chore(analysis,topology): add missing ulift instances (#14217)

2022-05-18 16:04:04 503970d
chore(data/fintype/basic): Better `fin` lemmas (#14200)
Turn `finset.image` into `finset.map` and `insert` into `finset.cons` in the three lemmas relating `univ : finset (fin (n + 1))` and `univ : finset (fin n)`. Golf proofs involving the related big operators lemmas.

2022-05-18 16:04:03 c38ab35
feat(analysis/convex/combination): The convex hull of `s + t` (#14160)
`convex_hull` distributes over pointwise addition of sets and commutes with pointwise scalar multiplication. Also delete `linear_map.image_convex_hull` because it duplicates `linear_map.convex_hull_image`.

2022-05-18 14:08:52 cfedf1d
feat(ring_theory/ideal/operations.lean): lemmas about coprime ideals (#14176)
Generalises some lemmas from `ring_theory/coprime/lemmas.lean` to the case of non-principal ideals.

2022-05-18 14:08:51 2c2d515
refactor(data/list/min_max): Generalise `list.argmin`/`list.argmax` to preorders (#13221)
This PR generalises the contents of the `data/list/min_max` file from a `linear_order` down to a `preorder` with decidable `<`. Note that for this to work out, I have had to change the structure of the auxiliary function `argmax₂` to now mean `option.cases_on a (some b) (λ c, if f c < f b then some b else some c)`. This is because in the case of a preorder, `argmax₂` would perform the swap in the absence of the `≤` relation, which would result in a semi-random shuffle that doesn't look very `maximal`.

2022-05-18 13:10:54 54773fc
feat(topology/algebra/module/multilinear): add `continuous_multilinear_map.smul_right` (#14218)
See https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Question.20about.20.60formal_multilinear_series.60 for one use case

2022-05-18 12:02:21 9dc9c3e
feat(logic/lemmas): Distributivity of `if then else` (#14146)
Distributivity laws for `dite` and `ite`.

2022-05-18 10:31:07 ae6a7c3
feat(linear_algebra/multilinear/finite_dimensional): generalize to finite and free (#14199)
This also renames some `free` and `finite` instances which had garbage names.

2022-05-18 07:53:52 59facea
chore(data/multiset/basic): `∅` → `0` (#14211)
It's preferred to use `0` instead of `∅` throughout the multiset API.

2022-05-18 04:57:17 d08f734
chore(measure_theory/function/strongly_measurable): golf some proofs (#14209)

2022-05-18 02:51:15 50696a8
chore(data/multiset/basic): Inline instances (#14208)
We inline various protected theorems into the `ordered_cancel_add_comm_monoid` instance. We also declare `covariant_class` and `contravariant_class` instances, which make further theorems redundant.

2022-05-18 02:13:32 9f6f605
feat(data/polynomial/mirror): Central coefficient of `p * p.mirror` (#14096)
This PR adds a lemma `(p * p.mirror).coeff (p.nat_degree + p.nat_trailing_degree) = p.sum (λ n, (^ 2))`.
I also rearranged the file by assumptions on the ring `R`.

2022-05-18 01:20:31 f48cbb1
feat(category_theory/limits): reindexing (co/bi)products (#14193)

2022-05-17 23:22:58 ca5930d
feat(data/multiset/basic): `pair_comm` (#14207)

2022-05-17 23:22:57 6b291d7
feat(analysis/special_functions/trigonometric/arctan): add `real.range_arctan` (#14204)

2022-05-17 23:22:56 632fef3
feat(analysis/normed_space/M_structure): Define L-projections, show they form a Boolean algebra (#12173)
A continuous projection P on a normed space X is said to be an L-projection if, for all `x` in `X`,
```
∥x∥ = ∥P x∥ + ∥(1-P) x∥.
```
The range of an L-projection is said to be an L-summand of X.
A continuous projection P on a normed space X is said to be an M-projection if, for all `x` in `X`,
```
∥x∥ = max(∥P x∥,∥(1-P) x∥).
```
The range of an M-projection is said to be an M-summand of X.
The L-projections and M-projections form Boolean algebras. When X is a Banach space, the Boolean
algebra of L-projections is complete.
Let `X` be a normed space with dual `X^*`. A closed subspace `M` of `X` is said to be an M-ideal if
the topological annihilator `M^∘` is an L-summand of `X^*`.
M-ideal, M-summands and L-summands were introduced by Alfsen and Effros to
study the structure of general Banach spaces. When `A` is a JB*-triple, the M-ideals of `A` are
exactly the norm-closed ideals of `A`. When `A` is a JBW*-triple with predual `X`, the M-summands of
`A` are exactly the weak*-closed ideals, and their pre-duals can be identified with the L-summands
of `X`. In the special case when `A` is a C*-algebra, the M-ideals are exactly the norm-closed
two-sided ideals of `A`, when `A` is also a W*-algebra the M-summands are exactly the weak*-closed
two-sided ideals of `A`.
This initial PR limits itself to showing that the L-projections form a Boolean algebra. The approach followed is based on that used in `measure_theory.measurable_space`. The equivalent result for M-projections can be established by a similar argument or by a duality result (to be established). However, I thought it best to seek feedback before proceeding further.

2022-05-17 21:17:37 0afb90b
refactor(algebra/parity): Generalize to division monoids (#14187)
Generalize lemmas about `is_square`, `even` and `odd`. Improve dot notation.

2022-05-17 20:04:43 2158193
feat(topology/instances/matrix): add topological/continuous instances (#14202)
For completeness, `has_continuous_add` and `topological_add_group`
instances are added to matrices, as pi types already have
these. Additionally, `has_continuous_const_smul` and
`has_continuous_smul` matrix instances have been made more generic,
allowing differing index types.

2022-05-17 18:49:25 1f0f981
chore(linear_algebra/multilinear/basic): move finite-dimensionality to a new file (#14198)
`linear_algebra.matrix.to_lin` pulls in a lot of imports that appear to slow things down considerably in downstream files.
The proof is moved without modification.

2022-05-17 17:18:53 ae6f59d
feat(analysis/locally_convex/with_seminorms): pull back `with_seminorms` along a linear inducing (#13549)
This show that, if `f : E -> F` is linear and the topology on `F` is induced by a family of seminorms `p`, then the topology induced on `E` through `f` is induced by the seminorms `(p i) ∘ f`.
- [x] depends on: #13547

2022-05-17 17:18:52 ba38b47
feat(group_theory/perm/list): Add missing `form_perm` lemmas (#13218)

2022-05-17 15:35:00 da201ad
chore(set_theory/ordinal/{basic, arithmetic}): Inline instances (#14076)
We inline various definition in the `ordinal` instances, thus avoiding protected (or unprotected!) definitions that are only used once.

2022-05-17 15:34:59 600d8ea
feat(topology/metric_space): define a pseudo metrizable space (#14053)
* define `topological_space.pseudo_metrizable_space`;
* copy API from `topological_space.metrizable_space`;
* add `pi` instances;
* use `X`, `Y` instead of `α`, `β`.

2022-05-17 15:34:57 e2eea55
feat(algebra/homology): short exact sequences (#14009)
Migrating from LTE. (This is all Johan and Andrew's work, I think, I just tidied up some.)
Please feel free to push changes directly without consulting me. :-)

2022-05-17 13:06:20 3d27911
feat(data/zmod/quotient): The minimal period equals the cardinality of the orbit (#14183)
This PR adds a lemma stating that `minimal_period ((•) a) b = card (orbit (zpowers a) b)`.

2022-05-17 13:06:19 3c87882
feat(number_theory/arithmetic_function): map a multiplicative function across a product (#14180)

2022-05-17 13:06:18 beee9ec
feat(data/complex): real part of sum (#14177)

2022-05-17 13:06:17 d3e3eb8
chore(algebra/monoid_algebra): clean up some bad decidable arguments (#14175)
Some of these statements contained classical decidable instances rather than generalized ones.
By removing `open_locale classical`, these become easy to find.

2022-05-17 13:06:16 7db6ca9
test({data/{finset,set},order/filter}/pointwise): Ensure priority of the `ℕ` and `ℤ` actions (#14166)
Each of `set`, `finset`, `filter` creates (non propeq) diamonds with the fundamental `ℕ` and `ℤ` actions because of instances of the form `has_scalar α β → has_scalar α (set β)`. For example, `{2, 3}^2` could well be `{4, 9}` or `{4, 6, 9}`.
The instances involved are all too important to be discarded, so we decide to live with the diamonds but give priority to the `ℕ` and `ℤ` actions. The reasoning for the priority is that those can't easily be spelled out, while the derived actions can. For example, `s.image ((•) 2)` easily replaces `2 • s`. Incidentally, additive combinatorics uses extensively the `ℕ` action.
This PR adds both a library note and tests to ensure this stays the case. It also fixes the additive `set` and `filter` versions, which were not conforming to the test.

2022-05-17 13:06:14 f33b084
feat(topology/separation): generalize a lemma (#14154)
* generalize `nhds_eq_nhds_iff` from a `[t1_space α]` to a `[t0_space α]`;
* relate `indistinguishable` to `nhds`.

2022-05-17 13:06:13 65bf134
split(algebra/hom/ring): Split off `algebra.ring.basic` (#14144)
Move `non_unital_ring_hom` and `ring_hom` to a new file `algebra.hom.ring`.
Crediting
* Amelia for #1305
* Jireh for #13430

2022-05-17 13:06:12 4ae5e7a
feat(data/polynomial/laurent): laurent polynomials are a module over polynomials (#14121)
This PR only introduces the instance `module R[X] R[T;T⁻¹]`.
I isolated it from the rest, since I want to give special attention to whether there might be any issues declaring it a global instance and whether it should be localized or even simply a def.  Edit: Eric seems happy with this instance!

2022-05-17 13:06:11 46c42cc
refactor(algebra/geom_sum): remove definition (#14120)
There's no need to have a separate definition `geom_sum := ∑ i in range n, x ^ i`. Instead it's better to just write the lemmas about the sum itself: that way `simp` lemmas fire "in the wild", without needing to rewrite expression in terms of `geom_sum` manually.

2022-05-17 11:00:13 2370d10
chore(algebra/order/monoid): golf an instance (#14184)
Move two instances below to reuse a proof.

2022-05-17 03:48:46 f1c08cd
chore(scripts): update nolints.txt (#14185)
I am happy to remove some nolints for you!

2022-05-17 00:02:01 737784e
refactor(algebra/{group_power/{basic,lemmas},group_with_zero/power}): Generalize lemmas to division monoids (#14102)
Generalize `group` and `group_with_zero` lemmas about `zpow` to `division_monoid`. Lemmas are renamed because one of the `group` or `group_with_zero` name has to go. It's just a matter of removing the suffixed `₀`.
Lemma renames

2022-05-16 16:38:19 89f2760
feat(number_theory/legendre_symbol/*): move characters on `zmod n` to new file, add API, improve a proof (#14178)
This is another "administrative" PR with the goal to have a better file structure.
It moves the section `quad_char_mod_p` from `quadratic_char.lean` to a new file `zmod_char.lean`.
It also adds some API lemmas for `χ₈` and `χ₈'` (which will be useful when dealing with the value of quadratic characters at 2 and -2), and I have used the opportunity to shorten the proof of `χ₄_eq_neg_one_pow`.

2022-05-16 15:52:19 93dca41
chore(geometry/manifold/algebra/left_invariant_derivation): golf some proofs (#14172)
The `simp only` had a bunch of lemmas that weren't used.

2022-05-16 13:42:53 4586a97
refactor(data/pi/lex): Use `lex`, provide notation (#14164)
Delete `pilex ι β` in favor of `lex (Π i, β i)` which we provide `Πₗ i, β i` notation for.

2022-05-16 13:42:52 009669c
feat(data/bool/basic): Kaminski's equation (#14159)
`bool.apply_apply_apply : ∀ (f : bool → bool) (x : bool), f (f (f x)) = f x`

2022-05-16 13:42:51 909b673
split(data/set/semiring): Split off `data.set.pointwise` (#14145)
Move `set_semiring` to a new file `data.set.semiring`.
Crediting Floris for #3240

2022-05-16 13:42:49 a9e74ab
feat(order/filter/at_top_bot): use weaker TC assumptions, add lemmas (#14105)
* add `filter.eventually_gt_of_tendsto_at_top`,
  `filter.eventually_ne_at_bot`,
  `filter.eventually_lt_of_tendsto_at_bot`;
* generalize `filter.eventually_ne_of_tendsto_at_top` and
  `filter.eventually_ne_of_tendsto_at_bot` from nontrivial ordered
  (semi)rings to preorders with no maximal/minimal elements.

2022-05-16 11:34:45 844a4f7
refactor(algebra/hom/group): Generalize `map_inv` to division monoids (#14134)
A minor change with unexpected instance synthesis breakage. A good deal of dot notation on `monoid_hom.map_inv` breaks, along with a few uses of `map_inv`. Expliciting the type fixes them all, but this is still quite concerning.

2022-05-16 11:34:44 90659cb
fix(tactic/core): Make the `classical` tactic behave like `open_locale classical` (#14122)
This renames the existing `classical` tactic to `classical!`, and adds a new `classical` tactic that is equivalent to `open_locale classical`.
Comparing the effects of these:
```lean
import tactic.interactive
import tactic.localized
-- this uses the noncomputable instance
noncomputable def foo : decidable_eq ℕ :=
λ m n, begin classical!, apply_instance, end
def bar : decidable_eq ℕ :=
λ m n, begin classical, apply_instance, end
section
open_locale classical
def baz : decidable_eq ℕ :=
λ m n, by apply_instance
end
example : baz = bar := rfl
```
In a few places `classical` was actually just being used as a `resetI`. Only a very small number of uses of `classical` actually needed the more aggressive `classical!` (there are roughtly 500 uses in total); while a number of `congr`s can be eliminated with this change.

2022-05-16 09:19:06 df64e5e
chore(set_theory/game/pgame): minor golf (#14171)

2022-05-16 09:19:05 f4c67ee
chore(group_theory/specific_groups/cyclic): golf `card_order_of_eq_totient_aux₁` and `card_order_of_eq_totient_aux₂` (#14161)
Re-writing the proofs of `card_order_of_eq_totient_aux₁` and `card_order_of_eq_totient_aux₂` to use the new `sum_totient` introduced in #14007, and golfing them.

2022-05-16 09:19:04 a5975e7
feat(data/int/basic): add theorem `int.div_mod_unique` (#14158)
add the `int` version of `div_mod_unique`.

2022-05-16 09:19:03 f7a7c27
chore(ring_theory/ideal/local_ring): golf some proofs, add missing lemma (#14157)

2022-05-16 09:19:01 55b31e0
feat(data/zmod/quotient): `orbit (zpowers a) b` is a cycle of order `minimal_period ((•) a) b` (#14124)
This PR applies the orbit-stabilizer theorem to the action of a cyclic subgroup.

2022-05-16 09:19:00 bc7a201
feat(*): Pointwise monoids have distributive negations (#14114)
More instances of `has_distrib_neg`:
* `function.injective.has_distrib_neg`, `function.surjective.has_distrib_neg`
* `add_opposite`, `mul_opposite`
* `set`, `finset`, `filter`

2022-05-16 09:18:59 f0db51d
feat(algebra/module): morphism classes for (semi)linear maps (#13939)
This PR introduces morphism classes corresponding to `mul_action_hom`, `distrib_mul_action_hom`, `mul_semiring_action_hom` and `linear_map`.
Most of the new generic results work smoothly, only `simp` seems to have trouble applying `map_smulₛₗ`. I expect this requires another fix in the elaborator along the lines of [lean#659](https://github.com/leanprover-community/lean/pull/659). For now we can just keep around the specialized `simp` lemmas `linear_map.map_smulₛₗ` and `linear_equiv.map_smulₛₗ`.
The other changes are either making `map_smul` protected where it conflicts, or helping the elaborator unfold some definitions that previously were helped by the specific `map_smul` lemma suggesting the type.
Thanks to @dupuisf for updating and making this branch compile!
Co-Authored-By: Frédéric Dupuis <dupuisf@iro.umontreal.ca>

2022-05-16 08:42:11 0d76285
doc(set_theory/surreal/basic): update docs (#14170)
We remove an incorrect remark about the order relations on `pgame`, and reference the branch on which the proof of surreal multiplication is being worked on.

2022-05-15 19:05:27 4cf2016
feat(order/cover): Covering elements are unique (#14156)
In a linear order, there's at most one element covering `a` and at most one element being covered by `a`.

2022-05-15 16:12:50 00e80a6
feat (group_theory/perm/cycles): Add missing `is_cycle` lemma (#13219)
Add `is_cycle.pow_eq_pow_iff`, which extends `is_cycle.pow_eq_one_iff`.

2022-05-15 14:04:27 c109105
chore(logic/equiv): golf equiv.subtype_equiv (#14125)
The naming is a bit all over the place, but I will fix this in a later PR.

2022-05-15 14:04:26 843240b
feat(linear_algebra/matrix): invariant basis number for matrices (#13845)
This PR shows that invertible matrices over a ring with invariant basis number are square.

2022-05-15 14:04:26 f9f64f3
move(data/prod/*): A `prod` folder (#13771)
Create folder `data.prod.` to hold `prod` files and related types. Precisely:
* `data.prod` → `data.prod.basic`
* `data.pprod` → `data.prod.pprod`
* `data.tprod` → `data.prod.tprod`
* `order.lexicographic` → `data.prod.lex`

2022-05-15 11:58:06 a74298d
chore(order/lattice): reflow, golf (#14151)

2022-05-15 08:37:51 5c954e1
chore(order/conditionally_complete_lattice): General cleanup (#13319)

2022-05-15 01:31:14 b8d8a5e
refactor(set_theory/game/*): Fix bad notation `<` on (pre-)games (#13963)
Our current definition for `<` on pre-games is, in the wider mathematical literature, referred to as `⧏` (less or fuzzy to). Conversely, what's usually referred to by `<` coincides with the relation we get from `preorder pgame` (which the current API avoids using at all).
We rename `<` to `⧏`, and add the basic API for both the new `<` and `⧏` relations. This allows us to define new instances on `pgame` and `game` that we couldn't before. We also take the opportunity to add some basic API on the fuzzy relation `∥`.
See the [Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Surreal.20numbers/near/281094687).

2022-05-14 23:44:35 1f00800
feat(linear_algebra/projection) : projections are conjugate to prod_map id 0 (#13802)

2022-05-14 22:46:42 e738612
feat(analysis/special_functions/exp_deriv): generalize some lemmas about `complex.exp`, remove `*.cexp_real` (#13579)
Now we can use `*.cexp` instead of some previous `*.cexp_real` lemmas.
- [x] depends on: #13575

2022-05-14 17:09:34 570db88
feat(category_theory): missing comp_ite lemma (#14143)
We already have `comp_dite`.

2022-05-14 17:09:33 ad5edeb
feat(algebra/big_operators): prod_ite_irrel (#14142)
A few missing lemams in `big_operators/basic.lean`.

2022-05-14 17:09:32 05997bd
chore(set_theory/ordinal/{basic, arithmetic}): Remove redundant `function` namespace (#14133)

2022-05-14 17:09:31 9d022d7
doc(data/real/sqrt): Fix typo in described theorem (#14126)
The previous statement was not true. e.g. sqrt 4 <= 3 does not imply 4 * 4 <= 3

2022-05-14 17:09:30 4125b9a
chore(category_theory/*): move some elementwise lemmas earlier (#13998)

2022-05-14 15:50:40 c992b04
feat(set_theory/cardinal/cofinality): Cofinality of `nfp` and `deriv` (#12556)

2022-05-14 12:48:56 6d4c202
feat(analysis/specific_limits/floor_pow): auxiliary results on series involving floors of powers (#13850)

2022-05-14 10:51:28 ba9d551
chore(algebra/invertible): minor golf (#14141)

2022-05-14 08:16:18 79bc06b
feat(linear_algebra/matrix/to_lin): equivalence via right multiplication (#13870)
A very partial generalization of `linear_algebra/matrix/to_lin` to non-commutative rings.
This is far from a complete refactor of the file; it just adds enough for what I need in representation theory immediately.
I've left an extensive note explaining what should be done in a later refactor, but I don't want to have to do this all at once.
See discussion on [zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrices).

2022-05-14 07:28:44 21a71de
chore(*): use notation instead of `set.*` (#14139)

2022-05-14 05:39:32 3824493
refactor(group_theory/free_abelian_group): Make proofs more robust (#14089)
Reduce the API breakage by proving `distrib (free_abelian_group α)` and `has_distrib_neg (free_abelian_group α)` earlier. Protect lemmas to avoid shadowing the root ones.

2022-05-14 05:02:33 9f5b328
feat(.github/workflows): restore merge_conflicts action, running on cron (#14137)

2022-05-13 16:35:43 b7e20ca
feat(data/polynomial/degree/definitions): two more `nat_degree_le` lemmas (#14098)
This PR is similar to #14095.  It proves the `le` version of `nat_degree_X_pow` and `nat_degree_monomial`.
These lemmas are analogous to the existing `nat_degree_X_le` and `nat_degree_C_mul_X_pow_le`.

2022-05-13 15:42:07 6b7fa7a
feat(data/nat/totient): add `totient_div_of_dvd` and golf `sum_totient` (#14007)
Add lemma `totient_div_of_dvd`: for `d ∣ n`, the totient of `n/d` equals the number of values `k < n` such that `gcd n k = d`.
Use this to golf `sum_totient`, now stated in terms of `divisors`.  This proof follows that of Theorem 2.2 in Apostol (1976) Introduction to Analytic Number Theory.
Adapt the proof of `nth_roots_one_eq_bUnion_primitive_roots'` to use the new `sum_totient`.
Re-prove the original statement of `sum_totient` for compatibility with uses in `group_theory/specific_groups/cyclic` — may delete this if those uses can be adapted to the new statement.

2022-05-13 13:23:57 55cd104
feat(archive/imo/imo1975_q1): Add the formalization of IMO 1975 Q1 (#13047)

2022-05-13 09:53:49 caa1352
feat(data/zmod/quotient): Multiplicative version of `zmultiples_quotient_stabilizer_equiv` (#13948)
This PR adds a multiplicative version of `zmultiples_quotient_stabilizer_equiv`.

2022-05-13 09:53:48 03da681
feat(representation_theory): fdRep k G, the category of finite dim representations of G (#13740)
We verify that this inherits the rigid monoidal structure from `FinVect G` when `G` is a group.

2022-05-13 07:38:22 6a48b38
feat(topology/uniform_space): lemmas about `s ○ s ○ ... ○ s ⊆ t` (#14051)

2022-05-13 05:13:49 3185c25
feat(data/list/{count,perm},data/multiset/basic): countp and count lemmas (#14108)

2022-05-13 05:13:48 23a2205
chore(data/real/ennreal): tidy some proofs (#14101)

2022-05-13 05:13:47 7b7af48
feat(set_theory/ordinal/basic): Order isomorphism between `o.out.α` and `set.Iio o` (#14074)
This strengthens the previously existing equivalence.

2022-05-13 05:13:46 26f4112
feat(topology/uniform_space/separation): add `filter.has_basis.mem_separation_rel` (#14050)
* add `filter.has_basis.mem_separation_rel`;
* add `filter.has_basis.forall_mem_mem`, use it in
  `filter.has_basis.sInter_sets`;
* replace two remaining `lift' powerset` with `small_sets`.

2022-05-13 05:13:45 a2e671b
feat(number_theory/von_mangoldt): simple bounds on von mangoldt function (#14033)
From the unit fractions project.
More interesting bounds such as the chebyshev bounds coming soon, but for now here are some easy upper and lower bounds.

2022-05-13 05:13:44 644cae5
feat(set_theory/cardinal/cofinality): Move fundamental sequence results to namespace (#14020)
We put most results about fundamental sequences in the `is_fundamental_sequence` namespace. We also take the opportunity to add a simple missing theorem, `ord_cof`.

2022-05-13 02:53:51 c53285a
feat(order/filter/lift): drop an unneeded assumption (#14117)
Drop `monotone _` assumptions in `filter.comap_lift_eq` and `filter.comap_lift'_eq`.

2022-05-13 02:53:50 85124af
chore(algebra/order/field): fill in TODO for inv anti lemmas (#14112)

2022-05-13 02:53:49 462b950
chore(algebra/order/field): fill in missing lemma (#14111)
We had `inv_le_inv` and its backward direction, this fills in the backward direction for `inv_lt_inv`.

2022-05-13 02:53:48 f617862
feat(data/polynomial/degree/lemmas): two lemmas about `nat_degree`s of sums (#14100)
Suppose that `f, g` are polynomials.  If both `nat_degree (f + g)` and `nat_degree` of one of them are bounded by `n`, then `nat_degree` of the other is also bounded by `n`.

2022-05-13 02:53:47 de418aa
feat(topology/basic): add lemmas like `closure s \ interior s = frontier s` (#14086)

2022-05-13 02:53:46 15f6b52
feat(data/set/prod): add `prod_self_{s,}subset_prod_self` (#14084)

2022-05-13 02:53:45 1474996
feat(topology/basic): add `nhds_basis_closeds` (#14083)
* add `nhds_basis_closeds`;
* golf 2 proofs;
* move `topological_space.seq_tendsto_iff` to `topology.basic`, rename
  it to `tendsto_at_top_nhds`.

2022-05-13 02:53:44 bb97a64
feat(topology/order): add `nhds_true` and `nhds_false` (#14082)

2022-05-13 02:53:43 bd5914f
perf(field_theory/primitive_element): declare auxiliary function `noncomputable!` (#14071)
The declaration `roots_of_min_poly_pi_type` is computable and gets compiled by Lean. Unfortunately, compilation takes about 2-3s on my machine and times out under #11759 (with timeouts disabled, it takes about 11s on that branch). Since the parameters are all elements of noncomputable types and its only use is a noncomputable `fintype` instance, nobody will care if we explicitly make it computable, and it saves a lot of compilation time.
See also this Zulip thread on `noncomputable!` fixing mysterious timeouts: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Timeout/near/278494746

2022-05-13 02:53:42 c4c279e
feat(data/real/nnreal): add `nnreal.le_infi_add_infi` and other lemmas (#14048)
* add `nnreal.coe_two`, `nnreal.le_infi_add_infi`, `nnreal.half_le_self`;
* generalize `le_cinfi_mul_cinfi`, `csupr_mul_csupr_le`, and their
  additive versions to allow two different index types.

2022-05-13 01:22:31 a945b18
feat(linear_algebra/tensor_product): tensor_product.map is bilinear in its two arguments (#13608)

2022-05-12 20:54:24 17102ae
feat(algebra/big_operators/basic): add `sum_erase_lt_of_pos` (#14066)
`sum_erase_lt_of_pos (hd : d ∈ s) (hdf : 0 < f d) : ∑ (m : ℕ) in s.erase d, f m < ∑ (m : ℕ) in s, f m`

2022-05-12 20:54:23 86d58ae
feat(data/nat/factorization): three lemmas on the components of factorizations (#14031)
`pow_factorization_le : p ^ (n.factorization) p ≤ n`
`div_pow_factorization_ne_zero : n / p ^ (n.factorization) p ≠ 0`
`not_dvd_div_pow_factorization : ¬p ∣ n / p ^ (n.factorization) p`
Prompted by [this question](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/prime.20factorisation) in Zulip

2022-05-12 20:54:22 3c1ced3
feat(data/nat/basic): four lemmas on nat and int division (#13991)
`lt_div_iff_mul_lt (hnd : d ∣ n) : a < n / d ↔ d * a < n`
`div_left_inj (hda : d ∣ a) (hdb : d ∣ b) : a / d = b / d ↔ a = b` (for `ℕ` and `ℤ`)
`div_lt_div_of_lt_of_dvd (hdb : d ∣ b) (h : a < b) : a / d < b / d`

2022-05-12 19:34:26 4b3988a
feat(data/sym/sym2): simp lemma for quotient.eq (#14113)

2022-05-12 19:34:25 3d03098
doc(data/matrix/basic): Clarify docstring (#14109)

2022-05-12 18:30:47 27e7f7a
feat(number_theory/divisors): add `filter_dvd_eq_proper_divisors` (#14049)
Adds `filter_dvd_eq_proper_divisors` and golfs `filter_dvd_eq_divisors` and a few other lemmas

2022-05-12 17:54:58 3b18573
doc(tactic/rewrite_search/explain): Fix documentation-breaking docstring (#14107)
This currently renders as
![image](https://user-images.githubusercontent.com/425260/168125021-06ef8851-55a6-4629-b437-7c38a1df7b05.png)

2022-05-12 16:23:39 0e834df
chore(data/nat/multiplicity): simplify proof (#14103)

2022-05-12 16:23:38 0509c9c
fix(analysis/special_functions/pow): fix norm_num extension (#14099)
As [reported on Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/kernel.20slow.20to.20accept.20refl.20proof/near/282043840).

2022-05-12 16:23:37 c8edd60
chore(data/polynomial/ring_division): golf a few proofs (#14097)
* add `polynomial.finite_set_of_is_root`;
* use it to golf a few proofs.

2022-05-12 16:23:36 6cf6e8c
chore(order/filter/basic): golf a few proofs (#14078)
* golf the proof of `mem_generate_iff` by using `sInter_mem`;
* use `set.inj_on` in the statement of `filter.eq_of_map_eq_map_inj'`;
* golf the proofs of `filter.map_inj` and `filter.comap_ne_bot_iff`.

2022-05-12 14:24:07 9b41e4e
feat(data/polynomial/laurent): add truncation from Laurent polynomials to polynomials (#14085)
We introduce the truncation of a Laurent polynomial `f`.  It returns a polynomial whose support is exactly the non-negative support of `f`.  We use it to prove injectivity of the inclusion of polynomials in Laurent polynomials.
I also plan to use the results in this PR to prove that any Laurent polynomials is obtain from a polynomial by dividing by a power of the variable.

2022-05-12 14:24:06 fa4c036
chore(order/complete_lattice,data/set/lattice): move `Sup_sUnion` (#14077)
* move `Sup_sUnion` and `Inf_sUnion` to `data.set.lattice`;
* golf a few proofs.

2022-05-12 12:10:19 bada932
feat(data/multiset/basic): `erase_singleton` (#14094)
Add `multiset.erase_singleton` which is analogous to the existing [finset.erase_singleton](https://leanprover-community.github.io/mathlib_docs/data/finset/basic.html#finset.erase_singleton).

2022-05-12 12:10:18 55671be
chore(set_theory/zfc): use `derive` for some instances (#14079)
Also use `has_compl` instead of `has_neg`.

2022-05-12 12:10:17 d9e623c
feat(algebra/*): Division monoid instances for `with_zero` and `mul_opposite` (#14073)
A few missing instances of `division_monoid` and friends.

2022-05-12 12:10:16 c57cfc6
feat({data/{finset,set},order/filter}/pointwise): Pointwise monoids are division monoids (#13900)
`α` is a `division_monoid` implies that `set α`, `finset α`, `filter α` are too. The core result needed for this is that `s` is a unit in `set α`/`finset α`/`filter α` if and only if it is equal to `{u}`/`{u}`/`pure u` for some unit `u : α`.

2022-05-12 10:27:03 c2e87de
feat(data/polynomial/degree/definitions): if `r ≠ 0`, then `(monomial i r).nat_degree = i` (#14095)
Add a lemma analogous to `nat_degree_C_mul_X_pow` and `nat_degree_C_mul_X`.

2022-05-12 10:27:02 5927330
refactor(combinatorics/simple_graph/basic): relax `edge_finset` typeclasses (#14091)

2022-05-12 10:27:01 41afd8c
feat(analysis/special_functions/pow): asymptotics for real powers and log (#14088)
From the unit fractions project.

2022-05-12 08:45:52 1c8ce7e
feat(data/complex): real exponential bounds (#14087)
Bounds on the real exponential function near 1, derived from the complex versions.

2022-05-12 08:45:51 b6d1028
chore(topology/sequences): golf a few proofs (#14081)

2022-05-12 08:45:50 7c4c90f
feat(category_theory/noetherian): nonzero artinian objects have simple subobjects (#13972)
# Artinian and noetherian categories
An artinian category is a category in which objects do not
have infinite decreasing sequences of subobjects.
A noetherian category is a category in which objects do not
have infinite increasing sequences of subobjects.
We show that any nonzero artinian object has a simple subobject.
## Future work
The Jordan-Hölder theorem, following https://stacks.math.columbia.edu/tag/0FCK.

2022-05-12 08:45:49 fd98cf1
chore(ring_theory/unique_factorization_domain): golf (#13820)
+ Shorten the proof of `exists_irreducible_factor` using `well_founded.has_min` instead of `well_founded.fix`.
+ Remove use of `simp` in `induction_on_irreducible`; now a pure term-mode proof except for the classical instance.
+ Change the proof of `not_unit_iff_exists_factors_eq` (just added in [#13682](https://github.com/leanprover-community/mathlib/pull/13682)) to use induction. The new proof doesn't require the `multiset.prod_erase` introduced in [#13682](https://github.com/leanprover-community/mathlib/pull/13682), but is about as complex as the old one, so I might change it back if reviewers prefer.

2022-05-12 08:45:48 0c26348
feat(data/finsupp/basic): `finsupp.comap_domain` is an `add_monoid_hom` (#13783)
This is the version of `map_domain.add_monoid_hom` for `comap_domain`.
I plan to use it for the inclusion of polynomials in Laurent polynomials (#13415).
I also fixed a typo in a doc-string.

2022-05-12 07:44:21 a966557
chore(analysis/special_functions/pow): golf a proof (#14093)
* move `real.abs_rpow_of_nonneg` up;
* use it to golf a line in `real.abs_rpow_le_abs_rpow`.

2022-05-12 00:05:58 4977fd9
feat(ring_theory/finiteness): tensor product of two finite modules is finite (#13733)
Removes [finite_dimensional_tensor_product](https://leanprover-community.github.io/mathlib_docs/linear_algebra/tensor_product_basis.html#finite_dimensional_tensor_product) since it's now proved by `infer_instance`.

2022-05-11 20:41:58 d4884c0
feat(analysis/asymptotics): use weaker TC assumptions (#14080)
Merge `is_o.trans` with `is_o.trans'`: both lemmas previously took one `semi_normed_group` argument on the primed type (corresponding to the primed function), but now only assume `has_norm` on all three types.

2022-05-11 18:53:31 0302cfd
chore(measure_theory/function/conditional_expectation): change the definition of condexp and its notation (#14010)
Before this PR, the conditional expectation `condexp` was defined using an argument `(hm : m ≤ m0)`.
This changes the definition to take only `m`, and assigns the default value 0 if we don't have `m ≤ m0`.
The notation for `condexp m μ f` is simplified to `μ[f|m]`.
The change makes the proofs of the condexp API longer, but no change is needed to lemmas outside of that file. See the file `martingale.lean`: the notation is now simpler, but otherwise little else changes besides removing the now unused argument `[sigma_finite_filtration μ ℱ]` from many lemmas.
Also add an instance `is_finite_measure.sigma_finite_filtration`: we had a lemma with both `is_finite_measure` and `sigma_finite_filtration` arguments, but the first one implies the other.

2022-05-11 15:02:00 7a3ae97
feat(data/polynomial/laurent): add inductions for Laurent polynomials (#14005)
This PR introduces two induction principles for Laurent polynomials and uses them to show that `T` commutes with everything.

2022-05-11 14:23:17 483affa
feat(measure_theory/integral/interval_integral): add lemma `interval_integrable.sum` (#14069)
Formalized as part of the Sphere Eversion project.

2022-05-11 08:00:03 83bc3b9
chore(algebra/module/submodule*): replace underscores in file names with a folder (#14063)

2022-05-11 08:00:02 ba60237
chore(field_theory/adjoin): clarify and speed up proof (#14041)
This PR turns a couple of refls into `simp` lemmas. Apart from being clearer now, this also speeds up the proof significantly in #11759 (where the elaborator chooses the wrong subexpression to unfold first).
Elaboration time changed stayed about the same at about 300-350ms on master, and went from timeout to about 300ms on #11759.

2022-05-11 08:00:01 b75113a
chore(set_theory/game/ordinal): Remove redundant namespaces (#14039)

2022-05-11 06:01:29 4231b68
feat(data/list): add a few lemmas (#14047)
* add `list.reverse_surjective` and `list.reverse_bijective`;
* add `list.chain_iff_forall₂`,
  `list.chain_append_singleton_iff_forall₂`, and `list.all₂_zip_with`.

2022-05-10 19:04:38 df9683c
feat(topology/algebra/infinite_sum): lemmas about `mul_opposite` (#13674)

2022-05-10 17:00:25 3ea573e
refactor(algebra/{group,group_with_zero/basic): Delete lemmas generalized to division monoids (#14042)
Delete the `group` and `group_with_zero` lemmas which have been made one-liners in #14000.
Lemmas are renamed because
* one of the `group` or `group_with_zero` name has to go
* the new API should have a consistent naming convention
Lemma renames

2022-05-10 11:03:33 e689611
chore({data/{finset,set},order/filter}/pointwise): Reorganize files (#14021)
Order the three files more similarly. The idea is to order things as:
* Arithmetic notation typeclasses, and lemmas that don't depend on algebraic structure for them:
  * `0` and `1`
  * `-` and `⁻¹`
  * `+` and `*`
  * `-` and `/`
* monoid-like instances, interleaved with the corresponding lemmas (some of them are used for the instances themselves, and more will be in the future)
* `•`
* `-ᵥ`
* scalar instances

2022-05-10 11:03:32 45d2b52
chore(analysis/normed_space/basic): reorder the `restrict_scalars` definitions (#13995)
This also update the docstrings to make `normed_space.restrict_scalars` even scarier.
The instances here themselves haven't actually changed.

2022-05-10 11:03:31 91489ac
feat(algebra/module/submodule_bilinear): add `submodule.map₂`, generalizing `submodule.has_mul` (#13709)
The motivation here is to be able to talk about combinations of submodules under other bilinear maps, such as the tensor product. This unifies the definitions of and lemmas about `submodule.has_mul` and `submodule.has_scalar'`.
The lemmas about `submodule.map₂` are copied verbatim from those for `mul`, and then adjusted slightly replacing `mul_zero` with `linear_map.map_zero` etc. I've then replaced the lemmas about `smul` with the `map₂` proofs where possible.
The lemmas about finiteness weren't possible to copy this way, as the proofs about `finset` multiplication are not generalized in a similar way. Someone else can copy these in a future PR.
This also adds `set.image2_eq_Union` to match `set.image_eq_Union`, and removes `submodule.union_eq_smul_set` which is neither about submodules nor about `union`, and instead is really just a copy of `set.image_eq_Union`

2022-05-10 08:56:43 34f29db
feat(topology/algebra/group): Division is an open map (#14028)
A few missing lemmas about division in topological groups.

2022-05-10 08:56:42 c892622
move(order/synonym): Group `order_dual` and `lex` (#13769)
Move `to_dual`, `of_dual`, `to_lex`, `of_lex` to a new file `order.synonym`. This does not change the import tree, because `order.lexicographic` had slightly higher imports than `order.order_dual`, but those weren't used for `lex` itself.

2022-05-10 08:02:09 37c691f
feat(analysis/convex/*): Convexity and subtraction (#14015)
Now that we have a fair bit more pointwise operations on `set`, a few results can be (re)written using them. For example, existing lemmas about `add` and `neg` can be combined to give lemmas about `sub`.

2022-05-10 05:20:28 5650366
chore(.github/workflows): disable merge conflicts bot for now (#14057)

2022-05-10 05:20:27 153b20f
chore(scripts): update nolints.txt (#14056)
I am happy to remove some nolints for you!

2022-05-10 05:20:26 b17070d
fix(data/real/ennreal): style and golfing (#14055)

2022-05-10 05:20:26 87069e9
chore(ring_theory/hahn_series): golf a proof (#14054)

2022-05-10 03:35:32 c5e0299
feat(group_theory/subsemigroup/{center, centralizer}): define center and centralizer as subsemigroups (#13627)
This defines the center and centralizers for semigroups. This is necessary so that we can do the same for non-unital semirings. 
- [x] depends on: #12112 
- [x] depends on: #13903

2022-05-09 20:46:25 260d5ce
feat(model_theory/semantics): Realizing restricted terms and formulas (#14014)
Shows that realizing a restricted term or formula gives the same value as the unrestricted version.

2022-05-09 16:57:31 98f2779
refactor(number_theory/legendre_symbol/*): move section `general` from `quadratic_char.lean` into new file `auxiliary.lean` (#14027)
This is a purely administrative step (in preparation of adding more files that may need some of the auxiliary results).
We move the collection of auxiliary results that constitute `section general` of `quadratic_char.lean` to a new file `auxiliary.lean` (and change the `import`s of `quadratic_char.lean` accordingly).
This new file is meant as a temporary place for these auxiliary results; when the refactor of `quadratic_reciprocity` is finished, they will be moved to appropriate files in mathlib.

2022-05-09 14:40:50 31af0e8
feat(model_theory/satisfiability): Definition of categorical theories (#14038)
Defines that a first-order theory is `κ`-categorical when all models of cardinality `κ` are isomorphic.
Shows that all theories in the empty language are `κ`-categorical for all cardinals `κ`.

2022-05-09 14:40:49 5d8b432
feat(model_theory/language_map): Cardinality of languages with constants (#13981)
`first_order.language.card_with_constants` shows that the cardinality of `L[[A]]` is `L.card + # A`.

2022-05-09 14:40:47 4eb76a7
refactor(set_theory/ordinal/arithmetic): Rename theorems to match `nat.log` API (#12733)
We match the API for `ordinal.log` with that of `nat.log`.

2022-05-09 12:58:30 00cec55
feat(linear_algebra/affine_space/independent): add characterisation of affine independence for modules (#14043)

2022-05-09 12:58:29 1fef515
chore(analysis/normed_space/basic): add short-circuit instance to obtain module structure over reals (#14013)

2022-05-09 12:58:28 4da939b
feat(probability_theory/cond_count): use the counting measure to describe probability in the elementary sense (#13484)

2022-05-09 12:18:53 5397ac0
chore(ring_theory/hahn_series): remove redundant instances (#14045)
Both of these instances can be proved `by apply_instance`

2022-05-09 11:26:03 c43486e
feat(category_theory/limits): allow (co)limits over lower universes in algebraic categories (#13990)
I'm concerned about the new universe annotations required in places. It was not so impossible to add them when proofs broke, but the proofs might have been hard to construct in the first place ....

2022-05-09 11:25:59 ad244dd
feat(ring_theory/dedekind_domain/adic_valuation): extend valuation (#13462)
We extend the `v`-adic valuation on a Dedekind domain `R` to its field of fractions `K` and prove some basic properties. We define the completion of `K` with respect to this valuation, as well as its ring of integers, and provide some topological instances.

2022-05-09 09:20:59 fc64096
feat(topology/algebra/infinite_sum): summable on subtype iff (#14032)
A summable version of the `has_sum` lemma previously (the `tsum` version is already present)

2022-05-09 09:20:58 d55a654
feat(order/*): Order constructions under `to_dual`/`of_dual` (#13788)
A few missing lemmas about `of_dual` and `to_dual`.

2022-05-09 09:20:56 1d9d573
feat(algebra/order/monoid_lemmas_zero_lt): add some lemmas assuming `has_mul` `has_zero` `preorder` (#13296)

2022-05-09 08:31:21 b38aee4
feat(analysis/special_functions): differentiability of Gamma function (#13000)
Third instalment of my Gamma-function project (following #12917 and #13156). This PR adds the proof that the Gamma function is complex-analytic, away from the poles at non-positive integers.

2022-05-09 06:03:23 bf8db9b
feat(analysis/normed_space/matrix_exponential): lemmas about the matrix exponential (#13520)
This checks off "Matrix Exponential" from the undergrad TODO list, by providing the majority of the "obvious" statements about matrices over a real normed algebra. Combining this PR with what is already in mathlib, we have:
* `exp 0 = 1`
* `exp (A + B) = exp A * exp B` when `A` and `B` commute
* `exp (n • A) = exp A ^ n`
* `exp (z • A) = exp A ^ z`
* `exp (-A) = (exp A)⁻¹`
* `exp (U * D * ↑(U⁻¹)) = U * exp D * ↑(U⁻¹)`
* `exp Aᵀ = (exp A)ᵀ`
* `exp Aᴴ = (exp A)ᴴ`
* `A * exp B = exp B * A`  if `A * B = B * A`
* `exp (diagonal v) = diagonal (exp v)`
* `exp (block_diagonal v) = block_diagonal (exp v)`
* `exp (block_diagonal' v) = block_diagonal' (exp v)`
Still missing are:
* `det (exp A) = exp (trace A)`
* `exp A` can be written a weighted sum of powers of `A : matrix n n R` less than `fintype.card n` (an extension of [`matrix.pow_eq_aeval_mod_charpoly`](https://leanprover-community.github.io/mathlib_docs/linear_algebra/matrix/charpoly/coeff.html#matrix.pow_eq_aeval_mod_charpoly))
The proofs in this PR may seem small, but they had a substantial dependency chain: https://github.com/leanprover-community/mathlib/projects/16.
It turns out that there's always more missing glue than you think there is.

2022-05-09 02:37:50 77c86ba
rename(imo/imo1972_b2 → imo/imo1972_q5): Fix file name (#14037)

2022-05-09 02:37:49 8412f1f
feat(representation_theory/invariants): invariants of `lin_hom` are representation morphisms (#14012)

2022-05-09 02:37:47 594ceda
feat(analysis/normed_space/exponential): Generalize `field` lemmas to `division_ring` (#13997)
This generalizes the lemmas about `exp 𝕂 𝕂` to lemmas about `exp 𝕂 𝔸` where `𝔸` is a `division_ring`.
This moves the lemmas down to the appropriate division_ring sections, and replaces the word `field` with `div` in their names, since `division_ring` is a mouthful, and really the name reflects the use of `/` in the definition.

2022-05-09 02:37:47 afec1d7
fix(tactics/alias): Make docstring calculation available to to_additive (#13968)
PR #13944 fixed the docstrings for iff-style aliases, but because of
code duplication I added in #13330 this did not apply to aliases
introduced by `to_additive`. This fixes that.

2022-05-09 02:37:45 34b61e3
chore(algebra/regular/*): generalisation linter (#13955)

2022-05-09 02:37:44 5253153
feat(algebra/category/Module/basic): `iso.hom_congr`agrees with `linear_equiv.arrow_congr` (#13954)

2022-05-09 02:37:43 4f386e6
feat(set_theory/pgame/birthday): Birthdays of ordinals (#13714)

2022-05-09 02:37:42 1e8f381
feat(algebraic_topology/dold_kan): defining some null homotopic maps (#13085)

2022-05-09 00:34:40 bf6e13b
refactor(algebra/{group,group_with_zero/basic): Generalize lemmas to division monoids (#14000)
Generalize `group` and `group_with_zero` lemmas to `division_monoid`. We do not actually delete the original lemmas but make them one-liners from the new ones. The next PR will then delete the old lemmas and perform the renames in all files.
Lemmas are renamed because
* one of the `group` or `group_with_zero` name has to go
* the new API should have a consistent naming convention
Pre-emptive lemma renames

2022-05-08 19:06:53 449ba97
refactor(data/nat/log): Golf + improved theorem names (#14019)
Other than golfing and moving a few things around, our main changes are:
- rename `log_le_log_of_le` to `log_mono_right`, analogous renames elsewhere.
- add `lt_pow_iff_log_lt` and a `clog` analog.

2022-05-08 18:01:58 163ef61
feat(topology/algebra/infinite_sum): add `tsum_star` (#13999)
These lemmas names are copied from `tsum_neg` and friends.
As a result, `star_exp` can be golfed and generalized.

2022-05-08 18:01:58 dd16a83
fix(topology/algebra/module/weak_dual): fix namespace issue, add a few extra lemmas (#13407)
This PR fixes a namespace issue in `weak_dual`, to ensure lemmas with names like `eval_continuous` are appropriately namespaced. Also, lemmas about continuity of the evaluation map have been copied from `weak_bilin` to `weak_dual`.

2022-05-08 16:31:29 69c07a4
feat(linear_algebra/linear_pmap): `mk_span_singleton` of the same point (#14029)
One more lemma about `mk_span_singleton'` and slightly better lemma names.

2022-05-08 16:31:28 6a5d17e
feat(measure_theory/integral): a few more integral lemmas (#14025)

2022-05-08 15:55:36 e330694
feat(analysis/p_series): explicit bounds on sums of the form 1/j^2 (#13851)

2022-05-08 14:02:33 79ffb55
chore(algebra/category/CommRing=>Ring): rename (#14022)
This folder was originally named `algebra/category/CommRing/` because it only handled the commutative case. That's largely no longer the case, so we should rename the folder.

2022-05-08 12:55:28 3478a2a
feat(probability/ident_distrib): identically distributed random variables (#14024)

2022-05-08 06:24:13 0c64b3d
feat(algebra/category/Module): biproducts (#13908)
Following the same pattern for `AddCommGroup`, create the instance for biproducts in` Module R`, and check they are isomorphic to the usual construction.

2022-05-08 04:50:21 ce0dc83
feat(set_theory/ordinal/basic): Supremum indexed over an empty / unique type (#13735)
This PR contains the following changes:
- The lemmas `sup_unique`, `bsup_one`, `lsub_unique`, `blsub_one`.
- `congr` lemmas for `bsup` and `blsub`
- Arguments like `o = 0` are removed as the `congr` lemmas now handle this.
- `a + 1` is changed to `a.succ` in some lemmas (for better rewriting).

2022-05-07 22:21:48 3a0eb4b
chore(logic/relation): Dot notation on `well_founded.trans_gen` (#14016)

2022-05-07 22:21:47 e190225
feat(data/rat/meta_defs, meta/expr): rat.to_pexpr and int.to_pexpr (#14002)

2022-05-07 20:15:08 e0dd300
feat(algebra/{invertible + group_power/lemmas}): taking `inv_of` (⅟_) is injective (#14011)
Besides the lemma stated in the description, I also made explicit an argument that was implicit in a different lemma and swapped the arguments of `invertible_unique` in order to get the typeclass assumptions before some non-typeclass assumptions.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/inv_of_inj)

2022-05-07 15:50:10 0e494af
chore(order/*): Less `order_dual` abuse (#14008)
Sanitize uses of `order_dual` by inserting the required `of_dual` and `to_dual` instead of type-ascripting. Also remove some uses which were not necessary. Those dated from the time where we did not have antitone functions.

2022-05-07 15:50:09 5166765
chore(order/filter/pointwise): Better definitional unfolding (#13941)
Tweak pointwise operation definitions to make them easier to work with:
* `1` is now `pure 1` instead of `principal 1`. This changes defeq.
* Binary operations unfold to the set operation instead exposing a bare `set.image2` (`obtain ⟨t₁, t₂, h₁, h₂, h⟩ : s ∈ f * g` now gives `h : t₁ * t₂ ⊆ s` instead of `h : set.image2 (*) t₁ t₂ ⊆ s`. This does not change defeq.

2022-05-07 11:59:00 cf65daf
feat(probability/variance): define the variance of a random variable, prove its basic properties (#13912)

2022-05-07 09:57:54 c247622
feat(group_theory/group_action/units): simp lemma for scalar action of `is_unit.unit h` (#14006)

2022-05-07 09:57:53 9134a8e
feat(combinatorics/simple_graph/hasse): Hasse diagram and path graph (#13959)
Define the Hasse diagram of an order and the path graph on `n` vertices as the Hasse diagram of `fin n`.

2022-05-07 09:57:51 b2aa27e
feat(analysis/calculus/deriv): generalize some lemmas (#13575)
The types of scalar and codomain can be different now.
For example, these lemmas can be used for `f : ℝ → ℂ` `f' : ℝ →L[ℝ] ℂ` now.

2022-05-07 08:20:10 f8bc097
feat(algebra/module/linear_map): `Rᵐᵒᵖ` is isomorphic to `module.End R R` (#13931)
This PR adds the canonical (semi)ring isomorphism from `Rᵐᵒᵖ` to
`module.End R R` for a (semi)ring `R`, given by the right multiplication.

2022-05-07 07:07:16 559f58b
feat(order/filter): add a few lemmas (#13985)
* weaken assumptions of `filter.has_antitone_basis.tendsto` from `[semilattice_sup ι] [nonempty ι]` to `[preorder ι]`;
* add `filter.has_antitone_basis.tendsto`, `filter.has_antitone_basis.mem`, `filter.has_antitone_basis.tendsto_small_sets`.

2022-05-07 04:45:56 ca1375a
refactor(algebra/order/monoid_lemmas): reorder the file (#13492)
Just like in `algebra/order/monoid_lemmas_zero_lt`, sort by algebraic assumptions and order assumptions first, then put similar lemmas together.
It would be simpler to find duplicates, missing lemmas, and inconsistencies. (There are so many!)

2022-05-07 04:10:25 5789c63
chore(scripts): update nolints.txt (#14004)
I am happy to remove some nolints for you!

2022-05-07 00:43:46 275dabf
feat(order/atoms): is_atomic_of_order_bot_lt_well_founded (#13967)

2022-05-06 20:39:04 dcd452d
feat(analysis/locally_convex/with_seminorms): characterization of the topology induced by seminorms in terms of `𝓝 0` (#13547)
This shows that a topology is induced by the family of seminorms `p` iff `𝓝 0 = ⨅ i, (𝓝 0).comap (p i)`, which allows to use the extensive filter and topology library (see e.g. #13549).

2022-05-06 19:31:54 10721ba
feat(topology/algebra/module/basic): basic topological properties of quotient modules (#13433)
More precisely, we prove that : 
* if `M` is a topological module and `S` is a submodule of `M`, then `M ⧸ S` is a topological module
* furthermore, if `S` is closed, then `M ⧸ S` is regular (hence T2) 
- [x] depends on: #13278 
- [x] depends on: #13401

2022-05-06 18:45:20 8f116f4
feat(ring_theory/localization): generalize lemmas from `comm_ring` to `comm_semiring` (#13994)
This PR does not add new stuffs, but removes several subtractions from the proofs.

2022-05-06 18:45:19 27e105d
chore(analysis/normed_space/exponential): Make the `𝔸` argument implicit (#13986)
`exp 𝕂 𝔸` is now just `exp 𝕂`.
This also renames two lemmas that refer to this argument in their name to no longer do so.
In a few places we have to add type annotations where they weren't needed before, but nowhere do we need to resort to `@`.

2022-05-06 18:45:18 eea16dc
feat(number_theory/legendre_symbol/*): add results on value at -1 (#13978)
This PR adds code expressing the value of the quadratic character at -1 of a finite field of odd characteristic as χ₄ applied to the cardinality of the field. This is then also done for the Legendre symbol.
Additional changes:
* two helper lemmas `odd_mod_four` and `finite_field.even_card_of_char_two` that are needed
* some API lemmas for χ₄
* write `euler_criterion` and `exists_sq_eq_neg_one_iff` in terms of `is_square`; simplify the proof of the latter using the general result for quadratic characters

2022-05-06 18:45:17 dfe1897
feat(data/polynomial/laurent): laurent polynomials -- defs and some API (#13784)
I broke off the initial part of #13415 into this initial segment, leaving the rest of the PR as depending on this one.

2022-05-06 16:39:40 58d83ed
feat(tactic/lint/misc): adding a linter that flags iffs with explicit variables on both sides (#11606)

2022-05-06 15:42:43 863a167
docs(ring_theory/localization/ideal): fix an unused name (#13992)

2022-05-06 15:42:42 db5c2a6
chore(data/zmod/basic.lean): change order of arguments of `zmod.nat_cast_mod` for consistency (#13988)
As discussed [here](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60zmod.2Enat_cast_mod.60.20vs.20.60zmod.2Eint_cast_mod.60), this changes the order of arguments in `zmod.nat_cast_mod` to be compatible with `zmod.int_cast_mod`.

2022-05-06 15:42:40 40bedd6
refactor(set_theory/game/pgame): Remove `pgame.omega` (#13960)
This barely had any API to begin with. Thanks to `ordinal.to_pgame`, it is now entirely redundant.

2022-05-06 15:42:39 c9f5cee
feat(set_theory/game/pgame): Add remark on relabelings (#13732)

2022-05-06 14:58:58 ba627bc
feat(measure_theory/function/conditional_expectation): induction over Lp functions which are strongly measurable wrt a sub-sigma-algebra (#13129)

2022-05-06 12:51:04 fe0c4cd
docs(data/polynomial/algebra_map): fix a typo in a doc-string (#13989)
The doc-string talks about `comm_ring`, while the lemma uses `comm_semiring`.  I aligned the two to the weaker one!

2022-05-06 12:51:03 f6c030f
feat(linear_algebra/matrix/nonsingular_inverse): inverse of a diagonal matrix is diagonal (#13827)
The main results are `is_unit (diagonal v) ↔ is_unit v` and `(diagonal v)⁻¹ = diagonal (ring.inverse v)`.
This also generalizes `invertible.map` to `monoid_hom_class`.

2022-05-06 12:03:00 e4d3d33
feat(probability/stopping): add properties of the measurable space generated by a stopping time (#13909)
- add lemmas stating that various sets are measurable with respect to that space
- describe the sigma algebra generated by the minimum of two stopping times
- use the results to generalize `is_stopping_time.measurable_set_eq_const` from nat to first countable linear orders and rename it to `is_stopping_time.measurable_space_eq'` to have a name similar to `is_stopping_time.measurable_set_eq`.

2022-05-06 10:42:54 f033937
feat(topology/algebra/monoid): add missing `has_continuous_const_smul` instances (#13987)
This makes an argument to `exp` redundant.

2022-05-06 10:42:53 97c4d4e
feat(analysis/asymptotics/asymptotics): add `is_O.exists_mem_basis` (#13973)

2022-05-06 10:07:19 d989305
feat(algebra/order/monoid_lemmas_zero_lt): add some lemmas assuming `mul_zero_class` `partial_order` / `linear_order` (#13377)

2022-05-06 10:07:18 1675b78
feat(algebra/order/monoid_lemmas_zero_lt): add some lemmas assuming `mul_zero_one_class` `partial_order` (#13375)

2022-05-06 09:15:39 95413e2
feat(measure_theory/group/*): various lemmas about invariant measures (#13539)
* Make the `measurable_equiv` argument to `measure_preserving.symm` explicit. This argument is cannot always be deduced from the other explicit arguments (which can be seen form the changes in `src/measure_theory/constructions/pi.lean`).
* From the sphere eversion project
* Required for convolutions

2022-05-06 06:39:57 ebac9f0
feat(analysis/special_functions/trigonometric): add a lemma (#13975)
Add a lemma needed for #13178

2022-05-06 06:03:17 faf1690
feat(model_theory/*): Any theory with infinite models has arbitrarily large models (#13980)
Defines the theory `distinct_constants_theory`, indicating that a set of constants are distinct.
Uses that theory to show that any theory with an infinite model has models of arbitrarily large cardinality.

2022-05-06 01:59:37 f0eded9
chore(algebra/ring/idempotents): golf iff_eq_zero_or_one (#13977)

2022-05-05 23:51:54 151933d
feat(algebra/group/defs): Division monoids (#13860)
Introduce what I call division monoids. Those are monoids `α` with a pseudo-inverse `⁻¹ : α → α ` and a pseudo-division `/ : α → α → α` respecting:
* `a / b = a * b⁻¹`
* `a⁻¹⁻¹ = a`
* `(a * b)⁻¹ = b⁻¹ * a⁻¹`
* `a * b = 1 → a⁻¹ = b`
This made-up algebraic structure has two uses:
* Deduplicate lemmas between `group` and `group_with_zero`. Almost all lemmas which are literally duplicated (same conclusion, same assumptions except for `group` vs `group_with_zero`) generalize to division monoids.
* Give access to lemmas for pointwise operations: `set α`, `finset α`, `filter α`, `submonoid α`, `subgroup α`, etc... all are division monoids when `α` is. In some sense, they are very close to being groups, the only obstruction being that `s / s ≠ 1` in general. Hence any identity which is true in a group/group with zero is also true in those pointwise monoids, if no cancellation is involved.

2022-05-05 22:29:30 c62dfe6
feat(model_theory/skolem): Downward Löwenheim–Skolem (#13723)
Proves the Downward Löwenheim–Skolem theorem:  If `s` is a set in an `L`-structure `M` and `κ` an infinite cardinal such that `max (# s, L.card) ≤ κ` and `κ ≤ # M`, then `M` has an elementary substructure containing `s` of cardinality `κ`.

2022-05-05 20:53:20 91cc3f0
feat(linear_algebra/basic): ker of a linear map equals ker of the corresponding group hom (#13858)

2022-05-05 19:41:55 c12536a
fix(gitpod): correct command name (#13976)
`leanpkg config` doesn't exist, it's `leanpkg configure`.
@b-mehta tricked me in https://github.com/leanprover-community/mathlib/pull/13949#issuecomment-1117589670

2022-05-05 17:30:45 73e5dad
feat(analysis/special_functions/exp): add limits of `exp z` as `re z → ±∞` (#13974)

2022-05-05 16:19:12 54af9e9
fix(topology/algebra/infinite_sum): `tsum_neg` doesn't need `summable` (#13950)
Both sides are 0 in the not-summable case.

2022-05-05 14:55:41 ec44f45
feat(data/matrix/basic): even more lemmas about `conj_transpose` and `smul` (#13970)
It turns out none of the lemmas in the previous #13938 were the ones I needed.

2022-05-05 13:11:01 420fabf
chore(analysis/normed_space/exponential): replace `1/x` with `x⁻¹` (#13971)
Note that `one_div` makes `⁻¹` the simp-normal form.

2022-05-05 13:11:00 03f5ac9
feat(category_theory/simple): simple_iff_subobject_is_simple_order (#13969)

2022-05-05 13:10:59 929c901
refactor(ring_theory/*): Remove unnecessary commutativity assumptions (#13966)
This replaces `[comm_ring R]` or `[comm_semiring R]` with `[ring R]` or `[semiring R]`, without changing any proofs.

2022-05-05 13:10:58 8e0ab16
feat(polynomial/cyclotomic/basic): ɸ_pⁱ irreducible → ɸ_pʲ irreducible for j ≤ i (#13952)

2022-05-05 11:55:59 057e028
feat(linear_algebra/finite_dimensional): surjective_of_nonzero_of_finrank_eq_one (#13961)

2022-05-05 11:55:58 da06587
feat(linear_algebra): A-linear maps between finite dimensional vector spaces over k are finite dimensional (#13934)

2022-05-05 09:52:28 4dfbcac
feat({data/{finset,set},order/filter}/pointwise): More basic API (#13899)
More basic lemmas about pointwise operations on `set`/`finset`/`filter`. Also make the three APIs more consistent with each other.

2022-05-05 07:41:38 f820671
ci(gitpod): do not rerun get-cache if a workspace is reloaded (#13949)
Instead, only run it at workspace start. This prevents it clobbering local builds created with `lean --make src` or similar.
I have no idea why the `. /home/gitpod/.profile` line is there, so I've left it to run in the same phase as before.

2022-05-05 07:41:37 6970129
chore(algebra/group/units): add a lemma about is_unit on a coerced unit (#13947)

2022-05-05 07:41:36 bd944fe
chore(linear_algebra/free_module): fix name in doc (#13942)

2022-05-05 07:41:35 4f7603c
chore(data/matrix/basic): add more lemmas about `conj_transpose` and `smul` (#13938)
Unfortunately the `star_module` typeclass is of no help here; see [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Is.20star_module.20sensible.20for.20non-commutative.20rings.3F/near/257272767) for some discussion.
In the meantime, this adds the lemmas for the most frequent special cases.

2022-05-05 07:41:33 7eacca3
feat(analysis/normed/normed_field): limit of `∥a * x∥` as `∥x∥ → ∞` (#13819)
These lemmas should use `bornology.cobounded` but we don't have an instance `pseudo_metric_space α -> bornology α` yet.

2022-05-05 05:36:23 03fbe7d
Update CODE_OF_CONDUCT.md (#13965)
deleted one character (duplicate space)

2022-05-05 05:36:22 63875ea
chore(scripts): update nolints.txt (#13964)
I am happy to remove some nolints for you!

2022-05-05 05:36:21 116435d
feat(tactic/alias): fix alias docstrings for implications from iffs (#13944)
Now they say for instance:
```lean
le_inv_mul_of_mul_le : ∀ {α : Type u} [_inst_1 : group α] [_inst_2 : has_le α] [_inst_3 : covariant_class α α has_mul.mul has_le.le] {a b c : α}, a * b ≤ c → b ≤ a⁻¹ * c
**Alias** of the reverse direction of `le_inv_mul_iff_mul_le`.
```
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60alias.60.20issue.20in.20algebra.2Eorder.2Egroup/near/281158569

2022-05-05 05:36:20 524793d
feat(representation_theory): Action V G is rigid whenever V is (#13738)

2022-05-05 05:36:19 b1da074
feat(data/sum/basic): Shortcuts for the ternary sum of types (#13678)
Define `sum3.in₀`, `sum3.in₁`, `sum3.in₂`, shortcut patterns for pattern-matching on a ternary sum of types.

2022-05-05 03:36:27 0c9b726
feat(algebra/group/{pi, opposite}): add missing pi and opposite defs for `mul_hom` (#13956)
The declaration names and the contents of these definitions are all copied from the corresponding ones for `monoid_hom`.

2022-05-05 02:21:58 5078119
feat(data/matrix/block): add `matrix.block_diag` and `matrix.block_diag'` (#13918)
`matrix.block_diag` is to `matrix.block_diagonal` as `matrix.diag` is to `matrix.diagonal`.
As well as the basic arithmetic lemmas and bundling, this also adds continuity lemmas.
These definitions are primarily an auxiliary construction to prove `matrix.tsum_block_diagonal`, and `matrix.tsum_block_diagonal'`, which are really the main goal of this PR.

2022-05-05 02:21:58 50fd3d6
feat(analysis/special_functions/log/monotone): add lemmas (#13848)
Adds a few lemmas regarding tonality of `log x / x ^ a`, and puts them in a new file, along with previous results.

2022-05-05 00:25:32 1e18935
docs(algebra/ring/opposite): fix docstring for `ring_hom.from_opposite` (#13957)

2022-05-05 00:25:31 3650936
feat(representation_theory/Action): lemma about isomorphisms in `Action G V` (#13951)

2022-05-05 00:25:30 9b245e2
feat(analysis/convex/integral): drop an assumption, add a version (#13920)
* add `convex.set_average_mem_closure`;
* drop `is_closed s` assumption in `convex.average_mem_interior_of_set`;
* add `ae_eq_const_or_norm_average_lt_of_norm_le_const`, a version of `ae_eq_const_or_norm_integral_lt_of_norm_le_const` for average.

2022-05-04 22:19:39 f8c303e
refactor(order/filter/pointwise): Localize instances (#13898)
Localize pointwise `filter` instances into the `pointwise` locale, as is done for `set` and `finset`.

2022-05-04 22:19:38 627f81b
feat(group_theory/order_of_element): The index-th power lands in the subgroup (#13890)
The PR adds a lemma stating `g ^ index H ∈ H`. I had to restate `G` to avoid the fintype assumption on `G`.

2022-05-04 22:19:37 5696275
feat(data/list/big_operators): add `list.sublist.prod_le_prod'` etc (#13879)
* add `list.forall₂.prod_le_prod'`, `list.sublist.prod_le_prod'`, and `list.sublist_forall₂.prod_le_prod'`;
* add their additive versions;
* upgrade `list.forall₂_same` to an `iff`.

2022-05-04 20:04:22 9503f73
feat(linear_algebra/dual): dual of a finite free module is finite free (#13896)

2022-05-04 20:04:21 eb1a566
refactor(set_theory/game/ordinal): Improve API (#13878)
We change our former equivalence `o.out.α ≃ o.to_pgame.left_moves` to an equivalence `{o' // o' < o} ≃ o.to_pgame.left_moves`. This makes two proofs much simpler. 
We also add a simple missing lemma, `to_pgame_equiv_iff`.

2022-05-04 20:04:20 28568bd
feat(set_theory/game/nim): Add basic API (#13857)

2022-05-04 20:04:19 a80e568
feat(logic/equiv/set): equivalences between all preimages gives an equivalence of domains (#13853)

2022-05-04 20:04:18 edf6cef
feat(set_theory/game/nim): `nim 0` is a relabelling of `0` and `nim 1` is a relabelling of `star` (#13846)

2022-05-04 20:04:17 fd8474f
feat(algebra/ring/idempotents): Introduce idempotents (#13830)

2022-05-04 20:04:15 91c0ef8
feat(analysis/normed_space/weak_dual): add the rest of Banach-Alaoglu theorem (#9862)
The second of two parts to add the Banach-Alaoglu theorem about the compactness of the closed unit ball (and more generally polar sets of neighborhoods of the origin) of the dual of a normed space in the weak-star topology.
This second half is about the embedding of the weak dual of a normed space into a (big) product of the ground fields, and the required compactness statements from Tychonoff's theorem. In particular it contains the actual Banach-Alaoglu theorem.
Co-Authored-By: Yury Kudryashov <urkud@urkud.name>

2022-05-04 17:58:32 90d6f27
ci(workflows/dependent-issues): run once every 15 mins, instead of on every merged PR (#13940)

2022-05-04 17:58:30 aabcd89
chore(analysis/analytic_composition): weaken some typeclass arguments (#13924)
There's no need to do a long computation to show the multilinear_map is bounded, when continuity follows directly from the definition.
This deletes `comp_along_composition_aux`, and moves the lemmas about the norm of `comp_along_composition` further down the file so as to get the lemmas with weaker typeclass requirements out of the way first.
The norm proofs are essentially unchanged.

2022-05-04 17:58:29 209bb5d
feat(set_theory/game/{pgame, basic}): Add more order lemmas (#13807)

2022-05-04 17:58:28 3152982
feat(representation/Rep): linear structures (#13782)
Make `Rep k G` a `k`-linear (and `k`-linear monoidal) category.

2022-05-04 17:58:27 0009ffb
refactor(linear_algebra/charpoly): split file to reduce imports (#13778)
While working on representation theory I was annoyed to find that essentially all of field theory was being transitively imported (causing lots of unnecessary recompilation). This improves the situation slightly.

2022-05-04 17:58:26 dd4590a
refactor(algebra/restrict_scalars): remove global instance on module_orig (#13759)
The global instance was conceptually wrong, unnecessary (after avoiding a hack in algebra/lie/base_change.lean), and wreaking havoc in #13713.

2022-05-04 17:58:24 abcd601
fix(src/tactic/alias): Teach `get_alias_target` about `alias f ↔ a b` (#13742)
the `get_alias_target` function in `alias.lean` is used by the
`to_additive` command to add the “Alias of …” docstring when creating an
additive version of an existing alias (this was #13330).
But `get_alias_target` did not work for `alias f ↔ a b`. This fixes it
by extending the `alias_attr` map to not just store whether a defintion
is an alias, but also what it is an alias of. Much more principled than
trying to reconstruct the alias target from the RHS of the alias
definition.
Note that `alias` currently says “Alias of `foo_iff`” even though it’s
really an alias of `foo_iff.mp`. This is an existing bug, not fixed in
this PR – the effect is just that this “bug” will uniformly apply to
additive lemmas as well.
Hopefully will get rid of plenty of nolint.txt entries, and create
better docs.
Also improve the test file for the linter significantly.

2022-05-04 15:53:31 0038a04
feat(data/int/cast): int cast division lemmas (#13929)
Adds lemmas for passing int cast through division, and renames the nat versions from `nat.cast_dvd` to `nat.cast_div`. 
Also some golf.

2022-05-04 15:53:30 4602370
feat(set_theory/game/birthday): More basic lemmas on birthdays (#13729)

2022-05-04 15:53:29 60ad844
feat(group_theory/complement): API lemmas relating `range_mem_transversals` and `to_equiv` (#13694)
This PR adds an API lemma relating `range_mem_left_transversals` (the main way of constructing left transversals) and `mem_left_transversals.to_equiv` (one of the main constructions from left transversals), and a similar lemma relating the right versions.

2022-05-04 15:53:28 923ae0b
feat(group_theory/free_group): is_free_group via `free_group X ≃* G` (#13633)
The previous definition of the `is_free_group` class was defined via the universal
property of free groups, which is intellectually pleasing, but
technically annoying, due to the universe problems of quantifying over
“all other groups” in the definition. To work around them, many
definitions had to be duplicated.
This changes the definition of `is_free_group` to contain an isomorphism
between the `free_group` over the generator and `G`. It also moves this
class into `free_group.lean`, so that it can be found more easily.
Relevant Zulip thread:
<https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/universe.20levels.20for.20is_free_group>
A previous attempt at reforming `is_free_group` to unbundle the set
of generators (`is_freely_generated_by G X`) is on branch
`joachim/is_freely_generated_by`, but it wasn't very elegant to use in some places.

2022-05-04 15:53:27 552a470
feat(number_theory/cyclotomic/rat): the ring of integers of cyclotomic fields. (#13585)
We compute the ring of integers of a `p ^ n`-th cyclotomic extension of `ℚ`.
From flt-regular

2022-05-04 15:53:26 e716139
feat(algebra/homology/Module): API for complexes of modules (#12622)
API for homological complexes in `Module R`.

2022-05-04 15:53:24 a7c5097
feat(set_theory/cardinal/cofinality): Cofinality of normal functions (#12384)
If `f` is normal and `a` is limit, then `cof (f a) = cof a`. We use this to golf `cof_add` from 24 lines down to 6.

2022-05-04 15:53:23 d565adb
feat(analysis/convex/topology): Separating by convex sets (#11458)
When `s` is compact, `t` is closed and both are convex, we can find disjoint open convex sets containing `s` and `t`.

2022-05-04 14:57:36 32320a1
feat(measure_theory/integral/lebesgue): speed up a proof (#13946)

2022-05-04 11:10:47 ceca8d7
fix(ring_theory/polynomial/basic): fix unexpected change of an implicit parameter (#13935)
Fix unexpected change of an implicit parameter in the previous PR(#13800).
Fix docstring.

2022-05-04 11:10:46 53c79d5
feat(linear_algebra/span): add `finite_span_is_compact_element` (#13901)
This PR adds `finite_span_is_compact_element`, which extends `singleton_span_is_compact_element` to the spans of finite subsets.
This will be useful e.g. when proving the existence of a maximal submodule of a finitely generated module.

2022-05-04 11:10:45 a057441
feat(order/basic): Notation for `order_dual` (#13798)
Define `αᵒᵈ` as notation for `order_dual α` and replace current uses.
[Zulip poll](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Notation.20for.20order_dual/near/280629129)

2022-05-04 11:10:44 402e564
feat(linear_algebra/prod): linear version of prod_map (#13751)

2022-05-04 11:10:43 e1f00bc
feat(order/well_founded): Well founded relations are asymmetric and irreflexive (#13692)

2022-05-04 11:10:42 6c7b880
feat(algebra/module/torsion): torsion ideal, decomposition lemma (#13414)
Defines the torsion ideal of an element in a module, and also shows a decomposition lemma for torsion modules.

2022-05-04 11:10:40 e24f7f7
move(set_theory/ordinal/{arithmetic → fixed_points}): Move `nfp` (#13315)
That way, it belong with the other functions about fixed points.

2022-05-04 07:51:01 1a86249
feat(measure_theory/function/l1_space): add `integrable_smul_measure` (#13922)
* add `integrable_smul_measure`, an `iff` version of
  `integrable.smul_measure`;
* add `integrable_average`, an `iff` version of `integrable.to_average`.

2022-05-04 07:51:00 af4c6c8
chore(ring_theory/polynomial/basic): golf polynomial_not_is_field (#13919)

2022-05-04 07:50:59 d0efe25
feat(data/finset/prod): diag of union (#13916)
Lemmas about diag and off diag in relation to simple finset constructions.

2022-05-04 07:50:58 098ab17
feat(category_theory/simple): nonzero morphisms to/from a simple are epi/mono (#13905)

2022-05-04 07:50:57 455393d
refactor(group_theory/{submonoid, subsemigroup}/{center, centralizer}): move set.center and set.centralizer into subsemigroup (#13903)
This moves `set.center` and `set.centralizer` (the center and centralizers for a magma) into `group_theory/subsemigroup/{center, centralizer}` so that we can define the center and centralizers for semigroups in #13627.

2022-05-04 07:50:55 e6b8499
feat(ring_theory/valuation/valuation_subring): Adds some equivalent conditions for equivalence of valuations (#13895)

2022-05-04 07:50:54 6d37006
feat(data/list/basic): add `list.cons_diff` (#13892)

2022-05-04 07:50:53 269bc85
feat(analysis/matrix): add `frobenius_norm_conj_transpose` (#13883)
This also moves the existing lemmas about the elementwise norm to the same file.

2022-05-04 07:50:52 d537897
feat(category_theory/simple): simple objects are indecomposable (#13882)
Remarkably tedious.

2022-05-04 07:50:51 1afdaf9
feat(linear_algebra/trace): more general versions of `trace_mul_comm` and `trace_conj` (#13874)

2022-05-04 07:50:50 517aa8b
feat(topology/algebra/star): continuity of `star` (#13855)
This adds the obvious instances for `pi`, `prod`, `units`, `mul_opposite`, `real`, `complex`, `is_R_or_C`, and `matrix`.
We already had a `continuous_star` lemma, but it had stronger typeclass assumptions.
This resolves multiple TODO comments.

2022-05-04 07:50:49 35c8980
feat(analysis/asymptotics/specific_asymptotics): Cesaro averaging preserves convergence (#13825)

2022-05-04 07:50:48 6e00330
feat(algebra/squarefree): relate squarefree on naturals to factorization (#13816)
Also moves `nat.two_le_iff` higher up the hierarchy since it's an elementary lemma and give it a more appropriate type.
The lemma `squarefree_iff_prime_sq_not_dvd` has been deleted because it's a duplicate of a lemma which is already earlier in the same file.

2022-05-04 07:50:47 ba4bf54
feat(set_theory/game/pgame): Add more congr lemmas (#13808)

2022-05-04 07:50:46 85657f1
feat(algebra/category/FinVect): has finite limits (#13793)

2022-05-04 07:50:45 e3d38ed
feat(algebra/hom/non_unital_alg): some constructions for `prod` (#13785)

2022-05-04 07:50:44 9015d2a
refactor(set_theory/game/pgame): Redefine `subsequent` (#13752)
We redefine `subsequent` as `trans_gen is_option`. This gives a much nicer induction principle than the previous one, and allows us to immediately prove well-foundedness.

2022-05-04 07:50:43 b337b92
feat(model_theory/satisfiability): A union of a directed family of satisfiable theories is satisfiable (#13750)
Proves `first_order.language.Theory.is_satisfiable_directed_union_iff` - the union of a directed family of theories is satisfiable if and only if all of the theories in the family are satisfiable.

2022-05-04 07:50:40 51d8167
feat(model_theory/elementary_maps): The elementary diagram of a structure (#13724)
Defines the elementary diagram of a structure - the theory consisting of all sentences with parameters it satisfies.
Defines the canonical elementary embedding of a structure into any model of its elementary diagram.

2022-05-04 07:50:39 319d502
refactor(linear_algebra/*): more generalisations (#13668)
Many further generalisations from `field` to `division_ring` in the linear algebra library.
This PR changes some proofs; it's not just relaxing hypotheses.

2022-05-04 07:50:38 36c5faa
feat(set_theory/game/pgame): Tweak `pgame.mul` API (#13651)
We modify the API for `pgame.mul` in two ways:
- `left_moves_mul` and `right_moves_mul` are turned from type equivalences into type equalities.
- The former equivalences are prefixed with `to_` and inverted.

2022-05-04 07:50:37 bd23639
feat(topology/bornology): add more instances (#13621)

2022-05-04 07:50:35 2402b4d
feat(set_theory/game/pgame): Tweak `pgame.neg` API (#13617)
We modify the API for `pgame.neg` in various ways: 
- `left_moves_neg` and `right_moves_neg` are turned from type equivalences into type equalities.
- The former equivalences are prefixed with `to_` and inverted.
We also golf a few theorems.

2022-05-04 06:42:38 58de2a0
chore(analysis): use nnnorm notation everywhere (#13930)
This was done with a series of ad-hoc regular expressions, then cleaned up by hand.

2022-05-04 06:42:36 6f3426c
chore(number_theory/legendre_symbol/quadratic_char): golf some proofs (#13926)

2022-05-04 06:42:35 171825a
chore(algebra/order/floor): missing simp lemmas on floor of nat and int (#13904)

2022-05-04 05:51:33 4d0b630
feat(category_theory/bicategory/coherence_tactic): coherence tactic for bicategories (#13417)
This PR extends the coherence tactic for monoidal categories #13125 to bicategories. The setup is the same as for monoidal case except for the following : we normalize 2-morphisms before running the coherence tactic. This normalization is achieved by the set of simp lemmas in `whisker_simps` defined in `coherence_tactic.lean`.
As a test of the tactic in the real world, I have proved several properties of adjunction in bicategories in #13418. Unfortunately some proofs cause timeout, so it seems that we need to speed up the coherence tactic in the future.

2022-05-04 05:16:36 c1f329d
feat(data/zmod/quotient): The quotient `<a>/stab(b)` is cyclic of order `minimal_period ((+ᵥ) a) b` (#13722)
This PR adds an isomorphism stating that the quotient `<a>/stab(b)` is cyclic of order `minimal_period ((+ᵥ) a) b`.
There is also a multiplicative version, but it is easily proved from the additive version, so I'll PR the multiplicative version afterwards.

2022-05-04 04:20:31 a2a873f
chore(scripts): update nolints.txt (#13932)
I am happy to remove some nolints for you!

2022-05-04 01:08:00 dd58438
feat(set_theory/game/short): Birthday of short games (#13875)
We prove that a short game has a finite birthday. We also clean up the file somewhat.

2022-05-04 00:13:27 fc3de19
feat(ring_theory/ideal/local_ring): generalize lemmas to semirings (#13471)
What is essentially new is the proof of `local_ring.of_surjective` and `local_ring.is_unit_or_is_unit_of_is_unit_add`.
- I changed the definition of local ring to `local_ring.of_is_unit_or_is_unit_of_add_one`, which is reminiscent of the definition before the recent change in #13341. The equivalence of the previous definition is essentially given by `local_ring.is_unit_or_is_unit_of_is_unit_add`. The choice of the definition is insignificant here because they are all equivalent, but I think the choice here is better for the default constructor because this condition is "weaker" than e.g. `local_ring.of_non_units_add` in some sense.
- The proof of `local_ring.of_surjective` needs `[is_local_ring_hom f]`, which was not necessary for commutative rings in the previous proof. So the new version here is not a genuine generalization of the previous version. The previous version was  renamed to `local_ring.of_surjective'`.

2022-05-03 23:37:38 6c0580a
fix(.docker/*): update elan URL (#13928)
These are hopefully the last occurrences of the URL that was breaking things earlier today. cf. #13906

2022-05-03 22:34:05 fd65159
feat(topology/metric_space/basic): golf, avoid unfold (#13923)
* Don't use `unfold` in `nnreal.pseudo_metric_space`.
* Golf some proofs.

2022-05-03 21:57:27 de07131
feat(measure_theory/integral/torus_integral): torus integral and its properties (#12892)
Define a generalized torus map and prove some basic properties.
Define the torus integral and the integrability of functions on a generalized torus, and prove lemmas about them.

2022-05-03 20:33:18 9c0dfcd
doc(order/countable_dense_linear_order): Fix minor mistake (#13921)
I wrongfully removed some instances of the word "linear" in #12928. This is in fact used as a hypothesis.

2022-05-03 19:18:51 5cfb8db
refactor(ring_theory/jacobson_ideal): generalize lemmas to non-commutative rings (#13865)
The main change here is that the order of multiplication has been adjusted slightly in `mem_jacobson_iff`and `exists_mul_sub_mem_of_sub_one_mem_jacobson`. In the commutative case this doesn't matter anyway.
All the other changes are just moving lemmas between sections, the statements of no lemmas other than those two have been changed. No lemmas have been added or removed.
The lemmas about `is_unit` and quotients don't generalize as easily, so I've not attempted to touch those; that would require some mathematical insight, which is out of scope for this PR!

2022-05-03 18:19:54 16157f2
chore(topology/continuous_function/bounded): generalize from `normed_*` to `semi_normed_*` (#13915)
Every single lemma in this file generalized, apart from the ones that transferred a `normed_*` instance which obviously need the stronger assumption.
`dist_zero_of_empty` was the only lemma that actually needed reproving from scratch, all the other affected proofs are just split between two instances.

2022-05-03 18:19:53 bd1d935
feat(number_theory/legendre_symbol/): add some lemmas (#13831)
This adds essentially two lemmas on quadratic characters:
* `quadratic_char_neg_one_iff_not_is_square`, which says that the quadratic character takes the value `-1` exactly on non-squares, and
* `quadratic_char_number_of_sqrts`. which says that the number of square roots of `a : F` is `quadratic_char F a + 1`.
It also adds the corresponding statements, `legendre_sym_eq_neg_one_iff` and `legendre_sym_number_of_sqrts`, for the Legendre symbol.

2022-05-03 16:29:01 7d28753
chore(normed_space/weak_dual): generalize `normed_group` to `semi_normed_group` (#13914)
This almost halves the time this file takes to build, and is more general too.

2022-05-03 16:29:00 8688753
feat(set_theory/game/basic): Inline instances (#13813)
We also add a few missing instances.

2022-05-03 16:28:59 5c433d0
feat(algebra/big_operators/basic): `prod_list_count` and `prod_list_count_of_subset` (#13370)
Add 
`prod_list_count (l : list α) : l.prod = ∏ x in l.to_finset, (x ^ (l.count x))`
and
`prod_list_count_of_subset (l : list α) (s : finset α) (hs : l.to_finset ⊆ s) : l.prod = ∏ x in s, x ^ (l.count x)`
as counterparts of `prod_multiset_count` and `prod_multiset_count_of_subset` (whose proofs are then golfed using the new lemmas).

2022-05-03 14:29:31 40b5952
doc(analysis/matrix): fix broken LaTeX (#13910)

2022-05-03 14:29:30 1c4d2b7
feat(linear_algebra/matrix/trace): add `trace_conj_transpose` (#13888)

2022-05-03 14:29:29 0f8d7a9
feat(order/omega_complete_partial_order): make `continuous_hom.prod.apply` continuous (#13833)
Previous it was defined as `apply : (α →𝒄 β) × α →o β` and the comment
said that it would make sense to define it as a continuous function, but
we need an instance for `α →𝒄 β` first. But then let’s just define that
instance first, and then define `apply : (α →𝒄 β) × α →𝒄 β` as you would
expect.
Also rephrases `lemma ωSup_ωSup` differently now that `apply` is
continuous.

2022-05-03 14:29:28 475a533
feat(topology/algebra/module/basic): A continuous linear functional is open (#13829)

2022-05-03 14:29:27 4cea0a8
move(data/pi/*): Group `pi` files (#13826)
Move `data.pi` to `data.pi.algebra` and `order.pilex` to `data.pi.lex`.

2022-05-03 14:29:25 8a5b4a7
feat(analysis/special_functions/complex/arg): lemmas about `arg z` and `±(π / 2)` (#13821)

2022-05-03 14:29:24 2f38ccb
chore(data/matrix/basic): add lemmas about powers of matrices (#13815)
Shows that:
* natural powers commute with `transpose`, `conj_transpose`, `diagonal`, `block_diagonal`, and `block_diagonal'`.
* integer powers commute with `transpose`, and `conj_transpose`.

2022-05-03 14:29:24 36b5341
feat(ring_theory/polynomial/basic): reduce assumptions, golf (#13800)
There is some reorder, so the diff is a bit large. Sorry for that.

2022-05-03 14:29:22 6d2788c
feat(analysis/calculus/cont_diff): cont_diff_succ_iff_fderiv_apply (#13797)
* Prove that a map is `C^(n+1)` iff it is differentiable and all its directional derivatives in all points are `C^n`. 
* Also some supporting lemmas about `continuous_linear_equiv`.
* We only manage to prove this when the domain is finite dimensional.
* Prove one direction of `cont_diff_on_succ_iff_fderiv_within` with fewer assumptions
* From the sphere eversion project
Co-authored by: Patrick Massot [patrick.massot@u-psud.fr](mailto:patrick.massot@u-psud.fr)
Co-authored by: Oliver Nash [github@olivernash.org](mailto:github@olivernash.org)

2022-05-03 14:29:21 234b3df
feat(analysis/normed_space): lemmas about continuous bilinear maps (#13522)
* Define `continuous_linear_map.map_sub₂` and friends, similar to the lemmas for `linear_map`. 
* Rename `continuous_linear_map.map_add₂` to `continuous_linear_map.map_add_add`
* Two comments refer to `continuous.comp₂`, which will be added in #13423 (but there is otherwise no dependency on this PR).
* Define `precompR` and `precompL`, which will be used to compute the derivative of a convolution.
* From the sphere eversion project
* Required for convolutions

2022-05-03 12:18:57 3b971a7
feat(data/zmod/basic): Add `zmod.cast_sub_one` (#13889)
This PR adds `zmod.cast_sub_one`, an analog of `fin.coe_sub_one`. Unfortunately, the proof is a bit long. But maybe it can be golfed?

2022-05-03 12:18:56 78c86e1
chore(data/nat/totient): golf three lemmas (#13886)
Golf the proofs of `totient_le`, `totient_lt`, and `totient_pos`

2022-05-03 12:18:55 9f818ce
feat(set_theory/ordinal_basic): `o.out.α` is equivalent to the ordinals below `o` (#13876)

2022-05-03 12:18:54 82b9c42
feat(set_theory/game/nim): Mark many lemmas as `simp` (#13844)

2022-05-03 12:18:53 e104992
chore(order/*): Replace total partial orders by linear orders (#13839)
`partial_order α` + `is_total α (≤)` has no more theorems than `linear_order α`  but is nonetheless used in some places. This replaces those uses by `linear_order α` or `complete_linear_order α`. Also make implicit one argument of `finset.lt_inf'_iff` and friends.

2022-05-03 12:18:52 f6cb9be
fix(data/complex/basic): make complex addition computable again (#13837)
This was fixed once before in #8166 (5f2358c43b769b334f3986a96565e606fe5bccec), but a new noncomputable shortcut appears if your file has more imports.

2022-05-03 12:18:51 b07c0f7
feat(set_theory/game/basic): Add `le_rfl` on games (#13814)

2022-05-03 12:18:50 72816f9
feat(data/real/nnreal): add `nnreal.forall` and `nnreal.exists` (#13774)

2022-05-03 12:18:49 7931ba4
feat(order/conditionally_complete_lattice): Simp theorems (#13756)
We remove `supr_unit` and `infi_unit` since, thanks to #13741, they can be proven by `simp`.

2022-05-03 11:43:28 65cad41
chore(.github/workflows): use separate secret token for dependent issues (#13902)

2022-05-03 11:03:24 1c39267
ci(elan): update dead repository URLs (#13906)
`Kha/elan` is redirected by github to `leanprover/elan`, but seemingly with a cache that is delayed.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/install.20elan.20fails.20in.20CI/near/280981154)

2022-05-02 21:37:01 ca1551c
feat(data/finset/n_ary): Binary image of finsets (#13718)
Define `finset.image₂`, the binary map of finsets. Golf `data.finset.pointwise` using it.

2022-05-02 20:22:14 1741207
feat(analysis/normed_space/exponential): `Aeᴮ = eᴮA` if `AB = BA` (#13881)
This commit shows that the exponenential commutes if the exponent does.
This generalizes a previous weaker result.

2022-05-02 19:32:06 c44091f
feat(data/zmod/basic): Generalize `zmod.card` (#13887)
This PR generalizes `zmod.card` from assuming `[fact (0 < n)]` to assuming `[fintype (zmod n)]`.
Note that the latter was already part of the statement, but was previously deduced from the instance `instance fintype : Π (n : ℕ) [fact (0 < n)], fintype (zmod n)` on line 80.

2022-05-02 19:32:04 2b0aeda
feat(measure/function/l*_space): a sample of useful lemmas on L^p spaces (#13823)
Used in #13690

2022-05-02 17:28:50 aa921ef
docs(set_theory/game/pgame): Fix note on `pgame` (#13880)
We never actually quotient by extensionality. What we quotient by is game equivalence.

2022-05-02 17:28:49 0606d7c
feat(set_theory/game/pgame): Negative of `of_lists` (#13868)

2022-05-02 17:28:48 3e2f214
feat(logic/basic): Generalize `congr_fun_heq` (#13867)
The lemma holds for arbitrary heterogeneous equalities, not only that given by casts.

2022-05-02 17:28:47 785f62c
feat(algebra/star/prod): elementwise `star` operator (#13856)
The lemmas and instances this provides are inspired by `algebra/star/pi`, and appear in the same order.
We should have these instances anyway for completness, but the motivation is to make it easy to talk about the continuity of `star` on `units R` via the `units.embed_product_star` lemma.

2022-05-02 17:28:46 206a5f7
feat(measure_theory/integral/bochner): Add a rewrite lemma saying the ennreal coercion of an integral of a nonnegative function equals the lintegral of the ennreal coercion of the function. (#13701)
This PR adds a rewrite lemma `of_real_integral_eq_lintegral_of_real` that is very similar to `lintegral_coe_eq_integral`, but for nonnegative real-valued functions instead of nnreal-valued functions.

2022-05-02 17:28:45 917b527
feat(topology/metric_space/thickened_indicator): Add definition and lemmas about thickened indicators. (#13481)
Add thickened indicators, to be used for the proof of the portmanteau theorem.

2022-05-02 15:58:17 af11e15
feat(algebra/big_operators/finprod): add lemma `finprod_eq_prod_of_mul_support_to_finset_subset'` (#13801)
Formalized as part of the Sphere Eversion project.

2022-05-02 15:58:16 65843cd
feat(analysis/matrix): provide a normed_algebra structure on matrices (#13518)
This is one of the final pieces needed to defining the matrix exponential.
It would be nice to show:
```lean
lemma l1_linf_norm_to_matrix [nondiscrete_normed_field R] [decidable_eq n]
  (f : (n → R) →L[R] (m → R)) :
  ∥linear_map.to_matrix' (↑f : (n → R) →ₗ[R] (m → R))∥ = ∥f∥ :=
```
but its not clear to me under what generality it holds.

2022-05-02 15:58:14 90418df
feat(linear_algebra/finite_dimensional): `finite_dimensional_iff_of_rank_eq_nsmul` (#13357)
If `V` has a dimension that is a scalar multiple of the dimension of `W`, then `V` is finite dimensional iff `W` is.

2022-05-02 15:58:14 64bc02c
feat(ring_theory/dedekind_domain): Chinese remainder theorem for Dedekind domains (#13067)
The general Chinese remainder theorem states `R / I` is isomorphic to a product of `R / (P i ^ e i)`, where `P i` are comaximal, i.e.  `P i + P j = 1` for `i ≠ j`, and the infimum of all `P i` is `I`.
In a Dedekind domain the theorem can be stated in a more friendly way, namely that the `P i` are the factors (in the sense of a unique factorization domain) of `I`. This PR provides two ways of doing so, and includes some more lemmas on the ideals in a Dedekind domain.

2022-05-02 13:45:11 384a7a3
chore(.github/workflows/merge_conflicts.yaml): use separate token (#13884)

2022-05-02 13:45:10 ad2e936
feat(topology/homeomorph): add `(co)map_cocompact` (#13861)
Also rename `filter.comap_cocompact` to `filter.comap_cocompact_le`.

2022-05-02 13:45:09 dbc0339
feat(category_theory/limits/shapes/types): explicit isos (#13854)
Requested on Zulip. https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Relating.20the.20categorical.20product.20and.20the.20normal.20product

2022-05-02 13:45:08 9d3db53
feat(category_theory/preadditive): End X is a division_ring or field when X is simple (#13849)
Consequences of Schur's lemma

2022-05-02 13:45:07 e5b48f9
chore(model_theory/basic): golf `countable_empty` (#13836)

2022-05-02 13:45:06 4fe734d
fix(algebra/indicator_function): add missing decidable instances to lemma statements   (#13834)
This keeps the definition of `set.indicator` as non-computable, but ensures that when lemmas are applied they generalize to any decidable instances.

2022-05-02 13:45:04 cf5fa84
feat(analysis/normed_space/add_torsor_bases): add lemma `smooth_barycentric_coord` (#13764)
Formalized as part of the Sphere Eversion project.

2022-05-02 13:45:03 4113e00
feat(linear_algebra/affine_space/basis): add lemma `affine_basis.linear_combination_coord_eq_self` (#13763)
Formalized as part of the Sphere Eversion project.

2022-05-02 13:45:02 b063c28
fix(src/tactic/alias): Support `alias foo ↔ ..` as documented (#13743)
the current code and the single(!) use of this feature work only if
you write `alias foo ↔ . .` which is very odd.

2022-05-02 13:45:01 3fde082
refactor(topology/algebra/order): reorganize, simplify proofs (#13716)
* Prove `has_compact_mul_support.is_compact_range`
* Simplify the proof of `continuous.exists_forall_le_of_has_compact_mul_support` and `continuous.bdd_below_range_of_has_compact_mul_support` using `has_compact_mul_support.is_compact_range`.
* Reorder `topology.algebra.order.basic` so that `is_compact.bdd_below` and friends are together with all results about `order_closed_topology`.
* Move `continuous.bdd_below_range_of_has_compact_mul_support` (and dual) to `topology.algebra.order.basic`

2022-05-02 13:45:00 52a454a
feat(category_theory/limits): pushouts and pullbacks in the opposite category (#13495)
This PR adds duality isomorphisms for the categories `wide_pushout_shape`, `wide_pullback_shape`, `walking_span`, `walking_cospan` and produce pullbacks/pushouts in the opposite category when pushouts/pullbacks exist.

2022-05-02 11:44:57 61d5d30
feat(group_theory/group_action/basic): A multiplicative action induces an additive action of the additive group (#13780)
`mul_action M α` induces `add_action (additive M) α`.

2022-05-02 11:44:56 320df45
refactor(linear_algebra/trace): unbundle `matrix.trace` (#13712)
These extra type arguments are annoying to work with in many cases, especially when Lean doesn't have any information to infer the mostly-irrelevant `R` argument from. This came up while trying to work with `continuous.matrix_trace`, which is annoying to use for that reason.
The old bundled version is still available as `matrix.trace_linear_map`.
The cost of this change is that we have to copy across the usual set of obvious lemmas about additive maps; but we already do this for `diagonal`, `transpose` etc anyway.

2022-05-02 11:44:55 a627569
feat(category_theory/monoidal): adjunctions in rigid categories (#13707)
We construct the bijection on hom-sets `(Yᘁ ⊗ X ⟶ Z) ≃ (X ⟶ Y ⊗ Z)`
given by "pulling the string on the left" down or up, using right duals in a right rigid category.
As consequences, we show that a left rigid category is monoidal closed (it seems our lefts and rights have got mixed up!!), and that functors from a groupoid to a rigid category is again a rigid category.

2022-05-02 09:54:04 fe44576
feat(probability/martingale): the optional stopping theorem (#13630)
We prove the optional stopping theorem (also known as the fair game theorem). This is number 62 on Freek 100 theorems.

2022-05-02 06:04:17 db0b495
chore(category_theory/limits/cones): avoid a timeout from @[simps] (#13877)
This was causing a timeout on another branch.

2022-05-02 06:04:16 67c0e13
doc(data/polynomial/basic): Remove references to `polynomial.norm2` (#13847)
`polynomial.norm2` was never added to mathlib.

2022-05-02 06:04:15 03ed4c7
move(topology/algebra/floor_ring → order/floor): Move topological properties of `⌊x⌋` and `⌈x⌉` (#13824)
Those belong in an order folder.

2022-05-02 06:04:14 aaa167c
feat(linear_algebra/matrix/adjugate): `adjugate` of a diagonal matrix is diagonal (#13818)
This proof is a bit ugly...

2022-05-02 06:04:13 34bbec6
feat(logic/equiv/local_equiv): add `forall_mem_target`/`exists_mem_target` (#13805)

2022-05-02 06:04:12 179b6c0
feat(logic/equiv/local_equiv): add inhabited instances (#13804)

2022-05-02 06:04:11 c1f8ac5
feat(order/zorn): add Zorn lemma on a preorder (#13803)

2022-05-02 06:04:10 925c473
chore(analysis/normed_space/add_torsor): make coefficients explicit in lemmas about eventual dilations (#13796)
For an example of why we should do this, see: https://github.com/leanprover-community/sphere-eversion/blob/19c461c9fba484090ff0af6f0c0204c623f63713/src/loops/surrounding.lean#L176

2022-05-02 06:04:09 90b1ddb
feat(linear_algebra/finite_dimensional): of_injective (#13792)

2022-05-02 06:04:08 0587eb1
feat(data/zmod/basic): Variant of `zmod.val_int_cast` (#13781)
This PR adds a variant of `zmod.val_int_cast` avoiding the characteristic assumption.

2022-05-02 06:04:07 fd4188d
feat(data/zmod/basic): `zmod 0` is infinite (#13779)
This PR adds an instance stating that `zmod 0` is infinite.

2022-05-02 06:04:06 5c91490
refactor(field_theory/separable): move content about polynomial.expand earlier (#13776)
There were some definitions about polynomial.expand buried in the middle of `field_theory.separable` for no good reason. No changes to content, just moves stuff to an earlier file.

2022-05-02 06:04:05 000cae1
feat(representation_theory): Rep k G is symmetric monoidal (#13685)

2022-05-02 06:04:04 1e38549
feat(analysis/matrix): define the frobenius norm on matrices (#13497)

2022-05-02 05:27:14 3d946a3
chore(algebraic_geometry/AffineScheme): Speed up `Spec` (#13866)
`simps` take 38s in local and does not seem to generate any useful lemma.

2022-05-02 04:39:58 523adb3
feat(set_theory/game/nim): Birthday of `nim` (#13873)

2022-05-02 04:39:57 039543c
refactor(set_theory/game/pgame): Simpler definition for `star` (#13869)
This new definition gives marginally easier proofs for the basic lemmas, and avoids use of the quite incomplete `of_lists` API.

2022-05-02 04:39:56 26e24c7
feat(set_theory/surreal/basic): `<` is transitive on numeric games (#13812)

2022-05-02 02:37:54 922717e
chore(logic/function/basic): don't unfold set in cantor (#13822)
This uses `set_of` and `mem` consistently instead of using application everywhere, since `f` has type `A -> set A` instead of `A -> A -> Prop`. (Arguably, it could just be stated for `A -> A -> Prop` instead though.)

2022-05-02 01:07:34 afc0700
feat(linear_algebra/tensor_product): define tensor_tensor_tensor_assoc (#13864)

2022-05-01 21:51:02 b236cb2
chore(set_theory/surreal/basic): Inline instances (#13811)
We inline various definitions used only for instances. We also remove the redundant lemma `not_le` (which is more generally true on preorders).

2022-05-01 21:16:30 f0930c8
feat(set_theory/pgame/impartial): `star` is impartial (#13842)

2022-05-01 18:53:38 071cb55
feat(data/set/function): missing mono lemmas (#13863)

2022-05-01 12:36:26 9e7c80f
docs(*): Wrap some links in < … > (#13852)
I noticed that many docs say
    See https://stacks.math.columbia.edu/tag/001T.
and the our documentation will include the final `.` in the URL, causing
the URL to not work.
This tries to fix some of these instances. I intentionally applied this
to some URLs ending with a space, because it does not hurt to be
explicit, and the next contributor cargo-culting the URL is more likely
to get this right.
Obligatory xkcd reference: https://xkcd.com/208/

2022-05-01 05:59:37 232c15e
feat(set_theory/game/pgame): Add missing basic API (#13744)

2022-05-01 03:35:34 51b1e11
feat(set_theory/game/impartial): Relabelling of impartial game is impartial (#13843)

2022-05-01 03:00:28 4b92515
chore(set_theory/game/impartial): golf (#13841)

2022-04-30 20:50:46 49342e3
feat(set_theory/cardinal/basic): Add `simp` lemmas on `cardinal.sum` (#13838)

2022-04-30 16:49:17 0420dd8
chore(measure_theory/measurable_space_def): make measurable_space arguments implicit (#13832)

2022-04-30 11:26:15 26310e7
feat(algebra/*): a sample of easy useful lemmas (#13696)
Lemmas needed for #13690

2022-04-30 10:51:30 1c3ab8c
feat(probability/notations): fix some notations, add a new one (#13828)

2022-04-30 05:24:54 9141960
feat(model_theory/syntax): Free variables (#13529)
Defines `term.var_finset` and `bounded_formula.free_var_finset` to consist of all (free) variables used in a term or formula.
Defines `term.restrict_var` and `bounded_formula.restrict_free_var` to restrict formulas to sets of their variables.

2022-04-30 02:26:48 bb45687
feat(model_theory/syntax, semantics): Substitution of variables in terms and formulas (#13632)
Defines `first_order.language.term.subst` and `first_order.language.bounded_formula.subst`, which substitute free variables in terms and formulas with terms.

2022-04-29 22:22:48 a34ee7b
chore(set_theory/game/basic): golf proof (#13810)

2022-04-29 22:22:48 24bc2e1
feat(set_theory/surreal/basic): add `pgame.numeric.left_lt_right` (#13809)
Also compress some trivial proofs into a single line

2022-04-29 22:22:47 a70166a
feat(ring_theory): factorize a non-unit into irreducible factors without multiplying a unit (#13682)
Used in https://proofassistants.stackexchange.com/a/1312/93. Also adds simp lemma `multiset.prod_erase` used in the main proof and the auto-generated additive version, which is immediately analogous to [list.prod_erase](https://leanprover-community.github.io/mathlib_docs/data/list/big_operators.html#list.prod_erase). Also removes some extraneous namespace prefix.

2022-04-29 20:31:27 059c8eb
chore(set_theory/game/basic): fix a single space (#13806)

2022-04-29 20:31:26 8910228
chore(data/polynomial): use dot notation for sub lemmas (#13799)
To match the additive versions

2022-04-29 20:31:25 e56b8fe
feat(model_theory/graph): First-order language and theory of graphs (#13720)
Defines `first_order.language.graph`, the language of graphs
Defines `first_order.Theory.simple_graph`, the theory of simple graphs
Produces models of the theory of simple graphs from simple graphs and vice versa.

2022-04-29 20:31:23 1d4ed4a
chore(topology/algebra/valuation): use forgetful inheritance pattern for valued fields (#13691)
This allows us to solve a `uniform_space` diamond problem that arises when extending valuations to the completion of a valued field.
More precisely, the main goal of this PR is to make the following work:
```lean
import topology.algebra.valued_field
example  {K Γ₀ : Type*} [field K] [linear_ordered_comm_group_with_zero Γ₀] [valued K Γ₀] :
  uniform_space.completion.uniform_space K = valued.to_uniform_space :=
rfl
```

2022-04-29 20:31:22 90bd6f5
feat(model_theory/encoding): A bound on the number of bounded formulas (#13616)
Gives an encoding `first_order.language.bounded_formula.encoding` of bounded formulas as lists.
Uses the encoding to bound the number of bounded formulas with `first_order.language.bounded_formula.card_le`.

2022-04-29 20:31:21 9ce5e95
feat(model_theory/syntax, semantics): A theory of infinite structures (#13580)
Defines `first_order.language.infinite_theory`, a theory of infinite structures
Adjusts the API of the theory of nonempty structures to match

2022-04-29 20:31:20 812518d
feat(model_theory/semantics, satisfiability): Complete Theories (#13558)
Defines `first_order.language.Theory.is_complete`, indicating that a theory is complete.
Defines `first_order.language.complete_theory`, the complete theory of a structure.
Shows that the complete theory of a structure is complete.

2022-04-29 20:31:19 812e17f
feat(analysis/normed_space/pointwise): Addition of balls (#13381)
Adding two balls yields another ball.

2022-04-29 18:38:48 a54db9a
feat(data/finset/basic): A finset that's a subset of a `directed` union is contained in one element (#13727)
Proves `directed.exists_mem_subset_of_finset_subset_bUnion`
Renames `finset.exists_mem_subset_of_subset_bUnion_of_directed_on` to `directed_on.exists_mem_subset_of_finset_subset_bUnion`

2022-04-29 17:28:05 8624f6d
chore(analysis/normed/group/basic): add `nnnorm_sum_le_of_le` (#13795)
This is to match `norm_sum_le_of_le`.
Also tidies up the coercion syntax a little in `pi.semi_normed_group`.
The definition is syntactically identical, just with fewer unecessary type annotations.

2022-04-29 17:28:03 8360f2c
feat(model_theory/language_map, bundled): Reducts of structures (#13745)
Defines `first_order.language.Lhom.reduct` which pulls a structure back along a language map.
Defines `first_order.language.Theory.Model.reduct` which sends a model of `(φ.on_Theory T)` to its reduct as a model of `T`.

2022-04-29 15:59:00 50c3028
chore(analysis/normed_space/operator_norm): move `continuous_linear_map.op_norm_lsmul` into the correct section (#13790)
This was in the "seminorm" section but was about regular norms.
Also relaxes some other typeclasses in the file. This file is still a mess with regards to assuming `nondiscrete_normed_field` when `normed_field` is enough, but that would require substantially more movement within the file.
This cleans up after #13165 and #13538

2022-04-29 15:58:59 64b3576
feat(ring_theory/valuation/extend_to_localization): Extending valuations to localizations. (#13610)

2022-04-29 14:39:20 fe2917a
feat(number_theory/primes_congruent_one): attempt to golf (#13787)
As suggested in the reviews of #12595 we try to golf the proof using the bound proved there.
This doesn't end up being as much of a golf as hoped due to annoying edge cases, but seems conceptually simpler.

2022-04-29 14:39:18 a3beb62
feat(analysis/*): a sample of easy useful lemmas (#13697)
Lemmas needed for #13690

2022-04-29 14:39:17 7373832
chore(analysis/convex): move `convex_on_norm`, change API (#13631)
* Move `convex_on_norm` from `specific_functions` to `topology`, use it to golf the proof of `convex_on_dist`.
* The old `convex_on_norm` is now called `convex_on_univ_norm`. The new `convex_on_norm` is about convexity on any convex set.
* Add `convex_on_univ_dist` and make `s : set E` an implicit argument in `convex_on_dist`.
This way APIs about convexity of norm and distance agree.

2022-04-29 14:39:15 ce79a27
feat(analysis/normed_space/pi_Lp): add lemmas about `pi_Lp.equiv` (#13569)
Most of these are trivial `dsimp` lemmas, but they also let us talk about the norm of constant vectors.

2022-04-29 14:39:14 e561264
feat(algebra/order/monoid_lemmas_zero_lt): add instances (#13376)

2022-04-29 12:25:32 58552fe
feat(set_theory/cardinal/basic): cardinality of a powerset (#13786)

2022-04-29 12:25:31 b2e0a2d
feat(group_theory/subgroup/basic): `inclusion` lemmas (#13754)
A few lemmas for `set.inclusion`, `subgroup.inclusion`, `subalgebra.inclusion`.

2022-04-29 12:25:30 8eb2564
feat(topology/instances/matrix): add `matrix` lemmas about `tsum` (#13677)
This adds lemmas about how `tsum` interacts with `diagonal` and `transpose`, along with the helper `summable` and `has_sum` lemmas.
This also moves `topology/algebra/matrix` to `topology/instances/matrix`, since that seems to align better with how other types are handled.

2022-04-29 11:14:10 889e956
chore(analysis/asymptotics/asymptotics): relax `normed_group` to `semi_normed_group` in lemmas (#13642)
This file already uses `E` vs `E'` for `has_norm` vs `normed_group`. This adds an `E''` to this naming scheme for `normed_group`, and repurposes `E'` to `semi_normed_group`. The majority of the lemmas in this file generalize without any additional work.
I've not attempted to relax the assumptions on lemmas where any proofs would have to change. Most of them would need their assumptions changing from `c ≠ 0` to `∥c∥ ≠ 0`, which is likely to be annoying.
In one place this results in dot notation breaking as the typeclass can no longer be found by unification.

2022-04-29 09:31:57 aab0b2d
feat(algebra/algebra/basic): add some lemmas about `subsemiring` and `algebra_map` (#13767)
These are analogs of `algebra_map_of_subring`, `coe_algebra_map_of_subring` and `algebra_map_of_subring_apply`.

2022-04-29 08:26:15 8abfb3b
feat(representation_theory/Rep): Rep k G is abelian (#13689)

2022-04-29 06:35:27 bc65b7c
feat(data/list/basic): add `list.range_map` (#13777)
* add `list.range_map` and `list.range_map_coe`;
* add `submonoid.closure_eq_image_prod` and `add_submonoid.closure_eq_image_prod`.

2022-04-29 06:35:26 992e26f
feat(topology/algebra/affine): a sufficiently small dilation of a point in the interior of a set lands in the interior (#13766)
Formalized as part of the Sphere Eversion project.

2022-04-29 06:35:25 b4cad37
chore(ring_theory/mv_polynomial/basic): golf (#13765)

2022-04-29 06:35:24 5c1ee35
feat(set_theory/game/pgame): `x - 0 = x + 0` (#13731)

2022-04-29 04:24:26 7170b66
chore(scripts): update nolints.txt (#13775)
I am happy to remove some nolints for you!

2022-04-29 04:24:25 ead85e6
chore(*/equiv): add simp to refl_apply and trans_apply where missing (#13760)

2022-04-29 04:24:24 e294500
feat(category_theory/monoidal): transport rigid structure over an equivalence (#13736)

2022-04-29 04:24:23 ccb9d64
feat(category_theory/braiding): pull back a braiding along a faithful functor (#13684)
I intend to use this to define the braiding/symmetry on `Rep k G` using the existing braiding/symmetry on `Module k`.

2022-04-29 03:48:10 8edb3d1
feat(representation_theory/Rep): the category of representations (#13683)
We define `Rep k G`, the category of `k`-linear representations of a monoid `G`.
Happily, by abstract nonsense we get that this has (co)limits and a monoidal structure for free.
This should play well with the new design for representations in #13573.

2022-04-29 00:29:56 11a4a74
feat(ring_theory/localization/basic): generalize to semiring (#13459)
The main ingredient of this PR is the definition of `is_localization.lift` that works for semirings. The previous definition uses `ring_hom.mk'` that essentially states that `f 0 = 0` follows from other conditions. This does not holds for semirings. Instead, this PR defines the localization of monoid with zero, and uses this to define `is_localization.lift`.
- I think definitions around `localization_with_zero_map` might be ad hoc, and any suggestions for improvement are welcome!
- I plan to further generalize the localization API for semirings. This needs generalization of other ring theory stuff such as `local_ring` and `is_domain` (generalizing `local_ring` is partially done in #13341).

2022-04-28 22:42:55 214e2f1
chore(set_theory/surreal/basic): Allow dot notation on `pgame.numeric` (#13768)
Rename `numeric_neg`/`numeric_add` to `numeric.add`/`numeric.neg`. Prove `numeric.sub` in passing.

2022-04-28 21:23:33 ccd3774
chore(ring_theory/*): dot notation for `submodule.fg` and `subalgebra.fg` (#13737)

2022-04-28 21:23:32 220d4b8
doc(order/filter/small_sets): fix in doc (#13648)

2022-04-28 20:49:01 c096a33
feat(set_theory/game/birthday): Game birthday is zero iff empty (#13715)

2022-04-28 19:47:12 8a32fdf
feat(cyclotomic/eval): (q - 1) ^ totient n < |ϕₙ(q)| (#12595)
Originally from the Wedderburn PR, but generalized to include an exponent.

2022-04-28 17:35:20 0d3f8a7
feat(ring_theory/submonoid/membership): generalize a few lemmas to `mul_mem_class` (#13748)
This generalizes lemmas relating to the additive closure of a multiplicative monoid so that they also apply to multiplicative semigroups using `mul_mem_class`

2022-04-28 15:47:51 c5bf480
fix(group_theory/subsemigroup/basic): change `mul_one_class` to `has_mul` (#13747)

2022-04-28 13:52:30 1c92dfd
chore(*/equiv): missing refl_symm lemmas (#13761)

2022-04-28 08:07:58 0cb20fc
feat(set_theory/ordinal/basic): `max a 0 = a` (#13734)

2022-04-28 08:07:57 98e7848
feat(set_theory/game/pgame): Right moves of nat game are empty (#13730)

2022-04-28 07:28:19 a0af147
feat(set_theory/game/pgame): An empty game is a relabelling of `0` (#13753)

2022-04-27 23:52:26 e89510c
fix(ring_theory/subsemiring/basic): make `inclusion` a `ring_hom`, not a `monoid_hom` (#13746)

2022-04-27 20:32:15 60bb071
feat(logic/unit): Make `punit.star` simp normal form of `default : punit` (#13741)

2022-04-27 15:34:59 dc589c8
fix(topology/bornology): turn `bounded_space` into a `mixin` (#13615)
Otherwise, we would need `bounded_pseudo_metric_space`,
`bounded_metric_space` etc.
Also add `set.finite.is_bounded`, `bornology.is_bounded.all`, and
`bornology.is_bounded_univ`.

2022-04-27 14:57:36 d399744
feat(measure_theory/measure/finite_measure_weak_convergence): define the topology of weak convergence of measures and prove some lemmas about it. (#9943)
This PR has the definition of the topology of weak convergence ("convergence in law" / "convergence in distribution") on `finite_measure _` and on `probability_measure _`.

2022-04-27 10:54:41 ccefda0
perf(representation_theory/basic): speed up `representation.lin_hom` by a factor of 20 (#13739)
`ext` was over-expanding, and the `simp`s were not all squeezed.
This is causing timeouts in other PRs.

2022-04-27 07:01:45 5ac5c92
feat(combinatorics/simple_graph/regularity/uniform): Witnesses of non-uniformity (#13155)
Provide ways to pick witnesses of non-uniformity.

2022-04-27 02:01:16 cb2b02f
feat(representation_theory/basic): representation theory without scalar actions (#13573)
This PR rewrites the files `representation_theory/basic` and `representation_theory/invariants` so that they avoid making use of scalar actions. It also includes the new definitions and lemmas of PR #13502 written with this new approach.

2022-04-27 00:04:48 79e309b
feat(set_theory/game/pgame): Define `is_option` relation (#13700)

2022-04-26 22:05:34 48997d7
fix(data/set/basic): fix name of `has_mem.mem.out` (#13721)

2022-04-26 20:19:00 b00a7f8
refactor(number_theory/padics/padic_norm): split file (#13576)
This PR splits the initial part of the `padic_norm.lean` file that defines p-adic valuations into a new file called `padic_val.lean`. This split makes sense to me since it seems most files importing this don't actually use the norm, so those files can build more in parallel. It also seems like a good organizational change: This way people can look at the files in this directory and see immediately where the valuation is defined, and people looking for the definition of `padic_norm` in `padic_norm.lean` don't have to scroll.

2022-04-26 18:41:44 de79a76
chore(topology/continuous_function/zero_at_infty): add `is_central_scalar` instance (#13710)

2022-04-26 18:41:43 76de6f7
feat(group_theory/subsemigroup/operations): port from submonoid  (#12112)
Taken from `group_theory.submonoid.operations`, trying to keep as much API as possible

2022-04-26 17:50:15 560d1a7
chore(topology/continuous_function/continuous_map): add missing instances for `continuous_map` (#13717)
This adds instances related to the ring variants, i.e., non-unital, non-associative (semi)rings.
To avoid introducing accidental diamonds, this also changes how the existing instances are constructed, such that they now go through the `function.injective.*` definitions.

2022-04-26 17:50:14 325dbc8
refactor(number_theory/legendre_symbol/quadratic_reciprocity.lean): change definition of legendre_sym, simplify proofs, add lemmas (#13667)
This changes the definition of `legendre_sym` to use `quadratic_char`.
The proof of some of the statements can then be simplified by using the corresponding statements for quadratic characters.
Some new API lemmas are added, including the fact that the Legendre symbol is multiplicative,
Also, a few `simps` are squeezed in `.../quadratic_char.lean`.

2022-04-26 15:51:40 8b14d48
feat(logic/relation): Transitive closure of well-founded relation is well-founded (#13698)

2022-04-26 13:36:55 e77dbe0
doc(data/list/*): Fix file links (#13711)
They were linking to `data.list.data.list.defs`.

2022-04-26 13:36:53 bfa0ba5
feat(analysis/normed_space/pointwise): The closure of a thickening (#13708)
Prove `closure (thickening δ s) = cthickening δ s` and golf "thickening a thickening" lemmas.

2022-04-26 13:36:52 e6c6764
feat(logic/relation): Add missing instances (#13704)

2022-04-26 13:36:51 3d5e5ee
feat(data/list/*): Miscellaneous lemmas (#13577)
A few lemmas about `list.chain`, `list.pairwise`. Also rename `list.chain_of_pairwise` to `list.pairwise.chain` for dot notation.

2022-04-26 11:29:38 c83488b
feat(topology/order/priestley): Priestley spaces (#12044)
Define `priestley_space`, a Prop-valued mixin for an ordered topological space to respect Priestley's separation axiom.

2022-04-26 09:51:42 b0efdbb
feat(algebra/module/linear_map) : cancel_right and cancel_left for linear_maps (#13703)

2022-04-26 09:51:41 5172448
feat(set_theory/game/pgame): Conway induction on games (#13699)
This is a more convenient restatement of the induction principle of the type.

2022-04-26 09:51:40 4c6b373
feat(group_theory/subgroup/basic): `zpowers_le` (#13693)
This PR adds a lemma `zpowers_le : zpowers g ≤ H ↔ g ∈ H`. I also fixed the `to_additive` name of a lemma from a previous PR.

2022-04-26 09:51:39 b94ea15
refactor(linear_algebra/matrix/trace): unbundle `matrix.diag` (#13687)
The bundling makes it awkward to work with, as the base ring has to be specified even though it doesn't affect the computation.
This brings it in line with `matrix.diagonal`.
The bundled version is now available as `matrix.diag_linear_map`.
This adds a handful of missing lemmas about `diag` inspired by those about `diagonal`; almost all of which are just `rfl`.

2022-04-26 07:55:34 6ae00ad
chore(tactic/field_simp): fix docstring (#13695)

2022-04-26 07:55:33 a02f11f
feat(algebra/ring/equiv): generalize `ring_equiv` material to allow for non-unital rings (#13626)

2022-04-26 07:55:32 1b1ae61
feat(analysis/normed_space/pointwise): Thickening a thickening (#13380)
In a real normed space, thickening twice is the same as thickening once.

2022-04-26 07:21:28 093b583
feat(set_theory/game/pgame): `ordinal.to_pgame` (#13628)
We define the canonical map from ordinals to pre-games and prove it's an order embedding.

2022-04-26 04:54:38 bf67d47
chore(scripts): update nolints.txt (#13706)
I am happy to remove some nolints for you!

2022-04-26 04:54:37 748ea79
feat(order/filter/basic): more lemmas about `filter.comap` (#13619)
* add `set.compl_def`, `set.finite_image_fst_and_snd_iff`, and `set.forall_finite_image_eval_iff`;
* add `filter.coext`, an extensionality lemma that is more useful for "cofilters";
* rename `filter.eventually_comap'` to `filter.eventually.comap`;
* add `filter.mem_comap'`, `filter.mem_comap_iff_compl`, and `filter.compl_mem_comap`;
* add `filter.compl_mem_coprod`, replace `filter.compl_mem_Coprod_iff` with a simpler `filter.compl_mem_Coprod`;
* add `filter.map_top`;
* use new lemmas to golf some proofs.

2022-04-26 02:57:32 4de6527
feat(algebra/ring/basic): define non-unital commutative (semi)rings (#13476)
This adds the classes of non-unital commutative (semi)rings. These are necessary to talk about, for example, non-unital commutative C∗-algebras such as `C₀(X, ℂ)` which are vital for the continuous functional calculus.
In addition, we weaken many type class assumptions in `algebra/ring/basic` to `non_unital_non_assoc_ring`.

2022-04-26 01:09:50 24a8bb9
feat(order/well-founded): Remove redundant arguments (#13702)
All of these are inferred as `{α : Type*}` (as opposed to `{α : Sort*}`), and there is already a `variables {α : Type*}` at the top of the file.

2022-04-25 23:11:10 438b39a
feat(set_theory/cardinal/basic): Distributivity of `cardinal.sum` and + (#13643)
`cardinal.sum_add_distrib` shows that `cardinal.sum` distributes over +.

2022-04-25 19:25:37 8f604aa
feat(data/nat/totient): totient equals one iff (#13688)

2022-04-25 17:22:45 4e50b68
feat(category_theory/abelian): if D is abelian so is C ⥤ D (#13686)
Needed for LTE, and also useful to show `Rep k G` is abelian.

2022-04-25 17:22:44 43e84cd
feat(data/fin/succ_pred): `fin` is an archimedean succ/pred order (#12792)

2022-04-25 15:23:31 4481a56
feat(algebra/group_power/order): Add sq_zero_iff (#13670)
Tiny lemma that seems to be missing.
Should this be a simp lemma?

2022-04-25 15:23:30 e2f5696
feat(analysis/normed_space/exponential): add `pi.exp_apply` (#13488)
The statement is a bit weird, but this structure is useful because it allows us to push `exp` through `matrix.diagonal` and into its elements.

2022-04-25 15:23:29 85075bc
refactor(category_theory/monoidal): rearrange simp lemmas to work better with coherence (#13409)
Change the direction of some simp lemma for monoidal categories, and remove some unused lemmas.
This PR is effectively a "no-op": no substantial changes to proofs. However, it should enable making `coherence` more powerful soon (following suggestions of @yuma-mizuno)!

2022-04-25 15:23:28 9f75d75
feat(analysis/convex/measure): a convex set is null-measurable (#13138)

2022-04-25 15:23:27 2c15ce1
feat(data/nat/choose): add facts about the multiplicity of primes in the factorisation of central binomial coefficients (#9925)
A number of bounds on the multiplicity of primes in the factorisation of central binomial coefficients. These are of interest because they form part of the proof of Bertrand's postulate.

2022-04-25 13:21:34 2825f35
feat(data/set/prod): add `set.eval_image_pi_subset` (#13613)
Also reorder lemmas like `fst_image_prod_subset` so that simpler
lemmas go first.

2022-04-25 13:21:32 14b0e32
chore(data/finsupp/fin): golf some proofs (#13607)

2022-04-25 13:21:31 b7538a3
feat(algebra/periodic): add lemmas `periodic.prod`, `periodic.smul`, `antiperiodic.smul` (#13496)
Formalized as part of the Sphere Eversion project.

2022-04-25 11:19:25 4bfae3d
feat(set_theory/game/pgame): remove nolint (#13680)
We remove `@[nolint has_inhabited_instance]` from `left_moves` and `right_moves` by providing the appropriate instances for `star`.

2022-04-25 11:19:24 9e8d107
feat(dynamics/periodic_pts): `pow_smul_eq_iff_minimal_period_dvd` (#13676)
This PR adds a lemma `pow_smul_eq_iff_minimal_period_dvd`, along with additive and integer versions.

2022-04-25 11:19:22 7231172
feat(topology/algebra): actions on the opposite type are continuous (#13671)
This also adds the missing `t2_space` instance.

2022-04-25 11:19:21 ed10ba2
feat(ring_theory/witt_vector/frobenius): add `witt_vector.frobenius_equiv` (#13666)
This promotes the bijection to an equivalence with an explicit inverse

2022-04-25 11:19:20 6d3ca07
feat(data/zmod/basic): `-1 : zmod n` lifts to `n - 1` (#13665)
This PR adds a lemma stating that `-1 : zmod n` lifts to `n - 1 : R` for any ring `R`. The proof is surprisingly painful, but maybe someone can find a nicer way?

2022-04-25 11:19:19 ad0a3e6
feat(dynamics/periodic_pts): Iteration is injective below the period (#13660)
This PR adds `iterate_injective_of_lt_minimal_period`, generalizing `pow_injective_of_lt_order_of`.

2022-04-25 10:43:44 6710d65
feat(analysis/complex/roots_of_unity): arg of a primitive root (#13583)

2022-04-25 08:04:59 b35ed40
feat(algebra/order/hom/ring): There's at most one hom between linear ordered fields (#13601)
There is at most one ring homomorphism from a linear ordered field to an archimedean linear ordered field. Also generalize `map_rat_cast` to take in `ring_hom_class`.

2022-04-25 08:04:57 d795ea4
feat(number_theory/legendre_symbol/quadratic_reciprocity): Alternate forms of `exists_sq_eq_neg_one` (#13594)
Also, renamed `exists_sq_eq_neg_one_iff_mod_four_ne_three` to `exists_sq_eq_neg_one` for consistency with `exists_sq_eq_two` and for convenience.

2022-04-25 08:04:56 e251ef7
feat(logic/basic): `congr_fun` for heterogeneous equality (#13591)

2022-04-25 08:04:55 e059fdf
feat(algebra/big_operators/basic): mk0_prod (#13582)

2022-04-25 08:04:54 f02c784
feat(special_functions/gamma): recurrence relation for Gamma function (#13156)

2022-04-25 06:24:12 ef3769d
feat(group_theory/subgroup/basic): Cyclic subgroups are commutative (#13663)
This PR adds an instance stating that the cyclic subgroups `zpowers g` are commutative.

2022-04-25 06:24:11 b0fe3cd
feat(order/filter): add `filter.coprod_bot` etc (#13662)

2022-04-25 06:24:10 feb9aed
feat(group_theory/group_action/basic): More API for `quotient_action` (#13661)
This PR adds a couple more API lemmas for `quotient_action`.

2022-04-25 06:24:09 46563c5
refactor(analysis/convex/basic): rewrite a few proofs (#13658)
* prove that a closed segment is the union of the corresponding open segment and the endpoints;
* use this lemma to golf some proofs;
* make the "field" argument of `mem_open_segment_of_ne_left_right` implicit.
* use section variables.

2022-04-25 06:24:07 7d64215
chore(analysis/convex/topology): generalize a few lemmas (#13656)
This way they work for `𝕜 = ℚ` too.

2022-04-25 06:24:04 c24f1f2
chore(number_theory/padics/*): tidy some proofs (#13652)

2022-04-25 06:24:00 962bfcd
chore(field_theory/finite/polynomial): tidy + remove nolints (#13645)
Some of these definitions only make full sense over a field (for example the indicator function can be nonsensical in non-field rings) but there's also no reason not to define them more generally. This removes all `nolint`s related to this file, and all of the generalisation linter suggestions too.

2022-04-25 06:24:00 b6a4be4
chore(ring_theory/witt_vector/isocrystal): speed up the proof (#13644)
to remove a timeout in #13459

2022-04-25 06:23:59 9c861e3
feat(topology/algebra/matrix): `matrix.block_diagonal` is continuous (#13641)
`continuous.if_const` isn't suitable for the primed `matrix.block_diagonal'` case, as the `if` is dependent.

2022-04-25 06:23:58 b1b2cab
feat(group_theory/complement): The range of a section `G ⧸ H → G` is a transversal (#13623)
This PR adds left and right versions of the statement that the range of a section `G ⧸ H → G` is a transversal.

2022-04-25 06:23:57 6cbf986
refactor(group_theory/schur_zassenhaus): Golf proof of abelian case (#13622)
This PR golfs the proof of the abelian case of Schur-Zassenhaus by switching from a nonstandard definition of the difference of two left transversals to the definition used in `transfer.lean`.

2022-04-25 06:23:56 b6c8c0d
refactor(linear_algebra/quotient): Use the same quotient relation as add_subgroup (#13620)
This means that the quotient by `p` and `p.to_add_subgroup` are defeq as types, and the instances defined on them are defeq too.
This removes a TODO comment by Mario; I can only assume it resolves it in the right direction

2022-04-25 06:23:55 91b8084
chore(analysis/normed_space/finite_dimension): extract some lemmas from existentials (#13600)
A few proofs in this file prove an existential where a stronger statement in terms of the witness exists.
This:
* Removes `basis.sup_norm_le_norm` and replaces it with the more general statement `pi.sum_norm_apply_le_norm`
* Renames `basis.op_norm_le` to `basis.exists_op_norm_le`
* Creates a new `basis.op_norm_le` stated without the existential
* Adds the `nnnorm` version of some `norm` lemmas. In some cases it's easier to prove these first, and derive the `norm` versions from them.

2022-04-25 05:10:33 070c21b
chore(data/matrix): generalisation linter (#13655)

2022-04-25 04:29:05 df4066c
refactor(order/ideal): Make `order.ideal` extend `lower_set` (#13070)
* Redefine `order.ideal` to extend `lower_set`.
* `set_like` instance
* Get rid of `order.ideal.ideal_Inter_nonempty` in favor of `order_bot`
* Make arguments to `order.ideal.sup_mem` semi-implicit
* Reorder sections according to typeclass assumptions (some were outdated since Yakov's `order_bot`/`order_top` refactor)

2022-04-25 03:54:20 d4d5b6d
chore(scripts): update nolints.txt (#13679)
I am happy to remove some nolints for you!

2022-04-25 03:54:18 65edf25
feat(set_theory/game/pgame): `x.move_left i < x` and variants  (#13654)

2022-04-25 01:54:43 454b884
chore(topology/metric_space/basic): golf an instance (#13664)
Golf the proof of `prod.pseudo_metric_space_max` using
`pseudo_emetric_space.to_pseudo_metric_space_of_dist`.

2022-04-25 01:54:42 9101c48
docs(number_theory/sum_two_squares): Update docs (#13593)
We add a remark for an alternate name for the theorem, and a todo note for a generalization of it.

2022-04-25 01:54:41 045fc44
docs(tactic/algebra): Module docstring (#13571)
Write the module docstring.

2022-04-25 00:39:20 54d1ddd
feat(algebra/polynomial/big_operators): add a lemma, reduce assumptions, golf (#13264)

2022-04-24 20:37:26 0d16bb4
refactor(*): migrate from `filter.lift' _ powerset` to `filter.small_sets` (#13673)

2022-04-24 17:23:52 53a484e
chore(order/filter/small_sets): redefine, golf (#13672)
The new definition is defeq to the old one.

2022-04-24 13:05:30 42b9cdf
feat(data/quot): Decidability of `quotient.lift` and friends (#13589)
and make `antisymmetrization.linear_order` computable.

2022-04-24 11:06:15 63da426
refactor(linear_algebra/dimension): further generalisations to division_ring (#13657)

2022-04-24 08:21:40 8126255
feat(set_theory/surreal/basic): Definitional characterization of `numeric` (#13653)

2022-04-24 06:52:55 e006f38
feat(algebra/hom/iterate): Iterating an action (#13659)
This PR adds `smul_iterate`, generalizing  `mul_left_iterate` and `mul_right_iterate`.

2022-04-24 04:20:58 b8b8bf3
refactor(category_theory/monoidal): prove coherence lemmas by coherence (#13406)
Now that we have a basic monoidal coherence tactic, we can replace some boring proofs of particular coherence lemmas with `by coherence`.
I've also simply deleted a few lemmas which are not actually used elsewhere in mathlib, and can be proved `by coherence`.

2022-04-24 02:22:31 92ca136
feat(set_theory/game/pgame): Birthdays of pre-games (#13636)

2022-04-24 02:22:30 5998b49
chore(order/filter/basic): golf 2 proofs (#13614)

2022-04-24 02:22:28 946f253
chore(set_theory/game/pgame): Cleanup (#13612)
We remove redundant parentheses, and make arguments explicit when they can't be inferred.

2022-04-24 02:22:27 b0552c1
docs(tactic/lint/default): Module docstring (#13570)
Write the module docstring.

2022-04-24 00:36:50 2d0ff32
chore(algebra/*): move function instances (#13650)
These should have been much earlier, but I put them in their current places to avoid large build times in what was an already large refactor.

2022-04-23 22:43:27 cc406db
feat(algebra/ring/basic): generalisation linter suggestions (#13649)

2022-04-23 22:43:26 1abfde6
chore(group_theory/exponent): generalise (#13647)
Generalises a few lemmas to not require cancellativity.

2022-04-23 22:43:25 34b1cfd
feat(set_theory/game/pgame): Strengthen `move_{left/right}_mk` (#13646)

2022-04-23 22:43:24 44a05db
fix(topology/algebra/matrix): correct a lemma name (#13640)

2022-04-23 21:10:27 09eb35f
feat(data/part): add get_or_else_of_dom (#13588)
Adds a lemma

2022-04-23 09:50:22 afd8a52
feat(order/hom/basic): add simp lemmas for `strict_mono.order_iso` and friends (#13606)
Formalized as part of the Sphere Eversion project.

2022-04-23 05:39:49 8c262da
chore(analysis/normed_space/ray): golf (#13629)
Golf 2 proofs

2022-04-23 05:39:48 4ad7dc9
chore(algebra/ring/equiv): protect ring equiv lemmas for big operators (#13624)

2022-04-23 05:39:47 fe435de
feat(algebra/algebra/basic,analysis/normed_space/basic): The zero ring is a (normed) algebra (#13618)
This instance probably isn't very useful, but it's nice to have in the docs as an example of what `normed_algebra` permits.

2022-04-23 05:39:45 0bea7a0
feat(set_theory/pgame): Lemmas about order and left/right moves (#13590)

2022-04-23 04:08:28 26b2d72
feat(set_theory/game/pgame): Empty instances (#13635)

2022-04-23 04:08:27 94f970a
feat(linear_algebra/basic): add a simp lemma for comp_right (#13625)

2022-04-23 04:08:26 b62b531
doc(analysis/normed_space/basic): Explain how to use non-unital normed algebras (#13605)
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/.E2.9C.94.20Is.20the.20zero.20algebra.20normed.3F/near/279555566)

2022-04-23 03:26:36 79ea30c
chore(scripts): update nolints.txt (#13637)
I am happy to remove some nolints for you!

2022-04-22 23:37:56 9923362
doc(measure_theory): add some missing `to_additive` docstrings (#13456)

2022-04-22 22:31:59 976c544
feat(algebra/order/archimedean): Comparing with rationals determines the order (#13602)
In a linear ordered field, if `q < x → q ≤ y` for all `q : ℚ`, then `x ≤ y`, and similar results.

2022-04-22 22:31:58 b98bd41
feat(topology/uniform_space/matrix): Add the uniform_space structure on matrices (#13534)

2022-04-22 20:06:20 4547076
chore(*): use zero_lt_two/two_ne_zero lemmas more (#13609)

2022-04-22 20:06:19 9eb3858
feat(combinatorics/pigeonhole): Pigeons in linear commutative rings (#13308)
Duplicate almost all the pigeonhole principle API to work in `linear_ordered_comm_ring`s.

2022-04-22 20:06:18 7be21e0
feat(topology/algebra/group): quotient by a closed subgroup is regular (#13278)

2022-04-22 20:06:16 ad3e667
feat(order/chain): Flags (#13089)
Define the type of maximal chains, aka flags, of an order.

2022-04-22 18:15:50 9c3cb72
feat(data/int/basic): Add unit lemmas (#13565)
This PR adds a few more unit lemmas, and cleans up some of the proofs.

2022-04-22 18:15:49 695e0b7
feat(analysis/convex/strict_convex_space): Verify strict convexity from fixed scalars (#13548)
Prove that `∀ x y : E, ∥x∥ ≤ 1 → ∥y∥ ≤ 1 → x ≠ y → ∥a • x + b • y∥ < 1` for **fixed** `a` and `b` is enough for `E` to be a strictly convex space.

2022-04-22 18:15:48 2e83d61
feat(topology/metric_space/hausdorff_distance): Thickening the closure (#13515)
`thickening δ (closure s) = thickening δ s` and other simple lemmas. Also rename `inf_edist_le_inf_edist_of_subset` to `inf_edist_anti` and make arguments to `mem_thickening_iff` implicit.

2022-04-22 15:16:45 355d68a
chore(ring_theory/roots_of_unity): primitive roots are not zero (#13587)

2022-04-22 15:16:44 79ac4c8
chore(data/polynomial/degree/definitions): simplify sum_fin, degree_C_le (#13564)

2022-04-22 15:16:42 a74df9b
feat(number_theory/legendre_symbol): add file quadratic_char.lean (#13503)
This adds the file `quadratic_char.lean` in `number_theory/legendre_symbol/`.
This file contains (apart from some more general stuff on finite fields that is useful for what is done in the file) the definition of the quadratic character on a finite field `F` (with values in the integers) and a number of statements of properties.
It also defines quadratic characters on `zmod 4` and `zmod 8` that will be useful for the supplements to the law of quadratic reciprocity.

2022-04-22 12:15:36 631890b
chore(data/rat/basic): tidy some proofs (#13603)

2022-04-22 12:15:35 f7dac5e
feat(logic/basic): add `auto_param.out` and `opt_param.out` (#13599)

2022-04-22 12:15:34 6729cca
feat(set_theory/game/pgame): simp + private (#13596)

2022-04-22 12:15:32 62205c2
refactor(data/nat/factorization): Infer arguments (#13595)

2022-04-22 11:41:15 9abfff3
chore(analysis/inner_product_space/lax_milgram): tidy some proofs (#13604)

2022-04-22 08:34:36 3d24b09
feat(algebra/ring/basic): define non-unital ring homs (#13430)
This defines a new bundled hom type and associated class for non-unital (even non-associative) (semi)rings. The associated notation introduced for these homs is `α →ₙ+* β` to parallel the `ring_hom` notation `α →+* β`, where `ₙ` stands for "non-unital".

2022-04-22 06:47:42 394dec3
feat(order/filter/small_sets): define the filter of small sets (#13467)
* Main author is @PatrickMassot 
* From the sphere eversion project
* Required for convolutions
Co-authored by: Patrick Massot <patrick.massot@u-psud.fr>

2022-04-22 06:47:41 9db5916
fix(data/fintype/basic): fix `fintype_of_option_equiv` (#13466)
A type is a `fintype` if its successor (using `option`) is a `fintype`
This fixes an error introduced in #13086.

2022-04-22 06:47:40 0d77f29
feat(analysis/calculus/specific_functions): define normed bump functions (#13463)
* Normed bump functions have integral 1 w.r.t. the specified measure.
* Also add a few more properties of bump functions, including its smoothness in all arguments (including midpoint and the two radii).
* From the sphere eversion project
* Required for convolutions

2022-04-22 06:47:39 06a6044
feat(analysis/normed_space/exponential): Weaken typeclass requirements (#13444)
This allows the exponential to be defined independently of a choice of norm.

2022-04-22 04:34:08 2b902eb
chore(scripts): update nolints.txt (#13597)
I am happy to remove some nolints for you!

2022-04-22 04:34:07 79bc6ad
feat(data/mv_polynomial/equiv): API for `mv_polynomial.fin_succ_equiv` (#10812)
This PR provides API for `mv_polynomial.fin_succ_equiv`: coefficients, degree, coefficientes of coefficients, degree_of of coefficients, etc.
To state and prove these lemmas I had to define `cons` and `tail` for maps `fin (n+1) →₀ M` and prove the usual properties for these. I'm not sure if this is necessary or the correct approach to do this.

2022-04-22 01:34:22 17d2424
feat(polynomial/cyclotomic): `eval_apply` (#13586)

2022-04-22 01:34:21 40fc58c
feat(data/quot): `quotient.out` is injective (#13584)

2022-04-22 01:34:20 821e7c8
doc(category_theory/limits/has_limits): fix two docstrings (#13581)

2022-04-22 01:34:19 7b92db7
chore(set_theory/cardinal/basic): Fix spacing (#13562)

2022-04-22 01:34:17 1da12b5
fix(analysis/normed_space/basic): allow the zero ring to be a normed algebra (#13544)
This replaces `norm_algebra_map_eq : ∀ x : 𝕜, ∥algebra_map 𝕜 𝕜' x∥ = ∥x∥` with `norm_smul_le : ∀ (r : 𝕜) (x : 𝕜'), ∥r • x∥ ≤ ∥r∥ * ∥x∥` in `normed_algebra`. With this change, `normed_algebra` means nothing more than "a normed module that is also an algebra", which seems to be the only notion actually used in mathlib anyway. In practice, this change really just removes any constraints on `∥1∥`.
The old meaning of `[normed_algebra R A]` is now achieved with `[normed_algebra R A] [norm_one_class A]`.
As a result, lemmas like `normed_algebra.norm_one_class` and `normed_algebra.nontrivial` have been removed, as they no longer make sense now that the two typeclasses are entirely orthogonal.
Notably this means that the following `normed_algebra` instances hold more generally than before:
* `continuous_linear_map.to_normed_algebra`
* `pi.normed_algebra`
* `bounded_continuous_function.normed_algebra`
* `continuous_map.normed_algebra`
* Instances not yet in mathlib:
  * Matrices under the `L1-L_inf` norm are a normed algebra even if the matrix is empty
  * Matrices under the frobenius norm are a normed algebra (note `∥(1 : matrix n n 𝕜')∥ = \sqrt (fintype.card n)` with that norm)
This last one is the original motivation for this PR; otherwise every lemma about a matrix exponential has to case on whether the matrices are empty.
It is possible that some of the `[norm_one_class A]`s added in `spectrum.lean` are unnecessary; however, the assumptions are no stronger than they were before, and I'm not interested in trying to generalize them as part of this PR.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Is.20the.20zero.20algebra.20normed.3F/near/279515954)

2022-04-22 01:34:16 77236cd
refactor(category_theory): make has_zero_object a Prop  (#13517)

2022-04-22 01:34:15 dced133
feat(group_theory/group_action/basic): Right multiplication satisfies the `quotient_action` axiom (#13475)
This PR adds a `quotient_action` instance for right multiplication.

2022-04-22 01:34:14 bb9d1c5
chore(*): remove `subst` when not necessary (#13453)
Where possible, this replaces `subst` with `obtain rfl` (which is equivalent to `have` and then `subst`, golfing a line).
This also tidies some non-terminal `simp`s.

2022-04-21 23:36:55 afb4392
feat(linear_algebra/prod): two lemmas about prod_map (#13572)

2022-04-21 23:36:54 d444a27
feat(group_theory/transfer): Define the transfer homomorphism (#13446)
This PR adds a definition of the transfer homomorphism.

2022-04-21 23:36:53 b1a1ece
feat(ring_theory/valuation/valuation_subring): The order structure on valuation subrings of a field (#13429)
This PR shows that for a valuation subring `R` of a field `K`, the coarsenings of `R` are in (anti)ordered bijections with the prime ideals of `R`. As a corollary, the collection of such coarsenings is totally ordered.

2022-04-21 23:36:51 1e76b9e
feat(topology/constructions): more convenient lemmas (#13423)
* Define `continuous.fst'` and friends and `continuous.comp₂` and friends for convenience (and to help with elaborator issues)
* Cleanup in `topology/constructions`
* Define `set.preimage_inl_image_inr` and `set.preimage_inr_image_inl` and prove the `range` versions in terms of these. This required reordering some lemmas (moving general lemmas about `range` above the lemmas of interactions with `range` and specific functions).
* From the sphere eversion project

2022-04-21 23:36:50 63ee558
feat(algebra/big_operators): split products and sums over fin (a+b) (#13291)

2022-04-21 23:36:49 4d7683b
feat(group_theory/torsion): torsion-free groups and quotients by torsion subgroups (#13173)

2022-04-21 23:36:48 e728cfd
feat(order/grade): Graded orders (#11308)
Define graded orders. To be the most general, we use `is_min`/`is_max` rather than `order_bot`/`order_top`. A grade is a function that respects the covering relation and eventually minimality/maximality.

2022-04-21 23:36:46 8110ab9
feat(number_theory/modular): fundamental domain part 2 (#8985)
This completes the argument that the standard open domain `{z : |z|>1, |\Re(z)|<1/2}` is a fundamental domain for the action of `SL(2,\Z)` on `\H`. The first PR (#8611) showed that every point in the upper half plane has a representative inside its closure, and here we show that representatives in the open domain are unique.

2022-04-21 20:30:58 ba556a7
chore(algebra/algebra/spectrum): lemmas about the zero ring (#13568)

2022-04-21 20:30:57 8145333
ci(gitpod): update leanproject version (#13567)

2022-04-21 20:30:56 aeef727
chore(set_theory/ordinal/basic): Small style tweaks (#13561)

2022-04-21 20:30:55 efab188
refactor(group_theory/{submonoid, subsemigroup}/basic): move `mul_mem_class` (#13559)
This moves `mul_mem_class` (and `add_mem_class`) from `group_theory/submonoid/basic` to `group_theory/subsemigroup/basic` so that `subsemigroup` can be an instance. We then protect `subsemigroup.mul_mem`. In addition, we add an induction principle for binary predicates to better parallel `group_theory/submonoid/basic`.

2022-04-21 20:30:54 afe1421
feat(data/nat/pow): add theorem `nat.pow_mod` (#13551)
Add theorem that states `∀ (a b n : ℕ) : a ^ b % n = (a % n) ^ b % n`.

2022-04-21 20:30:53 090e59d
feat(analysis/normed_space/operator_norm): norm of `lsmul` (#13538)
* From the sphere eversion project
* Required for convolutions

2022-04-21 20:30:51 8430aae
feat(algebra/group_power/lemmas): More lemmas through `to_additive` (#13537)
Use `to_additive` to generate a bunch of old `nsmul`/`zsmul` lemmas from new `pow`/`zpow` ones. Also protect `nat.nsmul_eq_mul` as it should have been.

2022-04-21 20:30:50 08323cd
feat(data/real/ennreal): `tsub` lemmas (#13525)
Inherit lemmas about subtraction on `ℝ≥0∞` from `algebra.order.sub`. Generalize `add_le_cancellable.tsub_lt_self` in passing.
New `ennreal` lemmas

2022-04-21 20:30:49 3a06179
refactor(category_theory): reverse simp lemmas about (co)forks (#13519)
Makes `fork.ι` instead of `t.π.app zero` so that we avoid any unnecessary references to `walking_parallel_pair` in (co)fork  homs. This induces quite a lot of changes in other files, but I think it's worth the pain. The PR also changes `fork.is_limit.mk` to avoid stating redundant morphisms.

2022-04-21 17:29:16 b7cba57
chore(set_theory/game/*): Protect ambiguous lemmas (#13557)
Protect `pgame.neg_zero` and inline `pgame.add_le_add_left` and friends into `covariant_class` instances.

2022-04-21 17:29:14 b6c96ef
feat(combinatorics/simple_graph/clique): Clique-free graphs (#13552)
... and the finset of cliques of a finite graph.

2022-04-21 17:29:13 e49ac91
feat(analysis/calculus/cont_diff): add more prod lemmas (#13521)
* Add `cont_diff.fst`, `cont_diff.comp₂`, `cont_diff_prod_mk_left` and many variants.
* From the sphere eversion project
* Required for convolutions
* PR #13423 is similar for continuity

2022-04-21 17:29:12 62b3333
chore(algebra/star/chsh): `repeat`ed golf (#13499)
Instead of having a real Gröbner tactic, we can leverage a loop of `ring, simp` to reach a goal.

2022-04-21 17:29:11 777d1ec
feat(measure_theory/measure/measure_space): add some lemmas for the counting measure (#13485)

2022-04-21 17:29:10 6490ee3
feat(topology/instances/ennreal): Add lemmas about continuity of ennreal subtraction. (#13448)
`ennreal` does not have continuous `sub`. This PR adds `ennreal.continuous_on_sub` and related lemmas, which give the continuity of the subtraction in more restricted/specialized setups.

2022-04-21 15:20:01 91cbe46
feat(algebra/monoid_algebra/basic): lifts of (add_)monoid_algebras (#13382)
We show that homomorphisms of the grading (add) monoids of (add) monoid algebras lift to ring/algebra homs of the algebras themselves.
This PR is preparation for introducing Laurent polynomials (see [adomani_laurent_polynomials](https://github.com/leanprover-community/mathlib/tree/adomani_laurent_polynomials), file `data/polynomial/laurent` for a preliminary version).
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Laurent.20polynomials)

2022-04-21 15:19:59 8044794
feat(topology/algebra/module/basic): continuous linear maps are automatically uniformly continuous (#13276)
Generalize `continuous_linear_map.uniform_continuous`, `continuous_linear_equiv.uniform_embedding` and `linear_equiv.uniform_embedding` form `normed_space`s to `uniform_add_group`s and move them to `topology/algebra/module/basic`.

2022-04-21 15:19:58 79abf67
fix(tactic/apply_rules): separate single rules and attribute names in syntax (#13227)
@hrmacbeth reported an issue with `apply_rules` [on Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/monotonicity.2Eattr.20with.20apply_rules). It boiled down to `apply_rules` not properly distinguishing between attribute names, the names of `user_attribute` declarations, and the names of normal declarations. There's an example of using `apply_rules` with attributes in the docs:
```lean
@[user_attribute]
meta def mono_rules : user_attribute :=
{ name := `mono_rules,
  descr := "lemmas usable to prove monotonicity" }
local attribute [mono_rules] add_le_add
example (a b c d : α) : a + b ≤ c + d :=
begin
  apply_rules mono_rules, -- takes action
end
```
but this only worked by coincidence because the attribute name and the name of the `user_attribute` declaration were the same.
With this change, expressions and names of attributes are now separated: the latter are specified after `with`. The call above becomes `apply_rules with mono_rules`. This mirrors the syntax of `simp`. Note that this feature was only used in meta code in mathlib.
The example from Zulip (modified for proper syntax) still doesn't work with my change:
```lean
import tactic.monotonicity
variables {α : Type*} [linear_ordered_add_comm_group α]
example (a b c d : α) : a + b ≤ c + d :=
begin
  apply_rules with mono,
end
```
but it seems to fail because the `mono` rules cause `apply_rules` to loop -- that is, the rule set is getting applied correctly.

2022-04-21 15:19:56 e8b581a
feat(order/countable_dense_linear_order): Relax conditions of `embedding_from_countable_to_dense` (#12928)
We prove that any countable order embeds in any nontrivial dense order. We also slightly golf the rest of the file.

2022-04-21 12:10:04 0f9edf9
feat(data/set/[basic|prod]): make `×ˢ` bind more strongly, and define `mem.out` (#13422)
* This means that  `×ˢ` does not behave the same as `∪` or `∩` around `⁻¹'` or `''`, but I think that is fine.
* From the sphere eversion project

2022-04-21 12:10:02 c956647
feat(order/basic): Simple shortcut lemmas (#13421)
Add convenience lemmas to make the API a bit more symmetric and easier to translate between `transitive` and `is_trans`. Also rename `_ge'` to `_le` in lemmas and fix the `is_max_` aliases.

2022-04-21 12:10:00 22c4291
chore(number_theory/dioph): Cleanup (#13403)
Clean up, including:
* Move prerequisites to the correct files
* Make equalities in `poly` operations defeq
* Remove defeq abuse around `set`
* Slightly golf proofs by tweaking explicitness of lemma arguments
Renames

2022-04-21 12:09:59 e5f8236
feat(analysis/normed_space/exponential): ring homomorphisms are preserved by the exponential (#13402)
The new results here are:
* `prod.fst_exp`
* `prod.snd_exp`
* `exp_units_conj`
* `exp_conj`
* `map_exp`
* `map_exp_of_mem_ball`
This last lemma does all the heavy lifting, and also lets us golf `algebra_map_exp_comm`.
This doesn't bother to duplicate the rest of these lemmas for the `*_of_mem_ball` version, since the proofs are trivial and those lemmas probably wouldn't be used.
This also generalizes some of the lemmas about infinite sums to work with `add_monoid_hom_class`.

2022-04-21 12:09:58 0821eef
feat(algebraic_geometry/projective_spectrum): degree zero part of a localized ring (#13398)
If we have a graded ring A and some element f of A, the the localised ring A away from f has a degree zero part. This construction is useful because proj locally is spec of degree zero part of some localised ring.
Perhaps this ring belongs to some other file or different name, suggestions are very welcome

2022-04-21 12:09:57 f1091b3
feat(set_theory/cardinal): A set of cardinals is small iff it's bounded (#13373)
We move `mk_subtype_le` and `mk_set_le` earlier within the file in order to better accomodate for the new result, `bdd_above_iff_small`.  We need this result right above the `Sup` stuff, as we'll make heavy use of it in a following refactor for `cardinal.sup`.

2022-04-21 12:09:56 c30131f
feat(data/polynomial/{derivative, iterated_deriv}): reduce assumptions (#13368)

2022-04-21 12:09:55 761801f
feat(algebra/monoid_algebra/grading): Use the new graded_algebra API (#13360)
This removes `to_grades_by` and `of_grades_by`, and prefers `graded_algebra.decompose` as the canonical spelling.
This might undo some of the performance improvements in #13169, but it's not clear where to apply the analogous changes here, or whether they're really needed any more anyway,

2022-04-21 12:09:54 5c2088e
feat(algebra/group/to_additive): let @[to_additive] mimic alias’s docstrings (#13330)
many of our `nolint.txt` entires are due to code of this shape:
    @[to_additive add_foo]
    lemma foo := .. /- no docstring -/
    alias foo <- bar
    attribute [to_additive add_bar] bar
where now `bar` has a docstring (from `alias`), but `bar_add` does not.
This PR makes `to_additive` detect that `bar` is an alias, and unless an 
explicit docstring is passed to `to_additive`, creates an “alias of add_foo”
docstring.

2022-04-21 12:09:53 7d61199
feat(set_theory/cofinality): Basic fundamental sequences (#13326)

2022-04-21 12:09:51 ba455ea
feat(special_functions/pow): continuity of real to complex power (#13244)
Some lemmas excised from my Gamma-function project. The main result is that for a complex `s` with `re s > 0`, the function `(λ x, x ^ s : ℝ → ℂ)` is continuous on all of `ℝ`.

2022-04-21 12:09:50 cf3b996
feat(group_theory/torsion): extension closedness, and torsion scalars in modules (#13172)
Co-authored by: Alex J. Best <alex.j.best@gmail.com>

2022-04-21 12:09:49 82ef19a
feat(category_theory/path_category): canonical quotient of a path category (#13159)

2022-04-21 12:09:48 8261501
refactor(number_theory/padics/padic_norm): Switch nat and rat definitions (#12454)
Switches the order in which `padic_val_nat` and `padic_val_rat` are defined.
This PR has also expanded to add `padic_val_int` and some API lemmas for that.

2022-04-21 11:02:58 21bbe90
feat(analysis/normed): more lemmas about the sup norm on pi types and matrices (#13536)
For now we name the matrix lemmas as `matrix.norm_*` and `matrix.nnnorm_*` to match `matrix.norm_le_iff` and `matrix.nnnorm_le_iff`.
We should consider renaming these in future to indicate which norm they refer to, but should probably deal with agreeing on a name in a separate PR.

2022-04-21 11:02:57 b87e193
fix(category_theory/monoidal): improve hygiene in coherence tactic (#13507)

2022-04-21 11:02:56 9f22a36
feat(src/number_theory/cyclotomic/discriminant): add discr_prime_pow_ne_two (#13465)
We add `discr_prime_pow_ne_two`, the discriminant of the `p^n`-th cyclotomic field.
From flt-regular

2022-04-21 08:48:23 16ecb3d
chore(algebra/group/type_tags): missing simp lemmas (#13553)
To have `simps` generate these in an appropriate form, this inserts explicits coercions between the type synonyms.

2022-04-21 08:48:22 839f508
feat(measure_theory): allow measurability to prove ae_strongly_measurable (#13427)
Adds `measurable.ae_strongly_measurable` to the `measurability` list

2022-04-21 06:55:01 6012c21
refactor(algebra/hom/group): generalize a few lemmas to `monoid_hom_class` (#13447)
This generalizes a few lemmas to `monoid_hom_class` from `monoid_hom`. In particular, `monoid_hom.injective_iff` has been generalized and renamed to `injective_iff_map_eq_one`.
This also deletes `add_monoid_hom.injective_iff`, `ring_hom.injective_iff` and `alg_hom.injective_iff`. All of these are superseded by the generically applicable `injective_iff_map_eq_zero`.

2022-04-21 03:36:38 e0f78ab
chore(data/list/cycle): Add basic `simp` lemmas + minor golfing (#13533)

2022-04-21 03:36:36 2f1a4af
feat(algebra/hom/non_unital_alg): introduce notation for non-unital algebra homomorphisms (#13470)
This introduces the notation `A →ₙₐ[R] B` for `non_unital_alg_hom R A B` to mirror that of `non_unital_ring_hom R S` as `R →ₙ+* S` from #13430. Here, the `ₙ` stands for "non-unital".

2022-04-21 01:41:41 c93b99f
chore(algebra/group/defs): Declare `field_simps` attribute earlier (#13543)
Declaring `field_simps` earlier make the relevant lemmas taggable as they are declared.

2022-04-20 22:44:21 b2518be
feat(analysis/normed/normed_field): add `one_le_(nn)norm_one` for nontrivial normed rings (#13556)

2022-04-20 22:44:20 81c8f31
refactor(analysis/calculus/cont_diff): reorder the file (#13468)
* There are no functional changes in this PR (except the order of implicit arguments in some lemmas)
* This PR tries to move `cont_diff.comp` above some other lemmas. In a follow-up PR I will use this to add lemmas like `cont_diff.fst` which requires `cont_diff.comp`, but after this PR we can add it near `cont_diff_fst`.
* We also add `{m n : with_top ℕ}` as variables, so that we don't have to repeat this in every lemma

2022-04-20 21:15:06 b86b927
move(set_theory/*): Organize in folders (#13530)
Create folders `cardinal`, `ordinal` and `game`. Most files under `set_theory` belong to a least one of them.

2022-04-20 20:40:18 741d285
chore(number_theory/zsqrtd/basic): simplify le_total proof (#13555)

2022-04-20 18:42:11 9d6d8c2
feat(group_theory/perm/basic): Iterating a permutation is the same as taking a power (#13554)

2022-04-20 18:42:10 27a8328
feat(data/real/sqrt): `sqrt x < y ↔ x < y^2` (#13546)
Prove `real.sqrt_lt_iff` and generalize `real.lt_sqrt`.

2022-04-20 18:42:09 242d687
feat(algebra/hom/group and *): introduce `mul_hom M N` notation `M →ₙ* N` (#13526)
The discussion and poll related to this new notation can be found in this [Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/ring_hom.20notation.20and.20friends/near/279313301)

2022-04-20 17:09:57 7bfaa5c
feat(group_theory/schreier): Schreier's lemma in terms of `group.fg` and `group.rank` (#13361)
This PR adds statements of Schreier's lemma in terms of `group.fg` and `group.rank`.

2022-04-20 17:09:56 b0805a5
feat(linear_algebra/trace): dual_tensor_hom is an equivalence + basis-free characterization of the trace (#10372)

2022-04-20 16:01:13 311ca72
feat(order/filter/basic): allow functions between different types in lemmas about [co]map by a constant function (#13542)

2022-04-20 14:05:05 d79f6f3
feat(data/finset/basic): simp `to_finset_eq_empty` (#13531)

2022-04-20 12:56:15 8ba7df8
feat(topology/algebra/algebra): ℚ-scalar multiplication is continuous (#13458)

2022-04-20 10:38:26 a3a166b
chore(model_theory/encoding): Improve the encoding of terms  (#13532)
Makes it so that the encoding of terms no longer requires the assumption `inhabited (L.term A)`.
Adjusts following lemmas to use the `encoding` API more directly.

2022-04-20 10:38:25 d9a8d6e
feat(topology/separation): Finite sets in T2 spaces (#12845)
We prove the following theorem: given a finite set in a T2 space, one can choose an open set around each point so that these are pairwise disjoint.

2022-04-20 10:04:20 8d351dc
feat(analysis/inner_product_space/gram_schmidt_ortho): Gram-Schmidt Orthogonalization and Orthonormalization (#12857)
Formalize Gram-Schmidt Orthogonalization and Orthonormalization

2022-04-20 08:56:47 92f6eb6
chore(algebra/big_operators/fin): golf finset.prod_range (#13535)

2022-04-19 23:26:34 71b470f
chore(analysis/normed_space/star): make an argument explicit (#13523)

2022-04-19 20:26:49 5038a4a
feat(*): `op_op_op_comm` lemmas (#13528)
A handful of lemmas of the form `op (op a b) (op c d) = op (op a c) (op b d)`.

2022-04-19 20:26:48 cf5aea0
chore(data/real/nnreal): add commuted version of `nnreal.mul_finset_sup` (#13512)
Also make the argument explicit

2022-04-19 20:26:47 094b1f5
chore(*/matrix): order `m` and `n` alphabetically (#13510)
In a few places this also reorders `(n) [fintype n] (m) [fintype m]` to `(m n) [fintype m] [fintype n]` which seems to be where we prefer to put typeclasses.

2022-04-19 19:41:21 3ac979a
feat(analysis/calculus/specific_functions): trivial extra lemmas (#13516)

2022-04-19 17:41:07 70759ef
feat(analysis): lemmas about nnnorm and nndist (#13498)
Most of these lemmas follow trivially from the `norm` versions. This is far from exhaustive.
Additionally:
* `nnreal.coe_supr` and `nnreal.coe_infi` are added
* The old `is_primitive_root.nnnorm_eq_one` is renamed to `is_primitive_root.norm'_eq_one` as it was not about `nnnorm` at all. The unprimed name is already taken in reference to `algebra.norm`.
* `parallelogram_law_with_norm_real` is removed since it's syntactically identical to `parallelogram_law_with_norm ℝ` and also not used anywhere.

2022-04-19 15:52:32 f06dca7
feat(data/int/basic): add lemma `int.abs_le_one_iff` (#13513)
Also renaming `int.eq_zero_iff_abs_lt_one`.
The proof is due to @Ruben-VandeVelde 
Discussed on Zulip [here](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Integers.20of.20norm.20at.20most.20one)

2022-04-19 15:52:31 634eab1
feat(category_theory/limits): add characteristic predicate for zero objects (#13511)

2022-04-19 14:04:47 5dc8c1c
feat(order/filter/n_ary): Add lemma equating map₂ to map on the product (#13490)
Proof that map₂ is the image of the corresponding function `α × β → γ`.
Discussion: https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/filter.20map.E2.82.82.20as.20map

2022-04-19 14:04:46 8fa3263
fix(analysis/locally_convex/balanced_hull_core): minimize import (#13450)
I'm doing this because I need to have `balanced_hull_core` before `normed_space.finite_dimensional` and this little change seems to be enough for that, but I think at some point we'll need to move lemmas so that normed_spaces come as late as possible

2022-04-19 14:04:45 ba6a985
feat(order/cover): define `wcovby` (#13424)
* This defines the reflexive closure of `covby`, which I call `wcovby` ("weakly covered by")
* This is useful, since some results about `covby` still hold for `wcovby`. 
* Use `wcovby` in the proofs of the properties for `covby`.
* Also define `wcovby_insert` (the motivating example, since I really want `(wcovby_insert _ _).eq_or_eq`)

2022-04-19 14:04:44 8f7e10b
refactor(group_theory/group_action/big_operators): extract to a new file (#13340)
`basic` is a misleading name, as `group_action.basic` imports a lot of things.
For now I'm not renaming it, but I've adding a skeletal docstring.
Splitting out the big operator lemmas allows access to big operators before modules and quotients.
This also performs a drive-by generalization of the typeclasses on `smul_cancel_of_non_zero_divisor`.
Authorship is from #1910

2022-04-19 12:11:00 3e78c23
fix(algebra/hom/units): better defeq in `is_unit.lift_right` (#13508)
… and fix a timeout introduced by this change and remove some extraneous parentheses there.

2022-04-19 10:05:03 5a4bae1
feat(algebra/*/basic): add trivial lemmas (#13416)
These save you from having to fiddle with `mul_one` when you want to rewrite them the other way, or allow easier commutativity rewrites.

2022-04-19 08:07:49 9202b6d
feat(order/succ_pred/basic): Intervals and `succ`/`pred` (#13486)
Relate `order.succ`, `order.pred` and `set.Ixx`.

2022-04-19 06:50:55 d19e8cb
chore(docs): don't use deprecated is_subring (#13505)

2022-04-19 05:04:57 828ef48
fix(category_theory/monoidal): increase class search depth in coherence tactic (#13413)
There were two places, not just one, where the class search depth needs to be increased.

2022-04-19 03:39:47 fb44330
feat(data/matrix/block): `matrix.block_diagonal` is a ring homomorphism (#13489)
This is one of the steps on the path to showing that the matrix exponential of a block diagonal matrix is a block diagonal matrix of the exponents of the blocks.
As well as adding the new bundled homomorphisms, this generalizes the typeclasses in this file and tidies up the order of arguments.
Finally, this protects some `map_*` lemmas to prevent clashes with the global lemmas of the same name.

2022-04-19 01:03:57 eb22ba4
chore(algebra/monoid_algebra/basic): use the homomorphism typeclasses (#13389)
This replaces `mul_hom` with `mul_hom_class` and `add_hom` with `add_hom_class`.
Also adds two trivial lemmas, `monoid_algebra.map_domain_one` and `add_monoid_algebra.map_domain_one`.

2022-04-18 20:47:04 37d02d3
chore(ring_theory/hahn_series, topology/locally_constant/algebra): add missing `non_unital_non_assoc_ring` instances (#13504)

2022-04-18 19:11:39 3c20253
chore(algebra/ring/{pi, prod}): fix errors in `ring_hom` for `pi` and `prod`. (#13501)
Looks like some things were incorrectly changed when copied from the corresponding `monoid_hom` files.

2022-04-18 19:11:38 b54591f
chore(analysis/normed_space/finite_dimension): golf a proof (#13491)
These `letI`s just made this proof convoluted, the instances were not needed.
Without them, we don't even need the import.
Similarly, the `classical` was the cause of the need for the `congr`.

2022-04-18 19:11:37 fd08afe
chore(data/nat/factorization): golf `dvd_iff_prime_pow_dvd_dvd` (#13473)
Golfing the edge-case proof added in https://github.com/leanprover-community/mathlib/pull/13316

2022-04-18 17:14:07 d89160b
feat(order/bounded_order): Strictly monotone functions preserve maximality (#13434)
Prove `f a = f ⊤ ↔ a = ⊤` and `f a = f ⊥ ↔ a = ⊥` for strictly monotone/antitone functions. Also fix `is_max.eq_top` and friends and delete `eq_top_of_maximal` (which accidentally survived the last refactor).

2022-04-18 17:14:06 5c75390
feat(data/real/ennreal): Order properties of addition (#13371)
Inherit algebraic order lemmas from `with_top`. Also protect `ennreal.add_lt_add_iff_left` and `ennreal.add_lt_add_iff_right`, as they should have been.

2022-04-18 17:14:05 546618e
feat(order/upper_lower): Principal upper/lower sets (#13069)
Define `upper_set.Ici` and `lower_set.Iic`. Also add membership lemmas for the lattice operations.

2022-04-18 15:45:35 d790b4b
feat(set_theory/cardinal): `lt_omega_of_fintype` (#13365)

2022-04-18 10:31:05 e18ea79
feat(number_theory/legendre_symbol/quadratic_reciprocity): replace `[fact (p % 2 = 1)]` arguments by `(p ≠ 2)` (#13474)
This removes implicit arguments of the form `[fact (p % 2 = 1)]` and replaces them by explicit arguments `(hp : p ≠ 2)`.
(See the short discussion on April 9 in [this topic](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A).)

2022-04-18 05:37:15 82348a6
feat(computability/partrec_code): add eval prec helpers (#11945)
A few helpers to clarify the definition of `eval`.

2022-04-18 03:41:36 279b7f3
chore(scripts): update nolints.txt (#13493)
I am happy to remove some nolints for you!

2022-04-17 15:18:45 e6322c6
feat(analysis/convex): golf some proofs (#13451)

2022-04-17 15:18:44 b90e770
feat(data/fin/tuple/nat_antidiagonal): add `list.nat.antidiagonal_tuple_pairwise_pi_lex` (#13339)
This proof feels a little clumsy, but maybe that's unavoidable.

2022-04-17 13:47:06 9380977
chore(algebra/big_operators/fin): moving lemmas (#13331)
This PR moves lemmas about products and sums over `fin n` from `data/fintype/card.lean` to `algebra/big_operators/fin.lean`.

2022-04-17 12:41:22 7c7f351
feat(topology/[separation, homeomorph]): separation properties are topological invariants (#13401)

2022-04-17 10:27:47 49e41eb
feat(topology/algebra/order): extreme value thm for a function continuous on a closed set (#13348)

2022-04-17 03:57:45 f4f46cd
chore(scripts): update nolints.txt (#13482)
I am happy to remove some nolints for you!

2022-04-16 19:28:42 d4fda04
feat(data/finsupp/basic): add a few lemmas, mostly about `finsupp.filter` (#13457)

2022-04-16 17:33:14 96667b5
chore(number_theory/*): Weaken assumptions (#13443)
Follow @alexjbest's generalization linter to weaken typeclass assumptions in number theory.

2022-04-16 17:33:13 018e9b5
chore(order/bounded_order): Match the `with_bot` and `with_top` API (#13419)
The API for `with_top` and the API for `with_bot` somehow evolved independently from each other, which created frustating disparity in lemmas and argument implicitness. This synchronizes everything (including the layout), generalize a few lemmas from `preorder`/`partial_order` to `has_le`/`has_lt`, and removes the duplicated `is_total (with_bot α) (≤)`/`is_total (with_top α) (≤)` instances.

2022-04-16 17:33:12 8decd4b
chore(logic/encodable/basic): Rename `encodable` instances (#13396)
The instances were called `encodable.foo` instead of `foo.encodable` as the naming convention preconizes.

2022-04-16 17:33:11 91a43e7
feat(algebra/order/monoid): Co/contravariant classes for `with_bot`/`with_top` (#13369)
Add the `covariant_class (with_bot α) (with_bot α) (+) (≤)` and `contravariant_class (with_bot α) (with_bot α) (+) (<)` instances, as well as the lemmas that `covariant_class (with_bot α) (with_bot α) (+) (<)` and `contravariant_class (with_bot α) (with_bot α) (+) (≤)` almost hold.
On the way, match the APIs for `with_bot`/`with_top` by adding missing lemmas.

2022-04-16 16:18:59 874dde5
feat(data/polynomial/eval): generalize smul lemmas (#13479)

2022-04-16 14:27:42 010f09e
feat(data/polynomial/taylor): add `taylor_alg_hom` (#13477)

2022-04-16 12:38:45 f7430cd
feat(data/polynomial/eval): add `protected` on some lemmas about `polynomial.map` (#13478)
These clash with global lemmas.

2022-04-16 05:39:36 862a585
feat(topology/stone_cech): add stone_cech_hom_ext (#13472)
The universal property that characterises the Stone–Čech compactification of a topological space X is that any function from X to a compact Hausdorff space extends uniquely to a continuous function on βX. Existence is already provided by `unique_stone_cech_extend`, but it seems that the uniqueness lemma was intentionally omitted previously. Easy, but probably worth being explicit about.

2022-04-15 20:29:48 449e06a
feat(algebraic_topology/fundamental_groupoid/fundamental_group): add type checker helpers for convertings paths to/from elements of fundamental group (#13182)
This pr adds the following helper functions for converting paths to and from elements of the fundamental group:
- `to_arrow`: converts element of the fundamental group to an arrow in the fundamental groupoid
- `to_path`: converts element of the fundamental group to a (quotient of homotopic) path in the space
- `from_arrow`: constructs an element of the fundamental group from a self-arrow in the fundamental groupoid
- `from_path`: constructs an element of the fundamental group from a (quotient of homotopic) path in the space
These parallel  the similarly named functions for the fundamental group [here](https://github.com/leanprover-community/mathlib/blob/743ed5d1dd54fffd65e3a7f3522e4a4e85472964/src/algebraic_topology/fundamental_groupoid/basic.lean#L339-L355). They will prove helpful in doing computations with the fundamental group later e.g. for the disk, circle, etc.

2022-04-15 17:50:17 c988c62
chore(number_theory/function_field): fix typo (#13464)

2022-04-15 17:50:16 fbff76b
refactor(number_theory/legendre_symbol/): move Gauss/Eisenstein lemma code to separate file (#13449)
In preparation of further changes to number_theory/legendre_symbol/quadratic_reciprocity, this takes most of the code dealing with the lemmas of Gauss and Eisenstein out of quadratic_reciprocity.lean into a new file gauss_eisenstein_lemmas.lean.
Since I am not planning to do much (if anything) to this part of the code and it is rather involved and slows down Lean when I'm editing quadratic_reciprocity.lean, it makes sense to separate this code from the remainder of the file.

2022-04-15 17:09:01 0c2d68a
feat(data/sym/sym2): mem_map/mem_congr/map_id' (#13437)
Additional simplification lemmas, one to address non-simp-normal-form. (Also did a few proof simplifications.)

2022-04-15 15:03:07 d6c1cf1
feat(analysis/normed_space/pointwise): Balls disjointness (#13379)
Two balls in a real normed space are disjoint iff the sum of their radii is less than the distance between their centers.

2022-04-15 15:03:06 2194eef
chore(ring_theory/ideal/local_ring): generalize to semirings (#13341)

2022-04-15 15:03:05 c65bebb
feat(number_theory/padics/padic_numbers): add padic.add_valuation (#12939)
We define the p-adic additive valuation on `Q_[p]`, as an `add_valuation` with values in `with_top Z`.

2022-04-15 13:10:57 bbbea1c
chore(*): clean up unnecessary uses of nat.cases_on (#13454)

2022-04-15 11:12:38 ebc8b44
feat(analysis/normed_space/basic): `pi` and `prod` are `normed_algebra`s (#13442)
Note that over an empty index type, `pi` is not a normed_algebra since it is trivial as a ring.

2022-04-15 10:39:09 d13f291
feat(group_theory/group_action/conj_act): conjugation by the units of a monoid (#13439)
I suspect we can make this even more general in future by introducing a compatibility typeclass, but this is good enough for me for now.
This also adds a stronger typeclass for the existing action of `conj_act K` where `K` is a `division_ring`.

2022-04-15 09:02:46 dd51529
feat(combinatorics/simple_graph/subgraph): delete_edges (#13306)
Construct a subgraph from another by deleting edges.

2022-04-15 04:32:08 d6a46b7
chore(scripts): update nolints.txt (#13455)
I am happy to remove some nolints for you!

2022-04-15 03:41:29 6a5764b
chore(analysis/normed_space/multilinear): use notation (#13452)
* use notation `A [×n]→L[𝕜] B`;
* use `A → B` instead of `Π x : A, B`.

2022-04-15 02:47:13 d81cedb
feat(topology/algebra/module/multilinear): relax requirements for `continuous_multilinear_map.mk_pi_algebra` (#13426)
`continuous_multilinear_map.mk_pi_algebra` and `continuous_multilinear_map.mk_pi_algebra_fin` do not need a norm on either the algebra or base ring; all they need is a topology on the algebra compatible with multiplication.
The much weaker typeclasses cause some elaboration issues in a few places, as the normed space can no longer be found by unification. Adding a non-dependent version of `continuous_multilinear_map.has_op_norm` largely resolves this, although a few  API proofs about `mk_pi_algebra` and `mk_pi_algebra_fin` end up quite underscore heavy.
This is the first step in being able to define `exp` without first choosing a `norm`.

2022-04-14 20:31:11 1506335
chore(number_theory/zsqrtd/*): Missing docstrings and cleanups (#13445)
Add docstrings to `gaussian_int` and `zsqrtd.norm` and inline definitions which did not have a docstring nor deserved one.

2022-04-14 17:32:49 cbf3062
feat(combinatorics/simple_graph/connectivity): define connected components (#12766)

2022-04-14 15:31:41 251bd84
feat(group_theory/subgroup/basic): One more `mem_normalizer_iff` lemma (#13395)
This PR golfs `mem_normalizer_iff'` and adds `mem_normalizer_iff''`. There are not so easy to deduce from each other, so it's nice to have these variations available.

2022-04-14 15:31:40 8bbc5ac
feat(combinatorics/additive/salem_spencer): Salem-Spencer sets under images (#13279)
A set `s` is Salem-Spencer iff its image under an injective Freiman hom is.

2022-04-14 14:09:05 fecdd4b
feat(measure_theory/card_measurable_space): `generate_measurable_rec s` gives precisely the generated sigma-algebra (#12462)

2022-04-14 13:04:58 adfe9c7
feat(topology/algebra/order/compact): Sup is continuous (#13347)
* Prove that the `Sup` of a binary function over a compact set is continuous in the second variable
* Some other lemmas about `Sup`
* Move and generalize `is_compact.bdd_[above|below]_image`
* from the sphere eversion project

2022-04-14 11:12:39 936eb7e
feat(analysis/normed_space/finite_dimension): a finite dimensional affine subspace is closed (#13440)

2022-04-14 11:12:38 9631a91
feat(ring_theory/multiplicity): int.nat_abs (#13420)
Spinning off of #12454

2022-04-14 11:12:37 88ba31c
feat(measure_theory/constructions/pi): more `measure_preserving` lemmas (#13404)
* Reformulate `map_pi_equiv_pi_subtype_prod` in terms of
  `measure_preserving`.
* Add more equivalences (bare equivalences, order isomorphisms, and
  measurable equivalences) on pi types.

2022-04-14 11:12:36 dd34ffa
refactor(group_theory/schur_zassenhaus): Golf using `is_complement'_stabilizer` (#13392)
This PR golfs the proof of the abelian case of Schur-Zassenhaus using the new lemma `is_complement'_stabilizer`.

2022-04-14 11:12:35 15b764d
feat(group_theory/complement): Add more API for the action on left transversals (#13363)
This PR adds more API for the action on left transversals.

2022-04-14 11:12:34 769ec8c
feat(group_theory/group_action/basic): Right multiplication satisfies the `quotient_action` axiom (#13362)
This PR adds an instance stating that the right multiplication action of `H.normalizer.opposite` on `G` satisfies the `quotient_action` axiom. In particular, we automatically get the induced action of `H.normalizer.opposite` on `G ⧸ H`, so we can delete the existing instance. (Technically, the existing instance was stated in terms of `H.normalizerᵐᵒᵖ`, but I think `H.normalizer.opposite` is a more natural way to write it).

2022-04-14 11:12:33 3676f11
chore(order/complete_lattice): General cleanup (#13323)

2022-04-14 11:12:32 7bb1081
feat(category_theory): turn a split mono with cokernel into a biproduct (#13184)

2022-04-14 10:16:39 2693ab5
feat(number_theory/legendre_symbol): add directory legendre_symbol and move quadratic_reciprocity.lean into it (#13441)
In preparation of adding more code in a structured way, this sets up a new directory `legendre_symbol` below `number_theory` and moves the file `quadratic_reciprocity.lean` there.
The imports in `src/number_theory/zsqrtd/gaussian_int.lean` and `archive/imo/imp2008_q3.lean` are changed accordingly.

2022-04-14 10:16:38 eb2780b
feat(topology/unit_interval): add lemmas (#13344)
* also change the statement of `unit_interval.mul_mem`
* from the sphere eversion project

2022-04-14 08:29:02 87f8076
chore(data/nat/factorial): tidy (#13436)
I noticed this file had non-terminal simps, so I tidied it a little whilst removing them.

2022-04-14 08:29:00 dac4f18
feat(data/mv_polynomial): add support_X_pow (#13435)
A simple lemma to match the `polynomial` API
from flt-regular

2022-04-14 08:28:58 1378eab
feat(complex/roots_of_unity):  extensionality (#13431)
Primitive roots are equal iff their arguments are equal. Adds some useful specialisations, too.

2022-04-14 06:30:11 2249a24
chore(*): suggestions from the generalisation linter (#13092)
Prompted by zulip discussion at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/An.20example.20of.20why.20formalization.20is.20useful
These are the "reasonable" suggestions from @alexjbest's generalisation linter up to `algebra.group.basic`.

2022-04-14 03:43:29 a565471
chore(scripts): update nolints.txt (#13438)
I am happy to remove some nolints for you!

2022-04-14 02:07:07 b62626e
feat(complex/arg): arg_eq_zero_iff (#13432)

2022-04-13 23:29:58 0765994
chore(order/category/Preorder): reduce imports (#13301)
Because `punit_instances` comes at the very end of the algebraic import hierarchy, we were requiring the entire algebraic hierarchy before we could begin compiling the theory of categorical limits.
This tweak substantially reduces the import dependencies.

2022-04-13 22:15:36 6f401ac
feat(data/polynomial/*): suggestions from the generalization linter (#13342)

2022-04-13 18:43:15 76c969b
chore(algebra/polynomial/big_operators): drop some nontrivial assumptions (#13428)

2022-04-13 17:31:46 da13598
feat(model_theory/encoding): Bundled encoding of terms (#13226)
Bundles `term.list_encode` and `term.list_decode` into a `computability.encoding`

2022-04-13 16:27:43 9913860
feat(ring_theory/tensor_product): add assoc for tensor product as an algebra homomorphism (#13309)
By speeding up a commented out def, this goes from from ~100s to ~7s on my machine .

2022-04-13 10:56:42 0c3f75b
feat(analysis/normed_space/basic): normed division algebras over ℝ are also normed algebras over ℚ (#13384)
This results shows that `algebra_rat` respects the norm in ` ℝ`-algebras that respect the norm.
The new instance carries no new data, as the norm and algebra structure are already defined elsewhere.
Probably there is a weaker requirement for compatibility, but I have no idea what it is, and the weakening can come later.

2022-04-13 10:56:41 50ff59a
feat(model_theory/skolem, satisfiability): A weak Downward Loewenheim Skolem (#13141)
Defines a language and structure with built-in Skolem functions for a particular language
Proves a weak form of Downward Loewenheim Skolem: every structure has a small (in the universe sense) elementary substructure
Shows that `T` having a model in any universe implies `T.is_satisfiable`.

2022-04-13 10:56:40 647aa5b
feat(model_theory/fraisse): Defines ultrahomogeneous structures, fixes Fraïssé limit definition (#12994)
Defines ultrahomogeneous structures
Fixes the definition of a Fraïssé limit to require ultrahomogeneity
Completes the characterization of when a class is the age of a countable structure.

2022-04-13 08:59:52 6f59d77
feat(order/bounded_order): Basic API for `subtype.order_bot` and  `subtype.order_top` (#12904)
A few `simp` lemmas that were needed for `subtype.order_bot` and  `subtype.order_top`.

2022-04-13 07:30:42 5b8bb9b
feat(category_theory/monoidal): define monoidal structure on the category of monoids in a braided monoidal category (#13122)
Building on the preliminary work from the previous PRs, we finally show that monoids in a braided monoidal category form a monoidal category.

2022-04-13 04:14:04 1de6ce9
chore(scripts): update nolints.txt (#13408)
I am happy to remove some nolints for you!

2022-04-13 04:14:03 b0bd771
fix(combinatorics/simple_graph/connectivity): correctly generalized variables (#13405)

2022-04-13 04:14:02 917fc96
refactor(set_theory/cofinality): Normalize names (#13400)
We rename lemmas of the form `is_regular (foo x)` to `is_regular_foo` instead of `foo_is_regular`.

2022-04-13 02:38:14 ac7a356
chore(set_theory/*): Fix lint (#13399)
Add missing docstrings and `inhabited` instances or a `nolint` when an `inhabited` instance isn't reasonable.

2022-04-13 02:38:13 8c9ee31
feat(order/conditionally_complete_lattice): Add `le_cSup_iff` (#13321)

2022-04-13 00:37:31 fb94880
refactor(category_theory/shift): tighten scope of local attribute [reducible] (#13335)
In all the files dealing with shifts on categories, we have a sprinkling of `local attribute [reducible]`, without which we get somewhat mysterious errors.
However with them, we produce some very fragile proof states (recently I was upset to see that shifting by `(0 : A)` and shifting by the tensor unit in `discrete A` were not definitionally commuting...).
I've been attempting to refactor this part of the library so we just never need to use `local attribute [reducible]`, in the hope of making these problems go away.
Having failed so far, this PR simply tightens the scopes of these local attributes as narrowly as possible (or in cases removes them entirely), so it is clearer exactly what is relying on them to work.

2022-04-12 23:52:20 f496ef4
feat(computability/{language/regular_expressions): Map along a function (#13197)
Define `language.map` and `regular_expression.map`.

2022-04-12 23:00:49 7ece83e
feat(topology/homotopy): Add definition of contractible spaces (#12731)

2022-04-12 22:12:37 94a52c4
feat(category_theory/monoidal): prove that in a braided monoidal category unitors and associators are monoidal natural transformations (#13121)
This PR contains proofs of lemmas that are used in the stacked PR to define a monoidal structure on the category of monoids in a braided monoidal category.  The lemmas can be summarised by saying that in a braided monoidal category unitors and associators are monoidal natural transformations.
Note that for these statements to make sense we would need to define monoidal functors that are sources and targets of these monoidal natural transformations.  For example, the morphisms `(α_ X Y Z).hom` are the components of a monoidal natural transformation
```
(tensor.prod (𝟭 C)) ⊗⋙ tensor  ⟶ Α_ ⊗⋙ ((𝟭 C).prod tensor) ⊗⋙ tensor
```
where `Α_ : monoidal_functor ((C × C) × C) (C × (C × C))` is the associator functor given by `λ X, (X.1.1, (X.1.2, X.2))` on objects.  I didn't define the functor `Α_`.  (The easiest way would be to build it up using `prod'` we have already defined from `fst` and `snd`, which we would need to define as monoidal functors.)  Instead, I stated and proved the commutative diagram that expresses the monoidality of the above transformation.  Ditto for unitors.  Please let me know if you'd like me to define all the required functors and monoidal natural transformations.  The monoidal natural transformations themselves are not used in the proof that the category of monoids in a braided monoidal category is monoidal and only provide meaningful names to the lemmas that are used in the proof.

2022-04-12 20:53:45 78ea75a
feat(order/filter/cofinite): add lemmas, golf (#13394)
* add `filter.comap_le_cofinite`,
  `function.injective.comap_cofinite_eq`, and
  `filter.has_basis.coprod`;
* rename `at_top_le_cofinite` to `filter.at_top_le_cofinite`;
* golf `filter.coprod_cofinite` and `filter.Coprod_cofinite`, move
  them below `filter.comap_cofinite_le`;

2022-04-12 20:08:54 da4ec7e
feat(ring_theory/valuation/valuation_subring): Valuation subrings of a field (#12741)

2022-04-12 18:28:33 e72f275
feat(number_theory/qudratic_reciprocity): change type of `a` in API lemmas to `int` (#13393)
This is step 2 in the overhaul of number_theory/qudratic_reciprocity.
The only changes are that the argument `a` is now of type `int` rather than `nat` in a bunch of statements.
This is more natural, since the corresponding (now second) argument of `legendre_symnbol` is of type `int`; it therefore makes the API lemmas more easily useable.

2022-04-12 18:28:32 3bbb847
chore(*): remove instance arguments that are inferrable from earlier (#13386)
Some lemmas have typeclass arguments that are in fact inferrable from the earlier ones, at least when everything is Prop valued this is unecessary so we clean up a few cases as they likely stem from typos or library changes. 
- `src/field_theory/finiteness.lean` it wasn't known at the time (#7644) that a division ring was noetherian, but now it is (#7661)
- `src/category_theory/simple.lean` any abelian category has all cokernels so no need to assume it seperately
- `src/analysis/convex/extreme.lean` assumed `linear_ordered_field` and `no_smul_zero_divisors` which is unnecessary, we take this as a sign that this and a couple of other convexity results should be generalized to densely ordered linear ordered rings (of which there are examples that are not fields) cc @YaelDillies

2022-04-12 18:28:30 116ac71
feat(analysis/normed_space/exponential): exponentials of negations, scalar actions, and sums (#13036)
The new lemmas are:
* `exp_invertible_of_mem_ball`
* `exp_invertible`
* `is_unit_exp_of_mem_ball`
* `is_unit_exp`
* `ring.inverse_exp`
* `exp_neg_of_mem_ball`
* `exp_neg`
* `exp_sum_of_commute`
* `exp_sum`
* `exp_nsmul`
* `exp_zsmul`
I don't know enough about the radius of convergence of `exp` to know if `exp_nsmul` holds more generally under extra conditions.

2022-04-12 17:21:31 949021d
feat(ring_theory/algebraic): Rational numbers are algebraic (#13367)

2022-04-12 17:21:10 c994ab3
feat(category_theory/monoidal): define a monoidal structure on the tensor product functor of a braided monoidal category (#13150)
Given a braided monoidal category `C`, equip its tensor product functor, viewed as a functor from `C × C` to `C` with a strength that turns it into a monoidal functor.
See #13033 for a discussion of the motivation of this definition.
(This PR replaces #13034 which was accidentally closed.)

2022-04-12 15:33:18 4c0a274
doc(model_theory/order): typo in docstrings (#13390)

2022-04-12 15:33:16 0c8b808
fix(measure_theory/function/lp_space): fix an instance diamond in `measure_theory.Lp.has_edist` (#13388)
This also changes the definition of `edist` to something definitionally nicer

2022-04-12 15:33:15 c21561a
feat(algebra/direct_sum): Reindexing direct sums (#13076)
Lemmas to reindex direct sums, as well as to rewrite direct sums over an option or sigma type.

2022-04-12 13:28:12 745099b
chore(*/parity): Generalize lemmas and clarify names  (#13268)
Generalizations

2022-04-12 12:36:48 4b45a71
feat(counterexamples/pseudoelement): add counterexample to uniqueness in category_theory.abelian.pseudoelement.pseudo_pullback (#13387)
Borceux claims that the pseudoelement constructed in `category_theory.abelian.pseudoelement.pseudo_pullback` is unique. We show here that this claim is false.

2022-04-12 12:36:47 73ec5b2
chore(category_theory/closed/monoidal): correct error in doc string (#13385)
Sorry, should have done this immediately when @b-mehta pointed out my mistake.

2022-04-12 12:36:46 ef8e256
feat(number_theory/cyclotomic): alg-closed fields are cyclotomic extensions over themselves (#13366)

2022-04-12 11:56:25 5534e24
chore(category_theory/preadditive/biproducts): Speed up `biprod.column_nonzero_of_iso` (#13383)
From 76s down to 2s. The decidability synthesis in `by_contradiction` is stupidly expensive.

2022-04-12 11:56:24 4bcc532
refactor(control/fold): don't use is_monoid_hom (#13350)

2022-04-12 10:40:32 8b27c45
feat(order/filter/pointwise): Missing pointwise operations (#13170)
Define inversion/negation, division/subtraction, scalar multiplication/addition, scaling/translation, scalar subtraction of filters using the new `filter.map₂`. Golf the existing API.

2022-04-12 08:46:24 9984960
fix(counterexamples): typo in module docstring (#13378)

2022-04-12 08:46:23 36bafae
feat(topology/bornology/basic): review (#13374)
* add lemmas;
* upgrade some implications to `iff`s.

2022-04-12 08:46:23 d065fd4
feat(ring_theory/ideal): generalize `x mod I ∈ J mod I ↔ x ∈ J` (#13358)
We already had a lemma like this assuming `I ≤ J`, and we can drop the assumption if we instead change the RHS to `x ∈ J \sup I`.
This also golfs the proof of the original `mem_quotient_iff_mem`.

2022-04-12 08:46:22 c883519
feat(ring_theory/unique_factorization_domain): `factors x = normalized_factors x` (#13356)
If the group of units is trivial, an arbitrary choice of factors is exactly the unique set of normalized factors.
I made this a `simp` lemma in this direction because `normalized_factors` has a stronger specification than `factors`. I believe currently we actually know less about `normalized_factors` than `factors`, so if it proves too inconvenient I can also remove the `@[simp]`.

2022-04-12 08:46:20 85588f8
feat(data/multiset): lemmas on intersecting a multiset with `repeat x n` (#13355)
Intersecting a multiset `s` with `repeat x n` gives `repeat x (min n (s.count x))`.

2022-04-12 08:46:19 f7fe7dd
refactor(ring_theory/free_comm_ring): don't use is_ring_hom (#13352)

2022-04-12 08:46:19 fd53ce0
feat(order/filter/at_top_bot): add more `disjoint` lemmas (#13351)

2022-04-12 08:46:18 708e2de
chore(group_theory/free_abelian_group): remove is_add_monoid_hom (#13349)

2022-04-12 08:46:17 333e4be
feat(algebra/group/basic|topology/connected): add two lemmas (#13345)
* from the sphere eversion project

2022-04-12 08:46:16 56d6399
chore(set_theory/cardinal): Golf `mk_le_mk_mul_of_mk_preimage_le` (#13329)

2022-04-12 08:46:15 670735f
feat(model_theory/order): The theory of dense linear orders without endpoints (#13253)
Defines the theory of dense linear orders without endpoints

2022-04-12 08:46:14 34853a9
feat(topology/algebra/algebra): define the topological subalgebra generated by an element (#13093)
This defines the topological subalgebra generated by a single element `x : A` of an algebra `A` as the topological closure of `algebra.adjoin R {x}`, and show it is commutative.
I called it `algebra.elemental_algebra`; if someone knows if this actually has a name in the literature, or just has a better idea for the name, let me know!

2022-04-12 08:46:12 ed919b6
feat(algebra/algebraic_card): Cardinality of algebraic numbers (#12869)
We prove the following result: the cardinality of algebraic numbers under an R-algebra is at most `# polynomial R * ω`.

2022-04-12 08:46:11 6bc2bd6
feat(algebraic_geometry/projective_spectrum): Proj as a locally ringed space (#12773)
This pr is about proving that Proj with its structure sheaf is a locally ringed space

2022-04-12 08:46:10 72e1a9e
feat(ring_theory/valuation/valuation_ring): Valuation rings and their associated valuation. (#12719)
This PR defines a class `valuation_ring`, stating that an integral domain is a valuation ring.
We also show that valuation rings induce valuations on their fraction fields, that valuation rings are local, and that their lattice of ideals is totally ordered.

2022-04-12 07:55:03 b889567
feat(data/complex/basic): add a few lemmas (#13354)

2022-04-12 05:57:50 0783742
chore(*): more assumptions to lemmas that are removable (#13364)
This time I look at assumptions that are actually provable by simp from the earlier assumptions (fortunately there are only a couple of these), and one more from the review of #13316 that was slightly too nontrivial to be found automatically.

2022-04-12 05:57:49 56f6c8e
chore(algebra/big_operators/intervals): Move and golf sum_range_sub_sum_range (#13359)
Move sum_range_sub_sum_range to a better file. Also implemented the golf demonstrated in this paper https://arxiv.org/pdf/2202.01344.pdf from @spolu.

2022-04-12 05:57:48 603db27
feat(topology/metric_space/basic): some lemmas about dist (#13343)
from the sphere eversion project

2022-04-12 05:24:39 cbea7e1
feat(algebra/order/monoid_lemmas_zero_lt): add some lemmas assuming `mul_one_class` `preorder` (#13299)

2022-04-12 05:24:38 e3db2e7
feat(group_theory/complement): Criterion for complementary subgroups (#13292)
This lemma gives a criterion for a stabilizer subgroup to be a complementary subgroup.

2022-04-12 03:21:18 fdd68d9
fix(category_theory/elements): speed up `groupoid_of_elements` (#13372)
from 14.5s to 6s
It's [reported](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/278592167) that this is causing timeouts in recent bors batches.

2022-04-12 03:21:17 bf1b813
chore(algebra/module/basic): generalize to add_monoid_hom_class (#13346)
I need some of these lemmas for `ring_hom`.
Additionally, this:
* removes `map_nat_module_smul` (duplicate of `map_nsmul`) and `map_int_module_smul` (duplicate of `map_zsmul`)
* renames `map_rat_module_smul` to `map_rat_smul` for brevity.
* adds the lemmas `inv_nat_cast_smul_comm` and `inv_int_cast_smul_comm`.
* Swaps the order of the arguments to `map_zsmul` and `map_nsmul` to align with the usual rules (`to_additive` emitted them in the wrong order)

2022-04-12 03:21:16 955cb8e
feat(data/list/basic): add a theorem about last and append (#13336)
When `ys` is not empty, we can conclude that `last (xs ++ ys)` is `last ys`.

2022-04-12 03:21:15 10a3faa
feat(algebra/order/monoid_lemmas_zero_lt): add lemmas assuming `mul_zero_class` `preorder` (#13297)

2022-04-12 03:21:14 fe1c78a
feat(data/polynomial/algebra_map): remove some lemmas about `aeval`, add `protected` on `polynomial.map_list_prod` (#13294)
Remove `aeval_sum` which is a duplicate of `map_sum`.
Remove `aeval_prod` which is a duplicate of `map_prod`.

2022-04-12 03:21:13 483b7df
feat(analysis/convex/strict_convex_space): Ray characterization of `∥x - y∥` (#13293)
`∥x - y∥ = |∥x∥ - ∥y∥|` if and only if `x` and `y` are on the same ray.

2022-04-12 03:21:12 f1c98ba
feat(topology/uniform_space/uniform_convergence_topology): define the uniform structure of uniform convergence (#13073)

2022-04-12 01:13:15 7ba9c3f
feat(order/basic): More order instances for `subtype` (#13134)
Add the `has_le`, `has_lt`, `decidable_le`, `decidable_lt`, `bounded_order` instances.
Incorporating the `decidable_le` and `decidable_lt` instances into the `linear_order` one breaks some defeqs with `ite`/`dite`.

2022-04-11 23:09:24 0453d60
feat(algebraic_geometry/projective_spectrum): structure sheaf of Proj of graded ring (#13072)
Construct the structure sheaf of Proj of a graded algebra.

2022-04-11 23:09:23 f94cd0f
feat(analysis/normed/normed_field): Pi types form a normed ring (#12912)

2022-04-11 20:58:27 887f933
feat(data/fin/tuple/nat_antidiagonal): add an equiv and some TODO comments. (#13338)
This follows on from #13031, and:
* Adds the tuple version of an antidiagonal equiv
* Makes some arguments implicit
* Adds some comments to tie together `finset.nat.antidiagonal_tuple` with the `cut` definition used in one of the 100 Freek problems.

2022-04-11 20:58:26 455bc65
chore(representation_theory/invariants): clean up some simps (#13337)

2022-04-11 20:58:25 e8339bd
feat(category_theory/fully_faithful): nat_trans_of_comp_fully_faithful (#13327)
I added `nat_iso_of_comp_fully_faithful` in an earlier PR, but left out the more basic construction.

2022-04-11 20:58:24 4a07054
chore(*): remove numerous edge cases from lemmas (#13316)
This PR uses the same methodology as #10774 to use a linter to remove edge case assumptions from lemmas when the result is easy to prove without the assumption.
These are assumptions things like: n \ne 0, 0 < n, p \ne \top, nontrivial R, nonempty R.
Removing these unneeded assumptions makes such lemmas easier to apply, and lets us golf a few other proofs along the way.
The file with the most changes is `src/ring_theory/unique_factorization_domain.lean` where the linter inspired me to allow trivial monoids in many places.
The code I used to find these is in the branch [https://github.com/leanprover-community/mathlib/tree/alexjbest/simple_edge_cases_linter](https://github.com/leanprover-community/mathlib/tree/alexjbest/simple_edge_cases_linter?rgh-link-date=2021-12-13T23%3A53%3A31Z)

2022-04-11 20:58:23 a839f4d
feat(number_theory/quadratic_reciprocity): change order of arguments … (#13311)
…in legendre_sym
This is the first step in a major overhaul of the contents of number_theory/quadratic_reciprocity.
As a first step, the order of the arguments `a` and `p` to `legendre_sym` is swapped, based on a [poll](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A) on Zulip.

2022-04-11 20:58:22 4e1102a
feat(probability/integration): characterize indep_fun by expected product of comp (#13270)
This is the third PR into probability/integration, to characterize independence by the expected product of compositions.

2022-04-11 18:49:41 a521a32
feat(data/set/basic): Missing `set.image_perm` (#13242)

2022-04-11 18:49:39 dee4958
feat(computability/*): Automata lemmas (#13194)
A bunch of missing API for `language`, `regular_expression`, `DFA`, `NFA`, `ε_NFA`.

2022-04-11 18:49:38 77ae091
feat(number_theory/cyclotomic/primitive_roots): add `pow_sub_one_norm_prime_pow_ne_two` (#13152)
We add `pow_sub_one_norm_prime_pow_ne_two`, that computes the norm of `ζ ^ (p ^ s) - 1`, where `ζ` is a primitive `p ^ (k + 1)`-th root of unity. This will be used to compute the discriminant of the `p ^ n`-th cyclotomic field.
From flt-regular

2022-04-11 18:49:37 04250c8
feat(measure_theory/measure/haar): Add the Steinhaus Theorem (#12932)
This PR proves the [Steinhaus Theorem](https://en.wikipedia.org/wiki/Steinhaus_theorem) in any locally compact group with a Haar measure.

2022-04-11 18:49:35 cea5e4b
feat(data/sign): the sign function (#12835)

2022-04-11 16:38:59 695a2b6
feat(combinatorics/simple_graph/connectivity): induced maps on walks and paths (#13310)
Every graph homomorphism gives an induced map on walks.

2022-04-11 16:38:58 a447dae
chore(category_theory/*): reduce imports (#13305)
An unnecessary import of `tactic.monotonicity` earlier in the hierarchy was pulling in quite a lot. A few compensatory imports are needed later.

2022-04-11 16:38:57 5e8d6bb
feat(combinatorics/simple_graph/{connectivity,adj_matrix}): powers of adjacency matrix (#13304)
The number of walks of length-n between two vertices is given by the corresponding entry of the n-th power of the adjacency matrix.

2022-04-11 16:38:56 bfd5384
chore(category_theory): switch ulift and filtered in import hierarchy (#13302)
Many files require `ulift` but not `filtered`, so `ulift` should be lower in the import hierarchy. This avoids needing all of `data/` up to `data/fintype/basic` before we can start defining categorical limits.

2022-04-11 16:38:55 dcb6c86
feat(measure_theory/function/uniform_integrable): Equivalent condition for uniformly integrable in the probability sense (#12955)
A sequence of functions is uniformly integrable in the probability sense if and only if `∀ ε : ℝ, 0 < ε → ∃ C : ℝ≥0, ∀ i, snorm ({x | C ≤ ∥f i x∥₊}.indicator (f i)) p μ ≤ ennreal.of_real ε`.

2022-04-11 16:38:54 797c713
feat(ring_theory/coprime/lemmas): alternative characterisations of pairwise coprimeness (#12911)
This provides two condtions equivalent to pairwise coprimeness : 
* each term is coprime to the product of all others
* 1 can be obtained as a linear combination of all products with one term missing.

2022-04-11 14:08:55 67d6097
feat(data/option/basic): add `option.coe_get` (#13081)
Adds lemma `coe_get {o : option α} (h : o.is_some) : ((option.get h : α) : option α) = o`
Extracted from @huynhtrankhanh's https://github.com/leanprover-community/mathlib/pull/11162, moved here to a separate PR

2022-04-11 11:52:38 4139824
refactor(category_theory/differential_object): simp only -> simp_rw (#13333)
This is extremely minor; I replace a `simp only` with a `simp_rw`.
This proof is apparently rather fragile with respect to some other changes I'm trying to make, and I worked out the correct `simp_rw` sequence while debugging. May as well preserve it for posterity, or at least until next time I make it break.

2022-04-11 11:52:37 c7e76bc
chore(category_theory/monoidal/discrete): typo in to_additive name (#13332)

2022-04-11 11:52:36 d405955
feat(analysis/complex/re_im_topology): add `metric.bounded.re_prod_im` (#13324)
Also add `complex.mem_re_prod_im`.

2022-04-11 11:52:34 ebbe763
feat(measure_theory/constructions/borel_space): a set with `μ (∂ s) = 0` is null measurable (#13322)

2022-04-11 11:52:33 7e69148
feat(order/conditionally_complete_lattice): Make `cSup_empty` a `simp` lemma (#13318)

2022-04-11 11:52:32 159855d
feat(set_theory/ordinal_arithmetic): `is_normal.monotone` (#13314)
We introduce a convenient abbreviation for `is_normal.strict_mono.monotone`.

2022-04-11 11:52:31 c5b83f0
doc(combinatorics/simple_graph/basic): mention half-edge synonym for darts (#13312)

2022-04-11 11:52:30 722c0df
feat(category_theory/nat_iso): add simp lemmas (#13303)

2022-04-11 11:52:29 f7e862f
feat(analysis/special_functions/pow): `z ^ w` is continuous in `(z, w)` at `(0, w)` if `0 < re w` (#13288)
Also add a few supporting lemmas.

2022-04-11 11:52:28 57682ff
feat(data/complex/is_R_or_C): add `polynomial.of_real_eval` (#13287)

2022-04-11 11:52:27 577df07
feat(analysis/asymptotics): add a few versions of `c=o(x)` as `x→∞` (#13286)

2022-04-11 11:52:26 171e2aa
feat(group_theory/group_action/basic): A `quotient_action` induces an action on left cosets (#13283)
A `quotient_action` induces an action on left cosets.

2022-04-11 11:52:25 65b5dd8
feat(group_theory/transversal): A `quotient_action` induces an action on left transversals (#13282)
A `quotient_action` induces an action on left transversals.
Once #13283 is merged, I'll PR some more API generalizing the existing lemma `smul_symm_apply_eq_mul_symm_apply_inv_smul`.

2022-04-11 11:52:24 2eba524
chore(topology/algebra/uniform_group): use morphism classes (#13273)

2022-04-11 11:52:23 2b80d4a
feat(topology/order): if `e` is an equiv, `induced e.symm = coinduced e` (#13272)

2022-04-11 11:52:21 c160083
feat(algebra/big_operators): `norm_num` plugin for list/multiset/finset prod/sum (#13005)
This PR provides a plugin for the `norm_num` tactic that can evaluate finite sums and products, over lists, multisets and finsets.
`simp` could already handle some of these operations, but `norm_num` is overall much more suited to dealing with larger numerical operations such as arising from large sums.
I implemented the tactic as a `norm_num` plugin since it's intended to deal with numbers. I'm happy to make it its own tactic (`norm_bigop`?) if you feel this is outside of the `norm_num` scope. Similarly, I could also make a separate tactic for the parts that rewrite a list/multiset/finset into a sequence of `list.cons`es.

2022-04-11 09:27:57 e5bd941
feat(scripts): make style lint script more robust to lines starting with spaces (#13317)
Currently some banned commands aren't caught if the line is indented.
Because of this I previously snuck in a `set_option pp.all true` by accident

2022-04-11 09:27:56 cd616e0
feat(analysis/special_functions/pow): more versions of `x ^ k = o(exp(b * x))` (#13285)

2022-04-11 09:27:54 706905c
fix(algebra/indicator_function): fix name of `mul_indicator_eq_one_iff` (#13284)
It is about `≠`, so call it `mul_indicator_ne_one_iff`/`indicator_ne_zero_iff`.

2022-04-11 09:27:53 ff507a3
feat(model_theory/basic): Structures over the empty language (#13281)
Any type is a first-order structure over the empty language.
Any function, embedding, or equiv is a first-order hom, embedding or equiv over the empty language.

2022-04-11 09:27:52 fe17fee
feat(topology/algebra/uniform_group): a subgroup of a uniform group is a uniform group (#13277)

2022-04-11 09:27:50 6f428ed
feat(group_theory/schreier): Finset version of Schreier's lemma (#13274)
This PR adds a finset version of Schreier's lemma, getting closer to a statement in terms of `group.fg` and `group.rank`.

2022-04-11 09:27:48 102311e
fix(algebra/module/basic,group_theory/group_action/defs): generalize nat and int smul_comm_class instances (#13174)
The `add_group.int_smul_with_zero` instance appears to be new, everything else is moved and has `[semiring R] [add_comm_monoid M] [module R M]` relaxed to `[monoid R] [add_monoid M] [distrib_mul_action R M]`, with the variables renamed to match the destination file.

2022-04-11 04:32:07 4d27ecf
refactor(order/conditionally_complete_lattice): `csupr_le_csupr` → `csupr_mono` (#13320)
For consistency with `supr_mono` and `infi_mono`

2022-04-11 02:03:03 6f9cb03
chore(*): make more transitive relations available to calc (#12860)
Fixed as many possible declarations to have the correct argument order, as per [Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60). Golfed some random ones while I was at it.

2022-04-11 00:55:09 a85958c
chore(measure_theory/mconstructions/prod): Speed up `finite_spanning_sets_in.prod` (#13325)
Disable the computability check on `measure_theory.measure.finite_spanning_sets_in.prod` because it was taking 20s of compilation.

2022-04-11 00:55:08 a2d09b2
feat(topology/algebra/order): add `le_on_closure` (#13290)

2022-04-10 23:04:54 e5ae099
chore(topology/uniform_space/basic): golf a proof (#13289)
Rewrite a proof using tactic mode and golf it.

2022-04-10 23:04:53 8491021
chore(algebra/invertible): generalise typeclasses (#13275)

2022-04-10 23:04:52 4ded5ca
fix(field_theory/galois): update docstring (#13188)

2022-04-10 23:04:51 be22d07
feat(data/sym/basic): some basic lemmas in preparation for stars and bars (#12479)
Some lemmas extracted from @huynhtrankhanh's #11162, moved here to a separate PR

2022-04-10 23:04:50 609eb59
feat(set_theory/cofinality): Every ordinal has a fundamental sequence (#12317)

2022-04-10 21:57:11 5bf5740
chore(category_theory/fin_category): Speed up `as_type_equiv_obj_as_type` (#13298)
Rename `obj_as_type_equiv_as_type` to `as_type_equiv_obj_as_type` (likely a typo). Use `equivalence.mk` instead of `equivalence.mk'` to build it and split the functors to separate definitions to tag them with `@[simps]` and make `dsimp` go further.
On my machine, this cuts down the compile time from 41s to 3s.

2022-04-10 20:28:46 60ccf8f
feat(linear_algebra): add `adjoint_pair` from `bilinear_form` (#13203)
Copying the definition and theorem about adjoint pairs from `bilinear_form` to `sesquilinear_form`.
Defines the composition of two linear maps with a bilinear map to form a new bilinear map, which was missing from the `bilinear_map` API.
We also use the new definition of adjoint pairs in `analysis/inner_product_space/adjoint`.

2022-04-10 20:28:45 a30cba4
feat(set_theory/cardinal_ordinal): Simp lemmas for `mk` (#13119)

2022-04-10 19:34:23 965f46d
feat(category_theory/monoidal): coherence tactic (#13125)
This is an alternative to #12697 (although this one does not handle bicategories!)
From the docstring:
```
Use the coherence theorem for monoidal categories to solve equations in a monoidal equation,
where the two sides only differ by replacing strings of "structural" morphisms with
different strings with the same source and target.
That is, `coherence` can handle goals of the form
`a ≫ f ≫ b ≫ g ≫ c = a' ≫ f ≫ b' ≫ g ≫ c'`
where `a = a'`, `b = b'`, and `c = c'` can be proved using `coherence1`.
```
This PR additionally provides a "composition up to unitors+associators" operation, so you can write
```
example {U V W X Y : C} (f : U ⟶ V ⊗ (W ⊗ X)) (g : (V ⊗ W) ⊗ X ⟶ Y) : U ⟶ Y := f ⊗≫ g
```

2022-04-10 19:34:22 0bc2aa9
feat(data/fin/tuple/nat_antidiagonal): add `antidiagonal_tuple` (#13031)

2022-04-10 15:57:49 6d0984d
doc(README): improve documentation on how to contribute (#13116)
Create a new contributing section which highlights the basic steps on how to start contributing to mathlib

2022-04-10 13:49:42 6368956
counterexample(counterexamples/char_p_zero_ne_char_zero.lean): `char_p R 0` and `char_zero R` need not coincide (#13080)
Following the [Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F), this counterexample formalizes a `semiring R` for which `char_p R 0` holds, but `char_zero R` does not.
See #13075 for the PR that lead to this example.

2022-04-10 12:36:58 83225b3
feat(order/monovary): Add missing `monovary` lemmas (#13243)
Add lemmas for postcomposing monovarying functions with monotone/antitone functions. Protect lemmas that needed it. Fix typos.

2022-04-10 12:36:57 32cc868
feat(measure_theory/measure/measure_space): let measure.map work with ae_measurable functions (#13241)
Currently, `measure.map f μ` is zero if `f` is not measurable. This means that one can not say that two integrable random variables `X` and `Y` have the same distribution by requiring `measure.map X μ = measure.map Y μ`, as `X` or `Y` might not be measurable. We adjust the definition of `measure.map` to also work with almost everywhere measurable functions. This means that many results in the library that were only true for measurable functions become true for ae measurable functions. We generalize some of the existing code to this more general setting.

2022-04-10 09:05:10 ef51d23
feat(category_theory/shift): restricting shift functors to a subcategory (#13265)
Given a family of endomorphisms of `C` which are interwined by a fully faithful `F : C ⥤ D`
with shift functors on `D`, we can promote that family to shift functors on `C`.
For LTE.

2022-04-10 09:05:09 c916b64
feat(ring_theory/polynomial/opposites + data/{polynomial/basic + finsupp/basic}): move `op_ring_equiv` to a new file + lemmas (#13162)
This PR moves the isomorphism `R[X]ᵐᵒᵖ ≃+* Rᵐᵒᵖ[X]` to a new file `ring_theory.polynomial.opposites`.
I also proved some basic lemmas about the equivalence.
[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members)

2022-04-10 09:05:08 d70e26b
feat(analysis/convex/topology): improve some lemmas (#13136)
Replace some `s` with `closure s` in the LHS of `⊆` in some lemmas.

2022-04-10 06:43:20 208ebd4
feat(algebra/order/monoid_lemmas_zero_lt): port some lemmas from `algebra.order.monoid_lemmas` (#12961)
Although the names of these lemmas are from `algebra.order.monoid_lemmas`, many of the lemmas in `algebra.order.monoid_lemmas` have incorrect names, and some others may not be appropriate. Also, many lemmas are missing in `algebra.order.monoid_lemmas`. It may be necessary to make some renames and additions.

2022-04-10 06:43:19 00980d9
feat(group_theory/free_product): The ping pong lemma for free groups (#12916)
We already have the ping-pong-lemma for free products; phrasing it for free groups is
a (potentially) useful corollary, and brings us on-par with the Wikipedia page.
Again, we state it as a lemma that gives a criteria for when `lift` is injective.

2022-04-10 06:43:18 dfc1b4c
feat(topology/algebra/module/character_space): Introduce the character space of an algebra (#12838)
The character space of a topological algebra is the subset of elements of the weak dual that are also algebra homomorphisms. This space is used in the Gelfand transform, which gives an isomorphism between a commutative C⋆-algebra and continuous functions on the character space of the algebra. This, in turn, is used to construct the continuous functional calculus on C⋆-algebras.

2022-04-10 06:43:17 55baab3
feat(field_theory/krull_topology): added fintype_alg_hom (#12777)

2022-04-10 06:10:08 36fceb9
feat(data/list/cycle): Define `cycle.chain` analog to `list.chain` (#12970)
We define `cycle.chain`, which means that a relation holds in all adjacent elements in a cyclic list. We then show that for `r` a transitive relation, `cycle.chain r l` is equivalent to `r` holding for all pairs of elements in `l`.

2022-04-10 04:05:20 de0aea4
feat(topology/uniform_space/uniform_convergence): add lemma `tendsto_locally_uniformly_iff_forall_tendsto` (#13201)

2022-04-10 04:05:19 26729d6
chore(ring_theory/polynomial/basic): Generalize `polynomial.degree_lt_equiv` to commutative rings (#13190)
This is a minor PR to generalise degree_lt_equiv to comm_ring.
Its restriction to field appears to be an oversight.

2022-04-10 04:05:18 2ff12ea
feat(linear_algebra/bilinear_form): generalize from is_symm to is_refl (#13181)
Generalize some lemmas that assumed symmetric bilinear forms to reflexive bilinear forms (which is more general) and update docstring (before the condition 'symmetric' was not mentioned)

2022-04-10 01:48:20 8b8f46e
feat(analysis/complex/arg): link same_ray and complex.arg (#12764)

2022-04-10 01:48:19 7eff233
feat(set_theory/cofinality): Golf and extend existing results relating `cof` to `sup` and `bsup` (#12321)

2022-04-10 01:48:17 c2d870e
feat(set_theory/{ordinal_arithmetic, fixed_points}): Next fixed point of families (#12200)
We define the next common fixed point of a family of normal ordinal functions. We prove these fixed points to be unbounded, and that their enumerator functions are normal.

2022-04-10 01:48:16 b2c707c
feat(group_theory): use generic `subobject_class` lemmas (#11758)
This subobject class refactor PR follows up from #11750 by moving the `{zero,one,add,mul,...}_mem_class` lemmas to the root namespace and marking the previous `sub{monoid,group,module,algebra,...}.{zero,one,add,mul,...}_mem` lemmas as `protected`. This is the second part of #11545 to be split off.
I made the subobject parameter to the `_mem` lemmas implicit if it appears in the hypotheses, e.g.
```lean
lemma mul_mem {S M : Type*} [monoid M] [set_like S M] [submonoid_class S M]
  {s : S} {x y : M} (hx : x ∈ s) (hy : y ∈ s) : x * y ∈ s
```
instead of having `(s : S)` explicit. The generic `_mem` lemmas are not namespaced, so there is no dot notation that requires `s` to be explicit. Also there were already a couple of instances for the same operator where `s` was implicit and others where `s` was explicit, so some change was needed.

2022-04-10 01:48:15 d133874
feat(representation_theory/basic): basics of group representation theory (#11207)
Some basic lemmas about group representations and some theory regarding the subspace of fixed points of a representation.

2022-04-10 01:48:14 3fe5c93
feat(algebra/ring/boolean_ring): Turning a Boolean algebra into a Boolean ring (#6476)
Define `as_boolring`, a type synonym to turn a Boolean algebra into a Boolean ring and show that `as_boolring` and `as_boolalg` are "inverse" to each other.

2022-04-10 01:48:13 9495b8c
feat(data/set/intervals/with_bot_top): lemmas about `I??` and `with_top/bot` (#4273)
Prove theorems about (pre)images of intervals under `coe : α → with_top α` and `coe : α → with_bot α`.

2022-04-09 23:54:02 e4f93e6
feat(group_theory/solvable): Golf some proofs (#13271)
This PR uses `solvable_of_ker_le_range` to golf some proofs.

2022-04-09 23:54:01 b7f7c4a
feat(combinatorics/simple_graph/clique): Cliques (#12982)
Define cliques.

2022-04-09 22:07:41 e690875
chore(ring_theory/roots_of_unity): generalise (#13261)

2022-04-09 22:07:40 3879621
feat(combinatorics/additive/salem_spencer): The sphere does not contain arithmetic progressions (#13259)
Prove that the frontier of a strictly convex closed set is Salem-Spencer. For this we need
* simple lemmas about `same_ray`. This involves renaming `same_ray.exists_right_eq_smul`/`same_ray.exists_left_eq_smul` to `same_ray.exists_nonneg_left`/`same_ray.exists_nonneg_right`.
* that the norm in a real normed space is injective on rays.
* that the midpoint of two points of equal norm has smaller norm, in a strictly convex space

2022-04-09 22:07:39 b3a0f85
feat(group_theory/coset): Fintype instance for quotient by the right relation (#13257)
This PR adds a fintype instance for the quotient by the right relation.

2022-04-09 22:07:38 e3a8ef1
feat(algebra/algebra/*): generalise (#13252)
Some generalisations straight from Alex's generalisation linter, with some care about how to place them. Some `algebra` lemmas are weakened to semirings, allowing us to talk about ℕ-algebras much more easily.

2022-04-09 22:07:37 1480161
feat(group_theory/group_action/basic): Left multiplication satisfies the `quotient_action` axiom (#13249)
This PR adds an instance `quotient_action α H`, meaning that left multiplication satisfies the `quotient_action` axiom.

2022-04-09 22:07:36 22b7d21
feat(analysis/normed*): if `f → 0` and `g` is bounded, then `f * g → 0` (#13248)
Also drop `is_bounded_under_of_tendsto`: it's just `h.norm.is_bounded_under_le`.

2022-04-09 22:07:35 4c4e5e8
feat(analysis/locally_convex): every totally bounded set is von Neumann bounded (#13204)
Add one lemma and some cleanups of previous PR.

2022-04-09 19:44:54 cc65716
refactor(analysis/complex): replace `diff_on_int_cont` with `diff_cont_on_cl` (#13148)
Use "differentiable on a set and continuous on its closure" instead of "continuous on a set and differentiable on its interior".
There are a few reasons to prefer the latter:
* it has better "composition" lemma;
* it allows us to talk about functions that are, e.g., differentiable on `{z : ℂ | abs z < 1 ∧ (re z < 0 ∨ im z ≠ 0)}` and continuous on the closed unit disk.
Also generalize `eq_on_of_eq_on_frontier` from a compact set to a bounded set (so that it works, e.g., for the unit ball in a Banach space).
This PR does not move the file `diff_on_int_cont` to make the diff more readable; the file will be moved in another PR.

2022-04-09 19:44:52 57f382a
feat(order/bounds): Boundedness of monotone/antitone functions (#13079)

2022-04-09 19:44:50 0dde2cb
feat(data/list/chain): Lemma for `chain r a (list.range n.succ)` (#12990)

2022-04-09 17:28:10 bc140d2
feat(data/polynomial/degree/lemmas): add some lemmas and rename some lemmas (#13235)
rename `nat_degree_mul_C_eq_of_no_zero_divisors` to `nat_degree_mul_C`
rename `nat_degree_C_mul_eq_of_no_zero_divisors` to `nat_degree_C_mul`

2022-04-09 17:28:09 f8467aa
feat(data/polynomial/eval): add some lemmas for `eval₂` (#13234)

2022-04-09 17:28:08 25d28c8
feat(group_theory/schreier): Add version of Schreier's lemma (#13231)
This PR adds a version of Schreier's lemma of the form `closure (_ : set H) = ⊤`, as opposed to `closure (_ : set G) = H`. This is closer to saying that `H` is finitely generated.
I also fiddled with the names a bit.

2022-04-09 17:28:06 d831478
feat(computability/encoding): Bounds on cardinality from an encoding (#13224)
Generalizes universe variables for `computability.encoding`
Uses a `computability.encoding` to bound the cardinality of a type

2022-04-09 17:28:05 6abb6de
feat(category_theory/bicategory): monoidal categories are single object bicategories (#13157)

2022-04-09 17:28:04 823699f
feat(linear_algebra/general_linear_group): Add some lemmas about SL to GL_pos coercions. (#12393)

2022-04-09 15:37:04 d42f6a8
chore(algebra/associated): golf irreducible_iff_prime_iff (#13267)

2022-04-09 15:37:03 348b41d
chore(archive/imo/imo1994_q1): tidy a bit (#13266)

2022-04-09 15:37:02 1d9d153
chore(algebraic_geometry/pullbacks): replaced some simps by simp onlys (#13258)
This PR optimizes the file `algebraic_geometry/pullbacks` by replacing some calls to `simp` by `simp only [⋯]`.
This file has a high [`sec/LOC` ratio](https://mathlib-bench.limperg.de/commit/5e98dc1cc915d3226ea293c118d2ff657b48b0dc) and is not very short, which makes it a good candidate for such optimizations attempts.
On my machine, these changes reduced the compile time from 2m30s to 1m20s.

2022-04-09 15:37:01 8c7e8a4
feat(group_theory/commutator): The commutator subgroup is characteristic (#13255)
This PR adds instances stating that the commutator subgroup is characteristic.

2022-04-09 15:37:00 d23fd6f
refactor(group_theory/solvable): Golf and move `solvable_of_ker_le_range` (#13254)
This PR moves `solvable_of_ker_le_range` to earlier in the file so that it can be used to golf the proofs of `solvable_of_solvable_injective` and `solvable_of_surjective`.

2022-04-09 15:02:56 f24918e
refactor(group_theory/solvable): Golf some proofs (#13256)
This PR golfs some proofs in `group_theory/solvable.lean`.

2022-04-09 12:31:00 d6ff44e
feat(category_theory/faithful): map_iso_injective (#13263)

2022-04-09 10:39:57 7a0513d
feat(data/nat/*): generalize typeclass assumptions (#13260)

2022-04-09 07:19:58 f5ee47b
feat(category_theory/triangulated): upgrade map_triangle to a functor (#13262)
Useful for LTE.

2022-04-09 06:37:15 a98a26b
chore(measure_theory): move lemmas about `ae_measurable` to a new file (#13246)

2022-04-09 05:46:44 59cf367
chore(analysis/special_functions/pow): golf a proof (#13247)
`complex.continuous_at_cpow_const` follows from `complex.continuous_at_cpow`.

2022-04-09 00:02:05 2a04ec0
feat(data/list/big_operators): More lemmas about alternating product (#13195)
A few more lemmas about `list.alternating_prod` and `list.alternating_sum` and a proof that 11 divides even length base 10 palindromes.
Also rename `palindrome` to `list.palindrome` (as it should have been).

2022-04-08 21:51:39 485d648
feat(algebra/big_operators): some big operator lemmas (#13066)
Note that `prod_coe_sort` is essentially `prod_finset_coe` restated with the relatively new `finset.has_coe_to_sort`. I can also place `prod_finset_coe` with `prod_coe_sort` if we prefer.

2022-04-08 17:20:39 9498bea
feat(group_theory/group_action/fixing_subgroup): add lemmas about fixing_subgroup (#13202)
- pull back here the definition of fixing_subgroup and fixing_submonoid from field_theory.galois
- add lemmas about fixing_subgroup or fixing_submonoid in the context of mul_action
- add Galois connection relating it with fixed_points.

2022-04-08 15:41:02 ed266e5
feat(category_theory/limits/terminal): limit of the constant terminal functor (#13238)
Needed in LTE.

2022-04-08 15:41:01 afa9be2
feat(category_theory/limits/pullbacks): missing simp lemmas (#13237)
Absence noted in LTE.

2022-04-08 15:40:59 0521344
feat(analysis/locally_convex/basic): add lemmas about finite unions for absorbs (#13236)
- Lemma for absorbing sets and addition
- Two Lemmas for absorbing sets as finite unions (set.finite and finset variant)
- Lemma for absorbent sets absorb finite sets.

2022-04-08 15:40:58 0831e4f
feat(data/polynomial/degree/definitions): add `degree_monoid_hom` (#13233)
It will be used to simplify the proof of some lemmas.

2022-04-08 13:45:44 f5d4fa1
feat(data/fintype/basic): add `fintype_of_{equiv,option}` (#13086)
`fintype_of_option_equiv` was extracted from @huynhtrankhanh's https://github.com/leanprover-community/mathlib/pull/11162, moved here to a separate PR.  The split into `fintype_of_option` and `fintype_of_equiv` is based on a comment on that PR by @jcommelin.

2022-04-08 13:45:43 d96e17d
feat(data/multiset/basic): add `map_le_map_iff` and `map_embedding` (#13082)
Adds lemmas `map_le_map_iff : s.map f ≤ t.map f ↔ s ≤ t` and `map_embedding : multiset α ↪o multiset β` for embedding `f`.
Extracted from @huynhtrankhanh's #11162, moved here to a separate PR

2022-04-08 13:45:41 5acaeaf
chore(computability/language): Golf (#13039)
Golf the `semiring` instance using the `set.image2` API, add half missing docstring.

2022-04-08 13:45:40 2569ad5
feat(data/set/intervals/basic): An open interval of a dense order has no maximum/minimum (#12924)

2022-04-08 12:12:47 91ce04d
chore(model_theory/encoding): Move the encoding for terms to its own file (#13223)
Moves the declarations about encodings and cardinality of terms to their own file, `model_theory/encoding`

2022-04-08 12:12:46 ed68854
feat(model_theory/*): Theory of nonempty structures and bundling elementary substructures (#13118)
Defines a sentence and theory to indicate a structure is nonempty
Defines a map to turn elementary substructures of a bundled model into bundled models

2022-04-08 12:12:45 710fe04
feat(model_theory/order): Defines ordered languages and structures (#13088)
Defines ordered languages and ordered structures
Defines the theories of pre-, partial, and linear orders, shows they are modeled by the respective structures.

2022-04-08 12:12:44 7340720
feat(group_theory/group_action/basic): Add typeclass for actions that descend to the quotient (#12999)
Part of #12848.

2022-04-08 11:40:03 851b320
feat(ring_theory/localization): b is linear independent over R iff l.i. over `Frac(R)` (#13041)

2022-04-08 07:42:13 7d41715
feat(archive/imo/imo2008_q3): golf (#13232)

2022-04-08 07:42:12 e85dc17
feat(group_theory/subgroup/basic): The centralizer of a characteristic subgroup is characteristic (#13230)
This PR proves that the centralizer of a characteristic subgroup is characteristic.

2022-04-08 07:42:10 95ebbad
refactor(group_theory/commutator): Move `commutator_le_map_commutator` (#13229)
`commutator_le_map_commutator` is a general lemma about commutators, so it should be moved from `solvable.lean` to `commutator.lean`.

2022-04-08 07:42:09 1a4203a
feat(group_theory/coset): Right cosets are in bijection with left cosets (#13228)
Right cosets are in bijection with left cosets. This came up in some work involving right transversals.

2022-04-08 07:42:08 499a4a8
feat(group_theory/index): `fintype_of_index_ne_zero` (#13225)
This PR adds `fintype_of_index_ne_zero`.

2022-04-08 06:14:18 ccf3e37
feat(ring_theory/unique_factorization_domain): alternative specification for `count (normalized_factors x)` (#13161)
`count_normalized_factors_eq` specifies the number of times an irreducible factor `p` appears in `normalized_factors x`, namely the number of times it divides `x`. This is often easier to work with than going through `multiplicity` since this way we avoid coercing to `enat`.

2022-04-08 06:14:17 0c424e9
refactor(analysis/normed_space/conformal_linear_map): redefine (#13143)
Use equality of bundled maps instead of coercions to functions in the definition of `is_conformal_map`. Also golf some proofs.

2022-04-08 06:14:16 036fc99
feat(topology/uniform_space/uniform_convergence): add `tendsto_uniformly_iff_seq_tendsto_uniformly` (#13128)
For countably generated filters, uniform convergence is equivalent to uniform convergence of sub-sequences.

2022-04-08 06:14:15 ab60244
feat(model_theory/basic,bundled): Structures induced by equivalences (#13124)
Defines `equiv.induced_Structure`, a structure on the codomain of a bijection that makes the bijection an isomorphism.
Defines maps on bundled models to shift them along bijections and up and down universes.

2022-04-08 05:13:45 9f3e7fb
feat(category_theory/limits): further API for commuting limits (#13215)
Needed for LTE.

2022-04-08 02:06:33 5e98dc1
feat(topology/continuous_function/zero_at_infty): add more instances for zero_at_infty_continuous_map and establish C₀ functorial properties (#13196)
This adds more instances for the type `C₀(α, β)` of continuous functions vanishing at infinity. Notably, these new instances include its non-unital ring, normed space and star structures, culminating with `cstar_ring` when `β` is a `cstar_ring` which is also a `topological_ring`.
In addition, this establishes functorial properties of `C₀(-, β)` for various choices of algebraic categories involving `β`. The domain of these (contravariant) functors is the category of topological spaces with cocompact continuous maps, and the functor applied to a cocompact map is given by pre-composition.

2022-04-08 00:26:57 0719b36
feat(category_theory/limits/shapes): isomorphisms of (co)spans (#13216)

2022-04-08 00:26:56 b897115
chore(algebra/associated): generalisation linter (#13108)

2022-04-07 22:31:46 cae5164
chore(algebra/order/{monoid,ring}): missing typeclasses about `*` and `+` on `order_dual` (#13004)

2022-04-07 20:32:53 02a2560
feat(analysis/normed_space/add_torsor_bases): add `convex.interior_nonempty_iff_affine_span_eq_top` (#13220)
Generalize `interior_convex_hull_nonempty_iff_aff_span_eq_top` to any
convex set, not necessarily written as the convex hull of a set.

2022-04-07 20:32:52 0f4d0ae
feat(data/polynomial/identities): golf using `linear_combination` (#13212)

2022-04-07 20:32:51 3b04f48
feat(number_theory/fermat4): golf using `linear_combination` (#13211)

2022-04-07 20:32:50 82d1e9f
feat(algebra/quadratic_discriminant): golf using `linear_combination` (#13210)

2022-04-07 18:41:47 4ff75f5
refactor(category_theory/bicategory): set simp-normal form for 2-morphisms (#13185)
## Problem
The definition of bicategories contains the following axioms:
```lean
associator_naturality_left : ∀ {f f' : a ⟶ b} (η : f ⟶ f') (g : b ⟶ c) (h : c ⟶ d),
  (η ▷ g) ▷ h ≫ (α_ f' g h).hom = (α_ f g h).hom ≫ η ▷ (g ≫ h)
associator_naturality_middle : ∀ (f : a ⟶ b) {g g' : b ⟶ c} (η : g ⟶ g') (h : c ⟶ d),
  (f ◁ η) ▷ h ≫ (α_ f g' h).hom = (α_ f g h).hom ≫ f ◁ (η ▷ h)
associator_naturality_right : ∀ (f : a ⟶ b) (g : b ⟶ c) {h h' : c ⟶ d} (η : h ⟶ h'),
  (f ≫ g) ◁ η ≫ (α_ f g h').hom = (α_ f g h).hom ≫ f ◁ (g ◁ η) 
left_unitor_naturality : ∀ {f g : a ⟶ b} (η : f ⟶ g),
  𝟙 a ◁ η ≫ (λ_ g).hom = (λ_ f).hom ≫ η
right_unitor_naturality : ∀ {f g : a ⟶ b} (η : f ⟶ g) :
  η ▷ 𝟙 b ≫ (ρ_ g).hom = (ρ_ f).hom ≫ η
```
By using these axioms, we can see that, for example, 2-morphisms `(f₁ ≫ f₂) ◁ (f₃ ◁ (η ▷ (f₄ ≫ f₅)))` and `f₁ ◁ ((𝟙_ ≫ f₂ ≫ f₃) ◁ ((η ▷ f₄) ▷ f₅))` are equal up to some associators and unitors. The problem is that the proof of this fact requires tedious rewriting. We should insert appropriate associators and unitors, and then rewrite using the above axioms manually.
This tedious rewriting is also a problem when we use the (forthcoming) `coherence` tactic (bicategorical version of #13125), which only works if the non-structural 2-morphisms in the LHS and the RHS are the same.
## Main change
The main proposal of this PR is to introduce a normal form of such 2-morphisms, and put simp attributes to suitable lemmas in order to rewrite any 2-morphism into the normal form. For example, the normal form of the previouse example is `f₁ ◁ (f₂ ◁ (f₃ ◁ ((η ▷ f₄) ▷ f₅)))`. The precise definition of the normal form can be found in the docs in `basic.lean` file. The new simp lemmas introduced in this PR are the following:
```lean
whisker_right_comp : ∀ {f f' : a ⟶ b} (η : f ⟶ f') (g : b ⟶ c) (h : c ⟶ d),
  η ▷ (g ≫ h) = (α_ f g h).inv ≫ η ▷ g ▷ h ≫ (α_ f' g h).hom 
whisker_assoc : ∀ (f : a ⟶ b) {g g' : b ⟶ c} (η : g ⟶ g') (h : c ⟶ d),
  (f ◁ η) ▷ h = (α_ f g h).hom ≫ f ◁ (η ▷ h) ≫ (α_ f g' h).inv
comp_whisker_left : ∀ (f : a ⟶ b) (g : b ⟶ c) {h h' : c ⟶ d} (η : h ⟶ h'),
  (f ≫ g) ◁ η = (α_ f g h).hom ≫ f ◁ g ◁ η ≫ (α_ f g h').inv
id_whisker_left : ∀ {f g : a ⟶ b} (η : f ⟶ g),
  𝟙 a ◁ η = (λ_ f).hom ≫ η ≫ (λ_ g).inv
whisker_right_id : ∀ {f g : a ⟶ b} (η : f ⟶ g),
  η ▷ 𝟙 b = (ρ_ f).hom ≫ η ≫ (ρ_ g).inv
```
Logically, these are equivalent to the five axioms presented above. The point is that these equalities have the definite simplification direction.
## Improvement 
Some proofs that had been based on tedious rewriting are now automated. For example, the conditions in `oplax_nat_trans.id`, `oplax_nat_trans.comp`, and several functions in `functor_bicategory.lean` are now proved by `tidy`.
## Specific changes
- The new simp lemmas `whisker_right_comp` etc. actually have been included in the definition of bicategories instead of `associate_naturality_left` etc. so that the latter lemmas are proved in later of the file just by `simp`.
- The precedence of the whiskering notations "infixr ` ◁ `:70" and "infixr ` ◁ `:70" have been changed into "infixr ` ◁ `:81" and "infixr ` ◁ `:81", which is now higher than that of the composition `≫`. This setting is consistent with the normal form introduced in this PR in the sence that an expression is in normal form only if it has the minimal number of parentheses in this setting. For example, the normal form `f₁ ◁ (f₂ ◁ (f₃ ◁ ((η ▷ f₄) ▷ f₅)))` can be written as `f₁ ◁ f₂ ◁ f₃ ◁ η ▷ f₄ ▷ f₅`.
- The unneeded parentheses caused by the precedence change have been removed.
- The lemmas `whisker_right_id` and `whisker_right_comp` have been renamed to `id_whisker_right` and `comp_whisker_right` since these are more consistent with the notation. Note that the name `whisker_right_id` and `whisker_right_comp` are now used for the two of the five simp lemmas presented above.
- The lemmas in `basic.lean` have been rearranged to be more logically consistent.
## Future work
I would like to apply a similar strategy for monoidal categories.

2022-04-07 18:41:46 44c31d8
feat(data/finset/basic): add `map_injective` and `sigma_equiv_option_of_inhabited` (#13083)
Adds `map_injective (f : α ↪ β) : injective (map f) := (map_embedding f).injective` and `sigma_equiv_option_of_inhabited [inhabited α] : Σ (β : Type u), α ≃ option β`.
Extracted from @huynhtrankhanh's https://github.com/leanprover-community/mathlib/pull/11162, moved here to a separate PR

2022-04-07 18:41:45 9d786ce
feat(topology/metric/basic): construct a bornology from metric axioms and add it to the pseudo metric structure (#12078)
Every metric structure naturally gives rise to a bornology where the bounded sets are precisely the metric bounded sets. The eventual goal will be to replace the existing `metric.bounded` with one defined in terms of the bornology, so we need to construct the bornology first, as we do here.

2022-04-07 16:53:29 2d2d09c
feat(data/nat/gcd): added gcd_mul_of_dvd_coprime (#12989)
Added gcd_mul_of_dvd_coprime lemma to gcd.lean.

2022-04-07 16:20:47 733aed5
chore(group_theory/index): Add `to_additive` (#13191)
This PR adds `to_additive` to the rest of `group_theory/index.lean`.

2022-04-07 16:20:46 c522e3b
feat(data/polynomial/basic): add simp lemmas X_mul_C and X_pow_mul_C (#13163)
These lemmas are direct applications of `X_mul` and `X_pow_mul`.  However, their more general version cannot be `simp` lemmas since they form loops.  These versions do not, since they involve an explicit `C`.
I golfed slightly a proof in `linear_algebra.eigenspace` since it was timing out.
[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/polynomial.20op_C/near/277703846)

2022-04-07 16:20:44 6a0524f
feat(category_theory/monoidal): upgrades for monoidal equivalences (#13158)
(Recall that a "monoidal equivalence" is a functor which is separately monoidal, and an equivalence.
This PR completes the work required to see this is the same as having a monoidal inverse, up to monoidal units and counits.)
* Shows that the unit and counit of a monoidal equivalence have a natural monoidal structure. 
* Previously, when transporting a monoidal structure across a (non-monoidal) equivalence,
we constructed directly the monoidal strength on the inverse functor. In the meantime, @b-mehta has provided a general construction for the monoidal strength on the inverse of any monoidal equivalence, so now we use that.
The proofs of `monoidal_unit` and `monoidal_counit` in `category_theory/monoidal/natural_transformation.lean` are quite ugly. If anyone would like to golf these that would be lovely! :-)

2022-04-07 16:20:43 d7ad7d3
feat(set_theory/cardinal): Upper bound on domain from upper bound on fibers (#13147)
A uniform upper bound on fibers gives an upper bound on the domain.

2022-04-07 16:20:41 47a3cd2
feat(probability/integration): Bochner integral of the product of independent functions (#13140)
This is limited to real-valued functions, which is not very satisfactory but it is not clear (to me) what the most general version of each of those lemmas would be.

2022-04-07 16:20:40 ab1bf0f
feat(algebra/order/monoid): add eq_one_or_one_lt (#13131)
Needed in LTE.

2022-04-07 16:20:39 7c04f36
feat(group_theory/schreier): prove Schreier's lemma (#13019)
This PR adds a proof of Schreier's lemma.

2022-04-07 16:20:37 315bff3
feat(archive/100-theorems-list/37_solution_of_cubic): golf (#13012)
Express one of the lemmas for the solution of the cubic as a giant `linear_combination` calculation.

2022-04-07 14:25:29 c4f3869
chore(order/symm_diff): Change the symmetric difference notation (#13217)
The notation for `symm_diff` was `Δ` (`\D`, `\GD`, `\Delta`). It now is `∆` (`\increment`).

2022-04-07 14:25:16 ac5188d
chore(algebra/char_p/{basic + algebra}): weaken assumptions for char_p_to_char_zero (#13214)
The assumptions for lemma `char_p_to_char_zero` can be weakened, without changing the proof.
Since the weakening breaks up one typeclass assumption into two, when the lemma was applied with `@`, I inserted an extra `_`.  This happens twice: once in the file where the lemma is, and once in a separate file.

2022-04-07 14:25:13 321d159
feat(algebra/order/monoid): generalize, convert to `to_additive` and iff of `lt_or_lt_of_mul_lt_mul` (#13192)
I converted a lemma showing
`m + n < a + b →  m < a ∨ n < b`
to the `to_additive` version of a lemma showing
`m * n < a * b →  m < a ∨ n < b`.
I also added a lemma showing `m * n < a * b ↔  m < a ∨ n < b` and its `to_additive` version.

2022-04-07 12:26:52 506ad31
feat(order/monotone): simp lemmas for monotonicity in dual orders (#13207)
Add 4 lemmas of the kind `antitone_to_dual_comp_iff`
Add their variants for `antitone_on`
Add their strict variants

2022-04-07 11:44:37 be147af
feat(ring_theory/graded_algebra/homogeneous_localization): homogeneous localization ring is local (#13071)
showed that `local_ring (homogeneous_localization 𝒜 x)` from prime ideal `x`

2022-04-07 10:39:20 3e4bf5d
feat(order/symm_diff): More symmetric difference lemmas (#13133)
A few more `symm_diff` lemmas.

2022-04-07 07:05:52 faa7e52
chore(group_theory/index): Add `to_additive` (#13191)
This PR adds `to_additive` to the rest of `group_theory/index.lean`.

2022-04-07 07:05:50 45a8f6c
feat(data/polynomial/basic): add simp lemmas X_mul_C and X_pow_mul_C (#13163)
These lemmas are direct applications of `X_mul` and `X_pow_mul`.  However, their more general version cannot be `simp` lemmas since they form loops.  These versions do not, since they involve an explicit `C`.
I golfed slightly a proof in `linear_algebra.eigenspace` since it was timing out.
[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/polynomial.20op_C/near/277703846)

2022-04-07 07:05:49 d047eb4
feat(category_theory/monoidal): upgrades for monoidal equivalences (#13158)
(Recall that a "monoidal equivalence" is a functor which is separately monoidal, and an equivalence.
This PR completes the work required to see this is the same as having a monoidal inverse, up to monoidal units and counits.)
* Shows that the unit and counit of a monoidal equivalence have a natural monoidal structure. 
* Previously, when transporting a monoidal structure across a (non-monoidal) equivalence,
we constructed directly the monoidal strength on the inverse functor. In the meantime, @b-mehta has provided a general construction for the monoidal strength on the inverse of any monoidal equivalence, so now we use that.
The proofs of `monoidal_unit` and `monoidal_counit` in `category_theory/monoidal/natural_transformation.lean` are quite ugly. If anyone would like to golf these that would be lovely! :-)

2022-04-07 07:05:48 91db821
feat(set_theory/cardinal): Upper bound on domain from upper bound on fibers (#13147)
A uniform upper bound on fibers gives an upper bound on the domain.

2022-04-07 07:05:46 409f5f2
feat(probability/integration): Bochner integral of the product of independent functions (#13140)
This is limited to real-valued functions, which is not very satisfactory but it is not clear (to me) what the most general version of each of those lemmas would be.

2022-04-07 07:05:45 fabad7e
feat(order/symm_diff): More symmetric difference lemmas (#13133)
A few more `symm_diff` lemmas.

2022-04-07 07:05:44 2a74d4e
feat(algebra/order/monoid): add eq_one_or_one_lt (#13131)
Needed in LTE.

2022-04-07 07:05:40 9eff8cb
feat(group_theory/schreier): prove Schreier's lemma (#13019)
This PR adds a proof of Schreier's lemma.

2022-04-07 07:05:37 45e4e62
feat(archive/100-theorems-list/37_solution_of_cubic): golf (#13012)
Express one of the lemmas for the solution of the cubic as a giant `linear_combination` calculation.

2022-04-07 06:05:46 f0ee4c8
feat(topology/metric_space): the product of bounded sets is bounded (#13176)
Also add an `iff` version.

2022-04-07 00:57:22 05820c5
feat(archive/imo/imo2008_q4): golf using `linear_combination` (#13209)

2022-04-07 00:24:49 c4ced3a
feat(archive/imo/imo2005_q6): golf using `field_simp` (#13206)

2022-04-06 23:45:15 cc28054
feat(archive/imo/imo2001_q6): golf using `linear_combination` (#13205)

2022-04-06 15:26:14 06bdd8b
feat(geometry/manifold/tangent_bundle): adapt the definition to the new vector bundle definition (#13199)
Also a few tweaks to simplify the defeq behavior of tangent spaces.

2022-04-06 12:59:06 138448a
feat(algebra/parity): introduce `is_square` and, via `to_additive`, also `even` (#13037)
This PR continues the refactor began in #12882.  Now that most of the the even/odd lemmas are in the same file, I changed the definition of `even` to become the `to_additive` version of `is_square`.
The reason for the large number of files touched is that the definition of `even` actually changed, from being of the form `2 * n` to being of the form `n + n`.  Thus, I inserted appropriate `two_mul`s and `even_iff_two_dvd`s in a few places where the defeq to the divisibility by 2 was exploited.
[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/even.2Fodd)

2022-04-06 06:48:08 6930ad5
feat(topology/continuous_function/zero_at_infty): add the type of continuous functions vanishing at infinity (#12907)
This adds the type of of continuous functions vanishing at infinity (`zero_at_infty`) with the localized notation `C₀(α, β)` (we also allow `α →C₀ β` but the former has higher priority). This type is defined when `α` and `β` are topological spaces and `β` has a zero element. Elements of this type are continuous functions `f` with the additional property that `tendsto f (cocompact α) (𝓝 0)`. Here we attempt to follow closely the recent hom refactor and so we also create the type class `zero_at_infty_continuous_map_class`.
Various algebraic structures are instantiated on `C₀(α, β)` when corresponding structures exist on `β`. When `β` is a metric space, there is a natural inclusion `zero_at_infty_continuous_map.to_bcf : C₀(α, β) → α →ᵇ β`, which induces a metric space structure on `C₀(α, β)`, and the range of this map is closed. Therefore, when `β` is complete, `α →ᵇ β` is complete, and hence so is `C₀(α, β)`.
- [x] depends on: #12894

2022-04-06 03:42:41 2841aad
chore(scripts): update nolints.txt (#13193)
I am happy to remove some nolints for you!

2022-04-06 01:48:21 2e8d269
feat(data/nat/factorization): Generalize natural factorization recursors. (#12973)
Switches `rec_on_prime_pow` precondition to allow use of `0 < n`, and strengthens correspondingly `rec_on_pos_prime_pos_coprime` and `rec_on_prime_coprime`.

2022-04-05 23:46:08 2504a2b
chore(data/list/basic): remove axiom of choice assumption in some lemmas (#13189)

2022-04-05 21:26:16 a841361
refactor(topology/vector_bundle): redefine (#13175)
The definition of topological vector bundle in #4658 was (inadvertently) a nonstandard definition, which agreed in finite dimension with the usual definition but not in infinite dimension.
Specifically, it omitted the compatibility condition that for a vector bundle over `B` with model fibre `F`, the transition function `B → F ≃L[R] F` associated to any pair of trivializations be continuous, with respect to to the norm topology on `F →L[R] F`.  (The transition function is automatically continuous with respect to the topology of pointwise convergence, which is why this works in finite dimension.  The discrepancy between these conditions in infinite dimension turns out to be a [classic](https://mathoverflow.net/questions/4943/vector-bundle-with-non-smoothly-varying-transition-functions/4997#4997)
[gotcha](https://mathoverflow.net/questions/54550/the-third-axiom-in-the-definition-of-infinite-dimensional-vector-bundles-why/54706#54706).)
We refactor to add this compatibility condition to the definition of topological vector bundle, and to verify this condition in the existing examples of topological vector bundles (construction via a cocycle, direct sum of vector bundles, tangent bundle).

2022-04-05 19:36:21 7ec52a1
chore(algebraic_topology/simplex_category): removed ulift (#13183)

2022-04-05 19:36:20 960abb5
chore(algebra/monoid_algebra/grading): fix slow elaboration (#13169)
There were a couple of lemmas in this file taking multiple seconds to elaborate.  Apart from `squeeze_dsimps`, the main change in this PR is to help the elaborator unfold certain definitions (that it originally did unfold, but only after multiple seconds of trying to unfold other things), by replacing proofs with `by simpa only [some_unfolding_lemma] using the_original_proof`.
The main alternative I discovered for the `simpa` changes was to strategically mark certain definitions irreducible. Those definitions needed to be unfolded in other places in this file, and it's less obviously connected to the source of the slowness: we might keep around the `local attribute [irreducible]` lines even if it's not needed after a refactor.
Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Slow.20defeqs.20in.20.60algebra.2Fmonoid_algebra.2Fgrading.2Elean.60

2022-04-05 19:36:19 d34cbcf
refactor(algebra/homology, category_theory/*): declassify exactness (#13153)
Having  `exact` be a class was very often somewhat inconvenient, so many lemmas took it as a normal argument while many others had it as a typeclass argument. This PR removes this inconsistency by downgrading `exact` to a structure. We lose very little by doing this, and using typeclass inference as a Prolog-like "automatic theorem prover" is rarely a good idea anyway.

2022-04-05 19:36:18 427aae3
chore(algebra/*): generalisation linter (replacing ring with non_assoc_ring) (#13106)

2022-04-05 19:00:50 e510b20
feat(group_theory/index): Index of intersection (#13186)
This PR adds `relindex_inf_le` and `index_inf_le`, which are companion lemmas to `relindex_inf_ne_zero` and `index_inf_ne_zero`.

2022-04-05 16:22:19 cf131e1
feat(data/complex/exponential): add `real.cos_abs` (#13177)

2022-04-05 16:22:18 b011b0e
feat(ring_theory/unique_factorization_domain): The only divisors of prime powers are prime powers. (#12799)
The only divisors of prime powers are prime powers in the associates monoid of an UFD.

2022-04-05 14:51:10 fd1861c
fix(tactic/ring): `ring_nf` should descend into subexpressions (#12430)
Since the lambda passed to `ext_simp_core` was returning `ff`, this means the simplifier didn't descend into subexpressions, so `ring_nf` only tried to use the Horner normal form if the head symbol of the goal/hypothesis was `+`, `*`, `-` or `^`. In particular, since there are no such operations on `Sort`, `ring_nf` was exactly equivalent to `simp only [horner.equations._eqn_1, add_zero, one_mul, pow_one, neg_mul, add_neg_eq_sub]`. Toggling the return value means `ring_nf` will try to simplify all subexpressions, including the left hand side and right hand side of an equality.
@alexjbest discovered the MWE included in `test/ring.lean` while trying to use `ring_nf` to simplify a complicated expression.

2022-04-05 12:54:02 91dd3b1
chore(ring_theory/integral_domain): dedup, tidy (#13180)

2022-04-05 12:54:00 da132ec
feat(*): define subobject classes from submonoid up to subfield (#11750)
The next part of my big refactoring plans: subobject classes in the same style as morphism classes.
This PR introduces the following subclasses of `set_like`:
 * `one_mem_class`, `zero_mem_class`, `mul_mem_class`, `add_mem_class`, `inv_mem_class`, `neg_mem_class`
 * `submonoid_class`, `add_submonoid_class`
 * `subgroup_class`, `add_subgroup_class`
 * `subsemiring_class`, `subring_class`, `subfield_class`
The main purpose of this refactor is that we can replace the wide variety of lemmas like `{add_submonoid,add_subgroup,subring,subfield,submodule,subwhatever}.{prod,sum}_mem` with a single `prod_mem` lemma that is generic over all types `B` that extend `submonoid`:
```lean
@[to_additive]
lemma prod_mem {M : Type*} [comm_monoid M] [set_like B M] [submonoid_class B M]
  {ι : Type*} {t : finset ι} {f : ι → M} (h : ∀c ∈ t, f c ∈ S) : ∏ c in t, f c ∈ S
```
## API changes
 * When you extend a `struct subobject`, make sure to create a corresponding `subobject_class` instance.
## Upcoming PRs
This PR splits out the first part of #11545, namely defining the subobject classes. I am planning these follow-up PRs for further parts of #11545:
 - [ ] make the subobject consistently implicit in `{add,mul}_mem` #11758
 - [ ] remove duplicate instances like `subgroup.to_group` (replaced by the `subgroup_class.to_subgroup` instances that are added by this PR) #11759
 - [ ] further deduplication such as `finsupp_sum_mem`
## Subclassing `set_like`
Contrary to mathlib's typical subclass pattern, we don't extend `set_like`, but take a `set_like` instance parameter:
```lean
class one_mem_class (S : Type*) (M : out_param $ Type*) [has_one M] [set_like S M] :=
(one_mem : ∀ (s : S), (1 : M) ∈ s)
```
instead of:
```lean
class one_mem_class (S : Type*) (M : out_param $ Type*) [has_one M]
  extends set_like S M :=
(one_mem : ∀ (s : S), (1 : M) ∈ s)
```
The main reason is that this avoids some big defeq checks when typechecking e.g. `x * y : s`, where `s : S` and `[comm_group G] [subgroup_class S G]`. Namely, the type `coe_sort s` could be given by `subgroup_class → @@submonoid_class _ _ (comm_group.to_group.to_monoid) → set_like → has_coe_to_sort` or by `subgroup_class → @@submonoid_class _ _ (comm_group.to_comm_monoid.to_monoid) → set_like → has_coe_to_sort`. When checking that `has_mul` on the first type is the same as `has_mul` on the second type, those two inheritance paths are unified many times over ([sometimes exponentially many](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Why.20is.20.60int.2Ecast_abs.60.20so.20slow.3F/near/266945077)). So it's important to keep the size of types small, and therefore we avoid `extends`-based inheritance.
## Defeq fixes
Adding instances like `subgroup_class.to_group` means that there are now two (defeq) group instances for `subgroup`. This makes some code more fragile, until we can replace `subgroup.to_group` with its more generic form in a follow-up PR. Especially when taking subgroups of subgroups I needed to help the elaborator in a few places. These should be minimally invasive for other uses of the code.
## Timeout fixes
Some of the leaf files started timing out, so I made a couple of fixes. Generally these can be classed as:
 * `squeeze_simps`
 * Give inheritance `subX_class S M` → `X s` (where `s : S`) a lower prority than `Y s` → `X s` so that `subY_class S M` → `Y s` → `X s` is preferred over `subY_class S M` → `subX_class S M` → `X s`. This addresses slow unifications when `x : s`, `s` is a submonoid of `t`, which is itself a subgroup of `G`: existing code expects to go `subgroup → group → monoid`, which got changed to `subgroup_class → submonoid_class → monoid`; when this kind of unification issue appears in your type this results in slow unification. By tweaking the priorities, we help the elaborator find our preferred instance, avoiding the big defeq checks. (The real fix should of course be to fix the unifier so it doesn't become exponential in these kinds of cases.)
 * Split a long proof with duplication into smaller parts. This was basically my last resort.
I decided to bump the limit for the `fails_quickly` linter for `measure_theory.Lp_meas.complete_space`, which apparently just barely goes over this limit now. The time difference was about 10%-20% for that specific instance.

2022-04-05 11:06:01 220f71b
refactor(data/polynomial/basic): overhaul all the misnamed `to_finsupp` lemmas (#13139)
`zero_to_finsupp` was the statement `of_finsupp 0 = 0`, which doesn't match the name at all.
This change:
* Renames all those lemmas to `of_finsupp_<foo>`
* Changes the direction of `add_to_finsupp` to be `of_finsupp_add`, so the statement is now `of_finsupp (a + b) = _`
* Adds the missing `to_finsupp_<foo>` lemmas
* Uses the new lemmas to golf the semiring and ring instances
The renames include:
* `zero_to_finsupp` → `of_finsupp_zero`
* `one_to_finsupp` → `of_finsupp_one`
* `add_to_finsupp` → `of_finsupp_add` (direction reversed)
* `neg_to_finsupp` → `of_finsupp_neg` (direction reversed)
* `mul_to_finsupp` → `of_finsupp_mul` (direction reversed)
* `smul_to_finsupp` → `of_finsupp_smul` (direction reversed)
* `sum_to_finsupp` → `of_finsupp_sum` (direction reversed)
* `to_finsupp_iso_monomial` → `to_finsupp_monomial`
* `to_finsupp_iso_symm_single` → `of_finsupp_single`
* `eval₂_to_finsupp_eq_lift_nc` → `eval₂_of_finsupp`
The new lemmas include:
* `of_finsupp_sub`
* `of_finsupp_pow`
* `of_finsupp_erase`
* `of_finsupp_algebra_map`
* `of_finsupp_eq_zero`
* `of_finsupp_eq_one`
* `to_finsupp_zero`
* `to_finsupp_one`
* `to_finsupp_add`
* `to_finsupp_neg`
* `to_finsupp_sub`
* `to_finsupp_mul`
* `to_finsupp_pow`
* `to_finsupp_erase`
* `to_finsupp_algebra_map`
* `to_finsupp_eq_zero`
* `to_finsupp_eq_one`
* `to_finsupp_C`
Note that by marking things like `support` and `coeff` as `@[simp]`, they behave as if they were `support_of_finsupp` or `coeff_of_finsupp` lemma. By making `coeff` pattern match fewer arguments, we encourage it to apply more keenly.
Neither lemma will fire unless our expression contains `polynomial.of_finsupp`.

2022-04-05 11:06:00 c108ed4
feat(topology/algebra): add several lemmas (#13135)
* add `closure_smul`, `interior_smul`, and `closure_smul₀`;
* add `is_open.mul_closure` and `is_open.closure_mul`.

2022-04-05 11:05:59 bb4099b
feat(analysis/normed/normed_field): add abs_le_floor_nnreal_iff (#13130)
From LTE.

2022-04-05 11:05:57 c7626b7
feat(analysis/calculus/fderiv_analytic): an analytic function is smooth (#13127)
This basic fact was missing from the library, but all the nontrivial maths were already there, we are just adding the necessary glue.
Also, replace `ac_refl` by `ring` in several proofs (to go down from 30s to 4s in one proof, for instance). I wonder if we should ban `ac_refl` from mathlib currently.

2022-04-05 11:05:56 cbbaef5
chore(algebra/field_power): generalisation linter (#13107)
@alexjbest, this one is slightly more interesting, as the generalisation linter detected that two lemmas were stated incorrectly!

2022-04-05 11:05:55 225d1ce
refactor(combinatorics/hall/finite): small simplifications and readability improvements (#13091)

2022-04-05 09:11:51 9ff42fd
feat(topology/fiber_bundle): lemmas about `e.symm.trans e'` (#13168)

2022-04-05 09:11:50 01a424b
feat(analysis): continuous_linear_map.prod_mapL (#13165)
From the sphere eversion project,
Co-authored by Heather Macbeth <25316162+hrmacbeth@users.noreply.github.com>

2022-04-05 09:11:49 0e26022
feat(group_theory/complement): Existence of transversals (#13016)
This PR constructs transversals containing a specified element. This will be useful for Schreier's lemma (which requires a transversal containing the identity element).

2022-04-05 09:11:48 63feb1b
feat(group_theory/index): Add `relindex_le_of_le_left` and `relindex_le_of_le_right` (#13015)
This PR adds `relindex_le_of_le_left` and `relindex_le_of_le_right`, which are companion lemmas to `relindex_eq_zero_of_le_left` and `relindex_eq_zero_of_le_right`.

2022-04-05 09:11:47 ea1917b
feat(algebra/group/to_additive + algebra/regular/basic): add to_additive for `is_regular` (#12930)
This PR add the `to_additive` attribute to most lemmas in the file `algebra.regular.basic`.
I also added `to_additive` support for this: `to_additive` converts
*  `is_regular` to `is_add_regular`;
*  `is_left_regular` to `is_add_left_regular`;
*  `is_right_regular` to `is_add_right_regular`.
~~Currently, `to_additive` converts `regular` to `add_regular`.  This means that, for instance, `is_left_regular` becomes `is_left_add_regular`.~~
~~I have a slight preference for `is_add_left_regular/is_add_right_regular`, but I am not able to achieve this automatically.~~
~~EDIT: actually, the command~~
```
git ls-files | xargs grep -A1 "to\_additive" | grep -B1 regular
```
~~reveals more name changed by `to_additive` that require more thought.~~

2022-04-05 08:08:57 21c48e1
doc(topology/algebra/*): explanation of relation between `uniform_group` and `topological_group` (#13151)
Adding some comments on how to use `uniform_group` and `topological_group`.

2022-04-05 05:20:37 429c6e3
chore(topology/algebra/infinite_sum): weaken from equiv to surjective (#13164)

2022-04-05 05:20:36 4c83474
chore(model_theory/basic): Fix namespace on notation for first-order maps (#13145)
Removes projection notation from the definition of notation for first-order maps

2022-04-05 03:53:18 41cd2f8
chore(data/fin/tuple/basic): lemmas about `cons` (#13027)

2022-04-04 23:36:07 4eee8bc
chore(order/complete_lattice): Generalize `⨆`/`⨅` lemmas to dependent families (#13154)
The "bounded supremum" and "bounded infimum" are both instances of nested `⨆`/`⨅`. But they only apply when the inner one runs over a predicate `p : ι → Prop`, and the function couldn't depend on `p`. This generalizes to `κ : ι → Sort*` and allows dependence on `κ i`.
The lemmas are renamed from `bsupr`/`binfi` to `supr₂`/`infi₂` to show that they are more general.
Some lemmas were missing between `⨆` and `⨅` or between `⨆`/`⨅` and nested `⨆`/`⨅`, so I'm adding them as well.
Renames

2022-04-04 20:06:50 bae79d0
chore(number_theory/cyclotomic/discriminant): golf `repr_pow_is_integral` a little (#13167)
Using nice mathlib tactics instead of doing boilerplate tasks by hand to reduce the verbosity.

2022-04-04 20:06:48 a925d1d
chore(topology/algebra/module/basic): add continuous_linear_map.copy (#13166)
As suggested by the fun_like docs

2022-04-04 18:23:21 05e2fc0
chore(order/*): generalisation linter (#13105)

2022-04-04 16:21:07 fe21f5d
feat(group_theory/torsion): define torsion subgroups and show they're torsion (#12769)
Also tidy up some linter errors and docstring for the module.

2022-04-04 16:21:06 2108284
refactor(order/succ_order/basic): Use `is_min`/`is_max` (#12597)
Reformulate the `succ a ≤ a` and `a ≤ pred a` conditions to use `is_max` and `is_min`. This simplifies the proofs.
Change namespaces from `succ_order` and `pred_order` to `order`.
Lemma renames

2022-04-04 14:28:18 f55d352
feat(order/filter/n_ary): Binary and ternary maps of filters (#13062)
Define `filter.map₂` and `filter.map₃`, the binary and ternary maps of filters.

2022-04-04 09:32:39 b189be7
feat(algebra/big_operators): add `commute.*_sum_{left,right}` lemmas (#13035)
This moves the existing `prod_commute` lemmas into the `commute` namespace for discoverabiliy, and adds the swapped variants.
This also fixes an issue where lemmas about `add_commute` were misnamed using `commute`.

2022-04-04 08:56:24 19448a9
refactor(group_theory/schur_zassenhaus): Some golfing (#13017)
This PR uses `mem_left_transversals.to_equiv` to golf the start of `schur_zassenhaus.lean`.

2022-04-04 08:23:22 0cb9407
chore(measure_theory/function/locally_integrable): fix typo (#13160)

2022-04-04 06:48:14 6dde651
feat(algebra/quaternion): Cardinality of quaternion algebras (#12891)

2022-04-04 06:15:27 8cb151f
feat(number_theory/cyclotomic/discriminant): add discr_zeta_eq_discr_zeta_sub_one (#12710)
We add `discr_zeta_eq_discr_zeta_sub_one`: the discriminant of the power basis given by a primitive root of unity `ζ` is the same as the
discriminant of the power basis given by `ζ - 1`.
from flt-regular

2022-04-03 17:52:03 61e18ae
fix(data/polynomial/basic): op_ring_equiv docstring (#13132)

2022-04-03 16:42:11 36e1cdf
feat(topology/uniform_space/basic): constructing a `uniform_space.core` from a filter basis for the uniformity (#13065)

2022-04-03 11:32:25 1212818
feat(category_theory/abelian): transferring "abelian-ness" across a functor (#13059)
If `C` is an additive category, `D` is an abelian category,
we have `F : C ⥤ D` `G : D ⥤ C` (both preserving zero morphisms),
`G` is left exact (that is, preserves finite limits),
and further we have `adj : G ⊣ F` and `i : F ⋙ G ≅ 𝟭 C`,
then `C` is also abelian.
See https://stacks.math.columbia.edu/tag/03A3

2022-04-03 09:48:57 6e26cff
feat(analysis/special_functions): add the Gamma function (#12917)

2022-04-03 06:44:02 6e5ca7d
chore(*): Bump to Lean 3.42.1 (#13146)

2022-04-03 06:44:01 d6731a4
docs(data/polynomial/basic): Remove commutative from doc-module (#13144)

2022-04-03 04:50:50 4f14d4d
chore(topology/vector_bundle): split long proof (#13142)
The construction of the direct sum of two vector bundles is on the verge of timing out, and an upcoming refactor will push it over the edge.  Split it pre-emptively.

2022-04-03 04:50:49 410e3d0
feat(logic/small, model_theory/*): Smallness of vectors, lists, terms, and substructures (#13123)
Provides instances of `small` on vectors, lists, terms, and `substructure.closure`.

2022-04-03 04:50:48 2d22b5d
chore(algebra/*): generalisation linter (#13109)

2022-04-03 04:50:47 d33ea7b
chore(ring_theory/polynomial/pochhammer): make semiring implicit in a lemma that I just moved (#13077)
Moving lemma `pochhammer_succ_eval` to reduce typeclass assumptions (#13024), the `semiring` became accidentally explicit.  Since one of the explicit arguments of the lemma is a term in the semiring, I changed the `semiring` to being implicit.
The neighbouring lemmas do not involve terms in their respective semiring, which is why the semiring is explicit throughout the section.

2022-04-03 04:50:46 955e95a
feat(logic/function/basic): add some more API for `injective2` (#13074)
Note that the new `.left` and `.right` lemmas are weaker than the original ones, but the original lemmas were pretty much useless anyway, as `hf.left h` was the same as `(hf h).left`.

2022-04-03 03:07:24 ef7298d
chore(data/nat/gcd): move nat.coprime.mul_add_mul_ne_mul (#13022)
I'm not sure if it will be useful elsewhere, but this seems like a better place for it anyway.

2022-04-03 02:04:00 e1eb0bd
feat(algebra/algebra/unitization): add star structure for the unitization of a non-unital algebra (#13120)
The unitization of an algebra has a natural star structure when the underlying scalar ring and non-unital algebra have suitably interacting star structures.

2022-04-03 00:36:47 e41208d
feat(category_theory/monoidal): define monoidal structures on cartesian products of monoidal categories, (lax) monoidal functors and monoidal natural transformations (#13033)
This PR contains (fairly straightforward) definitions / proofs of the following facts:
- Cartesian product of monoidal categories is a monoidal category.
- Cartesian product of (lax) monoidal functors is a (lax) monoidal functor.
- Cartesian product of monoidal natural transformations is a monoidal natural transformation.
These are prerequisites to defining a monoidal category structure on the category of monoids in a braided monoidal category (with the approach that I've chosen).  In particular, the first bullet point above is a prerequisite to endowing the tensor product functor, viewed as a functor from `C × C` to `C`, where `C` is a braided monoidal category, with a strength that turns it into a monoidal functor (stacked  PR).
This fits as follows into the general strategy for defining a monoidal category structure on the category of monoids in a braided monoidal category `C`, at least conceptually:
first, define a monoidal category structure on the category of lax monoidal functors into `C`, and then transport this structure to the category `Mon_ C` of monoids along the equivalence between `Mon_ C` and the category `lax_monoid_functor (discrete punit) C`.  All, not necessarily lax monoidal functors into `C` form a monoidal category with "pointwise" tensor product.  The tensor product of two lax monoidal functors equals the composition of their cartesian product, which is lax monoidal, with the tensor product on`C`, which is monoidal if `C` is braided.  This gives a way to define a tensor product of two lax monoidal functors.  The details still need to be fleshed out.

2022-04-02 23:29:08 bb5e598
feat(set_theory/cardinal_ordinal): Add `simp` lemmas for `aleph` (#13056)

2022-04-02 22:23:30 d4b40c3
feat(measure_theory/measure/haar_lebesgue): measure of an affine subspace is zero (#13137)
* Additive Haar measure of an affine subspace of a finite dimensional
real vector space is zero.
* Additive Haar measure of the image of a set `s` under `homothety x r` is
  equal to `|r ^ d| * μ s`.

2022-04-02 22:23:29 7617942
feat(order/filter/basic): add `filter.eventually_{eq,le}.prod_map` (#13103)

2022-04-02 19:43:29 a29bd58
feat(algebra/regular/basic): add lemma commute.is_regular_iff (#13104)
This lemma shows that an element that commutes with every element is regular if and only if it is left regular.

2022-04-02 16:29:33 8e476fa
chore(topology/vector_bundle): use continuous-linear rather than linear in core construction (#13053)
The `vector_bundle_core` construction builds a vector bundle from a cocycle, the data of which are an open cover and a choice of transition function between any two elements of the cover.  Currently, for base `B` and model fibre `F`, the transition function has type `ι → ι → B → (F →ₗ[R] F)`.
This PR changes it to type `ι → ι → B → (F →L[R] F)`.  This is no loss of generality since there already were other conditions which forced the transition function to be continuous-linear on each fibre.  Of course, it is a potential loss of convenience since the proof obligation for continuity now occurs upfront.
The change is needed because in the vector bundle refactor to come, the further condition will be imposed that each transition function `B → (F →L[R] F)` is continuous; stating this requires a topology on `F →L[R] F`.

2022-04-02 15:55:20 cf6f27e
refactor(topology/{fiber_bundle, vector_bundle}): make trivializations data rather than an existential (#13052)
Previously, the construction `topological_vector_bundle` was a mixin requiring the _existence_ of a suitable trivialization at each point.
Change this to a class with data: a choice of trivialization at each point.  This has no effect on the mathematics, but it is necessary for the forthcoming refactor in which a further condition is imposed on the mutual compatibility of the trivializations.
Furthermore, attach to `topological_vector_bundle` and to two other constructions `topological_fiber_prebundle`, `topological_vector_prebundle` a further piece of data: an atlas of "good" trivializations.  This is not really mathematically necessary, since you could always take the atlas of "good" trivializations to be simply the set of canonical trivializations at each point in the manifold.  But sometimes one naturally has this larger "good" class and it's convenient to be able to access it.  The `charted_space` definition in the manifolds library does something similar.

2022-04-02 13:47:28 3164b1a
feat(probability/independence): two lemmas on indep_fun (#13126)
These two lemmas show that `indep_fun` is preserved under composition by measurable maps and under a.e. equality.

2022-04-02 13:47:26 1d5b99b
feat(group_theory/free_product): add (m)range_eq_supr (#12956)
and lemmas leading to it as inspired by the corresponding lemmas from
`free_groups.lean`.
As suggested by @ocfnash, polish the free group lemmas a bit as well.

2022-04-02 11:56:22 7df5907
chore(algebra/order/ring): generalisation linter (#13096)

2022-04-02 01:59:06 607f4f8
feat(model_theory/semantics): A simp lemma for `Theory.model` (#13117)
Defines `Theory.model_iff` to make it easier to show when a structure models a theory.

2022-04-01 22:20:38 6dad5f8
feat(topology/bornology/basic): alternate way of defining a bornology by its bounded set (#13064)
More precisely, this defines an alternative to https://leanprover-community.github.io/mathlib_docs/topology/bornology/basic.html#bornology.of_bounded (which is renamed `bornology.of_bounded'`) which expresses the covering condition as containing the singletons, and factors the old version trough it to have a simpler proof.
Note : I chose to add a prime to the old constructor because it's now defined in terms of the new one, so defeq works better this way (i.e lemma about the new constructor can be used whenever the old one is used).

2022-04-01 22:20:36 6cf5dc5
feat(topology/support): add lemma `locally_finite.exists_finset_nhd_mul_support_subset` (#13006)
When using a partition of unity to glue together a family of functions, this lemma allows
us to pass to a finite family in the neighbourhood of any point.
Formalized as part of the Sphere Eversion project.

2022-04-01 20:35:06 912f195
feat(dynamics/periodic_pts): Lemma about periodic point from periodic point of iterate (#12940)

2022-04-01 19:21:53 196a48c
feat(set_theory/ordinal_arithmetic): Coefficients of Cantor Normal Form (#12681)
We prove all coefficients of the base-b expansion of an ordinal are less than `b`. We also tweak the parameters of various other theorems.

2022-04-01 17:02:37 a3c753c
feat(topology/[subset_properties, separation]): bornologies for filter.co[closed_]compact (#12927)

2022-04-01 16:30:59 e8ef744
docs(probability/martingale): missing word (#13113)

2022-04-01 16:30:58 b365371
feat(model_theory/syntax,semantics): Sentences for binary relation properties (#13087)
Defines sentences for basic properties of binary relations
Proves that realizing these sentences is equivalent to properties in the binary relation library

2022-04-01 12:39:38 342a4b0
feat(data/polynomial/coeff): add `char_zero` instance on polynomials (#13075)
Besides adding the instance, I also added a warning on the difference between `char_zero R` and `char_p R 0` for general semirings.
An example showing the difference is in #13080.
[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F)

2022-04-01 12:39:37 89275df
feat(topology/algebra/uniform_group): add characterization of total boundedness (#12808)
The main result is `totally_bounded_iff_subset_finite_Union_nhds_one`.
We prove it for noncommutative groups, which involves taking opposites.
Add `uniform_group` instance for the opposite group.
Adds several helper lemmas for
* (co-)map of opposites applied to neighborhood filter
* filter basis of uniformity in a uniform group in terms of neighborhood basis at identity
Simplified proofs for `totally_bounded_of_forall_symm` and `totally_bounded.closure`.

2022-04-01 10:46:51 c61f7e8
chore(model_theory/elementary_maps): Fix Tarski-Vaught Test (#13102)
Fixes the assumption of the Tarski-Vaught test.

2022-04-01 10:46:50 e6a0a26
chore(algebra/order/*): generalisation linter (#13098)

2022-04-01 10:46:48 8a51798
chore(order/*): generalisation linter (#13097)

2022-04-01 10:46:47 0e95cad
chore(algebra/group_power/basic): generalisation linter (#13095)

2022-04-01 10:46:46 6652766
chore(algebra/ring/basic): generalisation linter (#13094)

2022-04-01 10:46:45 e326fe6
feat(model_theory/basic,language_map): More about `language.mk₂` (#13090)
Provides instances on `language.mk₂`
Defines `first_order.language.Lhom.mk₂`, a constructor for maps from languages built with `language.mk₂`.

2022-04-01 08:58:07 873f268
chore(group_theory/group_action/*): generalisation linter (#13100)

2022-04-01 07:06:11 3a0c034
chore(algebra/*): generalisation linter (#13099)

2022-04-01 03:39:04 9728396
chore(scripts): update nolints.txt (#13101)
I am happy to remove some nolints for you!

2022-03-31 23:56:26 2b92d08
feat(model_theory/elementary_maps): The Tarski-Vaught test (#12919)
Proves the Tarski-Vaught test for elementary embeddings and substructures.

2022-03-31 17:21:48 de50389
split(order/chain): Split off `order.zorn` (#13060)
Split `order.zorn` into two files, one about chains, the other one about Zorn's lemma.

2022-03-31 16:09:24 13e08bf
feat(model_theory/*): Constructors for low-arity languages and structures (#12960)
Defines `first_order.language.mk₂` to make it easier to define a language with at-most-binary symbols.
Defines `first_order.language.Structure.mk₂` to make it easier to define a structure in a language defined with `first_order.language₂`.
Defines `first_order.language.functions.apply₁` and `first_order.language.functions.apply₂` to make it easier to construct terms using low-arity function symbols.
Defines `first_order.language.relations.formula₁` and `first_order.language.relations.formula₂` to make it easier to construct formulas using low-arity relation symbols.

2022-03-31 16:09:23 f1ae620
feat(model_theory/bundled, satisfiability): Bundled models (#12945)
Defines `Theory.Model`, a type of nonempty bundled models of a particular theory.
Refactors satisfiability in terms of bundled models.

2022-03-31 15:26:34 2861d4e
feat(combinatorics/simple_graph/connectivity): walk constructor patterns with explicit vertices (#13078)
This saves a couple underscores, letting you write `walk.cons' _ v _ h p` instead of `@walk.cons _ _ _ v _ h p` when you want that middle vertex in a pattern.

2022-03-31 14:15:57 25ef4f0
feat(topology/algebra/matrix): more continuity lemmas for matrices (#13009)
This should cover all the definitions in `data/matrix/basic`, and also picks out a few notable definitions (`det`, `trace`, `adjugate`, `cramer`, `inv`) from other files.

2022-03-31 13:42:09 0f6eec6
feat(ring_theory/polynomial/pochhammer): generalize a proof from `comm_semiring` to `semiring` (#13024)
This PR is similar to #13018.  Lemma `pochhammer_succ_eval` was already proven with a commutativity assumption.  I generalized the proof to `semiring` by introducing a helper lemma.
I still feel that this is harder than I would like it to be: `pochhammer` "is" a polynomial in `ℕ[X]` and all these commutativity assumptions are satisfied, since `ℕ[X]` is commutative.

2022-03-31 13:00:33 1b42223
feat(analysis/locally_convex): the topology of weak duals is locally convex (#12623)

2022-03-31 12:28:09 6405a6a
feat(analysis/locally_convex): closed balanced sets are a basis of the topology (#12786)
We prove some topological properties of the balanced core.

2022-03-31 10:35:37 7833dbe
lint(algebra/*): fix some lint errors (#13058)
* add some docstrings to additive versions;
* make `with_zero.ordered_add_comm_monoid` reducible.

2022-03-31 08:43:56 ba9ead0
feat(order/sup_indep): lemmas about `pairwise` and `set.pairwise` (#12590)
The `disjoint` lemmas can now be stated in terms of these two `pairwise` definitions.
This wasn't previously possible as these definitions were not yet imported.
This also adds the `iff` versions of these lemmas, and a docstring tying them all together.

2022-03-31 06:51:20 81c5d17
chore(algebra/order/monoid_lemmas): remove exactly same lemmas (#13068)

2022-03-31 06:51:19 7a37490
feat(ring_theory/polynomial/pochhammer): add a binomial like recursion for pochhammer (#13018)
This PR proves the identity
`pochhammer R n + n * (pochhammer R (n - 1)).comp (X + 1) = (pochhammer R n).comp (X + 1)`
analogous to the additive recursion for binomial coefficients.
For the proof, first we prove the result for a `comm_semiring` as `pochhammer_add_pochhammer_aux`.  Next, we apply this identity in the general case.
If someone has any idea of how to make the maths statement: it suffices to show this identity for pochhammer symbols in the commutative case, I would be *very* happy to know!

2022-03-31 06:51:18 290f440
feat(order/category/Semilattice): The categories of semilattices (#12890)
Define `SemilatticeSup` and `SemilatticeInf`, the categories of finitary supremum lattices and finitary infimum lattices.

2022-03-31 06:51:17 760f1b2
refactor(*): rename `topological_ring` to `topological_semiring` and introduce a new `topological_ring` extending `has_continuous_neg` (#12864)
Following the discussion in this [Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/continuous.20maps.20vanishing.20at.20infinity/near/275553306), this renames `topological_ring` to `topological_semiring` throughout the library and weakens the typeclass assumptions from `semiring` to `non_unital_non_assoc_semiring`. Moreover, it introduces a new `topological_ring` class which takes a type class parameter of `non_unital_non_assoc_ring` and extends `topological_semiring` and `has_continuous_neg`.
In the case of *unital* (semi)rings (even non-associative), the type class `topological_semiring` is sufficient to capture the notion of `topological_ring` because negation is just multiplication by `-1`. Therefore, those working with unital (semi)rings can proceed with the small change of using `topological_semiring` instead of `topological_ring`.
The primary reason for the distinction is to weaken the type class assumptions to allow for non-unital rings, in which case `has_continuous_neg` must be explicitly assumed.
- [x] depends on: #12748

2022-03-31 06:19:33 c2339ca
feat(algebraic_topology): map_alternating_face_map_complex (#13028)
In this PR, we obtain a compatibility `map_alternating_face_map_complex` of the construction of the alternating face map complex functor with respect to additive functors between preadditive categories.

2022-03-31 02:41:53 8a21316
feat(combinatorics/simple_graph/regularity/bound): Numerical bounds for Szemerédi's regularity lemma (#12962)
Define the constants appearing in Szemerédi's regularity lemma and prove a bunch of numerical facts about them.

2022-03-31 02:10:17 299984b
feat(combinatorics/simple_graph/uniform): Graph uniformity and uniform partitions (#12957)
Define uniformity of a pair of vertices in a graph and uniformity of a partition of vertices of a graph.

2022-03-31 00:12:51 47b1d78
feat(linear_algebra/matrix): any matrix power can be expressed as sums of powers `0 ≤ k < fintype.card n` (#12983)
I'm not familiar enough with the polynomial API to know if we can neatly state a similar result for negative powers.

2022-03-30 17:30:25 fc35cb3
chore(data/finset/card): add `card_disj_union` (#13061)

2022-03-30 16:05:51 7f450cb
feat(topology/sets/order): Clopen upper sets (#12670)
Define `clopen_upper_set`, the type of clopen upper sets of an ordered topological space.

2022-03-30 13:52:41 518e81a
feat(topology): add lemmas about `frontier` (#13054)

2022-03-30 13:52:39 de62b06
chore(data/set/pointwise): Golf using `set.image2` API (#13051)
Add some more `set.image2` API and demonstrate use by golfing all relevant `data.set.pointwise` declarations.
Other additions

2022-03-30 13:52:38 25e8730
feat(analysis/special_functions/pow): abs value of real to complex power (#13048)

2022-03-30 13:52:37 33a323c
feat(data/fin): lemmas about ordering and cons (#13044)
This marks a few extra facts `simp`, since the analogous facts are `simp` for `nat`.

2022-03-30 13:52:33 644a848
fix(tactic/generalize_proofs): instantiate mvars (#13025)
Reported on [Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/generalize_proofs.20failed/near/276965359).

2022-03-30 13:52:32 af3911c
feat(data/polynomial/erase_lead): add two erase_lead lemmas (#12910)
The two lemmas show that removing the leading term from the sum of two polynomials of unequal `nat_degree` is the same as removing the leading term of the one of larger `nat_degree` and adding.
The second lemma could be proved with `by rw [add_comm, erase_lead_add_of_nat_degree_lt_left pq, add_comm]`, but I preferred copying the same strategy as the previous one, to avoid interdependencies.

2022-03-30 13:52:30 e31f031
feat(analysis/locally_convex): polar sets for dualities (#12849)
Define the absolute polar for a duality and prove easy properties such as
* `linear_map.polar_eq_Inter`: The polar as an intersection.
* `linear_map.subset_bipolar`: The polar is a subset of the bipolar.
* `linear_map.polar_weak_closed`: The polar is closed in the weak topology induced by `B.flip`.
Moreover, the corresponding lemmas are removed in the normed space setting as they all follow directly from the general case.

2022-03-30 11:47:45 f13ee54
chore(*): sort out some to_additive and simp orderings (#13038)
- To additive should always come after simp, unless the linter complains.
- Also make to_additive transfer the `protected` attribute for consistency.

2022-03-30 11:47:44 37a8a0b
feat(ring_theory/graded_algebra): define homogeneous localisation (#12784)
This pr defines `homogeneous_localization`. For `x` in projective spectrum of `A`, homogeneous localisation at `x` is the subring of $$A_x$$ containing `a/b` where `a` and `b` have the same degree. This construction is mainly used in constructing structure sheaf of Proj of a graded ring

2022-03-30 09:48:05 cdd1703
feat(algebra/associates): add two instances and a lemma about the order on the monoid of associates of a monoid (#12863)

2022-03-30 03:51:16 cd51f0d
fix(data/fintype/basic): generalize fintype instance for fintype.card_coe (#13055)

2022-03-30 03:51:14 f2fd6db
chore(*): removing some `by { dunfold .., apply_instance }` proofs (#13050)
Replaces the proofs `by { dunfold .., apply_instance }` by the exact term that is outputted by `show_term`.

2022-03-30 03:19:42 ca3bb9e
chore(scripts): update nolints.txt (#13057)
I am happy to remove some nolints for you!

2022-03-30 02:20:22 fc75855
feat(measure_theory/*): refactor integral to allow non second-countable target space (#12942)
Currently, the Bochner integral in mathlib only allows second-countable target spaces. This is an issue, since many constructions in spectral theory require integrals, and spaces of operators are typically not second-countable. The most general definition of the Bochner integral requires functions that may take values in non second-countable spaces, but which are still pointwise limits of a sequence of simple functions (so-called strongly measurable functions) -- equivalently, they are measurable and with second-countable range.
This PR refactors the Bochner integral, working with strongly measurable functions (or rather, almost everywhere strongly measurable functions, i.e., functions which coincide almost everywhere with a strongly measurable function). There are some prerequisistes (topological facts, and a good enough theory of almost everywhere strongly measurable functions) that have been PRed separately, but the remaining part of the change has to be done in one PR, as once one changes the basic definition of the integral one has to change all the files that depend on it.
Once the change is done, in many files the fix is just to remove `[measurable_space E] [borel_space E] [second_countable_topology E]` to make the linter happy, and see that everything still compiles. (Well, sometimes it is also much more painful, of course :-). For end users using `integrable`, nothing has to be changed, but if you need to prove integrability by hand, instead of checking `ae_measurable` you need to check `ae_strongly_measurable`. In second-countable spaces, the two of them are equivalent (and you can use `ae_strongly_measurable.ae_measurable` and `ae_measurable.ae_strongly_measurable` to go between the two of them).
The main changes are the following:
* change `ae_eq_fun` to base it on equivalence classes of ae strongly measurable functions
* fix everything that depends on this definition, including lp_space, set_to_L1, the Bochner integral and conditional expectation
* fix everything that depends on these, notably complex analysis (removing second-countability and measurability assumptions all over the place)
* A notion that involves a measurable function taking values in a normed space should probably better be rephrased in terms of strongly_measurable or ae_strongly_measurable. So, change a few definitions like `measurable_at_filter` (to `strongly_measurable_at_filter`) or `martingale`.

2022-03-30 02:20:21 d28a163
feat(linear_algebra/dual): define the algebraic dual pairing (#12827)
We define the pairing of algebraic dual and show that it is nondegenerate.

2022-03-30 00:29:28 c594e2b
feat(algebra/ring/basic): neg_zero for distrib_neg (#13049)

2022-03-30 00:29:27 b446c49
feat(set_theory/cardinal): bit lemmas for exponentiation (#13010)

2022-03-30 00:29:26 92b29c7
fix(tactic/norm_num): make norm_num user command match norm_num better (#12667)
Corrects some issues with the `#norm_num` user command that prevented it from fully normalizing expressions. Also, adds `expr.norm_num`.

2022-03-29 23:57:24 523d177
feat(combinatorics/simple_graph/regularity/energy): Energy of a partition (#12958)
Define the energy of a partition.

2022-03-29 23:24:55 50903f0
feat(algebra/algebra/unitization): define unitization of a non-unital algebra (#12601)
Given a non-unital `R`-algebra `A` (given via the type classes `[non_unital_ring A] [module R A] [smul_comm_class R A A] [is_scalar_tower R A A]`) we construct the minimal unital `R`-algebra containing `A` as an ideal. This object `unitization R A` is a type synonym for `R × A` on which we place a different multiplicative structure, namely, `(r₁, a₁) * (r₂, a₂) = (r₁ * r₂, r₁ • a₂ + r₂ • a₁ + a₁ * a₂)` where the multiplicative identity is `(1, 0)`.

2022-03-29 20:37:44 119eb05
chore(ring_theory/valuation/basic): fix valuation_apply (#13045)
Follow-up to #12914.

2022-03-29 20:37:43 e4c6449
feat(algebra/module): `sub_mem_iff_left` and `sub_mem_iff_right` (#13043)
Since it's a bit of a hassle to rewrite `add_mem_iff_left` and `add_mem_iff_right` to subtraction, I made a new pair of lemmas.

2022-03-29 20:37:42 9aec6df
feat(algebra/algebra/tower): `span A s = span R s` if `R → A` is surjective (#13042)

2022-03-29 18:32:04 d3684bc
feat(category_theory/abelian): constructor in terms of coimage-image comparison (#12972)
The "stacks constructor" for an abelian category, following https://stacks.math.columbia.edu/tag/0109.
I also factored out the canonical morphism from the abelian coimage to the abelian image (which exists whether or not the category is abelian), and reformulated `abelian.coimage_iso_image` in terms of an `is_iso` instance for this morphism.

2022-03-29 17:44:57 e92ecff
feat(algebra/direct_sum/module): link `direct_sum.submodule_is_internal` to `is_compl` (#12671)
This is then used to show the even and odd components of a clifford algebra are complementary.

2022-03-29 17:11:21 90f0bee
chore(analysis/normed_space/exponential): fix lemma names in docstrings (#13032)

2022-03-29 14:38:00 993d576
chore(data/list/pairwise): add `pairwise_bind` (#13030)

2022-03-29 14:37:59 8999813
chore(data/list): two lemmas about bind (#13029)

2022-03-29 14:37:58 cedf022
feat(ring_theory/valuation/basic): add add_valuation.valuation (#12914)

2022-03-29 13:10:46 84b8b0d
chore(topology/vector_bundle): fix timeout by optimizing proof (#13026)
This PR speeds up a big and slow definition using `simp only` and `convert` → `refine`. This declaration seems to be on the edge of timing out and some other changes like #11750 tripped it up.
Time saved if I run it with timeouts disabled:
 * master 14.8s → 6.3s
 * #11750 14.2s → 6.12s

2022-03-29 13:10:45 d5fee32
chore(algebra/field_power): slightly simplify proof of min_le_of_zpow_le_max (#13023)

2022-03-29 13:10:44 541c80d
feat(group_theory/index): Golf proof of `relindex_eq_zero_of_le_left` (#13014)
This PR uses `relindex_dvd_of_le_left` to golf the proof of `relindex_eq_zero_of_le_left`.

2022-03-29 13:10:43 e109c8f
feat(topology): basis for `𝓤 C(α, β)` and convergence of a series of `f : C(α, β)` (#11229)
* add `filter.has_basis.compact_convergence_uniformity`;
* add a few facts about `compacts X`;
* add `summable_of_locally_summable_norm`.

2022-03-29 11:26:23 66509e1
feat(data/polynomial/div): `a - b ∣ p.eval a - p.eval b` (#13021)

2022-03-29 11:26:22 111d3a4
chore(data/polynomial/eval): golf two proofs involving evals (#13020)
I shortened two proofs involving `eval/eval₂/comp`.

2022-03-29 11:26:21 b87c267
feat(topology/algebra/group): add small topology lemma (#12931)
Adds a small topology lemma by splitting `compact_open_separated_mul` into `compact_open_separated_mul_left/right`, which was useful in my proof of `Steinhaus theorem` (see #12932), as in a non-abelian group, the current version was not sufficient.

2022-03-29 09:36:12 89c8112
feat(topology/algebra/monoid): `finprod` is eventually equal to `finset.prod` (#13013)
Motivated by https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Using.20partitions.20of.20unity

2022-03-29 09:36:11 545c265
feat(data/polynomial/derivative): if `p` is a polynomial, then `p.derivative.nat_degree ≤ p.nat_degree - 1` (#12948)
I also golfed the proof that `p.derivative.nat_degree ≤ p.nat_degree`.

2022-03-29 09:36:10 4bf4d9d
feat(ring_theory/dedekind_domain/adic_valuation): add adic valuation on a Dedekind domain (#12712)
Given a Dedekind domain R of Krull dimension 1 and a maximal ideal v of R, we define the
v-adic valuation on R and prove some of its properties, including the existence of uniformizers.

2022-03-29 09:36:08 1ffd04c
feat(analysis/locally_convex): add balanced hull and core (#12537)

2022-03-29 07:35:13 0f92307
feat(data/list/chain): Simp lemma for `chain r a (l ++ b :: c :: m)` (#12969)

2022-03-29 07:35:12 1cdbc35
feat(order/hom/bounded): an order_iso maps top to top and bot to bot (#12862)

2022-03-29 07:35:11 b535c2d
feat(algebra/homology): three lemmas on homological complexes (#12742)

2022-03-29 07:35:09 1084cee
feat(category_theory/bicategory/coherence): prove the coherence theorem for bicategories (#12155)

2022-03-29 07:35:08 7b8b8f1
feat(set_theory/ordinal_arithmetic): Characterize principal multiplicative ordinals (#11701)
Two lemmas were renamed in the process:
- `mul_lt_omega` → `principal_mul_omega`
- `opow_omega` → `principal_opow_omega`
Various others were moved to `principal.lean`.

2022-03-29 05:57:42 ce3cece
feat(measure_theory/constructions/borel_space): add `borelize` tactic (#12844)

2022-03-29 05:57:41 5fb7b7b
feat(set_theory/{ordinal_arithmetic, game/nim}): Minimum excluded ordinal (#12659)
We define `mex` and `bmex`, and use the former to golf the proof of Sprague-Grundy.

2022-03-29 04:19:18 5fcad21
feat(number_theory/frobenius_number): Frobenius numbers (#9729)

2022-03-28 23:54:09 7fea719
feat(data/set/basic): Laws for n-ary image (#13011)
Prove left/right commutativity, distributivity of `set.image2` in the style of `set.image2_assoc`. Also add `forall₃_imp` and `Exists₃.imp`.

2022-03-28 23:54:08 9480029
chore(data/{nat,int,rat}/cast): add bundled version of `cast_id` lemmas (#13001)

2022-03-28 23:54:07 8c9dee1
feat(algebra/field_power): add min_le_of_zpow_le_max (#12915)

2022-03-28 22:26:18 223d9a1
feat(group_theory/quotient_group): maps of quotients by powers of integers induced by group homomorphisms (#12811)

2022-03-28 22:26:16 1a2182c
feat(group_theory/complement): Transversals as functions (#12732)
This PR adds interpretations of transversals as functions mapping elements of `G` to the chosen coset representative.

2022-03-28 20:38:27 40b142e
chore(analysis/*): move matrix definitions into their own file and generalize (#13007)
This makes it much easier to relax the typeclasses as needed.
`norm_matrix_le_iff` has been renamed to `matrix.norm_le_iff`, the rest of the lemmas have just had their typeclass arguments weakened. No proofs have changed.
The `matrix.normed_space` instance is now of the form `normed_space R (matrix n m α)` instead of `normed_space α (matrix n m α)`.

2022-03-28 20:38:26 ea97ca6
feat(group_theory/group_action): add `commute.smul_{left,right}[_iff]` lemmas (#13003)
`(r • a) * b = b * (r • a)` follows trivially from `smul_mul_assoc` and `mul_smul_comm`

2022-03-28 20:38:25 261a195
feat(group_theory/group_action/opposite): Add `smul_eq_mul_unop` (#12995)
This PR adds a simp-lemma `smul_eq_mul_unop`, similar to `op_smul_eq_mul` and `smul_eq_mul`.

2022-03-28 16:49:23 6fe0c3b
refactor(algebra/group/to_additive + files containing even/odd): move many lemmas involving even/odd to the same file (#12882)
This is the first step in refactoring the definition of `even` to be the `to_additive` of `square`.
This PR simply gathers together many (though not all) lemmas that involve `even` or `odd` in their assumptions.  The choice of which lemmas to migrate to the file `algebra.parity` was dictated mostly by whether importing `algebra.parity` in the current home would create a cyclic import.
The only change that is not a simple shift from a file to another one is the addition in `to_additive` for support to change `square` in a multiplicative name to `even` in an additive name.
The change to the test file `test.ring` is due to the fact that the definition of `odd` was no longer imported by the file.

2022-03-28 16:49:22 958f6b0
refactor(measure_theory/group/fundamental_domain): allow `null_measurable_set`s (#12005)

2022-03-28 15:03:16 abaabc8
chore(algebra/group_power/lemmas): turn `[zn]smul` lemmas into instances (#13002)
This adds new instances such that:
* `mul_[zn]smul_assoc` is `←smul_mul_assoc`
* `mul_[zn]smul_left` is `←mul_smul_comm`
This also makes `noncomm_ring` slightly smarter, and able to handle scalar actions by `nat`.
Thanks to Christopher, this generalizes these instances to non-associative and non-unital rings.

2022-03-28 15:03:14 0e1387b
feat(category_theory): the category of small categories has all small limits (#12979)

2022-03-28 15:03:13 31e5ae2
feat(data/list/cycle): Define the empty cycle (#12967)
Also clean the file up somewhat, and add various `simp` lemmas.

2022-03-28 14:30:41 0c6f0c2
feat(ring_theory/dedekind_domain/ideal): add lemmas about sup of ideal with irreducible (#12859)
These results were originally in #9345.

2022-03-28 11:39:00 4ee988d
chore(algebra/homology/homotopy): cleanup (#12998)
Correcting a name and some whitespace.

2022-03-28 11:38:59 eba31b5
feat(algebra/homology): some elementwise lemmas (#12997)

2022-03-28 11:38:58 dacf049
feat(algebra/*): coe_to_equiv_symm simp lemmas (#12996)

2022-03-28 11:38:57 f0c15be
feat(measure_theory/functions/strongly_measurable): almost everywhere strongly measurable functions (#12985)
A function is almost everywhere strongly measurable if it is almost everywhere the pointwise limit of a sequence of simple functions. These are the functions that can be integrated in the most general version of the Bochner integral. As a prerequisite for the refactor of the Bochner integral, we define almost strongly measurable functions and build a comprehensive API for them, gathering in the file `strongly_measurable.lean` all facts that will be needed for the refactor. The API does not claim to be complete, but it is already pretty big.

2022-03-28 11:38:56 fd2c6c4
chore(data/polynomial/ring_division): remove nontrivial assumptions (#12984)
Additionally, this removes:
* some `polynomial.monic` assumptions that can be handled by casing instead
* the explicit `R` argument from `is_field.to_field R hR`

2022-03-28 11:38:55 c0421e7
feat({ring_theory,group_theory}/localization): add some small lemmas for localisation API (#12861)
Add the following:
* `sub_mk`: a/b - c/d = (ad - bc)/(bd)
* `mk_pow`: (a/b)^n = a^n/b^n
* `mk_int_cast`, `mk_nat_cast`: m = m/1 for integer/natural number m.

2022-03-28 11:38:54 1ebb206
feat(ring_theory/localization): lemmas about `Frac(R)`-spans (#12425)
A couple of lemmas relating spans in the localization of `R` to spans in `R` itself.

2022-03-28 09:53:37 e48f2e8
doc(data/polynomial/field_division): fix broken docstring links (#12981)

2022-03-28 09:53:36 d31410a
doc({linear_algebra,matrix}/charpoly): add crosslinks (#12980)
This way someone coming from `undergrad.yaml` has an easy way to jump between the two statements.

2022-03-28 09:53:35 597cbf1
feat(topology/continuous_on): add `set.maps_to.closure_of_continuous_on` (#12975)

2022-03-28 09:53:34 ff72aa2
feat(data/list/big_operators): add multiplicative versions (#12966)
* add `list.length_pos_of_one_lt_prod`, generate
  `list.length_pos_of_sum_pos` using `to_additive`;
* add `list.length_pos_of_prod_lt_one` and its additive version.

2022-03-28 09:53:33 443c239
feat(data/polynomial/ring_division): `mem_root_set_iff` (#12963)

2022-03-28 09:53:31 162d83f
chore(data/matrix/basic): square matrices over a non-unital ring form a non-unital ring (#12913)

2022-03-28 09:53:30 c030dd2
feat(set_theory/cardinal): `cardinal.to_nat` is order-preserving on finite cardinals (#12763)
This PR proves that `cardinal.to_nat` is order-preserving on finite cardinals.

2022-03-28 09:53:29 2873b7a
feat(set_theory/cofinality): Lemmas relating `cof` to `lsub` and `blsub` (#12316)

2022-03-28 09:53:28 b7d6b3a
feat(topology/continuous/algebra) : giving `C(α, M)` a `has_continuous_mul` and a `has_continuous_smul` structure (#11261)
Here, `α` is a locally compact space.

2022-03-28 08:03:19 7711012
feat(order/hom/*): equivalences mapping morphisms to their dual (#12888)
Add missing `whatever_hom.dual` equivalences.

2022-03-28 06:13:19 587af99
chore(test/matrix): clean up an unused argument (#12986)
these aren't caught by linters as examples don't generate declarations

2022-03-28 06:13:17 562bbf5
feat(measure_theory/measure): add some simp lemmas, golf (#12974)
* add `top_add`, `add_top`, `sub_top`, `zero_sub`, `sub_self`;
* golf the proof of `restrict_sub_eq_restrict_sub_restrict`.

2022-03-28 06:13:16 4b05a42
feat(data/list/pairwise): `pairwise_of_forall_mem_list` (#12968)
A relation holds pairwise on a list when it does on any two of its elements.

2022-03-28 06:13:15 73a9c27
chore(analysis/analytic/basic): golf (#12965)
Golf a 1-line proof, drop an unneeded assumption.

2022-03-28 06:13:14 33afea8
feat(analysis/normed_space): generalize some lemmas (#12959)
* add `metric.closed_ball_zero'`, a version of `metric.closed_ball_zero` for a pseudo metric space;
* merge `metric.closed_ball_inf_dist_compl_subset_closure'` with `metric.closed_ball_inf_dist_compl_subset_closure`, drop an unneeded assumption `s ≠ univ`;
* assume `r ≠ 0` instead of `0 < r` in `closure_ball`, `frontier_ball`, and `euclidean.closure_ball`.

2022-03-28 06:13:12 c65d807
feat(data/polynomial/erase_lead + data/polynomial/reverse): rename an old lemma, add a stronger one (#12909)
Taking advantage of nat-subtraction in edge cases, a lemma that previously proved `x ≤ y` actually holds with `x ≤ y - 1`.
Thus, I renamed the old lemma to `original_name_aux` and `original_name` is now the name of the new lemma.  Since this lemma was used in a different file, I used the `_aux` name in the other file.
Note that the `_aux` lemma is currently an ingredient in the proof of the stronger lemma.  It may be possible to have a simple direct proof of the stronger one that avoids using the `_aux` lemma, but I have not given this any thought.

2022-03-28 06:13:11 7a1e0f2
feat(analysis/inner_product_space): an inner product space is strictly convex (#12790)

2022-03-28 05:04:36 1e72d86
chore(data/polynomial/degree/lemmas + data/polynomial/ring_division): move lemmas, reduce assumptions, golf (#12858)
This PR takes advantage of the reduced assumptions that are a consequence of #12854.  Again, I moved two lemmas from their current location to a different file, where the typeclass assumptions make more sense,

2022-03-27 19:56:25 e5cd2ea
feat(analysis/von_neumann): concrete and abstract definitions of a von Neumann algebra (#12329)

2022-03-27 15:52:15 1494a9b
feat(data/zmod/basic): add `int_coe_eq_int_coe_iff_dvd_sub` (#12944)
This adds the following API lemma.
```
lemma int_coe_eq_int_coe_iff_dvd_sub (a b : ℤ) (c : ℕ) : (a : zmod c) = ↑b ↔ ↑c ∣ b-a
```
extending the already present version with b = 0. [(Zulip discussion)](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Missing.20zmod.20lemma.3F)

2022-03-27 10:05:55 d620ad3
feat(measure_theory/measure/measure_space): remove measurable_set assumption in ae_measurable.subtype_mk (#12978)

2022-03-27 04:09:23 2c6df07
chore(model_theory/*): Split up big model theory files (#12918)
Splits up `model_theory/basic` into `model_theory/basic`, `model_theory/language_maps`, and `model_theory/bundled`.
Splits up `model_theory/terms_and_formulas` into `model_theory/syntax`, `model_theory/semantics`, and `model_theory/satisfiability`.
Adds to the module docs of these files.

2022-03-27 03:34:03 57a5fd7
chore(scripts): update nolints.txt (#12971)
I am happy to remove some nolints for you!

2022-03-27 00:27:34 664247f
chore(data/set/intervals/ord_connected): Golf proof (#12923)

2022-03-27 00:27:33 05ef694
refactor(topology/instances/ennreal): make `ennreal` an instance of `has_continuous_inv` (#12806)
Prior to the type class `has_continuous_inv`, `ennreal` had to have it's own hand-rolled `ennreal.continuous_inv` statement. This replaces it with a `has_continuous_inv` instance.
- [x] depends on: #12748

2022-03-26 23:54:12 caf6f19
refactor(category_theory/abelian): deduplicate definitions of (co)image (#12902)
Previously we made two separate definitions of the abelian (co)image, as `kernel (cokernel.π f)` / `cokernel (kernel.ι f)`,
once for `non_preadditive_abelian C` and once for `abelian C`.
This duplication wasn't really necessary, and this PR unifies them.

2022-03-26 23:17:46 f5a9d0a
feat(ring_theory/polynomial/eisenstein): add cyclotomic_prime_pow_comp_X_add_one_is_eisenstein_at (#12707)
We add `cyclotomic_prime_pow_comp_X_add_one_is_eisenstein_at`.
From flt-regular

2022-03-26 21:16:08 7b93889
refactor(data/list/basic): Remove many redundant hypotheses (#12950)
Many theorems about `last` required arguments proving that certain things were not equal to `nil`, when in fact this was always the case. These hypotheses have been removed and replaced with the corresponding proofs.

2022-03-26 21:16:07 e63e332
feat(algebra/ring/basic): all non-zero elements in a non-trivial ring with no non-zero zero divisors are regular (#12947)
Besides what the PR description says, I also golfed two earlier proofs.

2022-03-26 21:16:06 b30f25c
fix(data/set/prod): fix the way `×ˢ` associates (#12943)
Previously `s ×ˢ t ×ˢ u` was an element of `set ((α × β) × γ)` instead of `set (α × β × γ) = set (α × (β × γ))`.

2022-03-26 21:16:05 cc8c90d
chore(data/equiv): split and move to `logic/equiv` (#12929)
Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Rearranging.20files.20in.20.60data.2F.60
This PR rearranges files in `data/equiv/` by 1) moving bundled isomorphisms to a relevant subfolder of `algebra/`; 2) moving `denumerable` and `encodable` to `logic/`; 3) moving the remainder of `data/equiv/` to `logic/equiv/`. The commits of this PR correspond to those steps.
In particular, the following files were moved:
 * `data/equiv/module.lean` → `algebra/module/equiv.lean`
 * `data/equiv/mul_add.lean` → `algebra/hom/equiv.lean`
 * `data/equiv/mul_add_aut.lean` → `algebra/hom/aut.lean`
 * `data/equiv/ring.lean` → `algebra/ring/equiv.lean`
 * `data/equiv/ring_aut.lean` → `algebra/ring/aut.lean`
 * `data/equiv/denumerable.lean` → `logic/denumerable.lean`
 * `data/equiv/encodable/*.lean` → `logic/encodable/basic.lean logic/encodable/lattice.lean logic/encodable/small.lean`
 * `data/equiv/*.lean` to: `logic/equiv/basic.lean logic/equiv/fin.lean logic/equiv/functor.lean logic/equiv/local_equiv.lean logic/equiv/option.lean logic/equiv/transfer_instance.lean logic/equiv/embedding.lean logic/equiv/fintype.lean logic/equiv/list.lean logic/equiv/nat.lean logic/equiv/set.lean`

2022-03-26 20:22:51 434a938
feat(analysis/convex/strict_convex_space): Strictly convex spaces (#11794)
Define `strictly_convex_space`, a `Prop`-valued mixin to state that a normed space is strictly convex.

2022-03-26 19:19:53 1f11f3f
chore(order/filter/basic): rename using the zero subscript convention for groups with zero (#12952)

2022-03-26 18:24:35 a491055
chore(measure_theory/integral/lebesgue): extend to ae_measurable (#12953)

2022-03-26 14:15:19 cb2797e
feat(measure_theory/constructions/borel_space): drop a countability assumption (#12954)

2022-03-26 12:20:15 b7d9166
chore(measure_theory/measure/lebesgue): delete leftovers (#12951)

2022-03-26 12:20:14 1111482
feat(topology/bases): separable subsets of topological spaces (#12936)

2022-03-26 12:20:13 f68536e
feat(topology/constructions): continuity of uncurried functions when the first factor is discrete (#12935)

2022-03-26 12:20:12 5e449c2
feat(algebra/is_prime_pow): add `is_prime_pow_iff_factorization_single` (#12167)
Adds lemma `is_prime_pow_iff_factorization_single : is_prime_pow n ↔ ∃ p k : ℕ, 0 < k ∧ n.factorization = finsupp.single p k`
Also adds `pow_of_factorization_single` to `data/nat/factorization`

2022-03-26 10:30:31 023a783
feat(logic/nontrivial): `exists_pair_lt` (#12925)

2022-03-26 10:30:30 c51f4f1
feat(set_theory/cardinal_ordinal): `κ ^ n = κ` for infinite cardinals (#12922)

2022-03-26 09:35:33 9d26041
feat(topology/instances/ennreal): add `ennreal.has_sum_to_real` (#12926)

2022-03-26 03:28:38 b83bd25
feat(linear_algebra/sesquilinear_form): add nondegenerate (#12683)
Defines nondegenerate sesquilinear forms as left and right separating sesquilinear forms.

2022-03-26 02:58:15 17b621c
chore(scripts): update nolints.txt (#12946)
I am happy to remove some nolints for you!

2022-03-25 19:43:25 b6d246a
feat(topology/continuous_function/cocompact_maps): add the type of cocompact continuous maps (#12938)
This adds the type of cocompact continuous maps, which are those functions `f : α → β` for which `tendsto f (cocompact α) (cocompact β)`. These maps are of interest primarily because of their connection with continuous functions vanishing at infinity (#12907). In particular, if `f : α → β` is a cocompact continuous map and `g : β →C₀ γ` is a continuous function which vanishes at infinity, then `g ∘ f : α →C₀ γ`.
These are also related to quasi-compact maps (continuous maps for which preimages of compact sets are compact) and proper maps (continuous maps which are universally closed), neither of which are currently defined in mathlib. In particular, quasi-compact maps are cocompact continuous maps, and when the codomain is Hausdorff the converse holds also. Under some additional assumptions, both of these are also equivalent to being a proper map.

2022-03-25 18:48:49 221796a
feat(topology/metric_space/metrizable): define and use a metrizable typeclass (#12934)

2022-03-25 17:53:43 5925650
chore(nnreal): rename lemmas based on real.to_nnreal when they mention of_real (#12937)
Many lemma using `real.to_nnreal` mention `of_real` in their names. This PR tries to make things more coherent.

2022-03-25 11:39:22 2143571
feat(topology/category/Born): The category of bornologies (#12045)
Define `Born`, the category of bornological spaces with bounded maps.

2022-03-25 09:33:50 172f317
move(algebra/hom/*): Move group hom files together (#12647)
Move
* `algebra.group.freiman` to `algebra.hom.freiman`
* `algebra.group.hom` to `algebra.hom.basic`
* `algebra.group.hom_instances` to `algebra.hom.instances`
* `algebra.group.units_hom` to `algebra.hom.units`
* `algebra.group_action_hom` to `algebra.hom.group_action`
* `algebra.iterate_hom` to `algebra.hom.iterate`
* `algebra.non_unital_alg_hom` to `algebra.hom.non_unital_alg`

2022-03-25 09:03:06 351c32f
docs(docs/undergrad): Update TODO list (#12752)
Update `undergrad` with the latest additions to mathlib.

2022-03-25 02:56:04 9ee02c6
feat(data/pfun): Remove unneeded assumption from pfun.fix_induction (#12920)
Removed a hypothesis from `pfun.fix_induction`. Note that it was two "layers" deep, so this is actually a strengthening. The original can be recovered by
```lean
/-- A recursion principle for `pfun.fix`. -/
@[elab_as_eliminator] def fix_induction_original
  {f : α →. β ⊕ α} {b : β} {C : α → Sort*} {a : α} (h : b ∈ f.fix a)
  (H : ∀ a', b ∈ f.fix a' →
    (∀ a'', /- this hypothesis was removed -/ b ∈ f.fix a'' → sum.inr a'' ∈ f a' → C a'') → C a') : C a :=
by { apply fix_induction h, intros, apply H; tauto, }
```
Note that `eval_induction` copies this syntax, so the same argument was removed there as well.
This allows for some simplifications of other parts of the code. Unfortunately, it was hard to figure out what was going on in the very dense parts of `tm_to_partrec.lean` and `partrec.lean`. I mostly just mechanically removed the hypotheses that were unnecessarily being supplied, and then checked if that caused some variable to be unused and removed that etc. But I cannot tell if this allows for greater simplifications.
I also extracted two lemmas `fix_fwd` and `fix_stop` that I thought would be useful on their own.

2022-03-25 00:37:21 3dd8e4d
feat(order/category/FinBoolAlg): The category of finite Boolean algebras (#12906)
Define `FinBoolAlg`, the category of finite Boolean algebras.

2022-03-25 00:06:09 7ec1a31
fix(combinatorics/simple_graph/density): correct name in docstring (#12921)

2022-03-24 22:53:04 352ecfe
feat(combinatorics/simple_graph/{connectivity,metric}): `connected` and `dist` (#12574)

2022-03-24 17:30:47 2891e1b
feat(algebra/category/BoolRing): The category of Boolean rings (#12905)
Define `BoolRing`, the category of Boolean rings.

2022-03-24 17:30:46 f53b239
feat(model_theory/fraisse): Construct Fraïssé limits (#12138)
Constructs Fraïssé limits (nonuniquely)

2022-03-24 16:39:34 6ac7c18
feat(combinatorics/simple_graph/density): Edge density (#12431)
Define the number and density of edges of a relation and of a simple graph between two finsets.

2022-03-24 14:49:21 7302e11
feat(algebra/module/torsion): define torsion submodules (#12027)
This file defines the a-torsion and torsion submodules for a R-module M and gives some basic properties. (The ultimate goal I'm working on is to classify the finitely-generated modules over a PID).

2022-03-24 13:01:54 c7745b3
chore(order/zorn): Review (#12175)
Lemma renames

2022-03-24 12:01:35 7c48d65
feat(topology/algebra/group): define `has_continuous_inv` and `has_continuous_neg` type classes (#12748)
This creates the `has_continuous_inv` and `has_continuous_neg` type classes. The `has_continuous_neg` class will be helpful for generalizing `topological_ring` to the setting of `non_unital_non_assoc_semiring`s (see [Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/continuous.20maps.20vanishing.20at.20infinity)). In addition, `ennreal` can have a `has_continuous_inv` instance.

2022-03-24 10:12:39 eabc619
feat(ring_theory/polynomial): mv_polynomial over UFD is UFD (#12866)

2022-03-24 10:12:38 db76064
feat(*): facts about degrees/multiplicites of derivatives (#12856)
For `t` an `n`th repeated root of `p`, we prove that it is an `n-1`th repeated root of `p'` (and tidy the section around this). We also sharpen the theorem stating that `deg p' < deg p`.

2022-03-24 10:12:37 355645e
chore(data/polynomial/*): delete, rename and move lemmas (#12852)
- Replace `eval_eq_finset_sum` and `eval_eq_finset_sum'` with `eval_eq_sum_range` and `eval_eq_sum_range'` which are consistent with `eval₂_eq_sum_range`, `eval₂_eq_sum_range'` `eval_eq_finset_sum`, `eval_eq_finset_sum'`. Notice that the type of `eval_eq_sum_range'` is different, but this lemma has not been used anywhere in mathlib.
- Move the lemma `C_eq_int_cast` from `data/polynomial/degree/definitions.lean` to `data/polynomial/basic.lean`. `C_eq_nat_cast` was already here.

2022-03-24 10:12:36 c1fb0ed
feat(algebra/associated): generalize nat.prime_mul_iff (#12850)

2022-03-24 10:12:35 a5a0d23
feat(data/list/basic): nth_le+filter lemmas (#12836)

2022-03-24 10:12:34 892e611
feat(model_theory/*): Facts about countability of first-order structures (#12819)
Shows that in a countable language, a structure is countably generated if and only if it is countable.

2022-03-24 10:12:32 e6c6f00
feat(number_theory/arithmetic_function): The moebius function is multiplicative (#12796)
A fundamental property of the moebius function is that it is
multiplicative, which allows many facts about Euler products to be
expressed

2022-03-24 10:12:31 0faebd2
chore(fintype/card_embedding): generalize instances (#12775)

2022-03-24 10:12:30 0427430
feat(number_theory/function_field): add completion with respect to place at infinity (#12715)

2022-03-24 09:09:50 ca93096
feat(topology/nhds_set): add `has_basis_nhds_set` (#12908)
Also add `nhds_set_union`.

2022-03-24 07:09:35 399ce38
feat(measure_theory/integral): continuous functions with exponential decay are integrable (#12539)

2022-03-24 05:18:39 df34816
feat(ring_theory/principal_ideal_domain): add some irreducible lemmas (#12903)

2022-03-24 05:18:38 a978115
refactor(category_theory/abelian): trivial generalisations (#12897)
Trivial generalisations of some facts in `category_theory/abelian/non_preadditive.lean`.
They are true more generally, and this refactor will make it easier to do some other clean-up I'd like to perform on abelian categories.

2022-03-24 05:18:37 d4e27d0
chore(topology/separation): move a lemma, golf (#12896)
* move `t0_space_of_injective_of_continuous` up;
* add `embedding.t0_space`, use it for `subtype.t0_space`.

2022-03-24 05:18:35 e968b6d
feat(topology/continuous_function/bounded): add `bounded_continuous_function.tendsto_iff_tendsto_uniformly` (#12894)
This establishes that convergence in the metric on bounded continuous functions is equivalent to uniform convergence of the respective functions.

2022-03-24 05:18:34 a370cf0
chore(data/set/intervals): golf, rename (#12893)
* rename `set.mem_Ioo_or_eq_endpoints_of_mem_Icc` →
  `set.eq_endpoints_or_mem_Ioo_of_mem_Icc`;
* rename `set.mem_Ioo_or_eq_left_of_mem_Ico` →
  `set.eq_left_or_mem_Ioo_of_mem_Ico`;
* rename `set.mem_Ioo_or_eq_right_of_mem_Ioc` →
  `set.eq_right_or_mem_Ioo_of_mem_Ioc`;
* golf the proofs of these lemmas.
The new names better reflect the order of terms in `or`.

2022-03-24 05:18:33 5ef365a
feat(topology/separation): generalize tendsto_const_nhds_iff to t1_space (#12883)
I noticed this when working on the sphere eversion project

2022-03-24 05:18:32 6696bdd
docs(data/set/pairwise): Explain preference for `s.pairwise_disjoint id` (#12878)
... over `s.pairwise disjoint`.

2022-03-24 05:18:31 30449be
feat(data/complex/is_R_or_C): generalize `is_R_or_C.proper_space_span_singleton` to all finite dimensional submodules (#12877)
Also goes on to show that finite supremums of finite_dimensional submodules are finite-dimensional.

2022-03-24 05:18:30 debdd90
feat(tactic/ext): support rintro patterns in `ext` (#12875)
The change is actually quite simple, since `rintro_pat*` has approximately the same type as `rcases_pat*`.

2022-03-24 05:18:29 8e50164
chore(data/int/basic): remove some `eq.mpr`s from `int.induction_on'` (#12873)

2022-03-24 05:18:27 ae69578
fix(ring_theory/algebraic): Make `is_transcendental_of_subsingleton` fully general (#12870)
I mistyped a single letter.

2022-03-24 05:18:26 706a824
feat(data/{nat, real}/sqrt): Some simple facts about square roots (#12851)
Prove that sqrt 1 = 1 in the natural numbers and an order relationship between real and natural square roots.

2022-03-24 05:18:25 ec434b7
feat(group_theory/order_of_element): finite orderness is closed under mul (#12750)

2022-03-24 05:18:24 c705d41
feat(analysis/locally_convex): characterize the natural bornology in terms of seminorms (#12721)
Add four lemmas:
* `is_vonN_bounded_basis_iff`: it suffices to check boundedness for a basis
* `seminorm_family.has_basis`: the basis sets form a basis of the topology
* `is_bounded_iff_finset_seminorm_bounded`: a set is von Neumann bounded iff it is bounded for all finite suprema of seminorms
* `is_bounded_iff_seminorm_bounded`: a set is von Neumann bounded iff it is bounded for each seminorm
Also make the set argument in `seminorm_family.basis_sets_iff` implicit.

2022-03-24 05:18:23 cbd1e98
chore(algebra/category/*): simp lemmas for of_hom (#12638)

2022-03-24 04:46:31 7967128
feat(data/complex/basic): `#ℂ = 𝔠` (#12871)

2022-03-23 23:02:08 584ae9d
chore(data/{lists,multiset}/*): More dot notation (#12876)
Rename many `list` and `multiset` lemmas to make them eligible to dot notation. Also add a few aliases to `↔` lemmas for even more dot notation.
Renames

2022-03-23 21:13:19 e620519
feat(order/hom/*): more superclass instances for `order_iso_class` (#12889)
 * Weaken hypotheses on `order_hom_class` and some subclasses
 * Add more instances deriving specific order hom classes from `order_iso_class`

2022-03-23 21:13:18 3b8d217
refactor(order/upper_lower): Use `⨆` rather than `Sup` (#12644)
Turn `Sup (coe '' S)` into  `⋃ s ∈ S, ↑s` and other similar changes. This greatly simplifies the proofs.

2022-03-23 20:36:51 cd94287
feat(category_theory/abelian): right derived functor in abelian category with enough injectives (#12810)
This pr shows that in an abelian category with enough injectives, if a functor preserves finite limits, then the zeroth right derived functor is naturally isomorphic to itself.  Dual to #12403 ↔️

2022-03-23 20:36:49 84a438e
refactor(algebraic_geometry/*): rename structure sheaf to `Spec.structure_sheaf` (#12785)
Following [this Zulip message](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Rename.20.60structure_sheaf.60.20to.20.60Spec.2Estructure_sheaf.60/near/275649595), this pr renames `structure_sheaf` to `Spec.structure_sheaf`

2022-03-23 12:35:46 16fb8e2
chore(model_theory/terms_and_formulas): `realize_to_prenex` (#12884)
Proves that `phi.to_prenex` has the same realization in a nonempty structure as the original formula `phi` directly, rather than using `semantically_equivalent`.

2022-03-23 12:35:45 64472d7
feat(ring_theory/polynomial/basic): the isomorphism between `R[a]/I[a]` and `(R/I[X])/(f mod I)` for `a` a root of polynomial `f` and `I` and ideal of `R` (#12646)
This PR defines the isomorphism between the ring `R[a]/I[a]` and the ring `(R/I[X])/(f mod I)` for `a` a root of the polynomial `f` with coefficients in `R` and `I` an ideal of `R`. This is useful for proving the Dedekind-Kummer Theorem.

2022-03-23 10:41:04 9126310
chore(docs/references): Remove duplicate key (#12901)
and clean up the rest while I'm at it.

2022-03-23 10:41:02 2308b53
feat(model_theory/terms_and_formulas): Make `Theory.model` a class (#12867)
Makes `Theory.model` a class

2022-03-23 10:08:10 92f2669
feat(algebra/homology/quasi_iso): 2-out-of-3 property (#12898)

2022-03-23 08:42:10 11a365d
feat(linear_algebra/matrix): add variants of the existing `det_units_conj` lemmas (#12881)

2022-03-23 00:37:13 c60bfca
chore(data/nat/prime): golf nat.dvd_prime_pow (#12886)

2022-03-22 22:13:57 d711d2a
feat(set_theory/ordinal): Small iff cardinality less than `cardinal.univ` (#12887)
Characterizes when a type is small in terms of its cardinality

2022-03-22 20:22:10 3838b85
feat(model_theory/*): Language equivalences (#12837)
Defines equivalences between first-order languages

2022-03-22 20:22:09 f7905f0
feat(order/concept): Concept lattices (#12286)
Define `concept`, the type of concepts of a relation, and prove it forms a complete lattice.

2022-03-22 20:22:08 b226b4b
feat(*): `has_repr` instances for `option`-like types (#11282)
This provides the `has_repr` instance for `with_bot α`, `with_top α`, `with_zero α`, `with_one α`, `alexandroff α`.

2022-03-22 19:50:36 980185a
feat(algebra/{group,module}/ulift): Missing `ulift` instances (#12879)
Add a few missing algebraic instances for `ulift` and golf a few existing ones.

2022-03-22 14:24:51 6a55ba8
feat(algebra/subalgebra/basic): Missing scalar instances (#12874)
Add missing scalar instances for `submonoid`, `subsemiring`, `subring`, `subalgebra`.

2022-03-22 14:24:49 5215940
feat(order/filter/basic): `filter` is a `coframe` (#12872)
Provide the `coframe (filter α)` instance and remove now duplicated lemmas.

2022-03-22 14:24:48 1f47016
refactor(order/hom/complete_lattice): Fix the definition of `frame_hom` (#12855)
I misread "preserves finite meet" as "preserves binary meet", meaning that currently a `frame_hom` does not have to preserve `⊤` (subtly, preserving arbitrary join does not imply that either). This fixes my mistake.

2022-03-22 12:35:31 d586195
feat(data/finset/pointwise): Missing operations (#12865)
Define `-s`, `s⁻¹`, `s - t`, `s / t`, `s +ᵥ t`, `s • t`, `s -ᵥ t`, `a • s`, `a +ᵥ s` for `s`, `t` finsets, `a` scalar. Provide a bare API following what is already there for `s + t`, `s * t`.

2022-03-22 09:42:58 28eb06f
feat(analysis/calculus): define `diff_on_int_cont` (#12688)

2022-03-22 09:42:57 5826b2f
feat(topology/order/hom/esakia): Esakia morphisms (#12241)
Define pseudo-epimorphisms and Esakia morphisms following the hom refactor.

2022-03-22 08:35:26 41d291c
feat(algebra/big_operators/associated): generalize prod_primes_dvd (#12740)

2022-03-22 08:03:55 3ce4161
refactor(measure_theory/integral): restrict interval integrals to real intervals (#12754)
This way `∫ x in 0 .. 1, (1 : real)` means what it should, not `∫ x : nat in 0 .. 1, (1 : real)`.

2022-03-22 06:15:55 b0f585c
feat(combinatorics/simple_graph/inc_matrix): Incidence matrix (#10867)
Define the incidence matrix of a simple graph and prove the basics, including some stuff about matrix multiplication.

2022-03-22 03:26:17 01eb653
chore(scripts): update nolints.txt (#12868)
I am happy to remove some nolints for you!

2022-03-22 01:36:27 e51377f
feat(logic/basic): `ulift.down` is injective (#12824)
We also make the arguments to `plift.down_inj` inferred.

2022-03-22 00:37:25 d71e06c
feat(topology/algebra/monoid): construct a unit from limits of units and their inverses (#12760)

2022-03-21 20:08:03 f9dc84e
feat(topology/continuous_function/units): basic results about units in `C(α, β)` (#12687)
This establishes a few facts about units in `C(α, β)` including the equivalence `C(α, βˣ) ≃ C(α, β)ˣ`. Moreover, when `β` is a complete normed field, we show that the spectrum of `f : C(α, β)` is precisely `set.range f`.

2022-03-21 19:25:50 8001ea5
feat(category_theory/abelian): right derived functor (#12841)
This pr dualises derived.lean. Right derived functor and natural transformation between right derived functors and related lemmas are formalised. 
The docs string currently contains more than what is in this file, but everything else will come shortly after.

2022-03-21 18:05:19 25ec622
feat(data/polynomial/eval + data/polynomial/ring_division): move a lemma and remove assumptions (#12854)
A lemma about composition of polynomials assumed `comm_ring` and `is_domain`.  The new version assumes `semiring`.
I golfed slightly the original proof: it may very well be that a shorter proof is available!
I also moved the lemma, since it seems better for this lemma to appear in the file where the definition of `comp` appears.

2022-03-21 18:05:18 fd4a034
refactor(analysis/locally_convex/with_seminorms): use abbreviations to allow for dot notation (#12846)

2022-03-21 16:35:37 a2e4802
feat(model_theory/fraisse): Defines Fraïssé classes (#12817)
Defines the age of a structure
(Mostly) characterizes the ages of countable structures
Defines Fraïssé classes

2022-03-21 16:35:35 1b787d6
feat(linear_algebra/span): generalize span_singleton_smul_eq (#12736)

2022-03-21 16:35:34 df299a1
docs(order/filter/basic): fix docstring of generate (#12734)

2022-03-21 16:35:33 09750eb
feat(measure_theory/function/uniform_integrable): add API for uniform integrability in the probability sense (#12678)
Uniform integrability in probability theory is commonly defined as the uniform existence of a number for which the expectation of the random variables restricted on the set for which they are greater than said number is arbitrarily small. We have defined it 
in mathlib, on the other hand, as uniform integrability in the measure theory sense + existence of a uniform bound of the Lp norms. 
This PR proves the first definition implies the second while a later PR will deal with the reverse direction.

2022-03-21 16:35:32 715f984
feat(model_theory/terms_and_formulas): Prenex Normal Form (#12558)
Defines `first_order.language.bounded_formula.to_prenex`, a function which takes a formula and outputs an equivalent formula in prenex normal form.
Proves inductive principles based on the fact that every formula is equivalent to one in prenex normal form.

2022-03-21 14:42:55 091f27e
chore(order/{complete_lattice,sup_indep}): move `complete_lattice.independent` (#12588)
Putting this here means that in future we can talk about `pairwise_disjoint` at the same time, which was previously defined downstream of `complete_lattice.independent`.
This commit only moves existing declarations and adjusts module docstrings.
The new authorship comes from #5971 and #7199, which predate this file.

2022-03-21 12:46:46 135c574
feat(model_theory/definability): Definability lemmas (#12262)
Proves several lemmas to work with definability over different parameter sets.
Shows that definability is closed under projection.

2022-03-21 11:08:42 86055c5
split(data/{finset,set}/pointwise): Split off `algebra.pointwise` (#12831)
Split `algebra.pointwise` into
* `data.set.pointwise`: Pointwise operations on `set`
* `data.finset.pointwise`: Pointwise operations on `finset`
I'm crediting
* The same people for `data.set.pointwise`
* Floris for #3541

2022-03-21 09:13:23 8161ba2
feat(model_theory/ultraproducts): Ultraproducts and the Compactness Theorem (#12531)
Defines `filter.product`, a dependent version of `filter.germ`.
Defines a structure on an ultraproduct (a `filter.product` with respect to an ultrafilter).
Proves Łoś's Theorem, characterizing when an ultraproduct realizes a formula.
Proves the Compactness theorem with ultraproducts.

2022-03-21 07:40:25 8e9abe3
feat(measure_theory/constructions/borel_space): generalize a lemma (#12843)
Generalize `measurable_limit_of_tendsto_metric_ae` from
`at_top : filter ℕ` to any countably generated filter on a nonempty type.

2022-03-21 05:51:55 d902c22
chore(category/abelian/derived): shorten proof (#12847)

2022-03-21 05:51:54 395019e
feat(algebra/homology/additive): dualise statement of chain complex to cochain complex (#12840)

2022-03-21 05:51:53 69d3d16
feat(polynomial/derivative): tidy+new theorems (#12833)
Adds `iterate_derivative_eq_zero` and strengthens other results.
New theorems: `iterate_derivative_eq_zero`, `nat_degree_derivative_le`
Deleted: `derivative_lhom` - it is one already.
Misc: Turn a docstring into a comment
Everything else only got moved around + golfed, in order to weaken assumptions.

2022-03-21 05:51:52 06017e0
feat(order/compare): add 4 dot notation lemmas (#12832)

2022-03-21 05:51:51 f5987b2
chore(data/real/basic): tweak lemmas about `of_cauchy` (#12829)
These lemmas are about `real.of_cauchy` not `real.cauchy`, as their name suggests.
This also flips the direction of some of the lemmas to be consistent with the zero and one lemmas.
Finally, this adds the lemmas about `real.cauchy` that are missing.

2022-03-21 05:51:50 772c776
feat(ring_theory/algebraic): Added basic lemmas + golf (#12820)

2022-03-21 05:20:44 60af3bd
feat(data/rat/denumerable): Make `mk_rat` into a simp lemma (#12821)

2022-03-20 20:14:43 656f749
feat(analysis/locally_convex): define von Neumann boundedness (#12449)
Define the von Neumann boundedness and show elementary properties, including that it defines a bornology.

2022-03-20 15:25:50 9502db1
refactor(group_theory/group_action/basic): Golf definition of action on cosets (#12823)
This PR golfs the definition of the left-multiplication action on left cosets.
I deleted `mul_left_cosets` since it's the same as `•` and has no API.

2022-03-20 12:26:39 f2fa1cf
feat(category_theory/abelian/*): add some missing lemmas (#12839)

2022-03-20 00:39:53 cdd0572
chore(ring_theory/algebraic): fix typo + golf (#12834)

2022-03-19 23:35:59 6abfb1d
feat(analysis/normed_space/spectrum): Prove the Gelfand-Mazur theorem (#12787)
**Gelfand-Mazur theorem** For a complex Banach division algebra, the natural `algebra_map ℂ A` is an algebra isomorphism whose inverse is given by selecting the (unique) element of `spectrum ℂ a`.
- [x] depends on: #12132

2022-03-19 21:04:04 cd012fb
chore(ring_theory/ideal): use `ideal.mul_mem_left` instead of `submodule.smul_mem` (#12830)
In one place this saves one rewrite.

2022-03-19 19:33:01 f120076
feat(category_theory): (co)equalizers and (co)kernels when composing with monos/epis (#12828)

2022-03-19 19:33:00 49cd1cc
refactor(analysis/seminorm): move topology induced by seminorms to its own file (#12826)
Besides the copy and paste I removed the namespace `seminorm` from most parts (it is still there for the boundedness definitions and statements) and updated the module docstrings. No real code has changed.

2022-03-19 19:32:59 2660d16
feat(group_theory/group_action/basic): Right action of normalizer on left cosets (#12822)
This PR adds the right action of the normalizer on left cosets.

2022-03-19 17:43:23 48eacc6
chore(*): update to lean 3.42.0c (#12818)

2022-03-19 14:49:29 42dcf35
chore(algebra/char_p/exp_char): golf char_eq_exp_char_iff (#12825)

2022-03-19 11:33:35 3ba1c02
feat(group_theory/subgroup/basic): Alternate version of `mem_normalizer_iff` (#12814)
This PR adds an alternate version of `mem_normalizer_iff`, in terms of commuting rather than conjugation.

2022-03-19 11:33:34 52b9b36
feat(ring_theory/fractional_ideal): fractional ideal is one if and only if ideal is one (#12813)

2022-03-19 11:33:33 245b614
chore(measure_theory/measure): move subtraction to a new file (#12809)

2022-03-19 11:33:32 dae6155
chore(number_theory/primorial): golf a proof (#12807)
Use a new lemma to golf a proof.

2022-03-19 11:33:31 1d18309
feat(linear_algebra/determinant): no need for `is_domain` (#12805)
Nontriviality is all that was actually used, and in some cases the statement is already vacuous in the trivial case.

2022-03-19 11:33:30 ef69547
feat(group_theory/finiteness): Define the minimum number of generators (#12765)
The PR adds a definition of the minimum number of generators, which will be needed for a statement of Schreier's lemma.

2022-03-19 09:56:20 ee4472b
feat(group_theory/group_action/embedding): group actions apply on the codomain of embeddings (#12798)

2022-03-19 09:56:19 c9fc9bf
refactor(order/filter/pointwise): Cleanup (#12789)
* Reduce typeclass assumptions from `monoid` to `has_mul`
* Turn lemmas into instances
* Use hom classes rather than concrete hom types
* Golf

2022-03-19 09:56:18 2b6b9ff
feat(category_theory/abelian/derived): add left_derived_zero_iso_self (#12403)
We add `left_derived_zero_iso_self`: the natural isomorphism `(F.left_derived 0) ≅ F` if `preserves_finite_colimits F`.
From lean-liquid

2022-03-19 08:22:18 4c60258
chore(ring_theory/dedekind_domain/ideal): golf (#12737)

2022-03-19 03:04:31 128c096
chore(scripts): update nolints.txt (#12816)
I am happy to remove some nolints for you!

2022-03-19 01:22:50 7764c60
feat(*/sort): sorting empty sets/singletons (#12801)

2022-03-18 21:54:51 d04fff9
feat(topology/{order,separation}): several lemmas from an old branch (#12794)
* add `mem_nhds_discrete`;
* replace the proof of `is_open_implies_is_open_iff` by `iff.rfl`;
* add lemmas about `separated`.

2022-03-18 20:21:42 7f1ba1a
feat(algebra/char_p/two): add `simp` attribute to some lemmas involving characteristic two identities (#12800)
I hope that these `simp` attributes will make working with `char_p R 2` smooth!
I felt clumsy with this section, so hopefully this is an improvement.

2022-03-18 20:21:41 e282089
feat(linear_algebra/sesquilinear_form): preliminary results for nondegeneracy (#12269)
Several lemmas needed to define nondegenerate bilinear forms and show that the canonical pairing of the algebraic dual is nondegenerate.
Add domain restriction of bilinear maps in the second component and in both compenents.
Some type-class generalizations for symmetric, alternating, and reflexive sesquilinear forms.

2022-03-18 20:21:40 076490a
feat(group_theory/nilpotent): the is_nilpotent_of_finite_tfae theorem (#11835)

2022-03-18 20:21:38 8c89ae6
feat(ring_theory/unique_factorization_domain): some lemmas relating shapes of factorisations (#9345)
Given elements `a`, `b` in a `unique_factorization_monoid`, if there is an order-preserving bijection between the sets of factors of `associates.mk a` and `associates.mk b` then the prime factorisations of `a` and `b` have the same shape.

2022-03-18 18:32:32 0c52d3b
doc(src/tactic/doc_commands): typo “between” → “better” (#12804)

2022-03-18 18:32:31 d3703fe
doc(archive/100-theorems-list/9_area_of_a_circle): fix `×` (#12803)
this file used to have the category theory `\cross` as opposed to `\x`

2022-03-18 18:32:30 f4e7f82
chore(model_theory/definability): Change variable order in definability (#12802)
Changes `first_order.language.definable` and `first_order.language.definable_set` to `set.definable` and `set.definable_set`.
Makes `set.definable` a `def` rather than a `structure`.

2022-03-18 18:32:29 f6e85fc
feat(order/rel_iso): Add `subrel` instances (#12758)

2022-03-18 18:32:28 fdd7e98
feat(set_theory/*): Redefine `sup f` as `supr f` (#12657)

2022-03-18 18:32:27 290ad75
feat(model_theory/terms_and_formulas): Atomic, Quantifier-Free, and Prenex Formulas (#12557)
Provides a few induction principles for formulas
Defines atomic formulas with `first_order.language.bounded_formula.is_atomic`
Defines quantifier-free formulas with `first_order.language.bounded_formula.is_qf`
Defines `first_order.language.bounded_formula.is_prenex` indicating that a formula is in prenex normal form.

2022-03-18 18:32:25 d17ecf9
feat(category_theory/abelian) : injective resolutions of an object in a category with enough injectives (#12545)
This pr dualises `src/category_theory/preadditive/projective_resolution.lean`. But since half of the file requires `abelian` assumption, I moved it to `src/category_theory/abelian/*`. The reason it needs `abelian` assumption is because I want class inference to deduce `exact f g` from `exact g.op f.op`.

2022-03-18 16:51:05 80b8d19
feat(model_theory/terms_and_formulas): Language maps act on terms, formulas, sentences, and theories (#12609)
Defines the action of language maps on terms, formulas, sentences, and theories
Shows that said action commutes with realization

2022-03-18 16:51:04 bf690dd
feat(archive/100-theorems-list): add proof of thm 81 (#7274)

2022-03-18 15:25:55 b49bc77
feat(data/nat/prime): add two lemmas with nat.primes, mul and dvd (#12780)
These lemmas are close to available lemmas, but I could not actually find them.

2022-03-18 14:52:26 5a547aa
fix(ring_theory/power_series/basic): remove duplicate instance (#12744)

2022-03-18 14:52:25 14ee5e0
feat(number_theory/arithmetic_function): add eq of multiplicative functions (#12689)
To show that two multiplicative functions are equal, it suffices to show
that they are equal on prime powers. This is a commonly used strategy
when two functions are known to be multiplicative (e.g., they're both
Dirichlet convolutions of simpler multiplicative functions).
This will be used in several ongoing commits to prove asymptotics for
squarefree numbers.

2022-03-18 13:10:58 ee8db20
feat(measure_theory/group/action): add `null_measurable_set.smul` (#12793)
Also add `null_measurable_set.preimage` and `ae_disjoint.preimage`.

2022-03-18 13:10:57 2541387
refactor(data/list/big_operators): review API (#12782)
* merge `prod_monoid` into `big_operators`;
* review typeclass assumptions in some lemmas;
* use `to_additive` in more lemmas.

2022-03-18 13:10:56 241d63d
chore(algebraic_geometry/prime_spectrum/basic): remove TODO (#12768)
Sober topological spaces has been defined and it has been proven (in this file) that prime spectrum is sober

2022-03-18 12:36:36 cfa7f6a
feat(group_theory/index): Intersection of finite index subgroups (#12776)
This PR proves that if `H` and `K` are of finite index in `L`, then so is `H ⊓ K`.

2022-03-18 10:11:28 5ecd27a
refactor(topology/algebra/field): make `topological_division_ring` extend `has_continuous_inv₀` (#12778)
Topological division ring had been rolling its own `continuous_inv` field which was almost identical to the `continuous_at_inv₀` field of `has_continuous_inv₀`. Here we refactor so that `topological_division_ring` extends `has_continuous_inv₀` instead.
- [x] depends on: #12770

2022-03-18 01:33:57 a7cad67
doc(overview): some additions to the Analysis section (#12791)

2022-03-18 00:28:28 a32d58b
feat(analysis/*): generalize `set_smul_mem_nhds_zero` to topological vector spaces (#12779)
The lemma holds for arbitrary topological vector spaces and has nothing to do with normed spaces.

2022-03-18 00:28:27 adcfc58
chore(data/matrix/block): Do not print `matrix.from_blocks` with dot notation (#12774)
`A.from_blocks B C D` is weird and asymmetric compared to `from_blocks A B C D`. In future we might want to introduce notation.

2022-03-17 22:40:49 cf8c5ff
feat(algebra/pointwise): Subtraction/division of sets (#12694)
Define pointwise subtraction/division on `set`.

2022-03-17 22:40:48 32e5b6b
feat(model_theory/terms_and_formulas): Casting and lifting terms and formulas (#12467)
Defines `bounded_formula.cast_le`, which maps the `fin`-indexed variables with `fin.cast_le`
Defines `term.lift_at` and `bounded_formula.lift_at`, which raise `fin`-indexed variables above a certain threshold

2022-03-17 22:40:47 a26dfc4
feat(analysis/normed_space/basic): add `normed_division_ring` (#12132)
This defines normed division rings and generalizes some of the lemmas that applied to normed fields instead to normed division rings.
This breaks one `ac_refl`; although this could be resolved by using `simp only {canonize_instances := tt}` first, it's easier to just tweak the proof.

2022-03-17 18:31:29 2cb5edb
chore(topology/algebra/group_with_zero): mark `has_continuous_inv₀` as a `Prop` (#12770)
Since the type was not explicitly given, Lean marked this as a `Type`.

2022-03-17 18:31:28 3e6e34e
feat(linear_algebra/matrix): The Weinstein–Aronszajn identity (#12767)
Notably this includes the proof of the determinant of a block matrix, which we didn't seem to have in the general case.
This also renames some of the lemmas about determinants of block matrices, and adds some missing API for `inv_of` on matrices.
There's some discussion at https://math.stackexchange.com/q/4105846/1896 about whether this name is appropriate, and whether it should be called "Sylvester's determinant theorem" instead.

2022-03-17 18:31:27 6bfbb49
docs(algebra/order/floor): Update floor_semiring docs to reflect it's just an ordered_semiring (#12756)
The docs say that `floor_semiring` is a linear ordered semiring, but it is only an `ordered_semiring` in the code. Change the docs to reflect this fact.

2022-03-17 18:31:26 ca80c8b
feat(data/nat/sqrt_norm_num): norm_num extension for sqrt (#12735)
Inspired by https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/2.20is.20not.20a.20square . The norm_num extension has to go in a separate file from `data.nat.sqrt` because `data.nat.sqrt` is a dependency of `norm_num`.

2022-03-17 18:31:25 e944a99
feat(algebraic_geometry/projective_spectrum) : lemmas about `vanishing_ideal` and `zero_locus` (#12730)
This pr mimics the corresponding construction in `Spec`; other than `projective_spectrum.basic_open_eq_union_of_projection` everything else is a direct copy.

2022-03-17 17:30:04 a1bdadd
chore(topology/metric_space/hausdorff_distance): move two lemmas (#12771)
Remove the dependence of `topology/metric_space/hausdorff_distance` on `analysis.normed_space.basic`, by moving out two lemmas.

2022-03-17 11:06:31 11b2f36
feat(algebraic_topology/fundamental_groupoid): Fundamental groupoid of punit (#12757)
Proves the equivalence of the fundamental groupoid of punit and punit

2022-03-17 11:06:30 cd196a8
feat(group_theory/order_of_element): 1 is finite order, as is g⁻¹ (#12749)

2022-03-17 11:06:29 c9c4f40
chore(topology/compact_open): remove `continuous_map.ev`, and rename related lemmas to `eval'` (#12738)
This:
* Eliminates `continuous_map.ev α β` in favor of `(λ p : C(α, β) × α, p.1 p.2)`, as this unifies better and does not require lean to unfold `ev` at the right time.
* Renames `continuous_map.continuous_evalx` to `continuous_map.continuous_eval_const` to match the `smul_const`-style names.
* Renames `continuous_map.continuous_ev` to `continuous_map.continuous_eval'` to match `continuous_map.continuous_eval`.
* Renames `continuous_map.continuous_ev₁` to `continuous_map.continuous_eval_const'`.
* Adds `continuous_map.continuous_coe'` to match `continuous_map.continuous_coe`.
* Golfs some nearby lemmas.
The unprimed lemma names have the same statement but different typeclasses, so the `ev` lemmas have taken the primed name. See [this zulip thread](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Evaluation.20of.20continuous.20functions.20is.20continuous/near/275502201) for discussion about whether one set of lemmas can be removed.

2022-03-17 11:06:28 a6158f1
feat(group_theory/subgroup/basic): One-sided closure induction lemmas (#12725)
This PR adds one-sided closure induction lemmas, which I will need for Schreier's lemma.

2022-03-17 11:06:27 b1bf390
feat(number_theory/function_field): the ring of integers of a function field is not a field (#12705)

2022-03-17 10:35:37 c3ecf00
feat(group_theory/sylow): direct product of sylow groups if all normal (#11778)

2022-03-17 09:56:23 31391dc
feat(model_theory/basic, elementary_maps): Uses `fun_like` approach for first-order maps (#12755)
Introduces classes `hom_class`, `strong_hom_class` to describe classes of first-order maps.

2022-03-17 08:18:32 9d7a664
feat(algebra/parity + *): generalize lemmas about parity (#12761)
I moved more even/odd lemmas from nat/int to general semirings/rings.
Some files that explicitly used the nat/int namespace were changed along the way.

2022-03-17 07:17:48 3ba25ea
feat(topology/algebra/const_mul_action): add is_closed smul lemmas (#12747)

2022-03-17 07:17:46 87ab09c
feat(category_theory/abelian/injective_resolution): homotopy between descents of morphism and two injective resolutions (#12743)
This pr contains the following
* `category_theory.InjectiveResolution.desc_homotopy`: Any two descents of the same morphism are homotopic.
* `category_theory.InjectiveResolution.homotopy_equiv`: Any two injective resolutions of the same
  object are homotopically equivalent.

2022-03-17 06:22:26 7000efb
refactor(analysis/specific_limits): split into two files (#12759)
Split the 1200-line file `analysis.specific_limits` into two:
- `analysis.specific_limits.normed` imports `normed_space` and covers limits in normed rings/fields
- `analysis.specific_limits.basic` imports only topology, and is still a bit of a grab-bag, covering limits in metric spaces, ordered rings, `ennreal`, etc.

2022-03-17 05:18:53 877f2e7
refactor(linear_algebra/ray): redefine `same_ray` to allow zero vectors (#12618)
In a strictly convex space, the new definition is equivalent to the fact that the triangle inequality becomes an equality. The old definition was only used for nonzero vectors in `mathlib`. Also make the definition of `ray_vector` semireducible so that `ray_vector.setoid` can be an instance.

2022-03-17 04:20:16 e547058
docs(algebraic_topology/fundamental_groupoid/induced_maps): fix diagram rendering (#12745)

2022-03-17 03:03:56 d1e1304
feat(combinatorics/simple_graph/connectivity): API for get_vert (#12604)
From my Formalising Mathematics 2022 course.

2022-03-17 01:38:15 192819b
feat(category_theory/punit): A groupoid is equivalent to punit iff it has a unique arrow between any two objects (#12726)
In terms of topology, when this is used with the fundamental groupoid, it means that a space is simply connected (we still need to define this) if and only if any two paths between the same points are homotopic, and contractible spaces are simply connected.

2022-03-17 01:38:15 3a0532a
feat(topology/homotopy/fundamental_group): prove fundamental group is independent of basepoint in path-connected spaces (#12234)
Adds definition of fundamental group and proves fundamental group independent of basepoint choice in path-connected spaces.

2022-03-16 23:51:43 4d350b9
chore(*): move code, golf (#12753)
* move `pow_pos` and `pow_nonneg` to `algebra.order.ring`;
* use the former to golf `has_pos pnat nat`;
* fix formatting.

2022-03-16 21:17:30 b3abae5
chore(category_theory/preadditive/projective_resolution): some minor golf (#12739)

2022-03-16 21:17:29 b24372f
feat(model_theory/basic, terms_and_formulas): Helper functions for constant symbols (#12722)
Defines a function `language.con` from `A` to constants of the language `L[[A]]`.
Changes the coercion of a constant to a term to a function `language.constants.term`.
Proves `simp` lemmas for interpretation of constant symbols and realization of constant terms.

2022-03-16 21:17:26 3b91c32
feat(group_theory/subgroup/basic): `map_le_map_iff_of_injective` for `subtype` (#12713)
This PR adds the special case of `map_le_map_iff_of_injective` when the group homomorphism is `subtype`. This is useful when working with nested subgroups.

2022-03-16 19:40:36 c459d2b
feat(algebra/algebra/basic,data/matrix/basic): resolve a TODO about `alg_hom.map_smul_of_tower` (#12684)
It turns out that this lemma doesn't actually help in the place I claimed it would, so I added the lemma that does help too.

2022-03-16 19:40:35 6a71007
feat(group_theory/quotient_group) finiteness of groups for sequences of homomorphisms (#12660)

2022-03-16 18:34:52 2e9985e
feat(topology/algebra/order/basic): f ≤ᶠ[l] g implies limit of f ≤ limit of g (#12727)
There are several implications of the form `eventually_*_of_tendsto_*`,
which involve the order relationships between the limit of a function
and other constants. What appears to be missing are reverse
implications: If two functions are eventually ordered, then their limits
respect the order.
This is lemma will be used in further work on the asymptotics of
squarefree numbers

2022-03-16 15:39:29 693a3ac
feat(number_theory/cyclotomic/basic): add is_primitive_root.adjoin (#12716)
We add `is_cyclotomic_extension.is_primitive_root.adjoin`.
From flt-regular

2022-03-16 13:40:39 b8faf13
feat(data/finset/basic): add finset.filter_eq_self (#12717)
and an epsilon of cleanup
from flt-regular

2022-03-16 13:40:38 d495afd
feat(category_theory/abelian/injective_resolution): descents of a morphism (#12703)
This pr dualise `src/category_theory/preadditive/projective_resolution.lean`. The reason that it is moved to `abelian` folder is because we want `exact f g` from `exact g.op f.op` instance.
This pr is splitted from #12545. This pr contains the following:
Given `I : InjectiveResolution X` and  `J : InjectiveResolution Y`, any morphism `X ⟶ Y` admits a descent to a chain map `J.cocomplex ⟶ I.cocomplex`. It is a descent in the sense that `I.ι` intertwine the descent and the original morphism, see `category_theory.InjectiveResolution.desc_commutes`.
(Docstring contains more than what is currently in the file, but everything else will come soon)

2022-03-16 13:40:36 f21a760
feat(measure_theory/function/jacobian): change of variable formula in integrals in higher dimension (#12492)
Let `μ` be a Lebesgue measure on a finite-dimensional real vector space, `s` a measurable set, and `f` a function which is differentiable and injective on `s`. Then `∫ x in f '' s, g x ∂μ = ∫ x in s, |(f' x).det| • g (f x) ∂μ`. (There is also a version for the Lebesgue integral, i.e., for `ennreal`-valued functions).

2022-03-16 11:53:36 0964573
feat(set_theory/cardinal): Lift `min` and `max` (#12518)

2022-03-16 11:53:35 717b11e
feat(group_theory/noncomm_pi_coprod): homomorphism from pi monoids or groups (#11744)

2022-03-16 10:05:27 a50de33
docs(algebra/group/hom): fix typo (#12723)

2022-03-16 10:05:26 35bb571
chore(number_theory/primorial): speed up some proofs (#12714)

2022-03-16 10:05:25 a8bfcfe
feat(algebraic_geometry/projective_spectrum): basic definitions of projective spectrum (#12635)
This pr contains the basic definitions of projective spectrum of a graded ring:
- projective spectrum
- zero locus
- vanishing ideal

2022-03-16 10:05:24 a7a2f9d
feat(data/nat/fib): norm_num plugin for fib (#12463)

2022-03-16 10:05:23 500a1d3
feat(data/pnat/find): port over `nat.find` API (#12413)
Didn't port `pnat.find_add` because I got lost in the proof.

2022-03-16 10:05:22 bbc66b5
feat(group_theory/subsemigroup/basic): subsemigroups (#12111)
Port over submonoid implementation to a generalization: subsemigroups.
Implement submonoids via extends using old_structure_cmd, since that is
what subsemirings do.
Copy over the attribution from submonoids because the content is almost
unchanged.
The submonoid file hasn't been changed, so no proofs rely on the
subsemigroups proofs.

2022-03-16 08:21:55 50691e5
chore(measure_theory/function): split files strongly_measurable and simple_func_dense (#12711)
The files `strongly_measurable` and `simple_func_dense` contain general results, and results pertaining to the `L^p` space. We move the results regarding `L^p` to new files, to make sure that the main parts of the files can be imported earlier in the hierarchy. This is needed for a forthcoming integral refactor.

2022-03-16 08:21:54 ba6c84d
feat(ring_theory/fractional_ideal): two span_singleton lemmas (#12656)

2022-03-16 08:21:53 17c74f1
feat(algebra/group_power/order): add le_pow (#12436)
Added a new theorem so that library search will find it.

2022-03-16 08:21:52 91f98e8
feat(topology/bornology/hom): Locally bounded maps (#12046)
Define `locally_bounded_map`, the type of locally bounded maps between two bornologies.

2022-03-16 08:21:51 68033a2
feat(set_theory/ordinal_arithmetic): A set of ordinals is bounded above iff it's small (#11870)

2022-03-16 07:51:24 a452bfa
feat(analysis/seminorm): three simple lemmas about balls (#12720)
The lemmas are in preparation to characterize the natural bornology in terms of seminorms in LCTVSs.

2022-03-16 05:24:58 1f1289f
feat(algebra/parity + data/{int, nat}/parity): parity lemmas for general semirings (#12718)
This PR proves some general facts about adding even/odd elements in a semiring, thus removing the need to proving the same results for `nat` and `int`.

2022-03-16 03:13:34 cbd6173
chore(scripts): update nolints.txt (#12728)
I am happy to remove some nolints for you!

2022-03-16 00:32:33 45061f3
chore(data/equiv/basic): use `option.elim` and `sum.elim` (#12724)
We have these functions, why not use them?

2022-03-15 18:38:06 b622d4d
chore(algebra/associated): move prime_dvd_prime_iff_eq (#12706)

2022-03-15 16:38:31 7ed4f2c
feat(group_theory/submonoid/operations): monoids are isomorphic to themselves as submonoids (#12658)

2022-03-15 15:20:21 375419f
feat(algebra/algebra/subalgebra/pointwise): lemmas about `*` and `to_submodule` (#12695)

2022-03-15 14:10:30 7582e14
feat(linear_algebra/matrix/determinant): special case of the matrix determinant lemma (#12682)

2022-03-15 14:10:28 9c09965
feat(algebra/big_operators/finprod): finite product of power is power of finite product (#12655)

2022-03-15 13:39:45 88a5978
doc(algebra/hierarchy_design): fix my name (#12674)

2022-03-15 11:51:47 530f008
feat(linear_algebra/matrix/nonsingular_inverse): Add `matrix.list_prod_inv_reverse` (#12691)

2022-03-15 11:51:46 7a02c9e
fix(set_theory/ordinal_arithmetic): remove redundant hypothesis from `CNF_rec` (#12680)
The hypothesis in question was a theorem that could be deduced.

2022-03-15 11:51:45 a3b39c6
feat(linear_algebra/clifford_algebra/conjugation): add lemmas showing interaction between `involute` and `even_odd` (#12672)
Often the even and odd submodules are defined in terms of involution, but this strategy doesn't actually work in characteristic two.

2022-03-15 11:51:44 48ffeb7
feat(group_theory/finiteness): quotient of fg is fg (#12652)

2022-03-15 11:10:28 a98202b
chore(category_theory/preadditive/projective_resolution): typo (#12702)

2022-03-15 11:10:27 eefa425
perf(analysis/convec/topology): remove topological_add_group.path_connected instance (#12675)
The linter was right in #10011 and `topological_add_group.path_connected` should not be an instance, because it creates enormous TC subproblems (turn on `pp.all` to get an idea of what's going on).
Apparently the instance isn't even used in mathlib.

2022-03-15 11:10:26 5b90340
feat(model_theory/terms_and_formulas): Notation for terms and formulas from Flypitch (#12630)
Introduces some notation, localized to `first_order`, to make typing explicit terms and formulas easier.

2022-03-15 10:32:43 d199eb9
feat(ring_theory/graded_algebra/homogeneous_ideal): refactor `homogeneous_ideal` as a structure extending ideals (#12673)
We refactored `homogeneous_ideal` as a structure extending ideals so that we can define a `set_like (homogeneous_ideal \McA) A` instance.

2022-03-15 10:32:41 061d04b
feat(category_theory/monoidal): distribute tensor over direct sum (#12626)
This is preliminary to the monoidal structure on chain complexes.

2022-03-15 10:02:26 078b213
chore(category_theory/abelian/projective): fix typo (#12701)

2022-03-15 08:11:54 92e6759
fix(category_theory/bicategory): remove spaces before closing parentheses (#12700)

2022-03-15 08:11:53 0bd6dc2
chore(measure_theory): move and rename some lemmas (#12699)
* move `ae_interval_oc_iff`, `ae_measurable_interval_oc_iff`, and `ae_interval_oc_iff'` to `measure_theory.measure.measure_space`, rename `ae_interval_oc_iff'` to `ae_restrict_interval_oc_iff`;
* add lemmas about `ae` and union of sets.

2022-03-15 08:11:52 4b562f8
doc(data/equiv/encodable): +2 docstrings (#12698)

2022-03-15 08:11:51 a3e0c85
chore(cyclotomic/gal): update todo (#12693)
this mentioned a non-existing old solution which got superseded by `is_primitive_root.power_basis`, but is still not the right solution in the long term

2022-03-15 08:11:50 77395f1
chore(algebra/module/basic): Move the scalar action earlier (#12690)
This is prep work for golfing some of the instances.
This also adjust the variables slightly to be in a more sensible order.

2022-03-15 08:11:49 025fe7c
feat(group_theory/abelianization): An application of the three subgroups lemma (#12677)
This PR uses the three subgroups lemma to prove that `⁅(commutator G).centralizer, (commutator G).centralizer⁆ ≤ subgroup.center G`.

2022-03-15 08:11:48 b7978f3
chore(analysis/seminorm): Weaken typeclasses on `convex` and `locally_convex` lemmas (#12645)
Generalize type-classes `normed_linearly_ordered_field` to `normed_field` (otherwise it would not work over complex numbers).

2022-03-15 08:11:47 53f6d68
feat(category_theory/preadditive) : definition of injective resolution (#12641)
This pr is splitted from #12545. This pr contains the definition of:
- `InjectiveResolution`;
- `has_injective_resolution` and `has_injective_resolutions`;
- injective object has injective resolution.

2022-03-15 08:11:46 585d641
refactor(linear_algebra/basic): split file (#12637)
`linear_algebra.basic` has become a 2800 line monster, with lots of imports.
This is some further work on splitting it into smaller pieces, by extracting everything about (or needing) `span` to `linear_algebra.span`.

2022-03-15 06:38:19 2ad9b39
feat(algebra/associated): add irreducible.not_dvd_one (#12686)

2022-03-15 03:40:54 6d63c9b
chore(scripts): update nolints.txt (#12696)
I am happy to remove some nolints for you!

2022-03-15 03:40:53 0fd9e30
feat(set_theory/ordinal_arithmetic): `smul` coincides with `mul` (#12692)

2022-03-15 03:05:43 f337856
feat(algebra/category): show categorical image in Module agrees with range (#12605)
This just follows the existing code for the same fact in `AddCommGroup`.
This PR is preparing for a better API for homological calculations in `Module R`.

2022-03-15 00:51:24 1148717
chore(set_theory/ordinal_arithmetic): `well_founded` → `wf` (#12615)

2022-03-14 20:38:51 8d2e887
feat(number_theory/function_field): add place at infinity  (#12245)

2022-03-14 18:58:33 c1c61d4
feat(data/W/constructions): add constructions of W types (#12292)
Here I write the naturals and lists as W-types and show that the definitions are equivalent. Any other interesting examples I should add?

2022-03-14 17:36:38 2e56210
chore(analysis/complex/upper_half_plane): don't use `abbreviation` (#12679)
Some day we should add Poincaré metric as a `metric_space` instance on `upper_half_plane`.
In the meantime, make sure that Lean doesn't use `subtype` instances for `uniform_space` and/or `metric_space`.

2022-03-14 15:48:03 28775ce
feat(tactic/interactive): guard_{hyp,target}_mod_implicit (#12668)
This adds two new tactics `guard_hyp_mod_implicit` and `guard_target_mod_implicit`, with the same syntax as `guard_hyp` and `guard_target`.  While the `guard_*` tactics check for syntax equality, the `guard_*_mod_implicit` tactics check for definitional equality with the `none` transparency

2022-03-14 13:59:47 d8ef1de
feat(topology/separation): add t2_space_iff (#12628)
From my formalising mathematics 22 course

2022-03-14 13:59:46 5242a7f
feat(data/list/infix): add lemmas and instances (#12511)

2022-03-14 13:59:45 df3792f
refactor(data/set): generalize `set.restrict` and take set argument first in both `set.restrict` and `subtype.restrict` (#12510)
Generalizes `set.restrict` to Pi types and makes both this function and `subtype.restrict` take the restricting index set before the Pi type to restrict, which makes taking the image/preimage of a set of Pi types easier (`s.restrict '' pis` is shorter than `(λ p, set.restrict p s) '' pis` -- I'd argue that this is the more common case than taking the image of a set of restricting sets on a single Pi type). Changed uses of `set.restrict` to use dot notation where possible.

2022-03-14 13:59:43 c1edbec
feat(set_theory/ordinal_topology): Basic results on the order topology of ordinals (#11861)
We link together various notions about ordinals to their topological counterparts.

2022-03-14 12:19:21 09ea7fb
feat(data/finset/noncomm_prod): finite pi lemmas (#12291)
including a few helpers

2022-03-14 11:12:21 fc882ff
chore(ci): update trepplein to version 1.1 (#12669)
New upstream release, fixing some performance issues.

2022-03-14 11:12:20 abb8e5d
feat(set_theory/principal): If `a` isn't additive principal, it's the sum of two smaller ordinals (#12664)

2022-03-14 11:12:19 cc6e2eb
feat(group_theory/commutator): The three subgroups lemma (#12634)
This PR proves the three subgroups lemma: If `⁅⁅H₂, H₃⁆, H₁⁆ = ⊥` and `⁅⁅H₃, H₁⁆, H₂⁆ = ⊥`, then `⁅⁅H₁, H₂⁆, H₃⁆ = ⊥`.

2022-03-14 11:12:18 6a51706
chore(topology/homotopy): Move more algebraic-flavored content about fundamental groupoid to algebraic_topology folder (#12631)
Moved:
  - `topology/homotopy/fundamental_groupoid.lean` to `algebraic_topology/fundamental_groupoid/basic.lean`
  - the second half of `topology/homotopy/product.lean`, dealing with `fundamental_groupoid_functor` preserving products, to `algebraic_topology/fundamental_groupoid/product.lean`
  - `topology/homotopy/induced_maps.lean` to `algebraic_topology/fundamental_groupoid/induced_maps.lean`

2022-03-14 09:29:31 a2544de
chore(algebra/category/Module): simp lemmas for monoidal closed (#12608)
I'm worried by the fact that I can't express the coercions here without using `@`. They do turn up in the wild, however!

2022-03-14 09:29:29 31e60c8
feat(set_theory/{ordinal, ordinal_arithmetic}): Add various instances for `o.out.α` (#12508)

2022-03-14 09:29:27 1f428f3
feat(data/list/basic): Split and intercalate are inverses (#12466)
Show that split and intercalate are inverses of each other (under suitable conditions)

2022-03-14 09:29:26 cd001b2
feat(category_theory/bicategory/free): define free bicategories (#11998)

2022-03-14 08:31:44 520f204
feat(analysis/seminorm): add lemmas for inequalities and `finset.sup` (#12650)
These lemmas are not lean-trivial since seminorms map to the `real` and not to `nnreal`.

2022-03-14 08:31:43 0f3bfda
feat(analysis/complex/schwarz): some versions of the Schwarz lemma (#12633)

2022-03-14 08:31:42 c2368be
feat(topology/hom/open): Continuous open maps (#12406)
Define `continuous_open_map`, the type of continuous opens maps between two topological spaces, and `continuous_open_map_class`, its companion hom class.

2022-03-14 07:05:57 7b7fea5
refactor(set_theory/cardinal_ordinal): `aleph_is_principal_aleph` → `principal_add_aleph` (#12663)
This matches the naming scheme used throughout `set_theory/principal.lean`.

2022-03-14 07:05:56 6ebb378
feat(set_theory/ordinal): `ord 1 = 1` (#12662)

2022-03-14 07:05:55 18ba395
feat(algebra/support) support of power is subset of support (#12654)

2022-03-14 07:05:54 6b3b567
chore(topology/algebra/group_with_zero): fix docstring for has_continuous_inv0 (#12653)

2022-03-14 07:05:53 1f5950a
feat(analysis/seminorm): add lemmas for `with_seminorms` (#12649)
Two helper lemmas that make it easier to generate an instance for `with_seminorms`.

2022-03-14 07:05:51 b6fa3be
move(topology/sets/*): Move topological types of sets together (#12648)
Move
* `topology.opens` to `topology.sets.opens`
* `topology.compacts` to `topology.sets.closeds` and `topology.sets.compacts`
`closeds` and `clopens` go into `topology.sets.closeds` and `compacts`, `nonempty_compacts`, `positive_compacts` and `compact_opens` go into `topology.sets.compacts`.

2022-03-14 07:05:50 778dfd5
chore(analysis/locally_convex/basic): generalize lemmas and add simple lemmas  (#12643)
Gerenalize all 'simple' lemmas for `absorb` and `absorbent` to the type-class `[semi_normed_ring 𝕜] [has_scalar 𝕜 E]`.
Additionally, add the lemmas `absorbs_empty`, `balanced_mem` and `zero_singleton_balanced`.

2022-03-14 07:05:49 f8d947c
add endofunctor.algebra (#12642)
This is the second attempt at the following outdated pull request: https://github.com/leanprover-community/mathlib/pull/12295
The original post:
In this PR I define algebras of endofunctors, make the forgetful functor to the ambient category, and show that initial algebras have isomorphisms as their structure maps. This is mostly taken from `monad.algebra`.

2022-03-14 05:19:50 174f1da
refactor(set_theory/ordinal_arithmetic): Turn various results into simp lemmas (#12661)
In order to do this, we had to change the direction of various equalities.

2022-03-14 05:19:49 ad0988b
docs(algebra/*): Add docstrings to additive lemmas (#12578)
Many additive lemmas had no docstrings while their multiplicative counterparts had. This adds them in all files under `algebra`.

2022-03-14 04:48:58 580e1d9
feat(analysis/inner_product_space/pi_L2): `linear_isometry.extend` (#12192)
Let `S` be a subspace of a finite-dimensional inner product
space `V`.  A linear isometry mapping `S` into `V` can be extended to a
full isometry of `V`.  Note that this is false if we remove the
finite-dimensional hypothesis; consider the shift operator
(0, x_2, x_3, ...) to (x_2, x_3, x_4, ...).
I hope that the naming choice is consistent.  Combining the two
`simp only` blocks in `linear_isometry.extend_apply` results in a
timeout, but they seem to work okay split up.

2022-03-14 02:40:00 3751ec6
feat(measure_theory/group/fundamental_domain): ess_sup_measure_restrict (#12603)
If `f` is invariant under the action of a countable group `G`, and `μ` is a `G`-invariant measure with a fundamental domain `s`, then the `ess_sup` of `f` restricted to `s` is the same as that of `f` on all of its domain.

2022-03-13 14:52:04 223e742
feat(analysis/*/{exponential, spectrum}): spectrum of a selfadjoint element is real (#12417)
This provides several properties of the exponential function and uses it to prove that for `𝕜 = ℝ` or `𝕜 = ℂ`, `exp 𝕜 𝕜` maps the spectrum of `a : A` (where `A` is a `𝕜`-algebra) into the spectrum of `exp 𝕜 A a`. In addition, `exp ℂ A (I • a)` is unitary when `a` is selfadjoint. Consequently, the spectrum of a selfadjoint element is real.

2022-03-13 13:32:14 7d34f78
chore(algebra/algebra/subalgebra): reduce imports (#12636)
Splitting a file, and reducing imports. No change in contents.

2022-03-13 07:59:44 daa257f
feat(analysis/normed_space/star/basic): `matrix.entrywise_sup_norm_star_eq_norm` (#12201)
This is precisely the statement needed for a `normed_star_monoid`
instance on matrices using the entrywise sup norm.

2022-03-13 04:14:17 73530b5
feat(algebra/algebra/spectrum): prove spectral inclusion for algebra homomorphisms (#12573)
If `φ : A →ₐ[R] B` is an `R`-algebra homomorphism, then for any `a : A`, `spectrum R (φ a) ⊆ spectrum R a`.

2022-03-13 00:04:24 9f1f8c1
feat(ring_theory/graded_algebra/homogeneous_ideal): definition of irrelevant ideal of a graded algebra (#12548)
For an `ℕ`-graded ring `⨁ᵢ 𝒜ᵢ`, the irrelevant ideal refers to `⨁_{i>0} 𝒜ᵢ`.
This construction is used in the Proj construction in algebraic geometry.

2022-03-12 21:08:56 5b36941
feat(data/list/basic): Stronger form of `fold_fixed` (#12613)

2022-03-12 19:48:16 3da03b9
refactor(group_theory/commutator): Use variables and rearrange lemmas (#12629)
This PR adds variables, and rearranges some of the lemmas (moving the lemmas about normal subgroups to a separate section).

2022-03-12 18:01:22 23269bf
feat(category_theory/preadditive/Mat): ring version (#12617)

2022-03-12 18:01:21 707df2c
feat(model_theory/definability): Definability with parameters (#12611)
Extends the definition of definable sets to include a parameter set.
Defines shorthands is_definable₁ and is_definable₂ for 1- and 2-dimensional definable sets.

2022-03-12 18:01:20 9293174
feat(algebra/category/Module): monoidal_preadditive (#12607)

2022-03-12 18:01:19 e4ea2bc
feat(topology/algebra/continuous_monoid_hom): Define the Pontryagin dual (#12602)
This PR adds the definition of the Pontryagin dual.
We're still missing the locally compact instance. I thought I could get it from `closed_embedding (to_continuous_map : continuous_monoid_hom A B → C(A, B))`, but actually `C(A, B)` is almost never locally compact.

2022-03-12 18:01:18 5a9fb92
feat(topology/category/Locale): The category of locales (#12580)
Define `Locale`, the category of locales, as the opposite of `Frame`.

2022-03-12 18:01:17 96bae07
feat(order/complete_lattice): add `complete_lattice.independent_pair` (#12565)
This makes `complete_lattice.independent` easier to work with in the degenerate case.

2022-03-12 16:17:42 7e5ac6a
chore(analysis/convex/strict): Reduce typeclass assumptions, golf (#12627)
Move lemmas around so they are stated with the correct generality. Restate theorems using pointwise operations. Golf proofs. Fix typos in docstrings.

2022-03-12 16:17:41 22bdc8e
feat(order/upper_lower): Upper/lower sets (#12189)
Define upper and lower sets both as unbundled predicates and as bundled types.

2022-03-12 15:43:41 dc4e5cb
chore(analysis): move lemmas around (#12621)
* move `smul_unit_ball` to `analysis.normed_space.pointwise`, rename it to `smul_unit_ball_of_pos`;
* reorder lemmas in `analysis.normed_space.pointwise`;
* add `vadd_ball_zero`, `vadd_closed_ball_zero`, `smul_unit`, `affinity_unit_ball`, `affinity_unit_closed_ball`.

2022-03-12 14:08:13 7257ee7
chore(data/nat/prime): restate card_multiples without finset.sep (#12625)
As suggested by Eric Wieser in #12592.

2022-03-12 14:08:12 a63b99c
chore(category_theory/closed/monoidal): fix notation (#12612)
Previously the `C` in the internal hom arrow ` ⟶[C] ` was hardcoded, which wasn't very useful!
I've also reduced the precedence slightly, so we now require more parentheses, but I think these are less confusing rather than more so it is a good side effect?

2022-03-12 14:08:11 956f3db
chore(category_theory/limits): correct lemma names (#12606)

2022-03-12 14:08:10 9456a74
feat(group_theory/commutator): Prove `commutator_eq_bot_iff_le_centralizer` (#12598)
This lemma is needed for the three subgroups lemma.

2022-03-12 14:08:09 b9ab27b
feat(group_theory/subgroup/basic): add eq_one_of_noncomm_prod_eq_one_of_independent (#12525)
`finset.noncomm_prod` is “injective” in `f` if `f` maps into independent subgroups.  It
generalizes (one direction of) `subgroup.disjoint_iff_mul_eq_one`.

2022-03-12 13:35:45 b21c1c9
split(analysis/locally_convex/basic): Split off `analysis.seminorm` (#12624)
Move `balanced`, `absorbs`, `absorbent` to a new file.
For `analysis.seminorm`, I'm crediting
* Jean for #4827
* myself for
  * #9097
  * #11487
* Moritz for
  * #11329
  * #11414
  * #11477
For `analysis.locally_convex.basic`, I'm crediting
* Jean for #4827
* Bhavik for
  * #7358
  * #9097
* myself for
  * #9097
  * #10999
  * #11487

2022-03-12 11:37:20 a4187fe
chore(algebra/category/Module): remove unnecessary universe restriction (#12610)

2022-03-12 11:37:19 31d28c6
fix(src/algebra/big_operators/multiset): unify prod_le_pow_card and prod_le_of_forall_le (#12589)
using the name `prod_le_pow_card` as per https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/duplicate.20lemmas
but use the phrasing of prod_le_of_forall_le with non-implicit
`multiset`, as that is how it is used.

2022-03-12 11:06:34 2241588
feat(topology/homotopy): Homotopic maps induce naturally isomorphic functors between fundamental groupoid (#11595)

2022-03-12 09:57:54 5f3f70f
doc(category_theory/monoidal/rigid): noting future work (#12620)

2022-03-12 09:57:53 3d41a5b
refactor(group_theory/commutator): Golf proof of `commutator_mono` (#12619)
This PR golfs the proof of `commutator_mono` by using `commutator_le` rather than `closure_mono`.

2022-03-12 09:57:52 72c6979
refactor(set_theory/ordinal_arithmetic): remove dot notation (#12614)

2022-03-12 08:36:18 3aaa564
refactor(group_theory/commutator): Golf proof of `commutator_comm` (#12600)
This PR golfs the proof of `commutator_comm`.

2022-03-12 05:57:32 1463f59
fix(tactic/suggest): fixing `library_search` (#12616)
Further enhancing `library_search` search possibilities for 'ne' and 'not eq'
Related: https://github.com/leanprover-community/mathlib/pull/11742

2022-03-12 05:57:31 e8d0cac
feat(analysis/inner_product_space/adjoint): gram lemmas (#12139)
The gram operator is a self-adjoint, positive operator.

2022-03-12 04:22:20 1eaf499
feat(group_theory/subgroup/basic): {multiset_,}noncomm_prod_mem (#12523)
and same for submonoids.

2022-03-12 04:22:19 6ee6203
feat(counterexample) : a homogeneous ideal that is not prime but homogeneously prime (#12485)
For graded rings, if the indexing set is nice, then a homogeneous ideal `I` is prime if and only if it is homogeneously prime, i.e. product of two homogeneous elements being in `I` implying at least one of them is in `I`. This fact is in `src/ring_theory/graded_algebra/radical.lean`. This counter example is meant to show that "nice condition" at least needs to include cancellation property by exhibiting an ideal in Zmod4^2 graded by a two element set being homogeneously prime but not prime. In #12277, Eric suggests that this counter example is worth pr-ing, so here is the pr.

2022-03-12 02:28:54 2e7483d
refactor(group_theory/commutator): Move and golf `commutator_le` (#12599)
This PR golfs `commutator_le` and moves it earlier in the file so that it can be used earlier.
This PR will conflict with #12600, so don't merge them simultaneously (bors d+ might be better).

2022-03-12 02:28:53 09d0f02
chore({category_theory,order}/category/*): Missing `dsimp` lemmas (#12593)
Add the `dsimp` lemmas stating `↥(of α) = α `. Also rename the few `to_dual` functors to `dual` to match the other files.

2022-03-12 02:28:52 4e302f5
feat(data/nat): add card_multiples (#12592)

2022-03-12 02:28:51 222faed
feat(algebra/group/units_hom): make `is_unit.map` work on `monoid_hom_class` (#12577)
`ring_hom.is_unit_map` and `mv_power_series.is_unit_constant_coeff` are now redundant, but to keep this diff small I've left them around.

2022-03-12 02:28:50 8364980
feat(category_theory): interderivability of kernel and equalizers in preadditive cats (#12576)

2022-03-11 23:40:59 c0a51cf
chore(*): update to 3.41.0c (#12591)

2022-03-11 21:59:23 e7db193
feat(algebra/module): add `module.nontrivial` (#12594)

2022-03-11 19:18:32 5856c0c
feat(data/finset/noncomm_prod): add noncomm_prod_mul_distrib (#12524)
The non-commutative version of `finset.sum_union`.

2022-03-11 19:18:31 dc5f7fb
feat(set_theory/ordinal_arithmetic): Further theorems on normal functions (#12484)
We prove various theorems giving more convenient characterizations of normal functions.

2022-03-11 19:18:30 e3ad468
feat(data/list/prod_monoid): add prod_eq_pow_card (#12473)

2022-03-11 17:31:10 7dcba96
feat(order/monotone): Folds of monotone functions are monotone (#12581)

2022-03-11 17:31:09 3dcc168
feat(linear_algebra/projective_space/basic): The projectivization of a vector space. (#12438)
This provides the initial definitions for the projective space associated to a vector space.
Future work:
- Linear subspaces of projective spaces, connection with subspaces of the vector space, etc.
- The incidence geometry structure of a projective space.
- The fundamental theorem of projective geometry.
I will tag this PR as RFC for now. If you see something missing from this *initial* PR, please let me know!

2022-03-11 16:25:21 003701f
feat(model_theory/substructures): Facts about substructures (#12258)
Shows that `closure L s` can be viewed as the set of realizations of terms over `s`.
Bounds the cardinality of `closure L s` by the cardinality of the type of terms.
Characterizes `closure L[[A]] s`.

2022-03-11 16:25:19 d6f337d
feat(set_theory/ordinal_arithmetic): The derivative of multiplication (#12202)
We prove that for `0 < a`, `deriv ((*) a) b = a ^ ω * b`.

2022-03-11 13:44:08 e6fef39
feat(algebra/order/monoid): add `with_zero.canonically_linear_ordered_add_monoid` (#12568)
This also removes some non-terminal `simp`s in nearby proofs

2022-03-11 13:44:07 12786d0
feat(order/sup_indep): add `finset.sup_indep_pair` (#12549)
This is used to provide simp lemmas about `sup_indep` on `bool` and `fin 2`.

2022-03-11 13:44:06 4dc4dc8
chore(topology/algebra/module/basic): cleanup variables and coercions (#12542)
Having the "simple" variables in the lemmas statements rather than globally makes it easier to move lemmas around in future.
This also mean lemmas like `coe_comp` can have their arguments in a better order, as it's easier to customize the argument order at the declaration.
This also replaces a lot of `(_ : M₁ → M₂)`s with `⇑_` for brevity in lemma statements.
No lemmas statements (other than argument reorders) or proofs have changed.

2022-03-11 10:13:17 02e0ab2
refactor(group_theory/commutator): Golf some proofs (#12586)
This PR golfs the proofs of some lemmas in `commutator.lean`.
I also renamed `bot_commutator` and `commutator_bot` to `commutator_bot_left` and `commutator_bot_right`, since "bot_commutator" didn't sound right to me (you would say "the commutator of H and K", not "H commutator K"), but I can revert to the old name if you want.

2022-03-11 10:13:16 d9a774e
feat(order/hom): `prod.swap` as an `order_iso` (#12585)

2022-03-11 08:22:26 840a042
feat(data/list/basic): Miscellaneous `fold` lemmas (#12579)

2022-03-11 08:22:25 1a581ed
refactor(group_theory/solvable): Golf proof (#12552)
This PR golfs the proof of insolvability of S_5, using the new commutator notation.

2022-03-11 08:22:24 1326aa7
feat(analysis/special_functions): limit of x^s * exp(-x) for s real (#12540)

2022-03-11 08:22:23 e553f8a
refactor(algebra/group/to_additive): monadic code cosmetics (#12527)
as suggested by @kmill and @eric-wieser, but the merge was faster
Also improve test file.

2022-03-11 08:22:22 47b1ddf
feat(data/setoid/partition): Relate `setoid.is_partition` and `finpartition` (#12459)
Add two functions that relate `setoid.is_partition` and `finpartition`:
* `setoid.is_partition.partition` 
* `finpartition.is_partition_parts`
Meanwhile add some lemmas related to `finset.sup` and `finset.inf` in data/finset/lattice.

2022-03-11 06:44:16 115f8c7
fix(probability): remove unused argument from `cond_cond_eq_cond_inter` (#12583)
This was a property that we already derived within the proof itself from conditionable intersection (I think I forgot to remove this when I made the PR).

2022-03-11 06:44:15 3061d18
feat(data/nat/{nth,prime}): add facts about primes (#12560)
Gives `{p | prime p}.infinite` as well as `infinite_of_not_bdd_above` lemma. Also gives simp lemmas for `prime_counting'`.

2022-03-11 06:44:14 de4d14c
feat(group_theory/commutator): Add some basic lemmas (#12554)
This PR adds lemmas adds some basic lemmas about when the commutator is trivial.

2022-03-11 06:12:11 355472d
refactor(group_theory/commutator): Golf proof of `commutator_mem_commutator` (#12584)
This PR golfs the proof of `commutator_mem_commutator`, and moves it earlier in the file so that it can be used earlier.

2022-03-11 02:38:57 b5a26d0
feat(data/list/basic): Lists over empty type are `unique` (#12582)

2022-03-10 23:44:36 f0dd6e9
refactor(group_theory/commutator): Use commutators in `commutator_le` (#12572)
This PR golfs the proof of `commutator_le`, and uses the new commutator notation.

2022-03-10 23:12:24 6c04fcf
refactor(group_theory/commutator): Use commutator notation in `commutator_normal` (#12575)
This PR uses the new commutator notation in the proof of `commutator_normal`.

2022-03-10 21:17:59 84cbbc9
feat(algebra/group/to_additive + a few more files): make `to_additive` convert `unit` to `add_unit` (#12564)
This likely involves removing names that match autogenerated names.

2022-03-10 19:33:06 869ef84
feat(data/zmod/basic): some lemmas about coercions (#12571)
The names here are in line with `zmod.nat_coe_zmod_eq_zero_iff_dvd` and `zmod.int_coe_zmod_eq_zero_iff_dvd` a few lines above.

2022-03-10 19:33:05 6fdb1d5
chore(*): clear up some excessive by statements (#12570)
Delete some `by` (and similar commands that do nothing, such as
- `by by blah`
- `by begin blah end`
- `{ by blah }`
- `begin { blah } end`
Also clean up the proof of `monic.map` and `nat_degree_div_by_monic` a bit.

2022-03-10 19:33:04 45c22c0
feat(field_theory/is_alg_closed/basic): add `is_alg_closed.infinite` (#12566)
An algebraically closed field is infinite, because if it is finite then `x^(n+1) - 1` is a separable polynomial (where `n` is the cardinality of the field).

2022-03-10 19:33:02 0e93816
feat(tactic/norm_num_command): add user command to run norm_num on an expression (#12550)
For example,
```
#norm_num 2^100 % 10
-- 6
```

2022-03-10 17:46:10 f654a86
chore(*): remove lines claiming to introduce variables (#12569)
They don't.

2022-03-10 15:58:20 4a59a4d
chore(order/galois_connection): Make lifting instances reducible (#12559)
and provide `infi₂` and `supr₂` versions of the lemmas.

2022-03-10 15:28:09 788ccf0
chore(cardinal_divisibility): tiny golf (#12567)

2022-03-10 13:16:05 cd111e9
feat(data/equiv/mul_add): add to_additive attribute to `group.is_unit` (#12563)
Unless something breaks, this PR does nothing else!

2022-03-10 10:38:55 41f5c17
chore(set_theory/ordinal_arithmetic): Make auxiliary result private (#12562)

2022-03-10 10:08:31 4048a9b
chore(measure_theory/function/convergence_in_measure): golf proof with Borel-Cantelli (#12551)

2022-03-10 09:02:58 d56a9bc
feat(set_theory/ordinal_arithmetic): `add_eq_zero_iff`, `mul_eq_zero_iff` (#12561)

2022-03-10 09:02:56 1e560a6
refactor(group_theory/commutator): Generalize `map_commutator_element` (#12555)
This PR generalizes `map_commutator_element` from `monoid_hom_class F G G` to `monoid_hom_class F G G'`.

2022-03-10 07:37:11 24e3b5f
refactor(topology/opens): Turn `opens.gi` into a Galois coinsertion (#12547)
`topological_space.opens.gi` is currently a `galois_insertion` between `order_dual (opens α)` and `order_dual (set α)`. This turns it into the sensible thing, namely a `galois_coinsertion` between `opens α` and `set α`.

2022-03-10 07:37:10 0fd9929
feat(group_theory/double_cosets): definition of double cosets and some basic lemmas. (#9490)
This contains the definition of double cosets and some basic lemmas about them, such as "the whole group is the disjoint union of its double cosets" and relationship to usual group quotients.

2022-03-10 06:34:47 750ca95
chore(linear_algebra/affine_space/affine_map): golf using the injective APIs (#12543)
The extra whitespace means this isn't actually any shorter by number of lines, but it does eliminate 12 trivial proofs.
Again, the `has_scalar` instance has been hoisted from lower down the file, so that we have the `nat` and `int` actions available when we create the `add_comm_group` structure. Previously we just built the same `has_scalar` structure three times.

2022-03-10 06:34:46 8836a42
fix(linear_algebra/quadratic_form/basic): align diamonds in the nat- and int- action (#12541)
This also provides `fun_like` and `zero_hom_class` instances.
The `has_scalar` code has been moved unchanged from further down in the file.
This change makes `coe_fn_sub` eligible for `dsimp`, since it can now be proved by `rfl`.

2022-03-10 06:34:44 9e28852
feat(field_theory/krull_topology): added krull_topology_totally_disconnected (#12398)

2022-03-10 05:29:37 bab039f
feat(topology/opens): The frame of opens of a topological space (#12546)
Provide the `frame` instance for `opens α` and strengthen `opens.comap` from `order_hom` to `frame_hom`.

2022-03-10 05:29:36 9c2f6eb
feat(category_theory/abelian/exact): `exact g.op f.op` (#12456)
This pr is about `exact g.op f.op` from `exact f g` in an abelian category; this pr is taken from liquid tensor experiment. I believe the original author is @adamtopaz.

2022-03-10 04:56:21 ef25c4c
refactor(group_theory/commutator): Rename `commutator_containment` to `commutator_mem_commutator` (#12553)
This PR renames `commutator_containment` to `commutator_mem_commutator`, uses the new commutator notation, and makes the subgroups implicit.

2022-03-09 13:59:57 9facd19
doc(combinatorics/simple_graph/basic): fix typo (#12544)

2022-03-09 11:28:18 0d6fb8a
chore(analysis/complex/upper_half_plane): use `coe` instead of `coe_fn` (#12532)
This matches the approach used by other files working with `special_linear_group`.

2022-03-09 11:28:17 c4a3413
chore(data/polynomial): use dot notation for monic lemmas (#12530)
As discussed in #12447
- Use the notation throughout the library
- Also deleted `ne_zero_of_monic` as it was a duplicate of `monic.ne_zero` it seems.
- Cleaned up a small proof here and there too.

2022-03-09 09:05:27 55d1f3e
chore(set_theory/cardinal): `min` → `Inf` (#12517)
Various definitions are awkwardly stated in terms of minima of subtypes. We instead rewrite them as infima and golf them. Further, we protect `cardinal.min` to avoid confusion with `linear_order.min`.

2022-03-09 05:46:45 5d405e2
chore(linear_algebra/alternating): golf using injective APIs (#12536)
To do this, we have to move the has_scalar instance higher up in the file.

2022-03-09 05:46:44 bc9dda8
chore(algebra/module/linear_map): golf using injective APIs (#12535)
To do this, we have to move the `has_scalar` instance higher up in the file.

2022-03-09 05:46:43 94e9bb5
chore(data/{finsupp,dfinsupp}/basic): use the injective APIs (#12534)
This also fixes a scalar diamond in the `nat` and `int` actions on `dfinsupp`.
The diamond did not exist for `finsupp`.

2022-03-09 05:46:41 b8d176e
chore(real/cau_seq_completion): put class in Prop (#12533)

2022-03-09 04:04:18 1f6a2e9
chore(scripts): update nolints.txt (#12538)
I am happy to remove some nolints for you!

2022-03-09 00:50:46 2a3ecad
feat(data/equiv/basic): lemmas about composition with equivalences (#10693)

2022-03-08 21:42:52 d69cda1
chore(order/well_founded_set): golf two proofs (#12529)

2022-03-08 21:42:51 709a3b7
feat(set_theory/cardinal_ordinal): `#(list α) ≤ max ω (#α)` (#12519)

2022-03-08 17:53:50 feb24fb
feat(topology/vector_bundle): direct sum of topological vector bundles (#12512)

2022-03-08 17:53:49 1d67b07
feat(category_theory): cases in which (co)equalizers are split monos (epis) (#12498)

2022-03-08 17:53:47 b4572d1
feat(algebra/order/hom/ring): Ordered ring isomorphisms (#12158)
Define `order_ring_iso`, the type of ordered ring isomorphisms, along with its typeclass `order_ring_iso_class`.

2022-03-08 15:58:18 4ad5c5a
feat(data/finset/noncomm_prod): add noncomm_prod_commute (#12521)
adding `list.prod_commute`, `multiset.noncomm_prod_commute` and
`finset.noncomm_prod_commute`.

2022-03-08 15:58:16 fac5ffe
feat(group_theory/subgroup/basic): disjoint_iff_mul_eq_one (#12505)

2022-03-08 15:58:15 1597e9a
feat(set_theory/ordinal_arithmetic): prove `enum_ord_le_of_subset` (#12199)
I also used this as an excuse to remove a trivial theorem and some awkward dot notation.

2022-03-08 14:29:38 ab6a892
feat(data/finset/noncomm_prod): add noncomm_prod_congr (#12520)

2022-03-08 14:29:36 c0ba4d6
feat(ring_theory/polynomial/eisenstein): add cyclotomic_comp_X_add_one_is_eisenstein_at (#12447)
We add `cyclotomic_comp_X_add_one_is_eisenstein_at`: `(cyclotomic p ℤ).comp (X + 1)` is Eisenstein at `p`.
From flt-regular

2022-03-08 12:44:00 94cbfad
chore(algebra/*): move some lemmas about is_unit from associated.lean (#12526)
There doesn't seem to be any reason for them to live there.

2022-03-08 12:43:59 9c13d62
feat(data/int/gcd): add gcd_pos_iff (#12522)

2022-03-08 12:43:58 6dd3249
feat(set_theory/ordinal_arithmetic): `brange_const` (#12483)
This is the `brange` analog to `set.range_const`.

2022-03-08 10:54:20 0798037
refactor(algebra/group/inj_surj): add npow and zpow to all definitions (#12126)
Currently, we have a small handful of helpers to construct algebraic structures via pushforwards and pullbacks that preserve `has_pow` and `has_scalar` instances (added in #10152 and #10832):
* `function.{inj,surj}ective.add_monoid_smul`
* `function.{inj,surj}ective.monoid_pow`
* `function.{inj,surj}ective.sub_neg_monoid_smul`
* `function.{inj,surj}ective.div_inv_monoid_smul`
* `function.{inj,surj}ective.add_group_smul`
* `function.{inj,surj}ective.group_pow`
Predating these, we have a very large collection of helpers that construct new `has_pow` and `has_scalar` instances, for all the above and also for every other one-argument algebraic structure (`comm_monoid`, `ring`, `linear_ordered_field`, ...).
This puts the user in an awkward position; either:
1. They are unaware of the complexity here, and use `add_monoid_smul` and `add_comm_monoid` within the same file, which create two nonequal scalar instances.
2. They use only the large collection, and don't get definitional control of `has_scalar` and `has_pow`, which can cause typeclass diamonds with generic `has_scalar` instances.
3. They use only the small handful of helpers (which requires remembering which ones are safe to use), and have to remember to manually construct `add_comm_monoid` as `{..add_comm_semigroup, ..add_monoid}`. If they screw up and construct it as `{..add_comm_semigroup, ..add_zero_class}`, then they're in the same position as (1) without knowing it.
This change converts every helper in the large collection to _also_ preserve scalar and power instances; as a result, these pullback and pushforward helpers once again no longer construct any new data.
As a result, all these helpers now take `nsmul`, `zsmul`, `npow`, and `zpow` arguments as necessary, to indicate that these operations are preserved by the function in question.
As a result of this change, all existing callers are now expected to have a `has_pow` or `has_scalar` implementation available ahead of time. In many cases the `has_scalar` instances already exist as a more general case, and maybe just need reordering within the file. Sometimes the general case of `has_scalar` is stated in a way that isn't general enough to describe `int` and `nat`. In these cases and the `has_pow` cases, we define new instance manually. Grepping reveals a rough summary of the new instances:
```lean
instance : has_pow (A 0) ℕ
instance has_nsmul : has_scalar ℕ (C ⟶ D)
instance has_zsmul : has_scalar ℤ (C ⟶ D)
instance has_nsmul : has_scalar ℕ (M →ₗ⁅R,L⁆ N)
instance has_zsmul : has_scalar ℤ (M →ₗ⁅R,L⁆ N)
instance has_nsmul : has_scalar ℕ {x : α // 0 ≤ x}
instance has_pow : α // 0 ≤ x} ℕ
instance : has_scalar R (ι →ᵇᵃ[I₀] M)
instance has_nat_scalar : has_scalar ℕ (normed_group_hom V₁ V₂)
instance has_int_scalar : has_scalar ℤ (normed_group_hom V₁ V₂)
instance : has_pow ℕ+ ℕ
instance subfield.has_zpow : has_pow s ℤ
instance has_nat_scalar : has_scalar ℕ (left_invariant_derivation I G)
instance has_int_scalar : has_scalar ℤ (left_invariant_derivation I G)
instance add_subgroup.has_nsmul : has_scalar ℕ H
instance subgroup.has_npow : has_pow H ℕ
instance add_subgroup.has_zsmul : has_scalar ℤ H
instance subgroup.has_zpow : has_pow H ℤ
instance add_submonoid.has_nsmul : has_scalar ℕ S
instance submonoid.has_pow : has_pow S ℕ
instance : has_pow (special_linear_group n R) ℕ
instance : has_pow (α →ₘ[μ] γ) ℕ
instance has_int_pow : has_pow (α →ₘ[μ] γ) ℤ
instance : div_inv_monoid (α →ₘ[μ] γ)
instance has_nat_pow : has_pow (α →ₛ β) ℕ
instance has_int_pow : has_pow (α →ₛ β) ℤ
instance has_nat_pow : has_pow (germ l G) ℕ
instance has_int_pow : has_pow (germ l G) ℤ
instance : has_scalar ℕ (fractional_ideal S P)
instance has_nat_scalar : has_scalar ℕ (𝕎 R)
instance has_int_scalar : has_scalar ℤ (𝕎 R)
instance has_nat_pow : has_pow (𝕎 R) ℕ
instance has_nat_scalar : has_scalar ℕ (truncated_witt_vector p n R)
instance has_int_scalar : has_scalar ℤ (truncated_witt_vector p n R)
instance has_nat_pow : has_pow (truncated_witt_vector p n R) ℕ
instance has_nat_scalar : has_scalar ℕ (α →ᵇ β)
instance has_int_scalar : has_scalar ℤ (α →ᵇ β)
instance has_nat_pow : has_pow (α →ᵇ R) ℕ
```

2022-03-08 08:31:06 b4a7ad6
chore(field_theory/laurent): drop unused 'have'. (#12516)

2022-03-08 08:31:05 dc093e9
chore(combinatorics/configuration): don't use classical.some in a proof (#12515)

2022-03-08 08:31:04 ffa6e6d
feat(set_theory/cardinal): `sum_le_sup_lift` (#12513)
This is a universe-polymorphic version of `sum_le_sup`.

2022-03-08 08:31:03 43cb3ff
fix(ring_theory/ideal/operations): fix a name and dot notation (#12507)

2022-03-08 08:31:02 b2377ea
feat(measure_theory/measure/finite_measure_weak_convergence): generalize scalar action (#12503)
This means the smul lemmas also work for `nsmul`.

2022-03-08 08:31:00 65095fe
doc(order/succ_pred/basic): fix typo (#12501)

2022-03-08 08:30:59 47182da
feat(algebra/group/to_additive): add to_additive doc string linter (#12487)
it is an easy mistake to add a docstring to a lemma with `to_additive`
without also passing a string to `to_additive`. This linter checks for
that, and suggests to add a doc string when needed.

2022-03-08 08:30:58 ccdcce1
chore(set_theory/game/nim): General golfing (#12471)
We make use of various relatively new theorems on ordinals to simplify various proofs, or otherwise clean up the file.

2022-03-08 08:30:57 b3fba03
feat(algebra/homology/homotopy) : `mk_coinductive` (#12457)
`mk_coinductive` is the dual version of `mk_inductive` in the same file. `mk_inductive` is to build homotopy of chain complexes inductively and `mk_coinductive` is to build homotopy of cochain complexes inductively.

2022-03-08 07:26:43 14997d0
feat(analysis/normed_space): allow non-unital C^* rings (#12327)

2022-03-08 06:08:39 74746bd
chore(counterexamples/canonically_ordered_comm_semiring_two_mul): golf (#12504)

2022-03-07 22:59:51 5f6d30e
chore(*): move `has_scalar` instances before `add_comm_monoid` instances (#12502)
This makes it easier for us to set `nsmul` and `zsmul` in future.

2022-03-07 21:31:06 e409a90
feat(measure_theory/integral/periodic.lean): add lemma `function.periodic.tendsto_at_bot_interval_integral_of_pos'` (#12500)
Partner of `function.periodic.tendsto_at_top_interval_integral_of_pos'` (I probably should have included this in #12488)
Formalized as part of the Sphere Eversion project.

2022-03-07 21:31:04 390554d
feat(ring_theory/coprime/basic): lemmas about multiplying by units (#12480)

2022-03-07 21:31:03 9728bd2
chore(number_theory/number_field): golf `int.not_is_field` (#12451)
Golfed proof of number_theory.number_field.int.not_is_field
Co-authored by: David Ang <dka31@cantab.ac.uk>
Co-authored by: Eric Rodriguez <ericrboidi@gmail.com>
Co-authored by: Violeta Hernández <vi.hdz.p@gmail.com>

2022-03-07 19:47:38 1b4ee53
feat(algebra/associated): add pow_not_prime (#12493)

2022-03-07 19:47:36 f28023e
feat(measure_theory/function/uniform_integrable): Uniform integrability and Vitali convergence theorem (#12408)
This PR defines uniform integrability (both in the measure theory sense as well as the probability theory sense) and proves the Vitali convergence theorem which establishes a relation between convergence in measure and uniform integrability with convergence in Lp.

2022-03-07 19:47:34 1ee91a5
feat(probability_theory/stopping): define progressively measurable processes (#11350)
* Define progressively measurable processes (`prog_measurable`), which is the correct strengthening of `adapted` to get that the stopped process is also progressively measurable.
* Prove that an adapted continuous process is progressively measurable.
For discrete time processes, progressively measurable is equivalent to `adapted` .
This PR also changes some measurable_space arguments in `measurable_space.lean` from typeclass arguments to implicit.

2022-03-07 18:31:04 e871be2
feat(data/real/nnreal): floor_semiring instance (#12495)
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60nat.2Eceil.60.20on.20.60nnreal.60.20.3F/near/274353230)

2022-03-07 18:31:03 8d2ffb8
feat(category_theory): (co)kernels of biproduct projection and inclusion (#12394)
add kernels and cokernels of biproduct projections and inclusions

2022-03-07 18:01:16 85a415e
docs(overview): Add overview of model theory (#12496)
Adds a subsection on model theory to the mathlib overview.

2022-03-07 16:01:41 3c3c3bc
fix(tactic/interactive): use non-interactive admit tactic (#12489)
In a future release of Lean 3, the interactive admit tactic will take an additional argument.

2022-03-07 16:01:39 5f2a6ac
feat(measure_theory/integral/periodic): further properties of periodic integrals (#12488)
Formalized as part of the Sphere Eversion project.

2022-03-07 16:01:38 c95ce52
fix(number_theory/modular): prefer `coe` over `coe_fn` in lemma statements (#12445)
This file is already full of `↑ₘ`s (aka coercions to matrix), we may as well use them uniformly.

2022-03-07 14:11:59 f451e09
chore(algebra/order/{group,monoid}): trivial lemma about arithmetic on `with_top` and `with_bot` (#12491)

2022-03-07 14:11:57 65ac316
chore(algebra/order/nonneg): add `nonneg.coe_nat_cast` (#12490)

2022-03-07 14:11:56 16b6766
feat(analysis/normed_space): non-unital normed rings (#12326)
On the way to allowing non-unital C^*-algebras.

2022-03-07 14:11:55 9ed4366
feat(category_theory/limits): limit preservation properties of functor.left_op and similar (#12168)

2022-03-07 12:17:08 900ce6f
chore(data/equiv/basic): rename `involutive.to_equiv` to `to_perm` (#12486)

2022-03-07 10:15:48 eb46e7e
feat(algebra/group/to_additive): let to_additive turn `pow` into `nsmul` (#12477)
The naming convention for `npow` in lemma names is `pow`, so let’s teach
`to_additive` about it.
A fair number of lemmas now no longer need an explicit additive name.

2022-03-07 10:15:47 d704f27
refactor(set_theory/*): `o.out.r` → `<` (#12468)
We declare a `linear_order` instance on `o.out.α`, for `o : ordinal`, with `<` def-eq to `o.out.r`. This will improve code clarity and will allow us to state theorems about specific ordinals as ordered structures.

2022-03-07 10:15:46 9dd8ec1
feat(analysis/normed/group/hom): add a module instance (#12465)

2022-03-07 10:15:45 0b86bb8
feat(measure_theory/group/arithmetic): actions by int and nat are measurable (#12464)
The `has_measurable_smul₂` proofs are essentially copied from the analogous proofs for `has_measurable_pow`, after golfing them.

2022-03-07 10:15:43 3f353db
feat(data/nat/basic): add one_le_div_iff (#12461)
Couldn't find these.

2022-03-07 10:15:42 2675b5c
feat(measure_theory/constructions/polish): injective images of Borel sets in Polish spaces are Borel (#12448)
We prove several fundamental results on the Borel sigma-algebra in Polish spaces, notably:
* Lusin separation theorem: disjoint analytic sets can be separated via Borel sets
* Lusin-Souslin theorem: a continuous injective image of a Borel set in a Polish space is Borel
* An injective measurable map on a Polish space is a measurable embedding, i.e., it maps measurable sets to measurable sets

2022-03-07 10:15:41 3778353
feat(set_theory/ordinal_arithmetic): `enum_ord univ = id` (#12391)

2022-03-07 10:15:40 313f405
feat(category_theory/*): preserves biproducts implies additive (#12014)

2022-03-07 10:15:38 f063d0c
feat(geometry/manifold/tangent_bundle): the `tangent_bundle` is a `topological_vector_bundle` (#8295)

2022-03-07 08:10:23 a19f6c6
doc(algebra/group/to_additive): `to_additive` and docstring interaction (#12476)

2022-03-06 21:54:59 92ef3c5
feat(ring_theory/graded_algebra/radical) : radical of homogeneous ideal is homogeneous (#12277)
This pr contains the following results about homogeneous ideals.
* `ideal.is_homogeneous.is_prime_iff`: for any `I : ideal A`, if `I` is homogeneous, then
   `I` is prime if and only if `I` is homogeneously prime, i.e. `I ≠ ⊤` and if `x, y` are
   homogeneous elements such that `x * y ∈ I`, then at least one of `x,y` is in `I`.
* `ideal.is_prime.homogeneous_core`: for any `I : ideal A`, if `I` is prime, then
   `I.homogeneous_core 𝒜` (i.e. the largest homogeneous ideal contained in `I`) is also prime.
* `ideal.is_homogeneous.radical`: for any `I : ideal A`, if `I` is homogeneous, then the
   radical of `I` is homogeneous as well.
* `homogeneous_ideal.radical`: for any `I : homogeneous_ideal 𝒜`, `I.radical` is the the
   radical of `I` as a `homogeneous_ideal 𝒜`

2022-03-06 18:41:38 40602e6
chore(set_theory/cardinal_divisibility): add instance unique (units cardinal) (#12458)

2022-03-06 15:36:29 6696187
chore(set_theory/ordinal_arithmetic): Reorder theorems (#12475)
It makes more sense for `is_normal.bsup_eq` and `is_normal.blsub_eq` to be together.

2022-03-06 15:06:27 0a6efe0
feat(analysis/normed_space/star/spectrum): prove the spectral radius of a star normal element is its norm (#12249)
In a C⋆-algebra over ℂ, the spectral radius of any star normal element is its norm. This extends the corresponding result for selfadjoint elements.
- [x] depends on: #12211 
- [x] depends on: #11991

2022-03-06 11:52:53 28c902d
fix(algebra/group/pi): Fix apply-simp-lemmas for monoid_hom.single (#12474)
so that the simp-normal form really is `pi.mul_single`.
While adjusting related lemmas in `group_theory.subgroup.basic`, add a
few missing `to_additive` attributes.

2022-03-06 07:44:42 64d953a
refactor(set_theory/ordinal): `enum_lt` → `enum_lt_enum` (#12469)
That way, the theorem name matches that of `enum_le_enum`, `typein_lt_typein`, and `typein_le_typein`.

2022-03-06 07:44:41 d61ebab
feat(category_theory/abelian): (co)kernels in terms of exact sequences (#12460)

2022-03-06 07:44:40 b7808a9
chore(set_theory/ordinal_arithmetic): Golf `lsub_typein` and `blsub_id` (#12203)

2022-03-06 07:44:39 b4d007f
feat(category_theory/limits): transport is_limit along F.left_op and similar (#12166)

2022-03-06 07:44:38 371b48a
feal(category_theory/bicategory/functor): define pseudofunctors (#11992)
This PR defines pseudofunctors between bicategories. 
We provide two constructors (`mk_of_oplax` and `mk_of_oplax'`) that construct pseudofunctors from oplax functors whose `map_id` and `map_comp` are isomorphisms. The constructor `mk_of_oplax` uses `iso` to describe isomorphisms, while `mk_of_oplax'` uses `is_iso`.

2022-03-06 07:11:07 62e7d35
feat(category_theory/limits): uniqueness of preadditive structures (#12342)

2022-03-05 17:38:12 974d23c
feat(data/polynomial/monic): add monic_of_mul_monic_left/right (#12446)
Also clean up variables that are defined in the section.
From https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60geom_sum.20.28X.20.20n.29.60.20is.20monic/near/274130839

2022-03-05 16:13:55 e542154
feat(category_theory/full_subcategory): full_subcategory.map and full_subcategory.lift (#12335)

2022-03-05 16:13:54 51adf3a
feat(model_theory/terms_and_formulas): Using a list encoding, bounds the number of terms (#12276)
Defines `term.list_encode` and `term.list_decode`, which turn terms into lists, and reads off lists as lists of terms.
Bounds the number of terms by the number of allowed symbols + omega.

2022-03-05 15:19:46 92b27e1
feat(category_theory/discrete_category): generalize universes for comp_nat_iso_discrete (#12340)

2022-03-05 15:19:45 4ecd92a
feat(category_theory/abelian): faithful functors reflect exact sequences (#12071)

2022-03-05 13:15:02 fa6b16e
feat(data/nat/prime): add nat.eq_two_pow_or_exists_odd_prime_and_dvd (#12395)

2022-03-05 13:15:01 8b91390
feat(order/hom/basic): add `order_iso.with_{top,bot}_congr` (#12264)
This adds:
* `with_bot.to_dual_top`
* `with_top.to_dual_bot`
* `order_iso.with_top_congr`
* `order_iso.with_bot_congr`

2022-03-05 12:17:39 2840532
doc(topology/uniform_space/cauchy): fix typo (#12453)

2022-03-05 10:56:08 bda091d
feat(measure_theory/card_measurable_space): cardinality of generated sigma-algebras (#12422)
If a sigma-algebra is generated by a set of sets `s` whose cardinality is at most the continuum,
then the sigma-algebra satisfies the same cardinality bound.

2022-03-05 09:10:31 93451af
feat(order/category/BoolAlg): The category of Boolean algebras (#12452)
Define `BoolAlg`, the category of Boolean algebras with bounded lattice homs.

2022-03-05 09:10:30 f5b885b
feat(linear_algebra/clifford_algebra/conjugation): reverse and involute are grade-preserving (#12373)
This shows that various submodules are preserved under `submodule.map` by `reverse` or `involute`.

2022-03-05 08:41:18 ac28ddf
feat(data/nat/fib): add bit0/bit1 lemmas and fast_fib (#12444)
This provides lemmas that let `simp` calculate `fib` from the bit0/bit1 numeral representation. (This isn't intended to be for speed, although it does evaluate things reasonably quick.)
```lean
lemma foo : fib 64 = 10610209857723 :=
begin
  norm_num [fib_bit0, fib_bit1, fib_bit0_succ, fib_bit1_succ],
end
```
These are then used to show that `fast_fib` computes `fib`.

2022-03-05 06:05:25 36a528d
feat(set_theory/ordinal_arithmetic): `add_le_of_forall_add_lt` (#12315)

2022-03-05 03:06:09 b0d9462
feat(category_theory/preadditive/injective) : more basic properties and morphisms about injective objects (#12450)
This pr dualises the rest of `projective.lean`

2022-03-05 03:06:08 fdf43f1
feat(category_theory/closed): generalize some material from cartesian closed categories to closed monoidal categories (#12386)
No new content, just moving some trivially generalisable material about cartesian closed categories to closed monoidal categories.
I've defined `ihom` for internal hom, and made `exp` an abbreviation for it in the cartesian closed case.
A few other definitions similarly become abbreviations.
I've left the `⟹` arrow for the internal hom in the cartesian closed case, and added `⟶[C]` for the general internal hom.

2022-03-05 01:51:47 45d235e
feat(analysis/normed_space/star/matrix): `entrywise_sup_norm_bound_of_unitary` (#12255)
The entrywise sup norm of a unitary matrix is at most 1.
I suspect there is a simpler proof!

2022-03-05 01:51:46 1755911
feat(topology/compacts): The types of clopens and of compact opens (#11966)
Define `clopens` and ` compact_opens`, the types of clopens and of compact open sets of a topological space.

2022-03-05 00:00:54 8e1da4e
feat(ring_theory/adjoin/basic): if a set of elements of a subobject commute, its closure/adjoin is also commutative (#12231)
We show that if a set of elements of a subobject commute, its closure/adjoin is also commutative The subobjects include (additive) submonoids, (additive) subgroups, subsemirings, subrings, and subalgebras.

2022-03-04 21:44:21 3ac971b
feat(order/category/Frame): The category of frames (#12363)
Define `Frame`, the category of frames with frame homomorphisms.

2022-03-04 21:44:20 ee4be2d
feat(ring_theory/simple_module): Simple modules as simple objects in the Module category (#11927)
A simple module is a simple object in the Module category. 
From there it should be easy to write an alternative proof of Schur's lemma for modules using category theory (using the work already done in category_theory/preadditive/schur.lean).
The other direction (a simple object in the Module category is a simple module) hasn't been proved yet.

2022-03-04 21:44:19 a07cf6b
feat(ring_theory/polynomial/homogeneous) : add lemma `homogeneous_component_homogeneous_polynomial` (#10113)
add the following lemma
```lean
lemma homogeneous_component_homogeneous_polynomial (m n : ℕ)
  (p : mv_polynomial σ R) (h : p ∈ homogeneous_submodule σ R n) :
  homogeneous_component m p = if m = n then p else 0
```

2022-03-04 19:43:16 34d8ff1
feat(topology/algebra/weak_dual): generalize to weak topologies for arbitrary dualities (#12284)

2022-03-04 19:43:15 89654c0
feat(data/equiv/{mul_add,ring}): Coercions to types of morphisms from their `_class` (#12243)
Add missing coercions to `α ≃+ β`, `α ≃* β`, `α ≃+* β` from `add_equiv_class`, `mul_equiv_class`, `ring_equiv_class`.

2022-03-04 17:34:12 30d63cd
feat(field_theory/cardinality): a cardinal can have a field structure iff it is a prime power (#12442)

2022-03-04 17:34:11 858002b
feat(algebra/char_zero): cast(_pow)_eq_one (#12429)

2022-03-04 17:34:10 a54dd9e
feat(order/category/BoundedDistribLattice): The category of bounded distributive lattices (#12347)
Define `BoundedDistribLattice`, the category of bounded distributive lattices with bounded lattice homomorphisms.

2022-03-04 17:34:09 fab59cb
feat(set_theory/cofinality): `cof_eq_Inf_lsub` (#12314)
This much nicer characterization of cofinality will allow us to prove various theorems relating it to `lsub` and `blsub`.

2022-03-04 17:34:07 efd9a16
refactor(group_theory/commutator): Define commutators of subgroups in terms of commutators of elements (#12309)
This PR defines commutators of elements of groups.
(This is one of the several orthogonal changes from https://github.com/leanprover-community/mathlib/pull/12134)

2022-03-04 17:34:06 35b835a
feat(data/set/sigma): Indexed sum of sets (#12305)
Define `set.sigma`, the sum of a family of sets indexed by a set.

2022-03-04 17:34:05 ed63386
feat(category_theory/preadditive/injective) : definition of injective objects in a category (#11921)
This pr contains definition of injective objects and some useful instances.

2022-03-04 17:34:04 a8629a5
refactor(tactic/interactive): use 1-indexing in work_on_goal (#11813)
Backporting the change in https://github.com/leanprover-community/mathlib4/pull/178 to make `work_on_goal` 1-indexed. See also: https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.60work_on_goal.60.20vs.20.60swap.60

2022-03-04 15:24:38 0ec8e6a
feat(algebra/algebra/operations): more lemmas about `mul_opposite` (#12441)
Naturally the lemmas I left out of the previous PR, notably `map_unop_mul` and `map_unop_pow`, are the ones I actually needed.
This also improves the `simps` lemmas on `submodule.equiv_opposite`, which were previously garbage as `simps` didn't unfold `ring_equiv.symm` properly. At any rate, the only reason it was defined that way was because the lemmas in this PR were missing.

2022-03-04 15:24:37 31cb3c1
chore(algebra/group_with_zero/basic): generalize `units.exists_iff_ne_zero` to arbitrary propositions (#12439)
This adds a more powerful version of this lemma that allows an existential to be replaced with one over the underlying group with zero.
The naming matches `subtype.exists` and `subtype.exists'`, while the trailing zero matches `units.mk0`.

2022-03-04 15:24:36 6e94c53
feat(complex/basic): nnnorm coercions (#12428)

2022-03-04 15:24:34 dc95d02
feat(order/filter/archimedean): add lemmas about convergence to ±∞ for archimedean rings / groups. (#12427)
Formalized as part of the Sphere Eversion project.

2022-03-04 15:24:33 e41303d
feat(category_theory/limits/shapes): preserving (co)kernels (#12419)
This is work towards showing that homology is a lax monoidal functor.

2022-03-04 14:03:56 2d6c52a
feat(topology/metric_space/polish): definition and basic properties of polish spaces (#12437)
A topological space is Polish if its topology is second-countable and there exists a compatible
complete metric. This is the class of spaces that is well-behaved with respect to measure theory.
In this PR, we establish basic (and not so basic) properties of Polish spaces.

2022-03-04 14:03:54 0a3d144
chore(topology/algebra/uniform_mul_action): add `has_uniform_continuous_const_smul.op` (#12434)
This matches `has_continuous_const_smul.op` and other similar lemmas.
With this in place, we can state `is_central_scalar` on `completion`s.

2022-03-04 14:03:53 cac9242
chore(analysis/complex/basic): golf `norm_rat/int/int_of_nonneg` (#12433)
While looking at PR #12428, I found some easy golfing of some lemmas (featuring my first-ever use of `single_pass`! :smile: ).

2022-03-04 14:03:51 173f161
feat(set_theory/ordinal_arithmetic): `bsup` / `blsub` of function composition (#12381)

2022-03-04 12:39:06 a721700
chore(algebra/algebra/operations): add missing `@[elab_as_eliminator]` on recursors (#12440)
`refine submodule.pow_induction_on' _ _ _ _ h` struggles without this attribute

2022-03-04 12:39:04 4a416bc
feat(set_theory/ordinal_arithmetic): `is_normal.blsub_eq` (#12379)

2022-03-04 12:39:03 b144460
feat(number_theory/cyclotomic/primitive_roots): generalize norm_eq_one (#12359)
We generalize `norm_eq_one`, that now computes the norm of any primitive `n`-th root of unity if `n ≠ 2`. We modify the assumption, that is still verified in the main case of interest `K = ℚ`.
From flt-regular

2022-03-04 12:39:02 53dc7ca
feat(linear_algebra/basic): some basic lemmas about dfinsupp.sum (#12214)
Two basic lemmas about dfinsupp.sum that could be useful (I needed them for another project)

2022-03-04 09:26:44 052d027
refactor(algebra/category/Group/basic): Avoid data shuffle in `mul_equiv.to_Group_iso` (#12407)
Change the definition of `mul_equiv.to_Group_iso` from `{X Y : Type*} [group X] [group Y] (e : X ≃* Y) : Group.of X ≅ Group.of Y` to `{X Y : Group} (e : X ≃* Y) : X ≅ Y`. Not making `X` and `Y` into `Group`s on the fly avoids rebundling them when they already are `Group`s, which breaks definitional equality.

2022-03-04 09:26:43 0666dd5
feat(order/bounded): The universal set is unbounded (#12390)

2022-03-04 09:26:42 09c66fa
feat(counterexamples/seminorm_lattice_not_distrib): The lattice of seminorms is not distributive. (#12099)
A counterexample showing the lattice of seminorms is not distributive

2022-03-04 08:56:10 82a142d
feat(algebra/category): Module R is monoidal closed for comm_ring R (#12387)

2022-03-04 07:06:13 e96cf5e
feat(data/nat/gcd): add coprime_prod_left and coprime_prod_right (#12268)

2022-03-03 23:56:18 40524f1
feat(algebra/star/self_adjoint): define normal elements of a star monoid (#11991)
In this PR, we define the normal elements of a star monoid, i.e. those elements `x`
that commute with `star x`. This is defined as the prop type class `is_star_normal`.
This was formalized as part of the semilinear maps paper.

2022-03-03 23:15:44 544f45b
refactor(linear_algebra/bilinear_form): split off matrix part (#12435)
The bilinear form file is way too large. The part that concerns matrices is not depended on by the general theory, and belongs in its own file.

2022-03-03 21:32:01 5371338
feat(group_theory/torsion): all torsion monoids are groups (#12432)

2022-03-03 21:32:00 1af53ff
feat(polynomial/cyclotomic): some divisibility results (#12426)

2022-03-03 21:31:59 54c286d
feat(data/{nat,int,rat}/cast, algebra/star/basic): lemmas about `star` on casts (#12418)
This also includes lemmas about `mul_opposite` on casts which are used to prove the star lemmas. The new lemmas are:
* `star_nat_cast`
* `star_int_cast`
* `star_rat_cast`
* `op_nat_cast`
* `op_int_cast`
* `op_rat_cast`
* `unop_nat_cast`
* `unop_int_cast`
* `unop_rat_cast`

2022-03-03 21:31:57 9deac65
feat(ring_theory/ideal): more lemmas on ideals multiplied with submodules (#12401)
These are, like #12178, split off from #12287

2022-03-03 21:31:56 2fc2d1b
feat(linear_algebra/clifford_algebra): lemmas about mapping submodules (#12399)

2022-03-03 21:31:55 e84c1a9
chore(linear_algebra/general_linear_group): replace coe_fn with coe in lemma statements (#12397)
This way, all the lemmas are expressed in terms of `↑` and not `⇑`.
This matches the approach used in `special_linear_group`.

2022-03-03 21:31:54 4503732
feat(field_theory/cardinality): cardinality of fields & localizations (#12285)

2022-03-03 21:31:52 2c0fa82
feat(group_theory/free_product): the 🏓-lemma (#12210)
The Ping-Pong-Lemma.
If a group action of `G` on `X` so that the `H i` acts in a specific way on disjoint subsets
`X i` we can prove that `lift f` is injective, and thus the image of `lift f` is isomorphic to the free product of the `H i`.
Often the Ping-Pong-Lemma is stated with regard to subgroups `H i` that generate the whole group; we generalize to arbitrary group homomorphisms `f i : H i →* G` and do not require the group to be generated by the images.
Usually the Ping-Pong-Lemma requires that one group `H i` has at least three elements. This condition is only needed if `# ι = 2`, and we accept `3 ≤ # ι` as an alternative.

2022-03-03 21:31:51 f549c10
feat(set_theory/cardinal_divisibility): add lemmas about divisibility in the cardinals (#12197)

2022-03-03 21:31:50 2a05bb3
feat(ring_theory/witt_vector): classify 1d isocrystals (#12041)
To show an application of semilinear maps that are not linear or conjugate-linear, we formalized the one-dimensional version of a theorem by Dieudonné and Manin classifying the isocrystals over an algebraically closed field with positive characteristic. This work is described in a recent draft from @dupuisf , @hrmacbeth , and myself: https://arxiv.org/abs/2202.05360

2022-03-03 19:28:04 066ffdb
chore(algebra/*): provide `non_assoc_ring` instances (#12414)

2022-03-03 19:28:03 5d0960b
feat(data/int/basic): add three lemmas about ints, nats and int_nat_abs (#12380)
[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/int.2Eto_nat_eq_zero)

2022-03-03 19:28:02 cdb69d5
fix(data/set/function): do not use reducible (#12377)
Reducible should only be used if the definition if it occurs as an explicit argument in a type class and must reduce during type class search, or if it is a type that should inherit instances.  Propositions should only be reducible if they are trivial variants (`<` and `>` for example).
These reducible attributes here will cause issues in Lean 4.  In Lean 4, the simplifier unfold reducible definitions in simp lemmas.  This means that tagging an `inj_on`-theorem with `@[simp]` creates the simp lemma `?a = ?b` (i.e. match anything).

2022-03-03 19:28:00 363b7cd
feat(algebra/ring/basic): generalize lemmas about differences of squares to non-commutative rings (#12366)
This copies `mul_self_sub_mul_self` and `mul_self_eq_mul_self_iff` to the `commute` namespace, and reproves the existing lemmas in terms of the new commute lemmas.
As a result, the requirements on `mul_self_sub_one` and `mul_self_eq_one_iff` and `units.inv_eq_self_iff` can be weakened from `comm_ring` to `non_unital_non_assoc_ring` or `ring`.
This also replaces a few `is_domain`s with the weaker `no_zero_divisors`, since the lemmas are being moved anyway. In practice this just removes the nontriviality requirements.

2022-03-03 19:27:59 e823109
chore(algebra/{group,group_with_zero}/basic): rename `div_mul_div` and `div_mul_comm` (#12365)
The new name, `div_mul_div_comm` is consistent with `mul_mul_mul_comm`.
Obviously this renames the additive versions too.

2022-03-03 19:27:58 ca7346d
feat(combinatorics/simple_graph/connectivity): add walk.darts (#12360)
Darts can be more convenient than edges when working with walks since they keep track of orientation. This adds the list of darts along a walk and uses this to define and prove things about edges along a walk.

2022-03-03 19:27:57 3b0111b
feat(field_theory/minpoly): add minpoly_add_algebra_map and minpoly_sub_algebra_map (#12357)
We add minpoly_add_algebra_map and minpoly_sub_algebra_map: the minimal polynomial of x ± a.
From flt-regular

2022-03-03 19:27:56 301a266
feat(number_theory/cyclotomic/primitive_roots): add is_primitive_root.sub_one_power_basis (#12356)
We add `is_primitive_root.sub_one_power_basis`,  the power basis of a cyclotomic extension given by `ζ - 1`, where `ζ ` is a primitive root of unity.
From flt-regular.

2022-03-03 19:27:55 78b323b
feat(analysis/special_functions/trigonometric): inequality `tan x  > x` (#12352)

2022-03-03 19:27:53 d0816c0
feat(analysis/calculus): support and cont_diff (#11976)
* Add some lemmas about the support of the (f)derivative of a function
* Add some equivalences for `cont_diff`

2022-03-03 17:48:13 16d48d7
feat(algebra/star/basic + analysis/normed_space/star/basic): add two eq_zero/ne_zero lemmas (#12412)
Added two lemmas about elements being zero or non-zero.
Golf a proof.

2022-03-03 17:48:12 3fa09c2
feat(algebra/homology/homotopy): compatibilities of null_homotopic_map with composition and additive functors (#12392)

2022-03-03 17:48:10 0da2d1d
feat(ring_theory/polynomial/eisenstein): add mem_adjoin_of_smul_prime_pow_smul_of_minpoly_is_eiseinstein_at (#12371)
We add `mem_adjoin_of_smul_prime_pow_smul_of_minpoly_is_eiseinstein_at`: let `K` be the field of fraction of an integrally closed domain `R` and let `L` be a separable extension of `K`, generated by an integral power basis `B` such that the minimal polynomial of `B.gen` is Eisenstein at `p`. Given `z : L` integral over `R`, if `p ^ n • z ∈ adjoin R {B.gen}`, then `z ∈ adjoin R {B.gen}`. Together with `algebra.discr_mul_is_integral_mem_adjoin` this result often allows to compute the ring of integers of `L`.
From flt-regular

2022-03-03 17:48:08 b0cf3d7
feat(algebra/algebra/subalgebra): add a helper to promote submodules to subalgebras (#12368)

2022-03-03 17:48:05 ba998da
feat(algebra/order/monoid_lemmas_zero_lt): more lemmas using `pos_mul` and friends (#12355)
This PR continues the `order` refactor.  The added lemmas are the `\le` analogues of the `<` lemmas that are already present.

2022-03-03 17:48:03 5159a8f
feat(simplex_category): various epi/mono lemmas (#11924)

2022-03-03 16:19:52 f41897d
feat(dynamics/fixed_points/basic): Fixed points are a subset of the range (#12423)

2022-03-03 16:19:50 4edf36d
feat(data/nat/fib): sum of initial fragment of the Fibonacci sequence is one less than a Fibonacci number (#12416)

2022-03-03 16:19:49 59bf454
refactor(measure_theory): enable dot notation for measure.map (#12350)
Refactor to allow for using dot notation with `measure.map` (was previously not possible because it was bundled as a linear map). Mirrors `measure.restrict` wrapper implementation for `measure.restrictₗ`.

2022-03-03 16:19:48 c504585
fix(number_theory/number_field): make ring_of_integers_algebra not an instance (#12331)
This issue has caused problems for at least two of Kevin's PhD students; it is better to remove it for now or disable it temporarily.
c.f. https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/diamond.20for.20monoid.20instance.20on.20ideals

2022-03-03 16:19:47 0ac3f9d
feat(category_theory/preadditive): the category of additive functors (#12330)

2022-03-03 16:19:46 691722a
feat(set_theory/ordinal): `enum` is injective (#12319)

2022-03-03 16:19:45 18f53db
feat(topology/metric_space/pi_nat): metric structure on product spaces (#12220)
We endow the spaces `Π (n : ℕ), E n` or `Π (i : ι), E i` with various distances (not registered as instances), and use these to show that these spaces retract on their closed subsets.

2022-03-03 14:50:37 8053f56
feat(ring_theory/dedekind_domain): strengthen `exist_integer_multiples` (#12184)
Let `J ≠ ⊤` be an ideal in a Dedekind domain `A`, and `f ≠ 0` a finite collection of elements of `K = Frac(A)`, then we can multiply the elements of `f` by some `a : K` to find a collection of elements of `A` that is not completely contained in `J`.

2022-03-03 14:50:36 4dec7b5
feat(ring_theory/ideal): `(I : ideal R) • (⊤ : submodule R M)` (#12178)
Two useful lemmas on the submodule spanned by `I`-scalar multiples.

2022-03-03 13:01:44 26d9d38
feat(number_theory): padic.complete_space instance (#12424)

2022-03-03 13:01:43 bf203b9
docs(set_theory/cofinality): Fix cofinality definition (#12421)
The condition is `a ≤ b`, not `¬(b > a)`.

2022-03-03 13:01:42 02cad2c
feat(data/complex/basic): add abs_hom (#12409)

2022-03-03 13:01:40 bc35902
chore(algebra/group/hom): more generic `f x ≠ 1` lemmas (#12404)
 * `map_ne_{one,zero}_iff` is the `not_congr` version of `map_eq_one_iff`, which was previously only available for `mul_equiv_class`
 * `ne_{one,zero}_of_map` is one direction of `map_ne_{one,zero}_iff` that doesn't assume injectivity

2022-03-03 13:01:39 ca0ff3a
feat(algebra/algebra/spectrum): show the star and spectrum operations commute (#12351)
This establishes the identity `(σ a)⋆ = σ a⋆` for any `a : A` where `A` is a star ring and a star module over a star add monoid `R`.

2022-03-03 13:01:38 f7a6fe9
feat(set_theory/cofinality): Prove simple theorems on regular cardinals (#12328)

2022-03-03 11:09:23 16ad25c
chore(analysis/normed_space/star/basic): golf a proof (#12420)
Shorten a proof using ext.

2022-03-03 11:09:21 228ab96
feat(data/list/destutter): add `list.destutter` to remove chained duplicates (#11934)

2022-03-03 09:29:13 46b9d05
feat(data/part): Lemmas for get on binary function instances (#12194)
A variety of lemmas such as `mul_get_eq` for `part`.

2022-03-03 07:35:45 9f721ba
chore(logic/function/basic): add function.ne_iff (#12288)

2022-03-03 00:08:38 9deeddb
feat(algebra/algebra/operations): `submodule.map_pow` and opposite lemmas (#12374)
To prove `map_pow`, we add `submodule.map_hom` to match the very-recently-added `ideal.map_hom`. 
The opposite lemmas can be used to extend these results for maps that reverse multiplication, by factoring them into an `alg_hom` into the opposite type composed with `mul_opposite.op`.
`(↑(op_linear_equiv R : A ≃ₗ[R] Aᵐᵒᵖ) : A →ₗ[R] Aᵐᵒᵖ)` is really a mouthful, but the elaborator can't seem to work out the type any other way, and `.to_linear_map` appears not to be the preferred form for `simp` lemmas.

2022-03-02 22:17:15 6f74d3c
chore(algebra/ring/basic): generalize lemmas to non-associative rings (#12411)

2022-03-02 21:08:47 ce26d75
refactor(analysis/normed_space/basic): split into normed_space and ../normed/normed_field (#12410)
Splits off the sections about normed rings and fields of the file `analysis/normed_space/basic` into a new file `analysis/normed/normed_field`.

2022-03-02 20:03:20 423328e
chore(probability/independence): change to set notation and `measurable_set` (#12400)

2022-03-02 18:33:51 a283e17
feat(algebra/module/submodule_pointwise): pointwise negation (#12405)
We already have pointwise negation on `add_submonoid`s (from #10451), this extends it to `submodules`.
The lemmas are all copies of the add_submonoid lemmas, except for two new lemmas:
* `submodule.neg_to_add_submonoid`
* `submodule.neg_eq_self`, which isn't true for `add_submonoid`s
Finally, we provide a `has_distrib_neg` instance; even though the negation is not cancellative, it does distribute over multiplication as expected.

2022-03-02 17:49:08 90e2957
chore(measure_theory/function/egorov): rename `uniform_integrability` file to `egorov` (#12402)

2022-03-02 14:31:45 7959d98
feat(linear_algebra/matrix.determinant): add `matrix.det_neg` (#12396)

2022-03-02 14:31:43 c96fb62
refactor(group_theory/*): Rename `general_commutator.lean` to `commutator.lean` (#12388)
Followup to #12308.

2022-03-02 14:31:41 d00cbee
feat(algebra/big_operators/basic): prod_dvd_prod_of_subset (#12383)

2022-03-02 14:31:40 22ddf9a
feat(ring_theory/ideal): `map f (I^n) = (map f I)^n` (#12370)

2022-03-02 12:52:29 4e8d8f2
feat(ring_theory/unique_factorization_domain): factors of `p^k` (#12369)
This is a relatively trivial application of existing lemmas, but the result is a particularly nice shape that I felt worth to add to the library.

2022-03-02 12:52:28 f191f52
chore(algebra/big_operators): generalize `map_prod` to `monoid_hom_class` (#12354)
This PR generalizes the following lemmas to `(add_)monoid_hom_class`:
 * `map_prod`, `map_sum`
 * `map_multiset_prod`, `map_multiset_sum`
 * `map_list_prod`, `map_list_sum`
 * `map_finsupp_prod`, `map_finsupp_sum`
I haven't removed any of the existing specialized, namespaced versions of these lemmas yet, but I have marked them as `protected` and added a docstring saying to use the generic version instead.

2022-03-02 10:22:02 20d9541
chore(ring_theory/localization): `localization_map_bijective` rename & `field` instance version (#12375)

2022-03-02 09:30:27 35086a1
feat(probability): define conditional probability and add basic related theorems (#12344)
Add the definition of conditional probability as a scaled restricted measure and prove Bayes' Theorem and other basic theorems.

2022-03-02 07:46:20 1eebec5
perf(data/fintype/basic): speed up mem_of_mem_perms_of_list (#12389)
This single theorem was taking twice as long as everything else in the file put together, and it was easy to fix.

2022-03-02 07:46:19 9daa233
doc(*): fix broken markdown links (#12385)
Some urls to nLab were also weird, so I replaced it with less weird ones.
The `MM91` reference was presumably intended to reference `MM92`.

2022-03-02 07:46:18 b77ff23
feat(algebra/ring): add non-unital and non-associative rings (#12300)
Following up on #11124.
The longer term goal is to develop C^* algebras, where non-unital algebras are an essential part of the theory.

2022-03-02 06:23:49 fefe359
feat(set_theory/principal): prove theorems about additive principal ordinals (#11704)

2022-03-02 04:09:19 a9902d5
feat(algebra/divisibility): generalise basic facts to semigroups (#12325)

2022-03-02 02:44:42 cc9de07
feat(algebra/star): replace star_monoid with star_semigroup (#12299)
In preparation for allowing non-unital C^* algebras, replace star_monoid with star_semigroup.

2022-03-01 23:58:42 4ba9098
feat(algebra/euclidean_domain,data/int/basic): dvd_div_of_mul_dvd (#12382)
We have a separate `int` and `euclidean_domain` version as `euclidean_domain` isn't pulled in by `int.basic`.

2022-03-01 22:20:43 269280a
feat(topology/bornology/basic): Define bornology (#12036)
This defines bornologies and provides the basic API. A bornology on a type is a filter consisting of cobounded sets which contains the cofinite sets; bounded sets are then complements of cobounded sets. This is equivalent to the usual formulation in terms of bounded sets, but provides access to mathlib's large filter library. We provide the relevant API for bounded sets.

2022-03-01 20:54:12 5c2fa35
chore(topology/algebra/valuation): add universe (#11962)

2022-03-01 19:12:01 818c81f
feat(ring_theory/integral_domain): finite integral domain is a field (#12376)
We don't yet have Wedderburn's little theorem (on my todo list), so adding some weaker versions to tide us over.

2022-03-01 19:11:59 130e07d
chore(algebra/group/prod): `prod.swap` commutes with arithmetic (#12367)
This also adds some missing `div` lemmas using `to_additive`.

2022-03-01 17:25:51 5e36e12
feat(category_theory/abelian/homology): Adds API for homology mimicking that of (co)kernels. (#12171)

2022-03-01 17:25:49 b45657f
feat(algebra/algebra/spectrum, analysis/normed_space/spectrum): prove the spectrum of any element in a complex Banach algebra is nonempty (#12115)
This establishes that the spectrum of any element in a (nontrivial) complex Banach algebra is nonempty. The nontrivial assumption is necessary, as otherwise the only element is invertible. In addition, we establish some properties of the resolvent function; in particular, it tends to zero at infinity.
- [x] depends on: #12095

2022-03-01 17:25:48 29c84f7
feat(combinatorics/set_family/lym): Lubell-Yamamoto-Meshalkin inequalities (#11248)
This proves the two local LYM inequalities, the LYM inequality and Sperner's theorem.

2022-03-01 15:29:36 3007f24
chore(*): use `*_*_*_comm` where possible (#12372)
These lemmas are quite helpful when proving `map_add` type statements; hopefully people will remember them more if they see them used in a few more places.

2022-03-01 15:29:35 3fb051d
feat(field_theory/krull_topology): added krull_topology_t2 (#11973)

2022-03-01 14:22:58 5a56e46
chore(data/polynomial/monic): remove useless lemma (#12364)
There is a `nontrivial` version of this lemma (`ne_zero_of_monic`) which actually has uses in the library, unlike this deleted lemma. We also tidy the proof of the lemma below.

2022-03-01 14:22:57 a4e936c
chore(category_theory/idempotents) replaced "idempotence" by "idem" (#12362)

2022-03-01 10:36:01 1f39ada
feat(linear_algebra): generalize `linear_equiv.finrank_eq` to rings (#12358)
Since `finrank` doesn't assume the module is actually a vector space, neither should the statement that linear equivalences preserve it.

2022-03-01 07:35:56 c223a81
feat(measure_theory/function/locally_integrable): define locally integrable (#12216)
* Define the locally integrable predicate
* Move all results about integrability on compact sets to a new file
* Rename some lemmas from `integrable_on_compact` -> `locally_integrable`, if appropriate.
* Weaken some type-class assumptions (also on `is_compact_interval`)
* Simplify proof of `continuous.integrable_of_has_compact_support`
* Rename variables in moved lemmas to sensible names

2022-03-01 02:55:33 cd98967
feat(order/category/CompleteLattice): The category of complete lattices (#12348)
Define `CompleteLattice`, the category of complete lattices with complete lattice homomorphisms.

2022-03-01 02:55:33 37885e8
feat(category_theory/idempotents): biproducts in idempotent completions (#12333)

2022-03-01 01:31:29 73dd4b5
refactor(category_theory/functor): a folder for concepts directly related to functors (#12346)

2022-02-28 16:08:55 456898c
feat(data/finsupp/basic): Version of `finsupp.prod_add_index` with weaker premises (#11353)
A simpler proof of `finsupp.prod_add_index : (f + g).prod h = f.prod h * g.prod h` with weaker premises.
Specifically, this only requires:
* `[add_zero_class M]` rather than `[add_comm_monoid M]`
* `h_zero : ∀ a ∈ f.support ∪ g.support, h a 0 = 1` rather than `h_zero : ∀a, h a 0 = 1`.  
* `h_add : ∀ (a ∈ f.support ∪ g.support) b₁ b₂, h a (b₁ + b₂) = h a b₁ * h a b₂` rather than `h_add : ∀ a b₁ b₂, h a (b₁ + b₂) = h a b₁ * h a b₂` (thanks to Anne Baanen for spotting this weakening).
The original version has been retained and re-named to `finsupp.prod_add_index'`, since in some places this is more convenient to use.  (There was already a lemma called `prod_add_index'` which appears not to have been used anywhere.  This has been renamed to `prod_hom_add_index`.)
Discussed in this Zulip thread:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Variant.20of.20finsupp.2Eprod_add_index.3F

2022-02-28 12:46:18 1447c40
refactor(group_theory/general_commutator): Rename `general_commutator` to `subgroup.commutator` (#12308)
This PR renames `general_commutator` to `subgroup.commutator`.
I'll change the file name in a followup PR, so that this PR is easier to review.
(This is one of the several orthogonal changes from https://github.com/leanprover-community/mathlib/pull/12134)

2022-02-28 12:46:17 92cbcc3
chore(algebra): move star_ring structure on free_algebra (#12297)
There's no need to have `algebra.star.basic` imported transitively into pretty much everything, just to put the `star_ring` structure on `free_algebra`, so I've moved this construction to its own file.
(I was changing definitions in `algebra.star.basic` to allow for more non-unital structures, it recompiling was very painful because of this transitive dependence.)

2022-02-28 12:46:16 9c71c0f
feat(algebra/monoid_algebra/basic): add monomial_hom (#12283)
Just adding one definition

2022-02-28 12:46:15 c7498d0
feat(algebra/{group/with_one,order/monoid}): equivs for `with_zero` and `with_one` (#12275)
This provides:
* `add_equiv.with_zero_congr : α ≃+ β → with_zero α ≃+ with_zero β`
* `mul_equiv.with_one_congr : α ≃* β → with_one α ≃* with_one β`
* `with_zero.to_mul_bot : with_zero (multiplicative α) ≃* multiplicative (with_bot α)`
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/with_zero.20.28multiplicative.20A.29.20.E2.89.83*.20multiplicative.20.28with_bot.20A.29/near/272980650)

2022-02-28 12:46:14 474aecb
doc(algebra,data/fun_like): small morphism documentation improvements (#11642)
 * The `fun_like` docs talked about a `to_fun` class, this doesn't exist (anymore).
 * Warn that `{one,mul,monoid,monoid_with_zero}_hom.{congr_fun,congr_arg,coe_inj,ext_iff}` has been superseded by `fun_like`.
Thanks to @YaelDillies for pointing out these issues.

2022-02-28 12:16:38 33c0a1c
feat(ring_theory/dedekind_domain/ideal): add height_one_spectrum (#12244)

2022-02-28 10:33:37 200c254
feat(algebra/algebra,data/equiv/ring): `{ring,alg}_equiv.Pi_congr_right` (#12289)
We extend `{add,mul}_equiv.Pi_congr_right` to rings and algebras.
Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60ring_equiv.2EPi_congr_right.60

2022-02-28 10:33:35 e700d56
feat(ring_theory/polynomial/eisenstein): add a technical lemma (#11839)
A technical lemma about Eiseinstein minimal polynomials.
From flt-regular

2022-02-28 10:33:34 770a7ce
feat(measure_theory/function/convergence_in_measure): Define convergence in measure (#11774)
This PR defines convergence in measure and proves some properties about them. 
In particular, we prove that 
- convergence a.e. in a finite measure space implies convergence in measure
- convergence in measure implies there exists a subsequence that converges a.e.
- convergence in Lp implies convergence in measure

2022-02-28 10:33:33 b25bad7
feat(archive/100-theorems-list): Partition theorem (#4259)
A proof of Euler's partition theorem, from the Freek list.
The proof is sorry-free but currently unpleasant, and some parts don't belong in `archive/`, so WIP for now.

2022-02-28 09:09:20 dc72624
chore(measure_theory/function/strongly_measurable): remove useless no_zero_divisors assumption (#12353)

2022-02-28 08:31:53 58c20c1
feat(measure_theory/group): add measures invariant under inversion/negation (#11954)
* Define measures invariant under `inv` or `neg`
* Prove lemmas about measures invariant under `inv` similar to the lemmas about measures invariant under `mul`
* Also provide more `pi` instances in `arithmetic`.
* Rename some `integral_zero...` lemmas to `integral_eq_zero...`
* Reformulate `pi.is_mul_left_invariant_volume` using nondependent functions, so that type class inference can find it for `ι → ℝ`)
* Add some more integration lemmas, also for multiplication

2022-02-28 02:34:22 f3a04ed
feat(group_theory/subgroup/basic): Centralizer subgroup (#11946)
This PR defines the centralizer subgroup, and provides a few basic lemmas.

2022-02-27 23:09:46 2f86b49
doc(data/set_like/basic): tidy up docstring (#12337)
Hopefully this makes the docstring slightly clearer.

2022-02-27 23:09:45 dfacfd3
chore(linear_algebra/basic): make `linear_map.id_coe` elegible for `dsimp` (#12334)
`dsimp` only considers lemmas which _are_ proved by `rfl`, not ones that just _could_ be.

2022-02-27 22:39:10 f322fa0
refactor(group_theory/solvable): Delete duplicate lemma (#12307)
`map_commutator_eq_commutator_map` is a duplicate of `map_general_commutator`.
(This is one of the several orthogonal changes from #12134)

2022-02-27 22:00:44 7f52f94
feat(analysis/complex): maximum modulus principle (#12050)

2022-02-27 21:28:31 b5faa34
feat(analysis/complex/liouville): prove Liouville's theorem (#12095)

2022-02-27 20:07:58 a5ffb9b
feat(analysis/special_functions): little o behaviour of exp/log at infinity (#11840)
from the unit-fractions project

2022-02-27 16:32:35 c4cf451
fix(catgory_theory/limits): fix a typo (#12341)

2022-02-27 16:04:10 8ef4331
feat(ring_theory/witt_vector): Witt vectors are a DVR (#12213)
This PR adds two connected files. `mul_coeff.lean` adds an auxiliary result that's used in a few places in #12041 . One of these places is in `discrete_valuation_ring.lean`, which shows that Witt vectors over a perfect field form a DVR.

2022-02-27 15:35:55 1dfb38d
doc(imo*,algebra/continued_fractions/computation): change \minus to - (#12338)
Change around 14 instances of a non-standard minus to `-`.

2022-02-27 14:12:55 00a3d02
feat(geometry/euclidean/oriented_angle): oriented angles with respect to an orientation (#12236)
Add definitions and lemmas for oriented angles defined to take an
orientation, instead of an orthonormal basis, as an argument.  These
are the versions intended to be used by most users when working with
oriented angles between vectors, instead of users needing to deal with
a choice of basis.
Apart from the last five lemmas that relate angles and rotations for
different orientations or relate them explicitly to the definitions
with respect to a basis, everything is deduced directly from the
corresponding lemma that takes an orthonormal basis as an argument.

2022-02-27 10:57:38 77e76ee
feat(data/list/basic): add last'_append and head'_append_of_ne_nil (#12221)
we already have `head'_append` and `last'_append_of_ne_nil`, and users
might expect a symmetric API.

2022-02-27 09:13:42 b1c2d70
feat(logic/function/basic): not_surjective_Type (#12311)

2022-02-27 08:45:41 7ae0b36
chore(category_theory/idempotents): minor suggestions (#12303)
@joelriou, here are some minor suggestions on your earlier Karoubi envelope work (I wasn't around when the PR went through.)
The two separate suggestions are some typos, and dropping some unnecessary proofs.

2022-02-27 06:00:11 07374a2
feat(set_theory/cardinal): add three_le (#12225)

2022-02-27 04:07:15 86d686c
feat(category_theory/category/Groupoid): Add coercion to sort (#12324)
Use coercion to type instead of `.α`

2022-02-27 04:07:14 907e5ba
fix(set_theory/ordinal_arithmetic): Fix universes (#12320)
`lsub_le_of_range_subset` and `lsub_eq_of_range_eq` should have had 3 universes, but they had only two.

2022-02-27 04:07:13 906a88b
feat(data/quot): primed quotient funcs on `mk` (#12204)

2022-02-27 02:45:05 4afb8d2
feat(set_theory/ordinal_arithmetic): Added missing theorems for `lsub` and `blsub` (#12318)
These are the analogs of `lt_sup` and `lt_bsup`, respectively.

2022-02-27 02:45:04 bb9539c
chore(set_theory/ordinal): Minor golf in `card` (#12298)
This was suggested by @b-mehta.

2022-02-27 02:45:02 b4f87d9
feat(analysis/normed_space): add `normed_space 𝕜 (uniform_space.completion E)` (#12148)

2022-02-27 01:14:05 abf5dfc
refactor(category_theory/eq_to_hom): conjugation by eq_to_hom same as heq (#12025)
Xu Junyan provided this lemma for showing that `heq` gives the same as conjugation by `eq_to_hom` for equality of functor maps. I refactored `hext` using this result.
Then I added a bunch of lemmas for how `heq` interacts with composition of functors and `functor.map` applied to composition of morphisms

2022-02-27 01:14:04 1fe9708
feat(group_theory/nilpotent): is_nilpotent_of_product_of_sylow_group (#11834)

2022-02-26 23:31:58 add068d
chore(linear_algebra/orientation): split into 2 files (#12302)
Move parts that don't need multilinear maps to a new file.

2022-02-26 23:31:57 188b371
feat(algebra/category/GroupWithZero): The category of groups with zero (#12278)
Define `GroupWithZero`, the category of groups with zero with monoid with zero homs.

2022-02-26 23:31:55 163d1a6
feat(category_theory/idempotents): idempotent completeness and functor categories (#12270)

2022-02-26 23:31:53 817b4c4
feat(order/category/BoundedLattice): The category of bounded lattices (#12257)
Define `BoundedLattice`, the category of bounded lattices with bounded lattice homs.

2022-02-26 22:03:39 3d8c22f
refactor(topology/compact_open): Remove `locally_compact_space` hypothesis in `continuous_map.t2_space` (#12306)
This PR removes the `locally_compact_space` hypothesis in `continuous_map.t2_space`, at the cost of a longer proof.

2022-02-26 20:55:45 4cf0e60
feat(category_theory/limits): generalize has_biproduct.of_has_product  (#12116)

2022-02-26 20:55:44 09ba530
feat(category_theory/limits): biproducts are unique up to iso (#12114)

2022-02-26 20:23:50 fe6ea3e
feat(analysis/convex/integral): strict Jensen's inequality (#11552)

2022-02-26 19:39:04 c8150cc
feat(analysis/normed_space/add_torsor): `dist` and `line_map` (#12265)
Add a few lemmas about the distance between `line_map p₁ p₂ c₁` and
`line_map p₁ p₂ c₂`.

2022-02-26 16:53:59 3b49fe2
feat(algebra/star/pointwise, algebra/star/basic): add pointwise star, and a few convenience lemmas (#12290)
This adds a star operation to sets in the pointwise locale and establishes the basic properties. The names and proofs were taken from the corresponding ones for `inv`. A few extras were added.

2022-02-26 16:18:11 87fc3ea
feat(analysis/normed_space/star/spectrum): prove the spectrum of a unitary element in a C*-algebra is a subset of the unit sphere (#12238)
The spectrum of a unitary element in a C*-algebra is a subset of the unit sphere in the scalar field. This will be used to show that the spectrum of selfadjoint elements is real-valued.

2022-02-26 13:23:26 0f1bc2c
feat(topology,analysis): any function is continuous/differentiable on a subsingleton (#12293)
Also add supporting lemmas about `is_o`/`is_O` and the `pure` filter
and drop an unneeded assumption in `asymptotics.is_o_const_const_iff`.

2022-02-26 11:40:32 bfc0584
refactor(topology,analysis): use `maps_to` in lemmas like `continuous_on.comp` (#12294)

2022-02-26 11:03:49 d2d6f17
feat(analysis/inner_product_space/spectrum): `has_eigenvalue_eigenvalues` (#12304)
similar to the existing `has_eigenvector_eigenvector_basis`

2022-02-26 03:29:04 d6a8e5d
feat(topology/compact_open): `simp`-lemmas for `compact_open.gen` (#12267)
This PR adds some basic `simp`-lemmas for `compact_open.gen`.

2022-02-26 03:29:03 7201c3b
feat(category_theory/limits): more opposite-related transformations of cones (#12165)

2022-02-26 02:44:14 43fb516
doc(analysis/normed_space): fixed normed_star_monoid doc-string (#12296)

2022-02-25 22:23:16 05d8188
feat(group_theory/torsion): define torsion groups (#11850)
I grepped for torsion group and didn't find anything -- hopefully adding this makes sense here.

2022-02-25 20:13:56 3cc9ac4
feat(analysis/normed_space/finite_dimension): add a lemma about `inf_dist` (#12282)
Add a version of `exists_mem_frontier_inf_dist_compl_eq_dist` for a
compact set in a real normed space. This version does not assume that
the ambient space is finite dimensional.

2022-02-25 18:50:04 c127fc3
chore(measure_theory/decomposition/lebesgue): tidy a proof (#12274)
There's no need to go through `set_integral_re_add_im` when all we need is `integral_re`.

2022-02-25 16:56:48 6653544
feat(topology/algebra/order/extr): extr on closure (#12281)
Prove `is_max_on.closure` etc

2022-02-25 10:18:16 8c485a4
feat(order/filter/extr): add `is_*_on.comp_maps_to` (#12280)

2022-02-25 07:39:47 c1443d6
feat(ring_theory/localization): random lemmata for edge cases (#12146)

2022-02-25 07:07:50 dae1dfe
feat(topology/spectral/hom): Spectral maps (#12228)
Define spectral maps in three ways:
* `is_spectral_map`, the unbundled predicate
* `spectral_map`, the bundled type
* `spectral_map_class`, the hom class
The design for `is_spectral_map` matches `continuous`. The design for `spectral_map` and `spectral_map_class` follows the hom refactor.

2022-02-25 05:25:18 f2fdef6
feat(order/partition/equipartition): Equipartitions (#12023)
Define `finpartition.is_equipartition`, a predicate for saying that the parts of a `finpartition` of a `finset` are all the same size up to a difference of `1`.

2022-02-25 03:05:10 605ea9f
feat(algebra/symmetrized): Define the symmetrization of a ring (#11399)
A commutative multiplication on a real or complex space can be constructed from any multiplication by
"symmetrisation" i.e
```
a∘b = 1/2(ab+ba).
```
The approach taken here is inspired by `algebra.opposites`.
Previously submitted as part of #11073.
Will be used in https://github.com/leanprover-community/mathlib/pull/11401

2022-02-24 20:01:42 f7518db
chore(topology/continuous_function/bounded): add an is_central_scalar instance (#12272)
This is only possible very recently now that `𝕜ᵐᵒᵖ` has a metric space instance.

2022-02-24 20:01:41 feb5473
chore(*): update to 3.40.0c (#12212)

2022-02-24 18:24:37 d3d3701
feat(analysis/mean_inequalities): AM and GM are equal on a constant tuple (#12179)
The converse is also true, but I have not gotten around to proving it.

2022-02-24 16:20:33 d620395
feat(topology/algebra/group): homeomorphisms for div (#12251)

2022-02-24 16:20:32 ed9f73c
feat(order/conditionally_complete_lattice.lean): two new lemmas (#12250)

2022-02-24 14:39:01 0840629
test(instance_diamonds): verify that restrict_scalars produces no diamonds on the complex numbers (#12273)
There is already a comment on `complex.module` that indicates an intentional solution to this diamond.

2022-02-24 14:38:59 a0d2c43
feat(algebra/punit_instances): mul_semiring_action (#12271)
The timeouts mentioned in the file appear to no longer occur.

2022-02-24 14:38:57 9dca6f4
feat(topology/metric_space/lipschitz): add `set.maps_to` lemmas (#12266)

2022-02-24 14:38:55 d011bf2
chore(measure_theory/function/uniform_integrable): replace `ℕ` by a type verifying enough assumptions (#12242)
This PR does not generalize the results of the `uniform_integrable` file much, but using a generic type instead of `ℕ` makes clear where we need assumptions like `encodable`.

2022-02-24 14:38:54 34cfcd0
feat(probability/stopping): generalize `is_stopping_time.measurable_set_lt` and variants beyond `ℕ` (#12240)
The lemma `is_stopping_time.measurable_set_lt` and the similar results for gt, ge and eq were written for stopping times with value in nat. We generalize those results to linear orders with the order topology.

2022-02-24 12:56:59 79887c9
feat(measure_theory/group/prod): generalize topological groups to measurable groups (#11933)
* This fixes the gap in `[Halmos]` that I mentioned in `measure_theory.group.prod`
* Thanks to @sgouezel for giving me the proof to fill that gap.
* A text proof to fill the gap is [here](https://math.stackexchange.com/a/4387664/463377)

2022-02-24 12:56:58 8429ec9
feat(topology/vector_bundle): `topological_vector_prebundle` (#8154)
In this PR we implement a new standard construction for topological vector bundles: namely a structure that permits to define a vector bundle when trivializations are given as local equivalences but there is not yet a topology on the total space. The total space is hence given a topology in such a way that there is a vector bundle structure for which the local equivalences
are also local homeomorphism and hence local trivializations.

2022-02-24 11:57:32 76b1e01
feat(data/equiv/option): option_congr (#12263)
This is a universe-polymorphic version of the existing `equiv_functor.map_equiv option`.

2022-02-24 11:57:31 b8b1b57
chore(geometry/euclidean): split repetitive proof (#12209)
This PR is part of the subobject refactor #11545, fixing a timeout caused by some expensive defeq checks.
I introduce a new definition `simplex.orthogonal_projection_span s := orthogonal_projection (affine_span ℝ (set.range s.points))`, and extract a couple of its properties from (repetitive) parts of proofs in `circumcenter.lean`, especially `eq_or_eq_reflection_of_dist_eq`. This makes the latter proof noticeably faster, especially after commit #11750.

2022-02-24 10:42:14 3d97cfb
feat(ring_theory/ideal,dedekind_domain): lemmas on `I ≤ I^e` and `I < I^e` (#12185)

2022-02-24 08:26:23 9eb78a3
feat(measure_theory/function/ae_eq_fun): generalize scalar actions (#12248)
This provides a more general `has_scalar` instance, along with `mul_action`, `distrib_mul_action`, `module`, `is_scalar_tower`, `smul_comm_class`, and `is_central_scalar` instances.

2022-02-24 04:27:02 f6a7ad9
feat(measure_theory/integral/average): define `measure_theory.average` (#12128)
And use it to formulate Jensen's inequality. Also add Jensen's inequality for concave functions.

2022-02-24 03:44:56 f3ee462
chore(category_theory/adjunction/opposites): Forgotten `category_theory` namespace (#12256)
The forgotten `category_theory` namespace means that dot notation doesn't work on `category_theory.adjunction`.

2022-02-24 02:51:27 ed55593
feat(topology/metric_space/basic): add a few lemmas (#12259)
Add `ne_of_mem_sphere`, `subsingleton_closed_ball`, and `metric.subsingleton_sphere`.

2022-02-24 01:18:43 158550d
feat(algebra/module/basic): add `smul_right_inj` (#12252)
Also golf the proof of `smul_right_injective` by reusing
`add_monoid_hom.injective_iff`.

2022-02-24 01:18:42 2939c77
feat(topology/metric_space): multiplicative opposites inherit the same `(pseudo_?)(e?)metric` and `uniform_space` (#12120)
This puts the "obvious" metric on the opposite type such that `dist (op x) (op y) = dist x y`.
This also merges `subtype.pseudo_dist_eq` and `subtype.dist_eq` as the latter was a special case of the former.

2022-02-24 00:25:00 890338d
feat(analysis/normed_space/basic): use weaker assumptions (#12260)
Assume `r ≠ 0` instead of `0 < r` in `interior_closed_ball` and `frontier_closed_ball`.

2022-02-24 00:24:57 620af85
refactor(topology/instances): put `ℕ`, `ℤ`, and `ℚ` in separate files (#12207)
The goal here is to make `metric_space ℕ` and `metric_space ℤ` available earlier, so that I can state `has_bounded_smul ℕ A` somewhere reasonable.
No lemmas have been added, deleted, or changed here - they've just been moved out of `topology/instances/real` and into 
`topology/instances/{nat,int,rat,real}`.
The resulting import structure is:
* `rat_lemmas` → `rat`
* `rat` → {`real`, `int`, `nat`}
* `real` → {`int`}
* `nat` → {`int`}

2022-02-23 22:56:45 eae6ae3
feat(algebra/associated): add decidable instances (#12230)
Makes equality and divisibility decidable in `associates`, given that divisibility is decidable in the general case.

2022-02-23 21:42:45 2c74921
feat(data/pfun): A new induction on pfun.fix (#12109)
A new lemma that lets you prove predicates given `b ∈ f.fix a` if `f` preserves the predicate, and it holds for values which `f` maps to `b`.

2022-02-23 20:58:29 9b333b2
feat(topology/algebra/continuous_monoid_hom): `to_continuous_map` is a `closed_embedding` (#12217)
This PR proves that `to_continuous_map : continuous_monoid_hom A B → C(A, B)` is a `closed_embedding`. This will be useful for showing that the Pontryagin dual is locally compact.

2022-02-23 17:43:01 f04ad9a
feat(analysis/normed_space/star/spectrum): prove the spectral radius of a selfadjoint element in a C*-algebra is its norm. (#12211)
This establishes that the spectral radius of a selfadjoint element in a C*-algebra is its (nn)norm using the Gelfand formula for the spectral radius. The same theorem for normal elements can be proven using this once normal elements are defined in mathlib.

2022-02-23 16:03:57 b72cca4
chore(geometry/manifold/algebra/smooth_functions): golf module instance (#12247)

2022-02-23 16:03:56 3e2df83
docs(order/order_iso_nat): Added note on `exists_increasing_or_nonincreasing_subseq` (#12239)

2022-02-23 16:03:55 162d060
feat(measure_theory/function/strongly_measurable): more basic properties of `strongly_measurable` (#12164)

2022-02-23 16:03:54 3fe20d4
feat(ring_theory/localization): add mk' lemmas (#12081)

2022-02-23 14:40:03 0d5bed0
feat(ring_theory/graded_algebra): definitions and basic operations of homogeneous ideal (#10784)
This defines homogeneous ideals (`homogeneous_ideal`) of a graded algebra.

2022-02-23 13:18:22 e167efa
chore(topology/instances/rat): rename to rat_lemmas (#12246)
This is to make room for the changes in #12207, which claim `topology.instances.rat` for more basic results. This has to be in a separate commit to keep the history reasonable.

2022-02-23 13:18:20 c526789
feat(set_theory/ordinal_arithmetic): `is_normal.eq_iff_zero_and_succ` (#12222)
Two normal functions are equal iff they're equal at `0` and successor ordinals. This is used for a few lemmas in #12202.

2022-02-23 13:18:19 7de8137
feat(topology/order/hom): Continuous order homomorphisms (#12012)
Define continuous monotone functions, aka continuous order homomorphisms, aka Priestley homomorphisms, with notation `α →Co β`.

2022-02-23 12:32:53 b0fbd91
feat(measure_theory/measure): generalize scalar actions (#12187)
As a result of this change, many smul lemmas now also apply to `nat` and `nnreal`, which allows some lemmas to be removed.

2022-02-23 12:32:52 d01b55f
split(analysis/functional/gauge): Split off `analysis.seminorm` (#12054)
Move the Minkowski functional to a new file `analysis.convex.gauge`.

2022-02-23 10:50:57 6179707
feat(ring_theory/unique_factorization_domain): add count_self (#12074)

2022-02-23 10:50:56 6f1d90d
feat(algebra/order/monoid_lemmas_gt_zero): introduce the type of positive elements and prove some lemmas (#11833)
This PR continues the `order` refactor.  Here I start working with the type of positive elements of a type with zero and lt.  Combining `covariant_` and `contravariant_classes` where the "acting" type is the type of positive elements, we can formulate the condition that "multiplication by positive elements is monotone" and variants.
I also prove some initial lemmas, just to give a flavour of the API.
More such lemmas will come in subsequent PRs (see for instance #11782 for a few more lemmas).  After that, I will start simplifying existing lemmas, by weakening their assumptions.

2022-02-23 09:39:52 3e77124
refactor(topology/{separation,subset_properties}): use `set.subsingleton` (#12232)
Use `set.subsingleton s` instead of `_root_.subsingleton s` in `is_preirreducible_iff_subsingleton` and `is_preirreducible_of_subsingleton`, rename the latter to `set.subsingleton.is_preirreducible`.

2022-02-23 09:39:50 dc9b8be
feat(analysis/normed_space/linear_isometry): add lemmas to `linear_isometry_equiv` (#12218)
Added two API lemmas to `linear_isometry_equiv` that I need elsewhere.

2022-02-23 09:39:49 f44ed74
feat(ring_theory/ideal/over): `S/p` is noetherian over `R/p` if `S` is over `R` (#12183)

2022-02-23 08:16:08 515eefa
fix(algebra/star/basic): more type classes that should be props (#12235)

2022-02-23 08:16:07 98bcabb
feat(group_theory/perm): add lemmas for cycles of permutations (#11955)
`nodup_powers_of_cycle_of` : shows that the the iterates of an element in the support give rise to a nodup list
`cycle_is_cycle_of` : asserts that a given cycle c in `f. cycle_factors_finset` is `f.cycle_of a` if c a \neq a
`equiv.perm.sign_of_cycle_type` : new formula for the sign of a permutations in terms of its cycle_type — It is simpler to use (just uses number of cycles and size of support) than the earlier lemma which is renamed as equiv.perm.sign_of_cycle_type'  (it could be deleted). I made one modification to make the file compile, but I need to check compatibility with the other ones.

2022-02-23 07:46:35 0eed60e
feat(number_theory/cyclotomic/discriminant): discriminant of a p-th cyclotomic field (#11804)
We compute the discriminant of a p-th cyclotomic field.
From flt-regular.
- [x] depends on: #11786

2022-02-23 05:24:19 257bddf
feat(algebra/algebra/spectrum): add spectral mapping for inverses (#12219)
Given a unit `a` in an algebra `A` over a field `𝕜`, the equality `(spectrum 𝕜 a)⁻¹ = spectrum 𝕜 a⁻¹` holds.

2022-02-23 04:31:26 e77675d
fix(analysis/normed_space/star/basic): make prop type classes props (#12233)
The type classes `normed_star_monoid` and `cstar_ring` are now properly declared as prop.

2022-02-23 04:01:36 264dd7f
feat(model_theory/basic): Language operations (#12129)
Defines language homomorphisms with `first_order.language.Lhom`
Defines the sum of two languages with `first_order.language.sum`
Defines `first_order.language.with_constants`, a language with added constants, abbreviated `L[[A]]`.
Defines a `L[[A]].Structure` on `M` when `A : set M`.
(Some of this code comes from the Flypitch project)

2022-02-23 00:45:57 7cc4eb9
doc(number_theory/padics/*): typo in references (#12229)
Fix typos in a reference.

2022-02-23 00:45:56 4238868
chore(analysis): rename times_cont_diff (#12227)
This replaces `times_cont_diff` by `cont_diff` everywhere, and the same for `times_cont_mdiff`. There is no change at all in content.
See https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/times_cont_diff.20name

2022-02-23 00:45:54 541a1a0
refactor(combinatorics/simple_graph/{basic,degree_sum}): move darts from degree_sum to basic (#12195)
This also changes `simple_graph.dart` to extend `prod`, so that darts are even closer to being an ordered pair.
Since this touches the module docstrings, they are updated to use fully qualified names.

2022-02-23 00:45:53 f6ec999
feat(ring_theory/localization): add a fintype instance (#12150)

2022-02-22 22:49:03 e89222a
feat(algebra/module,linear_algebra): some `restrict_scalars` lemmas (#12181)
 * add `linear_map.coe_restrict_scalars` (demoting `linear_map.restrict_scalars_apply` from `simp` lemma)
 * add `submodule.restrict_scalars_eq_top_iff`

2022-02-22 22:49:02 2ab3e2f
feat(algebra/group/{hom,prod}): has_mul and mul_hom.prod (#12110)
Ported over from `monoid_hom`.

2022-02-22 22:49:01 18d1bdf
feat(topology/algebra/group): add subgroup lemmas (#12026)

2022-02-22 22:49:00 b60b790
feat(topology/algebra/group): add continuity lemmas (#11975)

2022-02-22 21:10:39 64c8d21
feat(set_theory/ordinal): `Inf_empty` (#12226)
The docs mention that `Inf Ø` is defined as `0`. We prove that this is indeed the case.

2022-02-22 21:10:38 d990681
docs(set_theory/ordinal): Remove mention of `omin` from docs (#12224)
#11867 replaced `omin` by `Inf`. We remove all mentions of it from the docs.

2022-02-22 21:10:37 f7b6f42
feat(set_theory/ordinal_arithmetic): `out_nonempty_iff_ne_zero` (#12223)

2022-02-22 21:10:36 e50ebde
chore(analysis/specific_limits): simplify proof of `cauchy_series_of_le_geometric` (#12215)
This lemma is identical to the one above except over `range (n + 1)`
instead of `range n`. Perhaps it could be removed entirely? I'm not sure what the policy is on breaking changes.

2022-02-22 21:10:34 48ddfd5
chore(linear_algebra/basic): golf `linear_equiv.smul_of_unit` (#12190)
This already exists more generally as `distrib_mul_action.to_linear_equiv`.
The name is probably more discoverable and it needs fewer arguments, so I've left it around for now.

2022-02-22 20:21:17 6bb8f22
refactor(model_theory/terms_and_formulas): Improvements to basics of first-order formulas (#12091)
Improves the simp set of lemmas related to `realize_bounded_formula` and `realize_formula`, so that they simplify higher-level definitions directly, and keep bounded formulas and formulas separate.
Generalizes relabelling of bounded formulas.
Defines `close_with_exists` and `close_with_forall` to quantify bounded formulas into closed formulas.
Defines `bd_iff` and `iff`.

2022-02-22 18:15:35 d054fca
feat(/analysis/inner_product_space/pi_L2): `inner_matrix_row_row` (#12177)
The inner product between rows/columns of matrices.

2022-02-22 18:15:34 d0c37a1
feat(analysis/inner_product_space/adjoint): is_self_adjoint_iff_inner… (#12113)
…_map_self_real
A linear operator on a complex inner product space is self-adjoint
precisely when ⟪T v, v⟫ is real for all v.  I am interested in learning
style improvements!

2022-02-22 18:15:32 8f16001
chore(*): rename `erase_dup` to `dedup` (#12057)

2022-02-22 18:15:31 35ef770
refactor(topology/compacts): Turn into structures, use `set_like`, cleanup (#12035)
* Change `closeds`, `compacts`, `nonempty_compacts`, `positive_compacts` from `subtype` to `structure`
* Use `set_like`
* Add missing instances
  * the `lattice` and `bounded_order` instances for `closeds`
  * the `bounded_order` instance for `compacts`
  * the `semilattice_sup` and `order_top` instances for `nonempty_compacts` 
  * the `inhabited`, `semilattice_sup` and `order_top` instances for `positive_compacts`
* kill `positive_compacts_univ` in favor of `⊤` using the new `order_top` instance
* rename `nonempty_positive_compacts` to `positive_compacts.nonempty`
* sectioning the file

2022-02-22 15:16:21 71da192
chore(ring_theory/graded_algebra/basic): remove commutativity requirement (#12208)
This wasn't used

2022-02-22 15:16:20 f0401b9
chore(ring_theory): split `localization.lean` and `dedekind_domain.lean` (#12206)
These files were rather long and had hundreds-deep dependency graphs. I split them into smaller files with less imports, so that they are easier to build and modify.
Proof nothing was lost:
```bash
$ cat src/ring_theory/localization/*.lean | sort | comm -23 <(sort src/ring_theory/localization.lean) - | grep -E 'lemma|theorem|def|instance|class'
$ cat src/ring_theory/dedekind_domain/*.lean | sort | comm -23 <(sort src/ring_theory/dedekind_domain.lean) - | grep -E 'lemma|theorem|def|instance|class'
giving three equivalent definitions (TODO: and shows that they are equivalent).
```
Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Splitting.20.60localization.2Elean.60.20and.20.60dedekind_domain.2Elean

2022-02-22 15:16:19 deb5046
feat(mv_polynomial/basic): monomial_eq_monomial_iff (#12198)

2022-02-22 15:16:18 8b09b0e
feat(measure_theory/group/arithmetic): add `has_measurable_smul.op` and `has_measurable_smul₂.op` (#12196)
This matches the naming of `has_continuous_smul.op`.

2022-02-22 15:16:17 79c5de9
feat(ring_theory/ideal/operations): remove unneeded assumptions from `smul_induction_on` (#12193)

2022-02-22 15:16:15 f6d397f
feat(order/hom/basic): `order_iso_class` (#12157)
Define `order_iso_class`, following the hom refactor. Also add a few missing lemmas.

2022-02-22 15:16:14 4c6b0de
feat(topology/bases): disjoint unions of second-countable spaces are second-countable (#12061)

2022-02-22 13:18:00 8413f07
feat(topology/support): define topological support and compactly supported functions (#11923)
* Also add some variants of the extreme value theorem.

2022-02-22 10:50:40 80591d6
feat(order/hom/lattice): Finitary join-/meet-preserving maps (#12149)
Define `sup_bot_hom`, `inf_top_hom` and their associated class.

2022-02-22 10:50:39 68efb10
refactor(topology/*): Hom classes for continuous maps/homs (#11909)
Add
* `continuous_map_class`
* `bounded_continuous_map_class`
* `continuous_monoid_hom_class`
* `continuous_add_monoid_hom_class`
* `continuous_map.homotopy_class`
to follow the `fun_like` design. Deprecate lemmas accordingly.
Also rename a few fields to match the convention in the rest of the library.

2022-02-22 10:50:38 247943a
feat(analysis/seminorm): add inf (#11791)
Define the infimum of seminorms.

2022-02-22 10:10:32 9a7ed8c
chore(algebra/lie/engel): speed up proof of Engel's theorem slightly (#12205)
Local measurements using `set_option profiler true` are noisy but indicate
that this speeds up elaboration of `lie_algebra.is_engelian_of_is_noetherian`
by about 20% from about 10s to about 8s.

2022-02-22 03:09:07 cb45da2
feat(category_theory/limits): is_bilimit (#12108)

2022-02-22 00:37:45 e16e093
feat(analysis/specific_limits): dirichlet and alternating series tests  (#11908)
Adds [Dirichlet's test](https://en.wikipedia.org/wiki/Dirichlet%27s_test) along with the [alternating series test](https://en.wikipedia.org/wiki/Alternating_series_test) as a special case of the former. For the curious, [Nick Bingham's course notes](https://www.ma.imperial.ac.uk/~bin06/M2PM3-Complex-Analysis/m2pm3abeldir.pdf) give some more context on Dirichlet's test. It's somewhat obscure.

2022-02-21 23:46:54 d77e91f
perf(geometry/euclidean): speed up proof on the edge of timing out (#12191)

2022-02-21 23:46:53 22464cf
feat(analysis/normed_space/basic): `norm_matrix_lt_iff` (#12151)
A strict variant of `norm_matrix_le_iff`, using `pi_norm_lt_iff`

2022-02-21 22:53:11 eb5c5ed
feat(measure_theory/integral/set_integral): Bochner integral with respect to a measure with density (#12123)
This PR shows that `∫ a, g a ∂(μ.with_density (λ x, f x)) = ∫ a, f a • g a ∂μ`. (This fact is already available for the Lebesgue integral, not for the Bochner integral.)

2022-02-21 22:24:46 8aa26b2
feat(tactic/linear_combination): improve error messages and degenerate case (#12062)
This threads the expected type of the combination from the target throughout the tactic call.
If no hypotheses are given to combine, the behavior is effectively to just call the normalization tactic.
closes #11990

2022-02-21 21:06:38 2971f3d
feat(algebra/star/self_adjoint): remove commutativity hypothesis from `has_pow (self_adjoint R)` (#12188)
This was put in the wrong section. Powers of selfadjoint elements are still selfadjoint.

2022-02-21 21:06:37 a607820
feat(category_theory/equivalence): if two functors F and G are isomorphic, F is an equivalence iff G is (#12162)

2022-02-21 21:06:35 9a17b55
feat(analysis/normed_space/basic): `norm_entry_le_entrywise_sup_norm` (#12159)
The entries of a matrix are at most the entrywise sup norm.

2022-02-21 19:14:30 1cfbcc6
feat(algebra/ring/ulift): add a `field` instance (#12141)

2022-02-21 16:41:40 e3d3681
feat(analysis/inner_product_space/spectrum): `pos_nonneg_eigenvalues` (#12161)
If T is a positive self-adjoint operator, then its eigenvalues are
nonnegative.  Maybe there should be a definition of "positive operator",
and maybe this should be generalized.  Guidance appreciated!

2022-02-21 15:30:08 02dc6f2
feat(probability/stopping): filtrations are a complete lattice (#12169)

2022-02-21 15:30:07 9ed7179
refactor(*): move normed field lemmas into root namespace (#12163)
This takes the normed field lemmas given in `analysis.normed_space.basic` and moves them from the `normed_field` namespace into the root namespace.
This PR moves these lemmas and definitions: `norm_mul`, `nnnorm_mul`, `norm_hom`, `nnnorm_hom`, `norm_pow`, `nnnorm_pow`, `norm_prod`, `nnnorm_prod`, `norm_div`, `nnnorm_div`, `norm_inv`, `nnnorm_inv`, `norm_zpow`, `nnnorm_zpow`.

2022-02-21 15:30:06 95d22b5
feat(geometry/euclidean/oriented_angle): oriented angles and rotations (#12106)
Define oriented angles and rotations in a real inner product space,
with respect to a choice of orthonormal basis indexed by `fin 2`, and
prove various lemmas about them, including that the definition depends
only on the orientation associated with the basis, and geometrical
results such as pons asinorum, "angle at center of a circle equals
twice angle at circumference" and "angles in same segment are equal" /
"opposite angles of a cyclic quadrilateral add to π" (these last two
being the same result for oriented angles mod π).

2022-02-21 15:30:04 6db1577
feat(category_theory/preadditive): separators in preadditive categories (#11884)

2022-02-21 13:33:45 3ad7395
chore(topology/algebra/infinite_sum): reference Cauchy criterion in docs (#12172)

2022-02-21 13:33:44 634dfc8
feat(order/*): Missing order lifting instances (#12154)
Add a few missing pullbacks of order instances.

2022-02-21 13:33:43 2f33463
feat(group_theory/free_product): is_free_group_free_product_of_is_free_group (#12125)

2022-02-21 11:38:07 7c6678a
doc(topology/dense_embedding): fix markdown (#12180)
Right now it just renders as "γ -f→ α g↓ ↓e δ -h→ β"

2022-02-21 11:38:06 f66a5dd
chore(data/set/basic): add a few lemmas and a `@[simp]` attribute (#12176)
* rename `set.exists_eq_singleton_iff_nonempty_unique_mem` to `set.exists_eq_singleton_iff_nonempty_subsingleton`, use `set.subsingleton` in the statement;
* add `@[simp]` to `set.subset_compl_singleton_iff`;
* add `set.diff_diff_right_self`.

2022-02-21 11:38:05 0eb5e2d
feat(topology/algebra): if a subobject is commutative, then so is its topological closure (#12170)
We prove that if a submonoid (or subgroup, subsemiring, subring, subalgebra, and the additive versions where applicable) is commutative, then so is its topological closure.

2022-02-21 11:38:04 56dbb60
feat(category_theory/opposites): nat_trans.remove_unop (#12147)

2022-02-21 11:38:02 b3b5e35
chore(data/nat/prime): slightly golf proof of mem_factors (#12143)

2022-02-21 11:38:01 afcc7e7
feat(data/nat/prime): move nat.prime_iff_prime_int; add int.prime_two/three (#12133)
I found it useful to have these results with somewhat lighter imports.

2022-02-21 11:38:00 37019db
feat(topology/algebra/{group,monoid}): nat and int scalar multiplication is continuous (#12124)
These instances allow a diamond to appear in the scalar action on `continuous_affine_map`s, which we fix at the same time.

2022-02-21 11:37:58 72252b3
feat(analysis/inner_product_space/projection): norm_sq_eq_sum_norm_sq… (#12096)
…_projection
The Pythagorean theorem for an orthogonal projection onto a submodule S.
I am sure that there are some style changes that could/should be made!

2022-02-21 11:37:57 271c323
feat(order/filter): prod_assoc (#12002)
map (prod_assoc α β γ) ((f ×ᶠ g) ×ᶠ h) = f ×ᶠ (g ×ᶠ h)
with two tiny supporting lemmas

2022-02-21 11:37:56 d8d2f54
feat(group_theory/nilpotent): n-ary products of nilpotent group (#11829)

2022-02-21 10:14:55 e966efc
chore(topology/constructions): golf a proof (#12174)

2022-02-21 10:14:54 d0fa7a8
chore(category_theory/limits): make fin_category_opposite an instance (#12153)

2022-02-21 09:47:15 b04851f
chore(tactic): fix tactic doc tags (#12131)

2022-02-21 08:48:32 8b93d3a
feat(measure_theory/function/lp_space): generalize some `integrable` lemmas to `mem_ℒp` (#11231)
I would like to define integrable as `mem_ℒp` for `p = 1` and remove the `has_finite_integral` prop. But first we need to generalize everything we have about `integrable` to `mem_ℒp`. This is one step towards that goal.

2022-02-21 08:00:52 e60e1f2
feat(data/real/pointwise): mul distributes over `infi` and `supr` (#12105)

2022-02-21 00:51:52 6298a43
feat(analysis/seminorm): smul_sup (#12103)
The `have : real.smul_max` local proof doesn't feel very general, so I've left it as a `have` rather than promoting it to a lemma.

2022-02-21 00:51:51 6ecd7ab
feat(topology/continuous_function/bounded): generalize scalar action (#12098)
This also makes the scalar action computable

2022-02-20 23:53:46 6ae1b70
feat(topology/uniform_space/cauchy): add `cauchy_seq.comp_injective` (#11986)
API changes:
- add `filter.at_top_le_cofinite`;
- add `function.injective.nat_tendsto_at_top`;
- add `cauchy_seq.comp_injective`, `function.bijective.cauchy_seq_comp_iff`.

2022-02-20 22:01:51 7e1ef9f
feat(ring_theory/witt_vector): assorted facts about Witt vectors over char p rings (#12093)

2022-02-20 14:25:15 334fb89
feat(algebra/order/ring): add three_ne_zero and four_ne_zero (#12142)

2022-02-20 09:43:13 6c6e142
chore(data/nat/factorization): Reorder lemmas and some minor golfing (#12144)
Some minor housework on this file, reordering and regrouping lemmas, adding and editing a few docstrings and section headers, and golfing a few proofs.

2022-02-20 01:22:26 55c9cff
chore(data/nat/prime): slightly weaken assumption in nat.exists_prime_and_dvd (#12156)
It is vacuously true for zero, as everything divides zero.

2022-02-20 00:00:55 fa603fe
feat(order/category/FinPartialOrder): The category of finite partial orders (#11997)
Define `FinPartialOrder`, the category of finite partial orders with monotone functions.

2022-02-19 22:26:11 5611533
feat(analysis/normed_space/star/complex): real and imaginary part of an element of a star module (#11811)
We introduce the real and imaginary parts of an element of a star module, and show that elements of the type can be decomposed into these two parts in the obvious way.

2022-02-19 21:14:08 3777543
feat(category_theory/isomorphism): two lemmas is_iso.of_iso_comp_left/right on isomorphisms (#12056)

2022-02-19 19:27:37 bc63071
feat(algebra/is_prime_pow): dot notation for nat.prime (#12145)

2022-02-19 19:27:36 628e8fb
doc(group_theory/coset): Mention "Lagrange's theorem" (#12137)
Suggested here: https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.E2.9C.94.20Lagrange's.20Theorem.20.28Group.20theory.29/near/272469211

2022-02-19 18:23:35 e88badb
feat(analysis/inner_product_space/pi_L2): Orthonormal basis (#12060)
Added the structure orthonormal_basis and basic associated API
Renamed the previous definition orthonormal_basis in analysis/inner_product_space/projection to std_orthonormal_basis

2022-02-19 07:54:42 518b5d2
chore(topology/bases): golf a proof (#12127)
Also add `function.injective_iff_pairwise_ne`.

2022-02-18 21:46:45 213e2ed
feat(algebra/group/pi): add pi.nsmul_apply (#12122)
via to_additive

2022-02-18 21:46:43 b3d0944
feat(tactic/swap_var): name juggling, a weaker wlog (#12006)

2022-02-18 19:52:47 5f46dd0
fix(category_theory/limits): improve inaccurate docstrings (#12130)

2022-02-18 19:52:46 7b6c407
feat(number_theory/divisors): add `prod_div_divisors` and `sum_div_divisors` (#12087)
Adds lemma `prod_div_divisors : ∏ d in n.divisors, f (n/d) = n.divisors.prod f` and `sum_div_divisors`.
Also proves `image_div_divisors_eq_divisors : image (λ (x : ℕ), n / x) n.divisors = n.divisors`
and `div_eq_iff_eq_of_dvd_dvd : n / x = n / y ↔ x = y` (where `n ≠ 0` and `x ∣ n` and `y ∣ n`)

2022-02-18 19:52:44 33179f7
refactor(topology/metric_space/completion): change namespace (#12077)
Move lemmas about metric on `uniform_space.completion` from `metric.completion` namespace to `uniform_space.completion`.

2022-02-18 19:52:43 18c3e3f
feat(data/nat/fib): add that `fib` is sum of `nat.choose` along antidiagonal (#12063)

2022-02-18 19:21:11 ffc2bdf
refactor(group_theory/abelianization): Define `commutator` in terms of `general_commutator` (#11949)
It seems reasonable to define `commutator` in terms of `general_commutator`.

2022-02-18 18:09:38 018c728
refactor(ring_theory/fractional_ideal): rename lemmas for dot notation, add coe_pow (#12080)
This replaces `fractional_ideal.fractional_mul` with `is_fractional.mul` and likewise for the other operations. The bundling was a distraction for the content of the lemmas anyway.

2022-02-18 18:09:37 bcf8a6e
feat(ring_theory/fractional_ideal): add coe_ideal lemmas (#12073)

2022-02-18 16:58:17 98643bc
feat(algebra/big_operators/intervals): summation by parts (#11814)
Add the "summation by parts" identity over intervals of natural numbers, as well as some helper lemmas.

2022-02-18 15:07:45 3ca16d0
feat(data/equiv): define `ring_equiv_class` (#11977)
This PR applies the morphism class pattern to `ring_equiv`, producing a new `ring_equiv_class` extending `mul_equiv_class` and `add_equiv_class`. It also provides a `ring_equiv_class` instance for `alg_equiv`s.

2022-02-18 14:37:42 223f149
chore(algebra/star/self_adjoint): extract a lemma from `has_scalar` (#12121)

2022-02-18 13:41:21 aed97e0
doc(analysis/normed/group/basic): add docstring explaining the "insert" name (#12100)

2022-02-18 12:57:33 3e6439c
fix(category_theory/limits/shapes/images): make class a Prop (#12119)

2022-02-18 11:05:58 33b4e73
refactor(topology/algebra): reorder imports (#12089)
* move `mul_opposite.topological_space` and `units.topological_space` to a new file;
* import `mul_action` in `monoid`, not vice versa.
With this order of imports, we can reuse results about `has_continuous_smul` in lemmas about topological monoids.

2022-02-18 07:37:58 77f264f
feat(data/finset/basic): add lemma `filter_eq_empty_iff` (#12104)
Add `filter_eq_empty_iff : (s.filter p = ∅) ↔ ∀ x ∈ s, ¬ p x`
We already have the right-to-left direction of this in `filter_false_of_mem`.

2022-02-18 05:49:20 bb1b56c
feat(algebra/indicator_function): smul lemmas for functions (#12059)
And a few basic lemmas in `set/basic`.

2022-02-18 04:52:16 17b3357
feat(topology/algebra): generalize `has_continuous_smul` arguments to `has_continuous_const_smul` (#11999)
This changes the majority of the downstream call-sites of the `const_smul` lemmas to only need the weaker typeclass.

2022-02-18 02:05:51 b757206
feat(linear_algebra/finite_dimensional): finrank_range_of_inj (#12067)
The dimensions of the domain and range of an injective linear map are
equal.

2022-02-18 00:52:54 59a183a
feat(data/finset/locally_finite): add Ico_subset_Ico_union_Ico (#11710)
This lemma extends the result for `set`s to `finset`s.

2022-02-17 22:59:24 e93996c
feat(topology/instances/discrete): instances for the discrete topology (#11349)
Prove `first_countable_topology`, `second_countable_topology` and `order_topology` for the discrete topology under appropriate conditions like `encodable`, or being a linear order with `pred` and `succ`. These instances give in particular `second_countable_topology ℕ` and `order_topology ℕ`

2022-02-17 21:50:25 6089f08
feat(data/nat/totient): add Euler's product formula for totient function (#11332)
Proving four versions of Euler's product formula for the totient function `φ`:
* `totient_eq_prod_factorization :  φ n = n.factorization.prod (λ p k, p ^ (k - 1) * (p - 1))`
* `totient_mul_prod_factors : φ n * ∏ p in n.factors.to_finset, p = n * ∏ p in n.factors.to_finset, (p - 1)`
* `totient_eq_div_factors_mul : φ n = n / (∏ p in n.factors.to_finset, p) * (∏ p in n.factors.to_finset, (p - 1))`
* `totient_eq_mul_prod_factors : (φ n : ℚ) = n * ∏ p in n.factors.to_finset, (1 - p⁻¹)`

2022-02-17 21:06:46 19534b2
feat(analysis/inner_product_space/basic) : `inner_map_self_eq_zero` (#12065)
The main result here is:  If ⟪T x, x⟫_C = 0 for all x, then T = 0.
The proof uses a polarization identity.  Note that this is false
with R in place of C.  I am confident that my use of ring_nf is
not optimal, but I hope to learn from the cleanup process!

2022-02-17 22:00:06+01:00 8b6901b
Revert "feat(category_theory/limits): is_bilimit"
This reverts commit 8edfa75d79ad70c88dbae01ab6166dd8b1fd2ba0.

2022-02-17 21:56:42+01:00 8edfa75
feat(category_theory/limits): is_bilimit

2022-02-17 19:35:15 aacc36c
feat(group_theory/commensurable): Definition and lemmas about commensurability. (#9545)
This defines commensurability for subgroups, proves this defines a transitive relation and then defines the commensurator subgroup. In doing so it also needs some lemmas about indices of subgroups and the definition of the conjugate of a subgroup by an element of the parent group.

2022-02-17 18:46:15 8575f59
feat(category_theory/limits): preservation of zero morphisms (#12068)

2022-02-17 17:02:32 c9e8c64
chore(*): update to lean 3.39.2c (#12102)

2022-02-17 17:02:31 dcb2826
feat(order/filter/basic): add eventually_eq.(smul/const_smul/sup/inf) (#12101)

2022-02-17 15:34:44 307711e
feat(group_theory/general_commutator): subgroup.pi commutes with the general_commutator (#11825)

2022-02-17 13:10:49 b54f44f
feat(data/matrix/notation): expansions of matrix multiplication for 2x2 and 3x3 (#12088)
A clever way to generalize this would be to make a recursivedefinition of `mul` and `one` that's defeq to the desired `![...]` result and prove that's equal to the usual definition, but that doesn't help with actually writing the lemma statement, which is the tedious bit.

2022-02-17 12:16:09 eb8d58d
fix(topology/algebra/basic): remove duplicate lemma (#12097)
This lemma duplicates the lemma of the same name in the root namespace, and should not be in this namespace in the first place.
The other half of #12072, now that the dependent PR is merged.

2022-02-17 12:16:07 4afd667
feat(measure_theory/integral): add `integral_sum_measure` (#12090)
Also add supporting lemmas about finite and infinite sums of measures.

2022-02-17 11:20:26 20cf3ca
feat(ring_theory/discriminant): add discr_eq_discr_of_to_matrix_coeff_is_integral (#11994)
We add `discr_eq_discr_of_to_matrix_coeff_is_integral`: if `b` and `b'` are `ℚ`-basis of a number field `K` such that
`∀ i j, is_integral ℤ (b.to_matrix b' i j)` and `∀ i j, is_integral ℤ (b'.to_matrix b i j` then
`discr ℚ b = discr ℚ b'`.

2022-02-17 10:43:57 614758e
feat(order/category/DistribLattice): The category of distributive lattices (#12092)
Define `DistribLattice`, the category of distributive lattices.

2022-02-17 10:00:32 58a3720
feat(analysis/inner_product_space/pi_L2): `complex.isometry_of_orthonormal` (#11970)
Add a definition for the isometry between `ℂ` and a two-dimensional
real inner product space given by a basis, and an associated `simp`
lemma for how this relates to `basis.map`.
This definition is just the composition of two existing definitions,
`complex.isometry_euclidean` and (the inverse of)
`basis.isometry_euclidean_of_orthonormal`.  However, it's still useful
to have it as a single definition when using it to define and prove
basic properties of oriented angles (in an oriented two-dimensional
real inner product space), to keep definitions and terms in proofs
simpler and to avoid tactics such as `simp` or `rw` rearranging things
inside this definition when not wanted (almost everything just needs
to use some isometry between these two spaces without caring about the
details of how it's defined, so it seems best to use a single `def`
for this isometry, and on the rare occasions where the details of how
it's defined matter, prove specific lemmas about the required
properties).

2022-02-17 07:43:58 a355d88
feat(topology/metric_space/gluing): metric space structure on sigma types (#11965)
We define a (noncanonical) metric space structure on sigma types (aka arbitrary disjoint unions), as follows. Each piece is isometrically embedded in the union, while for `x` and `y` in different pieces their distance is `dist x x0 + 1 + dist y0 y`, where `x0` and `y0` are basepoints in the respective parts. This is *not* registered as an instance.
This definition was already there for sum types (aka disjoint union of two pieces). We also fix this existing definition to avoid `inhabited` assumptions.

2022-02-17 06:05:54 09960ea
feat(algebra/group_power/basic): `two_zsmul` (#12094)
Mark `zpow_two` with `@[to_additive two_zsmul]`.  I see no apparent
reason for this result not to use `to_additive`, and I found I had a
use for the additive version.

2022-02-17 05:32:27 1831d85
feat(category_theory/limits): Preserves epi of preserves pushout. (#12084)

2022-02-17 00:34:41 84f12be
chore(algebra/star/self_adjoint): improve definitional unfolding of pow and div (#12085)

2022-02-17 00:34:40 834fd30
feat(topology/continuous_function/algebra): generalize algebra instances (#12055)
This adds:
* some missing instances in the algebra hierarchy (`comm_semigroup`, `mul_one_class`, `mul_zero_class`, `monoid_with_zero`, `comm_monoid_with_zero`, `comm_semiring`).
* finer-grained scalar action instances, notably none of which require `topological_space R` any more, as they only need `has_continuous_const_smul R M` instead of `has_continuous_smul R M`.
* continuity lemmas about `zpow` on groups and `zsmul` on additive groups (copied directly from the lemmas about `pow` on monoids), which are used to avoid diamonds in the int-action. In order to make room for these, the lemmas about `zpow` on groups with zero have been renamed to `zpow₀`, which is consistent with how the similar clash with `inv` is solved.
* a few lemmas about `mk_of_compact` since an existing proof was broken by `refl` closing the goal earlier than before.

2022-02-17 00:34:39 27df8a0
feat(topology/instances/rat): some facts about topology on `rat` (#11832)
* `ℚ` is a totally disconnected space;
* `cocompact  ℚ` is not a countably generated filter;
* hence, `alexandroff  ℚ` is not a first countable topological space.

2022-02-16 22:44:23 7dae87f
feat(topology/metric_space/basic): ext lemmas for metric spaces (#12070)
Also add a few results in `metric_space.basic`:
* A decreasing intersection of closed sets with diameter tending to `0` is nonempty in a complete space
* new constructions of metric spaces by pulling back structures (and adjusting definitional equalities)
* fixing `metric_space empty` and `metric_space punit` to make sure the uniform structure is definitionally the right one.

2022-02-16 22:44:22 5db1ae4
feat(analysis/specific_limits): useful specializations of some lemmas (#12069)

2022-02-16 22:44:21 1bf4181
feat(data/equiv/{basic,mul_equiv)}: add Pi_subsingleton (#12040)

2022-02-16 22:44:20 b2aaece
feat(field_theory/is_alg_closed): alg closed and char p implies perfect (#12037)

2022-02-16 21:09:23 bd67e85
feat(algebra/char_p/basic): add ring_char_of_prime_eq_zero (#12024)
The characteristic of a ring is `p` if `p` is a prime and `p = 0` in the ring.

2022-02-16 21:09:22 0fe91d0
feat(data/part): Instance lemmas (#12001)
Lemmas about `part` instances, proved by `tidy`

2022-02-16 19:16:09 b395a67
chore(data/finsupp/pointwise): golf using injective lemmas (#12086)

2022-02-16 19:16:08 0ab9b5f
chore(topology/continuous_function/bounded): golf algebra instances (#12082)
Using the `function.injective.*` lemmas saves a lot of proofs.
This also adds a few missing lemmas about `one` that were already present for `zero`.

2022-02-16 19:16:06 d86ce02
chore(ring_theory/fractional_ideal): golf (#12076)

2022-02-16 19:16:04 15c6eee
feat(logic/basic): Better congruence lemmas for `or`, `or_or_or_comm` (#12004)
Prove `or_congr_left` and `or_congr_right` and rename the existing `or_congr_left`/`or_congr_right` to `or_congr_left'`/`or_congr_right'` to match the `and` lemmas. Also prove `or_rotate`, `or.rotate`, `or_or_or_comm` based on `and` again.

2022-02-16 19:16:03 5e3d465
feat(category_theory/category/PartialFun): The category of types with partial functions (#11866)
Define `PartialFun`, the category of types with partial functions, and show its equivalence with `Pointed`.

2022-02-16 17:16:29 3c78d00
docs(group_theory/semidirect_product): fix typo in module docs (#12083)

2022-02-16 17:16:27 3107a83
feat(algebra/char_p/basic): Generalize `frobenius_inj`. (#12079)

2022-02-16 17:16:26 0eb160a
feat(data/finset/basic): When `insert` is injective and other lemmas (#11982)
* `insert`/`cons` lemmas for `finset` and `multiset`
* `has_ssubset` instance for `multiset`
* `finset.sdiff_nonempty`
* `disjoint.of_image_finset`, `finset.disjoint_image`, `finset.disjoint_map`
* `finset.exists_eq_insert_iff`
* `mem` lemmas
* change `pred` to `- 1` into the statement of `finset.card_erase_of_mem`

2022-02-16 17:16:25 6bcb12c
feat(order/antisymmetrization): Turning a preorder into a partial order (#11728)
Define `antisymmetrization`, the quotient of a preorder by the "less than both ways" relation. This effectively turns a preorder into a partial order, and this operation is functorial as shown by the new `Preorder_to_PartialOrder`.

2022-02-16 16:11:48 8a286af
chore(topology/algebra/mul_action): rename type variables (#12020)

2022-02-16 14:23:54 e815675
chore(topology/algebra/module/basic): remove two duplicate lemmas (#12072)
`continuous_linear_map.continuous_nsmul` is nothing to do with `continuous_linear_map`s, and is the same as `continuous_nsmul`, but the latter doesn't require commutativity. There is no reason to keep the former.
This lemma was added in #7084, but probably got missed due to how large that PR had to be.
We can't remove `continuous_linear_map.continuous_zsmul` until #12055 is merged, as there is currently no `continuous_zsmul` in the root namespace.

2022-02-16 14:23:53 a26d17f
feat(mv_polynomial/supported): restrict_to_vars (#12043)

2022-02-16 14:23:52 62297cf
feat(analysis/complex/cauchy_integral, analysis/analytic/basic): entire functions have power series with infinite radius of convergence (#11948)
This proves that a formal multilinear series `p` which represents a function `f : 𝕜 → E` on a ball of every positive radius, then `p` represents `f` on a ball of infinite radius. Consequently, it is shown that if `f : ℂ → E` is differentiable everywhere, then `cauchy_power_series f z R` represents `f` as a power series centered at `z` in the entirety of `ℂ`, regardless of `R` (assuming `0 < R`).
- [x] depends on: #11896

2022-02-16 13:36:23 22fdf47
chore(linear_algebra/affine_space/affine_map,topology/algebra/continuous_affine_map): generalized scalar instances (#11978)
The main result here is that `distrib_mul_action`s are available on affine maps to a module, inherited from their codomain.
This fixes a diamond in the `int`-action that was already present for `int`-affine maps, and prevents the new `nat`-action introducing a diamond.
This also removes the requirement for `R` to be a `topological_space` in the scalar action for `continuous_affine_map` by using `has_continuous_const_smul` instead of `has_continuous_smul`.

2022-02-16 11:53:41 32beebb
feat(algebra/order/monoid): add simp lemmas (#12030)

2022-02-16 11:53:40 7542119
refactor(algebra/group/basic): add extra typeclasses for negation (#11960)
The new typeclasses are:
* `has_involutive_inv R`, stating that `(r⁻¹)⁻¹ = r`  
  (instances: `group`, `group_with_zero`, `ennreal`, `set`, `submonoid`)
* `has_involutive_neg R`, stating that `- -r = r`
  (instances: `add_group`, `ereal`, `module.ray`, `ray_vector`, `set`, `add_submonoid`, `jordan_decomposition`)
* `has_distrib_neg R`, stating that `-a * b = a * -b = -(a * b)`
  (instances: `ring`, `units`, `unitary`, `special_linear_group`, `GL_pos`)
While the original motivation only concerned the two `neg` typeclasses, the `to_additive` machinery forced the introduction of `has_involutive_inv`, which turned out to be used in more places than expected.
Adding these typeclases removes a large number of specialized `units R` lemmas as the lemmas about `R` now match themselves. A surprising number of lemmas elsewhere in the library can also be removed. The removed lemmas are:
* Lemmas about `units` (replaced by `units.has_distrib_neg`):
  * `units.neg_one_pow_eq_or`
  * `units.neg_pow`
  * `units.neg_pow_bit0`
  * `units.neg_pow_bit1`
  * `units.neg_sq`
  * `units.neg_inv` (now `inv_neg'` for arbitrary groups with distributive negation)
  * `units.neg_neg`
  * `units.neg_mul`
  * `units.mul_neg`
  * `units.neg_mul_eq_neg_mul`
  * `units.neg_mul_eq_mul_neg`
  * `units.neg_mul_neg`
  * `units.neg_eq_neg_one_mul`
  * `units.mul_neg_one`
  * `units.neg_one_mul`
  * `semiconj_by.units_neg_right`
  * `semiconj_by.units_neg_right_iff`
  * `semiconj_by.units_neg_left`
  * `semiconj_by.units_neg_left_iff`
  * `semiconj_by.units_neg_one_right`
  * `semiconj_by.units_neg_one_left`
  * `commute.units_neg_right`
  * `commute.units_neg_right_iff`
  * `commute.units_neg_left`
  * `commute.units_neg_left_iff`
  * `commute.units_neg_one_right`
  * `commute.units_neg_one_left`
* Lemmas about groups with zero (replaced by `group_with_zero.to_has_involutive_neg`):
  * `inv_inv₀`
  * `inv_involutive₀`
  * `inv_injective₀`
  * `inv_eq_iff` (now shared with the `inv_eq_iff_inv_eq` group lemma)
  * `eq_inv_iff` (now shared with the `eq_inv_iff_eq_inv` group lemma)
  * `equiv.inv₀`
  * `measurable_equiv.inv₀`
* Lemmas about `ereal` (replaced by `ereal.has_involutive_neg`):
  * `ereal.neg_neg`
  * `ereal.neg_inj`
  * `ereal.neg_eq_neg_iff`
  * `ereal.neg_eq_iff_neg_eq`
* Lemmas about `ennreal` (replaced by `ennreal.has_involutive_inv`):
  * `ereal.inv_inv`
  * `ereal.inv_involutive`
  * `ereal.inv_bijective`
  * `ereal.inv_eq_inv`
* Other lemmas:
  * `ray_vector.neg_neg`
  * `module.ray.neg_neg`
  * `module.ray.neg_involutive`
  * `module.ray.eq_neg_iff_eq_neg`
  * `set.inv_inv`
  * `set.neg_neg`
  * `submonoid.inv_inv`
  * `add_submonoid.neg_neg`
As a bonus, this provides the group `unitary R`  with a negation operator and all the lemmas listed for `units` above.
For now this doesn't attempt to unify `units.neg_smul` and `neg_smul`.

2022-02-16 11:53:38 d24792c
feat(model_theory/terms_and_formulas): Define satisfiability and semantic equivalence of formulas (#11928)
Defines satisfiability of theories
Provides a default model of a satisfiable theory
Defines semantic (logical) equivalence of formulas

2022-02-16 11:19:27 6dfb24c
feat(algebra/star/self_adjoint): define skew-adjoint elements of a star additive group (#12013)
This defines the skew-adjoint elements of a star additive group, as the additive subgroup that satisfies `star x = -x`. The development is analogous to that of `self_adjoint`.

2022-02-16 09:30:11 06e6b35
feat(analysis/special_functions/trigonometric/angle): `coe_pi_add_coe_pi` (#12064)
Add another `simp` lemma to those expressing in different ways that 2π
is zero as a `real.angle`.

2022-02-16 07:45:37 daf2989
feat(algebra/big_operators): formula for product of sums to n+1 (#12042)

2022-02-16 07:16:02 6a09cd0
chore(topology/uniform_space): use weaker TC assumptions (#12066)
We don't need `[uniform_space β]` to prove
`uniform_space.completion.ext`.

2022-02-15 20:57:33 eeb2956
feat(topology/algebra): relax some `Type*` assumptions to `Sort*` (#12058)
When working on #11720 I forgot that we have to deal with Prop-indexed infimums quite often, so this PR fixes that.

2022-02-15 19:34:16 b0fe972
feat (analysis/normed_space/spectrum): prove Gelfand's formula for the spectral radius (#11916)
This establishes Gelfand's formula for the spectral radius in a complex Banach algebra `A`, namely that the sequence of n-th roots of the norms of n-th powers of any element tends to its spectral radius. Some results which hold in more generality concerning the function `z ↦ ring.inverse (1 - z • a)` are also given. In particular, this function is differentiable on the disk with radius the reciprocal of the spectral radius, and it has a power series on the ball with radius equal to the reciprocal of the norm of `a : A`.
Currently, the version of Gelfand's formula which appears here includes an assumption that `A` is second countable, which won't hold in general unless `A` is separable. This is not a true (i.e., mathematical) limitation, but a consequence of the current implementation of Bochner integrals in mathlib (which are an essential feature in the proof of Gelfand's formula because of its use of the Cauchy integral formula). When Bochner integrals are refactored, this type class assumption can be dropped.
- [x] depends on: #11869
- [x] depends on: #11896 
- [x] depends on: #11915

2022-02-15 19:34:15 d76ac2e
feat(category_theory): separators and detectors (#11880)

2022-02-15 19:04:10 ff2c9dc
feat(combinatorics/simple_graph/connectivity): add functions to split walks and to create paths (#11095)
This is chunk 3 of #8737. Introduces `take_until` and `drop_until` to split walks at a vertex, `rotate` to rotate cycles, and `to_path` to remove internal redundancy from a walk to create a path with the same endpoints.
This also defines a bundled `path` type for `is_path` since `G.path u v` is a useful type.

2022-02-15 17:47:31 5027b28
move(data/nat/choose/bounds): Move from `combinatorics.choose.bounds` (#12051)
This file fits better with all other files about `nat.choose`. My bad for originally proposing it goes alone under `combinatorics`.

2022-02-15 17:47:30 52aaf17
feat(data/{list,multiset,finset}/nat_antidiagonal): add lemmas to remove elements from head and tail of antidiagonal (#12028)
Also lowered `finset.nat.map_swap_antidiagonal` down to `list` through `multiset`.

2022-02-15 15:53:29 c0c673a
feat(data/equiv,logic/embedding): add `can_lift` instances (#12049)

2022-02-15 15:52:59 c686fcc
feat(analysis/specific_limits): add `tendsto_zero_smul_of_tendsto_zero_of_bounded` (#12039)

2022-02-15 15:52:56 6e64492
feat(ring_theory/multiplicity): Equality of `factorization`, `multiplicity`, and `padic_val_nat` (#12033)
Proves `multiplicity_eq_factorization : multiplicity p n = n.factorization p` for prime `p` and `n ≠ 0` and uses this to golf the proof of `padic_val_nat_eq_factorization : padic_val_nat p n = n.factorization p`.

2022-02-15 15:52:53 9307f5b
feat(topology/order/lattice): add a consequence of the continuity of sup/inf (#12003)
Prove this lemma and its `inf` counterpart:
```lean
lemma filter.tendsto.sup_right_nhds {ι β} [topological_space β] [has_sup β] [has_continuous_sup β]
  {l : filter ι} {f g : ι → β} {x y : β} (hf : tendsto f l (𝓝 x)) (hg : tendsto g l (𝓝 y)) :
  tendsto (f ⊔ g) l (𝓝 (x ⊔ y))
```
The name is `sup_right_nhds` because `sup` already exists, and is about a supremum over the filters on the left in the tendsto.
The proofs of `tendsto_prod_iff'` and `prod.tendsto_iff` were written by  Patrick Massot.

2022-02-15 15:52:52 60b77a7
feat(analysis/special_functions/complex/circle): `real.angle.exp_map_circle` lemmas (#11969)
Add four more `simp` lemmas about `real.angle.exp_map_circle`:
`exp_map_circle_zero`, `exp_map_circle_neg`, `exp_map_circle_add` and
`arg_exp_map_circle`.

2022-02-15 15:52:49 0c33309
feat(number_theory/zsqrtd/basic): add some lemmas (#11964)

2022-02-15 15:52:48 3d1354c
feat(set_theory/ordinal_arithmetic): Suprema of functions with the same range are equal (#11910)

2022-02-15 15:52:46 721bace
refactor(set_theory/ordinal_arithmetic): `omin` → `Inf` (#11867)
We remove the redundant `omin` in favor of `Inf`. We also introduce a `conditionally_complete_linear_order_bot` instance on `cardinals`, and golf a particularly messy proof.

2022-02-15 15:52:45 9acc1d4
feat(model_theory/finitely_generated): Finitely generated and countably generated (sub)structures (#11857)
Defines `substructure.fg` and `Structure.fg` to indicate when (sub)structures are finitely generated
Defines `substructure.cg` and `Structure.cg` to indicate when (sub)structures are countably generated

2022-02-15 15:52:44 41dd6d8
feat(data/nat/modeq): add modeq and dvd lemmas from Apostol Chapter 5 (#11787)
Various lemmas about `modeq` from Chapter 5 of Apostol (1976) Introduction to Analytic Number Theory:
* `mul_left_iff` and `mul_right_iff`: Apostol, Theorem 5.3
* `dvd_iff_of_modeq_of_dvd`: Apostol, Theorem 5.5
* `gcd_eq_of_modeq`: Apostol, Theorem 5.6
* `eq_of_modeq_of_abs_lt`: Apostol, Theorem 5.7
* `modeq_cancel_left_div_gcd`: Apostol, Theorem 5.4; plus other cancellation lemmas following from this.

2022-02-15 14:39:56 b0508f3
feat(topology/uniform/uniform_embedding): a sum of two complete spaces is complete (#11971)

2022-02-15 14:39:55 77ca1ed
feat(order/category/Lattice): The category of lattices (#11968)
Define `Lattice`, the category of lattices with lattice homs.

2022-02-15 12:59:13 5bcffd9
feat(number_theory/cyclotomic/zeta): add lemmas (#11786)
Lemmas about the norm of `ζ - 1`.
From flt-regular.
- [x] depends on: #11941

2022-02-15 12:59:12 a2d7b55
feat(order/complete_boolean_algebra): Frames (#11709)
Define the order theoretic `order.frame` and `order.coframe` and insert them between `complete_lattice` and `complete_distrib_lattice`.

2022-02-15 12:30:09 440e6b3
feat(topology/algebra/module/locally_convex): define locally convex spaces (#11859)

2022-02-15 11:12:39 c5578f9
feat(group_theory/nilpotent): products of nilpotent groups (#11827)

2022-02-15 08:27:11 f12b3d9
feat(topology/algebra): weaken typeclasses to only require `has_continuous_const_smul` (#11995)
This changes all the continuity-based `const_smul` lemmas to only require `has_continuous_const_smul` rather than `has_continuous_smul`. It does not attempt to  propagate the changes out of this file.
Four new instances are added in `const_mul_action.lean` for `has_continuous_const_smul`: `mul_opposite`, `prod`, `pi`, and `units`; all copied from the corresponding `has_continuous_smul` instance in `mul_action.lean`.
Presumably these lemmas existed before this typeclass did.
At any rate, the connection was less obvious until the rename a few days ago in #11940.

2022-02-15 06:34:35 f1334b9
chore(category_theory/triangulated/rotate): optimizing some proofs (#12031)
Removes some non-terminal `simp`s; replaces some `simp`s by `simp only [...]` and `rw`.
Compilation time dropped from 1m40s to 1m05s on my machine.

2022-02-15 05:21:51 4c76eac
chore(probability_theory/*): Rename folder  (#11989)
Rename `probability_theory` to `probability`.

2022-02-15 02:51:23 430faa9
chore(scripts): update nolints.txt (#12048)
I am happy to remove some nolints for you!

2022-02-15 02:21:36 a1283d0
feat(analysis/inner_product_space/adjoint): `is_self_adjoint_iff_eq_a… (#12047)
…djoint`
A self-adjoint linear map is equal to its adjoint.

2022-02-15 01:27:49 92ac8ff
feat(analysis/special_functions/complex/arg): `arg_coe_angle_eq_iff` (#12017)
Add a lemma that `arg` of two numbers coerced to `real.angle` is equal
if and only if `arg` is equal.

2022-02-14 23:41:27 5dc720d
chore(number_theory/padics/padic_norm): golf `prod_pow_prime_padic_val_nat` (#12034)
A todo comment said "this proof can probably be golfed with `factorization` stuff"; it turns out that indeed it can be. :)

2022-02-14 21:58:15 f9bac45
chore(category_theory/linear/yoneda): Removing some slow uses of `obviously` (#11979)
Providing explicit proofs for `map_id'` and `map_comp'` rather than leaving them for `obviously` (and hence `tidy`) to fill in.
Suggested by Kevin Buzzard in [this Zulip comment](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60tidy.60.20in.20mathlib.20proofs/near/271474418).
(These are temporary changes until `obviously` can be tweaked to do this more quickly)

2022-02-14 21:58:14 efdce09
refactor(topology/constructions): turn `cofinite_topology` into a type synonym (#11967)
Instead of `cofinite_topology α : topological_space α`, define
`cofinite_topology α := α` with an instance
`topological_space (cofinite_topology α) := (old definition)`.
This way we can talk about cofinite topology without using `@` all
over the place.
Also move `homeo_of_equiv_compact_to_t2.t1_counterexample` to
`topology.alexandroff` and prove it for `alexandroff ℕ` and
`cofinite_topology (alexandroff ℕ)`.

2022-02-14 21:58:13 ec11e5f
feat(algebra/covariant_and_contravariant): covariance and monotonicity (#11815)
Some simple lemmas about monotonicity and covariant operators. Proves things like `monotone f → monotone (λ n, f (3 + n))` by library search.

2022-02-14 20:17:46 4ba8334
doc(number_theory/cyclotomic/gal): fix typo (#12038)

2022-02-14 20:17:44 263833c
feat(data/nat/factorization): add `le_of_mem_factorization` (#12032)
`le_of_mem_factors`: every factor of `n` is `≤ n`
`le_of_mem_factorization`: everything in `n.factorization.support` is `≤ n`

2022-02-14 20:17:42 1a3c069
chore(data/equiv/set): more lemmas about prod (#12022)
Note we don't need the `symm` lemmas for `prod.comm`, since `prod.comm` is involutive

2022-02-14 18:40:35 583ea58
feat(data/list/big_operators): add `list.prod_map_mul` (#12029)
This is an analogue of the corresponding lemma `multiset.prod_map_mul`.

2022-02-14 14:46:55 199e8ca
feat(algebra/star/self_adjoint): generalize scalar action instances (#12021)
The `distrib_mul_action` instance did not require the underlying space to be a module.

2022-02-14 14:46:54 5166aaa
feat(analysis/normed_space/linear_isometry): `trans_one`, `one_trans`, `refl_mul`, `mul_refl` (#12016)
Add variants of the `linear_isometry_equiv.trans_refl` and
`linear_isometry_equiv.refl_trans` `simp` lemmas where `refl` is given
as `1`.  (`one_def` isn't a `simp` lemma in either direction, since
either `refl` or `1` could be the appropriate simplest form depending
on the context, but it seems clear these expressions involving `trans`
with `1` are still appropriate to simplify.)
Also add corresponding `refl_mul` and `mul_refl`.

2022-02-14 12:13:11 d33792e
feat(data/nat/factorization): add lemma `factorization_gcd` (#11605)
For positive `a` and `b`, `(gcd a b).factorization = a.factorization ⊓ b.factorization`; i.e. the power of prime `p` in `gcd a b` is the minimum of its powers in `a` and `b`.  This is Theorem 1.12 in Apostol (1976) Introduction to Analytic Number Theory.

2022-02-14 10:22:27 132ea05
docs(computability/partrec_code): add docs (#11929)

2022-02-14 10:22:26 dce5dd4
feat(order/well_founded, set_theory/ordinal_arithmetic): `eq_strict_mono_iff_eq_range` (#11882)
Two strict monotonic functions with well-founded domains are equal iff their ranges are. We use this to golf `eq_enum_ord`.

2022-02-14 08:41:45 a87d431
feat(topology/algebra): add `@[to_additive]` to some lemmas (#12018)
* rename `embed_product` to `units.embed_product`, add `add_units.embed_product`;
* add additive versions to lemmas about topology on `units M`;
* add `add_opposite.topological_space` and `add_opposite.has_continuous_add`;
* move `continuous_op` and `continuous_unop` to the `mul_opposite` namespace, add additive versions.

2022-02-14 08:04:35 2ceacc1
feat(measure_theory/measure): more lemmas about `null_measurable_set`s (#12019)

2022-02-14 07:20:08 25ebf41
chore(analysis): move some code (#12008)
Move the code that doesn't rely on `normed_space` from
`analysis.normed_space.add_torsor` to
`analysis.normed.group.add_torsor`.

2022-02-14 06:18:50 26fd61c
feat(analysis/complex/isometry): `rotation_trans` (#12015)
Add a `simp` lemma about the composition of two rotations.

2022-02-14 06:18:49 77dfac2
feat(order/filter/bases): basis of infimum of filters (#11855)

2022-02-14 04:42:39 6550cba
feat(order/partition/finpartition): Finite partitions (#9795)
This defines finite partitions along with quite a few constructions,

2022-02-13 20:36:13 f91a32d
feat(data/nat/factorization): add lemma `prod_prime_factors_dvd` (#11572)
For all `n : ℕ`, the product of the set of prime factors of `n` divides `n`, 
i.e. `(∏ (p : ℕ) in n.factors.to_finset, p) ∣ n`

2022-02-13 17:37:37 b08dc17
chore(number_theory/dioph): fix docs (#12011)

2022-02-12 22:55:33 af1355c
chore(measure_theory/integral/lebesgue): use to_additive when declaring instances and basic lemmas about simple functions (#12000)
I also grouped similar lemmas together and added one or two missing ones.

2022-02-12 21:57:51 4b217ea
chore(topology/algebra): rename file to match renamed lemmas (#11996)
#11940 renamed the lemmas from `continuous_smul₂` to `continuous_const_smul`, so this renames the file from `mul_action2` to `const_mul_action` accordingly.

2022-02-12 19:33:32 4a4a3a9
chore(data/finset/basic): Golf and compress (#11987)
* Move the `lattice` instance earlier so that it can be used to prove lemmas
* Golf proofs
* Compress statements within the style guidelines

2022-02-12 18:45:31 5f70cd9
chore(measure_theory/function/ae_eq_fun): replace topological assumptions by measurability assumptions (#11981)
Since the introduction of the `has_measurable_*` typeclasses, the topological assumptions in that file are only used to derive the measurability assumptions. This PR removes that step.

2022-02-12 17:23:47 b72300f
feat(group_theory/sylow): all max groups normal imply sylow normal (#11841)

2022-02-12 16:17:52 06e7f76
feat(analysis/analytic/basic): add uniqueness results for power series (#11896)
This establishes that if a function has two power series representations on balls of positive radius, then the corresponding formal multilinear series are equal; this is only for the one-dimensional case (i.e., for functions from the scalar field). Consequently, one may exchange the radius of convergence between these power series.

2022-02-12 09:20:49 91cc4ae
feat(order/category/BoundedOrder): The category of bounded orders (#11961)
Define `BoundedOrder`, the category of bounded orders with bounded order homs along with its forgetful functors to `PartialOrder` and `Bipointed`.

2022-02-12 08:07:28 1b5f8c2
chore(topology/algebra/ordered/*): Rename folder (#11988)
Rename `topology.algebra.ordered` to `topology.algebra.order` to match `order`, `algebra.order`, `topology.order`.

2022-02-12 08:07:27 7bebee6
chore(category_theory/monad/equiv_mon): Removing some slow uses of `obviously` (#11980)
Providing explicit proofs for various fields rather than leaving them for `obviously` (and hence `tidy`) to fill in.
Follow-up to this suggestion by Kevin Buzzard in [this Zulip comment](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60tidy.60.20in.20mathlib.20proofs/near/271474418).
(These are temporary changes until `obviously` can be tweaked to do this more quickly)

2022-02-12 08:07:25 71e9006
chore(topology/algebra/module/multilinear): relax typeclass arguments (#11972)
Previously `module R' (continuous_multilinear_map A M₁ M₂)` required `algebra R' A`, but now it only requires `smul_comm_class A R' M₂`.
The old instance required (modulo argument reordering):
```lean
def continuous_multilinear_map.module {ι : Type v} {M₁ : ι → Type w₁} {M₂ : Type w₂} [decidable_eq ι]
  [Π i, add_comm_monoid (M₁ i)] [add_comm_monoid M₂] [Π i, topological_space (M₁ i)]
  [topological_space M₂] [has_continuous_add M₂] 
  {R' : Type u_1} {A : Type u_2} [comm_semiring R'] [semiring A] [topological_space R']
  [Π i, module A (M₁ i)]  [module A M₂] [module R' M₂] [has_continuous_smul R' M₂]
  [algebra R' A] [is_scalar_tower R' A M₂] :
    module R' (continuous_multilinear_map A M₁ M₂)
```
while the new one requires
```lean
def continuous_multilinear_map.module {ι : Type v} {M₁ : ι → Type w₁} {M₂ : Type w₂} [decidable_eq ι]
  [Π i, add_comm_monoid (M₁ i)] [add_comm_monoid M₂] [Π i, topological_space (M₁ i)]
  [topological_space M₂] [has_continuous_add M₂]
  {R' : Type u_1} {A : Type u_2} [semiring R'] [semiring A] [topological_space R']  -- note: `R'` not commutative any more
  [Π i, module A (M₁ i)] [module A M₂] [module R' M₂] [has_continuous_smul R' M₂]
  [smul_comm_class A R' M₂] :  -- note: `R'` needs no action at all on `A`
    module R' (continuous_multilinear_map A M₁ M₂)
```
This change also adds intermediate `mul_action` and `distrib_mul_action` instances which apply in weaker situations.
As a result of this weakening, the typeclass arguments to `continuous_multilinear_map.to_normed_space` can also be weakened, and a weird instance workaround can be removed.

2022-02-12 08:07:23 822244f
refactor(measure_theory/group/basic): rename and split (#11952)
* Rename `measure_theory/group/basic` -> `measure_theory/group/measure`. It was not the bottom file in this folder in the import hierarchy (arithmetic is below it).
* Split off some results to `measure_theory/group/integration`. This reduces imports in some files, and makes the organization more clear. Furthermore, I will add some integrability results and more integrals in a follow-up PR.
* Prove a general instance `pi.is_mul_left_invariant`
* Remove lemmas specifically about `volume` on `real` in favor on the general lemmas.
```lean
real.map_volume_add_left -> map_add_left_eq_self
real.map_volume_pi_add_left -> map_add_left_eq_self
real.volume_preimage_add_left -> measure_preimage_add
real.volume_pi_preimage_add_left -> measure_preimage_add
real.map_volume_add_right -> map_add_right_eq_self 
real.volume_preimage_add_right -> measure_preimage_add_right
```

2022-02-12 07:11:55 60d3233
feat(topology/instances/real): metric space structure on nat (#11963)
Mostly copied from the already existing int version.

2022-02-12 02:46:24 dff8393
feat(tactic/lint): add unprintable tactic linter (#11725)
This linter will banish the recurring issue of tactics for which `param_desc` fails, leaving a nasty error message in hovers.

2022-02-12 00:03:02 227293b
feat(category_theory/category/Twop): The category of two-pointed types (#11844)
Define `Twop`, the category of two-pointed types. Also add `Pointed_to_Bipointed` and remove the erroneous TODOs.

2022-02-11 21:25:20 788240c
chore(order/cover): Rename `covers` to `covby` (#11984)
This matches the way it is written. `a ⋖ b` means that `b` covers `a`, that is `a` is covered by `b`.

2022-02-11 19:49:06 3fcb738
doc(data/finset/basic): correct some function names (#11983)

2022-02-11 19:49:04 515ce79
refactor(data/nat/factorization): Use factorization instead of factors.count (#11384)
Refactor to use `factorization` over `factors.count`, and adjust lemmas to be stated in terms of the former instead.

2022-02-11 18:25:43 da76d21
feat(measure_theory/measure/haar_quotient): Pushforward of Haar measure is Haar (#11593)
For `G` a topological group with discrete subgroup `Γ`, the pushforward to the coset space `G ⧸ Γ` of the restriction of a both left- and right-invariant measure on `G` to a fundamental domain `𝓕` is a `G`-invariant measure on `G ⧸ Γ`. When `Γ` is normal (and under other certain suitable conditions), we show that this measure is the Haar measure on the quotient group `G ⧸ Γ`.

2022-02-11 15:45:40 edefc11
feat(number_theory/number_field/basic) : the ring of integers of a number field is not a field  (#11956)

2022-02-11 13:10:47 1b78b4d
feat(measure_theory/function/ae_eq_of_integral): remove a few unnecessary `@` (#11974)
Those `@` were necessary at the time, but `measurable_set.inter` changed and they can now be removed.

2022-02-11 13:10:46 114752c
fix(algebra/monoid_algebra/basic): remove an instance that forms a diamond (#11918)
This turns `monoid_algebra.comap_distrib_mul_action_self` from an instance to a def.
This also adds some tests to prove that this diamond exists.
Note that this diamond is not just non-defeq, it's also just plain not equal.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Schur's.20lemma/near/270990004)

2022-02-11 11:23:57 492393b
feat(model_theory/direct_limit): Direct limits of first-order structures (#11789)
Constructs the direct limit of a directed system of first-order embeddings

2022-02-11 07:37:33 024aef0
feat(data/pi): provide `pi.mul_single` (#11849)
the additive version was previously called `pi.single`, to this requires refactoring existing code.

2022-02-11 03:15:15 8c60a92
fix(ring_theory/algebraic): prove a diamond exists and remove the instances (#11935)
It seems nothing used these instances anyway.

2022-02-11 01:36:55 fbfdff7
chore(data/real/ennreal, topology/instances/ennreal): change name of the order isomorphism for `inv` (#11959)
On [Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/naming.20defs/near/271228611) it was decided that the name should be changed from `ennreal.inv_order_iso` to `order_iso.inv_ennreal` in order to better accord with the rest of the library.

2022-02-11 01:36:54 ae14f6a
chore(algebra/star): generalize star_bit0, add star_inv_of (#11951)

2022-02-11 01:36:53 0227820
feat(topology/algebra/group): added (right/left)_coset_(open/closed) (#11876)
Added lemmas saying that, in a topological group, cosets of an open (resp. closed) set are open (resp. closed).

2022-02-11 01:36:52 7351358
refactor(order/well_founded, set_theory/ordinal_arithmetic): Fix namespace in `self_le_of_strict_mono` (#11871)
This places `self_le_of_strict_mono` in the `well_founded` namespace. We also rename `is_normal.le_self` to `is_normal.self_le` .

2022-02-10 23:42:58 4a5728f
chore(number_theory/cyclotomic/zeta): generalize to primitive roots (#11941)
This was done as `(zeta p ℤ ℤ[ζₚ] : ℚ(ζₚ)) = zeta p ℚ ℚ(ζₚ)` is independent of Lean's type theory. Allows far more flexibility with results.

2022-02-10 23:42:56 d487230
feat(algebra/big_operators): add prod_multiset_count_of_subset (#11919)
Inspired by #4259.
Co-Authored-By: Bhavik Mehta <bhavikmehta8@gmail.com>

2022-02-10 20:44:00 fb41da9
feat(algebra/module/basic): turn implications into iffs (#11937)
* Turn the following implications into `iff`, rename them accordingly, and make the type arguments explicit (`M` has to be explicit when using it in `rw`, otherwise one will have unsolved type-class arguments)
```
eq_zero_of_two_nsmul_eq_zero -> two_nsmul_eq_zero
eq_zero_of_eq_neg -> self_eq_neg
ne_neg_of_ne_zero -> self_ne_neg
```
* Also add two variants
* Generalize `ne_neg_iff_ne_zero` to work in modules over a ring

2022-02-10 20:43:58 0929387
feat(group_theory/group_action/defs): add ext attributes (#11936)
This adds `ext` attributes to `has_scalar`, `mul_action`, `distrib_mul_action`, `mul_distrib_mul_action`, and `module`.
The `ext` and `ext_iff` lemmas were eventually generated by `category_theory/preadditive/schur.lean` anyway - we may as well generate them much earlier.
The generated lemmas are slightly uglier than the `module_ext` we already have, but it doesn't really seem worth the trouble of writing out the "nice" versions when the `ext` tactic cleans up the mess for us anyway.

2022-02-10 20:43:57 007d660
feat(analysis/inner_product_space/pi_L2): `map_isometry_euclidean_of_orthonormal` (#11907)
Add a lemma giving the result of `isometry_euclidean_of_orthonormal`
when applied to an orthonormal basis obtained from another orthonormal
basis with `basis.map`.

2022-02-10 20:43:56 923923f
feat(analysis/special_functions/complex/arg): `arg_mul`, `arg_div` lemmas (#11903)
Add lemmas about `(arg (x * y) : real.angle)` and `(arg (x / y) : real.angle)`,
along with preparatory lemmas that are like those such as
`arg_mul_cos_add_sin_mul_I` but either don't require the real argument
to be in `Ioc (-π) π` or that take a `real.angle` argument.
I didn't add any lemmas about `arg (x * y)` or `arg (x / y)` as a
real; if such lemmas prove useful in future, it might make sense to
deduce them from the `real.angle` versions.

2022-02-10 20:43:55 1141703
feat(group_theory/group_action/sub_mul_action): orbit and stabilizer lemmas (#11899)
Feat: add lemmas for stabilizer and orbit for sub_mul_action

2022-02-10 18:46:21 de70722
chore(algebra/punit_instances): all actions on punit are central (#11953)

2022-02-10 18:46:20 779d836
feat(category_theory): variants of Yoneda are fully faithful (#11950)

2022-02-10 18:46:19 8012445
feat(group_theory/subgroup/basic): `subgroup.map_le_map_iff_of_injective` (#11947)
If `f` is injective, then `H.map f ≤ K.map f ↔ H ≤ K`.

2022-02-10 18:46:18 c28dc84
feat(topology/subset_properties): more facts about compact sets (#11939)
* add `tendsto.is_compact_insert_range_of_cocompact`, `tendsto.is_compact_insert_range_of_cofinite`, and `tendsto.is_compact_insert_range`;
* reuse the former in `alexandroff.compact_space`;
* rename `finite_of_is_compact_of_discrete` to `is_compact.finite_of_discrete`, add `is_compact_iff_finite`;
* add `cocompact_le_cofinite`, `cocompact_eq_cofinite`;
* add `int.cofinite_eq`, add `@[simp]` to `nat.cofinite_eq`;
* add `set.insert_none_range_some`;
* move `is_compact.image_of_continuous_on` and `is_compact_image` up;

2022-02-10 17:14:10 45ab382
chore(field_theory/galois): make `intermediate_field.fixing_subgroup_equiv` computable (#11938)
This also golfs and generalizes some results to reuse infrastructure from elsewhere.
In particular, this generalizes:
* `intermediate_field.fixed_field` to `fixed_points.intermediate_field`, where the latter matches the API of `fixed_points.subfield`
* `intermediate_field.fixing_subgroup` to `fixing_subgroup` and `fixing_submonoid`
This removes `open_locale classical` in favor of ensuring the lemmas take in the necessary decidable / fintype arguments.

2022-02-10 13:11:46 a86277a
feat(category_theory/limits): epi equalizer implies equal (#11873)

2022-02-10 13:11:45 20ef909
feat(data/part): add instances (#11868)
Add common instances for `part \alpha` to be inherited from `\alpha`. Spun off of #11046

2022-02-10 13:11:42 3b9dc08
feat(analysis/complex): add the Cauchy-Goursat theorem for an annulus (#11864)

2022-02-10 13:11:41 efa3157
feat(order/conditionally_complete_lattice): `cInf_le` variant without redundant assumption (#11863)
We prove `cInf_le'` on a `conditionally_complete_linear_order_bot`. We no longer need the boundedness assumption.

2022-02-10 13:11:40 66d9cc1
feat(number_theory/cyclotomic/gal): the Galois group of K(ζₙ) (#11808)
from flt-regular!

2022-02-10 13:11:39 1373d54
feat(group_theory/nilpotent): add nilpotent implies normalizer condition (#11586)

2022-02-10 13:11:37 c3f6fce
feat(algebra/group_power/basic): add lemmas about pow and neg on units (#11447)
In future we might want to add a typeclass for monoids with a well-behaved negation operator to avoid needing to repeat these lemmas. Such a typeclass would also apply to the `unitary` submonoid too.

2022-02-10 13:11:36 c3d8782
feat(category_theory/bicategory/functor_bicategory): bicategory structure on oplax functors (#11405)
This PR defines a bicategory structure on the oplax functors between bicategories.

2022-02-10 10:46:35 da164c6
feat (category_theory/karoubi_karoubi) : idempotence of karoubi (#11931)
In this file, we construct the equivalence of categories
`karoubi_karoubi.equivalence C : karoubi C ≌ karoubi (karoubi C)` for any category `C`.

2022-02-10 10:46:34 0490977
feat(algebra/lie/engel): add proof of Engel's theorem (#11922)

2022-02-10 10:46:32 f32fda7
feat(set_theory/ordinal_arithmetic): More `lsub` and `blsub` lemmas (#11848)
We prove variants of `sup_typein`, which serve as analogs for `blsub_id`. We also prove `sup_eq_lsub_or_sup_succ_eq_lsub`, which combines `sup_le_lsub` and `lsub_le_sup_succ`.

2022-02-10 10:46:31 b7360f9
feat(group_theory/general_commutator): subgroup.prod commutes with the general_commutator (#11818)

2022-02-10 10:46:28 6afaf36
feat(algebra/order/hom/ring): Ordered semiring/ring homomorphisms (#11634)
Define `order_ring_hom` with notation `→+*o` along with its hom class.

2022-02-10 09:27:23 8f5fd26
feat(data/nat/factorization): bijection between positive nats and finsupps over primes (#11440)
Proof that for any finsupp `f : ℕ →₀ ℕ` whose support is in the primes, `f = (f.prod pow).factorization`, and hence that the positive natural numbers are bijective with finsupps `ℕ →₀ ℕ` with support in the primes.

2022-02-10 09:27:22 0aa0bc8
feat(set_theory/ordinal_arithmetic): The derivative of addition (#11270)
We prove that the derivative of `(+) a` evaluated at `b` is given by `a * ω + b`.

2022-02-10 08:34:06 e60ca6b
feat(data/real/ennreal): `inv` is an `order_iso` to the order dual and lemmas for `supr, infi` (#11869)
Establishes that `inv` is an order isomorphism to the order dual. We then provide some convenience lemmas which guarantee that `inv` switches `supr` and `infi` and hence also switches `limsup` and `liminf`.

2022-02-10 08:34:05 b7e72ea
feat(measure_theory/probability_mass_function): Measure calculations for additional pmf constructions (#11858)
This PR adds calculations of the measures of sets under various `pmf` constructions.

2022-02-10 08:04:04 e9a1893
chore(tactic/default): import `linear_combination` (#11942)

2022-02-10 03:40:32 ea0e458
refactor(topology/algebra/mul_action2): rename type classes (#11940)
Rename `has_continuous_smul₂` and `has_continuous_vadd₂` to
`has_continuous_const_smul` and `has_continuous_const_vadd`,
respectively.

2022-02-09 23:10:35 4e8d8fa
feat(order/hom/bounded): Bounded order homomorphisms (#11806)
Define `bounded_order_hom` in `order.hom.bounded` and move `top_hom`, `bot_hom` there.

2022-02-09 21:35:24 4691159
doc(algebra/group/hom_instances): Fix spellings (#11943)
Fixes spelling mistakes introduced by #11843

2022-02-09 20:38:41 352e064
feat(topology/uniform_space/cauchy): add a few lemmas (#11912)

2022-02-09 18:57:12 2b9aca7
feat(topology): a few more results about compact sets (#11905)
* Also a few lemmas about sets and `mul_support`.

2022-02-09 18:57:10 b8fb8e5
feat(set_theory/ordinal_arithmetic): `le_one_iff` (#11847)

2022-02-09 18:57:09 2726e23
feat(algebra.group.hom_instances): Define left and right multiplication operators (#11843)
Defines left and right multiplication operators on non unital, non associative semirings.
Suggested by @ocfnash for #11073

2022-02-09 17:14:15 5008de8
feat(order): some properties about monotone predicates (#11904)
* We prove that some predicates are monotone/antitone w.r.t. some order. The proofs are all trivial.
* We prove 2 `iff` statements depending on the hypothesis that a certain predicate is (anti)mono: `exists_ge_and_iff_exists` and `filter.exists_mem_and_iff`)
* The former is used to prove `bdd_above_iff_exists_ge`, the latter will be used in a later PR.

2022-02-09 17:14:14 d3cdcd8
feat(order/filter/basic): add lemma `le_prod_map_fst_snd` (#11901)
A lemma relating filters on products and the filter-product of the projections. This lemma is particularly useful when proving the continuity of a function on a product space using filters.
Discussion: https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Some.20missing.20prod.20stuff

2022-02-09 17:14:12 9648ce2
chore(data/pi): add pi.prod and use elsewhere (#11877)
`pi.prod` is the function that underlies `add_monoid_hom.prod`, `linear_map.prod`, etc.
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Some.20missing.20prod.20stuff/near/270851797)

2022-02-09 15:50:47 ca2450f
feat(order/atoms): finite orders are (co)atomic (#11930)

2022-02-09 14:10:33 c882753
chore(algebra/tropical/basic): remove 3 instances (#11920)
The three removed instances are
* `covariant_swap_add` (exists since addition is commutative and the non-swapped version is proved);
* `covariant_add_lt` (as is, this is a copy of `covariant_add` -- judging from the name, it could have been intended to have a `(<)`, but with `(<)` it is false, see below);
* `covariant_swap_add_lt` (exists since addition is commutative and the non-swapped version is proved).
Here is a proof that the second instance with `(<)` is false:
```lean
lemma not_cov_lt : ¬ covariant_class (tropical ℕ) (tropical ℕ) (+) (<) :=
begin
  refine λ h, (lt_irrefl (trop 0) _),
  cases h,
  have : trop 0 < trop 1 := show 0 < 1, from zero_lt_one,
  calc trop 0 = trop 0 + trop 0 : (trop 0).add_self.symm
          ... < trop 0 + trop 1 : h _ this
          ... = trop 0          : add_eq_left this.le,
end
```

2022-02-09 11:36:35 fea68aa
chore(data/fintype/basic): documenting elaboration bug (#11247)
Simplifying an expression and documenting an elaboration bug that it was avoiding.

2022-02-09 09:56:15 3aa5b8a
refactor(algebra/ring/basic): rename lemmas about `a*(-b)` and `(-a)*b` (#11925)
This renames:
* `(- a) * b = - (a * b)` from `neg_mul_eq_neg_mul_symm` to `neg_mul`
* `a * (-b) = - (a * b)` from `mul_neg_eq_neg_mul_symm` to `mul_neg`
The new names are much easier to find when compared with `sub_mul`, `mul_sub` etc, and match the existing namespaced names under `units` and `matrix`.
This also replaces rewrites by `← neg_mul_eq_neg_mul` with `neg_mul` and rewrites by `← neg_mul_eq_mul_neg` with `mul_neg`.
To avoid clashes, the names in the `matrix` namespace are now `protected`.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mul_neg.2C.20neg_mul/near/233638226)

2022-02-09 08:51:48 4e17e08
feat(data/complex/basic): re-im set product (#11770)
`set.re_im_prod s t` (notation: `s ×ℂ t`) is the product of a set on the real axis and a set on the
imaginary axis of the complex plane.

2022-02-09 07:16:44 78c3975
feat(category_theory/pseudoabelian/basic): basic facts and contructions about pseudoabelian categories (#11817)

2022-02-08 22:14:40 56db7ed
feat(analysis/normed_space/basic): add lemmas `nnnorm_mul_le` and `nnnorm_pow_succ_le` (#11915)
Adds two convenience lemmas for `nnnorm`, submultiplicativity of `nnnorm` for semi-normed rings and the corresponding extension to powers. We only allow successors so as not to incur the `norm_one_class` type class constraint.

2022-02-08 21:07:37 a3d6b43
feat(topology/algebra/uniform_group): `cauchy_seq.const_mul` and friends (#11917)
A Cauchy sequence multiplied by a constant (including `-1`) remains a Cauchy sequence.

2022-02-08 19:01:57 4545e31
feat(model_theory/substructures): More operations on substructures (#11906)
Defines the substructure `first_order.language.hom.range`.
Defines the homomorphisms `first_order.language.hom.dom_restrict` and `first_order.language.hom.cod_restrict`, and the embeddings `first_order.language.embedding.dom_restrict`, `first_order.language.embedding.cod_restrict` which restrict the domain or codomain of a first-order hom or embedding to a substructure.
Defines the embedding `first_order.language.substructure.inclusion` between nested substructures.

2022-02-08 17:19:13 1ae8304
chore(*): update to lean 3.39.1c (#11926)

2022-02-08 13:50:04 b1269b0
chore(algebra/order/ring): add a few aliases (#11911)
Add aliases `one_pos`, `two_pos`, `three_pos`, and `four_pos`.
We used to have (some of) these lemmas. They were removed during one of cleanups but it doesn't hurt to have aliases.

2022-02-08 12:43:42 85d9f21
feat(*): localized `R[X]` notation for `polynomial R` (#11895)
I did not change `polynomial (complex_term_here taking args)` in many places because I thought it would be more confusing. Also, in some files that prove things about polynomials incidentally, I also did not include the notation and change the files.

2022-02-08 09:20:10 5932581
feat(group_theory/submonoid/operations): prod_le_iff and le_prod_iff, also for groups and modules (#11898)

2022-02-08 08:51:03 2b68801
refactor(number_theory/bernoulli_polynomials): improve names (#11805)
Cleanup the bernoulli_polynomials file

2022-02-08 04:53:51 1077eb3
feat(analysis/complex): a few lemmas about `dist` and `conj` (#11913)

2022-02-07 20:25:46 36d3b68
feat(linear_algebra/basis): `basis.map_equiv_fun` (#11888)
Add a `simp` lemma about the effect of `equiv_fun` for a basis
obtained with `basis.map`.

2022-02-07 19:33:57 f94b0b3
style(analysis/special_functions/trigonometric/angle): make types of `sin` and `cos` explicit (#11902)
Give the types of the results of `real.angle.sin` and `real.angle.cos`
explicitly, as requested by @eric-wieser in #11887.

2022-02-07 19:33:56 9ceb3c2
feat(topology/sheaf_condition): connect sheaves on sites and on spaces without has_products (#11706)
As an application of #11692, show that the is_sheaf_opens_le_cover sheaf condition on spaces is equivalent to is_sheaf on sites, thereby connecting sheaves on sites and on spaces without the value category has_products for the first time. (@justus-springer: you might want to take a look so as to determine whether and which of your work in #9609 should be deprecated.) This could be seen as a step towards refactoring sheaves on spaces through sheaves on sites.
- [x] depends on: #11692

2022-02-07 17:28:22 436966c
chore(data/finsupp/basic): generalize comap_mul_action (#11900)
This new definition is propoitionally equal to the old one in the presence of `[group G]` (all the previous `lemma`s continue to apply), but generalizes to `[monoid G]`.
This also removes `finsupp.comap_distrib_mul_action_self` as there is no need to have this as a separate definition.

2022-02-07 17:28:21 7b91f00
feat(algebra/big_operators/basic): add multiset.prod_sum (#11885)

2022-02-07 15:42:07 02c9d69
feat(analysis/inner_product_space/basic): `orthonormal.map_linear_isometry_equiv` (#11893)
Add a variant of `orthonormal.comp_linear_isometry_equiv` for the case
of an orthonormal basis mapped with `basis.map`.
If in future we get a bundled type of orthonormal bases with its own
`map` operation, this would no longer be a separate lemma, but until
then it's useful.

2022-02-07 15:42:06 c61ea33
feat(analysis/complex/isometry): `rotation_symm` (#11891)
Add a `simp` lemma that the inverse of `rotation` is rotation by the
inverse angle.

2022-02-07 15:42:04 2364a09
feat(analysis/complex/circle): `exp_map_circle_neg` (#11889)
Add the lemma `exp_map_circle_neg`, similar to other lemmas for
`exp_map_circle` that are already present.

2022-02-07 15:42:03 99215e3
feat(analysis/special_functions/trigonometric/angle): `sin`, `cos` (#11887)
Add definitions of `sin` and `cos` that act on a `real.angle`.

2022-02-07 15:42:01 98ef84e
feat(analysis/special_functions/trigonometric/angle): `induction_on` (#11886)
Add `real.angle.induction_on`, for use in deducing results for
`real.angle` from those for `ℝ`.

2022-02-07 15:42:00 26179cc
feat(data/list): add some lemmas. (#11879)

2022-02-07 15:41:58 dcbb59c
feat(category_theory/limits): is_limit.exists_unique (#11875)
Yet another restatement of the limit property which is occasionally useful.

2022-02-07 15:41:57 556483f
feat(category_theory/limits): (co)equalizers in the opposite category (#11874)

2022-02-07 15:41:55 7a2a546
feat(data/set/opposite): the opposite of a set (#11860)

2022-02-07 15:41:54 0354e56
feat(order/complete_lattice): infi_le_iff (#11810)
Add missing lemma `infi_le_iff {s : ι → α} : infi s ≤ a ↔ (∀ b, (∀ i, b ≤ s i) → b ≤ a)`
Also take the opportunity to restate `Inf_le_iff` to restore consistency with `le_Sup_iff` that was broken in #10607 and move `le_supr_iff` close to `le_Sup_iff` and remove a couple of unneeded parentheses.

2022-02-07 14:32:55 a2f3f55
chore(algebra/monoid_algebra): generalize lift_nc (#11881)
The g argument does not need to be a bundled morphism here in the definition.
Instead, we require it be a bundled morphism only in the downstream lemmas, using the new typeclass machinery

2022-02-07 12:33:08 04b9d28
feat(data/pfun): Composition of partial functions (#11865)
Define
* `pfun.id`: The identity as a partial function
* `pfun.comp`: Composition of partial functions
* `pfun.to_subtype`: Restrict the codomain of a function to a subtype and make it partial

2022-02-07 11:17:01 0090891
chore(model_theory/*): Split up model_theory/basic (#11846)
Splits model_theory/basic into separate files: basic, substructures, terms_and_formulas, definability, quotients
Improves documentation throughout

2022-02-07 10:17:41 3c70566
feat(analysis/normed_space/linear_isometry): `symm_trans` (#11892)
Add a `simp` lemma `linear_isometry_equiv.symm_trans`, like
`coe_symm_trans` but without a coercion involved.  `coe_symm_trans`
can then be proved by `simp`, so stops being a `simp` lemma itself.

2022-02-07 08:33:33 b1b09eb
refactor(data/quot): Make more `setoid` arguments implicit (#11824)
Currently, not all of the `quotient` API can be used with non-instance setoids. This fixes it by making a few `setoid` arguments explicit rather than instances.

2022-02-07 03:57:45 25297ec
feat(analysis/complex/basic): `conj_lie_symm` (#11890)
Add a `simp` lemma that the inverse of `conj_lie` is `conj_lie`.

2022-02-06 19:03:43 e18972b
feat(set_theory/ordinal_arithmetic): Suprema of empty families (#11872)

2022-02-06 07:25:14 24ebc5c
feat(group_theory/sylow): the cardinality of a sylow group (#11776)

2022-02-06 01:53:58 4148990
feat(set_theory/ordinal_arithmetic): Suprema and least strict upper bounds of constant families (#11862)

2022-02-05 21:22:39 6787a8d
feat(category_theory): a hierarchy of balanced categories (#11856)

2022-02-05 19:40:29 0f9c153
feat(algebra/cubic_discriminant): basics of cubic polynomials and their discriminants (#11483)

2022-02-05 17:59:51 39b1262
feat(algebra/lie/nilpotent): nilpotency of Lie modules depends only on the Lie subalgebra of linear endomorphisms (#11853)

2022-02-05 17:59:49 b9d19ed
feat(algebra/lie/nilpotent): nilpotency of Lie modules is preserved under surjective morphisms (#11852)

2022-02-05 17:59:47 9fcd1f2
feat(algebra/lie/nilpotent): add lemma `lie_module.coe_lower_central_series_ideal_le` (#11851)

2022-02-05 17:31:04 df7c217
feat(algebra/lie/nilpotent): add definition `lie_ideal.lcs` (#11854)
This is extremely useful when proving a generalised version of Engel's lemma.

2022-02-05 09:52:03 9969321
feat(measure_theory/probability_mass_function): Lemmas connecting `pmf.support` and `pmf.to_measure` (#11842)
Add lemmas relating the support of a `pmf` to the measures of sets under the induced measure.

2022-02-05 09:52:01 612ca40
feat(data/finset): erase is empty iff (#11838)

2022-02-05 09:52:00 31f5688
refactor(ring_theory/valuation/basic): `fun_like` design for `valuation` (#11830)
Introduce `valuation_class`, the companion typeclass to `valuation`. Deprecate lemmas. Rename the field from `map_add'` to `map_add_le_max'` to avoid confusion with the eponymous field from `add_hom`.

2022-02-05 09:51:59 e78563c
feat(ring_theory/power_series): reindex trunc of a power series to truncate below index n (#10891)
Currently the definition of truncation of a univariate and multivariate power series truncates above the index, that is if we truncate a power series $\sum a_i x^i$ at index `n` the term $a_n x^n$ is included.
This makes it impossible to truncate the first monomial $x^0$ away as it is included with the smallest possible value of n, which causes some issues in applications (imagine if you could only pop elements of lists if the result was non-empty!).

2022-02-05 08:16:33 6b4e269
chore(data/fintype/basic): rename some instances (#11845)
Rename instances from `infinite.multiset.infinite` etc to
`multiset.infinite` etc; rename `infinite.set.infinite` to
`infinite.set` to avoid name clash.
Also add `option.infinite`.

2022-02-05 05:19:33 b0d9761
feat(ring_theory/hahn_series): add a map to power series and dickson's lemma (#11836)
Add a ring equivalence between `hahn_series` and `mv_power_series` as discussed in https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/induction.20on.20an.20index.20type/near/269463528.
This required adding some partially well ordered lemmas that it seems go under the name Dickson's lemma.
This may be independently useful, a constructive version of this has been used in other provers, especially in connection to Grobner basis and commutative algebra type material.

2022-02-04 23:34:38 bd7d034
feat(ring_theory/nilpotent): add lemma `module.End.is_nilpotent_mapq` (#11831)
Together with the other lemmas necessary for its proof.

2022-02-04 22:50:46 b905eb6
fix(group_theory/nilpotent): don’t unnecessarily `open_locale classical` (#11779)
h/t @pechersky for noticing

2022-02-04 21:12:18 b3b32c8
feat(algebra/lie/quotient): first isomorphism theorem for morphisms of Lie algebras (#11826)

2022-02-04 21:12:17 292bf34
feat(algebra/lie/ideal_operations): add lemma `lie_ideal_oper_eq_linear_span'` (#11823)
It is useful to have this alternate form in situations where we have a hypothesis like `h : I = J` since we can then rewrite using `h` after applying this lemma.
An (admittedly brief) scan of the existing applications of `lie_ideal_oper_eq_linear_span` indicates that it's worth keeping both forms for convenience but I'm happy to dig deeper into this if requested.

2022-02-04 21:12:16 fa20482
feat(linear_algebra/basic): add minor lemmas, tweak `simp` attributes (#11822)

2022-02-04 21:12:15 247504c
feat(algebra/lie/cartan_subalgebra): add lemma `lie_subalgebra.exists_nested_lie_ideal_of_le_normalizer` (#11820)

2022-02-04 21:12:13 a2fd0bd
feat(algebra/lie/basic): define pull back of a Lie module along a morphism of Lie algebras. (#11819)

2022-02-04 21:12:12 2e7efe9
refactor(set_theory/ordinal_arithmetic): Change `α → Prop` to `set α` (#11816)

2022-02-04 21:12:11 a741585
chore(algebra/group): make `coe_norm_subgroup` and `submodule.norm_coe` consistent (#11427)
The `simp` lemmas for norms in a subgroup and in a submodule disagreed: the first inserted a coercion to the larger group, the second deleted the coercion. Currently this is not a big deal, but it will become a real issue when defining `add_subgroup_class`. I want to make them consistent by pointing them in the same direction. The consensus in the [Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Simp.20normal.20form.3A.20coe_norm_subgroup.2C.20submodule.2Enorm_coe) suggests `simp` should insert a coercion here, so I went with that.
After making the changes, a few places need extra `simp [submodule.coe_norm]` on the local hypotheses, but nothing major.

2022-02-04 20:39:46 c3273aa
feat(algebra/lie/subalgebra): add `lie_subalgebra.equiv_of_le` and `lie_subalgebra.equiv_range_of_injective` (#11828)

2022-02-04 18:53:26 3c00e5d
fix(algebra/Module/colimits): Change `comm_ring` to `ring`. (#11837)
... despite the well-known fact that all rings are commutative.

2022-02-04 18:53:25 5b3cd4a
refactor(analysis/normed_space/add_torsor): Kill `seminormed_add_torsor` (#11795)
Delete `normed_add_torsor` in favor of the equivalent `seminormed_add_torsor` and rename `seminormed_add_torsor` to `normed_add_torsor`.

2022-02-04 18:53:24 aaaeeae
feat(category_theory/category/{Pointed,Bipointed}): The categories of pointed/bipointed types (#11777)
Define
* `Pointed`, the category of pointed types
* `Bipointed`, the category of bipointed types
* the forgetful functors from `Bipointed` to `Pointed` and from `Pointed` to `Type*`
* `Type_to_Pointed`, the functor from `Type*` to `Pointed` induced by `option`
* `Bipointed.swap_equiv` the equivalence between `Bipointed` and itself induced by `prod.swap` both ways.

2022-02-04 17:10:26 cedcf07
chore(*): update to lean 3.39.0c (#11821)

2022-02-04 08:58:31 049a1b2
feat(group_theory/subgroup/basic): add pi subgroups (#11801)

2022-02-04 06:54:32 46c48d7
feat(logic/basic): add projection notation for iff (#11803)

2022-02-04 02:33:18 553cb9c
fix(algebra/category/Module/colimits): Add some additional instances with permuted universe parameters (#11812)

2022-02-04 02:33:17 4cfc30e
chore(*): use le_rfl instead of le_refl _ (#11797)

2022-02-04 02:03:42 6dcad02
feat(linear_algebra/lagrange): Add recurrence formula for Lagrange polynomials (#11762)
I have also changed `interpolate` to take in a function `f : F → F` instead of `f : s → F`, since this makes the statement of the theorem nicer.

2022-02-03 23:36:11 853192c
feat(topology/algebra): Inf and inducing preserve compatibility with algebraic structure (#11720)
This partly duplicates @mariainesdff 's work on group topologies, but I'm using an unbundled approach which avoids defining a new `X_topology` structure for each interesting X.

2022-02-03 18:39:52 30a731c
fix(algebra/category/Module/colimits): generalize universes (#11802)

2022-02-03 18:39:51 f2be0d2
feat(polynomial/cyclotomic): irreducible cyclotomic polynomials are minimal polynomials (#11796)
from flt-regular

2022-02-03 16:59:03 2c5f36c
feat(data/finset/sort): an order embedding from fin (#11800)
Given a set `s` of at least `k` element in a linear order, there is an order embedding from `fin k` whose image is contained in `s`.

2022-02-03 16:59:01 25f0406
fix(topology/connected): typos in docstrings (#11798)
As pointed out by @YaelDillies

2022-02-03 15:03:19 a4d9581
feat(algebra/group_power/order): add pow_bit0_pos_iff (#11785)

2022-02-03 14:17:31 324d845
feat(field_theory/krull_topology): defined Krull topology on Galois groups (#11780)

2022-02-03 12:53:15 d6e1c55
chore(data/polynomial/monic): dedup `degree_map` (#11792)

2022-02-03 12:53:14 2f4f8ad
feat(set_theory/principal): Principal ordinals are unbounded (#11755)
Amazingly, this theorem requires no conditions on the operation.

2022-02-03 12:12:38 50ee3d5
feat(ring_theory/roots_of_unity): coe_injective (#11793)
from flt-regular

2022-02-03 11:20:19 934f182
feat(field_theory/is_alg_closed/classification): Classify algebraically closed fields (#9370)
The main results here are that two algebraically closed fields with the same characteristic and the same cardinality of transcendence basis are isomorphic. The consequence of this is that two uncountable algebraically closed fields of the same cardinality and characteristic are isomorphic. This has applications in model theory, in particular the Lefschetz principle https://proofwiki.org/wiki/Lefschetz_Principle_(First-Order)

2022-02-03 10:20:39 e39f617
feat(category_theory/linear): compatibility of linear Yoneda (#11784)

2022-02-03 10:20:38 e61ce5d
chore(category_theory/limits): dualize strong_epi (#11783)

2022-02-03 10:20:37 93f2bdc
feat(topology/algebra/ordered/monotone_convergence): add `antitone.{ge,le}_of_tendsto` (#11754)

2022-02-03 09:25:26 a483158
feat(topology/algebra/group): continuity of action of a group on its own coset space (#11772)
Given a subgroup `Γ` of a topological group `G`, there is an induced scalar action of `G` on the coset space `G ⧸ Γ`, and there is also an induced topology on `G ⧸ Γ`.  We prove that this action is continuous in each variable, and, if the group `G` is locally compact, also jointly continuous.

2022-02-03 04:55:55 1816378
chore(*): golf `by_contra, push_neg` to `by_contra'` (#11768)

2022-02-03 04:21:08 89a3c07
feat(field_theory/laurent): Laurent expansions of rational functions (#11199)
Also provide more API for `ratfunc`, lifting homomorphisms of (polynomial to polynomial) to (ratfunc to ratfunc).

2022-02-02 21:05:56 7f3590b
feat(field_theory/minpoly): add a nontriviality lemma (#11781)

2022-02-02 20:04:39 cdad110
feat(tactic/equiv_rw): enhancing 'equiv_rw' (#11730)
Expands the `equiv_rw` API by:
* Making it accept a list of equivalences instead of a single one, if intended
* Allowing multiple targets (closes #2891)
Extra: some optimizations.

2022-02-02 16:48:16 41811cd
feat(number_theory): von Mangoldt function (#11727)
Defines the von Mangoldt function

2022-02-02 16:48:15 c235c61
refactor(set_theory/ordinal_arithmetic): Simpler `bsup` definition (#11386)
We also simplify some existing proofs.

2022-02-02 16:48:14 4d0b398
feat(topology/connected): Connectedness of unions of sets (#10005)
* Add multiple results about when unions of sets are (pre)connected. In particular, the union of connected sets indexed by `ℕ` such that each set intersects the next is connected.
* Remove some `set.` prefixes in the file
* There are two minor fixes in other files, presumably caused by the fact that they now import `order.succ_pred`
* Co-authored by Floris van Doorn fpvdoorn@gmail.com

2022-02-02 14:51:44 d6c002c
feat(group_theory/p_group): finite p-groups with different p have coprime orders (#11775)

2022-02-02 14:51:43 307a456
refactor(set_theory/ordinal): Add `covariant_class` instances for ordinal addition and multiplication (#11678)
This replaces the old `add_le_add_left`, `add_le_add_right`, `mul_le_mul_left`, `mul_le_mul_right` theorems.

2022-02-02 14:51:42 cd1d839
feat(order/rel_classes): Unbundled typeclass to state that two relations are the non strict and strict versions (#11381)
This defines a Prop-valued mixin `is_nonstrict_strict_order α r s` to state `s a b ↔ r a b ∧ ¬ r b a`.
The idea is to allow dot notation for lemmas about the interaction of `⊆` and `⊂` (which currently do not have a `preorder`-like typeclass). Dot notation on each of them is already possible thanks to unbundled relation classes (which allow to state lemmas for both `set` and `finset`).

2022-02-02 13:59:38 d002769
refactor(ring_theory): clean up `algebraic_iff_integral` (#11773)
The definitions `is_algebraic_iff_integral`, `is_algebraic_iff_integral'` and `algebra.is_algebraic_of_finite` have always been annoying me, so I decided to fix that:
 * The name `is_algebraic_iff_integral'` doesn't explain how it differs from `is_algebraic_iff_integral` (namely that the whole algebra is algebraic, rather than one element), so I renamed it to `algebra.is_algebraic_iff_integral`.
 * The two `is_algebraic_iff_integral` lemmas have an unnecessarily explicit parameter `K`, so I made that implicit
 * `is_algebraic_of_finite` has no explicit parameters (so we always have to use type ascriptions), so I made them explicit
 * Half of the usages of `is_algebraic_of_finite` are of the form `is_algebraic_iff_integral.mp is_algebraic_of_finite`, even though `is_algebraic_of_finite` is proved as `is_algebraic_iff_integral.mpr (some_proof_that_it_is_integral)`, so I split it up into a part showing it is integral, that we can use directly.
As a result, I was able to golf a few proofs.

2022-02-02 13:59:37 07d6d17
refactor(field_theory/is_alg_closed/basic): Generalize alg closures to commutative rings (#11703)

2022-02-02 12:30:43 4db1f96
chore(algebra/ne_zero): revert transitivity changes (#11760)
The `trans` methods were a disaster for `flt-regular` - this reverts them unless a better solution can be found.

2022-02-02 12:30:42 6c6fbe6
feat(group_theory/subgroup/basic): normalizer condition implies max subgroups normal (#11597)

2022-02-02 10:56:10 1ed19a9
feat(group_theory/nilpotent): p-groups are nilpotent (#11726)

2022-02-02 10:56:09 c1d2860
feat(measure_theory/probability_mass_function): Measures of sets under `pmf` monad operations (#11613)
This PR adds explicit formulas for the measures of sets under `pmf.pure`, `pmf.bind`, and `pmf.bind_on_support`.

2022-02-02 10:56:08 a687cbf
feat(field_theory/intermediate_field, ring_theory/.., algebra/algebra… (#11168)
If `E` is an subsemiring/subring/subalgebra/intermediate_field and e is an equivalence of the larger semiring/ring/algebra/field, then e induces an equivalence from E to E.map e. We define this equivalence.

2022-02-02 08:53:09 d5d5784
chore(ring_theory/power_basis): add `simps` (#11766)
for flt-regular

2022-02-02 08:53:07 2fdc151
refactor(power_series/basic): generalize order to semirings (#11765)
There are still some TODOs about generalizing statements downstream of this file.

2022-02-02 08:53:06 a32b0d3
feat(group_theory/p_group): p-groups with different p are disjoint (#11752)

2022-02-02 08:53:04 664b5be
feat(group_theory/subgroup/basic): add commute_of_normal_of_disjoint (#11751)

2022-02-02 08:53:03 a6d70aa
feat(order/category/*): `order_dual` as an equivalence of categories (#11743)
For `whatever` a category of orders, define
* `whatever.iso_of_order_iso`: Turns an order isomorphism into an equivalence of objects inside `whatever`
* `whatever.to_dual`: `order_dual` as a functor from `whatever` to itself
* `whatever.dual_equiv`: The equivalence of categories between `whatever` and itself induced by `order_dual` both ways
* `order_iso.dual_dual`: The order isomorphism between `α` and `order_dual (order_dual α)`

2022-02-02 07:21:06 400dbb3
refactor(ring_theory/non_zero_divisors): use fun_like (#11764)

2022-02-02 07:21:05 c8fd7e3
chore(measure_theory/covering/besicovitch): Weaker import (#11763)
We relax the `set_theory.cardinal_ordinal` import to the weaker `set_theory.ordinal_arithmetic` import. We also fix some trivial spacing issues in the docs.

2022-02-02 07:21:04 a18680a
chore(topology/continuous_function/ordered): split from `continuous_function/basic` (#11761)
Split material about orders out from `continuous_function/basic`, to move that file lower down the import hierarchy.

2022-02-02 07:21:03 366fd9b
feat(analysis/special_functions): show (2 / π) * x ≤ sin x (#11724)
I wasn't entirely sure where to put this - trigonometric/basic is too high on the import graph but here seems to work. 
This is a fairly weak inequality but it can sometimes turn out to be useful, and is important enough to be named!

2022-02-02 07:21:01 5c4c1c0
feat(topology/homotopy): Fundamental groupoid preserves products (#11459)

2022-02-02 06:20:40 fa86370
chore(*): Golfed some random theorems (#11769)

2022-02-02 05:25:14 8ef783b
feat(measure_theory/measure): drop more `measurable_set` args (#11547)
Most notably, in `measure_Union_eq_supr`.

2022-02-02 02:57:46 d68b480
chore(linear_algebra): remove `bilinear_map` from imports in `pi` (#11767)
Remove `bilinear_map` from imports in `pi`

2022-02-01 20:41:27 343cbd9
feat(sites/sheaf): simple sheaf condition in terms of limit (#11692)
+ Given a presheaf on a site, construct a simple cone for each sieve. The sheaf condition is equivalent to all these cones being limit cones for all covering sieves of the Grothendieck topology. This is made possible by a series of work that mostly removed universe restrictions on limits.
+ Given a sieve over X : C, the diagram of its associated cone is a functor from the full subcategory of the over category C/X consisting of the arrows in the sieve, constructed from the canonical cocone over `forget : over X ⥤ C` with cone point X, which is only now added to mathlib. This cone is simpler than the multifork cone in [`is_sheaf_iff_multifork`](https://leanprover-community.github.io/mathlib_docs/category_theory/sites/sheaf.html#category_theory.presheaf.is_sheaf_iff_multifork). The underlying type of this full subcategory is equivalent to [`grothendieck_topology.cover.arrow`](https://leanprover-community.github.io/mathlib_docs/category_theory/sites/grothendieck.html#category_theory.grothendieck_topology.cover.arrow).
+ This limit sheaf condition might be more convenient to use to do sheafification, which has been done by @adamtopaz using the multifork cone before universes are sufficiently generalized for limits, though I haven't thought about it in detail. It may not be worth refactoring sheafification in terms of this sheaf condition, but we might consider using this if we ever want to do sheafification for more general (e.g. non-concrete) value categories. #11706 is another application.
This is based on a [Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/universe.20restriction.20on.20limit/near/260732627) with @adamtopaz.

2022-02-01 18:24:10 ec61182
feat(algebra/group_power): relate square equality and absolute value equality (#11683)

2022-02-01 12:46:25 23e0e29
chore(*): register global fact instances (#11749)
We register globally some fact instances which are necessary for integration or euclidean spaces. And also the fact that 2 and 3 are prime. See https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/euclidean_space.20error/near/269992165

2022-02-01 11:04:30 2508cbd
feat(model_theory/basic.lean): Elementary embeddings and elementary substructures (#11089)
Defines elementary embeddings between structures
Defines when substructures are elementary
Provides lemmas about preservation of realizations of terms and formulas under various maps

2022-02-01 10:02:45 94a700f
chore(set_theory/ordinal_arithmetic): Remove redundant explicit argument (#11757)

2022-02-01 10:02:44 ca2a99d
feat(set_theory/ordinal_arithmetic): Normal functions evaluated at `ω` (#11687)

2022-02-01 09:01:20 cbad62c
feat(set_theory/{ordinal_arithmetic, cardinal_ordinal}): Ordinals aren't a small type (#11756)
We substantially golf and extend some results previously in `cardinal_ordinal.lean`.

2022-02-01 08:32:51 30dcd70
feat(number_theory/cyclotomic/zeta): add lemmas (#11753)
Various lemmas about `zeta`.
From flt-regular.

2022-02-01 07:42:44 350ba8d
feat(data/two_pointing): Two pointings of a type (#11648)
Define `two_pointing α` as the type of two pointings of `α`. This is a Type-valued structure version of `nontrivial`.

2022-02-01 06:40:21 5582d84
feat(ring_theory/localization): fraction rings of algebraic extensions are algebraic (#11717)

2022-02-01 02:13:10 4b9f048
feat(set_theory/principal): Define `principal` ordinals (#11679)
An ordinal `o` is said to be principal or indecomposable under an operation when the set of ordinals less than it is closed under that operation. In standard mathematical usage, this term is almost exclusively used for additive and multiplicative principal ordinals.
For simplicity, we break usual convention and regard 0 as principal.

2022-02-01 00:59:42 e37daad
feat(linear_algebra/sesquilinear_form): Add orthogonality properties (#10992)
Generalize lemmas about orthogonality from bilinear forms to sesquilinear forms.

2022-02-01 00:08:19 b52cb02
feat(analysis/special_functions/{log, pow}): add log_base (#11246)
Adds `real.logb`, the log base `b` of `x`, defined as `log x / log b`. Proves that this is related to `real.rpow`.

2022-01-31 22:22:23 731d93b
feat(group_theory/sylow): the normalizer is self-normalizing (#11638)
with hat tip to Thomas Browning for a proof on Zuplip.

2022-01-31 22:22:22 5964343
feat(data/equiv): define `mul_equiv_class` (#10760)
This PR defines a class of types of multiplicative (additive) equivalences, along the lines of #9888.

2022-01-31 20:42:48 a0bb6ea
feat(algebraic_geometry): Open covers of the fibred product. (#11733)

2022-01-31 20:42:46 6130e57
feat(topology/metric_space/basic): add some lemmas about spheres (#11719)

2022-01-31 20:42:45 ca17a18
feat(algebra/pointwise): introduce `canonically_ordered_comm_semiring` on `set_semiring` ... (#11580)
... assuming multiplication is commutative (there is no `canonically_ordered_`~~comm~~`_semiring` structure).
Also prove the relevant `no_zero_divisors` and `covariant_class` properties of addition and multiplication.

2022-01-31 20:42:43 719b7b0
feat(set_theory/ordinal_arithmetic, set_theory/cardinal_ordinal): `deriv` and `aleph` are enumerators (#10987)
We prove `deriv_eq_enum_fp`, `ord_aleph'_eq_enum_card`, and `ord_aleph_eq_enum_card`.

2022-01-31 19:55:53 750f53c
feat(analysis/seminorm): define the topology induced by a family of seminorms (#11604)
Define the topology induced by a single seminorm and by a family of seminorms and show that boundedness of linear maps implies continuity.

2022-01-31 15:42:13 ccbb848
feat(set_theory/ordinal_arithmetic): `lt_add_of_limit` (#11748)
Both `lt_mul_of_limit` and `lt_opow_of_limit` already existed, so this exclusion is odd to say the least.

2022-01-31 15:42:12 c0be8dc
feat(model_theory/basic): define quotient structures (#11747)
Defines prestructures and quotient structures

2022-01-31 15:42:10 792d3e5
feat(group_theory/order_of_element): pow_eq_pow_iff_modeq (#11737)
From flt-regular.

2022-01-31 15:42:09 76b2a0e
feat(group_theory/nilpotent): abelian iff nilpotency class ≤ 1 (#11718)

2022-01-31 15:42:08 ff02774
feat(algebra/squarefree): norm_num extension for squarefree (#11666)
Adds two methods for computing `squarefree`: an improved algorithm for VM computation of squarefreedom via the `min_sq_fac` function, and a proof procedure which follows the same evaluation strategy as a `norm_num` extension.

2022-01-31 15:42:06 c04daaf
feat(measure_theory): typeclass for measures positive on nonempty opens (#11652)
Add a typeclass for measures positive on nonempty opens, migrate `is(_add?)_haar_measure` to this API.

2022-01-31 15:42:05 d6440a8
feat(group_theory/nilpotent): add lemmas about `G / center G` (#11592)
in particular its nilpotency class and an induction principle based on
that.

2022-01-31 15:42:04 06bb5b6
feat(topology/nhds_set): define neighborhoods of a set (#11520)
* Co-authored by @PatrickMassot
* From the sphere eversion project

2022-01-31 15:42:02 366d13e
feat(scripts/lint_style): Add a check for unfreeze_local_instances (#11509)

2022-01-31 14:14:34 ada43f0
feat(order/hom/complete_lattice): Complete lattice homomorphisms (#11741)
Define frame homs and complete lattice homs using the `fun_like` along with weaker homomorphisms that only preserve `Sup`, `Inf`.

2022-01-31 14:14:32 08fed82
feat(category_theory/preadditive): the Yoneda embedding for preadditive categories (#11740)

2022-01-31 14:14:30 323287e
feat(data/polynomial/reverse): lemmas about evaluating reversed polynomials (#11705)

2022-01-31 14:14:27 bb2b58e
feat(data/{nat,int}/parity): add division lemmas (#11570)
Add lemmas of the form `even n → n / 2 * 2 = n` and `odd n → n / 2 * 2 + 1 = n`

2022-01-31 14:14:26 6e016d2
feat(linear_algebra/{tensor,exterior,clifford}_algebra): these algebras are graded by powers of the submodules of their generators (#11542)
This shows that:
* The tensor and exterior algebras are `nat`-graded algebras, with each grade `n` corresponding to the submodule `(ι R).range ^ n`
* The clifford algebra is a superalgebra (`zmod 2`-graded algebra), with even and odd grades corresponding to even and odd powers of the submodule `(ι Q).range`
Eventually we'll also want to show that the tensor algebra is also graded with pieces in `pi_tensor_prod`, but that's a job for another time.

2022-01-31 12:36:17 45cfb25
refactor(order/bounded_order): Use `is_min`/`is_max` (#11408)
Golf `order.bounded_order` and `data.set.basic` using `is_min`/`is_max`.

2022-01-31 11:21:34 2e1d8d6
feat(ring_theory/roots_of_unity): `fun_like` support (#11735)
- feat(ring_theory/roots_of_unity): ring_hom_class
- oops these could've been monoid homs from the start

2022-01-31 11:21:33 406719e
feat(order/hom/lattice): Composition of lattice homs (#11676)
Define `top_hom.comp`, `bot_hom.comp`, `sup_hom.comp`, `inf_hom.comp`, `lattice_hom.comp`, `bounded_lattice_hom.comp`, `order_hom.to_lattice_hom`.

2022-01-31 09:46:30 16274f6
chore(analysis/inner_product_space/lax_milgram): docs fixes (#11745)
A couple of corrections, and a couple of additions of namespaces to docstrings so that they get hyperlinks when docgen is run.

2022-01-31 09:46:29 4388743
feat(algebra/algebra/basic): add 1-related lemmas for `aut` (#11738)
from flt-regular

2022-01-31 09:46:28 7468d8d
feat(measure_theory/integral/lebesgue): weaken assumptions for with_density lemmas (#11711)
We state more precise versions of some lemmas about the measure `μ.with_density f`, making it possible to remove some assumptions down the road. For instance, the lemma
```lean
  integrable g (μ.with_density f) ↔ integrable (λ x, g x * (f x).to_real) μ
```
currently requires the measurability of `g`, while we can completely remove it with the new lemmas.
We also make `lintegral` irreducible.

2022-01-31 09:46:27 0c0ab69
feat(topology/algebra/continuous_monoid_hom): Add `topological_group` instance (#11707)
This PR proves that continuous monoid homs form a topological group.

2022-01-31 09:46:26 b3ad3f2
feat(data/set/lattice): review (#11672)
* generalize `set.Union_coe_set` and `set.Inter_coe_set` to dependent functions;
* add `bInter_Union`, `sUnion_Union`;
* drop `sUnion_bUnion`, `sInter_bUnion`.

2022-01-31 09:17:53 6319a23
feat(number_theory/cyclotomic): simplify `ne_zero`s (#11715)
For flt-regular.

2022-01-31 07:25:05 8a67cf5
feat(ring_theory/roots_of_unity): turn `is_primitive_root` into a member of `roots_of_unity` (#11739)
from flt-regular

2022-01-31 00:40:09 50cdb95
fix(tactic/suggest): make `library_search` aware of definition of `ne` (#11742)
`library_search` wasn't including results like `¬ a = b` to solve goals like `a ≠ b` and vice-versa.
Closes #3428

2022-01-30 23:01:38 07735b8
fix(tactic/squeeze_simp): "match failed" when `simp` works (#11659)
Closes #11196.

2022-01-30 18:57:22 b0fc10a
chore(ring_theory/polynomial/chebyshev): simplify argument using new `linear_combination` tactic (#11736)
cc @agoldb10 @robertylewis

2022-01-30 15:41:10 97f61df
feat(group_theory/sylow): preimages of sylow groups (#11722)

2022-01-30 14:09:00 02c720e
chore(*): Rename `prod_dvd_prod` (#11734)
In #11693 I introduced the counterpart for `multiset` of `finset.prod_dvd_prod`.  It makes sense for these to have the same name, but there's already a different lemma called `multiset.prod_dvd_prod`, so the new lemma was named `multiset.prod_dvd_prod_of_dvd` instead.  As discussed with @riccardobrasca and @ericrbg at #11693, this PR brings the names of the two counterpart lemmas into alignment, and also renames `multiset.prod_dvd_prod` to something more informative.
Renaming as follows:
`multiset.prod_dvd_prod` to `multiset.prod_dvd_prod_of_le`
`finset.prod_dvd_prod` to `finset.prod_dvd_prod_of_dvd`

2022-01-30 11:14:54 a248bef
feat(data/pnat/basic): 0 < n as a fact (#11729)

2022-01-30 10:31:37 dde904e
chore(ring_theory/localization) weaken hypothesis from field to comm_ring (#11713)
also making `B` an explicit argument

2022-01-30 09:39:36 1ea49d0
feat(tactic/linear_combination): add tactic for combining equations (#11646)
This new tactic attempts to prove a target equation by creating a linear combination of a list of equalities.  The name of this tactic is currently `linear_combination`, but I am open to other possible names.
An example of how to use this tactic is shown below:
```
example (x y : ℤ) (h1 : x*y + 2*x = 1) (h2 : x = y) :
  x*y = -2*y + 1 :=
by linear_combination (h1, 1) (h2, -2)
```

2022-01-30 07:28:22 73e45c6
chore(analysis/normed_space/star): create new folder for normed star rings (#11732)
This PR moves the file `analysis/normed_space/star.lean` to the new folder `analysis/normed_space/star` (where it of course becomes `basic.lean`).
I expect a lot of material about C*-algebras to land in this folder in the (hopefully) near future.

2022-01-30 05:38:03 09d4f48
chore(measure_theory/function/conditional_expectation): fix typo (#11731)

2022-01-30 00:12:37 af1290c
feat(field_theory/ratfunc): rational functions as Laurent series (#11276)

2022-01-29 21:10:10 ff35218
feat(analysis/convex/topology): add lemmas (#11615)

2022-01-29 20:28:18 4085363
feat(number_theory/prime_counting): The prime counting function (#9080)
With an eye to implementing [this proof](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.238002/near/251178921), I am adding a file to define the prime counting function and prove a simple upper bound on it.

2022-01-29 19:47:13 74250a0
chore(representation_theory/maschke): remove recover (#11721)

2022-01-29 14:01:52 49b8b91
feat(data/fintype/order): `bool` is a boolean algebra (#11694)
Provide the `boolean_algebra` instance for `bool` and use the machinery from `data.fintype.order` to deduce `complete_boolean_algebra bool` and `complete_linear_order bool`.

2022-01-29 03:47:21 fc4e471
feat(measure_theory/group/basic): make is_[add|mul]_[left|right]_invariant classes (#11655)
* Simplify the definitions of these classes
* Generalize many results about topological groups to measurable groups (still to do in `group/prod`)
* Simplify some proofs
* Make function argument of `integral_mul_[left|right]_eq_self` explicit (otherwise it is hard to apply this lemma in case the function is not a variable)

2022-01-29 01:17:00 44105f8
feat(analysis/inner_product_space): proof of the Lax Milgram theorem (#11491)
My work on the Lax Milgram theorem, as suggested by @hrmacbeth. Done following the [slides from Peter Howard (Texas A&M University)](https://www.math.tamu.edu/~phoward/m612/s20/elliptic2.pdf).
Closes #10213.

2022-01-29 00:33:42 f51d6bf
chore(ring_theory/polynomial/tower): weaken comm_semiring hypothesis to semiring (#11712)
…to semiring

2022-01-29 00:04:55 601ea91
feat(data/nat/mul_ind): generalise rec_on_prime to assume positivity (#11714)
This makes the multiplicative induction principles slightly stronger, as the coprimality part can assume the given values are positive.

2022-01-28 16:51:38 d58ce5a
feat(number_theory/cyclotomic/zeta): add is_cyclotomic_extension.zeta (#11695)
We add `is_cyclotomic_extension.zeta n A B`: any primitive `n`-th root of unity in a cyclotomic extension.
From flt-regular.

2022-01-28 16:51:36 02c3146
feat(analysis/complex): removable singularity theorem (#11686)

2022-01-28 16:51:34 7e8cb75
refactor(algebra/linear_ordered_comm_group_with_zero, *): mostly take advantage of the new classes for `linear_ordered_comm_group_with_zero` (#7645)
This PR continues the refactor of the `ordered` hierarchy, begun in #7371.
In this iteration, I weakened the assumptions of the lemmas in `ordered_group`.  The bulk of the changes are in the two files
* `algebra/ordered_monoid_lemmas`
* `algebra/ordered_group`
while the remaining files have been edited mostly to accommodate for name/assumption changes.
I have tried to be careful to maintain the **exact** assumptions of each one of the `norm_num` and `linarith` lemmas.  For this reason, some lemmas have a proof that is simply an application of a lemma with weaker assumptions.  The end result is that no lemma whose proof involved a call to `norm_num` or `linarith` broke.

2022-01-28 15:19:21 dddf6eb
feat(data/fintype/order): More and better instances (#11702)
In a fintype, this allows to promote 
* `distrib_lattice` to `complete_distrib_lattice`
* `boolean_algebra` to `complete_boolean_algebra`
Also strengthen
* `fintype.to_order_bot`
* `fintype.to_order_top`
* `fintype.to_bounded_order`
* `complete_linear_order.to_conditionally_complete_linear_order_bot`

2022-01-28 15:19:20 6ca08e8
feat(algebra/ne_zero): add `coe_trans` instance (#11700)
This is super-useful for `flt_regular`, meaning we don't have to write all of our lemmata as `ne_zero ((n : ℕ) : R)`.

2022-01-28 15:19:19 de27bfc
feat(algebra/big_operators/{basic,multiset}): two `multiset.prod` lemmas (#11693)
Two lemmas suggested by Riccardo Brasca on #11572:
`to_finset_prod_dvd_prod`: `S.to_finset.prod id ∣ S.prod`
`prod_dvd_prod_of_dvd`: For any `S : multiset α`, if `∀ a ∈ S, g1 a ∣ g2 a` then `S.prod g1 ∣ S.prod g2` (a counterpart to `finset.prod_dvd_prod`)

2022-01-28 15:19:17 c50a60d
feat(analysis/convex/specific_functions): sin is strictly concave (#11688)

2022-01-28 15:19:16 92c64c4
feat(group_theory/nilpotent): add upper_central_series_eq_top_iff_nilpotency_class_le (#11670)
and the analogue for the lower central series.

2022-01-28 15:19:15 7a485b1
feat(topology/continuous_function/algebra): `C(α, β)` is a topological group (#11665)
This PR proves that `C(α, β)` is a topological group. I had to borrow the fix from #11229 to avoid a diamond.

2022-01-28 15:19:14 113ab32
feat(ring_theory/power_series/basic): API about inv (#11617)
Also rename protected lemmas
`mul_inv`  to `mul_inv_cancel`
`inv_mul` to `inv_mul_cancel`

2022-01-28 15:19:13 36dd6a6
feat(algebra/squarefree): squarefree iff no square irreducible divisors (#11544)

2022-01-28 15:19:11 fb9c5d3
feat(cyclotomic/basic): diverse roots of unity lemmas (#11473)
From flt-regular.

2022-01-28 15:19:10 91a1afb
feat(algebraic_geometry): The function field is the fraction field of stalks (#11129)

2022-01-28 15:19:08 0b6330d
feat(data/finsupp/interval): Finitely supported functions to a locally finite order are locally finite (#10930)
... when the codomain itself is locally finite.
This allows getting rid of `finsupp.Iic_finset`.

2022-01-28 13:31:09 445be96
fix(tactic/squeeze): `squeeze_simp` providing invalid suggestions (#11696)
`squeeze_simp` was previously permuting the lemmas passed to `simp`, which caused failures in cases where the lemma order mattered. The fix is to ensure that `squeeze_simp` does not change the order of passed lemmas.
Closes #3097

2022-01-28 13:31:08 3837abc
feat(data/list/*): subperm_singleton_iff (#11680)

2022-01-28 13:31:06 1e44add
feat(order/filter/countable_Inter): review (#11673)
- drop `_sets` in more names;
- add `filter.of_countable_Inter` and instances for
  `filter.map`/`filter.comap`;
- add docs.

2022-01-28 13:31:05 680733c
feat(order/hom/basic): `compl` as a dual order isomorphism (#11630)

2022-01-28 13:31:04 ff241e1
feat(order/max): Predicate for minimal/maximal elements, typeclass for orders without bottoms (#11618)
This defines
* `is_min`: Predicate for a minimal element
* `is_max`: Predicate for a maximal element
* `no_bot_order`: Predicate for an order without bottoms
* `no_top_order`: Predicate for an order without tops

2022-01-28 13:31:02 2fa5977
feat(category_theory/bicategory/natural_transformation): define oplax natural transformations (#11404)
This PR define oplax natural transformations between oplax functors.
We give a composition and a category structure on oplax natural transformations.

2022-01-28 13:31:00 b9db169
chore(order/locally_finite): fill in finset interval API (#11338)
A bunch of statements about finset intervals, mimicking the set interval API and mostly proved using it. `simp` attributes are  chosen as they were for sets. Also some golf.

2022-01-28 13:03:39 924aab1
feat(ring_theory/polynomial/eisenstein): add miscellaneous results about Eisenstein polynomials (#11697)
Miscellaneous results about Eisenstein polynomials
From flt-regular.

2022-01-28 11:11:22 e290b29
feat(data/quot): add subsingleton instances (#11668)

2022-01-28 08:38:09 bf347f9
feat(algebraic_geometry): Fiber products of schemes (#10605)

2022-01-28 07:26:07 67dcdef
feat(data/mv_polynomial/derivation): derivations of `mv_polynomial`s (#9145)

2022-01-28 06:58:36 6687cf1
feat(group_theory/sylow): `fintype (sylow p H)` from `fintype (sylow p G)` (#11664)
If the number of Sylow `p`-subgroups of `G` is finite, then the number of Sylow `p`-subgroups of `H` is finite.

2022-01-28 03:07:32 f5d63f9
feat(topology/category/Compactum): forget creates limits (#11690)
Will likely be used in LTE.

2022-01-28 00:40:24 24cfb88
chore(set_theory/ordinal_arithmetic): Golf some instances of `lt_irrefl _ h` down to `h.false` (#11699)

2022-01-28 00:40:23 bac0f55
chore(order/conditionally_complete_lattice): move code to a new file (#11698)
This is the first step towards adding a `complete_lattice` instance for `Icc`/`interval`.

2022-01-27 23:05:41 21cea47
feat(analysis/special_functions/log): log of natural power (#11685)
The rpow versions are already present, but the natural/integer versions can also be very helpful (eg for squares).

2022-01-27 23:05:40 79e6cb0
feat(order/succ_pred/relation): `succ`/`pred` inductions on relations (#11518)
* Rename file `order.succ_pred` -> `order.succ_pred.basic`
* Generalize induction principles `succ.rec` and `pred.rec`, make the argument order more "induction-like" and add the attribute `@[elab_as_eliminator]`
* Proof properties about `refl_trans_gen` and `trans_gen` in a `is_succ_archimedean` order.
* Proof some monotonicity properties of closure operations.

2022-01-27 23:05:38 0a721cc
feat(data/nat): a predicate for prime powers (#11313)
Adds a predicate for prime powers, in preparation for defining the von Mangoldt function.
cc @stuart-presnell since you might be needing this material soon, and @jcommelin if you have thoughts about generalising this to rings/UFDs?

2022-01-27 22:03:42 7458476
chore(set_theory/ordinal_arithmetic): golf proof into term mode (#11691)

2022-01-27 20:16:32 02c08d9
doc(polynomial/eval): why map_ring_hom can't replace map (#11537)

2022-01-27 10:01:14 05e1845
feat(archive/100-theorems-list): add proof of the solution of the cubic (#11635)
Gives solution to the cubic equation, based on the cardano's formula. The base field should have cube root of unity and characteristic neither 2 nor 3.

2022-01-27 05:30:47 0844597
feat(set_theory/ordinal_arithmetic): Update header (#11681)
Added definitions from my previous PRs, and made myself an author.

2022-01-27 01:40:11 a6ace8c
feat(set_theory/ordinal_arithmetic): Proved `sup_eq_lsub_iff_lt_sup` (#11660)

2022-01-26 23:35:18 92ee748
chore(analysis/complex/cauchy_integral): use `dslope` to golf a proof (#11675)

2022-01-26 23:35:16 a1e1ffd
feat(order/filter): +1 version of `mem_inf_principal` (#11674)

2022-01-26 23:35:15 52e9fd5
chore(*): don't use tactic internal lemmas in proofs (#11641)
Some lemmas that are intended as internals to a tactic get picked up by library search and end up in proofs.
We replace a few of these tactic lemma uses with actual library lemmas which should be more maintainable, de-coupling tactic internals from the actual library.

2022-01-26 22:45:31 577e3a2
chore(topology/algebra/uniform_group): Remove newline after docstring (#11671)
Yael pointed out that #11662 added an erroneous newline after a docstring. This PR removes that newline.

2022-01-26 20:52:57 946454a
feat(data/nat/factorization): various theorems on factorization and division (#11663)

2022-01-26 20:14:54 97e01cd
feat(group_theory/free_abelian_group_finsupp): various equiv.of_free_*_group lemmas (#11469)
Namely `equiv.of_free_abelian_group_linear_equiv`,
`equiv.of_free_abelian_group_equiv` and `equiv.of_free_group_equiv`

2022-01-26 17:10:48 8fbc009
feat(data/{dfinsupp,finsupp}/basic): `fun_like` instances for `Π₀ i, α i` and `ι →₀ α` (#11667)
This provides the `fun_like` instances for `finsupp` and `dfinsupp` and deprecates the lemmas that are now provided by the `fun_like` API.

2022-01-26 17:10:46 c447a31
feat(algebraic_geometry): Stalk is localization of affine open.  (#11640)

2022-01-26 15:22:43 b8fcac5
feat(data/nat/basic): three small `dvd_iff...` lemmas (#11669)
Three biconditionals for proving `d ∣ n`

2022-01-26 13:30:01 c5a8a81
refactor(topology/algebra/uniform_group): Use `to_additive`. (#11662)
This PR refactors `topology/algebra/uniform_group` to use `to_additive`.

2022-01-26 13:30:00 5472f0a
feat(group_theory/subgroup/basic): add lemmas related to map, comap, normalizer (#11637)
which are useful when `H < K < G` and one needs to move from `subgroup
G` to `subgroup K`

2022-01-26 13:29:59 2b25723
feat(group_theory/sylow): add characteristic_of_normal (#11636)
A normal sylow subgroup is characteristic.

2022-01-26 13:29:58 1a72f88
feat(analysis/inner_product_space/basic): isometries and orthonormal families (#11631)
Add various lemmas and definitions about the action of isometries on
orthonormal families of vectors.  An isometry preserves the property
of being orthonormal; a linear map sending an orthonormal basis to an
orthonormal family is a linear isometry, and a linear equiv sending an
orthonormal basis to an orthonormal family is a linear isometry equiv.
A definition `orthonormal.equiv` is provided that uses `basis.equiv`
to provide a linear isometry equiv mapping a given orthonormal basis
to another given orthonormal basis, and lemmas are provided analogous
to those for `basis.equiv` (`orthonormal.map_equiv` isn't a `simp`
lemma because `simp` can prove it).

2022-01-26 13:29:57 631f339
feat(measure_theory/measure/haar_lebesgue): a density point for closed balls is a density point for rescalings of arbitrary sets (#11620)
Consider a point `x` in a finite-dimensional real vector space with a Haar measure, at which a set `s` has density one, with respect to closed balls (i.e., a Lebesgue density point of `s`). Then `s` has also density one at `x` with respect to any measurable set `t`: the proportion of points in `s` belonging to a rescaled copy `{x} + r • t` of `t` tends to one as `r` tends to zero. In particular, `s ∩ ({x} + r • t)` is nonempty for small enough `r`.

2022-01-26 13:29:54 590b5eb
feat(analysis/seminorm): The norm as a seminorm, balanced and absorbent lemmas (#11487)
This
* defines `norm_seminorm`, the norm as a seminorm. This is useful to translate seminorm lemmas to norm lemmas
* proves many lemmas about `balanced`, `absorbs`, `absorbent`
* generalizes many lemmas about the aforementioned predicates. In particular, `one_le_gauge_of_not_mem` now takes `(star_convex ℝ 0 s) (absorbs ℝ s {x})` instead of `(convex ℝ s) ((0 : E) ∈ s) (is_open s)`. The new `star_convex` lemmas justify that it's a generalization.
* proves `star_convex_zero_iff`
* proves `ne_zero_of_norm_ne_zero` and friends
* makes `x` implicit in `convex.star_convex`
* renames `balanced.univ` to `balanced_univ`

2022-01-26 13:29:53 573ca83
feat(analysis/seminorm): add some lemmas for seminorm balls (#11471)
Add some lemmas for seminorm balls.

2022-01-26 13:29:52 07d8ca6
feat(combinatorics/configuration): Formula for cardinality of a projective plane (#11462)
This PR proves the formula for the cardinality of a projective plane in terms of the order.

2022-01-26 11:53:03 7f0f3f1
feat(algebra/order/hom/monoid): Ordered monoid/group homomorphisms (#11633)
Define
* `order_add_monoid_hom` with notation `→+o`
* `order_monoid_hom` with notation `→*o`
* `order_monoid_with_zero_hom` with notation `→*₀o`
and their corresponding hom classes.
Also add a few missing API lemmas in `algebra.group.hom` and `order.hom.basic`.

2022-01-26 11:25:56 20aae83
feat(order/hom/lattice): Lattice homomorphisms (#11610)
This defines (bounded) lattice homomorphisms using the `fun_like` along with weaker homomorphisms that only preserve `sup`, `inf`, `top`, `bot`.

2022-01-26 10:04:22 09c6ce8
feat(group_theory/subgroup/basic): add normalizer_condition definition (#11587)
and an equivalent formula that is a bit easier to work with.

2022-01-26 09:10:25 c294e4b
feat(topology/*): replace some `a < b` assumptions with `a ≠ b` (#11650)

2022-01-25 23:46:56 20a461f
feat(algebra/big_operators/order): The size of a finset of disjoint finsets is less than the size of its union (#11654)
Prove `card_le_card_bUnion`, its corollary `card_le_card_bUnion_add_card_fiber` where we drop the nonemptiness condition in exchange of a `+` card of the fiber of `∅` on the RHS, and its useful special case `card_le_card_bUnion_add_one`.

2022-01-25 22:24:52 b237af5
refactor(set_theory/ordinal_arithmetic): Rename `lsub_le_iff_lt` to `lsub_le` (#11661)
This way, it directly corresponds to `sup_le`. Ditto for `blsub_le_iff_lt`.

2022-01-25 22:24:51 b0a1812
chore(data/buffer/parser/numeral): fix backticks (#11658)

2022-01-25 22:24:50 033dd3c
feat(analysis/special_functions/complex/circle): `real.angle.exp_map_circle` (#11627)
Add a version of `exp_map_circle` that applies to a `real.angle`
argument.

2022-01-25 22:24:49 f5b11ad
feat(algebra/lie/{nilpotent,of_associative}): a representation of an associative algebra gives a representation of a Lie algebra (#11558)
The lemma `lie_algebra.non_trivial_center_of_is_nilpotent` is unrelated.

2022-01-25 20:59:08 99608cc
feat(group_theory/sub{monoid,group}, linear_algebra/basic): add `supr_induction` for `submonoid`, `add_submonoid`, `subgroup`, `add_subgroup`, and `submodule` (#11556)
This also adds dependent versions, which match the style of the dependent versions of `submodule.span_induction` and `submonoid.closure_induction` in #11555.
Primarily it's the group and module versions that are useful here, as they remove the inv and smul obligations that would appear if using `closure_induction` or `span_induction`.

2022-01-25 20:59:07 25d1341
feat(group_theory/sub{monoid,group}, linear_algebra/basic): remove specialization to subtypes from dependent recursors (#11555)
The following recursors (the first of which was added in #4984) are more generally applicable than to subtypes alone:
* `submonoid.closure_induction'`
* `add_submonoid.closure_induction'`
* `subgroup.closure_induction'`
* `add_subgroup.closure_induction'`
* `submodule.span_induction'`
Now that these live right next to their non-dependent version, there is little need to repeat the docstring.

2022-01-25 20:59:06 7e09827
feat(analysis/inner_product_space/adjoint): matrix and linear map adjoints agree (#11551)

2022-01-25 20:59:04 84f2e93
feat(group_theory/free_abelian_group): add free_abelian_group.basis (#11465)
Although a statement about `free_abelian_group`, it lives in
`free_abelian_group_finsupp` because it uses the isomorphism between
`free_abelian_group X` and `X →₀ ℤ`

2022-01-25 19:51:28 009cec0
feat(set_theory/cardinal_ordinal): Aleph is positive (#11657)

2022-01-25 17:30:28 6184db1
feat(topology/algebra/mul_action2): quotient by a properly discontinuous group action is t2 (#10465)
We prove that the quotient of a Hausdorff (t2) locally compact space by a properly discontinuous group action is itself Hausdorff.

2022-01-25 13:19:58 4d761f4
feat(algebra/group/hom): Notation for `monoid_with_zero_hom` (#11632)
Introduce notation `→*₀` for `monoid_with_zero_hom` and use it everywhere.

2022-01-25 12:25:39 1b3da83
feat(combinatorics/simple_graph/coloring): add inequalities from embeddings (#11548)
Also add a lemma that the chromatic number of an infinite complete graph is zero (i.e., it needs infinitely many colors), as suggested by @arthurpaulino.

2022-01-25 12:25:38 158c0ea
feat(group_theory/abelianization): add abelianization_of_comm_group (#11467)

2022-01-25 10:49:34 494f719
feat(data/fun_like): define `embedding_like` and `equiv_like` (#10759)
These extend `fun_like` with a proof of injectivity resp. an inverse.
The number of new generic lemmas is quite low at the moment, so their use is more in defining derived classes such as `mul_equiv_class`.

2022-01-25 10:04:17 6b32241
feat(model_theory/basic): Terms, formulas, and definable sets (#11067)
Defines first-order terms, formulas, sentences and theories
Defines the boolean algebra of definable sets
(Several of these definitions are based on those from the flypitch project.)

2022-01-25 08:35:58 4883d11
feat(README.md): add Kyle Miller as new maintainer (#11653)

2022-01-25 07:42:56 bf71feb
feat(number_theory/quadratic_reciprocity): generalise legendre_sym to allow integer first argument (#11573)
Talking about the legendre symbol of -1 mod p is quite natural, so we generalize to include this case.
So far in a minimal way without changing any existing lemmas

2022-01-25 07:15:51 f7a597a
feat(group_theory/nilpotent): add nilpotency_class inequalities (#11585)
Every theorem that proves `nilpotency G'` (e.g. for subgroups, images,
preimages) should be accompanied by a lemma relating their
`nilpotency_class`, so add thse lmmeas for subgroups and preimages.
Also add nilpotency lemmas for surjective homomorphisms and quotions,
including nilpotency_class lemmas.

2022-01-25 06:08:03 f278663
feat(README.md): add Frédéric Dupuis as new maintainer (#11651)

2022-01-25 05:11:24 b3cd0e6
chore(order/filter, *): enhancing `filter_upwards` tactic (#11624)

2022-01-25 03:33:34 8cc2ff4
refactor(order/{bounded, rel_classes}): Moved `bounded` into the `set` namespace (#11594)
As per the [Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/bounded.2Emono). Closes #11589.

2022-01-25 03:33:32 b834415
chore(topology/metric_space/gromov_hausdorff): Golf some theorems (#11591)

2022-01-25 03:33:31 88479be
feat(algebra/big_operators/basic): add lemma `finset.prod_dvd_prod` (#11521)
For any `S : finset α`, if `∀ a ∈ S, g1 a ∣ g2 a` then `S.prod g1 ∣ S.prod g2`.

2022-01-25 01:56:07 4f5d6ac
refactor(tactic/interactive): rename tactic.interactive.triv to tactic.interactive.trivial' (#11643)
The difference between `tactic.interactive.trivial` and `tactic.interactive.triv` is that the latter expands only reducible constants; the first uses `tactic.triv` and the latter uses `tactic.triv'`. This name change is to improve consistency.
Also (slipping in a new feature) add `tactic.interactive.triv`, which is the old `tactic.interactive.triv` but does not run `contradiction`. This is useful for teaching.

2022-01-24 22:53:51 0d172ba
feat(README.md): add Riccardo Brasca as new maintainer (#11647)
Add myself as new maintainer and test my superpowers :)

2022-01-24 22:53:50 12fde09
feat(data/finset/finsupp): Finitely supported product of finsets (#11639)
Define
* `finsupp.indicator`: Similar to `finsupp.on_finset` except that it only requires a partially defined function. This is more compatible with `finset.pi`.
* `finset.finsupp : finset ι → (ι → finset α) → finset (ι →₀ α)`: Finitely supported product of finsets.
* `finsupp.pi : (ι →₀ finset α) → finset (ι →₀ α)`: The set of finitely supported functions whose `i`-th value lies in the `i`-th of a given `finset`-valued `finsupp`.

2022-01-24 21:01:29 32052b8
chore(ci): remove working directory on self-hosted (#11645)
Mathlib now takes several gigabytes to build.  This addresses some of the space issues on the CI machines.

2022-01-24 21:01:26 511aa35
feat(algebra/pointwise): add partial order to `set_semiring` (#11567)
This PR introduces the natural inclusion order on sets on `set_semiring`.
[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Ordered.20semirings)

2022-01-24 21:01:25 9e799a0
feat(algebra/pointwise): Scalar multiplication lemmas (#11486)
This proves a bunch of lemmas about pointwise scalar multiplication of sets, moves `has_vsub` to `algebra.group.defs` and pointwise `vsub` lemmas to `algebra.pointwise`.
I'm also adding a few sections because having `{s t : set α}` is nice for multiplication but not for scalar multiplication.

2022-01-24 20:18:07 6aea8ac
chore(probability_theory/stopping): fix names in documentation (#11644)

2022-01-24 18:04:16 1bbed96
doc(tactic/interactive): mention triv uses contradiction (#11502)
Adding the fact that `triv` tries `contradiction` to the docstring for `triv`.

2022-01-24 16:03:59 eccd8dd
feat(algebra/lie/nilpotent): generalise lower central series to start with given Lie submodule (#11625)
The advantage of this approach is that we can regard the terms of the lower central series of a Lie submodule as Lie submodules of the enclosing Lie module.
In particular, this is useful when considering the lower central series of a Lie ideal.

2022-01-24 16:03:56 a631839
feat(analysis/special_functions/pow): add nnreal variant of rpow_pos (#11619)
This matches the lemma for ennreal.

2022-01-24 16:03:55 155c330
feat(analysis/convex/{basic,function}): add lemmas, golf (#11608)
* add `segment_subset_iff`, `open_segment_subset_iff`, use them to golf some proofs;
* add `mem_segment_iff_div`, `mem_open_segment_iff_div`, use the
  former in the proof of `convex_iff_div`;
* move the proof of `mpr` in `convex_on_iff_convex_epigraph` to a new
  lemma;
* prove that the strict epigraph of a convex function include the open
  segment provided that one of the endpoints is in the strong epigraph
  and the other is in the epigraph; use it in the proof of
  `convex_on.convex_strict_epigraph`.

2022-01-24 16:03:53 a52ce83
feat(combinatorics/configuration): The order of a projective plane is at least 2 (#11550)
This PR proves that the order of a projective plane is strictly larger than 1.

2022-01-24 16:03:52 9150268
feat (algebraic_geometry): Constructions of fibred products of schemes (#11450)
This is the first half of the PRs about constructing fibred products of schemes, where we
construct all the relevant schemes and morphisms but yet to show that they are actually
fibred products.

2022-01-24 14:20:36 4a6709b
feat(data/{int,nat}/gcd): add `nat.gcd_greatest` (#11611)
Add lemma characterising `gcd` in `ℕ`, counterpart of `int.gcd_greatest`.  Also add shorter proof of `int.gcd_greatest`.

2022-01-24 14:20:33 bc2f73f
feat(topology/uniform_space/uniform_convergence): Product of `tendsto_uniformly` (#11562)
This PR adds lemmas `tendsto_uniformly_on.prod` and `tendsto_uniformly.prod`.

2022-01-24 12:47:20 f99af7d
chore(data/set/lattice): Generalize more `⋃`/`⋂` lemmas to dependent families (#11516)
The "bounded union" and "bounded intersection" are both instances of nested `⋃`/`⋂`. But they only apply when the inner one runs over a predicate `p : ι → Prop`, and the resulting set couldn't depend on `p`. This generalizes to `κ : ι → Sort*` and allows dependence on `κ i`.
The lemmas are renamed from `bUnion`/`bInter` to `Union₂`/`Inter₂` to show that they are more general. Some generalizations lead to unification problems, so I've kept the `b` version around.
Some lemmas were missing between `⋃` and `⋂` or between `⋃`/`⋂` and nested `⋃`/`⋂`, so I'm adding them as well.
Renames

2022-01-24 12:18:54 ee36571
feat(algebra/lie/cartan_subalgebra): add self-normalizing characterisation for Lie subalgebra (#11598)

2022-01-24 11:34:45 dac4f40
feat(analysis/normed_space/linear_isometry): `to_linear_equiv_trans` (#11628)
Add a lemma relating `trans` for `linear_isometry_equiv` and
`linear_equiv`.

2022-01-24 11:34:44 ed90301
feat(group_theory/commuting_probability): Commuting probability inequalities (#11564)
This PR adds some inequalities for the commuting probability.

2022-01-24 10:02:38 9ef7f6b
feat(linear_algebra/orientation): `eq_neg_iff_eq_neg` (#11629)
Add two more `module.ray` lemmas about negation.

2022-01-24 10:02:37 7ddb9a3
refactor(order/ideal): Generalize definition and lemmas (#11421)
* Generalize the `order_top` instance to `[nonempty P] [is_directed P (≤)]`.
* Delete `order.ideal.ideal_inter_nonempty` in favor of the equivalent condition `is_directed P (swap (≤))`.
* Delete `order.ideal.sup`/`order.ideal.inf` in favor of a direct instance declaration.
* Generalize defs/lemmas from `preorder` to `has_le` or `partial_order` to `preorder`.
* Two more `is_directed` lemmas and instances for `order_bot` and `order_top`.

2022-01-24 10:02:36 9becbc7
feat(algebra/order/rearrangement) : Rearrangement Inequality (#10861)
A range of variants of the rearrangement inequality.
This is stated with scalar multiplication of a linear ring over an additive linear group, rather than having everything be in a linear ring. We couldn't find general statements of the rearrangement inequality in the literature, but this very much seems like an improvement.

2022-01-24 07:24:57 8c64be0
chore(category_theory/abelian): Moved more stuff into `pseudoelement` locale (#11621)
The `ext` lemma triggers unwantedly in lots of places.

2022-01-24 05:54:29 8f73b07
feat(set_theory/surreal/dyadic): define add_monoid_hom structure on dyadic map (#11052)
The proof is mechanical and mostly requires unraveling definitions.
The above map cannot be extended to ring morphism as so far there's not multiplication structure on surreal numbers.

2022-01-24 03:52:26 32cd278
feat(analysis/asymptotics): add a few lemmas (#11623)
* rename `is_o.tendsto_0` to `is_o.tendsto_div_nhds_zero`, add `is_o.tendsto_inv_smul_nhds_zero`;
* add `is_o_const_left` and `filter.is_bounded_under.is_o_sub_self_inv`.

2022-01-24 02:18:18 095c46c
feat(linear_algebra/basis): `reindex_refl` (#11626)
Add a `simp` lemma about applying `basis.reindex` with `equiv.refl`.

2022-01-23 15:43:45 5449ffa
feat(data/nat/prime): factors of non-prime powers (#11546)
Adds the result `pow_factors_to_finset`, fills in `factors_mul_to_finset_of_coprime` for the sake of completion, and adjusts statements to take `ne_zero` rather than pos assumptions.

2022-01-23 13:55:13 59ef8ce
feat(measure_theory/measure): assorted lemmas (#11612)
* add `ae_disjoint_compl_left/right`;
* deduce `restrict_to_measurable` and `restrict_to_measurable_of_sigma_finite` from @sgouezel 's lemmas about measures of intersections;
* add `ae_restrict_mem₀`;
* add `ae_eq_univ`.

2022-01-23 10:59:21 d0f392e
feat(analysis/calculus/inverse): a map which approximates a linear map on a set admits a nice global extension (#11568)
And several other results on maps that are well approximated by linear maps on some subset of the space (not necessarily open).

2022-01-23 07:44:41 b1ad301
feat(number_theory/cyclotomic/basic): add missing lemmas (#11451)
We add some missing lemmas about cyclotomic extensions.
From flt-regular.

2022-01-23 03:26:11 9a517cf
chore(analysis/normed/group/completion): fix attribution (#11614)
This code was written by @jcommelin in #6189 but somehow acquired my name during a refactor (#10055).  I don't think I've ever touched it!

2022-01-23 02:45:45 2babfeb
chore(data/complex/is_R_or_C): squeeze simps (#11251)
This PR squeezes most of the simps in `is_R_or_C`, and updates the module docstring.

2022-01-22 23:39:48 84dbe7b
feat(measure_theory/covering): Lebesgue density points (#11554)
We show in the general context of differentiation of measures that `μ (s ∩ a) / μ a` converges, when `a` shrinks towards a point `x`, to `1` for almost every `x` in `s`, and to `0` for almost every point outside of `s`. In other words, almost every point of `s` is a Lebesgue density points of `s`. Of course, this requires assumptions on allowed sets `a`. We state this in the general context of Vitali families. We also give easier to use versions in spaces with the Besicovitch property (e.g., final dimensional real vector spaces), where one can take for `a` the closed balls centered at `x`.

2022-01-22 22:28:56 a196f9b
chore(measure_theory/probability_mass_function): Move pmf monad operations into a seperate file (#11579)
This PR moves the `pure`, `bind`, and `bind_on_support` operations on `pmf` into a new `probability_mass_function/monad.lean` file.

2022-01-22 22:28:55 31db25b
feat(topology/instances/ennreal): continuity of subtraction on ennreal (#11527)

2022-01-22 20:53:55 159d9ac
split(order/max): Split off `order.basic` (#11603)
This moves `is_bot`, `is_top`, `no_min_order`, `no_max_order` to a new file `order.max`.

2022-01-22 20:00:08 5080d64
feat(topology): add a few lemmas (#11607)
* add `homeomorph.preimage_interior`, `homeomorph.image_interior`,
  reorder lemmas;
* add `is_open.smul₀` and `interior_smul₀`.

2022-01-22 18:38:06 bd3b892
move(order/hom/order): Move from `order.hom.lattice` (#11601)
Rename `order.hom.lattice` into `order.hom.order` to make space for lattice homomorphisms, as opposed to the lattice of order homomorphisms.

2022-01-22 18:38:05 206b56e
doc(group_theory.quotient_group): Fix typos in main statement list (#11581)
This now matches the docstring for the declaration in question.

2022-01-22 18:38:03 155cf1d
feat(group_theory/abelianization): add mul_equiv.abelianization_congr (#11466)

2022-01-22 18:05:24 7ba08d3
fix(category_theory/triangulated): Fix definition of pretriangulated (#11596)
The original definition unfolds to `(T₁ : triangle C) (T₁ ∈ distinguished_triangles) (T₂ : triangle C) (T₁ : triangle C) (e : T₁ ≅ T₂)`, where the two `T₁` are referring to different triangles.

2022-01-22 17:00:41 d1b5165
chore(group_theory/nilpotent): golf some proofs (#11599)

2022-01-22 16:18:02 fbf3c64
chore(analysis/normed_space/star): golf some lemmas (#11600)

2022-01-22 13:06:18 504e1f6
feat(group_theory.nilpotent): add *_central_series_one G 1 = … simp lemmas (#11584)
analogously to the existing `_zero` lemmas

2022-01-22 13:06:17 b630b8c
feat(order/antichain): Strong antichains (#11400)
This introduces a predicate `is_strong_antichain` to state that a set is a strong antichain with respect to a relation.
`s` is a strong (upward) antichain wrt `r` if for all `a ≠ b` in `s` there is some `c` such that `¬ r a c` or `¬ r b c`. A strong downward antichain of the swapped relation.

2022-01-22 12:01:38 0ca7795
feat(algebra/algebra/operations): remove two hypotheses from `submodule.mul_induction_on` (#11533)
`h0 : C 0` followed trivially from `hm 0 _ 0 _`.
`hs : ∀ (r : R) x, C x → C (r • x)` follows nontrivially from an analogy to the `add_submonoid` case.
This also adds:
* a `pow_induction` variant.
* primed variants for when the motive depends on the proof term (such as the proof field in a subtype)

2022-01-21 23:07:46 5e9c0a5
feat(group_theory/subgroup/basic): add center_le_normalizer (#11590)

2022-01-21 22:19:47 d99f2fd
chore(analysis/normed/group/basic): merge `norm` and `semi_norm` lemmas on `prod` and `pi` (#11492)
`norm` and `semi_norm` are the same operator, so there is no need to have two sets of lemmas.
As a result the elaborator needs a few hints for some applications of the `pi` lemmas, but this is par for the course for pi typeclass instances anyway.

2022-01-21 21:34:00 0653975
chore(category_theory/sites): Generalize universes for the comparison lemma. (#11588)

2022-01-21 19:30:19 049d2ac
feat(analysis/fourier): Fourier series for functions in L2; Parseval's identity (#11320)

2022-01-21 15:40:51 9c39019
refactor(src/order/bounded): Invert iff direction (#11582)
That way, `unbounded_gt_iff_unbounded_ge` corresponds to `unbounded_lt_iff_unbounded_le`.

2022-01-21 10:54:30 ca79513
feat(order/bounded): Proved many lemmas about bounded and unbounded sets (#11179)
These include more convenient characterizations of unboundedness in preorders and linear orders, and many results about bounded intervals and initial segments.

2022-01-21 04:46:35 884d813
chore(analysis/inner_product_space/dual): remove unneeded `complete_space` assumption in four lemmas (#11578)
We remove the `[complete_space E]` assumption in four lemmas.

2022-01-21 03:07:37 80e072e
feat(data/finset/basic): random golf (#11576)

2022-01-21 00:16:10 d71cab9
feat(analysis/seminorm): add composition with linear maps (#11477)
This PR defines the composition of seminorms with linear maps and shows that composition is monotone and calculates the seminorm ball of the composition.

2022-01-20 22:45:37 6c97821
feat(group_theory/submonoid/pointwise): add pointwise multiplication to `add_submonoid`s (#11522)

2022-01-20 19:35:50 adadd4a
feat(measure_theory/function/lp_space): some variations of Markov's inequality formulated using `snorm` (#11478)

2022-01-20 18:13:27 8c9074f
chore(*): Remove tactic.unfreeze_local_instances (#11507)

2022-01-20 17:46:05 dfca2b0
feat(data/sym/sym2): add lemma that eq from distinct common members (#11563)
Two terms of type `sym2 a` are equal if one can find two distinct elements of type `a` that are members of both.

2022-01-20 16:52:21 b87449a
feat(group_theory/nilpotent): Add equality theorems for nilpotency class (#11540)
the nilpotency class can be defined as the length of the
upper central series, the lower central series, or as the shortest
length across all ascending or descending series.
In order to use the equivalence proofs between the various definition
of nilpotency in these lemmas, I had to reorder them to put the `∃n` in
front.

2022-01-20 16:01:23 b5e542d
feat(measure_theory/measurable_space): defining a measurable function on countably many pieces (#11532)
Also, remove `open_locale classical` in this file and add decidability assumptions where needed. And add a few isolated useful lemmas.

2022-01-20 15:29:30 1d762c7
feat(ring_theory/{norm.lean, trace.lean}): improve two statements. (#11569)
These statement are more precise.
From flt-regular.

2022-01-20 11:33:03 447928c
feat(topology/uniform_space/uniform_convergence): Composition on the left (#11560)
Composing on the left by a uniformly continuous function preserves uniform convergence.

2022-01-20 10:32:33 5a40c33
feat(analysis/inner_product_space/l2): a Hilbert space is isometrically isomorphic to `ℓ²` (#11255)
Define `orthogonal_family.linear_isometry_equiv`: the isometric isomorphism of a Hilbert space `E` with a Hilbert sum of a family of Hilbert spaces `G i`, induced by individual isometries of each `G i` into `E` whose images are orthogonal and span a dense subset of `E`.
Define a Hilbert basis of `E` to be an isometric isomorphism of `E` with `ℓ²(ι, 𝕜)`, the Hilbert sum of `ι` copies of `𝕜`.  Prove that an orthonormal family of vectors in `E` whose span is dense in `E` has an associated Hilbert basis.
Prove that every Hilbert space admit a Hilbert basis.
Delete three lemmas `maximal_orthonormal_iff_dense_span`, `exists_subset_is_orthonormal_dense_span`, `exists_is_orthonormal_dense_span` which previously expressed this existence theorem in a more awkward way (before the definition `ℓ²(ι, 𝕜)` was available).

2022-01-20 08:57:41 53650a0
feat(*): lemmas about `disjoint` on `set`s and `filter`s (#11549)

2022-01-20 07:43:43 e96e55d
feat(analysis/normed_space/finite_dimension): extending partially defined Lipschitz functions (#11530)
Any Lipschitz function on a subset of a metric space, into a finite-dimensional real vector space, can be extended to a globally defined Lipschitz function (up to worsening slightly the Lipschitz constant).

2022-01-20 02:36:41 0a8848a
chore(topology/uniform_space/uniform_convergence): Golf some proofs (#11561)
This PR golfs a couple proofs.

2022-01-20 00:11:03 656372c
doc(group_theory/free_group): fix linkify (#11565)

2022-01-19 22:49:35 0bb4272
chore(*): to_additive related cleanup (#11559)
A few to_additive related cleanups
* Move measurability before to_additive to avoid having to manually do it later (or forget).
* Ensure anything tagged to_additive, mono has the additive version also mono'd
* Move simp before to_additive

2022-01-19 19:16:21 7ee41aa
feat(data/finsupp/basic): lemmas about map domain with only inj_on hypotheses (#11484)
Also a lemma `sum_update_add` expressing the sum of an update in a monoid in terms of the original sum and the value of the update.
And golf `map_domain_smul`.
From flt-regular.

2022-01-19 17:41:05 bbd0f76
chore(*): clean up comment strings in docstrings (#11557)
The syntax for these was wrong and showed up in doc-gen output unintentionally e.g.
https://leanprover-community.github.io/mathlib_docs/algebra/group/opposite.html#add_monoid_hom.op

2022-01-19 16:05:57 a90f969
feat(data/finset/slice): More `finset.slice` and antichain lemmas (#11397)
Also move `finset.coe_bUnion` to a more sensible location.

2022-01-19 15:39:30 c72e709
feat(data/sum/interval): The disjoint sum of two locally finite orders is locally finite (#11351)
This proves `locally_finite_order (α ⊕ β)` where `α` and `β` are locally finite themselves.

2022-01-19 13:06:48 dbf59ba
feat(algebra/roots_of_unity): basic constructor (#11504)
from flt-regular

2022-01-19 11:58:04 7ddaf10
chore(algebra/algebra): algebra_map_int_eq (#11474)
from flt-regular

2022-01-19 10:24:24 4ad74ae
chore(algebra/order/sub): Generalize to `preorder` and `add_comm_semigroup` (#11463)
This generalizes a bunch of lemmas from `partial_order` to `preorder` and from `add_comm_monoid` to `add_comm_semigroup`.
It also adds `tsub_tsub_le_tsub_add : a - (b - c) ≤ a - b + c`.

2022-01-19 06:53:49 1cfb97d
feat(analysis/normed/group/pointwise): the closed thickening of a compact set is the addition of a closed ball. (#11528)

2022-01-19 06:53:48 ff9b757
feat(category_theory/bicategory/locally_discrete): define locally discrete bicategory (#11402)
This PR defines the locally discrete bicategory on a category.

2022-01-18 21:06:28 6dd6525
feat(measure_theory/measure/measure_space): better definition of to_measurable (#11529)
Currently, `to_measurable μ t` picks a measurable superset of `t` with the same measure. When the measure of `t` is infinite, it is most often useless. This PR adjusts the definition so that, in the case of sigma-finite spaces, `to_measurable μ t` has good properties even when `t` has infinite measure.

2022-01-18 20:38:47 de53f9c
feat(data/nat/factorization): add two convenience lemmas (#11543)
Adds convenience lemmas `prime_of_mem_factorization` and `pos_of_mem_factorization`.
Also adds a different proof of `factorization_prod_pow_eq_self` that doesn't depend on `multiplicative_factorization` and so can appear earlier in the file.

2022-01-18 17:08:36 5a1cbe3
feat(linear_algebra,algebra,group_theory): miscellaneous lemmas linking some additive monoid and module operations (#11525)
This adds:
* `submodule.map_to_add_submonoid`
* `submodule.sup_to_add_submonoid`
* `submodule.supr_to_add_submonoid`
As well as some missing `add_submonoid` lemmas copied from the `submodule` API:
* `add_submonoid.closure_singleton_le_iff_mem`
* `add_submonoid.mem_supr`
* `add_submonoid.supr_eq_closure`
Finally, it generalizes some indices in `supr` and `infi` lemmas from `Type*` to `Sort*`.
This is pre-work for removing a redundant hypothesis from `submodule.mul_induction_on`.

2022-01-18 16:08:17 a0ff65d
feat(ring_theory/norm): add is_integral_norm (#11489)
We add `is_integral_norm`.
From flt-regular

2022-01-18 15:13:28 6f23973
feat(ring_theory/graded_algebra/basic): add a helper for construction from an alg hom (#11541)
Most graded algebras are already equipped with some kind of universal property which gives an easy way to build such an `alg_hom`.
This lemma makes it easier to discharge the associated proof obligations to show that this alg hom forms a decomposition.
This also relaxes a `ring` argument to `semiring`.

2022-01-18 12:22:37 496a744
feat(measure_theory): generalize `null_of_locally_null` to `outer_measure`, add versions (#11535)
* generalize `null_of_locally_null`;
* don't intersect with `s` twice;
* add a contraposed version;
* golf.

2022-01-18 12:22:35 be9a5de
feat(topology/separation): add `t1_space_tfae` (#11534)
Also add some lemmas about `filter.disjoint`.

2022-01-18 12:22:34 135a92d
feat(data/set): two simple lemmas (#11531)

2022-01-18 12:22:32 5bbc187
feat(algebra/lie/nilpotent): a non-trivial nilpotent Lie module has non-trivial maximal trivial submodule (#11515)
The main result is `lie_module.nontrivial_max_triv_of_is_nilpotent`

2022-01-18 10:53:40 a0da4f1
feat(algebra/big_operators/basic): Reindexing a product with a permutation (#11344)
This proves `(∏ x in s, f (σ x)) = ∏ x in s, f x` for a permutation `σ`.

2022-01-18 09:14:43 8d5caba
chore(order/bounded_order): golf (#11538)

2022-01-18 09:14:41 a217b9c
feat(measure_theory): drop some `measurable_set` assumptions (#11536)
* make `exists_subordinate_pairwise_disjoint` work for `null_measurable_set`s;
* use `ae_disjoint` in `measure_Union₀`, drop `measure_Union_of_null_inter`;
* prove `measure_inter_add_diff` for `null_measurable_set`s;
* drop some `measurable_set` assumptions in `measure_union`, `measure_diff`, etc;
* golf.

2022-01-18 09:14:39 f23c00f
chore(algebra/order/ring): move lemmas about invertible into a new file (#11511)
The motivation here is to eventually be able to use the `one_pow` lemma in `algebra.group.units`. This is one very small step in that direction.

2022-01-18 07:45:51 01fa7f5
feat(data/fintype/basic): `one_lt_card_iff` and `two_lt_card_iff` (#11524)
This PR adds `one_lt_card_iff` and `two_lt_card_iff`.

2022-01-18 07:09:41 e895c8f
chore(cone_category): generalize universes (#11539)

2022-01-18 03:54:41 813a191
chore(logic/basic): Make higher `forall_congr`/`exists_congr` lemmas dependent (#11490)
Currently, `forall₂_congr` and friends take as arguments non dependent propositions like `p q : α → β → Prop`. This prevents them being useful virtually anywhere as most often foralls are nested like `∀ a, a ∈ s → ...` and `a ∈ s` depends on `a`.
This PR turns them into `Π a, β a → Prop` (and similar for higher arities).
As a bonus, it adds the `5`-ary version and golfs all occurrences of nested `forall_congr`s.

2022-01-18 00:10:59 99e9036
chore(algebra/algebra/subalgebra): lemmas about top and injectivity (#11514)

2022-01-17 23:42:43 1e4da8d
refactor(linear_algebra/{tensor,exterior}_algebra): convert to a directory (#11513)
These files can be quite slow, so it's useful to be able to add new definitions and lemmas in standalone files, rather than in the same file.
There are a number of open PRs of mine that make this move as part of a new feature, so let's just move them pre-emptively.

2022-01-17 22:39:19 5b36c86
feat(analysis/normed_space/finite_dimension): the determinant is continuous on the space of continuous linear maps (#11526)

2022-01-17 22:11:44 4072512
feat(src/group_theory/nilpotent): solvable_of_nilpotent (#11512)
following the proof on
<https://groupprops.subwiki.org/wiki/Nilpotent_implies_solvable>

2022-01-17 21:04:13 274b530
feat(data/equiv/basic): add `add_equiv.to_int_linear_equiv` (#11456)
as written by @adamtopaz on [zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/injections.20to.20equiv/near/268038978)

2022-01-17 19:54:14 1fbef63
feat(order/filter): add two lemmas (#11519)
Two easy lemmas (from the sphere eversion project) and some minor style changes.

2022-01-17 19:54:13 e096b99
refactor(set_theory/ordinal_arithmetic): Rename `power` to `opow` (#11279)

2022-01-17 19:08:49 2a8a01b
chore(measure_theory/integral/bochner): use set_to_fun lemmas to prove integral properties (#10717)

2022-01-17 15:56:24 905871f
feat(analysis/normed_space/spectrum): an algebra homomorphism into the base field is bounded (#11494)
We prove basic facts about `φ : A →ₐ[𝕜] 𝕜` when `A` is a Banach algebra, namely that `φ` maps elements of `A` to their spectrum, and that `φ` is bounded.

2022-01-17 15:10:20 4e31396
feat(measure_theory/measure): define `ae_disjoint` (#11500)
I am going to migrate most `disjoint` assumptions to `ae_disjoint`.

2022-01-17 14:43:23 50bdb29
feat(analysis/complex/cauchy_integral): review docs, add versions without `off_countable` (#11417)

2022-01-17 11:46:31 391bd21
doc(src/data/equiv/transfer_instances): nontrivial, not nonzero (#11508)
small docs typo, it seems.

2022-01-17 10:14:51 6b475a4
feat(data/finset/basic): `finset.two_lt_card` (#11505)
This PR adds lemmas `finset.two_lt_card` and `finset.two_lt_card_iff`, similar to `finset.one_lt_card` and `finset.one_lt_card_iff`.
These lemmas are also similar to `finset.card_eq_three`.

2022-01-17 10:14:50 079fb16
feat(analysis/special_functions/complex/arg): `arg_neg` lemmas (#11503)
Add lemmas about the value of `arg (-x)`: one each for positive and
negative sign of `x.im`, two `iff` lemmas saying exactly when it's
equal to `arg x - π` or `arg x + π`, and a simpler lemma giving the
value of `(arg (-x) : real.angle)` for any nonzero `x`.
These replace the previous lemmas
`arg_eq_arg_neg_add_pi_of_im_nonneg_of_re_neg` and
`arg_eq_arg_neg_sub_pi_of_im_neg_of_re_neg`, which are strictly less
general (they have a hypothesis `x.re < 0` that's not needed unless
the imaginary part is 0).  Those two lemmas are unused in current
mathlib (they were used in the proof of `cos_arg` before the golfing
in #10365) and it seems reasonable to me to replace them with the more
general lemmas.

2022-01-17 10:14:49 1c56a8d
feat(order/well_founded_set): Antichains in a partial well order are finite (#11286)
and when the relation is reflexive and symmetric, it's actually an equivalent condition.

2022-01-17 08:42:46 0d5bfd7
feat(*): add a few lemmas about `function.extend` (#11498)
I'm going to use `function.extend` as another way to get from
`[encodable ι] (s : ι → set α)` to `t : ℕ → set α` in measure theory.

2022-01-17 08:42:45 9b70cc6
feat(data/equiv/encodable): add a few lemmas (#11497)
* add `simp` lemmas `encodable.encode_inj` and
  `encodable.decode₂_encode`;
* add `encodable.decode₂_eq_some`;
* avoid non-final `simp` in the proof of `encodable.Union_decode₂_disjoint_on`.

2022-01-17 08:42:44 ac76eb3
feat(algebra/star/unitary): lemmas about group_with_zero (#11493)

2022-01-17 08:42:43 a88ae0c
refactor(data/set/lattice): Generalize `mem_bUnion_iff` and `mem_bInter_iff` to dependent families (#11485)
They're now called `mem_Union₂` and `mem_Inter₂`.

2022-01-17 07:55:11 83eff32
feat(topology/metric_space): more lemmas about disjoint balls (#11506)
* drop unused lemmas `metric.ball_disjoint` and
  `metric.ball_disjoint_same`; the former was a duplicate of
  `metric.ball_disjoint_ball`;
* add `metric.closed_ball_disjoint_ball`, `metric.closed_ball_disjoint_closed_ball`.

2022-01-17 07:55:09 2f342b8
feat(measure_theory): generalize some lemmas to `outer_measure` (#11501)

2022-01-17 07:20:57 43bbaee
feat(measure_theory/measure): add lemmas, drop `measurable_set` assumptions (#11499)
* `restrict_eq_self` no longer requires measurability of either set;
* `restrict_apply_self` no longer requires measurability of the set;
* add `restrict_apply_superset` and `restrict_restrict_of_subset` ;
* add `restrict_restrict'` that assumes measurability of the other
  set, drop one `measurable_set` assumption in `restrict_comm`;
* drop measurability assumptions in `restrict_congr_mono`.

2022-01-17 00:42:46 6d19eba
feat(*): add to_sub* lemmas for `map`, `fg` (#11480)
From flt-regular.

2022-01-16 23:52:06 4ed7316
feat(analysis/special_functions/pow): tendsto rpow lemma for ennreals (#11475)

2022-01-16 23:11:56 2c2338e
chore(data/complex/basic): add of_real_eq_one (#11496)

2022-01-16 23:11:54 1f6bbf9
feat(analysis/special_functions/complex/arg): `arg_conj`, `arg_inv` lemmas (#11479)
Add lemmas giving the values of `arg (conj x)` and `arg x⁻¹`, both for
`arg` as a real number and `arg` coerced to `real.angle` (the latter
function being better behaved because it avoids case distinctions
around getting a result into the interval (-π, π]).

2022-01-16 22:44:43 f4b93c8
feat(analysis/special_functions/trigonometric/angle): more 2π = 0 lemmas (#11482)
Add some more lemmas useful for manipulation of `real.angle` expressions.

2022-01-16 22:07:26 ed57bdd
feat(number_field): notation for 𝓞 K, an algebra & ∈ 𝓞 K iff (#11476)
From flt-regular.

2022-01-16 21:15:07 5f5bcd8
feat(order/filter/ultrafilter): add some comap_inf_principal lemmas (#11495)
...in the setting of ultrafilters
These lemmas are useful to prove e.g. that the continuous image of a
compact set is compact in the setting of convergence spaces.

2022-01-16 15:00:06 d7f8f58
feat(algebra/star/unitary): (re)define unitary elements of a star monoid (#11457)
This PR defines `unitary R` for a star monoid `R` as the submonoid containing the elements that satisfy both `star U * U = 1` and `U * star U = 1`. We show basic properties (i.e. that this forms a group) and show that they
preserve the norm when `R` is a C* ring.
Note that this replaces `unitary_submonoid`, which only included the condition `star U * U = 1` -- see [the discussion](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/unitary.20submonoid) on Zulip.

2022-01-16 15:00:04 1d1f384
feat(analysis/calculus/dslope): define dslope (#11432)

2022-01-16 13:30:27 1aee8a8
chore(*): Put `simp` attribute before `to_additive` (#11488)
A few lemmas were tagged in the wrong order. As tags are applied from left to right, `@[to_additive, simp]` only marks the multiplicative lemma as `simp`. The correct order is thus `@[simp, to_additive]`.

2022-01-16 13:30:25 02a4775
refactor(analysis/normed_space): merge `normed_space` and `semi_normed_space` (#8218)
There are no theorems which are true for `[normed_group M] [normed_space R M]` but not `[normed_group M] [semi_normed_space R M]`; so there is about as much value to the `semi_normed_space` / `normed_space` distinction as there was between `module` / `semimodule`. Since we eliminated `semimodule`, we should eliminte `semi_normed_space` too.
This relaxes the typeclass arguments of `normed_space` to make it a drop-in replacement for `semi_normed_space`; or viewed another way, this removes `normed_space` and renames `semi_normed_space` to replace it.
This does the same thing to `normed_algebra` and `seminormed_algebra`, but these are hardly used anyway.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/semi_normed_space.20vs.20normed_space/near/245089933)
As with any typeclass refactor, this randomly breaks elaboration in a few places; presumably, it was able to unify arguments from one particular typeclass path, but not from another. To fix this, some type ascriptions have to be added where previously none were needed. In a few rare cases, the elaborator gets so confused that we have to enter tactic mode to produce a term.
This isn't really a new problem - this PR just makes these issues all visible at once, whereas normally we'd only run into one or two at a time. Optimistically Lean 4 will fix all this, but we won't really know until we try.

2022-01-16 13:03:59 d60541c
feat(analysis/seminorm): Add `has_add` and `has_scalar nnreal` (#11414)
Add instances of `has_add` and `has_scalar nnreal` type classes for `seminorm`.

2022-01-16 09:33:17 3fb5b82
feat(algebra/star/basic): change `star_ring_aut` (notably, complex conjugation) from `ring_equiv` to `ring_hom` and make type argument explicit (#11418)
Change the underlying object notated by `conj` from
```lean
def star_ring_aut [comm_semiring R] [star_ring R] : ring_aut R :=
```
to
```lean
def star_ring_end [comm_semiring R] [star_ring R] : R →+* R :=
```
and also make the `R` argument explicit.  These two changes allow the notation for conjugate-linear maps, `E →ₗ⋆[R] F` and variants, to pretty-print, see
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Pretty.20printer.20omits.20notation
This is a partial reversion of #9640, in which complex conjugation was upgraded from `ring_hom` to `ring_equiv`.

2022-01-15 21:32:40 1a29adc
feat(measure_theory/integral): weaker assumptions on Ioi integrability (#11090)
To show a function is integrable given an `ae_cover` it suffices to show boundedness along a filter, not necessarily convergence. This PR adds these generalisations, and uses them to show the older convergence versions.

2022-01-15 20:09:30 1f266d6
feat(data/pnat/basic): `succ_nat_pred` (#11455)

2022-01-15 18:38:48 0b4f07f
feat(data/set/basic): add singleton_injective (#11464)

2022-01-15 17:32:48 37cf695
feat(measure_theory/integral/set_to_l1): monotonicity properties of set_to_fun (#10714)
We prove that in a `normed_lattice_add_comm_group`, if `T` is such that `0 ≤ T s x` for `0 ≤ x`,  then `set_to_fun μ T` verifies
- `set_to_fun_mono_left (h : ∀ s x, T' s x ≤ T'' s x) : set_to_fun μ T' hT' f ≤ set_to_fun μ T'' hT'' f`
- `set_to_fun_nonneg (hf : 0 ≤ᵐ[μ] f) : 0 ≤ set_to_fun μ T hT f`
- `set_to_fun_mono (hfg : f ≤ᵐ[μ] g) : set_to_fun μ T hT f ≤ set_to_fun μ T hT g`

2022-01-15 15:30:16 51c5a40
feat(analysis/special_functions/trigonometric/angle): `neg_coe_pi` (#11460)
Add the lemma that `-π` and `π` are the same `real.angle` (angle mod 2π).

2022-01-15 14:19:28 ce62dbc
feat(algebra/star/self_adjoint): module instance on self-adjoint elements of a star algebra (#11322)
We put a module instance on `self_adjoint A`, where `A` is a `[star_module R A]` and `R` has a trivial star operation. A new typeclass `[has_trivial_star R]` is created for this purpose with an instance on `ℝ`. This allows us to express the fact that e.g. the space of complex Hermitian matrices is a real vector space.

2022-01-15 10:42:41 0d1d4c9
feat(data/finset/basic): strengthen `finset.nonempty.cons_induction` (#11452)
This change makes it strong enough to be used in three other lemmas.

2022-01-15 09:16:04 ff19c95
chore(algebra/group_power/basic): collect together ring lemmas (#11446)
This reorders the lemmas so that all the ring and comm_ring lemmas can be put in a single section.

2022-01-15 07:39:52 df2d70d
refactor(analysis/inner_product_space/basic): generalize `orthogonal_family` from submodules to maps (#11254)
The old definition of `orthogonal_family` was a predicate on `V : ι → submodule 𝕜 E`, a family of submodules of an inner product space `E`; the new definition is a predicate on 
```lean
{G : ι → Type*} [Π i, inner_product_space 𝕜 (G i)] (V : Π i, G i →ₗᵢ[𝕜] E)
```
a family of inner product spaces and (injective, generally not surjective) isometries of these inner product spaces into `E`.
The new definition subsumes the old definition, but also applies more cleanly to orthonormal sets of vectors.  An orthonormal set `{v : ι → E}` of vectors in `E` induces an `orthogonal_family` of the new style with `G i` chosen to be `𝕜`, for each `i`, and `V i : G i →ₗᵢ[𝕜] E` the map from `𝕜` to the span of `v i` in `E`.
In #11255 we write down the induced isometry from the l2 space `lp G 2` into `E` induced by "summing" all the isometries in an orthogonal family.  This works for either the old definition or the new definition.  But with the old definition, an orthonormal set of vectors induces an isometry from the weird l2 space `lp (λ i, span 𝕜 (v i)) 2` into `E`, whereas with the new definition it induces an isometry from the standard l2 space `lp (λ i, 𝕜) 2` into `E`.  This is much more elegant!

2022-01-15 02:46:13 fa41b7a
feat(topology/algebra/uniform_group): Condition for uniform convergence (#11391)
This PR adds a lemma regarding uniform convergence on a topological group `G`, placed right after the construction of the `uniform_space` structure on `G`.

2022-01-14 21:29:54 323e388
feat(algebraic_geometry): More lemmas about affine schemes and basic open sets (#11449)

2022-01-14 19:02:35 f770d6e
feat(topology/separation): generalize two lemmas (#11454)

2022-01-14 19:02:34 d54375e
feat(data/nat/totient): `totient_even` (#11436)

2022-01-14 17:47:21 49079c1
feat(data/finsupp/basic): add `finset_sum_apply` and `coe_fn_add_hom` (#11423)
`finset_sum_apply`: Given a family of functions `f i : α → ℕ` indexed over `S : finset ι`, the sum of this family over `S` is a function `α → ℕ` whose value at `p : α` is `∑ (i : ι) in S, (f i) p`
`coe_fn_add_monoid_hom`: Coercion from a `finsupp` to a function type is an `add_monoid_hom`. Proved by Alex J. Best

2022-01-14 17:47:19 757eaf4
chore(analysis/calculus/{deriv,mean_value}): use `slope` (#11419)

2022-01-14 17:47:18 653fe45
feat(analysis/seminorm): `semilattice_sup` on seminorms and lemmas about `ball` (#11329)
Define `bot` and the the binary `sup` on seminorms, and some lemmas about the supremum of a finite number of seminorms.
Shows that the unit ball of the supremum is given by the intersection of the unit balls.

2022-01-14 16:49:58 2ce607e
Docs typo in set_theory/cardinal: Wrong type product symbol (#11453)

2022-01-14 15:12:25 d8aed79
chore(analysis/inner_product_space/projection): Speedup `linear_isometry_equiv.reflections_generate_dim_aux` (#11443)
This takes it from around 17s to around 6s on my machine.
IMO using `e * f` instead of `f.trans e` makes this proof a little easier to follow, as then we don't have to translate between the two different spellings mid proof (and `prod` uses the `*` spelling internally)

2022-01-14 15:12:24 22a9f2e
feat(algebra/field/basic): `div_neg_self`, `neg_div_self` (#11438)
I think these two lemmas are useful as `simp` lemmas, but they don't
seem to be there already.

2022-01-14 14:12:17 201aeaa
chore(algebra/char_p): ring_char.eq is better in the other direction, with instances, and explicit arguments (#11439)

2022-01-14 13:04:30 011a599
feat(algebraic_geometry): Gluing morphisms from an open cover. (#11441)

2022-01-14 10:58:50 44351a9
chore(analysis/complex/circle): add to_units and golf (#11435)

2022-01-14 10:58:49 38eb719
feat(data/matrix/notation): relax typeclass assumptions (#11429)

2022-01-14 10:58:47 a861839
feat(ring_theory/discriminant): add discr_mul_is_integral_mem_adjoin (#11396)
We add `discr_mul_is_integral_mem_adjoin`: let `K` be the fraction field of an integrally closed domain `R` and let `L` be a finite
separable extension of `K`. Let `B : power_basis K L` be such that `is_integral R B.gen`. Then for all `z : L` that are integral over `R`, we have `(discr K B.basis) • z ∈ adjoin R ({B.gen} : set L)`.
From flt-regular.

2022-01-14 10:07:46 5a6c13b
feat(algebraic_geometry/open_immersion): Operations on open covers.  (#11442)

2022-01-14 10:07:44 e286012
feat(algebra/ne_zero): `pos_of_ne_zero_coe` (#11437)

2022-01-14 10:07:43 021baae
feat(analysis/normed_space/linear_isometry): coercion injectivity lemmas and add_monoid_hom_class (#11434)
This also registers `linear_isometry` and `linear_isometry_equiv` with `add_monoid_hom_class`.
I found myself wanting one of these while squeezing a simp, so may as well have all of them now.

2022-01-14 10:07:42 61054f7
feat(topology): some improvements (#11424)
* Prove a better version of `continuous_on.comp_fract`. Rename `continuous_on.comp_fract` -> `continuous_on.comp_fract''`.
* Rename `finset.closure_Union` -> `finset.closure_bUnion`
* Add `continuous.congr` and `continuous.subtype_coe`

2022-01-14 08:37:20 3c1740a
feat(combinatorics/configuration): Define the order of a projective plane (#11430)
This PR defines the order of a projective plane, and proves a couple lemmas.

2022-01-14 08:37:18 5a3abca
feat(topology/subset_properties): some compactness properties (#11425)
* Add some lemmas about the existence of compact sets
* Add `is_compact.eventually_forall_of_forall_eventually`
* Some cleanup in `topology/subset_properties` and `topology/separation`

2022-01-14 08:37:17 feaf6f5
feat(algebraic_geometry): lemmas about basic opens in schemes (#11393)

2022-01-14 08:37:16 85accb8
feat(data/{multiset,finset}/sum): Disjoint sum of multisets/finsets (#11355)
This defines the disjoint union of two multisets/finsets as `multiset (α ⊕ β)`/`finset (α ⊕ β)`.

2022-01-14 08:37:15 9a94993
feat(analysis/inner_product_space/l2): Inner product space structure on `l2` (#11315)

2022-01-14 08:37:14 fb2b1a0
fix(algebra/star/basic): redefine `star_ordered_ring` (#11213)
This PR redefines `star_ordered_ring` to remove the `ordered_semiring` assumption, which includes undesirable axioms such as `∀ (a b c : α), a < b → 0 < c → c * a < c * b`. See the discussion on Zulip [here](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Star.20ordered.20ring).

2022-01-14 06:59:50 60c77d4
feat(tactic/lint): include linter name in github output (#11413)

2022-01-14 06:28:53 d248447
feat(algebraic_geometry): Gluing schemes (#11431)

2022-01-13 23:16:00 48fd9f2
chore(data/list/big_operators): rename vars, reorder lemmas (#11433)
* use better variable names;
* move lemmas to proper sections;
* relax `[comm_semiring R]` to `[semiring R]` in `dvd_sum`.

2022-01-13 21:10:22 e830348
feat(set_theory/ordinal_arithmetic): Families of ordinals (#11278)
This PR introduces some API to convert from `ι → β` indexed families to `Π o < b, β` indexed families. This simplifies and contextualizes some existing results.

2022-01-13 20:16:58 6fa2e46
feat(algebra/lie/nilpotent): central extensions of nilpotent Lie modules / algebras are nilpotent (#11422)
The main result is `lie_algebra.nilpotent_of_nilpotent_quotient`.

2022-01-13 19:34:18 432e85e
feat(analysis/normed_space/linear_isometry): add congr_arg and congr_fun (#11428)
Two trivial lemmas that are missing from this bundled morphism but present on most others.
Turns out I didn't actually need these in the branch I created them in, but we should have them anyway.

2022-01-13 19:34:17 8a13846
feat(analysis/mean_inequalities): Hölder's inequality for infinite sums (#11314)
State a few versions of Hölder's inequality for infinite sums.
The specific forms of the inequality chosen are parallel to those for Minkowski's inequality in #10984.

2022-01-13 17:57:13 0504425
feat(analysis/inner_product_space/basic): criterion for summability (#11224)
In a complete inner product space `E`, a family `f` of mutually-orthogonal elements of `E` is summable, if and only if
`(λ i, ∥f i∥ ^ 2)` is summable.

2022-01-13 17:19:26 6446ba8
feat(ring_theory/{trace,norm}): add trace_gen_eq_next_coeff_minpoly and norm_gen_eq_coeff_zero_minpoly  (#11420)
We add `trace_gen_eq_next_coeff_minpoly` and `norm_gen_eq_coeff_zero_minpoly`.
From flt-regular.

2022-01-13 16:52:43 ea9f964
fix(analysis/calculus/fderiv_symmetric): speed up tactic block from 3.6s to 180ms (#11426)
The timings are measured for the single small begin/end block. The proof as a whole is still around 7.6s, down from 11s.
The fault here was likely the `convert`, which presumably spent a lot of time trying to unify typeclass arguments.

2022-01-13 16:52:42 0f79668
feat(measure_theory/function/uniform_integrable): Egorov's theorem (#11328)
This PR proves Egorov's theorem which is necessary for the Vitali convergence theorem which is vital for the martingale convergence theorems.

2022-01-13 15:18:51 a16a5b5
chore(order/lattice_intervals): review (#11416)
* use `@[reducible] protected def`;
* add `is_least.order_bot` and `is_greatest.order_top`, use them;
* weaken TC assumptions on `set.Ici.bounded_order` and `set.Iic.bounded_order`.

2022-01-13 12:25:21 cd4f5c4
feat(linear_algebra/{cross_product,vectors}): cross product (#11181)
Defines the cross product for R^3 and gives localized notation for that and the dot product.
Was https://github.com/leanprover-community/mathlib/pull/10959

2022-01-13 12:25:20 799cdbb
feat(data/nat/periodic): periodic functions for nat (#10888)
Adds a lemma saying that the cardinality of an Ico of length `a` filtered over a periodic predicate of period `a` is the same as the cardinality of `range a` filtered over that predicate.

2022-01-13 12:25:18 6609204
feat(algebraic_geometry): Gluing presheafed spaces (#10269)

2022-01-13 07:08:20 e6db245
chore(ring_theory/roots_of_unity): change argument order (#11415)
this is for easier dot notation in situations such as `refine`.

2022-01-13 07:08:19 0c84456
feat(order,data/set/intervals): lemmas about `is_bot`/`is_top` (#11412)
* add `is_top.Iic_eq`, `is_bot.Ici_eq`, `is_top.Ioi_eq`,
  `is_bot.Iio_eq`, `set.Ioi_top`, `set.Iio_bot`;
* rename `set.Ici_singleton_of_top` and `set.Iic_singleton_of_bot` to
  `is_top.Ici_eq` and `is_bot.Iic_eq`;
* add `is_top_or_exists_gt`, `is_bot_or_exists_lt`, `is_top_top`, and
  `is_bot_bot`;
* add `is_top.to_dual` and `is_bot.to_dual`;
* add `set.empty_ssubset`.

2022-01-13 07:08:17 3f1ac6c
doc(number_theory/cyclotomic/basic): fix docstrings (#11411)

2022-01-13 07:08:16 e839c9a
feat(combinatorics/configuration): Cardinality results for projective plane. (#11406)
This PR proves several cardinality results for projective planes (e.g., number of points = number of lines, number of points on given line = number of lines on given point).
It looks like the `exists_config` (whose sole purpose is to rule out [the 7th example here](https://en.wikipedia.org/wiki/Projective_plane#Degenerate_planes)) can be weakened slightly.

2022-01-13 06:20:13 12b6b99
refactor(linear_algebra/affine_space): move def of `slope` to a new file (#11361)
Also add a few trivial lemmas.

2022-01-13 01:42:28 3fed75a
doc(data/pfun): fix a typo (#11410)

2022-01-13 01:42:26 dfad4c6
fix(data/equiv/set): Fix doc comment syntax (#11409)

2022-01-13 01:42:25 1f370bb
feat(linear_algebra/pi): linear_map.vec_cons and friends (#11343)
The idea of these definitions is to be able to define a map as `x ↦ ![f₁ x, f₂ x, f₃ x]`, where
`f₁ f₂ f₃` are already linear maps, as `f₁.vec_cons $ f₂.vec_cons $ f₃.vec_cons $ vec_empty`.
This adds the same thing for bilinear maps as `x y ↦ ![f₁ x y, f₂ x y, f₃ x y]`.
While the same thing could be achieved using `linear_map.pi ![f₁, f₂, f₃]`, this is not
definitionally equal to the result using `linear_map.vec_cons`, as `fin.cases` and function
application do not commute definitionally.
Versions for when `f₁ f₂ f₃` are bilinear maps are also provided.

2022-01-12 22:49:45 e6fab1d
refactor(order/directed): Make `is_directed` a Prop mixin (#11238)
This turns `directed_order` into a Prop-valued mixin `is_directed`. The design follows the unbundled relation classes found in core Lean.
The current design created obscure problems when showing that a `semilattice_sup` is directed and we couldn't even state that `semilattice_inf` is codirected. Further, it was kind of already used as a mixin, because there was no point inserting it in the hierarchy.

2022-01-12 20:51:38 2a38097
feat(combinatorics/configuration): Define projective planes (#11390)
This PR defines abstract projective planes and their duals. More will be PRed later.

2022-01-12 17:52:39 5e48b21
feat(number_theory/cyclotomic/basic): add cyclotomic_field and cyclotomic_ring (#11383)
We add `cyclotomic_field` and `cyclotomic_ring`, that provide an explicit cyclotomic extension of a given field/ring.
From flt-regular

2022-01-12 17:52:38 fa9d2bf
feat(data/mv_polynomial/variables): add mv_polynomial.total_deg_finset_sum (#11375)
Total degree of a sum of mv_polynomials is less than or equal to the maximum of all their degrees.

2022-01-12 17:52:37 258686f
fix(order/complete_lattice): fix diamond in sup vs max and min vs inf (#11309)
`complete_linear_order` has separate `max` and `sup` fields. There is no need to have both, so this removes one of them by telling the structure compiler to merge the two fields. The same is true of `inf` and `min`.
As well as diamonds being possible in the abstract case, a handful of concrete example of this diamond existed.
`linear_order` instances with default-populated fields were usually to blame.

2022-01-12 16:25:20 975031d
feat(data/nat/factorization): add lemma `factorization_prod` (#11395)
For any `p : ℕ` and any function `g : α → ℕ` that's non-zero on `S : finset α`, the power of `p` in `S.prod g` equals the sum over `x ∈ S` of the powers of `p` in `g x`.
Generalises `factorization_mul`, which is the special case where `S.card = 2` and `g = id`.

2022-01-12 16:25:17 67593dc
fix(tactic/ring_exp): fix normalization proof of unchanged subexpressions (#11394)
When trying to simplify a goal (instead of proving equalities), `ring_exp` will rewrite subexpressions to a normal form, then simplify this normal form by removing extraneous `+ 0`s and `* 1`s. Both steps return a new expression and a proof that the *step*'s input expression equals the output expression.
In some cases where the normal form and simplified form coincide, `ex.simplify` would instead output a proof that *ring_exp*'s input expression equals the output expression, so we'd get a type error in trying to compose a proof that `a = b` with a proof that `a = b`.
This PR fixes that bug by returning instead a proof that `b = b`, as expected.

2022-01-12 13:36:56 aece00a
feat(data/sigma/interval): A disjoint sum of locally finite orders is locally finite (#10929)
This provides `locally_finite_order (Σ i, α i)` in a new file `data.sigma.interval`. This also makes `<` a primitive on `Σ i, α i`.

2022-01-12 11:08:51 e8eb7d9
feat(order/cover): `f a` covers `f b` iff `a` covers `b`  (#11392)
... for order isomorphisms, and also weaker statements.

2022-01-12 10:06:13 912c47d
feat(topology/algebra/continuous_monoid_hom): New file (#11304)
This PR defines continuous monoid homs.

2022-01-12 07:31:06 c1f3f1a
feat(analysis/complex/basic): determinant of `conj_lie` (#11389)
Add lemmas giving the determinant of `conj_lie`, as a linear map and
as a linear equiv, deduced from the corresponding lemmas for `conj_ae`
which is used to define `conj_lie`.  This completes the basic lemmas
about determinants of linear isometries of `ℂ` (which can thus be used
to talk about how those isometries affect orientations), since we also
have `linear_isometry_complex` describing all such isometries in terms
of `rotation` and `conj_lie`.

2022-01-12 07:31:04 72c86c3
chore(algebra/ring/basic): generalize `is_domain.to_cancel_monoid_with_zero` to `no_zero_divisors` (#11387)
This generalization doesn't work for typeclass search as `cancel_monoid_with_zero` implies `no_zero_divisors` which would form a loop, but it can be useful for a `letI` in another proof.
Independent of whether this turns out to be useful, it's nice to show that nontriviality doesn't affect the fact that rings with no zero divisors are cancellative.

2022-01-12 07:31:03 cb1b6d9
feat(algebra/order/floor): adds some missing floor API (#11336)

2022-01-12 07:31:02 bfe9515
feat(data/multiset/basic): add map_count_true_eq_filter_card (#11306)
Add a lemma about counting over a map. Spun off of #10888.

2022-01-12 07:31:00 9fd03e1
chore(order/lexicographic): cleanup (#11299)
Changes include:
* factoring out `prod.lex.trans` from the proof of `le_trans` in `prod.lex.has_le`, and similarly for `antisymm` and `is_total`
* adding some missing `to_lex` annotations in the `prod.lex.{le,lt}_def` lemmas
* avoiding reproving decidability of `prod.lex`
* replacing some proofs with pattern matching to avoid getting type-incorrect goals where `prod.lex.has_le` appears comparing terms that are not of type `lex`.

2022-01-12 07:30:59 deac58a
feat(topology/uniform_space/compact_convergence): when the domain is locally compact, compact convergence is just locally uniform convergence (#11292)
Also, locally uniform convergence is just uniform convergence when the domain is compact.

2022-01-12 07:30:58 2099725
feat(topology/homotopy/product): Product of homotopic paths (#11153)
Specialize homotopy products to paths and prove some theorems about the product of paths.

2022-01-12 05:04:58 15b5e24
feat(data/polynomial/taylor): taylor's formula (#11139)
Via proofs about `hasse_deriv`.
Added some monomial API too.

2022-01-12 04:02:53 af074c8
feat(analysis/normed_space/lp_space): API for `lp.single` (#11307)
Definition and basic properties for `lp.single`, an element of `lp` space supported at one point.

2022-01-12 02:31:11 cdd44cd
refactor(topology/algebra/uniform_group): Use `to_additive` (#11366)
This PR replace the definition
`def topological_add_group.to_uniform_space : uniform_space G :=`
with the definition
`@[to_additive] def topological_group.to_uniform_space : uniform_space G :=`

2022-01-12 00:08:22 89f4786
feat(analysis/special_functions/pow): norm_num extension for rpow (#11382)
Fixes #11374

2022-01-12 00:08:21 647598b
feat(data/nat/factorization): add lemma `factorization_le_iff_dvd` (#11377)
For non-zero `d n : ℕ`, `d.factorization ≤ n.factorization ↔ d ∣ n`

2022-01-11 20:49:16 a5f7909
fix(algebra/tropical/basic): provide explicit min and max (#11380)
This also renames `tropical.add` to `tropical.has_add`, since this matches how we normally do this, and it makes unfolding easier.
Without this change, we have a diamond where `linear_order.min` is not defeq to `lattice.inf`.

2022-01-11 20:49:15 73847ff
feat(algebra/indicator_function): add primed version for `mul_indicator_mul` and `indicator_sub` (#11379)

2022-01-11 20:49:14 d1c4961
feat(data/real/ennreal): add ennreal lemma for `a / 3 + a / 3 + a / 3 = a`  (#11378)

2022-01-11 20:49:13 57a8933
feat(group_theory/free_group): promote free_group_congr to a mul_equiv (#11373)
Also some various golfs and cleanups

2022-01-11 20:49:12 8db96a8
feat(combinatorics/double_counting): Double-counting the edges of a bipartite graph (#11372)
This proves a classic of double-counting arguments: If each element of the `|α|` elements on the left is connected to at least `m` elements on the right and each of the `|β|` elements on the right is connected to at most `n` elements on the left, then `|α| * m ≤ |β| * n` because the LHS is less than the number of edges which is less than the RHS.
This is put in a new file `combinatorics.double_counting` with the idea that we could gather double counting arguments here, much as is done with `combinatorics.pigeonhole`.

2022-01-11 20:49:11 93e7741
feat(ring_theory/witt_vector): Witt vectors over a domain are a domain (#11346)

2022-01-11 20:49:09 83b0355
feat(analysis/complex/isometry): `rotation` matrix representation and determinant (#11339)
Add lemmas giving the matrix representation of `rotation` (with
respect to `basis_one_I`), and its determinant (both as a linear map
and as a linear equiv).  This is preparation for doing things about
how isometries affect orientations.

2022-01-11 20:49:08 e4a41e6
feat(data/complex/module,data/complex/determinant): `conj_ae` matrix representation and determinant (#11337)
Add lemmas giving the matrix representation of `conj_ae` (with respect
to `basis_one_I`), and its determinant (both as a linear map and as a
linear equiv).  This is preparation for doing things about how
isometries affect orientations (so it's actually `conj_lie` I'm
interested in, but `conj_lie` is defined in terms of `conj_ae` so
proving things first for `conj_ae` seems appropriate).

2022-01-11 20:49:07 aa7a439
feat(algebra/*): injective hom into kernel `map_eq_*_iff` (#11275)

2022-01-11 20:49:06 94fd004
feat(order/minimal): Subset of minimal/maximal elements (#11268)
This defines `minimals r s`/`maximals r s` the minimal/maximal elements of `s` with respect to relation `r`.

2022-01-11 20:49:04 490847e
feat(data/polynomial/degree/lemmas): add induction principle for non-constant polynomials (#8463)
This PR introduces an induction principle to prove that a property holds for non-constant polynomials.  It suffices to check that the property holds for
* the sum of a constant polynomial and any polynomial for which the property holds;
* the sum of any two polynomials for which the property holds;
* for non-constant monomials.
I plan to use this to show that polynomials with coefficients in `ℕ` are monotone.

2022-01-11 17:36:45 b710771
chore(*): update to 3.38.0c (#11371)

2022-01-11 13:55:35 b8d2aff
refactor(ring_theory/discriminant): refactor discr_not_zero_of_linear_independent (#11370)
`(hcard : fintype.card ι = finite_dimensional.finrank K L) (hli : linear_independent K b)` is better expressed as `b : basis ι K L`.

2022-01-11 13:55:34 380e28e
chore(set_theory/ordinal_arithmetic): Golfed some proofs (#11369)

2022-01-11 13:55:33 2963d7c
feat(analysis/asymptotics/asymptotics): add `is_bounded_under.is_O_const` (#11367)

2022-01-11 13:55:32 8f5303a
refactor(topology/connected): drop `local attribute [instance] connected_component_setoid` (#11365)
Add a coercion from `X` to `connected_components X` instead.

2022-01-11 13:55:30 c1c0fa4
feat(analysis/calculus/{f,}deriv): add some `iff` lemmas (#11363)

2022-01-11 13:55:28 02181c7
feat(algebra/group/conj): `conj_classes.map` preserves surjectivity (#11362)
If `f : α →* β` is surjective, then so is `conj_classes.map f : conj_classes α → conj_classes β`.

2022-01-11 13:55:13 c94a17c
feat(topology): a few simple lemmas (#11360)

2022-01-11 13:55:12 56d6a91
chore(order/basic): Rename `no_bot_order`/`no_top_order` to `no_min_order`/`no_max_order` (#11357)
because that's really what they are.
`∀ a, ∃ b, b < a` precisely means that every `a` is not a minimal element. The correct statement for an order without bottom elements is `∀ a, ∃ b, ¬ a ≤ b`, which is a weaker condition in general. Both conditions are equivalent over a linear order.
Renames
* `no_bot_order` -> `no_min_order`
* `no_top_order` -> `no_max_order`
* `no_bot` -> `exists_lt`
* `no_top` -> `exists_gt`

2022-01-11 13:55:09 be4c5aa
feat(scripts/lint_mathlib): implement github annotations for mathlib linters (#11345)
Resolves the last part of #5863
This causes `lean --run lint_mathlib --github` to produce error messages understood by github actions, which will tag the lines causing linter failures with annotations in the files changed tab

2022-01-11 13:55:08 e138d3b
feat(algebra/big_operators/finprod): `finprod_eq_one_of_forall_eq_one` (#11335)

2022-01-11 13:55:07 eb9c152
feat(algebra/order/field): lemmas relating `a / b` and `a` when `1 ≤ b` and `1 < b` (#11333)
This PR is a collection of items that https://github.com/leanprover-community/mathlib/pull/7891 adds in and that aren't declared on `master` yet. Please let me know if I overlooked something.
After merging it, https://github.com/leanprover-community/mathlib/pull/7891 can theoretically be closed.

2022-01-11 13:55:05 2865d8c
refactor(data/set/prod): add notation class for set-like product (#11300)
This PR adds notation class `has_set_prod` for product of sets and subobjects. I also add an instance for `set`s. Later I want to migrate `finset`s and `sub*` product to this notation class.

2022-01-11 13:55:04 3cd9088
feat(ring_theory/polynomial/cyclotomic/basic): add lemmas  (#11266)
From flt-regular.

2022-01-11 13:55:02 4ac13d9
feat(data/dfinsupp/interval): Finitely supported dependent functions to locally finite orders are locally finite (#11175)
This provides the ` locally_finite_order` instance for `Π₀ i, α i` in a new file `data.dfinsupp.interval`.

2022-01-11 11:13:20 40b6b45
feat(category_theory): `Cat` is a strict bicategory (#11348)
This PR defines a bicategory structure on `Cat`. This also introduces the propositional type class `bicategory.strict`, and proves that `Cat` is an instance of this class.

2022-01-11 11:13:19 a4052f9
feat(ring_theory/hahn_series): order_pow (#11334)
Generalize to have `no_zero_divisors (hahn_series Γ R)`,
which generalizes `order_mul`.
Also provide `coeff_eq_zero_of_lt_order`.

2022-01-11 11:13:18 90ba054
feat(algebraic_geometry): Define the category of `AffineScheme`s (#11326)

2022-01-11 11:13:17 c03bd32
feat(analysis/normed_space/star): add lemmas about continuity and norm of identity (#11324)

2022-01-11 11:13:16 ebbc973
feat(data/mv_polynomial): assorted mv_polynomial and finsupp lemmas (#11319)
Mostly around total degree, supports and homogeneous components.
From flt-regular.

2022-01-11 11:13:15 c500b99
feat(ring_theory/laurent): coe from R[[x]] to R((x)) (#11318)
And actually the changes reported in #11295
Generalize `power_series.coeff_smul`

2022-01-11 11:13:14 be594eb
feat(linear_algebra/finite_dimensional): Define rank of set of vectors (#11290)
Added in the definition of "rank of a set of vectors" and a useful lemma about the rank when one set is a subset of the other.
Read the zulip stream here: https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/First.20Time.20Contributing

2022-01-11 11:13:13 b7f8f72
feat(category_theory/bicategory/functor): define oplax functors and their composition (#11277)
This PR defines oplax functors between bicategories and their composition.

2022-01-11 11:13:11 624cb70
feat(set_theory/ordinal_arithmetic): Extra lemmas about suprema (#11178)
Proved lemmas pertaining to when suprema or least strict upper bounds are zero.

2022-01-11 08:13:33 de9944b
refactor(analysis/complex/circle): The circle group is commutative (#11368)
This PR upgrades the `group circle` instance to a `comm_group circle` instance.

2022-01-11 08:13:31 e8839a3
refactor(logic/small, *): Infer `f : α → β` when followed by a simple condition on `f` (#11037)

2022-01-11 02:45:39 89bff5e
feat(algebra/big_operators): add product versions of some sum lemmas (#11358)
and to_additive to get the old ones back

2022-01-11 02:45:38 d8a75bd
chore(simple_graph/basic): Fix typo in docstring: adjacent vertices, not edges (#11356)

2022-01-10 23:30:59 8910f6d
feat(ring_theory/discriminant): remove an assumption (#11359)
We remove a `nonempty` assumption.

2022-01-10 23:30:58 fd51bda
feat(analysis/normed_space/linear_isometry): basis ext lemmas (#11331)
Add lemmas that two linear isometries / linear isometric equivalences
are equal if they are equal on basis vectors, similar to such lemmas
for equality on basis vectors of other kinds of maps.

2022-01-10 23:30:57 3b55b94
feat(analysis/inner_product_space/basic): inner products of linear combinations of orthonormal vectors (#11323)
There are some lemmas about the inner product of a linear combination
of orthonormal vectors with one vector from that orthonormal family.
Add similar lemmas where both sides of the inner product are linear
combinations.

2022-01-10 23:30:55 fd52481
feat(group_theory/abelianization): Add fintype instance (#11302)
Adds `fintype` instance for `abelianization`.

2022-01-10 23:30:54 2642c89
feat(analysis/inner_product_space/orientation): orientations of real inner product spaces (#11269)
Add definitions and lemmas relating to orientations of real inner
product spaces, in particular constructing an orthonormal basis with a
given orientation in finite positive dimension.
This is in a new file since nothing else about inner product spaces
needs to depend on orientations.

2022-01-10 23:30:52 4e7e5a6
feat(set_theory/ordinal_arithmetic): Enumerating unbounded sets of ordinals with ordinals (#10979)
This PR introduces `enum_ord`, which enumerates an unbounded set of ordinals using ordinals. This is used to build an explicit order isomorphism `enum_ord.order_iso`.

2022-01-10 23:30:51 8e92af1
feat(algebra/associated): add lemmas to split #9345 (#10941)
This PR contains lemmas from PR [#9345](https://github.com/leanprover-community/mathlib/pull/9345), which was starting to get quite lengthy.

2022-01-10 23:30:50 4bf4859
feat(data/finsupp/pointwise): add a definition of the pointwise action of functions on finsupps (#10933)
I couldn't find this, and it seems like quite a natural way to talk about multiplying functions with finsupps.
I'm not sure what additional lemmas would be useful yet, as I don't have a particular application in mind at present so suggestions/additions are welcome

2022-01-10 19:54:28 2e003c9
feat(data/set/basic): add decidable instances for boolean operations (#11354)
Add decidability instances for `a ∈ s ∩ t`, etc.

2022-01-10 19:54:26 427e5b5
feat(data/nat/factorization): Evaluating a multiplicative function over prime power divisors (#11167)
For any multiplicative function `f` with `f 1 = 1` and any `n > 0`, we can evaluate `f n` by evaluating `f` at `p ^ k` over the factorization of `n`.
Also provides an alternative version that swaps the `0 < n` condition for an extra `f 0 = 1` condition, as suggested by @ericrbg. 
This allows a very simple proof that `n.factorization.prod pow = n`

2022-01-10 16:17:20 dc3cbb7
feat(data/polynomial/erase_lead): introduce two lemmas to compute `nat_degree`s under certain maps (#11265)
This PR is a step in the direction of simplifying #11139.
It contains a proof of the helper lemmas `map_nat_degree_eq_sub` and `map_nat_degree_eq_nat_degree` to shorten the proof of `nat_degree_hasse_deriv` and `nat_degree_taylor`.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.2311139.20taylor.20sum.20and.20nat_degree_taylor)

2022-01-10 16:17:19 168ad7f
feat(data/nat/cast): generalize to `fun_like` (#11128)

2022-01-10 13:08:00 1533f15
feat(logic/basic): add eq_true_eq_id (#11341)
Adds the simp lemma `eq_true_eq_id : eq true = id`, a sort of curried version of `eq_true : (a = true) = a` in core.

2022-01-10 13:07:59 fabc510
feat(linear_algebra/determinant): `linear_equiv.det_conj` (#11340)
Add a version of the `linear_map.det_conj` lemma for `linear_equiv.det`.

2022-01-10 13:07:57 48b21e5
feat(probability_theory/martingale): one direction of the optional stopping theorem (#11007)

2022-01-10 10:18:16 7782157
feat (data/finset/lattice): add more finset induction lemmas (#10889)
2 more finset induction lemmas based on the order imposed by a function.

2022-01-10 01:23:46 99fe7ac
chore(data/set/function): move inv_fun_on out of `logic/function/basic` (#11330)
This removes `function.inv_fun_on_eq'` as it is a duplicate of `inj_on.left_inv_on_inv_fun_on`.

2022-01-09 23:15:30 6a10939
fix(docs/references.bib): syntax error (#11342)
This broke the docs build.

2022-01-09 21:08:06 ce17b65
feat(topology/algebra/monoid): to_additivize some lemmas (#11310)
Uncomment a commented out to additive line that looks like its been there
for 3 years (since
https://github.com/leanprover-community/mathlib/commit/581cf19bf1885ef874c39c9902a93f579bc8c22d)
The changes to to_additive in the past few years now make the
generated lemma useful.
Also to_additivize a bunch of other lemmas in this file.

2022-01-09 18:06:11 d13b3a4
chore(*): update to 3.37.0c (#11325)
the major breaking change this version is making `default`'s parameters
implicit, as opposed to explicit. there was also some slight "free"
golfing due to the better `out_param` simp support.

2022-01-09 18:06:09 47a8d5a
refactor(data/{sigma,psigma}/order): Use `lex` synonym and new notation (#11235)
This introduces notations `Σₗ i, α i` and `Σₗ' i, α i` for `lex (Σ i, α i)` and `lex (Σ' i, α i)` and use them instead of the instance switch with locale `lex`.

2022-01-09 16:18:25 2bb25f0
feat(algebra/periodic): lifting to function on quotient group (#11321)
I want to make more use of the type `real.angle` in
`analysis.special_functions.trigonometric.angle`, including defining
functions from this type in terms of periodic functions from `ℝ`.  To
support defining such functions, add a definition `periodic.lift` that
lifts a periodic function from `α` to a function from
`α ⧸ (add_subgroup.zmultiples c)`, along with a lemma
`periodic.lift_coe` about the values of the resulting function.

2022-01-09 16:18:24 49ba33e
feat(vscode): add a snippet for inserting a module docstring template (#11312)
We already have a vscode snippet for adding copyright headers, this PR adds a similar one to generate a default module docstring with many of the common sections stubbed out.
By default it takes the filename, converts underscores to spaces and capitalizes each word to create the title, as this seems a sensible default. But otherwise all text is a static default example following the documentation style page to make it easier to remember the various recommended secitons.
To test do `ctrl+shift+p` to open the command pallette, type insert snippet, enter, and type module and it should show up.
See also #3186

2022-01-09 16:18:23 fadbd95
feat(field_theory/ratfunc): ratfunc.lift_on without is_domain (#11227)
We might want to state results about rational functions without assuming
that the base ring is an integral domain.
Cf. Misconceptions about $K_X$, Kleiman, Steven; Stacks01X1

2022-01-09 13:09:57 9c224ff
split(data/set/functor): Split off `data.set.lattice` (#11327)
This moves the functor structure of `set` in a new file `data.set.functor`.
Also adds `alternative set` because it's quick and easy.

2022-01-09 07:58:15 ad4ea53
chore(*): miscellaneous to_additive related cleanup (#11316)
A few cleanup changes related to to_additive:
* After https://github.com/leanprover-community/lean/pull/618 was merged, we no longer need to add namespaces manually in filtered_colimits and open subgroup
* to_additive can now generate some more lemmas in big_operators/fin
* to_additive now handles a proof in measure/haar better than it used to
  so remove a workaround there

2022-01-09 06:06:07 ca5e55c
feat(linear_algebra/basis): `basis.ext`, `basis.ext'` for semilinear maps (#11317)
Extend `basis.ext` and `basis.ext'` to apply to the general
(semilinear) case of `linear_map` and `linear_equiv`.

2022-01-09 03:54:54 a58553d
feat(data/nat/factorization): Add lemmas on factorizations of pairs of coprime numbers (#10850)

2022-01-09 01:21:32 d4846b3
chore(ring_theory/fractional_ideal): fix typo (#11311)

2022-01-08 23:10:53 22ff4eb
feat(combinatorics/simple_graph/matchings): even_card_vertices_of_perfect_matching (#11083)

2022-01-08 21:54:48 0a75fdf
feat(linear_algebra/eigenspace): prove eigenvalues are exactly elements of the spectrum when the space is finite dimensional (#10961)
This adds `has_eigenvalue_iff_mem_spectrum` and then uses it to golf `exists_eigenvalue`
- [x] depends on: #10912 
- [x] depends on: #10919

2022-01-08 18:36:59 ee136d9
chore(set_theory/game/domineering): extract repeated goal into lemma and golf (#11298)
`fst_pred_mem_erase_of_mem_right` and `snd_pred_mem_erase_of_mem_left` were common subgoals that appeared in two lemmas each.

2022-01-08 18:36:57 84dbe31
feat(topology/basic): add explicit definition of continuous_at (#11296)
This was convenient in a demo.

2022-01-08 18:36:56 25704ca
docs(algebra/covariant_and_contravariant): minor typos (#11293)

2022-01-08 18:36:54 09f6989
chore(analysis/normed_space/banach): move more to the `continuous_linear_map` NS (#11263)
## Rename
* `open_mapping` → `continuous_linear_map.is_open_map`;
* `open_mapping_affine` → `affine_map.is_open_map`;
### New lemmas
* `continuous_linear_map.quotient_map`,
* `continuous_linear_map.interior_preimage`,
* `continuous_linear_map.closure_preimage`,
* `continuous_linear_map.frontier_preimage`.

2022-01-08 18:36:52 60e279b
chore(*): update to lean 3.36.0 (#11253)
The main breaking change is the change in elaboration of double membership binders into x hx y hy, from x y hx hy.

2022-01-08 16:29:06 dd1242d
feat(algebra/associated): generalize nat.prime.pow_dvd_of_dvd_mul_{left,right} (#11301)

2022-01-08 16:29:05 c76e113
feat(ring_theory/laurent): coercion of R[x] to R((x)) lemmas (#11295)
Make the coercion be `simp`-normal as opposed to `(algebra_map _ _)`.
Also generalize `of_power_series Γ R (power_series.C R r) = hahn_series.C r` and similarly for `X` to be true for any `[ordered semiring Γ]`, not just `ℤ`.

2022-01-08 16:29:04 1162509
chore(data/fin/vec_notation): generalize smul_cons (#11285)

2022-01-08 16:29:01 56f021a
feat(data/polynomial/{erase_lead + denoms_clearable}): strengthen a lemma (#11257)
This PR is a step in the direction of simplifying #11139 .
It strengthens lemma `induction_with_nat_degree_le` by showing that restriction can be strengthened on one of the assumptions.
~~It proves a lemma computing the `nat_degree` under functions on polynomials that include the shift of a variable.~~
EDIT: the lemma was moved to the later PR #11265.
It fixes the unique use of lemma `induction_with_nat_degree_le`.
[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.2311139.20taylor.20sum.20and.20nat_degree_taylor)

2022-01-08 16:28:59 b181a12
refactor(combinatorics/quiver): split into several files (#11006)
This PR splits `combinatorics/quiver.lean` into several files. The main reason for this is to ensure that the category theory library only imports the necessary definitions (and not for example the stuff on arborescences).
Also adds some more documentation, and fixes a bug in the definition of weakly connected components.

2022-01-08 16:28:58 9b3fec5
feat(algebraic_geometry): Gamma-Spec adjunction (#9802)
Define the adjunction between the functors Gamma (global sections) and Spec (to LocallyRingedSpace).
I'm currently working on a more general version in http://arxiv.org/pdf/1103.2139.pdf (Theorem 2), which may require refactoring `structure_sheaf` and `Spec`.

2022-01-08 15:04:37 b1955dc
feat(data/matrix/basic): infix notation for matrix.dot_product in locale matrix (#11289)
I created an infix notation for `matrix.dot_product` in locale `matrix`. The notation was consulted with @eric-wieser in #11181.

2022-01-08 15:04:36 4304127
feat(ring_theory/power_series): teach simp to simplify more coercions of polynomials  to power series (#11287)
So that simp can prove that the polynomial `5 * X^2 + X + 1` coerced to a power series is the same thing with the power series generator `X`. Likewise for `mv_power_series`.

2022-01-08 15:04:35 e871386
feat(number_theory/cyclotomic/basic): add lemmas (#11264)
From flt-regular.

2022-01-08 15:04:33 c7fa66e
feat(data/nat/prime): power to factor count divides natural (#11226)

2022-01-08 15:04:32 4d79d5f
chore(measure_theory/group/arithmetic): use implicit argument for measurable_space (#11205)
The `measurable_space` argument is inferred from other arguments (like `measurable f` or a measure for example) instead of being a type class. This ensures that the lemmas are usable without `@` when several measurable space structures are used for the same type.
Also use more `variables`.

2022-01-08 14:24:00 2231173
feat(group_theory/commuting_probability): New file (#11243)
This PR introduces commuting probabilities of finite groups.

2022-01-08 07:22:54 07f9b8e
feat(data/sum/order): Linear and disjoint sums of orders (#11157)
This defines the disjoint sum of two orders on `α ⊕ β` and the linear (aka lexicographic) sum of two orders on `α ⊕ₗ β` (a type synonym of `α ⊕ β`) in a new file `data.sum.order`.

2022-01-08 00:14:42 303e77c
feat(topology/metric_space/hausdorff_distance): make iffs (#11288)
* Make `exists_edist_lt_of_inf_edist_lt` and `exists_dist_lt_of_inf_edist_lt` iffs. Rename to `inf_[e]dist_lt_iff`.
* Simplify some proofs

2022-01-07 18:21:53 5cbfddd
feat(data/finset/sym): Symmetric powers of a finset (#11142)
This defines `finset.sym` and `finset.sym2`, which are the `finset` analogs of `sym` and `sym2`, in a new file `data.finset.sym`.

2022-01-07 18:21:52 a8d37c1
feat(data/nat/factorization): Defining `factorization` (#10540)
Defining `factorization` as a `finsupp`, as discussed in
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Prime.20factorizations
and 
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Proof.20of.20Euler's.20product.20formula.20for.20totient
This is the first of a series of PRs to build up the infrastructure needed for the proof of Euler's product formula for the totient function.

2022-01-07 18:21:50 3b02ad7
feat(topology/homotopy/equiv): Add homotopy equivalences between topological spaces (#10529)

2022-01-07 16:25:53 13e99c7
feat(algebra,linear_algebra,ring_theory): more is_central_scalar instances (#11297)
This provides new transitive scalar actions:
* on `lie_submodule R L M` that match the actions on `submodule R M`
* on quotients by `lie_submodule R L M` that match the actions on quotients by `submodule R M`
The rest of the instances in this PR live in `Prop` so do not define any further actions.
This also fixes some overly verbose instance names.

2022-01-07 16:25:52 b8f5d0a
chore(category_theory/abelian/basic): abelian categories have finite limits and finite colimits. (#11271)

2022-01-07 14:24:20 b430316
chore(topology/algebra/module/basic): add continuous_linear_map.is_central_scalar (#11291)

2022-01-07 14:24:17 3b7a783
feat(topology/*): Gluing topological spaces (#9864)

2022-01-07 12:43:41 6fb638b
feat(*): add lemmas, golf (#11294)
### New lemmas
* `function.mul_support_nonempty_iff` and `function.support_nonempty_iff`;
* `set.infinite_union`;
* `nat.exists_subseq_of_forall_mem_union` (to be used in an upcoming mass golfing of `is_pwo`/`is_wf`);
* `hahn_series.coeff_inj`, `hahn_series.coeff_injective`, `hahn_series.coeff_fun_eq_zero_iff`, `hahn_series.support_eq_empty_iff`;
* `nat.coe_order_embedding_of_set` (`simp` + `rfl`);
* `nat.subtype.of_nat_range`, `nat.subtype.coe_comp_of_nat_range`.
### Golfed proofs
* `set.countable.prod`;
*  `nat.order_embedding_of_set_range`;
*  `hahn-series.support_nonempty_iff`;
### Renamed
* `set.finite.union_iff` → `set.finite_union`, add `@[simp]` attr;
* `set.finite.diff` → `set.finite.of_diff`, drop 1 arg;

2022-01-06 19:34:08 0b96630
feat(algebra/{monoid_algebra/basic,free_non_unital_non_assoc_algebra,lie/free}): generalize typeclasses (#11283)
This fixes a number of missing or problematic typeclasses:
* The smul typeclasses on `monoid_algebra` had overly strong assumptions
* `add_comm_group (monoid_algebra k G)` was missing.
* `monoid_algebra` had diamonds in its int-module structures, which were different between the one inferred from `ring` and `add_group`.
* `monoid_algebra` was missing an instance of the new `non_unital_non_assoc_ring`.
* `free_non_unital_non_assoc_algebra` was missing a lot of smul typeclasses and transitive module structures that it should inherit from `monoid_algebra`. Since every instance should just be inherited, we change `free_non_unital_non_assoc_algebra` to an abbreviation.
* `free_lie_algebra` had diamonds in its int-module and nat-module structures.
* `free_lie_algebra` was missing transitive module structures.
This also golfs some proofs about `free_non_unital_non_assoc_algebra`, and removes the `irreducible` attributes since these just make some obvious proofs more awkward.

2022-01-06 17:51:55 d0bf8bd
feat(set_theory/ordinal): `ordinal` is a successor order (#11284)
This provides the `succ_order` instance for `ordinal`.

2022-01-06 17:51:52 5893fbf
feat(data/polynomial/monic): add two lemmas on degrees of monic polynomials (#11259)
This PR is a step in the direction of simplifying #11139.
The two lemmas involve computing the degree of a power of monic polynomials.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.2311139.20taylor.20sum.20and.20nat_degree_taylor)

2022-01-06 14:41:11 9b39ab2
feat(algebra/group/freiman): Freiman homomorphisms (#10497)
This defines Freiman homomorphisms, which are maps preserving products of `n` elements (but only in the codomain. One can never get back to the domain).
This is useful in additive combinatorics.

2022-01-06 12:39:56 d2428fa
feat(ring_theory/localization): Localization is the localization of localization. (#11145)

2022-01-06 10:39:24 54c2567
feat(category_theory/sites): The pushforward pullback adjunction (#11273)

2022-01-06 10:39:23 7af5e86
feat(algebra/big_operators/multiset): Multiset product under some usual maps (#10907)
Product of the image of a multiset under `λ a, (f a)⁻¹`, `λ a, f a / g a`, `λ a, f a ^ n` (for `n` in `ℕ` and `ℤ`).

2022-01-06 09:57:30 c391512
feat(topology/metric_space/kuratowski): make the Kuratowski embedding have codomain the "true" ℓ^∞(ℕ) (#11280)
(Previously, we didn't have the "true" ℓ^∞(ℕ), so we used the space of bounded continuous functions on `ℕ` equipped with the discrete topology.)

2022-01-06 07:55:41 f07f87e
feat(ring_theory/power_series/basic): algebra, solving TODOs (#11267)
`algebra (mv_polynomial σ R) (mv_power_series σ A)`
`algebra (mv_power_series σ R) (mv_power_series σ A)`
`algebra (polynomial R) (power_series A)`
`algebra (power_series R) (power_series A)`
`coe_to_mv_power_series.alg_hom`
`coe_to_power_series.alg_hom`
And API about the injectivity of coercions

2022-01-06 07:55:40 6952172
feat(data/nat/digits): digits_len (#11187)
Via a new `data.nat.log` import.
Also unprivate `digits_eq_cons_digits_div`.
The file needs a refactor to make the names more mathlib-like,
otherwise I would have named it `length_digits`.

2022-01-06 07:05:28 b3260f3
feat(measure_theory/constructions/borel_space): new lemma tendsto_measure_cthickening (#11009)
Prove that, when `r` tends to `0`, the measure of the `r`-thickening of a set `s` tends to the measure of `s`.

2022-01-05 23:45:35 9f28b5d
chore(ci): update some workflows to use custom bot token (#11274)

2022-01-05 23:45:33 e718965
feat(topology/uniform_space/compact_convergence): when the domain is compact, compact convergence is just uniform convergence (#11262)

2022-01-05 23:45:32 a7611b2
chore(*): notation for `units` (#11236)

2022-01-05 23:45:31 cac4e19
feat(set_theory/ordinal_arithmetic): Proved characterization of `log` (#11192)
As well as a few simple missing lemmas.

2022-01-05 23:45:29 b67857e
refactor(set_theory/ordinal_arithmetic): Reworked `sup` and `bsup` API (#11048)
This PR does two things:
- It reworks and matches, for the most part, the API for `ordinal.sup` and `ordinal.bsup`.
- It introduces `ordinal.lsub` and `ordinal.blsub` for (bounded) least strict upper bounds, and proves the expected results.

2022-01-05 22:31:56 771d144
feat(analysis/normed_space/lp_space): completeness of the lp space on `Π i, E i` (#11094)

2022-01-05 19:08:16 8b2d181
feat(ring_theory/laurent_series): laurent_series is_fraction_ring over power_series (#11220)

2022-01-05 17:28:18 f6dfea6
feat(measure_theory/integral): Cauchy integral formula for a circle (#10000)

2022-01-05 16:16:53 6bf9041
doc(analysis/normed/group/basic): show notation in the typeclass docstring (#11260)

2022-01-05 16:16:51 3ab1c1c
feat(algebra/polynomial/big_operators): lemmas about polynomial degree of products (#11258)
These already existed for `nat_degree` but `degree` versions seemed missing.
from flt-regular

2022-01-05 16:16:50 a1f4ac3
chore(topology): move 3 files to `topology/algebra/module/` (#11242)

2022-01-05 14:15:46 9fd7a02
feat(category_theory/sites/left_exact): Sheafification is left exact. (#11252)

2022-01-05 14:15:44 a580727
chore(topology/omega_complete_partial_order): golf (#11250)

2022-01-05 14:15:40 802f23c
feat(data/fintype/basic): `set_fintype_card_eq_univ_iff` (#11244)
Adds companion lemma to `set_fintype_card_le_univ`. This PR also moves several `set.to_finset` lemmas earlier in the file.

2022-01-05 14:15:39 b27e33a
feat(data/{fin/vec_notation, matrix/notation}): `cons_{add,sub,dot_product}_cons` (#11241)
While these can be proved by `simp`, they are not rejected by the simp linter.

2022-01-05 14:15:38 98b64f4
feat(linear_algebra/orientation): bases from orientations (#11234)
Add a lemma giving the orientation of a basis constructed with
`units_smul`, and thus definitions and lemmas to construct a basis
from an orientation.

2022-01-05 14:15:37 33b5d26
feat(analysis/complex): `re`, `im`, and `closure`/`interior`/`frontier` (#11215)

2022-01-05 14:15:35 3115ced
feat(ring_theory/non_zero_divisors): mul_{left,right}_cancel API (#11211)
Not all `monoid_with_zero` are `cancel_monoid_with_zero`,
so we can't use `mul_right_cancel₀` everywhere. However, by definition,
multiplication by non-zero-divisors is 0 iff the multiplicand is 0.
In the context of a ring, that allows us to `mul_cancel_right`

2022-01-05 14:15:34 3bd2044
chore(data/nat/prime): reuse a result from algebra.big_operators.associated (#11143)

2022-01-05 14:15:33 57a9f8b
chore(group_theory/sub{monoid,group}, linear_algebra/basic): rename equivalences to mapped subobjects (#11075)
This makes the names shorter and more uniform:
* `add_equiv.map_add_submonoid`
* `add_equiv.map_add_subgroup`
* `linear_equiv.map_submodule`

2022-01-05 14:15:32 7e5eebd
feat(linear_algebra/clifford_algebra/equivs): There is a clifford algebra isomorphic to the dual numbers (#10730)
This adds a brief file on the dual numbers, and then shows that they are equivalent to the clifford algebra with `Q = (0 : quadratic_form R R)`.

2022-01-05 12:21:49 cef3258
chore(group_theory/group_action/defs): add instances to copy statements about left actions to right actions when the two are equal (#10949)
While these instances are usually available elsewhere, these shortcuts can reduce the number of typeclass assumptions other lemmas needs.
Since the instances carry no data, the only harm they can cause is performance.
There were some typeclass loops brought on by some bad instance unification, similar to the ones removed by @Vierkantor in 9ee2a50aa439d092c8dea16c1f82f7f8e1f1ea2c. We turn these into `lemma`s and  duplicate the docstring explaining the problem. That commit has a much longer explanation of the problem.

2022-01-05 11:32:02 8d5830e
chore(measure_theory/measurable_space): use implicit measurable_space argument (#11230)
The `measurable_space` argument is inferred from other arguments (like `measurable f` or a measure for example) instead of being a type class. This ensures that the lemmas are usable without `@` when several measurable space structures are used for the same type.

2022-01-05 08:10:47 4912740
chore(analysis/inner_product_space/basic): extract common `variables` (#11214)

2022-01-05 08:10:46 b72d2ab
feat(algebra/ring/basic): Introduce non-unital, non-associative rings (#11124)
Adds the class `non_unital_non_assoc_ring` to `algebra.ring.basic` to represent rings which are not assumed to be unital or associative and shows that (unital, associative) rings are instances of `non_unital_non_assoc_ring`.
Needed by #11073.

2022-01-05 06:18:07 58b1429
chore(algebra/group/pi): `pow_apply` can be `rfl` (#11249)

2022-01-05 01:44:24 4093834
feat(measure_theory/measure/finite_measure_weak_convergence): add definition and lemmas of pairing measures with nonnegative continuous test functions. (#9430)
Add definition and lemmas about pairing of `finite_measure`s and `probability_measure`s with nonnegative continuous test functions. These pairings will be used in the definition of the topology of weak convergence (convergence in distribution): the topology will be defined as an induced topology based on them.

2022-01-04 23:41:45 5c8243f
fix(algebra/group/type_tags): resolve an instance diamond caused by over-eager unfolding (#11240)
By setting the `one` and `zero` fields manually, we ensure that they are syntactically equal to the ones found via `has_one` and `has_zero`, rather than potentially having typeclass arguments resolved in a different way.
This seems to fix the failing test.
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Diamond.20in.20multiplicative.20nat/near/266824443)

2022-01-04 22:10:13 862854e
chore(ring_theory/localization): fix typo in module docstring (#11245)
There was a mismatch in the module docstring to the decl name later.

2022-01-04 18:47:59 dc352a6
chore(.github): include co-author attributions in PR template (#11239)

2022-01-04 18:47:58 692b6b7
chore(analysis/inner_product_space/basic): adjust decidability assumptions (#11212)
Eliminate the `open_locale classical` in `inner_product_space.basic` and replace by specific decidability assumptions.

2022-01-04 18:47:57 49cbce2
chore(data/fintype/basic): set.to_finset_univ generalization (#11174)

2022-01-04 18:47:56 037147e
feat(probability_theory/stopping): define stopped process (#10851)

2022-01-04 16:45:27 5df2e7b
chore(data/polynomial, data/finset/lattice): basic lemmas (#11237)

2022-01-04 16:45:25 5f3f01f
feat(set_theory/ordinal_arithmetic): Proved `add_log_le_log_mul` (#11228)
That is, `log b u + log b v ≤ log b (u * v)`. The other direction holds only when `b ≠ 2` and `b` is principal multiplicative, and will be added at a much later PR.

2022-01-04 16:45:24 18330f6
feat(tactic/abel): support 0 in group expressions (#11201)
[As reported on Zulip.](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60abel.60.20not.20rewriting.20with.20.60sub_zero.60/near/266645648)
fixes #11200

2022-01-04 16:45:23 b0f2f55
feat(set_theory/ordinal_arithmetic): Proved `dvd_iff_mod_eq_zero` (#11195)

2022-01-04 16:45:22 7f244cf
feat(category_theory/limits/filtered_colimits_commute_with_finite_limits): A curried variant of the fact that filtered colimits commute with finite limits. (#11154)

2022-01-04 16:45:20 06c3ab2
feat(ring_theory/discriminant): add of_power_basis_eq_norm (#11149)
From flt-regular.

2022-01-04 16:45:19 4a0e844
feat(data/finset): to_finset empty iff (#11088)

2022-01-04 16:45:18 68d2d21
feat(testing/slim_check): teach slim_check about `finsupp`s (#10916)
We add some instances so that `slim_check` can generate `finsupp`s and hence try to provide counterexamples for them.
As the way the original slim_check for functions works is to generate a finite list of random values and pick a default for the rest of the values these `total_functions` are quite close to finsupps already, we just have to map the default value to zero, and prove various things about the support.
There might be conceptually nicer ways of building this instance but this seems functional enough.
Seeing as many finsupp defs are classical (and noncomputable) this isn't quite as useful for generating counterexamples as I originally hoped.
See the test at `test/slim_check.lean` for a basic example of usage
I wrote this while working on flt-regular but it is hopefully useful outside of that

2022-01-04 16:45:16 7d42ded
chore(*): Rename instances (#9200)
Rename
* `lattice_of_linear_order` -> `linear_order.to_lattice`
* `distrib_lattice_of_linear_order` -> `linear_order.to_distrib_lattice`
to follow the naming convention (well, it's currently not explicitly written there, but autogenerated names follow that).

2022-01-04 15:37:18 b99a98e
doc(category_theory/limits/shapes/pullbacks): fix doc (#11225)
the link doesn't work with the full stop

2022-01-04 13:36:42 a30375e
feat(topology/fiber_bundle): a topological fiber bundle is a quotient map (#11194)
* The projection map of a topological fiber bundle (pre)trivialization
  is surjective onto its base set.
* The projection map of a topological fiber bundle with a nonempty
  fiber is surjective. Since it is also a continuous open map, it is a
  quotient map.
* Golf a few proofs.

2022-01-04 13:36:33 aa82ba0
feat(algebra/opposites): add `add_opposite` (#11080)
Add `add_opposite`, add `to_additive` here and there. More `to_additive` can be added as needed later.

2022-01-04 13:36:24 a7aa2c8
feat(data/finset/sigma): A way to lift `finset`-valued functions to a sigma type (#10958)
This defines `finset.sigma_lift : (Π i, α i → β i → finset (γ i)) → Σ i, α i → Σ i, β i → finset (Σ i, γ i)` as the function which returns the finset corresponding to the first coordinate of `a b : Σ i, α i` if they have the same, or the empty set else.

2022-01-04 13:36:16 8bd2059
feat(data/finset/slice): `r`-sets and slice (#10685)
Two simple nonetheless useful definitions about set families. A family of `r`-sets is a set of finsets of cardinality `r`. The slice of a set family is its subset of `r`-sets.

2022-01-04 12:08:44 1aec9a1
feat(analysis/inner_product_space/dual,adjoint): add some lemmas about extensionality with respect to a basis (#11176)
This PR adds some lemmas about extensionality in inner product spaces with respect to a basis.

2022-01-04 09:44:51 03872fd
feat(*): Prerequisites for the Spec gamma adjunction (#11209)

2022-01-04 09:44:50 9a8e9fa
chore(category_theory/limits): Generalize universes for `preserves/shapes/pullback.lean` (#10780)

2022-01-04 07:46:59 044c1de
feat(analysis/special_functions/trigonometric): a few lemmas (#11217)
Add a few trivial lemmas about `arcsin`/`arccos`.

2022-01-04 07:46:58 3045014
feat(algebra/order/ring): turn `mul_self_pos` into an `iff` (#11216)

2022-01-04 07:46:57 85784b0
feat(linear_algebra/determinant): `det_units_smul` and `det_is_unit_smul` (#11206)
Add lemmas giving the determinant of a basis constructed with
`units_smul` or `is_unit_smul` with respect to the original basis.

2022-01-04 07:46:56 1fc7a93
chore(topology/metric_space/hausdorff_distance): slightly tidy some proofs (#11203)

2022-01-04 07:46:55 9d1503a
feat(field_theory.intermediate_field): add intermediate_field.map_map (#11020)

2022-01-04 06:31:42 71dc1ea
feat(topology/maps): preimage of closure/frontier under an open map (#11189)
We had lemmas about `interior`. Add versions about `frontier` and `closure`.

2022-01-04 03:53:12 8f391aa
chore(algebra/module/submodule): switch `subtype_eq_val` to `coe_subtype` (#11210)
Change the name and form of a lemma, from
```lean
lemma subtype_eq_val : ((submodule.subtype p) : p → M) = subtype.val := rfl
```
to
```lean
lemma coe_subtype : ((submodule.subtype p) : p → M) = coe := rfl
```
The latter is the simp-normal form so I claim it should be preferred.

2022-01-04 01:48:54 4daaff0
feat(data/nat/prime): factors sublist of product (#11104)
This PR changes the existing `factors_subset_right` to give a stronger sublist conclusion (which trivially can be used to reproduce the subst version).

2022-01-03 20:30:05 62d814a
refactor(order/lexicographic): Change the `lex` synonym (#10926)
At least five types have a natural lexicographic order, namely:
* `α ⊕ β` where everything on the left is smaller than everything on the right
* `Σ i, α i` where things are first ordered following `ι`, then following `α i`
* `Σ' i, α i` where things are first ordered following `ι`, then following `α i`
* `α × β` where things are first ordered following `α`, then following `β`
* `finset α`, which is in a specific sene the dual of `finset.colex`.
And we could even add `Π i, α i`, `ι →₀ α`, `Π₀ i, α i`, etc... although those haven't come up yet in practice.
Hence, we generalize the `lex` synonym away from `prod` to make it a general purpose synonym to equip a type with its lexicographical order. What was `lex α β` now is `α ×ₗ β`.
Note that this PR doesn't add any of the aforementioned instances.

2022-01-03 18:55:41 9d0fd52
feat(measure_theory/function/lp_space): use has_measurable_add2 instead of second_countable_topology (#11202)
Use the weaker assumption `[has_measurable_add₂ E]` instead of `[second_countable_topology E]` in 4 lemmas.

2022-01-03 16:25:35 7249895
feat(analysis/inner_product_space/basic): negating orthonormal vectors (#11208)
Add a lemma that, given an orthonormal family, negating some of the
vectors in it produces another orthonormal family.

2022-01-03 15:26:28 83f4036
feat(*/cyclotomic): update is_root_cyclotomic_iff to use ne_zero (#11071)

2022-01-03 14:30:17 236d978
feat(linear_algebra/matrix/basis): `to_matrix_units_smul` and `to_matrix_is_unit_smul` (#11191)
Add lemmas that applying `to_matrix` to a basis constructed with
`units_smul` or `is_unit_smul` produces the corresponding diagonal
matrix.

2022-01-03 12:49:02 4b3198b
feat(combinatorics/configuration): `has_lines` implies `has_points`, and vice versa (#11170)
If `|P| = |L|`, then `has_lines` and `has_points` are equivalent!

2022-01-03 11:27:40 a10cb2f
feat(algebra/big_operators/associated): `dvd_prod_iff` for `finset` and `finsupp` (#10675)
Adding the counterparts of `dvd_prod_iff` (in #10624) for `finset` and `finsupp`.

2022-01-03 10:32:11 a813cf5
chore(algebra/algebra/spectrum): move `exists_spectrum_of_is_alg_closed_of_finite_dimensional` (#10919)
Move a lemma from `field_theory/is_alg_closed/basic` into `algebra/algebra/spectrum` which belongs in this relatively new file. Also, rename (now in `spectrum` namespace) and refactor it slightly; and update the two references to it accordingly.
- [x] depends on: #10783

2022-01-03 07:35:22 49bf3d3
feat(data/polynomial/taylor): taylor_mul (#11193)

2022-01-03 07:35:21 a49ee49
feat(data/finset/functor): Functor structures for `finset` (#10980)
This defines the monad, the commutative applicative and the (almost) traversable functor structures on `finset`.
It all goes in a new file `data.finset.functor` and picks up the `functor` instance that was stranded in `data.finset.basic` by Scott in #2997.

2022-01-03 06:54:39 138c61f
chore(field_theory/ratfunc): comm_ring (ratfunc K) (#11188)
Previously, the file only gave a `field (ratfunc K)` instance,
requiring `comm_ring K` and `is_domain K`.
In fact, `ratfunc K` is a `comm_ring` regardless of the `is_domain`.
The upstream instance is proven first, with a generalized tactic.

2022-01-02 23:55:46 03a5482
chore(topology/continuous_on): fix a typo (#11190)
`eventually_nhds_with_of_forall` → `eventually_nhds_within_of_forall`

2022-01-02 17:21:44 3f77761
feat(ring_theory/algebraic): algebraic functions (#11156)
Accessible via a new `algebra (polynomial R) (R → R)`
and a generalization that gives `algebra (polynomial R) (S → S)` when `[algebra R S]`.

2022-01-01 20:23:07 ebdbe6b
feat(topology/algebra/ordered): new lemmas, update (#11184)
* In `exists_seq_strict_mono_tendsto'` and `exists_seq_strict_anti_tendsto'`, prove that `u n` belongs to the corresponding open interval.
* Add `exists_seq_strict_anti_strict_mono_tendsto`.
* Rename `is_lub_of_tendsto` to `is_lub_of_tendsto_at_top`, rename `is_glb_of_tendsto` to `is_glb_of_tendsto_at_bot`.
* Add `is_lub_of_tendsto_at_bot`, `is_glb_of_tendsto_at_top`.

2022-01-01 19:07:15 02d02df
chore(measure_theory): fix TC assumptions in 2 lemmas (#11185)
With new assumptions, these lemmas work, e.g., for `β = ι → ℝ`.

2022-01-01 19:07:13 c1b1041
feat(topology/metric_space/basic): add `fin.dist_insert_nth_insert_nth` (#11183)

2022-01-01 17:09:52 6486e9b
chore(order/rel_classes): Removed unnecessary `classical` (#11180)
Not sure what that was doing here.

2022-01-01 15:44:59 93cf56c
feat(algebraic_geometry/*): The map `F.stalk y ⟶ F.stalk x` for `x ⤳ y` (#11144)

2022-01-01 14:44:14 892d465
feat(linear_algebra/multilinear/basic): the space of multilinear maps is finite-dimensional when the components are finite-dimensional (#10504)
Formalized as part of the Sphere Eversion project.

2022-01-01 13:55:32 5353369
feat(combinatorics/configuration): Line count equals point count (#11169)
In a configuration satisfying `has_lines` or `has_points`, if the number of points equals the number of lines, then the number of lines through a given point equals the number of points on a given line.

2022-01-01 13:55:31 a6c82af
feat(group_theory/specific_groups/*): computes the exponents of the dihedral and generalised quaternion groups (#11166)
This PR shows that the exponent of the dihedral group of order `2n` is equal to `lcm n 2` and that the exponent of the generalised quaternion group of order `4n` is `2 * lcm n 2`

2022-01-01 13:55:30 ad76a5e
feat(data/nat/log): log_mul, log_div (#11164)
Even with division over natural, the log "spec" holds.

2022-01-01 11:59:04 23b01cc
feat(algebraic_geometry): The function field of an integral scheme (#11147)

2022-01-01 02:32:45 1594b0c
feat(normed_space/lp_space): Lp space for `Π i, E i` (#11015)
For a family `Π i, E i` of normed spaces, define the subgroup with finite lp norm, and prove it is a `normed_group`.  Many parts adapted from the development of `measure_theory.Lp` by @RemyDegenne.
https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Lp.20space

2022-01-01 00:20:37 742ec88
feat(data/set/*): lemmas about `monotone`/`antitone` and sets/intervals (#11173)
* Rename `set.monotone_inter` and `set.monotone_union` to
  `monotone.inter` and `monotone.union`.
* Add `antitone` versions of some `monotone` lemmas.
* Specialize `Union_Inter_of_monotone` for `set.pi`.
* Add lemmas about `⋃ x, Ioi (f x)`, `⋃ x, Iio (f x)`, and `⋃ x, Ioo (f x) (g x)`.
* Add dot notation lemmas `monotone.Ixx` and `antitone.Ixx`.

2022-01-01 00:20:36 979f2e7
fix(order/filter/ultrafilter): dedup instance names (#11171)

2022-01-01 00:20:35 da54388
feat(combinatorics/simple_graph/srg): is_SRG_with for complete graphs, edgeless graphs, and complements (#5698)
We add the definition of a strongly regular graph and prove some useful lemmas about them.

2021-12-31 22:23:24 8db2fa0
chore(category_theory/closed/cartesian): make exp right-associative (#11172)
This makes `X ⟹ Y ⟹ Z` parse as `X ⟹ (Y ⟹ Z)`, like ordinary function types.

2021-12-31 22:23:23 559951c
feat(data/quot): Add quotient pi induction (#11137)
I am planning to use this later to show that the (pi) product of homotopy classes of paths is well-defined, and prove
properties about that product.

2021-12-31 22:23:22 200f47d
feat(analysis/normed_space/banach_steinhaus): prove the standard Banach-Steinhaus theorem (#10663)
Here we prove the Banach-Steinhaus theorem for maps from a Banach space into a (semi-)normed space. This is the standard version of the theorem and the proof proceeds via the Baire category theorem. Notably, the version from barelled spaces to locally convex spaces is not included because these spaces do not yet exist in `mathlib`. In addition, it is established that the pointwise limit of continuous linear maps from a Banach space into a normed space is itself a continuous linear map.
- [x] depends on: #10700

2021-12-31 21:03:20 ea710ca
feat(data/polynomial/ring_division): golf and generalize `leading_coeff_div_by_monic_of_monic` (#11077)
No longer require that the underlying ring is a domain.
Also added helper API lemma `leading_coeff_monic_mul`.

2021-12-31 21:03:19 8ec59f9
feat(data/int/gcd): add theorem `gcd_least_linear` (#10743)
For nonzero integers `a` and `b`, `gcd a b` is the smallest positive integer that can be written in the form `a * x + b * y` for some pair of integers `x` and `y`
This is an extension of Bézout's lemma (`gcd_eq_gcd_ab`), which says that `gcd a b` can be written in that form.

2021-12-31 19:13:58 e4607f8
chore(data/sym/basic): golf and add missing simp lemmas (#11160)
By changing `cons` to not use pattern matching, `(a :: s).1 = a ::ₘ s.1` is true by `rfl`, which is convenient here and there for golfing.

2021-12-31 19:13:57 fbbbdfa
feat(algebra/star/self_adjoint): define the self-adjoint elements of a star additive group (#11135)
Given a type `R` with `[add_group R] [star_add_monoid R]`, we define `self_adjoint R` as the additive subgroup of self-adjoint elements, i.e. those such that `star x = x`. To avoid confusion, we move `is_self_adjoint` (which defines this to mean `⟪T x, y⟫ = ⟪x, T y⟫` in an inner product space) to the `inner_product_space` namespace.

2021-12-31 19:13:55 fdf09df
feat(data/polynomial/degree/lemmas): (nat_)degree_sum_eq_of_disjoint (#11121)
Also two helper lemmas on `nat_degree`.
Generalize `degree_sum_fin_lt` to semirings

2021-12-31 16:13:18 c4caf0e
feat(linear_algebra/multilinear/basic): add dependent version of `multilinear_map.dom_dom_congr_linear_equiv` (#10474)
Formalized as part of the Sphere Eversion project.

2021-12-31 14:15:50 9a38c19
feat(data/list/indexes): map_with_index_eq_of_fn (#11163)
Some `list.map_with_index` API.

2021-12-31 14:15:49 b92afc9
chore(data/equiv/basic): missing dsimp lemmas (#11159)

2021-12-31 14:15:48 bcf1d2d
feat(category_theory/sites/plus): Adds a functorial version of `J.diagram P`, functorial in `P`. (#11155)

2021-12-31 14:15:46 7b38792
feat(category_theory/limits/functor_category): Some additional isomorphisms involving (co)limits of functors. (#11152)

2021-12-31 14:15:45 b142b69
feat(data/list/count): add lemma `count_le_count_map` (#11148)
Generalises `count_map_map`: for any `f : α → β` (not necessarily injective), `count x l ≤ count (f x) (map f l)`

2021-12-31 14:15:44 dc57b54
feat(ring_theory/localization): Transferring `is_localization` along equivs. (#11146)

2021-12-31 14:15:43 bc5e008
feat(data/dfinsupp/order): Pointwise order on finitely supported dependent functions (#11138)
This defines the pointwise order on `Π₀ i, α i`, in very much the same way as in `data.finsupp.order`. It also moves `data.dfinsupp` to `data.dfinsupp.basic`.

2021-12-31 14:15:42 2e8ebdc
feat(algebra/homology): Construction of null homotopic chain complex … (#11125)
…morphisms and one lemma on addivity of homotopies

2021-12-31 14:15:41 ff7e837
feat(combinatorics/configuration): Variant of `exists_injective_of_card_le` (#11116)
Proves a variant of `exists_injective_of_card_le` that will be useful in an upcoming proof.

2021-12-31 14:15:41 1fd70b1
refactor(algebra/big_operators/basic): Reorder lemmas (#11113)
This PR does the following things:
- Move `prod_bij` and `prod_bij'` earlier in the file, so that they can be put to use.
- Move `prod_product` and `prod_product'` past `prod_sigma` and `prod_sigma'` down to `prod_product_right` and `prod_product_right'`.
- Use `prod_bij` and `prod_sigma` to give an easier proof of `prod_product`.
- The new proof introduces `prod_finset_product` and the remaining three analogs of the four `prod_product` lemmas.
`prod_finset_product` is a lemma that I found helpful in my own work.

2021-12-31 14:15:40 99e3ffb
feat(data/fin/tuple): new directory and file on sorting (#11096)
Code written by @kmill at https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Permutation.20to.20make.20a.20function.20monotone
Co-authored by: Kyle Miller <kmill31415@gmail.com>

2021-12-31 14:15:39 06a0197
feat(category_theory/bicategory/basic): define bicategories (#11079)
This PR defines bicategories and gives basic lemmas.

2021-12-31 14:15:37 a5573f3
feat(data/{fin,multi}set/powerset): add some lemmas about powerset_len (#10866)
For both multisets and finsets
From flt-regular

2021-12-31 12:26:01 78a9900
refactor(algebra/group/hom_instances): relax semiring to non_unital_non_assoc_semiring in add_monoid_hom.mul (#11165)
Previously `algebra.group.hom_instances` ended with some results showing that left and right multiplication operators are additive monoid homomorphisms between (unital, associative) semirings. The assumptions of a unit and associativity are not required for these results to work, so we relax the condition to `non_unital_non_assoc_semiring`.
Required for #11073 .

2021-12-31 07:44:08 dc1525f
docs(data/sum/basic): Expand module docstring and cleanup (#11158)
This moves `data.sum` to `data.sum.basic`, provides a proper docstring for it, cleans it up.
There are no new declarations, just some file rearrangement, variable grouping, unindentation, and a `protected` attribute for `sum.lex.inl`/`sum.lex.inr` to avoid them clashing with `sum.inl`/`sum.inr`.

2021-12-30 21:39:31 e1a8b88
feat(tactic/itauto): add support for [decidable p] assumptions (#10744)
This allows proving theorems like the following, which use excluded middle selectively through `decidable` assumptions:
```
example (p q r : Prop) [decidable p] : (p → (q ∨ r)) → ((p → q) ∨ (p → r)) := by itauto
```
This also fixes a bug in the proof search order of the original itauto implementation causing nontermination in one of the new tests, which also makes the "big test" at the end run instantly.
Also adds a `!` option to enable decidability for all propositions using classical logic.
Because adding decidability instances can be expensive for proof search, they are disabled by default. You can specify specific decidable instances to add by `itauto [p, q]`, or use `itauto*` which adds all decidable atoms. (The `!` option is useless on its own, and should be combined with `*` or `[p]` options.)

2021-12-30 20:16:32 7f92832
feat(category_theory/currying): `flip` is isomorphic to uncurrying, swapping, and currying. (#11151)

2021-12-30 18:41:23 3dad7c8
chore(algebra/ring/comp_typeclasses): fix doctrings (#11150)
This fixes the docstrings of two typeclasses.

2021-12-30 16:51:28 682f1e6
feat(analysis/normed_space/operator_norm): generalize linear_map.bound_of_ball_bound (#11140)
This was proved over `is_R_or_C` but holds (in a slightly different form) over all nondiscrete normed fields.

2021-12-30 16:51:27 c0b5ce1
feat(data/nat/choose/basic): choose_eq_zero_iff (#11120)

2021-12-30 16:51:27 993a470
feat(analysis/special_functions/log): add log_div_self_antitone_on (#10985)
Adds lemma `log_div_self_antitone_on`, which shows that `log x / x` is decreasing when `exp 1 \le x`. Needed for Bertrand's postulate (#8002).

2021-12-30 14:54:46 ac97675
feat(data/polynomial/degree/definition): nat_degree_monomial in ite form (#11123)
Changed the proof usage elsewhere.
This helps deal with sums of over monomials.

2021-12-30 14:54:45 424773a
feat(data/finset/fold): fold_const, fold_ite (#11122)

2021-12-30 14:54:44 c8a5762
feat(order/galois_connection): gc magic (#11114)
see [Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.28l.E2.82.81.20S.29.2Emap.20.CF.83.20.E2.89.A4.20l.E2.82.82.20.28S.2Emap.20.E2.87.91.CF.83.29).

2021-12-30 14:54:43 f6d0f8d
refactor(analysis/normed_space/operator_norm): split a proof (#11112)
Split the proof of `continuous_linear_map.complete_space` into
reusable steps.
Motivated by #9862

2021-12-30 14:54:42 11de867
feat(data/fin/interval): add lemmas (#11102)
From flt-regular.

2021-12-30 14:54:41 3398efa
feat(topology/homeomorph): homeo of continuous equivalence from compact to T2 (#11072)

2021-12-30 14:54:40 7b1c775
chore(category_theory/adjunction/limits): generalize universe (#11070)

2021-12-30 14:54:39 d49ae12
feat(topology/homotopy): Add homotopy product (#10946)
Binary product and pi product of homotopies.

2021-12-30 14:14:55 52841fb
feat(ring_theory/polynomial/cyclotomic/basic): add cyclotomic_expand_eq_cyclotomic_mul (#11005)
We prove that, if `¬p ∣ n`, then `expand R p (cyclotomic n R) = (cyclotomic (n * p) R) * (cyclotomic n R)`
- [x] depends on: #10965

2021-12-30 08:19:12 655c2f0
chore(topology/algebra/weak_dual_topology): review (#11141)
* Fix universes in `pi.has_continuous_smul`.
* Add `function.injective.embedding_induced` and
  `weak_dual.coe_fn_embedding`.
* Golf some proofs.
* Review `weak_dual.module` etc instances to ensure, e.g.,
  `module ℝ (weak_dual ℂ E)`.

2021-12-30 06:52:10 04071ae
feat(analysis/inner_product_space/adjoint): define the adjoint for linear maps between finite-dimensional spaces (#11119)
This PR defines the adjoint of a linear map between finite-dimensional inner product spaces. We use the fact that such maps are always continuous and define it as the adjoint of the corresponding continuous linear map.

2021-12-30 06:52:09 9443a7b
feat(data/nat/prime): min fac of a power (#11115)

2021-12-30 06:52:09 0b6f9eb
feat(logic/small): The image of a small set is small (#11108)
A followup to #11029. Only realized this could be easily proved once that PR was approved.

2021-12-30 06:52:08 864a43b
feat(combinatorics/simple_graph): lemmas describing edge set of subgraphs (#11087)

2021-12-30 06:52:06 8f873b7
chore(data/nat/prime): move some results (#11066)
I was expecting there'd be more that could be moved, but it doesn't seem like it.

2021-12-30 06:04:19 0c149c9
feat(analysis/special_functions/log): sum of logs is log of product (#11106)

2021-12-30 02:10:59 23fdf99
chore(measure_theory/function/lp_space): move `fact`s (#11107)
Move from `measure_theory/function/lp_space` to `data/real/ennreal` the `fact`s
- `fact_one_le_one_ennreal`
- `fact_one_le_two_ennreal`
- `fact_one_le_top_ennreal`
so that they can be used not just in the measure theory development of `Lp` space but also in the new `lp` spaces.

2021-12-30 01:02:33 4f3e99a
feat(topology/algebra): range of `coe_fn : (M₁ →ₛₗ[σ] M₂) → (M₁ → M₂)` is closed (#11105)
Motivated by #9862

2021-12-30 00:20:50 ea95523
feat(analysis/normed_space/dual): add lemmas, golf (#11132)
* add `polar_univ`, `is_closed_polar`, `polar_gc`, `polar_Union`,
  `polar_union`, `polar_antitone`, `polar_zero`, `polar_closure`;
* extract `polar_ball_subset_closed_ball_div` and
  `closed_ball_inv_subset_polar_closed_ball` out of the proofs of
  `polar_closed_ball` and `polar_bounded_of_nhds_zero`;
* rename `polar_bounded_of_nhds_zero` to
  `bounded_polar_of_mem_nhds_zero`, use `metric.bounded`;
* use `r⁻¹` instead of `1 / r` in `polar_closed_ball`. This is the
  simp normal form (though we might want to change this in the future).

2021-12-29 21:58:43 be17b92
feat(topology/metric_space/lipschitz): image of a bdd set (#11134)
Prove that `f '' s` is bounded provided that `f` is Lipschitz
continuous and `s` is bounded.

2021-12-29 21:58:42 5bfd924
chore(analysis/normed_space/basic): add `normed_space.unbounded_univ` (#11131)
Extract it from the proof of `normed_space.noncompact_space`.

2021-12-29 21:58:41 5ac8715
split(data/finsupp/multiset): Split off `data.finsupp.basic` (#11110)
This moves `finsupp.to_multiset`, `multiset.to_finsupp` and `finsupp.order_iso_multiset` to a new file `data.finsupp.multiset`.

2021-12-29 21:58:40 b8833e9
chore(data/*): Eliminate `finish` (#11099)
Removing uses of `finish`, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-29 21:58:39 2a929f2
feat(algebra/ne_zero): typeclass for n ≠ 0 (#11033)

2021-12-29 21:03:06 dd65894
chore(*): Eliminate some more instances of `finish` (#11136)
Removing uses of `finish`, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)
This (and the previous series of PRs) eliminates the last few instances of `finish` in the main body of mathlib, leaving only instances in the `scripts`, `test`, `tactic`, and `archive` folders.

2021-12-29 21:03:05 d67a1dc
chore(number_theory/quadratic_reciprocity): Eliminate `finish` (#11133)
Removing uses of `finish`, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-29 21:03:04 c03dbd1
chore(algebra/continued_fractions/computation/translations): Eliminate `finish` (#11130)
Removing uses of `finish`, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-29 21:03:03 90d12bb
chore(computability/NFA): Eliminate `finish` (#11103)
Removing uses of `finish`, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-29 20:15:05 6703cdd
chore([normed/charted]_space): Eliminate `finish` (#11126)
Removing uses of `finish`, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-29 18:18:57 c25bd03
feat(algebra/order/field): prove `a / a ≤ 1` (#11118)

2021-12-29 16:12:37 395e275
chore(topology/metric_space/basic): +1 version of Heine-Borel (#11127)
* Mark `metric.is_compact_of_closed_bounded` as "Heine-Borel" theorem
  too.
* Add `metric.bounded.is_compact_closure`.

2021-12-29 16:12:36 cb37df3
feat(data/list/pairwise): pairwise repeat (#11117)

2021-12-29 14:53:37 d8b4267
chore(algebra/big_operators/finprod): Eliminate `finish` (#10923)
Removing uses of finish, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-29 12:26:04 e003d6e
feat(data/polynomial): more API for roots (#11081)
`leading_coeff_monic_mul`
`leading_coeff_X_sub_C`
`root_multiplicity_C`
`not_is_root_C`
`roots_smul_nonzero`
`leading_coeff_div_by_monic_X_sub_C`
`roots_eq_zero_iff`
also generalized various statements about `X - C a` to `X + C a` over semirings.

2021-12-29 02:26:11 268d1a8
chore(topology/metric_space/basic): golf, add dot notation (#11111)
* add `cauchy_seq.bounded_range`;
* golf `metric.bounded_range_of_tendsto`.

2021-12-28 20:56:25 a82c481
feat(data/polynomial/basic): `add_submonoid.closure` of monomials is `⊤` (#11101)
Use it to golf `polynomial.add_hom_ext`.

2021-12-28 20:56:24 134ff7d
feat(data/option/basic): add `eq_of_mem_of_mem` (#11098)
If `a : α` belongs to both `o1 o2 : option α` then `o1 = o2`

2021-12-28 20:56:23 f11d3ca
feat(analysis/special_functions/pow): `rpow` as an `order_iso` (#10831)
Bundles `rpow` into an order isomorphism on `ennreal` when the exponent is a fixed positive real.
- [x] depends on: #10701

2021-12-28 19:49:35 8d41552
feat(logic/small): The range of a function from a small type is small (#11029)
That is, you don't actually need an equivalence to build `small α`, a mere function does the trick.

2021-12-28 19:49:34 8d24a1f
refactor(category_theory/shift): make shifts more flexible (#10573)

2021-12-28 18:16:58 0b80d0c
chore(ring_theory/*): Eliminate `finish` (#11100)
Removing uses of `finish`, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-28 15:39:49 143fec6
chore(linear_algebra/*): Eliminate `finish` (#11074)
Removing uses of `finish`, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-28 13:53:36 d053d57
feat(topology): missing lemmas for Kyle (#11076)
Discussion [on Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Continuous.20bijective.20from.20compact.20to.20T1.20implies.20homeomorphis) revealed gaps in library. This PR fills those gaps and related ones discovered on the way. It will simplify #11072. Note that it unprotects `topological_space.nhds_adjoint` and puts it into the root namespace. I guess this was protected because it was seen only as a technical tools to prove properties of `nhds`.

2021-12-28 12:15:06 10771d7
doc(combinatorics/configuration): Make comments into docstrings (#11097)
These comments should have been docstrings.

2021-12-28 12:15:05 d3aa0a4
feat(data/polynomial/coeff): generalize to coeff_X_add_C_pow (#11093)
That golfs the proof for `coeff_X_add_one_pow`.

2021-12-28 12:15:03 afff1bb
chore(data/polynomial/eval): golf a proof, add versions (#11092)
* golf the proof of `polynomial.eval_prod`;
* add versions `polynomial.eval_multiset_prod` and
  `polynomial.eval_list_prod`.

2021-12-28 11:35:38 c04a42f
feat(measure_theory/integral/{interval,circle}_integral): add strict inequalities (#11061)

2021-12-28 09:40:04 f452b38
feat(data/pi): bit[01]_apply simp lemmas (#11086)

2021-12-28 07:03:21 94bb466
feat(tactic/fin_cases): document `fin_cases with` and add `fin_cases using` (#11085)
Closes #11016

2021-12-28 06:21:09 44f22aa
feat(ring_theory/power_series/basic): add api for coeffs of shifts (#11082)
Based on the corresponding API for polynomials

2021-12-28 03:25:46 f0ca433
feat(data/set/finite): finite_or_infinite (#11084)

2021-12-28 03:25:45 612a476
feat(ring_theory/polynomial/cyclotomic/basic): add cyclotomic_expand_eq_cyclotomic (#10974)
We prove that, if `p ∣ n`, then `expand R p (cyclotomic n R) = cyclotomic (p * n) R`.
- [x] depends on: #10965
- [x] depends on: #10971

2021-12-28 02:46:14 10ea860
feat(ring_theory/polynomial/cyclotomic/basic): cyclotomic_prime_mul_X_sub_one (#11063)
From flt-regular.

2021-12-27 18:57:58 294e78e
feat(algebra/group_with_zero/power): With zero lemmas (#11051)
This proves the `group_with_zero` variant of some lemmas and moves lemmas from `algebra.group_power.basic` to `algebra.group_with_zero.power`.

2021-12-27 18:57:57 1332fe1
fix(tactic/rcases): more with_desc fail (#11004)
This causes hovers for definitions using `rcases_patt_parse` to print
weird stuff for the parser description.

2021-12-27 16:46:26 0e8cca3
feat(algebra/big_operators/order): `prod_eq_prod_iff_of_le` (#11068)
If `f i ≤ g i` for all `i ∈ s`, then `∏ i in s, f i = ∏ i in s, g i` if and only if `f i = g i` for all `i ∈ s`.

2021-12-27 16:46:25 6ed17fc
refactor(combinatorics/configuration): Generalize results (#11065)
This PR slightly generalizes the results in `configuration.lean` by weakening the definitions of `has_points` and `has_lines`. The new definitions are also more natural, in my opinion.

2021-12-27 16:46:24 e1133cc
chore(order/*): Eliminate `finish` (#11064)
Removing uses of `finish`, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)
Credit to Ruben Van de Velde who suggested the solution for `eventually_lift'_powerset_eventually`

2021-12-27 16:46:23 46566c5
split(data/list/infix): Split off `data.list.basic` (#11062)
This moves `list.prefix`, `list.subfix`, `list.infix`, `list.inits`, `list.tails` and `insert` lemmas from `data.list.basic` to a new file `data.list.infix`.

2021-12-27 16:46:22 2ecf480
feat(algebra/group/units): generalize `units.coe_lift` (#11057)
* Generalize `units.coe_lift` from `group_with_zero` to `monoid`; use condition `is_unit` instead of `≠ 0`.
* Add some missing `@[to_additive]` attrs.

2021-12-27 16:46:21 de6f57d
chore(ring_theory/unique_factorization_domain): Eliminate `finish` (#11055)
Removing uses of finish, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-27 16:46:20 d67c469
feat(combinatorics/simple_graph/basic): edge deletion (#11054)
Function to delete edges from a simple graph, and some associated lemmas.
Also defines `sym2.to_rel` as an inverse to `sym2.from_rel`.

2021-12-27 16:46:19 ca2c344
split(data/finsupp/order): Split off `data.finsupp.basic` (#11045)
This moves all order instances about `finsupp` from `data.finsupp.basic` and `data.finsupp.lattice` to a new file `data.finsupp.order`.
I'm crediting
* Johan for #1216, #1244
* Aaron Anderson for #3335

2021-12-27 16:46:18 463be88
feat(algebra/group_with_zero): add zero_mul_eq_const and mul_zero_eq_const (#11021)
These are to match the corresponding lemmas about unapplied application of multiplication by 1. Like those lemmas, these are not marked simp.

2021-12-27 16:46:17 a360354
feat(algebraic_geometry): Basic open set is empty iff section is zero in reduced schemes. (#11012)

2021-12-27 16:46:16 ae8f08f
feat(combinatorics/simple_graph/connectivity): more lemmas (#11010)
This is the second chunk of #8737, which gives some more lemmas for manipulating the support and edge lists of walks. This also turns `is_trail` back into a structure.

2021-12-27 16:46:14 f525f93
chore(*): Eliminate `finish` (#10970)
Eliminating the use of `finish` in `data/set/basic`, `order/filter/bases`, and `topology/algebra/valued_field`.

2021-12-27 16:46:13 2f3b966
feat(number_theory/cyclotomic/basic): add is_cyclotomic_extension (#10849)
We add a class `is_cyclotomic_extension S A B` expressing the fact that `B` is obtained by `A` by adding `n`-th
primitive roots of unity, for all `n ∈ S`, where `S : set ℕ+`, and some basic properties.
We will add more properties of cyclotomic extensions in a future work.
From flt-regular.

2021-12-27 14:52:07 002b8d9
feat(algebra/group_with_zero/basic): mul_{left,right}_eq_self₀ (#11069)
Defined on `cancel_monoid_with_zero`,
copying the name and proofs from `{left,right)_cancel_monoid`s,

2021-12-27 12:07:40 b28734c
feat(data/sym): Provide API for data.sym (#11032)

2021-12-27 08:24:00 7e0b994
feat(topology/compact_convergence): define compact convergence (#10967)
And prove that the topology it induces is the compact-open topology

2021-12-26 23:49:34 7c9ce5c
feat(algebra/order/monoid_lemmas): `mul_eq_mul_iff_eq_and_eq` (#11056)
If `a ≤ c` and `b ≤ d`, then `a * b = c * d` iff `a = c` and `b = d`.

2021-12-26 05:05:27 4f02336
chore(analysis/complex/circle): minor review (#11059)
* use implicit arg in `mem_circle_iff_abs`;
* rename `abs_eq_of_mem_circle` to `abs_coe_circle` to reflect the type of LHS;
* add `mem_circle_iff_norm_sq`.

2021-12-26 03:49:28 daab3ac
feat(data/pi/interval): Dependent functions to locally finite orders are locally finite (#11050)
This provides the locally finite order instance for `Π i, α i` where the `α i` are locally finite.

2021-12-26 03:49:27 2e2510e
chore(logic/small): Some golfing (#11030)

2021-12-26 03:49:26 dd6707c
feat(measure_theory/integral): a couple of lemmas on integrals and integrability (#10983)
Adds a couple of congruence lemmas for integrating on intervals and integrability

2021-12-26 02:00:29 34e79d6
chore(data/list/prod): remove an out of date comment (#11058)
Due to changes in the library structure this comment is no longer relevant.

2021-12-26 01:20:52 266d12b
chore(ring_theory/polynomial/bernstein): use `∑` notation (#11060)
Also rewrite a proof using `calc` mode

2021-12-25 21:05:18 abf9657
feat(algebraic_geometry): Results about open immersions of schemes. (#10977)

2021-12-25 21:05:17 07b578e
feat(data/int/basic): add lemma `gcd_greatest` (#10613)
Proving a uniqueness property for `gcd`.  This is (a version of) Theorem 1.3 in Apostol (1976) Introduction to Analytic Number Theory.

2021-12-25 19:14:06 8d426f0
split(algebra/big_operators/multiset): Split off `data.multiset.basic` (#11043)
This moves
* `multiset.prod`, `multiset.sum` to `algebra.big_operators.multiset`
* `multiset.join`, `multiset.bind`, `multiset.product`, `multiset.sigma` to `data.multiset.bind`. This is needed as `join` is defined
  using `sum`.
The file was quite messy, so I reorganized `algebra.big_operators.multiset` by increasing typeclass assumptions.
I'm crediting Mario for 0663945f55335e51c2b9b3a0177a84262dd87eaf (`prod`, `sum`, `join`), f9de18397dc1a43817803c2fe5d84b282287ed0d (`bind`, `product`), 16d40d7491d1fe8a733d21e90e516e0dd3f41c5b (`sigma`).

2021-12-25 17:20:05 4923cfc
chore(set_theory/ordinal): Removed redundant argument from `enum_typein` (#11049)

2021-12-25 17:20:04 ad99529
feat(data/set/basic): Added `range_eq_iff` (#11044)
This serves as a convenient theorem for proving statements of the form `range f = S`.

2021-12-25 16:16:30 914250e
chore(data/real/ennreal): adjust form of `to_real_pos_iff` (#11047)
We have a principle (which may not have been crystallized at the time of writing of `data/real/ennreal`) that hypotheses of lemmas should contain the weak form `a ≠ ∞`, while conclusions should report the strong form `a < ∞`, and also the same for  `a ≠ 0`, `0 < a`.
In the case of the existing lemma
```lean
lemma to_real_pos_iff : 0 < a.to_real ↔ (0 < a ∧ a ≠ ∞):=
```
it's not clear whether the RHS of the iff should count as a hypothesis or a conclusion.  So I have rewritten to provide two forms,
```lean
lemma to_real_pos_iff : 0 < a.to_real ↔ (0 < a ∧ a < ∞):=
lemma to_real_pos {a : ℝ≥0∞} (ha₀ : a ≠ 0) (ha_top : a ≠ ∞) : 0 < a.to_real :=
```
Having both versions available shortens many proofs slightly.

2021-12-25 10:29:50 c9f47c9
chore(data/matrix/block): Eliminate `finish` (#10948)
Removing uses of finish, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-25 10:29:49 0aca706
feat(measure_theory/integral): define `circle_integral` (#10906)

2021-12-25 05:51:25 ef8005c
chore(category_theory/limits) : Remove instance requirement  (#11041)

2021-12-25 05:51:24 864a12e
chore(measure_theory/function/lp_space): use notation for `nnnorm` (#11039)

2021-12-25 05:51:23 0f076d2
chore(algebra/*): Eliminate `finish` (#11034)
Removing uses of `finish`, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-25 05:51:22 f9561d4
feat(ring_theory/localization): The localization at a fg submonoid is of finite type. (#10990)

2021-12-25 05:51:21 5719a02
feat(data/nat/totient): add totient_mul_prime_div (#10971)
We add `(p * n).totient = p * n.totient` if `p ∣ n`.

2021-12-25 05:51:20 d28b3bd
feat(combinatorics/configuration): Points and lines inequality (#10772)
If a nondegenerate configuration has a unique line through any two points, then there are at least as many lines as points.

2021-12-25 05:09:25 0dd60ae
feat(algebraic_geometry): Schemes are sober. (#11040)
Also renamed things in `topology/sober.lean`.

2021-12-25 02:17:30 f80c18b
feat(measure_theory/measure/haar_lebesgue): Lebesgue measure of the image of a set under a linear map (#11038)
The image of a set `s` under a linear map `f` has measure equal to `μ s` times the absolute value of the determinant of `f`.

2021-12-24 23:10:00 aa66909
chore(algebraic_geometry): Remove unwanted spaces. (#11042)

2021-12-24 23:09:59 d6ecc14
feat(data/mv_polynomial): API for mv polynomial.rename (#10921)
Relation between `rename` and `support`, `degrees` and `degree_of` when `f : σ → τ` is injective.
- I'm not sure if we already have something like `sup_map_multiset`.
- I've stated `sup_map_multiset`using `embedding` but I've used `injective` elsewhere because `mv_polynomial.rename` is written using `injective`.
-  I'm not sure if we should have `map_domain_embedding_of_injective`.

2021-12-24 23:09:58 f7038c2
feat(analysis/inner_product_space/adjoint): show that continuous linear maps on a Hilbert space form a C*-algebra (#10837)
This PR puts a `cstar_ring` instance on `E →L[𝕜] E`, thereby showing that it forms a C*-algebra.
- [x] depends on: #10825 [which defines the adjoint]

2021-12-24 21:14:13 8a997f3
feat(combinatorics/configuration): Inequality between `point_count` and `line_count` (#11036)
An inequality between `point_count` and `line_count`.

2021-12-24 21:14:12 8181fe8
feat(measure_theory/covering/besicovitch): covering a set by balls with controlled measure (#11035)
We show that, in a real vector space, any set `s` can be covered by balls whose measures add up to at most `μ s + ε`, as a consequence of the Besicovitch covering theorem.

2021-12-24 21:14:11 a998db6
refactor(data/nat/prime): redefine nat.prime as irreducible (#11031)

2021-12-24 21:14:10 3588c3a
feat(data/multiset/basic): empty_or_exists_mem (#11023)

2021-12-24 21:14:09 404a912
chore(ring_theory/adjoin/power_basis): add `simps` (#11018)

2021-12-24 21:14:08 d5a3e8c
feat(ring_theory/derivation): add 3 lemmas (#10996)
Add `map_smul_of_tower`, `map_coe_nat`, and `map_coe_int`.

2021-12-24 21:14:07 c4268a8
feat(topology,analysis): there exists `y ∈ frontier s` at distance `inf_dist x sᶜ` from `x` (#10976)

2021-12-24 19:23:20 5dac1c0
chore(topology/*): Eliminate `finish` (#10991)
Removing uses of finish, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-24 16:32:31 35b67fd
feat(algebra/order/field, data/real/basic): lemmas about `Sup` and `is_lub` (#11013)
Add a lemma stating that for `f : α → ℝ` with `α` empty, `(⨆ i, f i) = 0`; a lemma stating that in an ordered field `is_lub` scales under multiplication by a nonnegative constant, and some variants.

2021-12-24 16:32:30 3377bcc
feat(analysis/inner_product_space/adjoint): define the adjoint of a continuous linear map between Hilbert spaces (#10825)
This PR defines the adjoint of an operator `A : E →L[𝕜] F` as the unique operator `adjoint A : F →L[𝕜] E` such that `⟪x, A y⟫ = ⟪adjoint A x, y⟫` for all `x` and `y`. We then use this to put a star algebra structure on `E →L[𝕜] E` with the adjoint as the star operation (while leaving the C* property for a subsequent PR).

2021-12-24 15:31:49 99c634c
feat(analysis/normed_space/spectrum): adds easy direction of Gelfand's formula for the spectral radius (#10847)
This adds the easy direction (i.e., an inequality) of Gelfand's formula for the spectral radius. Namely, we prove that `spectral_radius 𝕜 a ≤ ∥a ^ (n + 1)∥₊ ^ (1 / (n + 1) : ℝ)` for all `n : ℕ` using the spectral mapping theorem for polynomials.
- [x] depends on: #10783

2021-12-24 13:57:18 ffbab0d
chore(group_theory/quotient_group): change injective_ker_lift to ker_lift_injective for naming regularisation (#11027)
Minor change for naming regularisation.

2021-12-24 13:57:17 a0993e4
feat(combinatorics/configuration): Sum of line counts equals sum of point counts (#11026)
Counting the set `{(p,l) : P × L | p ∈ l}` in two different ways.

2021-12-24 13:57:16 04aeb01
feat(data/polynomial/ring_division): roots.le_of_dvd (#11025)

2021-12-24 13:57:15 c0e613a
feat(combinatorics/configuration): `nondegenerate.exists_injective_of_card_le` (#11019)
If a nondegenerate configuration has at least as many points as lines, then there exists an injective function `f` from lines to points, such that `f l` does not lie on `l`.
This is the key lemma for #10772. The proof is an application of Hall's marriage theorem.

2021-12-24 13:57:14 2c4e6df
feat(data/real/ennreal): trichotomy lemmas (#11014)
If there is a case split one performs frequently, it can be useful to provide the case split and the standard data-wrangling one performs after the case split together.  I do this here for the `ennreal` case-split lemma
```lean
protected lemma trichotomy (p : ℝ≥0∞) : p = 0 ∨ p = ∞ ∨ 0 < p.to_real :=
```
and a couple of variants.

2021-12-24 13:57:12 7c7195f
feat(field_theory/adjoin): lemmas about `inf`s of `intermediate_field`s (#10997)
This adjusts the data in the `galois_insertion` slightly such that this new lemma is true by `rfl`, to match how we handle this in `subalgebra`. As a result, `top_to_subalgebra` is now refl, but `adjoin_univ` is no longer refl.
This also adds a handful of trivial simp lemmas.

2021-12-24 13:57:11 d329d6b
feat(combinatorics/simple_graph/connectivity): walks, paths, cycles (#10981)
This is the first chunk of #8737, which gives a type for walks in a simple graph as well as some basic operations.
It is designed to one day generalize to other types of graphs once there is a more generic framework by swapping out the `G.adj u v` argument from `walk`.

2021-12-24 13:57:10 028c161
feat(topology/is_locally_homeomorph): New file (#10960)
This PR defines local homeomorphisms.

2021-12-24 13:57:09 a0f12bc
feat(field_theory/adjoin): Supremum of finite dimensional intermediate fields (#10938)
The supremum of finite dimensional intermediate fields is finite dimensional.

2021-12-24 13:57:08 084b1ac
feat(group_theory/specific_groups/cyclic): |G|=expG ↔ G is cyclic (#10692)

2021-12-24 12:49:44 6c6c7da
feat(topology/connected): add `inducing.is_preconnected_image` (#11011)
Generalize the proof of `subtype.preconnected_space` to any `inducing`
map. Also golf the proof of `is_preconnected.subset_right_of_subset_union`.

2021-12-24 03:30:38 67cf406
chore(scripts): update nolints.txt (#11028)
I am happy to remove some nolints for you!

2021-12-24 03:30:37 f846a42
feat(algebra/pointwise): expand API for multiplication / addition of finsets by copying the corresponding API for sets (#10600)
From flt-regular, I wanted to be able to add finsets so we add a lot of API to show that the existing definition has good algebraic properties by copying the existing set API.
Where possible I tried to give proofs that use the existing set lemmas and cast the finsets to sets to make it clear that these are essentially the same lemmas.
It would be nice to have a better system for duplicating this API of course, some general versions for set_like or Galois insertions perhaps to unify the theories, but I don't know what that would look like.

2021-12-24 02:34:32 7b641cb
chore(number_theory/primorial): golf some proofs (#11024)

2021-12-24 00:43:12 1dd6080
feat(ring_theory/derivation): drop unused `is_scalar_tower` (#10995)

2021-12-24 00:43:11 f03447f
feat(analysis/normed_space): a normed space over a nondiscrete normed field is noncompact (#10994)
Register this as an instance for a nondiscrete normed field and for a real normed vector space. Also add `is_compact.ne_univ`.

2021-12-24 00:43:10 0ac9f83
feat(analysis/mean_inequalities): Minkowski inequality for infinite sums (#10984)
A few versions of the Minkowski inequality for `tsum` and `has_sum`.

2021-12-24 00:43:09 1a780f6
chore(topology/metric_space): export `is_compact_closed_ball` (#10973)

2021-12-24 00:43:08 36ba1ac
feat(algebraic_geometry): Define `open_cover`s of Schemes. (#10931)

2021-12-24 00:43:07 c374a3b
feat(data/nat/nth): add nth function (#10707)
Split off from #9457, introduces `nth` and proves theorems about it.

2021-12-23 22:35:58 421b9bb
feat(algebraic_topology): alternating face map complex of a simplicial object (#10927)
added the alternating face map complex of a simplicial object in a preadditive category and the natural inclusion of the normalized_Moore_complex

2021-12-23 22:35:57 dc57de2
feat(logic/basic): When a dependent If-Then-Else is not one of its arguments (#10924)
This is the dependent version of #10800.

2021-12-23 22:35:56 1db0052
feat(group_theory/submonoid/membership): upgrade definition of pow from a set morphism to a monoid morphism (#10898)
This comes at no extra cost. All the prerequisite definitions and lemmas were already in mathlib.

2021-12-23 22:35:55 68aada0
feat(algebra/algebra/spectrum): prove the spectral mapping theorem for polynomials (#10783)
Prove the spectral mapping theorem for polynomials. That is, if `p` is a polynomial and `a : A` where `A` is an algebra over a field `𝕜`, then `p (σ a) ⊆ σ (p a)`. Moreover, if `𝕜` is algebraically closed, then this inclusion is an equality.

2021-12-23 22:35:54 720fa8f
feat(data/rat/basic): API around rat.mk (#10782)

2021-12-23 19:11:42 4ce0d04
feat(data/real/sqrt): add a few lemmas (#11003)

2021-12-23 19:11:41 694b3f8
chore(measure_theory): golf a proof (#11002)

2021-12-23 19:11:40 3362b1e
refactor(analysis/seminorm): Weaken typeclasses (#10999)
This weakens `normed_field` to the appropriate `normed_whatever`.

2021-12-23 19:11:39 cce09a6
feat(ring_theory/finiteness): prove that a surjective endomorphism of a finite module over a comm ring is injective (#10944)
Using an approach of Vasconcelos, treating the module as a module over the polynomial ring, with action induced by the endomorphism.
This result was rescued from #1822.

2021-12-23 19:11:38 327bacc
feat(field_theory/adjoin): `intermediate_field.to_subalgebra` distributes over supremum (#10937)
This PR proves `(E1 ⊔ E2).to_subalgebra = E1.to_subalgebra ⊔ E2.to_subalgebra`, under the assumption that `E1` and `E2` are finite-dimensional over `F`.

2021-12-23 19:11:37 e6f4852
feat(group_theory/exponent): exponent G = ⨆ g : G, order_of g (#10767)
Precursor to #10692.

2021-12-23 19:11:36 1107693
feat(combinatorics/simple_graph/basic): add lemmas about the neighbor set of a vertex in the complement graph (#7138)
Add lemmas about the neighbor set of a vertex in the complement graph, including a lemma proving that the complement of a regular graph is regular. Part of #5698 in order to prove facts about strongly regular graphs.

2021-12-23 18:32:08 63a0936
ci(.github/workflows/*): cleanup after upload step (#11008)
cf. https://github.com/actions/upload-artifact/issues/256

2021-12-23 16:33:07 cf34598
chore(tactic/norm_cast): minor cleanup (#10993)

2021-12-23 16:33:06 1a57c79
feat(analysis/calculus): assorted simple lemmas (#10975)
Various lemmas from the formalization of the Cauchy integral formula (#10000 and some later developments on top of it).
Also add `@[measurability]` attrs to theorems like `measurable_fderiv`.

2021-12-23 16:33:04 35ede3d
chore(algebra/algebra/*): add some `simp` lemmas (#10969)

2021-12-23 16:33:03 7defe7d
feat(field_theory/separable): add expand_eval and expand_monic (#10965)
Simple properties of `polynomial.expand`.

2021-12-23 16:33:01 2be37b0
feat(combinatorics/set_family/shadow): Upper shadow of a set family (#10956)
This defines the upper shadow of `𝒜 : finset (finset α)`, which is the dual of the shadow. Instead of removing each element from each set, we add each element not in each set.

2021-12-23 16:33:00 60c2b68
feat(data/sigma/order): The lexicographical order has a bot/top (#10905)
Also fix localized instances declarations. They weren't using fully qualified names and I had forgotten `sigma.lex.linear_order`.

2021-12-23 16:32:59 87fa060
feat(combinatorics/configuration): Define `line_count` and `point_count` (#10884)
Adds definitions for the number of lines through a given point and the number of points through a given line.

2021-12-23 16:32:57 bd164c7
feat(data/polynomial/ring_division): add `polynomial.card_le_degree_of_subset_roots` (#10824)

2021-12-23 16:32:55 ec6d9a7
feat(topology/algebra/group): definitionally better lattice (#10792)
This provides `(⊓)`, `⊤`, and `⊥` explicitly such that the associated `to_topological_space` lemmas are definitionally equal.

2021-12-23 16:32:53 6e9b011
feat(linear_algebra/orientation): composing with linear equivs and determinant (#10737)
Add lemmas that composing an alternating map with a linear equiv using
`comp_linear_map`, or composing a basis with a linear equiv using
`basis.map`, produces the same orientation if and only if the
determinant of that linear equiv is positive.

2021-12-23 14:26:41 3499323
chore(data/vector3): Make linter happy (#10998)
and clean up a bit.

2021-12-23 14:26:40 72b4541
feat(data/option): simple lemmas about orelse (#10972)
Some simple lemmas about orelse. Analogous to `bind_eq_some` and friends.

2021-12-23 14:26:39 db1788c
feat(ring_theory/tensor_product): Supremum of finite dimensional subalgebras (#10922)
The supremum of finite dimensional subalgebras is finite dimensional.

2021-12-23 12:54:33 f3b380e
feat(algebraic_geometry): Prime spectrum is sober. (#10989)

2021-12-23 10:36:41 086469f
chore(order/*): Change `order_hom` notation (#10988)
This changes the notation for `order_hom` from `α →ₘ β` to `α →o β` to match `order_embedding` and `order_iso`, which are respectively `α ↪o β` and `α ≃o β`. This also solves the conflict with measurable functions.

2021-12-23 10:36:40 03062ea
feat(ring_theory/integral_closure): The product of the leading coeff and the root is integral. (#10807)

2021-12-23 08:49:38 2cfa052
feat(data/list/count): countp of true and false (#10986)

2021-12-23 07:22:33 08b13ec
feat(field_theory/adjoin): add dim_bot, finrank_bot (#10964)
Added two simp lemmas, showing that the dimension and finrank respectively of bottom intermediate fields are 1.

2021-12-23 05:35:04 f4e46fd
feat(data/list/count): count_le_length (#10982)

2021-12-23 03:43:57 04779a3
feat(order/complete_boolean_algebra): lemmas about binfi (#10852)
Adds corresponding `binfi` and `Inf` lemmas for existing `infi` results, especially where `rw` struggles to achieve the same thing alone.

2021-12-23 02:02:13 f00007d
feat(analysis/normed_space/pointwise): more on pointwise operations on sets in normed spaces  (#10820)
Also move all related results to a new file `analysis/normed_space/pointwise`, to shorten `normed_space/basic` a little bit.

2021-12-22 23:07:54 e15e015
split(data/finset/sigma): Split off `data.finset.basic` (#10957)
This moves `finset.sigma` to a new file `data.finset.sigma`.
I'm crediting Mario for 16d40d7491d1fe8a733d21e90e516e0dd3f41c5b

2021-12-22 23:07:53 3f16409
feat(data/finset/*): Random lemmas (#10955)
Prove some `compl` lemmas for `finset`, `(s.erase a).card + 1 = s.card` for `list`, `multiset`, `set`, copy over one more `generalized_boolean_algebra` lemma.

2021-12-22 23:07:52 2b9ab3b
split(data/psigma/order): Split off `order.lexicographic` (#10953)
This moves all the stuff about `Σ' i, α i` to a new file `data.psigma.order`. This mimics the file organisation of `sigma`.
I'm crediting:
* Scott for #820
* Minchao for #914

2021-12-22 23:07:51 4315973
feat(quadratic_form/prod): quadratic forms on product and pi types (#10939)
In order to provide the `pos_def` members, some new API was needed.

2021-12-22 23:07:50 c8f0afc
feat(group_theory/index): Transitivity of finite relative index. (#10936)
If `H` has finite relative index in `K`, and `K` has finite relative index in `L`, then `H` has finite relative index in `L`. Golfed from #9545.

2021-12-22 23:07:49 24cefb5
feat(data/real/ennreal): add monotonicity lemmas for ennreal.to_nnreal (#10556)
Add four lemmas about monotonicity of `to_nnreal` on extended nonnegative reals, `to_nnreal_mono`, `to_nnreal_le_to_nnreal`, `to_nnreal_strict_mono`, `to_nnreal_lt_to_nnreal` (analogous to `to_real_mono`, `to_real_le_to_nnreal`, `to_real_strict_mono`, `to_real_lt_to_real`).

2021-12-22 21:32:02 c5bb320
refactor(*): Random lemmas and modifications from the shifting refactor. (#10940)

2021-12-22 20:39:43 ee25d58
feat(linear_algebra/quadratic_form/basic): `linear_map.comp_quadratic_form` (#10950)
The name is taken to mirror `linear_map.comp_multilinear_map`

2021-12-22 20:39:42 b2e881b
feat(linear_algebra/eigenspace): the eigenvalues of a linear endomorphism are in its spectrum (#10912)
This PR shows that the eigenvalues of `f : End R M` are in `spectrum R f`.

2021-12-22 18:48:37 12ee59f
feat(data/{finset,multiset}/locally_finite): When an `Icc` is a singleton, cardinality generalization (#10925)
This proves `Icc a b = {c} ↔ a = c ∧ b = c` for sets and finsets, gets rid of the `a ≤ b` assumption in `card_Ico_eq_card_Icc_sub_one` and friends and proves them for multisets.

2021-12-22 18:07:18 da07a99
feat(ring_theory/tensor_product): Range of `tensor_product.product_map` (#10882)
This PR proves `(product_map f g).range = f.range ⊔ g.range`.

2021-12-22 16:18:16 dda469d
chore(analysis/normed_space/exponential + logic/function/iterate): fix typos in doc-strings (#10968)
One `m` was missing in 3 different places.

2021-12-22 14:28:32 7ca68f8
chore(*): fix some doc (#10966)

2021-12-22 12:04:48 af683b1
feat(topology/tietze_extension): Tietze extension theorem (#10701)

2021-12-21 23:32:37 fc66d88
refactor(ring_theory/derivation): use weaker TC assumptions (#10952)
Don't assume `[add_cancel_comm_monoid M]`, add `map_one_eq_zero` as an axiom instead. Add a constructor `derivation.mk'` that deduces `map_one_eq_zero` from `leibniz`.
Also generalize `smul`/`module` instances.

2021-12-21 19:23:31 55f575f
feat(linear_algebra/quadratic_form/complex): all non-degenerate quadratic forms over ℂ are equivalent (#10951)

2021-12-21 18:06:48 b434a0d
feat(data/nat/prime): `prime.dvd_prod_iff`; golf `mem_list_primes_of_dvd_prod` (#10624)
Adds a generalisation of `prime.dvd_mul`: prime `p` divides the product of `L : list ℕ` iff it divides some `a ∈ L`.   The `.mp` direction of this lemma is the second part of Theorem 1.9 in Apostol (1976) Introduction to Analytic Number Theory.
Also adds the converse `prime.not_dvd_prod`, and uses `dvd_prod_iff` to golf the proof of `mem_list_primes_of_dvd_prod`.

2021-12-21 16:21:11 ca554be
chore(group_theory/quotient_group): make pow definitionally equal (#10833)
Motivated by a TODO comment.

2021-12-21 16:21:10 cea1988
feat(data/finsupp/basic): add lemma `disjoint_prod_add` (#10799)
For disjoint finsupps `f1` and `f2`, and function `g`, the product of the products of `g` over `f1` and `f2` equals the product of `g` over `f1 + f2`

2021-12-21 15:17:17 4aa7ac6
feat(data/mv_polynomial): add `mv_polynomial.linear_map_ext` (#10945)

2021-12-21 12:42:47 8dafccc
chore(data/nat/digits): Eliminate `finish` (#10947)
Removing uses of finish, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-21 12:42:46 7e48e35
feat(algebra/module/submodule_lattice, linear_algebra/projection): two lemmas about `is_compl` (#10709)

2021-12-21 12:42:45 a6b2f94
refactor(linear_algebra/sesquilinear_form): Use similar definition as used in `bilinear_map` (#10443)
Define sesquilinear forms as `M →ₗ[R] M →ₛₗ[I] R`.

2021-12-21 10:53:02 d565373
feat(order/galois_connection, linear_algebra/basic): `x ∈ R ∙ y` is a transitive relation (#10943)

2021-12-21 07:22:28 2ceda78
feat(order/monovary): Monovariance of a pair of functions. (#10890)
`f` monovaries with `g` if `g i < g j → f i ≤ f j`. `f` antivaries with `g` if `g i < g j → f j ≤ f i`.
This is a way to talk about functions being monotone together, without needing an order on the index type.

2021-12-21 01:43:24 d145e8e
chore(combinatorics/simple_graph/basic): Golf and cleanup (#10942)
This kills a few `simp` and fixes typos.

2021-12-20 23:36:13 5ac4cd3
feat(analysis/special_functions/non_integrable): examples of non-integrable functions (#10788)

2021-12-20 21:49:20 c88943f
feat(algebra/algebra/subalgebra): define the center of a (unital) algebra (#10910)

2021-12-20 21:49:18 3b6bd99
chore(data/finset/prod): eliminate `finish` (#10904)
Removing uses of finish, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-20 20:42:22 ed250f7
feat(topology/[path_]connected): add random [path-]connectedness lemmas (#10932)
From sphere-eversion

2021-12-20 19:47:57 7555ea7
feat(ring_theory/integral_closure): Supremum of integral subalgebras (#10935)
The supremum of integral subalgebras is integral.

2021-12-20 19:47:56 5dd0ede
refactor(algebra/category/CommRing/constructions): Squeeze a slow simp (#10934)
`prod_fan_is_limit` was causing timeouts on CI for another PR, so I squeezed one of the simps.

2021-12-20 18:57:10 082665e
feat(group_theory/index): relindex_eq_zero_of_le_right (#10928)
If H has infinite index in K, then so does any L ≥ K.

2021-12-20 16:29:56 d910e83
chore(*): ensure all open_locales work without any open namespaces (#10913)
Inspired by #10905 we clean up the localized notation in all locales by using the full names of declarations, this should mean that `open_locale blah` should almost never error.
The cases I'm aware of where this doesn't hold still are the locales:
- `witt` which hard codes the variable name `p`, if there is no `p` in context this will fail
- `list.func` and `topological_space` opening `list.func` breaks the notation in `topological_space` due to ``notation as `{` m ` ↦ ` a `}` := list.func.set a as m`` in `list.func` and ``localized "notation `𝓝[≠] ` x:100 := nhds_within x {x}ᶜ" in topological_space``
- likewise for `parser` and `kronecker` due to ``localized "infix ` ⊗ₖ `:100 := matrix.kronecker_map (*)" in kronecker``
But we don't fix these in this PR.
There may be others instances like this too as these errors can depend on the ordering chosen and  I didn't check them all.
A very basic script to check this sort of thing is at https://github.com/leanprover-community/mathlib/tree/alexjbest/check_localized

2021-12-20 16:29:55 d14ac1f
feat(*) : added missing lemma for pointwise smul of  submonoid, add_subgroup, add_submonoid, subsemiring, and semiring. (#10908)

2021-12-20 16:29:54 c2debc4
refactor(combinatorics/configuration): Implicit arguments for `nondegenerate.eq_or_eq` (#10885)
The arguments `p₁`, `p₂`, `l₁`, `l₂` can be implicit, since they can be inferred from `p₁ ∈ l₁`, `p₂ ∈ l₁`, `p₁ ∈ l₂`, `p₂ ∈ l₂`.

2021-12-20 15:51:29 b9fbef8
feat(tactic/observe): have a claim proved by library_search under the hood (#10878)

2021-12-20 13:27:04 ab654e5
feat(topology/sober): Specialization & generic points & sober spaces (#10914)

2021-12-20 13:27:01 e473898
feat(category_theory/glue_data): Some more API for glue_data (#10881)

2021-12-20 13:26:57 6cfc8d8
feat(algebraic_geometry/locally_ringed_space): LocallyRingedSpace is cocomplete. (#10791)

2021-12-20 11:53:20 b02e2ea
feat(group_theory/coset): Embeddings of quotients (#10901)
If `K ≤ L`, then there is an embedding `K ⧸ (H.subgroup_of K) ↪ L ⧸ (H.subgroup_of L)`. Golfed from #9545.

2021-12-20 11:53:19 b4961da
feat(analysis/calculus/{f,}deriv): generalize `has_fderiv_at_filter.is_O_sub_rev` (#10897)
Also add `has_deriv_at.is_O_sub_rev`

2021-12-20 10:07:40 bcf20b0
feat(combinatorics/simple_graph/matching): is_matching iff all degrees = 1 (#10864)

2021-12-20 10:07:38 1929025
feat(ring_theory/polynomial/cyclotomic): generalize a few results to domains (#10741)
Primarily for flt-regular

2021-12-20 09:01:19 5a79047
feat(group_theory/index): `relindex_eq_zero_of_le_left` (#10902)
If `K` has infinite index in `L`, then so does any `H ≤ K`.
The `right`-version is forthcoming.
Making the subgroups explicit in `relindex_mul_relindex` makes rewriting much easier (both in this situation, and in others).

2021-12-20 09:01:18 5c05ca2
feat(ring_theory/integral_closure): `is_field_iff_is_field` (#10875)
If `R/S` is an integral extension, then `R` is a field if and only if `S` is a field. One direction was already in mathlib, and this PR proves the converse direction.

2021-12-20 09:01:16 d5de8ea
feat(data/polynomial): add some simp attributes and commuted versions of coeff_mul_X_pow (#10868)
I couldn't find these before and accidentally rewrote them from scratch, I think part of the reason is that I would have expected all of these vesions to be simp lemmas, so we add some more versions of these lemmas and tag everything as simp.
From flt-regular

2021-12-20 07:48:27 ade581e
feat(algebraic_geometry): Open immersions of locally ringed spaces have pullbacks (#10917)

2021-12-20 05:51:57 093aef5
feat(order/monotone): Functions from/to subsingletons are monotone (#10903)
A few really trivial results about monotonicity/antitonicity of `f : α → β` where `subsingleton α` or `subsingleton β`.
Also fixes the markdown heading levels in this file

2021-12-20 04:47:45 1067556
refactor(data/polynomial/eval): Golf `hom_eval₂` (#10920)
Here's a much easier proof of `hom_eval₂`.

2021-12-20 01:54:00 c40c701
feat(docs/references) : Added reference for #10791 (#10915)

2021-12-20 01:53:58 9cbd828
feat(data/finset/basic): add image_congr (#10911)
Add `finset.image_congr`

2021-12-20 01:53:57 f7b24fa
refactor(ring_theory/tensor_product): Speed up slow proofs (#10883)
`alg_hom_of_linear_map_tensor_product` was causing timeouts, due to many uses of `simp`. This refactor speeds up the proofs.

2021-12-20 00:57:04 6ab0f90
chore(category_theory/filtered): avoid `finish` (#10918)
Removing uses of finish, as discussed on Zulip (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers).

2021-12-19 20:49:08 5dd3537
feat(algebra/algebra/subalgebra): `subalgebra.map` commutes with supremum (#10899)
This PR proves `(S ⊔ T).map f = S.map f ⊔ T.map f`.

2021-12-19 18:51:43 41ced1c
feat(ring_theory/tensor_product): The tensor product `A ⊗ B` is generated by tensors `a ⊗ₜ b` (#10900)
The tensor product is generated by tensors, in terms of `algebra.adjoin`. This is an immediate consequence of `span_tmul_eq_top`.

2021-12-19 18:51:42 194bde8
feat(order/monotone): add `monotone_int_of_le_succ` etc (#10895)
Also use new lemmas to golf `zpow_strict_mono` and prove `zpow_strict_anti`.

2021-12-19 18:51:41 a60ef7c
feat(data/list/sort): subperm sorted implies sublist (#10892)
A "sub" version of the lemma directly above.

2021-12-19 18:51:40 faee358
feat (order/lexicographic):  add API lemmas (#10887)

2021-12-19 18:51:40 45ed9de
chore(order/complete_lattice): eliminate `finish` (#10876)
Removing uses of finish, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-19 17:06:17 68d9b42
feat(data/list/count): add lemma `list.count_singleton'` (#10880)
A generalisation of `count_singleton`: `count a [b] = ite (a = b) 1 0`

2021-12-19 12:15:00 9e5cbc1
feat(algebra/group_power/basic): generalize `zpow_neg_one` to `div_inv_monoid` (#10894)
Drop `zpow_neg_one₀`

2021-12-19 11:16:32 3fc32e3
feat(analysis/asymptotics): add `is_O.inv_rev`, `is_o.inv_rev` (#10896)

2021-12-19 10:01:23 7222463
chore(algebra/iterate_hom): use to_additive to fill missing lemmas (#10886)

2021-12-19 02:48:13 a2c3b29
chore(scripts): update nolints.txt (#10893)
I am happy to remove some nolints for you!

2021-12-18 20:11:21 ee17ab3
refactor(measure_theory/measure/hausdorff): change Hausdorff measure definition at 0 (#10859)
Currently, our definition of the Hausdorff measure ensures that it has no atom. This differs from the standard definition of the 0-Hausdorff measure, which is the counting measure -- and this convention is better behaved in many respects, for instance in a `d`-dimensional space the `d`-Hausdorff measure is proportional to Lebesgue measure, while currently we only have this for `d > 0`.
This PR refactors the definition of the Hausdorff measure, to conform to the standard definition.

2021-12-18 20:11:20 289ebe5
chore(category_theory/monoidal/End): Adding API for monoidal functors into `C ⥤ C` (#10841)
Needed for the shift refactor

2021-12-18 20:11:19 9f1b9bc
feat(linear_algebra/determinant): more properties of the determinant of linear maps (#10809)

2021-12-18 20:11:18 0d47369
feat(topology/metric/hausdorff_distance): more properties of cthickening (#10808)

2021-12-18 18:09:36 a6179f6
feat(linear_algebra/affine_space/affine_equiv): isomorphism with the units (#10798)
This adds:
* `affine_equiv.equiv_units_affine_map` (the main point in this PR)
* `affine_map.linear_hom`
* `affine_equiv.linear_hom`
* `simps` configuration for `affine_equiv`. In order to makes `simp` happy, we adjust the order of the implicit variables to all lemmas in this file, so that they match the order of the arguments to `affine_equiv`.
The new definition can be used to majorly golf `homothety_units_mul_hom`

2021-12-18 18:09:35 2c4e66f
split(data/finset/*): Split `data.finset.card` and `data.finset.fin` off `data.finset.basic` (#10796)
This moves stuff from `data.finset.basic` in two new files:
* Stuff about `finset.card` goes into `data.finset.card`
* Stuff about `finset.fin_range` and `finset.attach_fin` goes into `data.finset.fin`. I expect this file to be shortlived as I'm planning on killing `fin_range`.
I reordered lemmas thematically and it appeared that there were two pairs of duplicated lemmas:
* `finset.one_lt_card`, `finset.one_lt_card_iff`. They differ only for binder order.
* `finset.card_union_eq`, `finset.card_disjoint_union`. They are literally the same.
All are used so I will clean up in a later PR.
I'm crediting:
* Microsoft Corporation, Leonardo, Jeremy for 8dbee5b1ca9680a22ffe90751654f51d6852d7f0
* Chris Hughes for #231
* Scott for #3319

2021-12-18 18:09:34 fa46ef1
feat(linear_algebra/affine_space/combination): vsub distributivity lemmas (#10786)
Add lemmas about weighted sums of `-ᵥ` expressions in terms of
`weighted_vsub_of_point`, `weighted_vsub` and `affine_combination`,
with special cases where the points on one side of the subtractions
are constant, and lemmas about those three functions for constant
points used to prove those special cases.
These were suggested by one of the lemmas in #10632; the lemma
`affine_basis.vsub_eq_coord_smul_sum` is a very specific case, but
showed up that these distributivity lemmas were missing (and should
follow immediately from
`sum_smul_const_vsub_eq_vsub_affine_combination` in this PR).

2021-12-18 18:09:32 ecec43a
feat(algebraic_geometry/open_immersion): Easy results about open immersions. (#10776)

2021-12-18 18:09:31 6e59fbe
feat(field_theory/splitting_field): generalize some results from field to domain (#10726)
This PR does a few things generalizing / golfing facts related to polynomials and splitting fields.
- Generalize some results in `data.polynomial.field_division` to division rings
- generalize `C_leading_coeff_mul_prod_multiset_X_sub_C` from a field to a domain
- same for `prod_multiset_X_sub_C_of_monic_of_roots_card_eq`
- add a supporting useful lemma `roots_map_of_injective_card_eq_total_degree` saying that if we already have a full (multi)set of roots over a domain, passing along an injection gives the set of roots of the mapped polynomial
Inspired by needs of flt-regular.

2021-12-18 18:09:30 fec084c
feat(order/cover): The covering relation (#10676)
This defines `a ⋖ b` to mean that `a < b` and there is no element in between. It is generally useful, but in particular in the context of polytopes and successor orders.

2021-12-18 16:15:43 011203d
feat(algebra/group/inj_surj): _pow definitions for surjective too (#10832)
We already have these three variants for the injective counterparts, added in #10152.

2021-12-18 16:15:42 5915254
feat(data/matrix/rank): rank of a matrix (#10826)

2021-12-18 16:15:41 915e2b5
feat(linear_algebra/orientation): add orientation.map (#10815)
This also adds `alternating_map.dom_lcongr` following the naming established by `finsupp.dom_lcongr`.

2021-12-18 16:15:40 e70faf3
feat(ring_theory/prinicipal_ideal_domain): Bézout's lemma for PIDs (#10810)

2021-12-18 16:15:39 47c676e
feat(linear_algebra/affine_space/affine_subspace): affine_subspace.comap (#10795)
This copies a handful of lemmas from `group_theory/subgroup/basic.lean` to get things started.

2021-12-18 16:15:38 00454f2
feat(topology/algebra/mul_action): add an instance in the presence of `is_central_scalar` (#10787)

2021-12-18 16:15:38 5603398
feat(ring_theory/local_properties): Being finite / of finite type is local. (#10775)

2021-12-18 16:15:36 c10a872
feat(order): define a `rel_hom_class` for types of relation-preserving maps (#10755)
Use the design of #9888 to define a class `rel_hom_class F r s` for types of maps such that all `f : F` satisfy `r a b → s (f a) (f b)`. Requested by @YaelDillies.
`order_hom_class F α β` is defined as an abbreviation for `rel_hom_class F (≤) (≤)`.

2021-12-18 14:23:59 af682d3
feat(algebraic_geometry): A scheme is reduced iff its stalks are reduced. (#10879)

2021-12-18 14:23:58 65118e5
feat(analysis/calculus/deriv): add `has_deriv_at.tendsto_punctured_nhds` (#10877)

2021-12-18 14:23:57 0108884
feat(ring_theory/integral_closure): A subalgebra is contained in the integral closure iff it is integral (#10874)
A subalgebra is contained in the integral closure iff it is integral.

2021-12-18 14:23:56 7de517b
feat(algebra/algebra/subalgebra): Elements of supremum (#10872)
Adds a few lemmas about elements of a supremum of subalgebras (essentially copied from the analogous lemmas in `group_theory/subgroup.basic`).

2021-12-18 14:23:55 df11302
feat(algebra/algebra/subalgebra): Lemmas about `alg_hom.range` (#10871)
This PR adds a few lemmas about `alg_hom.range`.

2021-12-18 14:23:54 ac10136
feat(algebraic_geometry): The underlying topological space of a Scheme is T0 (#10869)

2021-12-18 14:23:53 cb0a6f7
feat(data/int): various lemmas (#10862)

2021-12-18 14:23:52 04e2f5f
feat(algebra/group/basic): add a few lemmas (#10856)
* move `inv_eq_one`, `one_eq_inv`, and `inv_ne_one` up;
* move `div_one'` below `div_eq_one` to golf the proof;
* add `div_eq_inv_iff`;
* golf 2 proofs.

2021-12-18 14:23:51 5859ec0
feat(analysis/normed_space/lattice_ordered_group): prove `order_closed_topology` for `normed_lattice_add_comm_group` (#10838)

2021-12-18 12:49:52 6353d6b
chore(*): more assorted proof simplifications (#10863)
A few more random small golfs found by linters

2021-12-18 11:01:55 0e995a3
refactor(*): kill a few uses of finish (#10860)

2021-12-18 10:22:17 ec2f350
feat(field_theory/intermediate_field): Range of `intermediate_field.val` (#10873)
The range of the algebra homomorphism `S.val` equals `S.to_subalgebra`.

2021-12-18 10:22:16 718ea93
feat(category_theory): Glue data (#10436)

2021-12-18 06:26:17 a252427
chore(algebra/algebra/basic): fix instances names to make doc links work (#10834)
The blank lines avoid sentences being pulled into the bulleted list above them.

2021-12-17 23:05:39 2043748
feat(data/finset/basic): add to_list_insert and to_list_cons (#10840)

2021-12-17 21:25:06 fc09b17
feat(measure_theory/integral/bochner): prove `set_integral_eq_subtype` (#10858)
Relate integral w.r.t. `μ.restrict s` and w.r.t. `comap (coe : s → α) μ`.

2021-12-17 19:23:39 86493f1
feat(data/nat): decidable exists le instance (#10857)
Adds the `le` instance for a corresponding `lt` instance above.

2021-12-17 19:23:38 70f4ba0
feat(algebra/group/hom): generalize `semiconj_by.map` and `commute.map` (#10854)
This generalizes the results in 2 ways: from `monoid_hom` to `mul_hom` and from `mul_hom` to `mul_hom_class`. For use in #10783.

2021-12-17 19:23:37 0b5f0a2
feat(data/finset/basic): add ite_subset_union, inter_subset_ite for finset (#10586)
Just a couple of lemmas to simplify expressions involving ite and union / inter on finsets, note that this is not related to `set.ite`.
From flt-regular.

2021-12-17 17:22:44 e5a844e
feat(data/finsupp/basic): add two versions of `finsupp.mul_prod_erase` (#10708)
Adding a counterpart for `finsupp` of `finset.mul_prod_erase`

2021-12-17 15:21:19 c9fe6d1
feat(algebra/algebra): instantiate `ring_hom_class` for `alg_hom` (#10853)
This PR provides a `ring_hom_class` instance for `alg_hom`, to be used in #10783. I'm not quite finished with my design of morphism classes for linear maps, but I expect this instance will stick around anyway: to avoid a dangerous instance `alg_hom_class F R A B → ring_hom_class F A B` (where the base ring `R` can't be inferred), `alg_hom_class` will probably have to be unbundled and take a `ring_hom_class` as a parameter.

2021-12-17 15:21:18 ba24b38
feat(ring_theory/noetherian): fg_pi (#10845)

2021-12-17 13:26:57 5a59800
feat(data/set/function): Cancelling composition on a set (#10803)
A few stupid lemmas

2021-12-17 12:31:31 6838233
feat(combinatorics/configuration): New file (#10773)
This PR defines abstract configurations of points and lines, and provides some basic definitions. Actual results are in the followup PR.

2021-12-17 12:31:30 8743573
feat(data/nat/count): The count function on naturals (#9457)
Defines `nat.count` a generic counting function on `ℕ`, computing how many numbers under `k` satisfy a given predicate".
Co-authored by:
Yaël Dillies, yael.dillies@gmail.com
Vladimir Goryachev, gor050299@gmail.com
Kyle Miller, kmill31415@gmail.com
Scott Morrison, scott@tqft.net
Eric Rodriguez, ericrboidi@gmail.com

2021-12-17 10:49:01 081cb8a
chore(algebra/associated): split off dependencies of `big_operators` (#10848)
This prepares for the replacement of `nat.prime` with `_root_.prime` by reducing the amount of dependencies needed to define `_root_.prime`.
Note that there wouldn't be an import loop without this change, just that `data/nat/prime.lean` would have a bigger amount of imports.
Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/nat.2Eprime

2021-12-17 10:49:00 862a68c
feat(algebra/big_operators/basic): add finset.prod_to_list (#10842)

2021-12-17 09:42:27 5558fd9
feat(topology/subset_properties): open/closed sets are locally compact spaces (#10844)
* add `inducing.image_mem_nhds_within`;
* move `inducing.is_compact_iff` up, use it to prove `embedding.is_compact_iff_is_compact_image`;
* prove `closed_embedding.is_compact_preimage`, use it to prove `closed_embedding.tendsto_cocompact`;
* prove `closed_embedding.locally_compact_space`, `open_embedding.locally_compact_space`;
* specialize to `is_closed.locally_compact_space`, `is_open.locally_compact_space`;
* rename `locally_finite.countable_of_sigma_compact` to `locally_finite.countable_univ`, provide `locally_finite.encodable`.

2021-12-17 02:13:44 b100af6
feat(combinatorics/simple_graph/basic): Incidence set lemmas (#10839)
Some more `simple_graph.incidence_set` API.

2021-12-16 21:36:33 9f9015c
refactor(category_theory/sites/*): Redefine the category of sheaves. (#10678)
This refactor redefines sheaves and morphisms of sheaves using bespoke structures.
This is an attempt to make automation more useful when dealing with categories of sheaves.
See the associated [zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Redefining.20Sheaves/near/263308542)

2021-12-16 17:52:29 601f2ab
fix(ring_theory/ideal/basic): remove universe restriction (#10843)

2021-12-16 16:16:13 905d887
chore(field_theory/ratfunc): to_fraction_ring_ring_equiv (#10806)
Rename the underlying `ratfunc.aux_equiv` for discoverability.

2021-12-16 10:58:20 eeef771
chore(field_theory/ratfunc): has_scalar in terms of localization (#10828)
Now that `localization.has_scalar` is general enough, fix a TODO

2021-12-16 10:58:19 542471f
feat(data/set/function): Congruence lemmas for `monotone_on` and friends (#10817)
Congruence lemmas for `monotone_on`, `antitone_on`, `strict_mono_on`, `strict_anti_on` using `set.eq_on`.
`data.set.function` imports `order.monotone` so we must put them here.

2021-12-16 10:58:18 b5b19a6
feat(ring_theory/local_property): Being reduced is a local property. (#10734)

2021-12-16 09:07:54 68ced9a
chore(analysis/mean_inequalities_pow): nnreal versions of some ennreal inequalities (#10836)
Make `nnreal` versions of the existing `ennreal` lemmas
```lean
lemma add_rpow_le_rpow_add {p : ℝ} (a b : ℝ≥0∞) (hp1 : 1 ≤ p) :
  a ^ p + b ^ p ≤ (a + b) ^ p 
```
and similar, introduced by @RemyDegenne in #5828.  Refactor the proofs of the `ennreal` versions to pass through these.

2021-12-16 09:07:53 d212f3e
feat(measure_theory/measure): new class is_finite_measure_on_compacts (#10827)
We have currently four independent type classes guaranteeing that a measure of compact sets is finite: `is_locally_finite_measure`, `is_regular_measure`, `is_haar_measure` and `is_add_haar_measure`. Instead of repeting lemmas for all these classes, we introduce a new typeclass saying that a measure is finite on compact sets.

2021-12-16 08:30:05 87e2f24
feat(category_theory/adjunction/evaluation): Evaluation has a left and a right adjoint. (#10793)

2021-12-16 02:33:43 8e4b3b0
chore(data/polynomial/field_division): beta-reduce (#10835)

2021-12-15 21:49:21 5a835b7
chore(*): tweaks taken from gh-8889 (#10829)
That PR is stale, but contained some trivial changes we should just take.

2021-12-15 21:49:20 8218a78
feat(analysis/normed_space/basic): formula for `c • sphere x r` (#10814)

2021-12-15 21:49:19 b82c0d2
feat(topology/metric_space/isometry): (pre)image of a (closed) ball or a sphere (#10813)
Also specialize for translations in a normed add torsor.

2021-12-15 21:49:18 21c9d3b
feat(topology/metric_space/hausdorff_distance): add more topological properties API to thickenings (#10661)
More lemmas about thickenings, especially topological properties, still in preparation for the portmanteau theorem on characterizations of weak convergence of Borel probability measures.

2021-12-15 19:58:19 ef69cac
chore(topology/continuous_function/bounded): remove extra typeclass assumption (#10823)
Remove `[normed_star_monoid β]` from the typeclass assumptions of `[cstar_ring (α →ᵇ β)]` -- it was doing no harm, since it's implied by the assumption `[cstar_ring β]`, but it's unnecessary.

2021-12-15 19:58:18 00c55f5
feat(algebra/module/linear_map): interaction of linear maps and pointwise operations on sets (#10821)

2021-12-15 19:58:17 dfb78f7
feat(analysis/special_functions/complex): range of `complex.exp (↑x * I)` (#10816)

2021-12-15 19:58:16 81e58c9
feat(analysis/mean_inequalities): corollary of Hölder inequality (#10789)
Several versions of the fact that
```
(∑ i in s, f i) ^ p ≤ (card s) ^ (p - 1) * ∑ i in s, (f i) ^ p
```
for `1 ≤ p`.

2021-12-15 19:58:15 026e692
chore(combinatorics/simple_graph): fix name mixup (#10785)
Fixes the name mixup from #10778 and reorders lemmas to make the difference more clear.

2021-12-15 19:58:13 204aa7e
feat(data/int/basic): more int.sign API (#10781)

2021-12-15 19:58:12 75b4e5f
chore(*): remove edge case assumptions from lemmas  (#10774)
Remove edge case assumptions from lemmas when the result is easy to prove without the assumption.
We clean up a few lemmas in the library which assume something like `n \ne 0`,  `0 < n`, or `set.nonempty` but where the result is easy to prove by case splitting on this instead and then simplifying.
Removing these unneeded assumptions makes such lemmas easier to apply, and lets us minorly golf a few other proofs along the way.
The main external changes are to remove assumptions to around 30 lemmas, and make some arguments explicit when they were no longer inferable, all other lines are just fixing up the proofs, which shortens some proofs in the process.
I also added a couple of lemmas to help simp in a couple of examples.
The code I used to find these is in the branch https://github.com/leanprover-community/mathlib/tree/alexjbest/simple_edge_cases_linter

2021-12-15 19:58:10 3f55e02
feat(data/{multiset, finset}/basic): add card_mono (#10771)
Add a `@[mono]` lemma for `finset.card`. Also `multiset.card_mono` as an alias of a preexisting lemma.

2021-12-15 19:58:08 a0b6bab
split(logic/nonempty): Split off `logic.basic` (#10762)
This moves the lemmas about `nonempty` to a new file `logic.basic`
I'm crediting Johannes for 79483182abffcac3a1ddd7098d47a475e75a5ed2

2021-12-15 19:58:07 02cdc81
refactor(order/sup_indep): Get rid of decidable equality assumption (#10673)
The `erase` in the definition required a `decidable_eq`. We can make do without it while keeping it functionally the same.

2021-12-15 19:58:06 9525f5e
feat(order/zorn): Added some results about chains (#10658)
Added `chain_empty`, `chain_subsingleton`, and `chain.max_chain_of_chain`.
The first two of these are immediate yet useful lemmas. The last one is a consequence of Zorn's lemma, which generalizes Hausdorff's maximality principle.

2021-12-15 19:58:04 accdb8f
feat(measure_theory/integral/divergence_theorem): specialize for `f : ℝ → E` and `f g : ℝ × ℝ → E` (#10616)

2021-12-15 18:06:00 4ff9b82
feat(data/set/lattice): new lemma Union_singleton_eq_range (#10819)

2021-12-15 18:05:59 dc732a3
feat(logic/basic): When an If-Then-Else is not one of its arguments (#10800)
Conditions for `ite P a b ≠ a` and `ite P a b ≠ b`.

2021-12-15 18:05:58 7130d75
chore(*): introduce notation for left/right/punctured nhds (#10694)
New notation:
* `𝓝[≤] x`: the filter `nhds_within x (set.Iic x)` of left-neighborhoods of `x`;
* `𝓝[≥] x`: the filter `nhds_within x (set.Ici x)` of right-neighborhoods of `x`;
* `𝓝[<] x`: the filter `nhds_within x (set.Iio x)` of punctured left-neighborhoods of `x`;
* `𝓝[>] x`: the filter `nhds_within x (set.Ioi x)` of punctured right-neighborhoods of `x`;
* `𝓝[≠] x`: the filter `nhds_within x {x}ᶜ` of punctured neighborhoods of `x`.

2021-12-15 18:05:57 6043522
refactor(order/basic): Change definition of `<` on `α × β` (#10667)
This prove that `a < b` on `prod` is equivalent to `a.1 < b.1 ∧ a.2 ≤ b.2 ∨ a.1 ≤ b.1 ∧ a.2 < b.2`.

2021-12-15 18:05:56 6530769
doc(algebra/algebra/basic): expand the docstring (#10221)
This doesn't rule out having a better way to spell "non-unital non-associative algebra" in future, but let's document how it can be done today.
Much of this description is taken from [my talk at CICM's FMM](https://eric-wieser.github.io/fmm-2021/#/algebras).

2021-12-15 17:00:14 bb51df3
chore(computability/regular_expressions): eliminate `finish` (#10811)
Removing uses of `finish`, as discussed in this Zulip thread (https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20sat.20solvers)

2021-12-15 17:00:12 5658241
feat(ring_theory/localization,group_theory/monoid_localization): other scalar action instances (#10804)
As requested by @pechersky. With this instance it's possible to state:
```lean
import field_theory.ratfunc
import data.complex.basic
import ring_theory.laurent_series
noncomputable example : ratfunc ℂ ≃ₐ[ℂ] fraction_ring (polynomial ℂ) := sorry
```

2021-12-15 17:00:11 930ae46
chore(analysis/special_functions/pow): remove duplicate lemmas concerning monotonicity of `rpow` (#10794)
The lemmas `rpow_left_monotone_of_nonneg` and `rpow_left_strict_mono_of_pos` were duplicates of `monotone_rpow_of_nonneg` and `strict_mono_rpow_of_pos`, respectively. The duplicates are removed as well as references to them in mathlib in `measure_theory/function/{continuous_function_dense, lp_space}`

2021-12-15 15:40:27 61949af
doc(linear_algebra/std_basis): update module doc (#10818)
The old module documentation for this file still referred to the removed old `is_basis`-based definitions. This PR updates the documentation to refer to the new bundled `basis`-based definitions.

2021-12-15 12:44:42 9f787c2
doc(undergrad): Link the affine group (#10797)
This is the statement `group (P₁ ≃ᵃ[k] P₁)`. Per the "Undergrad TODO trivial targets" wiki page, this should [match wikipedia](https://en.wikipedia.org/wiki/Affine_group), which says:
> In mathematics, the affine group or general affine group of any affine space over a field K is the group of all invertible affine transformations from the space into itself.
I guess you could also ask for the statement that `(P₁ ≃ᵃ[k] P₁) ≃ units (P₁ →ᵃ[k] P₁)`, but I'll PR that separately.

2021-12-15 10:36:10 c574e38
feat(data/finsupp/basic): Add `finsupp.erase_of_not_mem_support` (#10689)
Analogous to `list.erase_of_not_mem`

2021-12-15 09:53:43 03a250a
chore(data/sym/sym2): Better lemma names (#10801)
Renames
* `mk_has_mem` to `mk_mem_left`
* `mk_has_mem_right` to `mk_mem_right`. Just doesn't follow the convention.
* `mem_other` to `other` in lemma names. The `mem` is confusing and is only part of the fully qualified name for dot notation to work.
* `sym2.elems_iff_eq` to `mem_and_mem_iff`. `elems` is never used elsewhere. Could also be `mem_mem_iff`.
* `is_diag_iff_eq` to `mk_is_diag_iff`. The form of the argument was ambiguous. Adding `mk` solves it.

2021-12-15 07:05:10 40cfdec
chore(algebra/algebra/basic): alg_equiv.map_smul (#10805)

2021-12-15 06:22:11 8f5031a
docs(undergrad): more links (#10790)
The only change to existing declaration links is removing wrong claims of having proving Sylvester's law of inertia (we don't have that the number of 1 and -1 is independent from the basis).

2021-12-14 14:14:24 e3eb0eb
feat(measure_theory/integral/set_to_l1): various properties of the set_to_fun construction (#10713)

2021-12-14 12:57:08 1367c19
feat(algebraic_geometry): LocallyRingedSpace has coproducts. (#10665)

2021-12-14 11:07:17 9078914
feat(algebra/group): make `map_[z]pow` generic in `monoid_hom_class` (#10749)
This PR makes `map_pow` take a `monoid_hom_class` instead of specifically a `monoid_hom`.

2021-12-14 09:33:38 f46a7a0
chore(data/equiv/ring): inv_fun_eq_symm (#10779)
Like what we have for `alg_equiv`.

2021-12-14 09:33:37 6d15ea4
feat(combinatorics/simple_graph): simp lemmas about spanning coe (#10778)
A couple of lemmas from #8737 which don't involve connectivity, plus some extra related results.
cc @kmill

2021-12-14 09:33:36 05d8767
feat(group_theory/order_of_element): additivize (#10766)

2021-12-14 07:40:55 85cb4a8
chore(measure_theory/decomposition/signed_hahn): Fixed a few typos (#10777)

2021-12-14 07:40:54 f070a69
move(algebra/order/lattice_group): Move from `algebra.lattice_ordered_group` (#10763)
Rename `algebra.lattice_ordered_group` in `algebra/order/lattice_group`.

2021-12-14 07:40:53 f727e12
chore(logic/basic): tidy `ite` section and misplaced lemmas (#10761)
Moves a few lemmas down and use `variables`.

2021-12-14 07:40:52 dda8a10
feat(data/mv_polynomial/basic): add `mv_polynomial.support_sum` (#10731)

2021-12-14 07:40:51 9af43e4
feat(analysis/inner_product_space/basic): inner product as a (continuous) sesquilinear map (#10684)
This PR replaces `inner_right (v : E) : E →L[𝕜] 𝕜` (the inner product with a fixed left element as a continuous linear map) by `innerₛₗ : E →ₗ⋆[𝕜] E →ₗ[𝕜] 𝕜 ` and `innerSL : E →L⋆[𝕜] E →L[𝕜] 𝕜 `, which bundle the inner product as a sesquilinear map and as a continuous sesquilinear map respectively.

2021-12-14 05:36:16 f3fa5e3
feat(data/mv_polynomial/variables): add `mv_polynomial.degree_of_zero` (#10768)

2021-12-14 05:36:15 ee78812
feat(number_theory/padics/padic_norm): lemmas (#10765)

2021-12-14 05:36:14 9b1a832
feat(data/nat/prime): dvd_of_factors_subperm (#10764)

2021-12-14 05:36:13 d9edeea
refactor(linear_algebra/orientation): add refl, symm, and trans lemma (#10753)
This restates the `reflexive`, `symmetric`, and `transitive` lemmas in a form understood by `@[refl]`, `@[symm]`, and `@[trans]`.
As a bonus, these versions also work with dot notation.
I've discarded the original statements, since they're always recoverable via the fields of equivalence_same_ray, and keeping them is just noise.

2021-12-14 05:36:12 0000497
feat(order/basic, order/bounded_order): Generalized `preorder` to `has_lt` (#10695)
This is a continuation of #10664.

2021-12-14 04:24:23 32c24f1
chore(set_theory/ordinal_arithmetic): simplified proof of `is_normal.le_self` (#10770)
Thanks to #10732, this proof is now a one-liner.

2021-12-14 01:29:31 cd462cd
feat(topology/algebra/*, analysis/normed_space/operator_norm): construct bundled {monoid_hom, linear_map} from limits of such maps (#10700)
Given a function which is a pointwise limit of {`monoid_hom`, `add_monoid_hom`, `linear_map`} maps, construct a bundled version of the corresponding type with that function as its `to_fun`. Then this construction is used to replace the existing in-proof construction that the continuous linear maps into a banach space is itself complete.

2021-12-14 00:37:44 77e5248
feat(algebra/triv_sq_zero_ext): universal property (#10754)

2021-12-13 23:34:29 c3391c2
feat(analysis/convex/simplicial_complex): Simplicial complexes (#9762)
This introduces simplicial complexes in modules.

2021-12-13 21:33:22 7181b3a
chore(order/hom): rearrange definitions of `order_{hom,iso,embedding}` (#10752)
We symmetrize the locations of `rel_{hom,iso,embedding}` and `order_{hom,iso,embedding}` by putting the `rel_` definitions in `order/rel_iso.lean` and the `order_` definitions in `order/hom/basic.lean`. (`order_hom.lean` needed to be split up to fix an import loop.) Requested by @YaelDillies.
## Moved definitions
 * `order_hom`, `order_iso`, `order_embedding` are now in `order/hom/basic.lean`
 * `order_hom.has_sup` ... `order_hom.complete_lattice` are now in `order/hom/lattice.lean`
## Other changes
Some import cleanup.

2021-12-13 19:31:53 b351ca9
chore(algebra/algebra/tower): golf ext lemma (#10756)
It turns out that we have both `algebra.ext` and `algebra.algebra_ext`, with slightly different statements.
This changes one to be proved in terms of the other.

2021-12-13 19:31:52 3b2cf53
feat(order/well_founded) Added `strict_mono.id_le_of_wo` (#10732)
This generalizes `strict_mono.id_le`.

2021-12-13 19:31:51 c895ddd
feat(topology/algebra/group): add homeomorph.prod_units (#10725)

2021-12-13 19:31:50 ad88a83
feat(probability_theory/martingale): add super/sub-martingales (#10710)

2021-12-13 19:31:49 c7e355d
feat(algebra/big_operators/finprod): add div lemmas (#10472)

2021-12-13 17:35:09 0c0ee7b
refactor(data/set/pairwise): Make arguments of `set.pairwise` semi-implicit (#10740)
The previous definition was `∀ x ∈ s, ∀ y ∈ s, x ≠ y → r x y`. It now is `∀ ⦃x⦄, x ∈ s → ∀ ⦃y⦄, y ∈ s → x ≠ y → r x y`.
The explicitness resulted in a lot of useless `_` and general pain using `set.pairwise`, `set.pairwise_disjoint`, `zorn.chain`, `is_antichain`...

2021-12-13 15:33:28 ee8de4c
doc(linear_algebra/finite_dimensional): update doc to new definition (#10758)
`finite_dimensional` is now (since a couple of months) defined to be `module.finite`. The lines modified by this PR are about the old definition.

2021-12-13 15:33:27 108eb0b
feat(combinatorics/additive/salem_spencer): Salem-Spencer sets and Roth numbers (#10509)
This defines Salem-Spencer sets and Roth numbers in (additive) monoids.

2021-12-13 15:33:26 e174736
feat(ring_theory/unique_factorization_domain): add count lemmas (#10475)

2021-12-13 15:33:25 efbbb76
feat(ring_theory/graded_algebra): `homogeneous_element` (#10118)
This pr is about what `homogeneous_element` of graded ring is.
We need this definition to make the definition of homogeneous ideal more natural, i.e. we can say that a homogeneous ideal is just an ideal spanned by homogeneous elements.

2021-12-13 13:35:58 1589c7b
feat(linear_algebra/determinant): determinant of a linear equivalence as a unit (#10751)

2021-12-13 13:35:57 324a605
chore(order): rename `preorder_hom` to `order_hom` (#10750)
For consistency with `order_embedding` and `order_iso`, this PR renames `preorder_hom` to `order_hom`, at the request of @YaelDillies.

2021-12-13 13:35:56 35cd7c0
refactor(set_theory/ordinal_arithmetic) Separate `is_normal.lt_iff` (#10745)
We split off `is_normal.strict_mono` from `is_normal.lt_iff`. The reasoning is that normal functions are usually defined as being strictly monotone, so this should be a separate theorem.

2021-12-13 11:53:34 7697ec6
feat(analysis/special_function/integrals): integral of `x ^ r`, `r : ℝ`, and `x ^ n`, `n : ℤ` (#10650)
Also generalize `has_deriv_at.div_const` etc.

2021-12-13 09:36:41 779517b
feat(algebra/order/floor): Floor of `a / n` and other lemmas (#10748)
A few floor lemmas + one `tsub` lemma

2021-12-13 09:36:40 563c364
chore(topology/maps): golf, use section vars (#10747)
Also add `quotient_map.is_closed_preimage`

2021-12-13 09:36:38 10fb7f9
feat(archive/imo): IMO 2005 problem 4 (modular arithmetic) (#10746)

2021-12-13 09:36:37 9d73418
split(data/set/prod): split off `data.set.basic` (#10739)
This moves `set.prod`, `set.pi` and `set.diagonal` from `data.set.basic` to a new file `data.set.prod`.
I'm crediting
* Mario for `set.prod` from bd013e8089378e8057dc7e93c9eaf2c8ebaf25a2
* Johannes for `set.pi` from da7bbd7fc2c80a785f7992bb7751304f6cafe235
* Patrick for `set.diagonal` from #3118

2021-12-13 09:36:36 e60899c
feat(linear_algebra/orientation): inherit an action by `units R` on `module.ray R M` (#10738)
This action is just the action inherited on the elements of the module under the quotient.
We provide it generally for any group `G` that satisfies the required properties, but are only really interested in `G = units R`.
This PR also provides `module.ray.map`, for sending a ray through a linear equivalence.
This generalization also provides us with `mul_action (M ≃ₗ[R] M) (module.ray R M)`, which might also turn out to be useful.

2021-12-13 09:36:35 ea88bd6
refactor(algebra/triv_sq_zero_ext): generalize and cleanup (#10729)
This:
* Generalizes typeclass assumptions on many lemmas
* Generalizes and adds missing typeclass instances on `triv_sq_zero_ext`, most notably the algebra structure over a different ring.
* Reorders many of the lemmas in the file to ensure that the right arguments are implicit / explicit

2021-12-13 09:36:34 e70e22f
feat(data/{list, multiset, finset}/range): add range_add (#10706)
Adds `range_add` lemmas

2021-12-13 09:36:32 e4b6b5c
feat(order/galois_connection): add lt_iff_lt (#10702)
A lemma for galois connections on linear orders.

2021-12-13 09:36:31 29fecae
feat(data/polynomial/degree/definitions): add pow lemmas (#10698)
Add lemmas `nat_degree_pow_le` and `coeff_pow_degree_mul_degree`

2021-12-13 09:36:30 fb81950
feat(analysis/convex/basic): lemmas about midpoint and segment (#10682)

2021-12-13 09:36:28 f8171e0
feat(algebra/graded_monoid): dependent products (#10674)
This introduces `list.dprod`, which takes the (possibly non-commutative) product of a list of graded elements of type `A i`. This definition primarily exist to allow `graded_monoid.mk` and `direct_sum.of` to be pulled outside a product, such as in the new `graded_monoid.mk_list_dprod` and `direct_sum.of_list_dprod` lemmas added in this PR.

2021-12-13 09:36:27 309da20
feat(*): Random lemmas about adjoin/span. (#10666)

2021-12-13 09:36:26 e19473a
feat(algebra/pointwise): Multiplying a singleton  (#10660)
and other lemmas about `finset.product` and singletons.

2021-12-13 09:36:25 ec48e3b
feat(analysis/convex/strict): Strictly convex sets (#10648)
This defines strictly convex sets.

2021-12-13 09:36:23 2d47c1d
feat(ring_theory/polynomial/cyclotomic/*): ɸₙ(1) = 1 (#10483)
(for `n` not a prime power)

2021-12-13 07:53:00 7cd8adb
chore(category_theory/limits): Generalize universe for preserving limits (#10736)

2021-12-13 07:52:59 381b954
feat(algebraic_geometry): An integral scheme is reduced and irreducible (#10733)

2021-12-13 07:52:58 214a80f
feat(data/mv_polynomial/variables): API for mv_polynomial.degree_of (#10646)
This PR provides some API for `mv_polynomial.degree_of` for `comm_ring` and `comm_semiring`. I don't know which of these lemmas should be simp lemmas.

2021-12-13 07:52:57 8b8f08d
feat(category_theory/limits): The associativity of pullbacks and pushouts. (#10619)
Also provides the pasting lemma for pullback (pushout) squares

2021-12-13 07:52:56 b6b47ed
feat(algebraic_geometry/presheafed_space): Open immersions of presheafed spaces has pullbacks. (#10069)

2021-12-13 07:15:39 fcd0f11
feat(category_theory/flat_functor): Generalize results into algebraic categories. (#10735)
Also proves that the identity is flat, and compositions of flat functors are flat.

2021-12-13 00:12:14 0690542
feat(data/nat/prime): add `prime.dvd_mul_of_dvd_ne` (#10727)

2021-12-13 00:12:12 0c248b7
feat(algebra/{group,ring}/opposite): `{ring,monoid}_hom.from_opposite` (#10723)
We already have the `to_opposite` versions.

2021-12-13 00:12:11 4b07949
chore(algebra/module/submodule): missing is_central_scalar instance (#10720)

2021-12-13 00:12:10 41def6a
feat(algebra/tropical/big_operators): sum, prod, Inf (#10544)

2021-12-12 23:25:29 b9f2440
chore(linear_algebra/orientation): golf a proof (#10742)

2021-12-12 21:34:23 19dd4be
chore(tactic/reserved_notation): change precedence of sup and inf (#10623)
Put the precedence of `⊔` and `⊓` at 68 and 69 respectively, which is above `+` (65), `∑` and `∏` (67), and below `*` (70). This makes sure that inf and sup behave in the same way in expressions where arithmetic operations appear (which was not the case before).
Discussion: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/inf.20and.20sup.20don't.20bind.20similarly

2021-12-12 15:54:29 61b0f41
refactor(data/{mv_,}polynomial): lemmas about `adjoin` (#10670)
Prove `adjoin {X} = ⊤` and `adjoin (range X) = ⊤` for `polynomial`s
and `mv_polynomial`s much earlier and use these equalities to golf
some proofs.
Also drop some `comm_` in typeclass assumptions.

2021-12-12 06:54:07 e68fcf8
move(data/bool/*): Move `bool` files in one folder (#10718)
* renames `data.bool` to `data.bool.basic`
* renames `data.set.bool` to `data.bool.set`
* splits `data.bool.all_any` off `data.list.basic`

2021-12-12 01:37:53 50e318e
feat(algebra/order/ring): pos_iff_pos_of_mul_pos, neg_iff_neg_of_mul_pos (#10634)
Add four lemmas, deducing equivalence of `a` and `b` being positive or
negative from such a hypothesis for their product, that don't currently
seem to be present.

2021-12-11 21:21:53 f361373
chore(order/boolean_algebra): add `compl_sdiff` (#10722)
Also mark `sdiff_compl` and `top_sdiff` as `@[simp]`.

2021-12-11 21:21:52 f9fff7c
feat(measure_theory): integral is mono in measure (#10721)
* Bochner integral of a nonnegative function is monotone in measure;
* set integral of a nonnegative function is monotone in set (generalize existing lemma);
* interval integral of a nonnegative function is monotone in interval.

2021-12-11 21:21:51 cc5ff8c
feat(group_theory/submonoid): The submonoid of left inverses of a submonoid (#10679)

2021-12-11 21:21:50 1c2b742
feat(ring_theory/polynomial/cyclotomic/eval): `cyclotomic_pos` (#10482)

2021-12-11 19:31:57 f068b9d
refactor(algebra/group/basic): Migrate add_comm_group section into comm_group section (#10565)
Currently mathlib has a rich set of lemmas connecting the addition, subtraction and negation additive commutative group operations, but a far thinner collection of results for multiplication, division and inverse multiplicative commutative group operations, despite the fact that the former can be generated easily from the latter via to_additive.
This PR refactors the additive results in the `add_comm_group` section as the equivalent multiplicative results in the `comm_group` section and then recovers the additive results via to_additive. There is a complication in that unfortunately the multiplicative forms of the names of some of the `add_comm_group` lemmas collide with existing names in `group_with_zero`. I have worked around this by appending an apostrophe to the name and then manually overriding the names generated by to_additive. In a few cases, names with `1...n` appended apostrophes already existed. In these cases I have appended `n+1` apostrophes.
Previous discussion
The `add_group` section was previously tackled in #10532.

2021-12-11 13:03:44 294753e
Fix comment typo (#10715)

2021-12-11 11:06:55 9741766
feat(analysis/normed_space): normed space is homeomorphic to the unit ball (#10690)

2021-12-11 09:33:55 08d30d6
chore(algebra/pointwise): Better `variables` management (#10686)
Moves a few variables from lemma statements to `variables`.

2021-12-11 04:23:13 d856bf9
feat(ring_theory/localization): Clearing denominators (#10668)

2021-12-10 23:48:44 0b87b0a
chore(algebra/group_with_zero/defs: Rename `comm_cancel_monoid_with_zero` to `cancel_comm_monoid_with_zero` (#10669)
We currently have `cancel_comm_monoid` but `comm_cancel_monoid_with_zero`. This renames the latter to follow the former.
Replaced `comm_cancel_` by `cancel_comm_` everywhere.

2021-12-10 21:59:37 52c2f74
docs(topology/homotopy): add namespace in docstring to fix links (#10711)
Currently all the occurences of `homotopy` in the docs link to `algebra/homology/homotopy`.

2021-12-10 21:59:36 a12fc70
feat(logic/function/basic): surjective function is an epimorphism (#10691)
* Move proofs about `surjective`/`injective` and `epi`/`mono` to `logic.function.basic` (formulated in terms of injectivity of composition), make them universe polymorphic.
* drop `forall_iff_forall_surj`, use `function.surjective.forall` instead.

2021-12-10 20:23:28 3e1d4d3
feat(algebra/gcd_monoid): `associates` lemmas (#10705)

2021-12-10 19:12:57 b7ac833
feat(ring_theory/discriminant): add the discriminant of a family of vectors (#10350)
We add the definition and some basic results about the discriminant.
From FLT-regular.
- [x] depends on: #10657

2021-12-10 17:07:55 71e9f90
feat(order/basic): Slightly generalized `densely_ordered` (#10664)
Changed `[preorder α]` to `[has_lt α]`.

2021-12-10 15:16:09 12e18e8
feat(data/nat/gcd): coprime add mul lemmas (#10588)
Adds `coprime m (n + k * m) ↔ coprime m n` for nats, (and permutations thereof).

2021-12-10 15:16:08 18ce3a8
feat(group_theory/group_action/defs): add a typeclass to show that an action is central (aka symmetric) (#10543)
This adds a new `is_central_scalar` typeclass to indicate that `op m • a = m • a` (or rather, to indicate that a type has the same right and left scalar action on another type).
The main instance for this is `comm_semigroup.is_central_scalar`, for when `m • a = m * a` and `op m • a = a * m`, and then all the other instances follow transitively when `has_scalar R (f M)` is derived from `has_scalar R M`:
* `prod`
* `pi`
* `ulift`
* `finsupp`
* `dfinsupp`
* `monoid_algebra`
* `add_monoid_algebra`
* `polynomial`
* `mv_polynomial`
* `matrix`
* `add_monoid_hom`
* `linear_map`
* `complex`
* `pointwise` instances on:
  * `set`
  * `submonoid`
  * `add_submonoid`
  * `subgroup`
  * `add_subgroup`
  * `subsemiring`
  * `subring`
  * `submodule`

2021-12-10 13:26:26 94d51b9
chore(algebraic_geometry/presheafed_space): Make `has_colimits` work faster (#10703)

2021-12-10 13:26:25 c29b706
feat(data/int/gcd): another version of Euclid's lemma (#10622)
We already have something described as "Euclid's lemma" in `ring_theory/unique_factorization_domain`, but not this specific statement of the lemma.
This is Theorem 1.5 in Apostol (1976) Introduction to Analytic Number Theory

2021-12-10 13:26:24 4471de6
feat(order/lattice): define a lattice structure using an injective map to another lattice (#10615)
This is done similarly to `function.injective.group` etc.

2021-12-10 13:26:23 ebbb991
feat(ring_theory/principal_ideal_domain): add some corollaries about is_coprime (#10601)

2021-12-10 13:26:22 46ac3c4
feat(*): introduce classes for types of homomorphism (#9888)
This PR is the main proof-of-concept in my plan to use typeclasses to reduce duplication surrounding `hom` classes. Essentially, I want to take each type of bundled homs, such as `monoid_hom`, and add a class `monoid_hom_class` which has an instance for each *type* extending `monoid_hom`. Declarations that now take a parameter of the specific type `monoid_hom M N` can instead take a more general `{F : Type*} [monoid_hom_class F M N] (f : F)`; this means we don't need to duplicate e.g. `monoid_hom.map_prod` to `ring_hom.map_prod`, `mul_equiv.map_prod`, `ring_equiv.map_prod`, or `monoid_hom.map_div` to `ring_hom.map_div`, `mul_equiv.map_div`, `ring_equiv.map_div`, ...
Basically, instead of having `O(n * k)` declarations for `n` types of homs and `k` lemmas, following the plan we only need `O(n + k)`.
## Overview
 * Change `has_coe_to_fun` to include the type of the function as a parameter (rather than a field of the structure) (**done** as part of #7033)
 * Define a class `fun_like`, analogous to `set_like`, for types of bundled function + proof (**done** in #10286)
 * Extend `fun_like` for each `foo_hom` to create a `foo_hom_class` (**done** in this PR for `ring_hom` and its ancestors, **todo** in follow-up for the rest)
 * Change parameters of type `foo_hom A B` to take `{F : Type*} [foo_hom_class F A B] (f : F)` instead (**done** in this PR for `map_{add,zero,mul,one,sub,div}`, **todo** in follow-up for remaining declarations)
## API changes
Lemmas matching `*_hom.map_{add,zero,mul,one,sub,div}` are deprecated. Use the new `simp` lemmas called simply `map_add`, `map_zero`, ...
Namespaced lemmas of the form `map_{add,zero,mul,one,sub,div}` are now protected. This includes e.g. `polynomial.map_add` and `multiset.map_add`, which involve `polynomial.map` and `multiset.map` respectively. In fact, it should be possible to turn those `map` definitions into bundled maps, so we don't even need to worry about the name change.
## New classes
 * `zero_hom_class`, `one_hom_class` defines `map_zero`, `map_one`
 * `add_hom_class`, `mul_hom_class` defines `map_add`, `map_mul`
 * `add_monoid_hom_class`, `monoid_hom_class` extends `{zero,one}_hom_class`, `{add,mul}_hom_class`
 * `monoid_with_zero_hom_class` extends `monoid_hom_class` and `zero_hom_class`
 * `ring_hom_class` extends `monoid_hom_class`, `add_monoid_hom_class` and `monoid_with_zero_hom_class`
## Classes still to be implemented
Some of the core algebraic homomorphisms are still missing their corresponding classes:
 * `mul_action_hom_class` defines `map_smul`
 * `distrib_mul_action_hom_class`, `mul_semiring_action_hom_class` extends the above
 * `linear_map_class` extends `add_hom_class` and defines `map_smulₛₗ`
 * `alg_hom_class` extends `ring_hom_class` and defines `commutes`
We could also add an `equiv_like` and its descendants `add_equiv_class`, `mul_equiv_class`, `ring_equiv_class`, `linear_equiv_class`, ...
## Other changes
`coe_fn_coe_base` now has an appropriately low priority, so it doesn't take precedence over `fun_like.has_coe_to_fun`.
## Why are you unbundling the morphisms again?
It's not quite the same thing as unbundling. When using unbundled morphisms, parameters have the form `(f : A → B) (hf : is_foo_hom f)`; bundled morphisms look like `(f : foo_hom A B)` (where `foo_hom A B` is equivalent to `{ f : A → B // is_foo_hom f }`; typically you would use a custom structure instead of `subtype`). This plan puts a predicate on the *type* `foo_hom` rather than the *elements* of the type as you would with unbundled morphisms. I believe this will preserve the advantages of the bundled approach (being able to talk about the identity map, making it work with `simp`), while addressing one of its disadvantages (needing to duplicate all the lemmas whenever extending the type of morphisms).
## Discussion
Main Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Typeclasses.20for.20morphisms
Some other threads referencing this plan:
 * https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Morphism.20refactor
 * https://leanprover.zulipchat.com/#narrow/stream/263328-triage/topic/issue.20.231044.3A.20bundling.20morphisms
 * #1044
 * #4985

2021-12-10 11:52:56 165e055
refactor(group_theory/quotient_group): use `con` (#10699)
Use `con` to define `group` structure on `G ⧸ N` instead of repeating the construction in this case.

2021-12-10 11:52:55 9a24b3e
chore(ring_theory/noetherian): rename `submodule.fg_map` to `submodule.fg.map` (#10688)
This renames:
* `submodule.fg_map` to `submodule.fg.map` (to match `submonoid.fg.map` and enable dot notation)
* `submodule.map_fg_of_fg` to `ideal.fg.map`
* `submodule.fg_ker_ring_hom_comp` to `ideal.fg_ker_comp` to match `submodule.fg_ker_comp`
and defines a new `ideal.fg` alias to avoid unfolding to `submodule R R` and `submodule.span`.

2021-12-10 11:52:54 24cf723
feat(ring_theory/polynomial/cyclotomic): generalize `is_root_cyclotomic` (#10687)

2021-12-10 11:52:52 3dcdf93
feat(group_theory/finiteness): Lemmas about finitely generated submonoids (#10681)

2021-12-10 11:52:50 508fc18
feat(ring_theory/ideal): Power of a spanning set is a spanning set (#10656)

2021-12-10 09:20:23 ce0e2c4
feat(category_theory/limits): Pullback API (#10620)
Needed for constructing fibered products of Schemes

2021-12-10 03:16:48 e7959fb
chore(scripts): update nolints.txt (#10697)
I am happy to remove some nolints for you!

2021-12-10 00:34:16 1ecdf71
chore(algebra/punit_instances): add `comm_cancel_monoid_with_zero`, `normalized_gcd_monoid`, and scalar action instances (#10312)
Motivated by [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Is.200.20not.20equal.20to.201.3F/near/261366868). 
This also moves the simp lemmas closer to the instances they refer to.

2021-12-09 21:51:35 61dd343
feat(probability_theory/martingale): define martingales (#10625)

2021-12-09 19:38:25 e618cfe
feat(topology/continuous_function/bounded): register instances of `star` structures (#10570)
Prove that the bounded continuous functions which take values in a normed C⋆-ring themselves form a C⋆-ring. Moreover, if the codomain is a normed algebra and a star module over a normed ⋆-ring, then so are the bounded continuous functions. Thus the bounded continuous functions form a C⋆-algebra when the codomain is a C⋆-algebra.

2021-12-09 17:18:51 2538626
fix(tactic/ring): instantiate metavariables (#10589)
Fixes the issue reported in #10572.
- [x] depends on: #10572

2021-12-09 16:26:29 94783be
feat(algebra/algebra/spectrum): lemmas when scalars are a field (#10476)
Prove some properties of the spectrum when the underlying scalar ring
is a field, and mostly assuming the algebra is itself nontrivial.
Show that the spectrum of a scalar (i.e., `algebra_map 𝕜 A k`) is
the singleton `{k}`. Prove that `σ (a * b) \ {0} = σ (b * a) \ {0}`.

2021-12-09 14:52:57 08215b5
feat(data/finsupp/basic): lemmas on the support of the `tsub` of `finsupp`s (#10651)

2021-12-09 14:52:56 9ef122d
feat(measure_theory/integral/set_to_l1): properties of (dominated_)fin_meas_additive (#10590)
Various properties of `fin_meas_additive` and `dominated_fin_meas_additive` which will be useful to generalize results about integrals to `set_to_fun`.

2021-12-09 13:20:38 c23b54c
feat(group_theory/submonoid): The monoid_hom from a submonoid to its image. (#10680)

2021-12-09 13:20:36 97e4468
feat(analysis/calculus/deriv): generalize some lemmas (#10639)
Generalize lemmas about the chain rule to work with different fields.

2021-12-09 11:18:26 bfe595d
feat(order/filter,topology/instances/real): lemmas about `at_top`, `at_bot`, and `cocompact` (#10652)
* prove `comap abs at_top = at_bot ⊔ at_top`;
* prove `comap coe at_top = at_top` and `comap coe at_bot = at_bot` for coercion from `ℕ`, `ℤ`, or `ℚ` to an archimedian semiring, ring, or field, respectively;
* prove `cocompact ℤ = at_bot ⊔ at_top` and `cocompact ℝ = at_bot ⊔ at_top`.

2021-12-09 09:57:14 e3d9adf
chore(measure_theory/function/conditional_expectation): change condexp notation (#10584)
The previous definition and notation showed the `measurable_space` argument only through the other argument `m \le m0`, which tends to be replaced by `_` in the goal view if it becomes complicated.

2021-12-09 08:54:18 70171ac
feat(topology/instances/real_vector_space): add an `is_scalar_tower` instance (#10490)
There is at most one topological real vector space structure on a topological additive group, so `[is_scalar_tower real A E]` holds automatically as long as `A` is a topological real algebra and `E` is a topological module over `A`.

2021-12-09 07:29:46 4efa9d8
chore(algebra/direct_limit): remove module.directed_system (#10636)
This typeclass duplicated `_root_.directed_system`

2021-12-09 05:38:21 11bf7e5
feat(analysis/normed_space/weak_dual): add polar sets in preparation for Banach-Alaoglu theorem (#9836)
The first of two parts to add the Banach-Alaoglu theorem about the compactness of the closed unit ball (and more generally polar sets of neighborhoods of the origin) of the dual of a normed space in the weak-star topology.
This first half is about polar sets (for a set `s` in a normed space `E`, the `polar s` is the subset of `weak_dual _ E` consisting of the functionals that evaluate to something of norm at most one at all elements of `s`).

2021-12-09 03:56:43 fc3116f
doc(data/nat/prime): fix links (#10677)

2021-12-09 03:56:42 ab31673
feat(data/finset/basic): val_le_iff_val_subset (#10603)
I'm not sure if we have something like this already on mathlib. The application of `val_le_of_val_subset` that I have in mind is to deduce
```
theorem polynomial.card_roots'' {F : Type u} [field F]{p : polynomial F}(h : p ≠ 0)
{Z : finset F} (hZ : ∀ z ∈ Z, polynomial.eval z p = 0) : Z.card ≤ p.nat_degree
```
from [polynomial.card_roots' ](https://github.com/leanprover-community/mathlib/blob/1376f53dacd3c3ccd3c345b6b8552cce96c5d0c8/src/data/polynomial/ring_division.lean#L318)
If this approach seems right, I will send the proof of `polynomial.card_roots''` in a follow up PR.

2021-12-09 01:13:05 60c1d60
feat(data/mv_polynomial/basic)  induction_on'' (#10621)
A new flavor of `induction_on` which is useful when we do not have ` h_add : ∀p q, M p → M q → M (p + q)` but we have
```
h_add_weak : ∀ (a : σ →₀ ℕ) (b : R) (f : (σ →₀ ℕ) →₀ R),  a ∉ f.support → b ≠ 0 → M f → M (monomial a b + f)
```

2021-12-09 01:13:04 e14dc11
feat(data/int/basic): add `nat_abs_eq_nat_abs_iff_*` lemmas for nonnegative and nonpositive arguments (#10611)

2021-12-08 22:28:20 baab5d3
refactor(data/matrix): reverse the direction of `matrix.minor_mul_equiv` (#10657)
In #10350 this change was proposed, since we apparently use that backwards way more than we use it forwards.
We also change `reindex_linear_equiv_mul`, which is similarly much more popular backwards than forwards.
Closes: #10638

2021-12-08 22:28:19 2ea1fb6
feat(data/list/range): fin_range_succ_eq_map (#10654)

2021-12-08 22:28:18 fdb773a
chore(algebra/tropical/basic): golf and clean (#10633)

2021-12-08 22:28:16 bcd9a74
refactor(data/complex/is_R_or_C): `finite_dimensional.proper_is_R_or_C` is not an `instance` anymore (#10629)
This instance caused a search for `[finite_dimensional ?x E]` with an unknown `?x`. Turn it into a lemma and add `haveI` to some proofs. Also add an instance for `K ∙ x`.

2021-12-08 22:28:15 e289343
feat(algebra/graded_monoid): add lemmas about power and product membership (#10627)
This adds:
* `set_like.graded_monoid.pow_mem`
* `set_like.graded_monoid.list_prod_map_mem`
* `set_like.graded_monoid.list_prod_of_fn_mem`
It doesn't bother to add the multiset and finset versions for now, because these are not imported at this point, and require the ring to be commutative.

2021-12-08 18:44:55 1d0bb86
fix(data/finsupp/basic): add missing decidable arguments (#10672)
`finsupp` is classical, meaning that `def`s should just use noncomputable decidable instances rather than taking arguments that make more work for mathematicians.
However, this doesn't mean that lemma _statements_ should use noncomputable decidable instances, as this just makes the lemma less general and harder to apply (as shown by the `congr` removed elsewhere in the diff).
These were found by removing `open_locale classical` from the top of the file, adding `by classical; exact` to some definitions, and then fixing the broken lemma statements. In future we should detect this type of mistake with a linter.

2021-12-08 17:16:46 2ce95ca
refactor(data/finsupp): use `{f : α →₀ M | ∃ a b, f = single a b}` instead of union of ranges (#10671)

2021-12-08 17:16:44 8ab1b3b
feat(measure_theory/probability_mass_function): Calculate supports of pmf constructions (#10371)
This PR gives explicit descriptions for the `support` of the various `pmf` constructions in mathlib. 
This also tries to clean up the variable declarations in the different sections, so that all the lemmas don't need to specify them explicitly.

2021-12-08 15:28:51 678566f
feat(topology/algebra/group): Addition of interiors (#10659)
This proves `interior s * t ⊆ interior (s * t)`, a few prerequisites, and generalizes to `is_open.mul_left`/`is_open.mul_right`.

2021-12-08 13:44:00 eedb906
feat(measure_theory/integral): `∫ x in b..b+a, f x = ∫ x in c..c + a, f x` for a periodic `f` (#10477)

2021-12-08 05:53:32 4d56716
fix(data/finsupp/basic): add missing decidable argument (#10649)
While `finsupp.erase` is classical and requires no decidability, `finset.erase` is not so.
Without this argument, this lemma does not apply in the general case, and introduces mismatching decidable instances. With it, a `congr` is no longer needed elsewhere in mathlib.

2021-12-08 05:53:31 e5ba338
fix(algebra/direct_sum): change `ring_hom_ext` to not duplicate `ring_hom_ext'` (#10640)
These two lemmas differed only in the explicitness of their binders.
The statement of the unprimed version has been changed to be fully applied.
This also renames `alg_hom_ext` to `alg_hom_ext'` to make way for the fully applied version. This is consistent with `direct_sum.add_hom_ext` vs `direct_sum.add_hom_ext'`.

2021-12-08 04:59:26 b495fdf
feat(category_theory): Filtered colimits preserves finite limits in algebraic categories (#10604)

2021-12-08 03:50:05 2bfa768
feat(analysis/normed_space/operator_norm): module and norm instances on continuous semilinear maps (#10494)
This PR adds a module and a norm instance on continuous semilinear maps, generalizes most of the results in `operator_norm.lean` to the semilinear case. Many of these results require the ring homomorphism to be isometric, which is expressed via the new typeclass `[ring_hom_isometric σ]`.

2021-12-08 02:36:46 1a92bc9
chore(scripts): update nolints.txt (#10662)
I am happy to remove some nolints for you!

2021-12-07 21:13:01 eaa9e87
chore(measure_theory/integral/set_to_l1): change definition of dominated_fin_meas_additive (#10585)
Change the definition to check the property only on measurable sets with finite measure (like every other property in that file).
Also make some arguments of `set_to_fun` explicit to improve readability.

2021-12-07 19:16:26 54aeec7
feat(topology/algebra/ordered/basic): Interior of `{x | f x ≤ g x}` (#10653)
and golf the dual one: `closure_lt_subset_le`

2021-12-07 18:28:16 a803e21
feat(measure_theory/lattice): define typeclasses for measurability of lattice operations, define a lattice on ae_eq_fun (#10591)
As was previously done for measurability of arithmetic operations, I define typeclasses for the measurability of sup and inf in a lattice. In the borel_space file, instances of these are provided when the lattice operations are continuous.
Finally I've put a lattice structure on `ae_eq_fun`.

2021-12-07 15:39:30 ae7a88d
feat(field_theory/finite/basic): generalize lemma from field to integral domain (#10655)

2021-12-07 15:39:28 9a2c299
feat(data/pi): add `pi.single_inj` (#10644)

2021-12-07 15:39:27 03dd404
feat(algebra/category): (co)limits in CommRing (#10593)

2021-12-07 14:45:55 173a21a
feat(topology/sheaves): `F(U ⨿ V) = F(U) × F(V)` (#10597)

2021-12-07 06:39:50 ba1cbfa
feat(topology/algebra/ordered/basic): Add alternative formulations of four lemmas. (#10630)
Add alternative formulations of lemmas about interiors and frontiers of `Iic` and `Ici`. The existing formulations make typeclass assumptions `[no_top_order]` or `[no_bot_order]`. These alternative formulations assume instead that the endpoint of the interval is not top or bottom; and as such they can be applied in, e.g., `nnreal` and `ennreal`.
Also, some lemmas now assume `(Ioi a).nonempty` or `(Iio a).nonempty` instead of `{b} (h : a < b)` or `{b} (h : b < a)`, respectively.

2021-12-07 00:26:04 9031989
chore(*): fix last line length and notation style linter errors (#10642)
These are the last non-module doc style linter errors (from https://github.com/leanprover-community/mathlib/blob/master/scripts/style-exceptions.txt).

2021-12-07 00:26:03 cd857f7
feat(data/int/basic): four lemmas about integer divisibility (#10602)
Theorem 1.1, parts (c), (i), (j), and (k) of Apostol (1976) Introduction to Analytic Number Theory

2021-12-06 22:38:00 eec4b70
feat(algebra/geom_sum): criteria for 0 < geom_sum (#10567)

2021-12-06 21:05:46 a8c086f
feat(linear_algebra/determinant): linear_equiv.det_mul_det_symm (#10635)
Add lemmas that the determinants of a `linear_equiv` and its
inverse multiply to 1.  There are a few other lemmas involving
determinants and `linear_equiv`, but apparently not this one.

2021-12-06 19:23:02 1d5202a
feat(data/multiset): add some lemmas about filter (eq x) (#10626)

2021-12-06 14:45:34 8124314
feat(linear_algebra/multilinear/basic,linear_algebra/alternating): comp_linear_map lemmas (#10631)
Add more lemmas about composing multilinear and alternating maps with
linear maps in each argument.
Where I wanted a lemma for either of multilinear or alternating maps,
I added it for both.  There are however some lemmas for
`alternating_map.comp_linear_map` that don't have equivalents at
present for `multilinear_map.comp_linear_map` (I added one such
equivalent `multilinear_map.zero_comp_linear_map` because I needed it
for another lemma, but didn't try adding such equivalents of existing
lemmas where I didn't need them).

2021-12-06 13:25:54 f50984d
chore(linear_algebra/affine_space/basis): remove unhelpful coercion (#10637)
It is more useful to have a statement of equality of linear maps than
of raw functions.

2021-12-06 06:48:34 e6ad0f2
chore(analysis/inner_product/projections): generalize some lemmas (#10608)
* generalize a few lemmas from `[finite_dimensional 𝕜 ?x]` to `[complete_space ?x]`;
* drop unneeded TC assumption in `isometry.tendsto_nhds_iff`;
* image of a complete set/submodule under an isometry is a complete set/submodule.

2021-12-06 05:02:03 e726945
refactor(order/atoms): is_simple_order from is_simple_lattice (#10537)
Rename `is_simple_lattice` to `is_simple_order`, still stating that every element is either `bot` or `top` are, and that it is nontrivial.
To state `is_simple_order`, `has_le` and `bounded_order` are required to be defined. This allows for an order where `⊤ ≤ ⊥` (the always true order). 
Many proofs/statements about `is_simple_order`s have been generalized to require solely `partial_order` and not `lattice`. The statements themselves have not been changed. 
The `is_simple_order.distrib_lattice` instance has been downgraded into a `def` to prevent loops.
Helper defs have been added like `is_simple_order.preorder` (which is true given the `has_le` `bounded_order` axioms) `is_simple_order.linear_order`, and `is_simple_order.lattice` (which are true when `partial_order`, implying `⊥ < ⊤`.).

2021-12-05 19:54:45 e7bd49f
chore(scripts/mk_all.sh): allow 'mk_all.sh ../test' (#10628)
Helpful for mathport CI, cf https://github.com/leanprover-community/mathport/pull/64

2021-12-05 18:05:59 2b2d116
chore(combinatorics/simple_graph/coloring): remove extra asterisk (#10618)

2021-12-05 16:33:11 8c1f2b5
feat(ring_theory/graded_algebra): projection map of graded algebra (#10116)
This pr defines and proves some property about `graded_algebra.proj : A →ₗ[R] A`

2021-12-05 11:46:50 428b9e5
feat(topology/continuous_function/bounded): continuous bounded real-valued functions form a normed vector lattice (#10322)
feat(topology/continuous_function/bounded): continuous bounded real-valued functions form a normed vector lattice

2021-12-05 03:46:59 37f343c
chore(data/stream): merge `basic` into `init` (#10617)

2021-12-04 15:25:01 6eeb54e
fix(topology/algebra/uniform_field): remove unnecessary topological_r… (#10614)
…ing variable
Right now the last three definitions in `topology.algebra.uniform_field` (after line 115) have `[topological_division_ring K]` and `[topological_ring K]`. For example
```
mul_hat_inv_cancel :
  ∀ {K : Type u_1} [_inst_1 : field K] [_inst_2 : uniform_space K] [_inst_3 : topological_division_ring K]
  [_inst_4 : completable_top_field K] [_inst_5 : uniform_add_group K] [_inst_6 : topological_ring K]
  {x : uniform_space.completion K}, x ≠ 0 → x * hat_inv x = 1
```
Whilst it is not obvious from the notation, both of these are `Prop`s so there is no danger of diamonds. The full logic is: `field` and `uniform_space` are data, and the rest are Props (so should be called things like `is_topological_ring` etc IMO). `topological_division_ring` is the assertion of continuity of `add`, `neg`, `mul` and `inv` (away from 0), `completable_top_field` is another assertion about how inversion plays well with the topology (and which is not implied by `topological_division_ring`), `uniform_add_group` is the assertion about `add` and `neg` playing well with the uniform structure, and then `topological_ring` is a prop which is implied by `topological_division_ring`. I am not sure I see the benefits of carrying around the extra `topological_ring` for these three definitions so I've removed it to see if mathlib still compiles. Edit: it does.

2021-12-04 15:25:00 c940e47
chore(topology/continuous_function): remove forget_boundedness (#10612)
It is the same as `to_continuous_map`.

2021-12-04 13:36:16 b3b7fe6
chore(algebra/module): generalize `char_zero.of_algebra` to `char_zero.of_module` (#10609)

2021-12-04 08:58:37 5d0e65a
chore(order/galois_connection): upgrade `is_glb_l` to `is_least_l` (#10606)
* upgrade `galois_connection.is_glb_l` to `galois_connection.is_least_l`;
* upgrade `galois_connection.is_lub_l` to `galois_connection.is_greatest_l`.

2021-12-04 07:14:54 3479b7f
chore(order/complete_lattice): golf a proof (#10607)
Also reformulate `le_Sup_iff` in terms of `upper_bounds`.

2021-12-04 05:05:06 9c4e41a
feat(number_theory/modular): the action of `SL(2, ℤ)` on the upper half plane (#8611)
We define the action of `SL(2,ℤ)` on `ℍ` (via restriction of the `SL(2,ℝ)` action in `analysis.complex.upper_half_plane`). We then define the standard fundamental domain `𝒟` for this action and show that any point in `ℍ` can be moved inside `𝒟`.

2021-12-04 03:25:04 2da25ed
feat(combinatorics/simple_graph): Graph coloring and partitions (#10287)

2021-12-04 01:52:50 ef3540a
chore(measure_theory/function/conditional_expectation): golf condexp_L1 proofs using set_to_fun lemmas (#10592)

2021-12-04 01:52:49 23dfe70
feat(*): `A ⧸ B` notation for quotients in algebra (#10501)
We introduce a class `has_quotient` that provides `⧸` (U+29F8 BIG SOLIDUS) notation for quotients, e.g. if `H : subgroup G` then `quotient_group.quotient H` is now written as `G ⧸ H`. Thanks to @jcommelin for suggesting the initial design.
Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Notation.20for.20group.28module.2Cideal.29.20quotients

2021-12-04 00:14:36 0bd9b6a
feat(group_theory/order_of_element): order of a product of elements (#10399)
The lemma is: If `x` and `y` are commuting elements of coprime orders, then the order of `x * y` is the product of the orders of `x` and `y`. This also gives a version for the minimal period in dynamics from which the algebraic statement is derived.

2021-12-03 20:46:31 1376f53
feat(analysis.normed_space.lattice_ordered_group): Add `two_inf_sub_two_inf_le`, `two_sup_sub_two_sup_le` and supporting lemmas (#10514)
feat(analysis.normed_space.lattice_ordered_group): Add `two_inf_sub_two_inf_le`, `two_sup_sub_two_sup_le` and supporting lemmas

2021-12-03 19:27:08 cd2230b
chore(data/nat/prime): golf some proofs (#10599)

2021-12-03 19:27:05 bddc16a
fix(tactic/abel): handle smul on groups (#10587)
The issue was that `abel` expects to see only `smulg` used for groups and only `smul` for monoids, but you can also use `smul` on groups so we have to normalize that away.
fixes #8456

2021-12-03 17:46:34 46e9a23
feat(probability_theory/stopping): generalize a lemma (#10598)

2021-12-03 17:46:33 1e89745
feat(data/finset/lattice): add sup_eq_bot_iff and inf_eq_top_iff (#10596)
From flt-regular.

2021-12-03 17:46:32 92fafba
feat(data/(mv_)polynomial): add aeval_prod and aeval_sum for (mv_)polynomial (#10594)
Another couple of small polynomial helper lemmas from flt-regular.

2021-12-03 17:46:31 4de0773
feat(category_theory/limits): Strict terminal objects. (#10582)

2021-12-03 17:46:29 d45708f
feat(topology/sheaves): The empty component of a sheaf is terminal (#10578)

2021-12-03 16:11:45 1e18e93
chore(algebra/lattice_ordered_group): review (names, spaces, golf...) (#10595)
This is a review of `algebra/lattice_ordered_group` and `analysis/normed_space/lattice_ordered_group`:
- delete or add spaces at many places
- add brackets around goals
- replace `apply` by `exact` when closing a goal
- change many names to better fit the naming convention
- cut some big proofs into several lemmas
- add a few `simp` attributes
- remove a non-terminal simp
- golf
- add some simple API lemmas
I did not do anything about the docstrings of the lemmas. Some of them don't interact correctly with `to_additive` (the additive comment is shown for the multiplicative lemma in the doc, for example).

2021-12-03 16:11:43 a7b4018
fix(tactic/ring): bugfixes in ring_nf (#10572)
As reported by @hrmacbeth:
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60ring_nf.60.20behaves.20strangely.20with.20def.20in.20original.20goal

2021-12-03 16:11:41 df93166
feat(algebraic_geometry): Explicit description of the colimit of presheafed spaces. (#10466)

2021-12-03 16:11:40 b7ed03f
feat(algebraic_geometry): Open immersions of presheafed spaces (#10437)

2021-12-03 16:11:38 2f44ac8
feat(algebra/monoid_algebra/grading): internal graded structure for an arbitrary degree function (#10435)
This gives an internal graded structure of an additive monoid algebra for the grading given by an arbitrary degree function. The grading in the original file is redefined as the grading for the identity degree function.

2021-12-03 16:11:37 f0a1cd1
feat(category_theory/*): Representably flat functors (#9519)
Defined representably flat functors as functors `F : C ⥤ D` such that `(X/F)` is cofiltered for each `X : C`.
- Proved that if `C` has all finite limits and `F` preserves them, then `F` is flat.
- Proved that flat functors preserves finite limits.
In particular, if `C` is finitely complete, then flat iff left exact.
- Proved that if `C, D` are small, then `F` flat implies `Lan F.op` preserves finite limits implies `F` preserves finite limits.
In particular, if `C` is finitely cocomplete, then flat iff `Lan F.op` is left exact.

2021-12-03 14:32:19 8bb26a7
chore(*): protect `to_fun` and `map_{add,zero,mul,one,div}` (#10580)
This PR prepares for #9888 by namespacing all usages of `to_fun` and `map_{add,zero,mul,one,div}` that do not involve the classes of #9888. This includes e.g. `polynomial.map_add` and `multiset.map_add`, which involve `polynomial.map` and `multiset.map` respectively.

2021-12-03 14:32:17 235e583
feat(topology/metric_space/hausdorff_distance): add definition and lemmas about closed thickenings of subsets (#10542)
Add definition and basic API about closed thickenings of subsets in metric spaces, in preparation for the portmanteau theorem on characterizations of weak convergence of Borel probability measures.

2021-12-03 12:40:48 6533500
feat(data/mv_polynomial): add total_degree_add_of_total_degree_lt (#10571)
A helpful lemma to compute total degrees from flt-regular.

2021-12-03 12:40:47 672e2b2
feat(src/algebra/gcd_monoid,src/ring_theory): add some exists_associated_pow_of_mul_eq_pow variants (#10560)

2021-12-03 12:40:46 89697a2
feat(data/fintype/order): complete order instances for fintype (#7123)
This PR adds several instances (as defs) for fintypes:
* `order_bot` from `semilattice_inf`, `order_top` from `semilattice_sup`, `bounded_order` from `lattice`.
* `complete_lattice` from `lattice`.
* `complete_linear_order` from `linear_order`.
We use this last one to give a `complete_linear_order` instance for `fin (n + 1)` .

2021-12-03 10:55:10 e0c27fe
feat(order/bounded_order): a few more `simp` lemmas (#10533)
Inspired by #10486

2021-12-03 10:55:09 970f074
feat(analysis/convex/star): Star-convex sets (#10524)
This defines `star_convex 𝕜 x s` to mean that a set is star-convex (aka star-shaped, radially convex, or a star domain) at `x`. This means that every segment from `x` to a point in `s` is a subset of `s`.

2021-12-03 10:55:08 44b649c
doc(algebra.lattice_ordered_group): Remove verbose docstrings (#10468)
doc(algebra.lattice_ordered_group): Remove verbose docstrings

2021-12-03 08:57:31 2648e68
chore(int/*): dedup lemma (#10583)

2021-12-03 08:57:30 0453320
feat(category_theory/limits): The product is the pullback over the terminal objects. (#10581)

2021-12-03 08:57:28 bfccd1b
chore(topology/{metric_space,instances/real}): cleanup (#10577)
* merge `real.ball_eq` and `real.ball_eq_Ioo` into `real.ball_eq_Ioo`;
* merge `real.closed_ball_eq` and `real.closed_ball_eq_Icc` into `real.closed_ball_eq_Icc`;
* add missing `real.Icc_eq_closed_ball`;
* generalize lemmas about `*bounded_Ixx` so that they work for (indexed) products of conditionally complete linear orders.

2021-12-03 08:57:27 158263c
feat(ring_theory): Nilradical and reduced ring (#10576)

2021-12-03 08:57:26 c176aa5
refactor(data/stream): swap args of `stream.nth` (#10559)
This way it agrees with (a) `list.nth`; (b) a possible redefinition
```lean
structure stream (α : Type*) := (nth : nat → α)
```

2021-12-03 08:57:25 55b64b6
chore(group_theory/*): additivise! (#10557)

2021-12-03 08:57:23 56c9cab
feat(data/sigma{lex,order}): Lexicographic and disjoint orders on a sigma type (#10552)
This defines the two natural order on a sigma type: the one where we just juxtapose the summands with their respective order, and the one where we also add in an order between summands.

2021-12-03 08:57:22 d62b517
feat(category_theory/limits): Walking parallel pair equiv to its op. (#10516)

2021-12-03 08:57:21 c151a12
feat(algebra/gcd_monoid/*): assorted lemmas (#10508)
From flt-regular.

2021-12-03 08:57:20 c093d04
feat(data/nat/basic): Monotonicity of `nat.find_greatest` (#10507)
This proves that `nat.find_greatest` is monotone in both arguments.

2021-12-03 08:57:19 00e9e90
feat(topology/urysohns_bounded): +2 versions of Urysohn's lemma (#10479)

2021-12-03 07:10:46 403d9c0
feat(category_theory/adjunction): Added simp lemmas for `left_adjoint_uniq` and `right_adjoint_uniq` (#10551)

2021-12-03 07:10:45 30185dc
feat(topology/algebra/group): group topologies on a given group form a complete lattice (#10531)

2021-12-03 07:10:44 cfecf72
feat(algebra/module): push forward the action of `R` on `M` along `f : R → S` (#10502)
If `f : R →+* S` is compatible with the `R`-module structure on `M`, and the scalar action of `S` on `M`, then `M` gets an `S`-module structure too. Additionally, if `R` is a ring and the kernel of `f` acts on `M` by sending it to `0`, then we don't need to specify the scalar action of `S` on `M` (but it is still possible for defeq purposes).
These definitions should allow you to turn an action of `R` on `M` into an action of `R/I` on `M/N` via the (previously defined) action of `R` on `M/N`.

2021-12-03 07:10:43 461051a
feat(algebraic_geometry): Localization map is an embedding. (#10471)

2021-12-03 07:10:41 6bd6b45
feat(algebraic_geometry): Isomorphisms of presheafed space. (#10461)

2021-12-03 07:10:40 f8f28da
feat(linear_algebra/orientation): orientations of modules and rays in modules (#10306)
Define orientations of modules, along the lines of a definition
suggested by @hrmacbeth: equivalence classes of nonzero alternating
maps.  See:
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/adding.20angles/near/243856522
Rays are defined in an arbitrary module over an
`ordered_comm_semiring`, then orientations are considered as the case
of rays for the space of alternating maps.  That definition uses an
arbitrary index type; the motivating use case is where this has the
cardinality of a basis (two-dimensional use cases will use an index
type that is definitionally `fin 2`, for example).
The motivating use case is over the reals, but the definitions and
lemmas are for `ordered_comm_semiring`, `ordered_comm_ring`,
`linear_ordered_comm_ring` or `linear_ordered_field` as appropriate (a
`nontrivial` `ordered_comm_semiring` looks like it's the weakest case
for which much useful can be done with this definition).
Given an intended use case (oriented angles for Euclidean geometry)
where it will make sense for many proofs (and notation) to fix a
choice of orientation throughout, there is also a `module.oriented`
type class so the choice of orientation can be implicit in such proofs
and the lemmas they use.  However, nothing yet makes use of the type
class; everything so far is for explicit rays or orientations.
I expect more definitions and lemmas about orientations will need
adding to make much use of orientations.  In particular, I expect to
need to add more about orientations in relation to bases
(e.g. extracting a basis that gives a given orientation, in positive
dimension).

2021-12-03 07:10:39 2bb627f
feat(analysis/convex/[basic, topology]): generalize path connectedness of convex sets to topological real vector spaces (#10011)

2021-12-03 06:35:10 8915dc8
feat(ring_theory/polynomial/cyclotomic): `is_root_cyclotomic_iff` (#10422)
From the flt-regular project.

2021-12-03 05:24:46 6f745cd
feat(category_theory/limits): Lemmas about preserving pullbacks (#10438)

2021-12-02 23:23:50 c791747
feat(algebra/tropical/basic): various API (#10487)
Generalize some order instance to just require `has_le` of the base `R`.
`(un)trop_monotone`
`trop_(min|inf)`
iffs between addition and order
`tropical.add_comm_monoid` (in parallel to #10486)
`(co|contra)variant` instances

2021-12-02 22:04:36 ac76745
feat(data/finsupp/basic): add `finsupp.prod_congr` and `sum_congr` (#10568)
These are the counterparts for `finsupp` of a simpler form of `finset.prod_congr`

2021-12-02 20:44:25 42d3cbc
feat(data/finsupp/basic): add `nat.cast_finsupp_prod` and 3 others (#10579)
Add counterparts for `finsupp` of `nat.cast_prod` etc., as discussed in this thread https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/push_cast

2021-12-02 19:28:48 4cfe637
chore(category_theory/sites/*): Adjust some `simp` lemmas. (#10574)
The primary change is removing some `simp` tags from the definition of `sheafify` and friends, so that the sheafification related constructions are not unfolded to the `plus` constructions.
Also -- added coercion from Sheaves to presheaves, and some `rfl` simp lemmas which help some proofs move along.
Some proofs cleaned up as well.

2021-12-02 19:28:46 cbb2d2c
feat(data/nat/prime): Add lemma `count_factors_mul_of_pos` (#10536)
Adding the counterpart to `count_factors_mul_of_coprime` for positive `a` and `b`

2021-12-02 17:52:35 38ae0c9
feat(data/nat/prime): add coprime_of_prime lemmas (#10534)
Adds `coprime_of_lt_prime` and `eq_or_coprime_of_le_prime`, which help one to prove a number is coprime to a prime. Spun off of #9080.

2021-12-02 14:23:28 5e02292
feat(data/finset/*): Diverse lemmas (#10388)
A bunch of simple lemmas

2021-12-02 14:23:27 790d637
feat(combinatorics/set_family/compression/uv): UV-compression of a set family (#10238)
This defines the UV-compression of a set family, along with a bunch of preliminary definitions and some basic results.

2021-12-02 12:47:03 17c2209
feat(probability_theory/stopping): define filtration and stopping time (#10553)
This PR defines filtrations and stopping times which are used in stochastic processes. This is the first step towards creating a theory of martingales in lean.

2021-12-02 12:47:02 6806050
feat(category_theory/sites/adjunction): Adjunctions between categories of sheaves. (#10541)
We construct adjunctions between categories of sheaves obtained by composition (and sheafification) with functors which form a given adjunction.
Will be used in LTE.

2021-12-02 12:47:00 3e72feb
feat(ring_theory/localization): The localization of a localization is a localization. (#10456)
Also provides an easy consequence : the map of `Spec M⁻¹R ⟶ Spec R` is isomorphic on stalks.

2021-12-02 11:02:49 fed2929
chore(*): golf some proofs (#10575)
Also add `strict_mono_on.monotone_on` and `strict_anti_on.antitone_on`.

2021-12-02 05:21:48 665c13a
chore(*): clean up/golf proofs with unneeded or case splits (#10569)
Golf/simplify/clean up some more proofs with unnecessary case splits, this time found by linting for `or.dcases_on` with branches proving the more general fact.

2021-12-02 03:37:51 34758d3
doc(group_theory/index): add a theorem name and fix a to_additive (#10564)
I wanted to find the theorem I know as "Lagrange's theorem" but couldn't by searching.
This PR adds the name Lagrange's theorem to the relevant file, and also fixes an extra eager `to_additive` renaming that creates a lemma `add_subgroup.index_add_card` which talks about multiplication previously.

2021-12-02 03:37:50 7043521
chore(algebra/order/*): drop some `[nontrivial _]` assumptions (#10550)
Use `pullback_nonzero` to deduce `nontrivial _` in some `function.injective.*` constructors.

2021-12-02 03:37:49 0f12400
chore(*): more cleanups of by_cases (#10549)
Follow up  #10523 with more tool-assisted golfing, see that PR for details.

2021-12-01 17:04:54 c09501d
feat(*): assorted `finset` lemmas (#10566)

2021-12-01 11:46:33 cc60470
feat(data/nat/prime): Add lemma `factors_count_pow` (#10554)

2021-12-01 03:17:51 599a511
feat(analysis/normed_space/star and data/complex/is_R_or_C): register instances of `cstar_ring` (#10555)
Register instances `cstar_ring ℝ` and `cstar_ring K` when `[is_R_or_C K]`

2021-12-01 02:41:28 3f7d0cf
chore(scripts): update nolints.txt (#10563)
I am happy to remove some nolints for you!

2021-11-30 16:52:36 49f8b6b
chore(analysis/mean_inequalities[_pow]): use vector notation (#10546)
Several elementary inequalities in the library are expressed both in arbitrary n-ary versions and in explicit binary, ternary etc versions, with the latter deduced from the former.  This PR introduces vector notation to the proof terms deducing the latter from the former, which shortens them, and also makes them more readable.

2021-11-30 16:52:35 b876e76
feat(algebra/char_p/two): couple more lemmas + 🏌️ (#10467)

2021-11-30 15:07:49 cd69351
doc(data/stream/defs): add docstrings to most defs (#10547)
Also move 1 def from `basic` to `defs`.

2021-11-30 15:07:48 8bce7eb
refactor(algebra/group/basic): Migrate `add_group` section into `group` section (#10532)

2021-11-30 13:24:44 41fa32b
feat(data/nat/pairing): add an `equiv` version of `nat.mkpair`/`nat.unpair` (#10520)

2021-11-30 13:24:43 af5c778
feat(topology/[continuous_function, path_connected]): add bundled versions of prod_mk and prod_map (#10512)
I also added a definition for pointwise addition of paths, but I'm not sure it would be really useful in general (my use case is the Sphere eversion project, where I need to add together two paths living in complement subspaces of a real TVS).

2021-11-30 13:24:41 4d90ff9
feat(topology/connected): Connectedness in sum and sigma type (#10511)
This provides the `compact_space` and `totally_disconnected_space` instances for `α ⊕ β` and `Σ i, π i`.

2021-11-30 13:24:39 7356269
feat(linear_algebra/affine_space/basis): upgrade `affine_basis.coords` to an affine map (#10452)
Formalized as part of the Sphere Eversion project.

2021-11-30 12:39:15 35574bb
fix(*): replace "the the" by "the" (#10548)

2021-11-30 11:49:06 1077f34
feat(algebraic_geometry): Generalized basic open for arbitrary sections (#10515)

2021-11-30 10:08:21 6102d77
feat(group_theory/submonoid/pointwise): pointwise inverse of a submonoid (#10451)
This also adds `order_iso.map_{supr,infi,Sup,Inf}` which are used here to provide some short proofs.

2021-11-30 07:29:05 4a9aa27
feat(analysis/normed_space/spectrum and algebra/algebra/spectrum): prove properties of spectrum in a Banach algebra (#10530)
Prove that the `spectrum` of an element in a Banach algebra is closed and bounded, hence compact when the scalar field is                               
proper. Compute the derivative of the `resolvent a` function in preparation for showing that the spectrum is nonempty when  the base field is ℂ. Define the `spectral_radius` and prove that it is bounded by the norm. Also rename the resolvent set to `resolvent_set` instead of `resolvent` so that it doesn't clash with the function name.

2021-11-30 06:50:40 f11d505
feat(category_theory/sites/compatible_*): Compatibility of plus and sheafification with composition. (#10510)
Compatibility of sheafification with composition. This will be used later to obtain adjunctions between categories of sheaves.

2021-11-30 02:52:47 396351b
chore(scripts): update nolints.txt (#10545)
I am happy to remove some nolints for you!

2021-11-29 21:29:13 04fc415
feat(algebra/char_p/two): lemmas about characteristic two (#10442)

2021-11-29 19:42:43 f798f22
refactor(order/filter/bases): drop `p` in `has_antitone_basis` (#10499)
We never use `has_antitone_basis` for `p ≠ λ _, true` in `mathlib`.

2021-11-29 17:49:24 da6aceb
chore(order): fix-ups after #9891 (#10538)

2021-11-29 17:49:23 7545909
chore(logic/function): allow `Sort*` in `function.inv_fun` (#10526)

2021-11-29 17:49:21 3ac9ae7
chore(data/stream): dedup `take` and `approx` (#10525)
`stream.take` and `stream.approx` were propositionally equal. Merge
them into one function `stream.take`; the definition comes from the old `stream.approx`.

2021-11-29 17:49:20 bc4ed5c
chore(*): cleanup unneeded uses of by_cases across the library (#10523)
Many proofs in the library do case splits but then never use the introduced assumption in one of the cases, meaning the case split can be removed and replaced with the general argument.
Its easy to either accidentally introduce these more complicated than needed arguments when writing proofs, or in some cases presumably refactors made assumptions unnecessary, we golf / simplify several of these to simplify these proofs.
Similar things happen for `split_ifs` and explicit `if ... then` proofs.
Rather remarkably the changes to `uniformly_extend_spec` make the separated space assumption unnecessary too, and removing this removes this assumption from around 10 other lemmas in the library too.
Some more random golfs were added in the review process
Found with a work in progress linter.

2021-11-29 17:49:19 5601833
chore(*): a few facts about `pprod` (#10519)
Add `equiv.pprod_equiv_prod` and `function.embedding.pprod_map`.

2021-11-29 17:49:18 be48f95
refactor(algebra.order.group): Convert abs_eq_sup_neg to multiplicative form (#10505)
refactor(algebra.order.group): Convert abs_eq_sup_neg to multiplicative form

2021-11-29 17:49:17 2ed7c0f
doc(field_theory/galois): add comment that separable extensions are a… (#10500)
…lgebraic
I teach my students that a Galois extension is algebraic, normal and separable, and was
just taken aback when I read the mathlib definition which omits "algebraic". Apparently
there are two conventions for the definition of separability, one implying algebraic and the other not:
https://en.wikipedia.org/wiki/Separable_extension#Separability_of_transcendental_extensions .
Right now we have separability implies algebraic in mathlib so mathematically we're fine; I just
add a note to clarify what's going on. In particular if we act on the TODO in
the separability definition, we may (perhaps unwittingly) break the definition of
`is_galois`; hopefully this note lessens the chance that this happens.

2021-11-29 17:49:15 fcbe714
refactor(data/nat/fib): use `nat.iterate` (#10489)
The main drawback of the new definition is that `fib (n + 2) = fib n + fib (n + 1)` is no longer `rfl` but I think that we should have one API for iterates.
See discussion at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60nat.2Eiterate.60.20vs.20.60stream.2Eiterate.60

2021-11-29 17:11:51 b849b3c
feat(number_theory/padics/padic_norm): prime powers in divisors (#10481)

2021-11-29 09:57:02 957fa4b
feat(order/locally_finite): `with_top α`/`with_bot α` are locally finite orders (#10202)
This provides the two instances `locally_finite_order (with_top α)` and `locally_finite_order (with_bot α)`.

2021-11-29 06:52:12 202ca0b
feat(*/is_R_or_C): deduplicate (#10522)
I noticed that the same argument, that in a normed space over `is_R_or_C` an element can be normalized, appears in a couple of different places in the library.  I have deduplicated and placed it in `analysis/normed_space/is_R_or_C`.

2021-11-29 06:52:11 a53da16
feat(data/int/basic): `nat_abs_dvd_iff_dvd` (#10469)

2021-11-29 06:04:28 50cc57b
chore(category_theory/limits/shapes/wide_pullbacks): speed up `wide_cospan` (#10535)

2021-11-29 01:36:13 16daabf
chore(algebra/group_power): golf a few proofs (#10498)
* move `pow_lt_pow_of_lt_one` and `pow_lt_pow_iff_of_lt_one` from
  `algebra.group_power.lemmas` to `algebra.group_power.order`;
* add `strict_anti_pow`, use it to golf the proofs of the two lemmas
  above;
* golf a few other proofs;
* add `nnreal.exists_pow_lt_of_lt_one`.

2021-11-28 23:50:39 77ba0c4
chore(logic): allow `Sort*` args in 2 lemmas (#10517)

2021-11-28 23:50:38 c058607
chore(order): generalize `min_top_left` (#10486)
As well as its relative `min_top_right`.
Also provide `max_bot_(left|right)`.

2021-11-28 23:50:37 43519fc
feat(tactic/lint/misc): unused arguments checks for more sorry's (#10431)
* The `unused_arguments` linter now checks whether `sorry` occurs in any of the `_proof_i` declarations and will not raise an error if this is the case
* Two minor changes: `open tactic` in all of `meta.expr` and fix a typo.
* I cannot add a test without adding a `sorry` to the test suite, but this succeeds without linter warning:
```lean
import tactic.lint
/-- dummy doc -/
def one (h : 0 < 1) : {n : ℕ // 0 < n} := ⟨1, sorry⟩
#lint
```

2021-11-28 22:06:26 dfa98e0
chore(algebra/opposites): split out lemmas about rings and groups (#10457)
All these lemmas are just moved.
The advantage of this is that `algebra.opposites` becomes a much lighter-weight import, allowing us to use the `has_mul` and `has_scalar` instance on opposite types earlier in the import hierarchy.
It also matches how we structure the instances on `prod` and `pi` types.
This follows on from #10383

2021-11-28 20:23:10 f684721
chore(data/nat/prime): `fact (2.prime)` (#10441)

2021-11-28 19:36:10 a2e6bf8
chore(algebraic_topology/cech_nerve): An attempt to speed up the proofs... (#10521)
Let's hope this works!
See [zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.2310312.20timeouts.20in.20cech_nerve/near/262587999)

2021-11-28 07:21:28 044f532
chore(analysis/normed_space/hahn_banach): remove `norm'` (#10527)
For a normed space over `ℝ`-algebra `𝕜`, `norm'` is currently defined to be `algebra_map ℝ 𝕜 ∥x∥`.  I believe this was introduced before the `is_R_or_C` construct (including the coercion from `ℝ` to `𝕜` for `[is_R_or_C 𝕜]`) joined mathlib.  Now that we have these things, it's easy to just say `(∥x∥ : 𝕜)` instead of `norm' 𝕜 ∥x∥`, so I don't really think `norm'` needs to exist any more.
(In principle, `norm'` is more general, since it works for all `ℝ`-algebras `𝕜` rather than just `[is_R_or_C 𝕜]`.  But I can only really think of applications in the`is_R_or_C` case, and that's the only way it's used in the library.)

2021-11-28 07:21:27 099fb0f
feat(data/nat/prime): lemma eq_of_eq_count_factors (#10493)

2021-11-28 06:12:10 45d45ef
feat(data/nat/prime): lemma count_factors_mul_of_coprime (#10492)
Adding lemma `count_factors_mul_of_coprime` and using it to simplify the proof of `factors_count_eq_of_coprime_left`.

2021-11-28 03:39:40 b1f9067
feat(group_theory/group_action/units): add a `mul_distrib_mul_action` instance (#10480)
This doesn't add any new "data" instances, it just shows the existing instance satisfies stronger properties with stronger assumptions.

2021-11-27 09:46:17 b8af491
feat(category_theory/sites/whiskering): Functors between sheaf categories induced by compositiion (#10496)
We construct the functor `Sheaf J A` to `Sheaf J B` induced by a functor `A` to `B` which preserves the appropriate limits.

2021-11-27 08:42:32 fcb3790
feat(topology/algebra/matrix): the determinant is a continuous map (#10503)
Formalized as part of the Sphere Eversion project.

2021-11-27 07:02:21 d36a67c
feat(ring_theory/euclidean_domain): generalize lemmas to PIDs (#10324)
This moves the existing lemmas to the `euclidean_domain` namespace.

2021-11-27 02:49:59 150b217
chore(scripts): update nolints.txt (#10513)
I am happy to remove some nolints for you!

2021-11-26 23:08:10 7a19aa1
feat(group_theory/order_of_element): linear ordered rings (#10473)

2021-11-26 21:40:36 7348f1b
Adding a matching TODO back (#10506)
Because we were careless and removed it too early:
https://github.com/leanprover-community/mathlib/pull/10210#discussion_r757640946

2021-11-26 17:50:35 deb5692
refactor(combinatorics/simple_graph): use subgraphs to represent matchings (#10210)

2021-11-26 16:20:00 dabb58b
chore(algebra/module/pi): split out `group_theory/group_action/pi` to match `group_theory/group_action/prod` (#10485)
These declarations are copied without modification.

2021-11-26 16:19:59 ea52ec1
feat(ring_theory/ideal/operations): add lemmas about comap (#10418)
This also adds `ring_hom.to_semilinear_map` and `ring_equiv.to_semilinear_equiv`.

2021-11-26 15:44:03 9cfa33a
feat(algebra/lie): implement `set_like` for `lie_submodule` (#10488)
This PR provides a `set_like` instance for `lie_submodule` and uses it to define `has_mem` and `has_le` for Lie submodules / ideals.

2021-11-26 12:59:28 83bce9f
feat(category_theory/adjunction/whiskering): Whiskering adjunctions. (#10495)
Construct adjunctions between functor categories induced by whiskering (both left and right).
This will be used later to construct adjunctions between categories of sheaves.

2021-11-26 11:59:16 61e8aa8
feat(topology/algebra/[X]): sub[X] of a topological [X] is itself a topological [X] (#10491)

2021-11-26 11:04:50 36f33d0
chore(category_theory/limits): Generalize universes for limits (#10243)

2021-11-26 07:20:19 0b9d332
feat(data/complex/basic): `of_real_injective` (#10464)

2021-11-26 07:20:18 e742fce
feat(data/nat/prime): `nat.{eq/ne}_one_iff` (#10463)

2021-11-26 07:20:17 71bc7f4
feat(set_theory/ordinal_notation): nonote is well founded (#10462)

2021-11-26 07:20:16 cdb3819
feat(algebraic_geometry): `of_restrict` is mono. (#10460)

2021-11-26 07:20:15 757aa6f
chore(data/stream): move most defs to a new file (#10458)

2021-11-26 07:20:14 3dfa349
feat(topology/uniform_space/completion) : add injective_coe (#10454)

2021-11-26 07:20:13 cbe1d37
feat(ring_theory/valuation/basic): add valuation.map_zpow (#10453)

2021-11-26 07:20:12 9249e1e
chore(linear_algebra/affine_space/barycentric_coords): rename file `barycentric_coords` to `basis` (#10449)
Follow up from https://github.com/leanprover-community/mathlib/pull/10320#discussion_r748936743

2021-11-26 07:20:11 28d9a5b
feat(data/equiv/basic): add lemmas characterising `equiv.Pi_congr` and `equiv.Pi_congr'` (#10432)
Formalized as part of the Sphere Eversion project.

2021-11-26 06:45:43 be9b96e
feat(computablility/halting): halting problem is r.e. (#10459)
This is a minor oversight from the original formalization, pointed out by Keji Neri.

2021-11-26 02:32:10 f55a284
feat(topology): normal topological space with second countable topology is metrizable (#10402)
Also prove that a regular topological space with second countable topology is a normal space.

2021-11-25 18:25:14 ee71ddf
feat(ring_theory/graded_algebra): definition of type class `graded_algebra` (#10115)
This is largely written by @eric-wieser. Thank you.

2021-11-25 16:03:28 644591f
chore(algebra/group/basic): + 2 simp lemmas about `a - b` (#10478)

2021-11-25 12:14:38 7d8a1e0
feat(data/polynomial/eval): random `eval` lemmas (#10470)
note that the `geom_sum` import only adds the `geom_sum` file itself; all other files were imported already

2021-11-25 07:53:00 5b767aa
feat(measure_theory/integral/integral_eq_improper): weaken measurability assumptions  (#10387)
As suggested by @fpvandoorn, this removes a.e. measurability assumptions which could be deduced from integrability assumptions. More of them could be removed assuming the codomain is a `borel_space` and not only an `open_measurable_space`, but I’m not sure wether or not it would be a good idea.

2021-11-25 03:11:34 7dfd7e8
chore(scripts): update nolints.txt (#10484)
I am happy to remove some nolints for you!

2021-11-25 01:40:31 d04f5a5
feat(algebra/pointwise): lemmas about multiplication of finsets (#10455)

2021-11-24 18:18:56 daf30fd
feat(analysis/asymptotics): Generalize superpolynomial decay using limits instead of big O (#10296)
This PR generalizes the definition of `superpolynomial_decay` in terms of `filter.tendsto` instead of `asymptotics.is_O`.

2021-11-24 14:56:57 18e5510
fix(tactic/cancel_denoms): remove debug code (#10434)
This code must not be used -- worth keeping, as it's a potentially useful function, but it shouldn't trace anything.

2021-11-24 12:24:42 b29b952
feat(measure_theory/group/fundamental_domain): prove equality of integrals (#10448)

2021-11-24 12:24:41 563f8c4
feat(measure_theory/integral): dominated convergence for a series (#10398)

2021-11-24 10:42:43 132833b
refactor(algebra.abs): Introduce `has_pos_part` and `has_neg_part` classes (#10420)
refactor(algebra.abs): Introduce `has_pos_part` and `has_neg_part` classes

2021-11-24 09:23:46 09b4bfc
feat(linear_algebra/multilinear/basic): multilinear maps with respect to an empty family are all constant (#10433)
This seemingly-innocuous statement is valuable as a base case for induction.
Formalized as part of the Sphere Eversion project.

2021-11-24 07:49:21 d487d65
refactor(topology,algebraic_geometry): use bundled maps here and there (#10447)
* `opens.comap` now takes a `continuous_map` and returns a `preorder_hom`;
* `prime_spectrum.comap` is now a bundled `continuous_map`.

2021-11-24 07:49:20 3590dc2
feat(topology/uniform_space/uniform_convergence): slightly generalize theorems (#10444)
* add `protected` to some theorems;
* assume `∀ᶠ n, continuous (F n)` instead of `∀ n, continuous (F n)`;
* get rid of `F n` in lemmas like `continuous_within_at_of_locally_uniform_approx_of_continuous_within_at`; instead, assume that there exists a continuous `F` that approximates `f`.

2021-11-24 07:49:19 8d07dbf
feat(topology/sheaves): Generalized some lemmas. (#10440)
Generalizes some lemmas and explicitly stated that for `f` to be an iso on `U`, it suffices that the stalk map is an iso for all `x : U`.

2021-11-24 07:49:18 a086daa
chore(ring_theory/polynomial/cyclotomic): use `ratfunc` (#10421)

2021-11-24 07:49:17 6cb52e6
feat(category_theory/limits): Results about (co)limits in Top (#9985)
- Provided the explicit topologies for limits and colimits, and specialized this result onto some shapes.
- Provided the isomorphism between the (co)limits and the constructions in `topology/constructions.lean`.
- Provided conditions about whether `prod.map` and `pullback_map` are inducing, embedding, etc.

2021-11-24 06:51:50 d267b6c
chore(topology): add 2 missing `inhabited` instances (#10446)
Also add an instance from `discrete_topology` to `topological_ring`.

2021-11-24 03:16:10 1c00179
chore(scripts): update nolints.txt (#10445)
I am happy to remove some nolints for you!

2021-11-24 02:33:03 f578d1d
feat(measure_theory): TC for smul-invariant measures (#10325)

2021-11-23 22:42:46 0cbba1a
feat(ring_theory/adjoin/basic): add adjoin_induction' and adjoin_adjoin_coe_preimage (#10427)
From FLT-regular.

2021-11-23 22:42:45 c192937
feat(analysis): derivative of a parametric interval integral (#10404)

2021-11-23 21:34:42 ac283c2
feat(data/nat/prime): some lemmas about prime factors (#10385)
A few small lemmas about prime factors, for use in future PRs on prime factorisations and the Euler product formula for totient

2021-11-23 20:50:39 eb8b1b8
feat(linear_algebra/affine_space/barycentric_coords): characterise affine bases in terms of coordinate matrices (#10370)
Formalized as part of the Sphere Eversion project.

2021-11-23 19:47:54 fb82d0a
feat(data/mv_polynomial/basic): add a symmetric version of coeff_X_mul and generalize to monomials (#10429)

2021-11-23 19:47:53 ba43124
feat(category_theory/sites/*): Comparison lemma (#9785)

2021-11-23 18:21:04 a779f6c
feat(topology/algebra/ordered): convergent sequence is bounded above/below (#10424)
Also move lemmas `Ixx_mem_nhds` up to generalize them from
`[linear_order α] [order_topology α]` to
`[linear_order α] [order_closed_topology α]`.

2021-11-23 18:21:02 1dd3ae1
feat(algebra/big_operators/order): Bounding on a sum of cards by double counting (#10389)
If every element of `s` is in at least/most `n` finsets of `B : finset (finset α)`, then the sum of `(s ∩ t).card` over `t ∈ B` is at most/least `s.card * n`.

2021-11-23 16:49:25 b14f22e
chore(algebra/algebra and group_theory/group_action): move a lemma (#10425)
Move a lemma about the action of a group on the units of a monoid
to a more appropriate place. It accidentally ended up in
`algebra/algebra/spectrum` but a better place is
`group_theory/group_action/units`.

2021-11-23 16:49:24 7c4f395
feat(measure_theory): add `is_R_or_C.measurable_space` (#10417)
Don't remove specific instances because otherwise Lean fails to generate `borel_space (ι → ℝ)`.

2021-11-23 16:49:23 a1338d6
feat(linear_algebra/affine_space/barycentric_coords): affine bases exist over fields (#10333)
Formalized as part of the Sphere Eversion project.

2021-11-23 16:49:22 7a6e6d8
feat(group_theory/schur_zassenhaus): Prove the full Schur-Zassenhaus theorem (#10283)
Previously, the Schur-Zassenhaus theorem was only proved for abelian normal subgroups. This PR removes the abelian assumption.

2021-11-23 16:49:21 97186fe
feat(combinatorics): Hindman's theorem on finite sums (#10029)
A short proof of Hindman's theorem using idempotent ultrafilters.

2021-11-23 15:06:10 050482c
doc(measure_theory/decomposition/jordan): typo (#10430)

2021-11-23 15:06:08 53bd9d7
feat(field_theory): generalize `ratfunc K` to `comm_ring K`/`is_domain K` (#10428)
Fixes one of the TODO's from the original ratfunc PR: apply all the easy generalizations where `K` doesn't need to be a field, only a `is_domain K` or even just `comm_ring K`.
This would allow us to use `ratfunc` in #10421.

2021-11-23 15:06:07 7958251
doc(field_theory/abel_ruffini): update module doc (#10426)

2021-11-23 15:06:06 2b75493
refactor(algebra.group.basic): Convert sub_add_cancel and neg_sub to multaplicative form (#10419)
Currently mathlib has a rich set of lemmas connecting the addition, subtraction and negation additive group operations, but a far thinner collection of results for multiplication, division and inverse multiplicative group operations, despite the fact that the former can be generated easily from the latter via `to_additive`.
In  #9548 I require multiplicative forms of the existing `sub_add_cancel` and `neg_sub` lemmas. This PR refactors them as the equivalent multiplicative results and then recovers `sub_add_cancel` and `neg_sub` via `to_additive`. There is a complication in that unfortunately `group_with_zero` already has lemmas named `inv_div` and `div_mul_cancel`. I have worked around this by naming the lemmas in this PR `inv_div'` and `div_mul_cancel'` and then manually overriding the names generated by `to_additive`. Other suggestions as to how to approach this welcome.

2021-11-23 15:06:04 d0e454a
feat(logic/function/basic): add `function.{in,sur,bi}jective.comp_left` (#10406)
As far as I can tell we don't have these variations.
Note that the `surjective` and `bijective` versions do not appear next to the other composition statements, as they require `surj_inv` to concisely prove.

2021-11-23 13:11:55 d9e40b4
chore(measure_theory/integral): generalize `interval_integral.norm_integral_le_integral_norm` (#10412)
It was formulated only for functions `f : α → ℝ`; generalize to `f : α → E`.

2021-11-23 13:11:54 2817788
chore(measure_theory/integral): add `integrable_const` for `interval_integral` (#10410)

2021-11-23 13:11:53 3b13744
chore(measure_theory/integral): more versions of `integral_finset_sum` (#10394)
* fix assumptions in existing lemmas (`∀ i ∈ s` instead of `∀ i`);
* add a version for interval integrals.

2021-11-23 13:11:52 2ec6de7
feat(topology/connected): sufficient conditions for the preimage of a connected set to be connected (#10289)
and other simple connectedness results

2021-11-23 13:11:50 e8386bd
feat(group_theory/exponent): Define the exponent of a group (#10249)
This PR provides the definition and some very basic API for the exponent of a group/monoid.

2021-11-23 13:11:48 cf91773
refactor(*): split `order_{top,bot}` from `lattice` hierarchy (#9891)
Rename `bounded_lattice` to `bounded_order`.
Split out `order_{top,bot}` and `bounded_order` from the order hierarchy.
That means that we no longer have `semilattice_{sup,inf}_{top,bot}`, but use the `[order_top]` as a mixin to `semilattice_inf`, for example.
Similarly, `lattice` and `bounded_order` instead of what was before `bounded_lattice`.
Similarly, `distrib_lattice` and `bounded_order` instead of what was before `bounded_distrib_lattice`.

2021-11-23 11:49:18 3fee4b9
chore(control/random): Move from `system.random.basic` (#10408)
The top folder `system` contains a single file, apparently because it mimics Lean core's organisation. This moves it under `control.` and gets rid of one top folder.

2021-11-23 11:49:16 b1a9c2e
feat(analysis/normed_space/multilinear): add `norm_mk_pi_field` (#10396)
Also upgrade the corresponding equivalence to a `linear_isometry`.

2021-11-23 11:49:15 87b0084
chore(field_theory/separable): generalize theorems (#10337)

2021-11-23 11:49:14 9cf6766
feat(order/filter/pi): define `filter.pi` and prove some properties (#10323)

2021-11-23 11:49:13 33ea401
feat(linear_algebra/affine_space/barycentric_coords): barycentric coordinates are ratio of determinants (#10320)
The main goal of this PR is the new lemma `affine_basis.det_smul_coords_eq_camer_coords`
A secondary goal is a minor refactor of barycentric coordinates so that they are associated to a new structure `affine_basis`. As well as making the API for affine spaces more similar to that of modules, this enables an extremely useful dot notation.
The work here could easily be split into two PRs and I will happily do so if requested.
Formalized as part of the Sphere Eversion project.

2021-11-23 11:49:12 d94772b
feat(algebra/big_operators/finprod): add finprod_div_distrib and finsum_sub_distrib (#10044)

2021-11-23 09:38:33 ac71292
chore(measure_theory/integral): generalize `integral_smul_const` (#10411)
* generalize to `is_R_or_C`;
* add an `interval_integral` version.

2021-11-23 09:38:32 8f681f1
chore(data/complex): add a few simp lemmas (#10395)

2021-11-23 09:38:31 4d5d770
feat(data/complex/exponential): Add lemma add_one_le_exp (#10358)
This PR resolves https://github.com/leanprover-community/mathlib/blob/master/src/data/complex/exponential.lean#L1140

2021-11-23 07:23:05 6050f9d
feat(algebraic_geometry, category_theory): SheafedSpace has colimits (#10401)

2021-11-23 07:23:04 ca7347c
refactor(ring_theory/sub[semi]ring): move pointwise instances to their own file (#10347)
This matches how we have separate pointwise files for `submonoid` and `subgroup`.
All the new lemmas are direct copies of the subgroup lemmas.

2021-11-23 07:23:02 a586681
feat(category_theory/limits/shapes): Multiequalizer is the equalizer (#10267)

2021-11-23 05:35:13 6dddef2
feat(topology/metric_space): range of a cauchy seq is bounded (#10423)

2021-11-23 01:33:14 f684f61
feat(algebra/algebra/spectrum): define spectrum and prove basic prope... (#10390)
…rties
Define the resolvent set and the spectrum of an element of an algebra as
a set of elements in the scalar ring. We prove a few basic facts
including that additive cosets of the spectrum commute with the
spectrum, that is, r + σ a = σ (r ⬝ 1 + a). Similarly, multiplicative
cosets of the spectrum also commute when the element r is a unit of
the scalar ring R. Finally, we also show that the units of R in
σ (a*b) coincide with those of σ (b*a).

2021-11-22 22:48:19 e59e03f
feat(measure_theory/integral/interval_integral): add an alternative definition (#10380)
Prove that `∫ x in a..b, f x ∂μ = sgn a b • ∫ x in Ι a b, f x ∂μ`,
where `sgn a b = if a ≤ b then 1 else -1`.

2021-11-22 19:46:14 2f5af98
feat(data/nat/prime): prime divisors (#10318)
Adding some basic lemmas about `factors` and `factors.to_finset`

2021-11-22 18:50:52 317483a
feat(analysis/calculus/parametric_integral): generalize, rename (#10397)
* add `integral` to lemma names;
* a bit more general
  `has_fderiv_at_integral_of_dominated_loc_of_lip'`: only require an
  estimate on `∥F x a - F x₀ a∥` instead of `∥F x a - F y a∥`;
* generalize the `deriv` lemmas to `F : 𝕜 → α → E`, `[is_R_or_C 𝕜]`.

2021-11-22 16:51:24 d2ebcad
fix(undergrad.yaml): reinstate deleted entry (#10416)
Revert an (I assume accidental?) deletion in #10415.
cc @PatrickMassot

2021-11-22 13:14:41 c896162
feat(data/finset/basic) eq_of_mem_singleton (#10414)
The `finset` equivalent of [set.eq_of_mem_singleton](https://leanprover-community.github.io/mathlib_docs/find/set.eq_of_mem_singleton/src)

2021-11-22 11:23:11 d8d0c59
chore(algebra/opposites): split group actions and division_ring into their own files (#10383)
This splits out `group_theory.group_action.opposite` and `algebra.field.opposite` from `algebra.opposites`.
The motivation is to make opposite actions available slightly earlier in the import graph.
We probably want to split out `ring` at some point too, but that's likely a more annoying change so I've left it for future work.
These lemmas are just moved, and some `_root_` prefixes eliminated by removing the surrounding `namespace`.

2021-11-22 11:23:10 2aea996
feat(data): define a `fun_like` class of bundled homs (function + proofs) (#10286)
This PR introduces a class `fun_like` for types of bundled homomorphisms, like `set_like` is for bundled subobjects. This should be useful by itself, but an important use I see for it is the per-morphism class refactor, see #9888.
Also, `coe_fn_coe_base` now has an appropriately low priority, so it doesn't take precedence over `fun_like.has_coe_to_fun`.

2021-11-22 09:54:52 7a5fac3
feat(ring_theory/roots_of_unity): primitive root lemmas (#10356)
From the flt-regular project.

2021-11-22 08:59:57 9f07579
docs(undergrad): add urls in linear algebra (#10415)
This uses the new possibility to put urls in `undergrad.yaml` hoping to help describing what is meant to be formalized. We should probably create wiki pages for some cases that are not so clear even with a url. There is one case where I could find only a French page and some cases where I couldn't find anything. Amazingly "endormorphism exponential" is such a case, but hopefully this example is already clear. Another kind of problematic item is the "example" item in the representation section. Presumably it should be removed and replaced with a couple of explicit examples such as "standard representation of a matrix group" or "permutation representation".

2021-11-22 00:26:55 9277d4b
chore(data/finset/basic): finset.prod -> finset.product in module docstring (#10413)

2021-11-21 22:33:27 d17db71
chore(*): golf proofs about `filter.Coprod` (#10400)
Also add some supporting lemmas.

2021-11-21 22:33:26 d98b8e0
feat(linear_algebra/bilinear_map): semilinearize bilinear maps (#10373)
This PR generalizes most of `linear_algebra/bilinear_map` to semilinear maps. Along the way, we introduce an instance for `module S (E →ₛₗ[σ] F)`, with `σ : R →+* S`. This allows us to define "semibilinear" maps of type `E →ₛₗ[σ] F →ₛₗ[ρ] G`, where `E`, `F` and `G` are modules over `R₁`, `R₂` and `R₃` respectively, and `σ : R₁ →+* R₃` and `ρ : R₂ →+* R₃`. See `mk₂'ₛₗ` to see how to construct such a map.

2021-11-21 21:47:34 8f07d75
feat(measure_theory/covering/differentiation): differentiation of measures (#10101)
If `ρ` and `μ` are two Radon measures on a finite-dimensional normed real vector space, then for `μ`-almost every `x`, the ratio `ρ (B (x, r)) / μ (B(x,r))` converges when `r` tends to `0`, towards the Radon-Nikodym derivative of `ρ` with respect to `μ`. This is the main theorem on differentiation of measures.
The convergence in fact holds for more general families of sets than balls, called Vitali families (the fact that balls form a Vitali family is a restatement of the Besicovitch covering theorem). The general version of the differentation of measures theorem is proved in this PR, following [Federer, geometric measure theory].

2021-11-21 20:56:17 8ee634b
feat(measure_theory): define volume on `complex` (#10403)

2021-11-21 18:40:48 2168297
feat(analysis/inner_product_space/projection): orthogonal group is generated by reflections (#10381)

2021-11-21 16:46:44 e0c0d84
feat(topology/separation): removing a finite set from a dense set preserves density (#10405)
Also add the fact that one can find a dense set containing neither top nor bottom in a nontrivial dense linear order.

2021-11-21 11:11:05 55b81f8
feat(measure_theory): measure preserving maps and integrals (#10326)
If `f` is a measure preserving map, then `∫ y, g y ∂ν = ∫ x, g (f x) ∂μ`. It was two rewrites with the old API (`hf.map_eq`, then a lemma about integral over map measure); it's one `rw` now.
Also add versions for special cases when `f` is a measurable embedding (in this case we don't need to assume measurability of `g`).

2021-11-20 23:37:29 2a28652
feat(data/finset/basic): add filter_erase (#10384)
Like `filter_insert`, but for `erase`

2021-11-20 21:22:54 32c0507
feat(data/nat/interval): add Ico_succ_left_eq_erase (#10386)
Adds `Ico_succ_left_eq_erase`. Also adds a few order lemmas needed for this.
See [this discussion](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ico_succ_left_eq_erase_Ico/near/259180476)

2021-11-20 13:22:08 b3538bf
feat(topology/algebra/infinite_sum): add `has_sum.smul_const` etc (#10393)
Rename old `*.smul` to `*.const_smul`.

2021-11-20 11:30:32 618447f
feat(analysis/special_functions/complex/arg): review, golf, lemmas (#10365)
* add `|z| * exp (arg z * I) = z`;
* reorder theorems to help golfing;
* prove formulas for `arg z` in terms of `arccos (re z / abs z)` in cases `0 < im z` and `im z < 0`;
* use them to golf continuity of `arg`.

2021-11-20 02:42:14 bd6c6d5
chore(scripts): update nolints.txt (#10391)
I am happy to remove some nolints for you!

2021-11-19 15:45:43 db926f0
chore(category_theory/limits/shapes/pullbacks): fix diagrams in docs (#10379)

2021-11-19 14:34:11 7638fe2
doc(topology/separation): two typos (#10382)

2021-11-19 12:03:57 e8858fd
refactor(algebra/opposites): use mul_opposite for multiplicative opposite (#10302)
Split out `mul_opposite` from `opposite`, to leave room for an `add_opposite` in future.
Multiplicative opposites are now spelt `Aᵐᵒᵖ` instead of `Aᵒᵖ`. `Aᵒᵖ` now refers to the categorical opposite.

2021-11-19 10:10:47 d6814c5
feat(*): Reduce imports to only those necessary in the entire library (#10349)
We reduce imports of many files in the library to only those actually needed by the content of the file, this is done by inspecting the declarations and attributes used by declarations in a file, and then computing a minimal set of imports that includes all of the necessary content. (A tool to do this was written by @jcommelin and I for this purpose).
The point of doing this is to reduce unnecessary recompilation when files that aren't needed for some file higher up the import graph are changed and everything in between gets recompiled. 
Another side benefit might be slightly faster simp / library_searches / tc lookups in some files as there may be less random declarations in the environment that aren't too relevant to the file.
The exception is that we do not remove any tactic file imports (in this run at least) as that requires more care to get right.
We also skip any `default.lean` files as the point of these is to provide a convenient way of importing a large chunk of the library (though arguably no mathlib file should import a default file that has no non-import content).
Some OLD statistics (not 100% accurate as several things changed since then):
The average number of imports of each file in the library reduces by around 2, (this equals the average number of dependencies of each file) raw numbers are `806748 / 2033` (total number of transitive links/total number files before) to `802710 / 2033` (after)
The length of the longest chain of imports in mathlib decreases from 139 to 130.
The imports (transitively) removed from the most from other files are as follows (file, decrease in number of files importing):
```
data.polynomial.degree.trailing_degree 13
linear_algebra.quotient 13
ring_theory.principal_ideal_domain 13
data.int.gcd 14
data.polynomial.div 14
data.list.rotate 15
data.nat.modeq 15
data.fin.interval 17
data.int.interval 17
data.pnat.interval 17
```
The original script generated by an import-reducing tool is at https://github.com/alexjbest/dag-tools though I did clean up the output and some weirdness after running this script
In touched files the imports are put into alphabetical order, we tried not to touch too many files that don't have their imports changed, but some were in the many merges and iterations on this.
There are a couple of changes to mathlib not to an import line (compared to master) that I couldn't resist doing that became apparent when the tool recommended deletions of imports containing named simp lemmas in the file, that weren't firing and so the tool was right to remove the import.
Another sort of issue  is discussed in https://github.com/leanprover-community/mathlib/blob/master/src/algebraic_geometry/presheafed_space/has_colimits.lean#L253, this is discussed at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Reordering.20ext.20lemmas/near/261581547 and there seems to be currently no good way to avoid this so we just fix the proof. One can verify this with the command ` git diff origin/master -I import`
At a later point we hope to modify this tooling to suggest splits in long files by their prerequisites, but getting the library into a more minimal state w.r.t file imports seems to be important for such a tool to work well.

2021-11-19 08:56:27 5000fb0
feat(data/polynomial/eval): is_root_(prod/map) (#10360)

2021-11-19 08:01:42 784fe06
feat(analysis/calculus/deriv): generalize lemmas about deriv and `smul` (#10378)
Allow scalar multiplication by numbers from a different field.

2021-11-18 21:48:21 f3f4442
feat(logic/basic): define exists_unique_eq as a simp lemma (#10364)

2021-11-18 20:52:43 d5d2c4f
feat(field_theory/splitting_field): add a more general algebra instance as a def (#10220)
Unfortunately this def results in the following non-defeq diamonds in `splitting_field_aux.algebra` and `splitting_field.algebra`:
```lean
example
  (n : ℕ) {K : Type u} [field K] {f : polynomial K} (hfn : f.nat_degree = n) :
    (add_comm_monoid.nat_module : module ℕ (splitting_field_aux n f hfn)) =
  @algebra.to_module _ _ _ _ (splitting_field_aux.algebra n _ hfn) :=
rfl --fail
example : (add_comm_group.int_module _ : module ℤ (splitting_field_aux n f hfn)) =
  @algebra.to_module _ _ _ _ (splitting_field_aux.algebra f) :=
rfl --fail
```
For this reason, we do not make `splitting_field.algebra` an instance by default. The `splitting_field_aux.algebra` instance is less harmful as it is an implementation detail.
However, the new def is still perfectly good for recovering the old less-general instance, and avoids the need for `restrict_scalars.algebra`.

2021-11-18 17:07:15 9654071
feat(topology/algebra/module): add `is_scalar_tower` and `smul_comm_class` instances for `continuous_linear_map` (#10375)
Also generalize some instances about `smul`.

2021-11-18 15:50:36 0d09e99
feat(measure_theory/integral/{set_to_l1,bochner}): generalize results about integrals to `set_to_fun` (#10369)
The Bochner integral is a particular case of the `set_to_fun` construction. We generalize some lemmas which were proved for integrals to `set_to_fun`, notably the Lebesgue dominated convergence theorem.

2021-11-18 14:41:58 0ededd5
chore(analysis/calculus): use `is_R_or_C` in several lemmas (#10376)

2021-11-18 12:48:11 198ed6b
doc(order/monotone): fix 2 typos (#10377)

2021-11-18 02:36:10 2f3b185
chore(scripts): update nolints.txt (#10374)
I am happy to remove some nolints for you!

2021-11-17 19:11:23 f8cbb3e
chore(.docker): don't install unnecessary toolchains (#10363)

2021-11-17 19:11:22 5d1363e
feat(data/nat/parity): add lemmas (#10352)
From FLT-regular.

2021-11-17 18:15:31 276ab17
feat(linear_algebra/bilinear_form): add lemmas (#10353)
From FLT-regular.

2021-11-17 15:37:37 6f793bb
chore(measure_theory/group/basic): drop measurability assumption (#10367)

2021-11-17 14:46:00 e14e87a
chore(category_theory/filtered): slightly golf two proofs (#10368)

2021-11-17 09:02:09 c7441af
feat(linear_algebra/bilinear_form): add lemmas about congr (#10362)
With these some of the `nondegenerate` proofs can be golfed to oblivion, rather than reproving variants of the same statement over and over again.

2021-11-17 09:02:08 568435c
chore(analysis/inner_product_space/projection): typeclass inference for completeness (#10357)
As of #5408, most lemmas about orthogonal projection onto a subspace `K` / reflection through a subspace `K` / orthogonal complement of `K` which require `K` to be complete phrase this in terms of `complete_space K` rather than `is_complete K`, so that it can be found by typeclass inference.  A few still used the old way; this PR completes the switch.

2021-11-17 09:02:07 d5c2b34
chore(analysis/mean_inequalities): split mean_inequalities into two files (#10355)
This PR puts all results related to power functions into a new file.
Currently, we prove convexity of `exp` and `pow`, then use those properties in `mean_inequalities`. I am refactoring some parts of the analysis library to reduce the use of derivatives. I want to prove convexity of exp without derivatives (in a future PR), prove Holder's inequality, then use it to prove the convexity of pow. This requires Holder's inequality to be in a file that does not use convexity of pow, hence the split.
I needed to change the proof of Holder's inequality since it used the generalized mean inequality (hence `pow`). I switched to the second possible proof mentioned in the file docstring.
I also moved some lemmas in `mean_inequalities` to have three main sections: AM-GM, then Young and a final section with Holder and Minkowski.

2021-11-17 09:02:05 60363a4
feat(finset/basic): Adding `list.to_finset_union` and `list.to_finset_inter` (#10351)
Two tiny lemmas, matching their counterparts for `multiset`

2021-11-17 07:06:12 8f6fd1b
lint(*): curly braces linter (#10280)
This PR:
1. Adds a style linter for curly braces: a line shall never end with `{` or start with `}` (modulo white space)
2. Adds `scripts/cleanup-braces.{sh,py}` to reflow lines that violate (1)
3. Runs the scripts from (2) to generate a boatload of changes in mathlib
4. Fixes one line that became to long due to (3)

2021-11-17 04:51:54 2bdadb4
feat(order/imp): define `lattice.imp` and `lattice.biimp` (#10327)

2021-11-16 23:48:06 0a2a922
feat(combinatorics/set_family/shadow): Shadow of a set family (#10223)
This defines `shadow 𝒜` where `𝒜 : finset (finset α))`.

2021-11-16 23:48:05 7fec401
feat(topology/metric_space/hausdorff_distance): add definition and lemmas about open thickenings of subsets (#10188)
Add definition and basic API about open thickenings of subsets in metric spaces, in preparation for the portmanteau theorem on characterizations of weak convergence of Borel probability measures.

2021-11-16 21:57:02 bce0ede
feat(number_theory/divisors): mem_divisors_self (#10359)
From flt-regular.

2021-11-16 21:57:00 8f7971a
refactor(linear_algebra/bilinear_form): Change namespace of is_refl, is_symm, and is_alt (#10338)
The propositions `is_refl`, `is_symm`, and `is_alt` are now in the
namespace `bilin_form`. Moreover, `is_sym` is now renamed to `is_symm`.

2021-11-16 21:56:59 698eb1e
feat(data/fin/basic): add lemmas about fin.cast (#10329)

2021-11-16 18:44:35 9fa14a6
feat(topology/uniform_space): properties of uniform convergence (#9958)
* From the sphere eversion project
* multiple proofs were golfed by @PatrickMassot 
* Probably some proofs can be golfed quite heavily
Co-authored by: Patrick Massot <patrickmassot@free.fr>

2021-11-16 18:44:34 d6b83d8
feat(number_theory): define the class number (#9071)
We instantiate the finiteness proof of the class group for rings of integers, and define the class number of a number field, or of a separable function field, as the finite cardinality of the class group.
Co-Authored-By: Ashvni <ashvni.n@gmail.com>
Co-Authored-By: Filippo A. E. Nuccio <filippo.nuccio@univ-st-etienne.fr>

2021-11-16 15:57:33 f780788
feat(dynamics): define `{mul,add}_action.is_minimal` (#10311)

2021-11-16 12:48:56 d36f17f
feat(linear_algebra/sesquilinear_form): Add is_refl for sesq_form.is_alt (#10341)
Lemma `is_refl` shows that an alternating sesquilinear form is reflexive.
Refactored `sesquilinear_form` in a similar way as `bilinear_form` will be in #10338.

2021-11-16 12:48:55 7f4b91b
feat(linear_algebra/determinant): the determinant associated to the standard basis of the free module is the usual matrix determinant (#10278)
Formalized as part of the Sphere Eversion project.

2021-11-16 12:48:54 e20af15
feat(field_theory): define the field of rational functions `ratfunc` (#9563)
This PR defines `ratfunc K` as the field of rational functions over a field `K`, in terms of `fraction_ring (polynomial K)`. I have been careful to use `structure`s and `@[irreducible] def`s. Not only does that make for a nicer API, it also helps quite a bit with unification since the check can stop at `ratfunc` and doesn't have to start unfolding along the lines of `fraction_field.field → localization.comm_ring → localization.comm_monoid → localization.has_mul` and/or `polynomial.integral_domain → polynomial.comm_ring → polynomial.ring → polynomial.semiring`.
Most of the API is automatically derived from the (components of the) `is_fraction_ring` instance: the map `polynomial K → ratpoly K` is `algebra_map`, the isomorphism to `fraction_ring (polynomial K)` is `is_localization.alg_equiv`, ...
As a first application to verify that the definitions work, I rewrote `function_field` in terms of `ratfunc`.

2021-11-16 08:37:36 f01399c
chore(order/filter/basic): add 2 trivial `simp` lemmas (#10344)

2021-11-16 08:37:35 1181c99
feat(algebra/order/archimedean): upgrade some `∃` to `∃!` (#10343)

2021-11-16 06:43:17 30abde6
chore(*): clean up some unused open statements and extra simps (#10342)
We clean up some specific statements that are essentially no-ops in the library, i.e. opening a namespace and then never using it and using a simp-set larger than actually needed.
This is a preparatory miscellany of small fixes for a larger PR upcoming from me and Johan to reduce imports in the library.
Hopefully merging this first will make the content of that PR clearer.

2021-11-16 04:55:57 979f0e8
feat(data/fin/basic): extract `div_nat`  and `mod_nat` from `fin_prod_fin_equiv` (#10339)
This makes it a little easier to tell which component is div and which is mod from the docs alone, and also makes these available earlier than `data/equiv/fin`.

2021-11-16 03:17:25 bd80b33
chore(ring_theory/subring): fix stale docstring (#10340)
Oversight from https://github.com/leanprover-community/mathlib/pull/10332

2021-11-16 02:30:50 9264f30
feat(analysis/calculus/times_cont_diff): continuous affine maps are smooth (#10335)
Formalized as part of the Sphere Eversion project.

2021-11-16 00:29:07 bff69c9
feat(data/nat/lattice): add ```Inf_add``` lemma  (#10008)
Adds a lemma about Inf on natural numbers. It will be needed for the count PR.

2021-11-16 00:29:05 ddb6c75
feat(algebra/homology/exact): preadditive.exact_iff_exact_of_iso (#9979)

2021-11-15 22:46:44 9074095
chore(linear_algebra/pi_tensor_product): add reindex_reindex (#10336)

2021-11-15 22:46:43 a0f2c47
feat(logic/relation): induction principles for `trans_gen` (#10331)
Corresponding induction principles already exist for `refl_trans_gen`.

2021-11-15 22:46:41 65ff54c
feat(data/fintype/basic): add fin_injective (#10330)

2021-11-15 21:01:46 93047c5
feat(linear_algebra/determinant): linear coordinates are ratio of determinants (#10261)
Formalized as part of the Sphere Eversion project.

2021-11-15 21:01:45 7ccc7ae
feat(topology/homotopy/fundamental_groupoid): The functor from `Top` to `Groupoid` (#10195)
I have no idea if the ways I've done things is the right way, eg. I don't know if I need to be thinking about universes when defining the functor, so comments about that are definitely welcome.

2021-11-15 21:01:44 9c03e9d
feat(data/fintype): computable trunc bijection from fin (#10141)
When a type `X` lacks decidable equality, there is still computably a bijection `fin (card X) -> X` using `trunc`.
Also, move `fintype.equiv_fin_of_forall_mem_list` to `list.nodup.nth_le_equiv_of_forall_mem_list`.

2021-11-15 19:12:05 7b60768
feat(ring_theory/subring): weaken typeclass assumption for `units.pos_subgroup` (#10332)

2021-11-15 19:12:03 7803884
feat(data/pi): Composition of addition/subtraction/... of functions (#10305)

2021-11-15 19:12:01 43ef578
feat(category_theory/limits): Random results about limits. (#10285)

2021-11-15 19:11:58 1a47cfc
feat(data/finset/basic): A finset has card two iff it's `{x, y}` for some `x ≠ y` (#10252)
and the similar result for card three. Dumb but surprisingly annoying!

2021-11-15 19:11:56 9fe0cbc
feat(category_theory/preadditive/additive_functor): map_zero' is a redundant field, remove it (#10229)
The map_zero' field in the definition of an additive functor can be deduced from the map_add' field. So we remove it.

2021-11-15 17:27:15 64418d7
fix(logic/basic): remove `noncomputable lemma` (#10292)
It's been three years since this was discussed according to the zulip archive link in the library note.
According to CI, the reason is no longer relevant. Leaving these as `noncomputable lemma` is harmful as it results in non-defeq instance diamonds sometimes as lean was not able to unfold the lemmas to get to the data underneath.
Since these are now `def`s, the linter requires them to have docstrings.

2021-11-15 17:27:13 d5d6071
chore(analysis/special_functions/trigonometric/arctan): put lemmas about derivatives into a new file (#10157)

2021-11-15 16:52:02 02100d8
feat(category_theory/sites/limits): `Sheaf J D` has colimits. (#10334)
We show that the category of sheaves has colimits obtained by sheafifying colimits on the level of presheaves.

2021-11-15 14:41:25 bf06854
feat(algebra/big_operators/basic): Sum over a product of finsets, right version (#10124)
This adds `finset.sum_prod_right` and renames `finset.sum_prod` to `finset.sum_prod_left`.

2021-11-15 12:56:47 ca5c4b3
feat(group_theory/group_action): add a few instances (#10310)
* regular and opposite regular actions of a group on itself are transitive;
* the action of a group on an orbit is transitive.

2021-11-15 10:57:56 ca61dbf
feat(order/sup_indep): Finite supremum independence (#9867)
This defines supremum independence of indexed finsets.

2021-11-15 08:05:28 60bc370
feat(category_theory/sites/limits): `Sheaf_to_presheaf` creates limits (#10328)
As a consequence, we obtain that sheaves have limits (of a given shape) when the target category does, and that these limit sheaves are computed on each object of the site "pointwise".

2021-11-15 05:07:52 189e066
feat(category_theory/sites/sheafification): The sheafification of a presheaf. (#10303)
We construct the sheafification of a presheaf `P` taking values in a concrete category `D` with enough (co)limits, where the forgetful functor preserves the appropriate (co)limits and reflects isomorphisms.
We follow the construction on the stacks project https://stacks.math.columbia.edu/tag/00W1
**Note:** There are two very long proofs here, so I added several comments explaining what's going on.

2021-11-15 04:19:49 62992fa
feat(analysis/inner_product_space/spectrum): more concrete diagonalization theorem (#10317)
This is a second version of the diagonalization theorem for self-adjoint operators on finite-dimensional inner product spaces, stating that a self-adjoint operator admits an orthonormal basis of eigenvectors, and deducing the standard consequences (when expressed with respect to this basis the operator acts diagonally).
I have also updated `undergrad.yaml` and `overview.yaml` to cover the diagonalization theorem and other things proved in the library about Hilbert spaces.

2021-11-14 20:27:17 0c8f53e
feat(linear_algebra/trace): add lemmas about trace of linear maps (#10279)
Lemmas for the trace of the identity and the trace of a conjugation

2021-11-14 18:03:48 1b51fe0
feat(linear_algebra/alternating): add alternating_map.comp_linear_map (#10314)

2021-11-14 17:03:13 8728e85
feat(measure_theory): drop some unneeded assumptions (#10319)
Prove that for a nontrivial countably generated filter there exists a sequence that converges to this filter. Use this lemma to drop some assumptions.

2021-11-14 15:22:16 5307dc1
feat(data/equiv/module): add module.to_module_End (#10300)
The new definitions are:
* `distrib_mul_action.to_module_End`
* `distrib_mul_action.to_module_aut`
* `module.to_module_End`
Everything else is a move.
This also moves the group structure on linear_equiv earlier in the import heirarchy.
This is more consistent with where it is for `linear_map`.

2021-11-14 15:22:15 299af47
chore(data/fin/basic): move tuple stuff to a new file (#10295)
There are almost 600 lines of tuple stuff, which is definitely sufficient to justify a standalone file.
The author information has been guessed from the git history.
Floris is responsible for `cons` and `tail` which came first in #1294, Chris added find, and Yury and Sébastien were involved all over the place.
This is simply a cut-and-paste job, with the exception of the new module docstring which has been merged with the docstring for the tuple subheading.

2021-11-14 15:22:14 7dc33bf
feat(data/nat/basic): Some `nat.find` lemmas (#10263)
This proves `nat.find_le` and `nat.find_add` and renames the current `nat.find_le` to `nat.find_mono`.

2021-11-14 13:46:33 dd72ebc
feat(data/list/big_operators): When `list.sum` is strictly positive (#10282)

2021-11-14 09:32:09 bca8278
feat(algebra/lie/basic): add missing `@[ext]` and `@[simp]` lemmas (#10316)

2021-11-13 21:34:57 3b5edd0
refactor(set_theory/cardinal_ordinal): use TC assumptions instead of inequalities (#10313)
Assume `[fintype α]` or `[infinite α]` instead of `#α < ω` or `ω ≤ #α`.

2021-11-13 19:05:20 d8c8725
feat(ring_theory,algebraic_geometry): Miscellaneous lemmas/def/typo corrections (#10307)
Split out from #9802 since I'm aiming at more general version.

2021-11-13 17:25:11 ca56c5a
feat(measure_theory/group): define a few `measurable_equiv`s (#10299)

2021-11-13 16:06:16 3578403
feat(*/{group,mul}_action): more lemmas (#10308)
* add several lemmas about orbits and pointwise scalar multiplication;
* generalize `mul_action.orbit.mul_action` to a monoid action;
* more lemmas about pretransitive actions, use `to_additive` more;
* add dot notation lemmas `is_open.smul` and `is_closed.smul`.

2021-11-13 14:24:59 b91d344
chore(data/equiv/*): rename `trans_symm` and `symm_trans` to `self_trans_symm` and `symm_trans_self`. (#10309)
This frees up `symm_trans` to state `(a.trans b).symm = a.symm.trans b.symm`.
These names are consistent with `self_comp_symm` and `symm_comp_self`.

2021-11-13 10:27:54 869cb32
chore(measure_theory/probability_mass_function): Refactor the `pmf` file into a definitions file and a constructions file (#10298)

2021-11-13 09:09:36 a7e38a0
feat(linear_algebra/bilinear_form): add is_refl and ortho_sym for alt_bilin_form (#10304)
Lemma `is_refl` shows that every alternating bilinear form is reflexive.
Lemma `ortho_sym` shows that being orthogonal with respect to an alternating bilinear form is symmetric.

2021-11-13 02:46:06 a232366
feat(analysis/inner_product_space/projection): orthonormal basis subordinate to an `orthogonal_family` (#10208)
In a finite-dimensional inner product space of `E`, there exists an orthonormal basis subordinate to a given direct sum decomposition into an `orthogonal_family` of subspaces `E`.

2021-11-12 23:21:30 8bb0b6f
feat(category_theory/sites/plus): If P is a sheaf, then the map from P to P^+ is an isomorphism. (#10297)
Also adds some simple results about (co)limits where the morphisms in the diagram are isomorphisms.

2021-11-12 21:42:51 55534c4
feat(data/nat/basic): recursion for set nat (#10273)
Adding a special case of `nat.le_rec_on` where the predicate is membership of a subset.

2021-11-12 20:02:20 6afda88
feat(analysis/inner_product_space/spectrum): diagonalization of self-adjoint endomorphisms (finite dimension) (#9995)
Diagonalization of a self-adjoint endomorphism `T` of a finite-dimensional inner product space `E` over either `ℝ` or `ℂ`:  construct a linear isometry `T.diagonalization` from `E` to the direct sum of `T`'s eigenspaces, such that `T` conjugated by `T.diagonalization` is diagonal:
```lean
lemma diagonalization_apply_self_apply (v : E) (μ : eigenvalues T) :
  hT.diagonalization (T v) μ = (μ : 𝕜) • hT.diagonalization v μ
```

2021-11-12 17:48:18 f0a9849
feat(category_theory/sites/sheaf): Add sheaf conditions in terms of multiforks/multiequalizers. (#10294)
Another PR toward sheafification.

2021-11-12 17:08:23 adb5c2d
chore(analysis/special_functions/trigonometric/complex): put results about derivatives into a new file (#10156)

2021-11-12 16:30:34 6262165
feat(analysis/normed_space/continuous_affine_map): isometry from space of continuous affine maps to product of codomain with space of continuous linear maps (#10201)
Formalized as part of the Sphere Eversion project.

2021-11-12 15:38:34 b9f7b4d
fix(algebra/graded_monoid): correct nonexistent names in tactic defaults (#10293)
These were left by a bad rename by me in the past, and resulted in the default values not actually working.

2021-11-12 15:38:33 d7b5ffa
chore(linear_algebra/multilinear): add const_of_is_empty (#10291)
This is extracted from `pi_tensor_product.is_empty_equiv`

2021-11-12 15:38:31 c5027c9
doc(field_theory/separable): typo (#10290)

2021-11-12 15:04:38 6cd6320
feat(group_theory/complement): `is_complement'.sup_eq_top` (#10230)
If `H` and `K` are complementary subgroups, then `H ⊔ K = ⊤`.

2021-11-12 12:24:46 07be904
doc(README): add list of emeritus maintainers (#10288)

2021-11-12 11:49:22 b51335c
feat(category_theory/sites/plus): `P⁺` for a presheaf `P`. (#10284)
This file adds the construction of `P⁺`, for a presheaf `P : Cᵒᵖ ⥤ D`, whenever `C` has a Grothendieck topology `J` and `D` has the appropriate (co)limits.
Later, we will show that `P⁺⁺` is the sheafification of `P`, under certain additional hypotheses on `D`.
See https://stacks.math.columbia.edu/tag/00W1

2021-11-12 10:27:58 e679093
feat(measure_theory): define `measurable_space` instance on a quotient (#10275)

2021-11-12 09:37:57 c45e70a
chore(analysis/special_functions/pow): put lemmas about derivatives into a new file (#10153)
In order to keep results about continuity of the power function in the original file, we prove some continuity results directly (these were previously proved using derivatives).

2021-11-12 07:59:47 75207e9
refactor(linear_algebra/eigenspace): refactor `eigenvectors_linearly_independent` (#10198)
This refactors the proof of the lemma
```lean
lemma eigenvectors_linear_independent (f : End K V) (μs : set K) (xs : μs → V)
  (h_eigenvec : ∀ μ : μs, f.has_eigenvector μ (xs μ)) :
  linear_independent K xs
```
to extract the formulation
```lean
lemma eigenspaces_independent (f : End K V) : complete_lattice.independent f.eigenspace
```
from which `eigenvectors_linear_independent` follows as a 1-liner.
I don't need this for anything (although it might have applications -- for example, cardinality lemmas) -- just think it's a possibly more elegant statement.

2021-11-12 07:59:46 1019dd6
feat(measure_theory/probability_mass_function): Define a measure assosiated to a pmf (#9966)
This PR defines `pmf.to_outer_measure` and `pmf.to_measure`, where the measure of a set is given by the total probability of elements of the set, and shows that this is a probability measure.

2021-11-12 07:25:31 9e1e4f0
feat(category_theory/sites/*): Dense subsite (#9694)
Defined `cover_dense` functors as functors into sites such that each object can be covered by images of the functor.
Proved that for a `cover_dense` functor `G`, any morphisms of presheaves `G ⋙ ℱ ⟶ G ⋙ ℱ'` can be glued into a 
morphism `ℱ ⟶ ℱ'`.

2021-11-12 04:52:56 6fd688b
chore(measure_theory): move `mutually_singular` to a new file (#10281)

2021-11-12 04:52:54 d7e320e
feat(category_theory/limits): Cone limiting iff terminal. (#10266)

2021-11-12 03:51:22 e5a79a7
feat(analysis/normed_space/star): introduce C*-algebras (#10145)
This PR introduces normed star rings/algebras and C*-rings/algebras, as well as a version of `star` bundled as a linear isometric equivalence.

2021-11-12 00:55:58 d6056ee
feat(field_theory/splitting_field): add eval_root_derivative_of_split (#10224)
From flt-regular.

2021-11-12 00:19:41 73b2b65
feat(category_theory/limits/concrete_category): A lemma about concrete multiequalizers (#10277)

2021-11-11 23:18:38 0b4c540
feat(field_theory/separable): X^n - 1 is separable iff ↑n ≠ 0. (#9779)
Most of the proof actually due to @Vierkantor!

2021-11-11 19:35:48 8cd5f0e
chore(category_theory/isomorphisms): Adjust priority for is_iso.comp_is_iso (#10276)
[See Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/iso.20to.20is_iso.20for.20types/near/261122457)
Given `f : X ≅ Y` with `X Y : Type u`, without this change, typeclass inference cannot deduce `is_iso f.hom` because `f.hom` is defeq to `(λ x, x) ≫ f.hom`, triggering a loop.

2021-11-11 19:35:47 d686025
feat(linear_algebra/pi_tensor_product): add subsingleton_equiv (#10274)
This is useful for constructing the tensor product of a single module, which we will ultimately need to show an isomorphism to `tensor_algebra`.
This also refactors `pempty_equiv` to use `is_empty`, which probably didn't exist at the time. This eliminates a surprising universe variable that was parameterizing `pempty`.

2021-11-11 19:35:45 f99d638
feat(measure_theory): integral over a family of pairwise a.e. disjoint sets (#10268)
Also golf a few proofs

2021-11-11 19:35:44 12c868a
refactor(group_theory/complement): Generalize `card_mul` to from subgroups to subsets (#10264)
Adds `is_complement.card_mul`, which generalizes `is_complement'.card_mul`.

2021-11-11 19:35:42 72ca0d3
feat(linear_algebra/pi_tensor_prod): generalize actions and provide missing smul_comm_class and is_scalar_tower instance (#10262)
Also squeezes some `simp`s.

2021-11-11 19:35:41 c7f3e5c
feat(group_theory/submonoid/membership): `exists_multiset_of_mem_closure` (#10256)
Version of `exists_list_of_mem_closure` for `comm_monoid`.

2021-11-11 19:35:40 9a30dcf
feat(data/finset/pairwise): Interaction of `set.pairwise_disjoint` with `finset` (#10244)
This proves a few results about `set.pairwise_disjoint` and `finset` that couldn't go `data.set.pairwise` because of cyclic imports.

2021-11-11 19:35:38 820f8d7
feat(group_theory/index): Index of `subgroup.map` (#10232)
Proves `(H.map f).index = H.index`, assuming `function.surjective f` and `f.ker ≤ H`.

2021-11-11 19:35:37 4b1a057
feat(algebra/order/sub): An `add_group` has ordered subtraction (#10225)
This wraps up `sub_le_iff_le_add` in an `has_ordered_sub` instance.

2021-11-11 19:35:36 a9c3ab5
feat(data/polynomial): assorted lemmas on division and gcd of polynomials (#9600)
This PR provides a couple of lemmas involving the division and gcd operators of polynomials that I needed for #9563. The ones that generalized to `euclidean_domain` and/or `gcd_monoid` are provided in the respective files.

2021-11-11 19:02:03 01e7b20
feat(analysis/subadditive): prove that, if u_n is subadditive, then u_n / n converges. (#10258)

2021-11-11 14:48:45 4df3cd7
chore(analysis/special_functions/complex/log): move results about derivatives to a new file (#10117)

2021-11-11 14:04:29 6e268cd
chore(probability_theory/notation): change `volume` to `measure_theory.measure.volume` (#10272)

2021-11-11 13:22:36 270c644
feat(measure_theory): add `ae_measurable.sum_measure` (#10271)
Also add a few supporting lemmas.

2021-11-11 11:44:13 c062d9e
feat(*): more bundled versions of `(fin 2 → α) ≃ (α × α)` (#10214)
Also ensure that the inverse function uses vector notation when possible.

2021-11-11 10:26:15 e4a882d
feat(measure_theory): a file about null measurable sets/functions (#10231)
* Move definitions and lemmas about `null_measurable` to a new file.
* Redefine, rename, review API.

2021-11-11 09:29:24 d5964a9
feat(measure_theory): `int.floor` etc are measurable (#10265)
## API changes
### `algebra/order/archimedean`
* rename `rat.cast_floor` to `rat.floor_cast` to reflect the order of operations;
* same for `rat.cast_ceil` and `rat.cast_round`;
* add `rat.cast_fract`.
### `algebra/order/floor`
* add `@[simp]` to `nat.floor_eq_zero`;
* add `nat.floor_eq_iff'`, `nat.preimage_floor_zero`, and `nat.preimage_floor_of_ne_zero`;
* add `nat.ceil_eq_iff`, `nat.preimage_ceil_zero`, and `nat.preimage_ceil_of_ne_zero`;
* add `int.preimage_floor_singleton`;
* add `int.self_sub_floor`, `int.fract_int_add`, `int.preimage_fract`, `int.image_fract`;
* add `int.preimage_ceil_singleton`.
### `measure_theory/function/floor`
New file. Prove that the functions defined in `algebra.order.floor` are measurable.

2021-11-11 07:23:55 8c1fa70
feat(category_theory/limits/concrete_category): Some lemmas about filtered colimits (#10270)
This PR adds some lemmas about (filtered) colimits in concrete categories which are preserved under the forgetful functor.
This will be used later for the sheafification construction.

2021-11-10 21:52:09 dfa7363
feat(analysis/normed_space/finite_dimension): finite-dimensionality of spaces of continuous linear map (#10259)

2021-11-10 20:44:38 3c2bc2e
lint(scripts/lint-style.py): add indentation linter (#10257)

2021-11-10 17:25:44 6f10557
refactor(order): order_{top,bot} as mixin (#10097)
This changes `order_top α` / `order_bot α` to _require_ `has_le α` instead of _extending_ `partial_order α`.
As a result, `order_top` can be combined with other lattice typeclasses. This lends itself to more refactors downstream, such as phrasing lemmas that currently require orders/semilattices and top/bot to provide them as separate TC inference, instead of "bundled" classes like `semilattice_inf_top`.
This refactor also provides the basis for making more consistent the "extended" algebraic classes, like "e(nn)real", "enat", etc. Some proof terms for lemmas about `nnreal` and `ennreal` have been switched to rely on more direct coercions from the underlying non-extended type or other (semi)rings.
Modify `semilattice_{inf,sup}_{top,bot}` to not directly inherit from
`order_{top,bot}`. Instead, they are now extending from `has_{top,bot}`. Extending `order_{top,bot}` is now only possible is `has_le` is provided to the TC cache at `extends` declaration time, when using `old_structure_cmd true`. That is,
```
set_option old_structure_cmd true
class mnwe (α : Type u) extends semilattice_inf α, order_top α.
```
errors with
```
type mismatch at application
  @semilattice_inf.to_partial_order α top
term
  top
has type
  α
but is expected to have type
  semilattice_inf α
```
One can make this work through one of three ways:
No `old_structure_cmd`, which is unfriendly to the rest of the class hierarchy
Require `has_le` in `class mwe (α : Type u) [has_le α] extends semilattice_inf α, order_top α.`, which is unfriendly to the existing hierarchy and how lemmas are stated.
Provide an additional axiom on top of a "data-only" TC and have a low-priority instance:
```
class semilattice_inf_top (α : Type u) extends semilattice_inf α, has_top α :=
(le_top : ∀ a : α, a ≤ ⊤)
@[priority 100]
instance semilattice_inf_top.to_order_top : order_top α :=
{ top := ⊤,  le_top := semilattice_inf_top.le_top }
```
The third option is chosen in this refactor.
Pulled out from #9891, without the semilattice refactor.

2021-11-10 16:26:10 cd5cb44
chore(set_theory/cardinal_ordinal): golf some proofs (#10260)

2021-11-10 14:52:29 8aadbcb
feat(linear_algebra/*_algebra): add some simp lemmas about the algebra map and generators of free constructions (#10247)
These are quite repetitive, but I'm not sure how to generalize

2021-11-10 14:52:28 543fcef
chore(algebra/group_power/lemmas): minimize imports (#10246)
Most of these were imported transitively anyway, but `data.list.basic` is unneeded.

2021-11-10 14:52:26 444b596
doc(ring_theory/norm) `norm_eq_prod_embeddings` docstring (#10242)

2021-11-10 14:52:24 bbbefe4
feat(measure_theory/constructions/{pi,prod}): drop some measurability assumptions (#10241)
Some lemmas (most notably `prod_prod` and `pi_pi`) are true for non-measurable sets as well.

2021-11-10 14:52:23 eadd440
feat(group_theory/index): `card_mul_index` (#10228)
Proves `nat.card H * H.index = nat.card G` as the special case of `K.relindex H * H.index = K.index` when `K = ⊥`.

2021-11-10 14:52:21 2b57ee7
fix(*): fix many indentation mistakes (#10163)

2021-11-10 14:52:20 f41854e
feat(ring_theory/ideal/over): algebra structure on R/p → S/P for `P` lying over `p` (#9858)
This PR shows `P` lies over `p` if there is an injective map completing the square `R/p ← R —f→ S → S/P`, and conversely that there is a (not necessarily injective, since `f` doesn't have to be) map completing the square if `P` lies over `p`. Then we specialize this to the case where `P = map f p` to provide an `algebra p.quotient (map f p).quotient` instance.
This algebra instance is useful if you want to study the extension `R → S` locally at `p`, e.g. to show `R/p : S/pS` has the same dimension as `Frac(R) : Frac(S)` if `p` is prime.

2021-11-10 14:52:18 e1fea3a
feat(ring_theory/ideal): the product and infimum of principal ideals (#9852)
Three useful lemmas for applying the Chinese remainder theorem when an ideal is generated by one, non-prime, element.

2021-11-10 13:12:51 bfd3a89
doc(algebra/ring/basic): fix typo (#10250)

2021-11-10 06:43:42 18412ef
feat(data/nat/cast): Cast of natural division is less than division of casts (#10251)

2021-11-10 02:49:27 3f173e1
feat(group_theory/complement): iff-lemmas for when bottom and top subgroups are complementary (#10143)
Adds iff lemmas for when bottom and top subgroups are complementary.

2021-11-09 23:52:35 64289fe
chore(group_theory/order_of_element): fix weird lemma name (#10245)

2021-11-09 23:52:33 10d3d25
chore(set_theory/cardinal): fix name & reorder universes (#10236)
* add `cardinal.lift_injective`, `cardinal.lift_eq_zero`;
* reorder universe arguments in `cardinal.lift_nat_cast` to match
`cardinal.lift` and `ulift`;
* rename `cardinal.nat_eq_lift_eq_iff` to `cardinal.nat_eq_lift_iff`;
* add `@[simp]` to `cardinal.lift_eq_zero`,
`cardinal.lift_eq_nat_iff`, and `cardinal.nat_eq_lift_iff`.

2021-11-09 23:52:32 7bdb6b3
feat(algebra/module/linear_map,linear_algebra/alternating,linear_algebra/multilinear/basic): no_zero_smul_divisors instances (#10234)
Add `no_zero_smul_divisors` instances for linear, multilinear and alternating maps, given such instances for the codomain of the maps.
This also adds some missing `coe_smul` lemmas on these types.

2021-11-09 17:02:26 a2810d9
feat(data/int/basic): coercion subtraction inequality (#10054)
Adding to simp a subtraction inequality over coercion from int to nat

2021-11-09 14:26:32 35d574e
feat(linear_algebra/determinant): alternating maps as multiples of determinant (#10233)
Add the lemma that any alternating map with the same type as the
determinant map with respect to a basis is a multiple of the
determinant map (given by the value of the alternating map applied to
the basis vectors).

2021-11-09 10:46:44 00d9b9f
feast(ring_theory/norm): add norm_eq_prod_embeddings (#10226)
We prove that the norm equals the product of the embeddings in an algebraically closed field.
Note that we follow a slightly different path than for the trace, since transitivity of the norm is more delicate, and we avoid it.
From flt-regular.

2021-11-09 09:20:22 11ced18
feat(algebra/lie/classical): Use computable matrix inverses where possible (#10218)

2021-11-09 09:20:21 8614615
refactor(data/nat/interval): simp for Ico_zero_eq_range (#10211)
This PR makes two changes: It refactors `nat.Ico_zero_eq_range` from `Ico 0 a = range a` to `Ico 0 = range`, and makes the lemma a simp lemma.
These changes feel good to me, but feel free to close this if this is not the direction we want to go with this lemma.

2021-11-09 07:29:49 0b093e6
feat(order/bounded_lattice): a couple of basic instances about with_bot still not having a top if the original preorder didn't and vice versa (#10215)
Used in the flt-regular project.

2021-11-09 03:25:48 6af6f67
chore(scripts): update nolints.txt (#10240)
I am happy to remove some nolints for you!

2021-11-09 03:25:47 9d49c4a
doc(data/finset/fold): fix typo (#10239)

2021-11-09 03:25:45 223f659
chore(linear_algebra/basic): remove a duplicate proof, generalize map_span_le (#10219)

2021-11-09 01:42:52 424012a
chore(*): bump to Lean 3.35.1 (#10237)

2021-11-08 22:17:41 440163b
chore(topology/algebra/mul_action): define `has_continuous_vadd` using `to_additive` (#10227)
Make additive version of the theory of `has_continuous_smul`, i.e., `has_continuous_vadd`, using `to_additive`.  I've been fairly conservative in adding `to_additive` tags -- I left them off lemmas that didn't seem like they'd be relevant for typical additive actions, like those about `units` or `group_with_zero`.
Also make `normed_add_torsor` an instance of `has_continuous_vadd` and use this to establish some of its continuity API.

2021-11-08 16:03:11 2e4813d
feat(linear_algebra/matrix/nonsingular_inverse): add invertible_equiv_det_invertible (#10222)

2021-11-08 16:03:10 1519cd7
chore(set_theory/cardinal): more simp, fix LHS/RHS (#10212)
While `coe (fintype.card α)` is a larger expression than `#α`, it allows us to compute the cardinality of a finite type provided that we have a `simp` lemma for `fintype.card α`. It also plays well with lemmas about coercions from `nat` and `cardinal.lift`.
* rename `cardinal.fintype_card` to `cardinal.mk_fintype`, make it a `@[simp]` lemma;
* deduce other cases (`bool`, `Prop`, `unique`, `is_empty`) from it;
* rename `cardinal.finset_card` to `cardinal.mk_finset`, swap LHS/RHS;
* rename `ordinal.fintype_card` to `ordinal.type_fintype`.

2021-11-08 16:03:09 66dea29
feat(analysis/convex/specific_functions): Strict convexity of `exp`, `log` and `pow` (#10123)
This strictifies the results of convexity/concavity of `exp`/`log` and add the strict versions for `pow`, `zpow`, `rpow`.
I'm also renaming `convex_on_pow_of_even` to `even.convex_on_pow` for dot notation.

2021-11-08 16:03:08 ef68f55
feat(linear_algebra/multilinear/basis): multilinear maps on basis vectors (#10090)
Add two versions of the fact that a multilinear map on finitely many
arguments is determined by its values on basis vectors.  The precise
requirements for each version follow from the results used in the
proof: `basis.ext_multilinear_fin` uses the `curry` and `uncurry`
results to deduce it from `basis.ext` and thus works for multilinear
maps on a family of modules indexed by `fin n`, while
`basis.ext_multilinear` works for an arbitrary `fintype` index type
but is limited to the case where the modules for all the arguments
(and the bases used for those modules) are the same, since it's
derived from the previous result using `dom_dom_congr` which only
handles the case where all the modules are the same.
This is in preparation for proving a corresponding result for
alternating maps, for which the case of all argument modules the same
suffices.
There is probably room for making results more general.

2021-11-08 14:15:15 eb67834
chore(ring_theory/noetherian): golf and generalize map_fg_of_fg (#10217)

2021-11-08 14:15:14 5ba41d8
feat(algebra/direct_sum): specialize `submodule_is_internal.independent` to add_subgroup (#10108)
This adds the lemmas `disjoint.map_order_iso` and `complete_lattice.independent.map_order_iso` (and `iff` versions), and uses them to transfer some results on `submodule`s to `add_submonoid`s and `add_subgroup`s.

2021-11-08 13:14:28 0dabcb8
chore(ring_theory/ideal/operations): relax the base ring of algebras from comm_ring to comm_semiring (#10024)
This also tidies up some variables and consistently uses `B` instead of `S` for the second algebra.
One proof in `ring_theory/finiteness.lean` has to be redone because typeclass search times out where it previously did not.
Thankfully, the new proof is shorter anyway.

2021-11-08 11:43:24 b4a5b01
feat(data/finset/basic): add card_insert_eq_ite (#10209)
Adds the lemma `card_insert_eq_ite` combining the functionality of `card_insert_of_not_mem` and `card_insert_of_mem`, analogous to how `card_erase_eq_ite`.

2021-11-08 11:43:23 2fd6a77
chore(algebra/algebra/basic): add `algebra.coe_linear_map` (#10204)

2021-11-08 11:43:20 4dd7eca
feat(analysis/{seminorm, convex/specific_functions}): A seminorm is convex (#10203)
This proves `seminorm.convex_on`, `convex_on_norm` (which is morally a special case of the former) and leverages it to golf `seminorm.convex_ball`.
This also fixes the explicitness of arguments of `convex_on.translate_left` and friends.

2021-11-08 11:43:19 e44aa6e
feat(linear_algebra/basic): some lemmas about span and restrict_scalars (#10167)

2021-11-08 11:43:18 fb0cfbd
feat(measure_theory/measure/complex): define complex measures (#10166)
Complex measures was defined to be a vector measure over ℂ without any API. This PR adds some basic definitions about complex measures and proves the complex version of the Lebesgue decomposition theorem.

2021-11-08 11:43:17 e4a1e80
feat(analysis/convex/combination): Convex hull of a `set.prod` and `set.pi` (#10125)
This proves
* `(∀ i, convex 𝕜 (t i)) → convex 𝕜 (s.pi t)`
* `convex_hull 𝕜 (s.prod t) = (convex_hull 𝕜 s).prod (convex_hull 𝕜 t)`
* `convex_hull 𝕜 (s.pi t) = s.pi (convex_hull 𝕜 ∘ t)`

2021-11-08 11:43:16 1fac00e
feat(analysis): lemmas about `arg` and `exp_map_circle` (#10066)

2021-11-08 11:43:15 48abaed
feat(analysis/special_functions/complex/arg): continuity of arg outside of the negative real half-line (#9500)

2021-11-08 10:06:42 32c8445
split(data/list/*): split off `data.list.basic` (#10164)
Killing the giants. This moves 700 lines off `data.list.basic` that were about
* `list.sum` and `list.product` into `data.list.big_operators`
* `list.countp` and `list.count` into `data.list.count`
* `list.sigma` and `list.prod` into `data.list.sigma_prod`

2021-11-08 08:27:27 380d6ca
chore(algebra/direct_sum/module): extract out common `variables` (#10207)
Slight reorganization to extract out repeatedly-used variable declarations, and update module docstring.  No changes to the content.

2021-11-08 08:27:25 bf242b7
feat(algebra/order/with_zero): add le lemmas (#10183)

2021-11-08 08:27:23 e0aa9f0
refactor(linear_algebra/matrix/nonsingular_inverse): clean up (#10175)
This file is a mess, and switches back and forth between three different inverses, proving the same things over and over again.
This pulls all the `invertible` versions of these statements to the top, and uses them here and there to golf proofs.
The lemmas `nonsing_inv_left_right` and `nonsing_inv_right_left` are merged into a single lemma `mul_eq_one_comm`.
The lemma `inv_eq_nonsing_inv_of_invertible` has been renamed to `inv_of_eq_nonsing_inv`
This also adds two new lemmas `inv_of_eq` and `det_inv_of`, both of which have trivial proofs.

2021-11-08 08:27:21 bc55cd7
feat(archive/imo) : Add solution to IMO 1994 Q1 (#10171)
IMO 1994 Q1

2021-11-08 08:27:20 62f94ad
feat(measure_theory/measurable_space): define `measurable_embedding` (#10023)
This way we can generalize our theorems about `measurable_equiv` and `closed_embedding`s.

2021-11-08 06:58:20 c50c2c3
docs(algebra/big_operators): correct documentation for prod (#10206)

2021-11-07 10:12:36 ae98aad
chore(measure_theory/measure): review API of `mutually_singular` (#10186)

2021-11-07 09:34:49 7a8a914
refactor(measure_theory/function/l1_space): remove hypothesis (#10185)
* from `tendsto_lintegral_norm_of_dominated_convergence`
* Missed this in #10181
* Add comment about the ability to weaker `bound_integrable`.

2021-11-07 05:17:04 7d240ce
chore(data/matrix/notation): split into 2 files (#10199)
I want to use `![a, b]` notation in some files that don't need to import `data.matrix.basic`.

2021-11-06 22:22:28 daac854
feat(analysis/special_functions/log): Relating `log`-inequalities and `exp`-inequalities (#10191)
This proves `log x ≤ y ↔ x ≤ exp y` and `x ≤ log y ↔ exp x ≤ y`.

2021-11-06 20:27:44 169bb29
feat(algebra/group/with_one): cleanup algebraic instances (#10194)
This:
* adds a `has_neg (with_zero α)` instance which sends `0` to `0` and otherwise uses the underlying negation (and the same for `has_inv (with_one α)`).
* replaces the `has_div (with_zero α)`,  `has_pow (with_zero α) ℕ`, and `has_pow (with_zero α) ℤ` instances in order to produce better definitional properties than the previous default ones.

2021-11-06 20:27:43 56a9228
feat(analysis/normed_space/continuous_affine_map): define bundled continuous affine maps (#10161)
I want to use the result the evaluation map `Hom(E, F) × E → F` is smooth in a category with continuous affine maps as morphisms. It is convenient to have a bundled type for this, despite the necessary boilerplate (proposed here).
Formalized as part of the Sphere Eversion project.

2021-11-06 20:27:42 26c0c23
feat(algebra/homology/image_to_kernel): homology.map_iso (#9978)

2021-11-06 18:49:17 f18278d
chore(algebra/opposites): use `injective.*` constructors (#10200)

2021-11-06 18:49:16 38caa50
feat(data/nat/basic): `a < a / b * b + b` (#10193)

2021-11-06 18:49:15 ebe7951
feat(algebra/big_operators/order): Bound on a product from a pointwise bound (#10190)
This proves `finset.le_prod_of_forall_le` which is the dual of `finset.prod_le_of_forall_le`.

2021-11-06 18:49:14 be412c3
fix(README): update specialties of maintainers (#10086)

2021-11-06 18:15:19 0c54c57
feat(data/set/equitable): A singleton is equitable (#10192)
Prove `set.subsingleton.equitable_on` and `set.equitable_on_singleton`.

2021-11-06 12:54:31 af36f1a
chore(algebra/group/ulift): use injective.* to define instances (#10172)
Also rename `ulift.mul_equiv` to `mul_equiv.ulift` and add some
missing instances.

2021-11-06 11:24:11 4b14ef4
feat(data/fintype): instances for `infinite (α ⊕ β)` and `infinite (α × β)` (#10196)

2021-11-06 09:47:22 239bf05
feat(data/list/basic): list products (#10184)
Adding a couple of lemmas about list products. The first is a simpler variant of `head_mul_tail_prod'` in the case where the list is not empty.  The other is a variant of `list.prod_ne_zero` for `list ℕ`.

2021-11-06 08:31:55 051cb61
feat(data/sym/sym2): Induction on `sym2` (#10189)
A few basics about `sym2` that were blatantly missing.

2021-11-06 02:12:53 4341fff
chore(set_theory/cardinal_ordinal): use notation ω (#10197)

2021-11-05 23:39:17 8174bd0
feat(analysis/inner_product_space/rayleigh): Rayleigh quotient produces eigenvectors (#9840)
Define `self_adjoint` for an operator `T` to mean `∀ x y, ⟪T x, y⟫ = ⟪x, T y⟫`.  (This doesn't require a definition of `adjoint`, although that will come soon.). Prove that a local extremum of the Rayleigh quotient of a self-adjoint operator on the unit sphere is an eigenvector, and use this to prove that in finite dimension a self-adjoint operator has an eigenvector.

2021-11-05 19:40:53 6cd6975
feat(order/lattice): add `inf_lt_sup` (#10178)
Also add `inf_le_sup`, `lt_or_lt_iff_ne`, and `min_lt_max`.

2021-11-05 19:40:52 85f6420
feat(algebra/group/inj_surj): add `injective.monoid_pow` etc (#10152)
Add versions of some constructors that take `pow`/`zpow`/`nsmul`/`zsmul` as explicit arguments.

2021-11-05 19:07:04 d69501f
feat(category_theory/limits/shapes/multiequalizer): Multi(co)equalizers (#10169)
This PR adds another special shape to the limits library, which directly generalizes shapes for many other special limits (like pullbacks, equalizers, etc.).  A `multiequalizer` can be thought of an an equalizer of two maps between two products. This will be used later on in the context of sheafification.
I don't know if there is a standard name for the gadgets this PR introduces. I would be happy to change the names if needed.

2021-11-05 17:51:20 cc59673
chore(*complex*): add a few simp lemmas (#10187)

2021-11-05 17:51:18 a71bfdc
feat(analysis/calculus/times_cont_diff): `equiv.prod_assoc` is smooth. (#10165)
Formalized as part of the Sphere Eversion project.

2021-11-05 17:51:17 d9a80ee
refactor(data/multiset/locally_finite): Generalize `multiset.Ico` to locally finite orders (#10031)
This deletes `data.multiset.intervals` entirely, redefines `multiset.Ico` using `locally_finite_order` and restores the lemmas in their correct generality:
* `multiset.Ico.map_add` → `multiset.map_add_left_Ico`, `multiset.map_add_right_Ico`
* `multiset.Ico.eq_zero_of_le` → `multiset.Ico_eq_zero_of_le `
* `multiset.Ico.self_eq_zero` → `multiset.Ico_self`
* `multiset.Ico.nodup` → `multiset.nodup_Ico`
* `multiset.Ico.mem` → `multiset.mem_Ico`
* `multiset.Ico.not_mem_top` → `multiset.right_not_mem_Ico`
* `multiset.Ico.inter_consecutive` → `multiset.Ico_inter_Ico_of_le`
* `multiset.Ico.filter_something` → `multiset.filter_Ico_something`
* `multiset.Ico.eq_cons` → `multiset.Ioo_cons_left`
* `multiset.Ico.succ_top` →`multiset.Ico_cons_right`
`open set multiset` now causes a (minor) clash. This explains the changes to `analysis.box_integral.divergence_theorem` and `measure_theory.integral.divergence_theorem`

2021-11-05 16:25:14 5f5ce2b
feat(combinatorics/simple_graph): adding simple_graph.support and mem_support / support_mono lemmas (#10176)

2021-11-05 15:19:39 8ac2fa0
chore(linear_algebra/affine_space/affine_map): make `affine_map.coe_sub` true by definition (#10182)
This makes life slightly easier in some work following on from https://github.com/leanprover-community/mathlib/pull/10161
Formalized as part of the Sphere Eversion project.

2021-11-05 15:19:38 b22a7c7
refactor(measure_theory/integral/bochner): remove superfluous hypothesis (#10181)
* Remove hypothesis from `tendsto_integral_of_dominated_convergence` that was superfluous
* This results in simplifying some proofs, and removing some hypotheses from other lemmas
* Also remove some `ae_measurable` hypotheses for functions that were also assumed to be `integrable`.

2021-11-05 15:19:37 88b4ce7
feat(algebra/order/with_zero): add with_zero.linear_ordered_comm_grou… (#10180)
…p_with_zero

2021-11-05 13:33:49 b31af6d
refactor(algebra/group): move `monoid.has_pow` etc to `algebra.group.defs` (#10147)
This way we can state theorems about `pow`/`nsmul` using notation `^` and `•` right away.
Also move some `ext` lemmas to a new file and rewrite proofs using properties of `monoid_hom`s.

2021-11-05 10:08:26 16af388
feat(data/quot): add `quotient.lift₂_mk` (#10173)

2021-11-05 08:27:18 35d3628
chore(data/bool): add `bool.lt_iff` (#10179)

2021-11-05 06:48:59 8991f28
feat(measure_theory/covering/vitali_family): define Vitali families (#10057)
Vitali families are families of sets (for instance balls around each point in vector spaces) that satisfy covering theorems. Their main feature is that differentiation of measure theorems hold along Vitali families. This PR is a stub defining Vitali families, and giving examples of them thanks to the Besicovitch and Vitali covering theorems.
The differentiation theorem is left for another PR.

2021-11-05 06:00:09 6f9ec12
doc(group_theory/sylow): Expand Frattini's argument docstring (#10174)
Expands the docstring for Frattini's argument.

2021-11-05 02:24:22 8490f2a
chore(scripts): update nolints.txt (#10177)
I am happy to remove some nolints for you!

2021-11-05 00:43:55 41a820d
feat(number_theory/lucas_primality): Add theorem for Lucas primality test (#8820)
This is a PR for adding the [Lucas primality test](https://en.wikipedia.org/wiki/Lucas_primality_test) to mathlib. This tells us that a number `p` is prime when an element `a : zmod p` has order `p-1` .

2021-11-04 22:36:42 d6a57f8
feat(data/finset/prod): When `finset.product` is nonempty (#10170)
and two lemmas about how it interacts with the union.

2021-11-04 22:36:40 b064622
feat(data/fin/interval): Cardinality of `finset.Ixi`/`finset.Iix` in `fin` (#10168)
This proves `(Ici a).card = n + 1 - a`, `(Ioi a).card = n - a`, `(Iic b).card = b + 1`, `(Iio b).card = b` where `a b : fin (n + 1)` (and also `a b : ℕ` for the last two).

2021-11-04 22:36:39 fab61c9
chore(topology/continuous_function/bounded): add simple lemmas (#10149)

2021-11-04 22:36:37 466fd27
feat(algebra/group_with_zero/basic): relax some commutativity assumptions (#10075)
Moving some lemmas so they require group_with_zero instead of comm_group_with_zero, using the generalization linter.

2021-11-04 22:36:36 ce0e058
feat(data/equiv/mul_add): add lemmas about multiplication and addition on a group being bijective and finite cancel_monoid_with_zeros (#10046)

2021-11-04 21:07:34 773a7a4
feat(analysis/ODE): prove Picard-Lindelöf/Cauchy-Lipschitz Theorem (#9791)

2021-11-04 20:30:13 74c27b2
feat(topology/sheaves): Pullback of presheaf (#9961)
Defined the pullback of a presheaf along a continuous map, and proved that it is adjoint to pushforwards
and it preserves stalks.

2021-11-04 18:49:13 79eb934
chore(data/mv_polynomial/basic): add `map_alg_hom_coe_ring_hom` (#10158)

2021-11-04 18:49:11 11439d8
chore(algebra/direct_sum/internal): add missing simp lemmas (#10154)
These previously weren't needed when these were `@[reducible] def`s as `simp` saw right through them.

2021-11-04 18:49:10 828e100
feat(data/finset/interval): `finset α` is a locally finite order (#9963)

2021-11-04 17:11:43 cf2ff03
feat(group_theory/sylow): Sylow subgroups are nontrivial! (#10144)
These lemmas (finally!) connect the work of @ChrisHughes24 with the recent definition of Sylow subgroups, to show that Sylow subgroups are actually nontrivial!

2021-11-04 17:11:42 52cd445
refactor(data/set/pairwise): Indexed sets as arguments to `set.pairwise_disjoint` (#9898)
This will allow to express the bind operation: you can't currently express that the pairwise disjoint union of pairwise disjoint sets pairwise disjoint. Here's the corresponding statement with `finset.sup_indep` (defined in #9867):
```lean
lemma sup_indep.sup {s : finset ι'} {g : ι' → finset ι} {f : ι → α}
  (hs : s.sup_indep (λ i, (g i).sup f)) (hg : ∀ i' ∈ s, (g i').sup_indep f) :
  (s.sup g).sup_indep f :=
```
You currently can't do `set.pairwise_disjoint s (λ i, ⋃ x ∈ g i, f x)`.

2021-11-04 15:29:36 5187a42
feat(linear_algebra/affine_space/affine_map): decomposition of an affine map between modules as an equiv (#10162)
Formalized as part of the Sphere Eversion project.

2021-11-04 15:29:34 22ec295
chore(data/set): lemmas about `disjoint` (#10148)

2021-11-04 15:29:33 69189d4
split(data/finset/prod): split off `data.finset.basic` (#10142)
Killing the giants. This moves `finset.product`, `finset.diag`, `finset.off_diag` to their own file, the theme being "finsets on `α × β`".
The copyright header now credits:
* Johannes Hölzl for ba95269a65a77c8ab5eae075f842fdad0c0a7aaf
* Mario Carneiro
* Oliver Nash for #4502

2021-11-04 13:04:54 de79226
feat(ring_theory/polynomial/basic): `polynomial.ker_map_ring_hom` and `mv_polynomial.ker_map` (#10160)

2021-11-04 13:04:53 2129d05
chore(measure_theory/function/special_functions): import inner_product_space.basic instead of inner_product_space.calculus (#10159)
Right now this changes almost nothing because other imports like `analysis.special_functions.pow` depend on calculus, but I am changing that in other PRs. `measure_theory/function/special_functions` will soon not depend on calculus at all.

2021-11-04 13:04:51 b890836
chore(analysis/calculus/times_cont_diff): rename `linear_isometry_map.times_cont_diff`; drop `_map` (#10155)
I think the old name is a typo; the new name enables dot notation.

2021-11-04 13:04:50 3cbe0fe
feat(linear_algebra/matrix/nonsingular_inverse): determinant of inverse is inverse of determinant (#10038)

2021-11-04 13:04:48 17afc5c
feat(topology/algebra/group_with_zero): continuity lemma for division (#9959)
* This even applies when dividing by `0`.
* From the sphere eversion project.
* This PR mentions `filter.tendsto_prod_top_iff` which is added by #9958

2021-11-04 11:24:16 211bdff
feat(data/nat/choose/basic): add some inequalities showing that choose is monotonic in the first argument (#10102)
From flt-regular

2021-11-04 11:24:14 1f0d878
feat(data/list): standardize list prefixes and suffixes (#10052)

2021-11-04 11:24:13 4c0b6ad
feat(topology/homotopy/basic): add `homotopic` for `continuous_map`s. (#9865)

2021-11-04 09:43:52 d219e6b
chore(data/equiv/mul_add): DRY (#10150)
use `units.mul_left`/`units.mul_right` to define
`equiv.mul_left₀`/`equiv.mul_right₀`.

2021-11-04 09:43:51 76ba1b6
chore(ring_theory/finiteness): make `finite_presentation.{quotient,mv_polynomial}` protected (#10091)
This lets us clean up some `_root_`s
This also golfs a proof

2021-11-04 07:56:27 8658f40
feat(algebra/group_power/order): Sign of an odd/even power without linearity (#10122)
This proves that `a < 0 → 0 < a ^ bit0 n` and `a < 0 → a ^ bit1 n < 0` in an `ordered_semiring`.

2021-11-04 02:36:27 4770a6a
chore(scripts): update nolints.txt (#10146)
I am happy to remove some nolints for you!

2021-11-04 00:15:53 0fac080
refactor(analysis/calculus/mean_value): Remove useless hypotheses (#10129)
Because the junk value of `deriv` is `0`, assuming `∀ x, 0 < deriv f x` implies that `f` is derivable. We thus remove all those redundant derivability assumptions.

2021-11-03 22:10:14 fed57b5
refactor(algebra/direct_sum): rework internally-graded objects (#10127)
This is a replacement for the `graded_ring.core` typeclass in #10115, which is called `set_like.graded_monoid` here. The advantage of this approach is that we can use the same typeclass for graded semirings, graded rings, and graded algebras.
Largely, this change replaces a bunch of `def`s with `instances`, by bundling up the arguments to those defs to a new typeclass. This seems to make life easier for the few global `gmonoid` instance we already provide for direct sums of submodules, suggesting this API change is a useful one.
In principle the new `[set_like.graded_monoid A]` typeclass is useless, as the same effect can be achieved with `[set_like.has_graded_one A] [set_like.has_graded_mul A]`; pragmatically though this is painfully verbose, and probably results in larger term sizes. We can always remove it later if it causes problems.

2021-11-03 20:00:44 6433c1c
feat(group_theory/sylow): Sylow subgroups are isomorphic (#10059)
Constructs `sylow.mul_equiv`.

2021-11-03 20:00:42 5541b25
refactor(group_theory/complement): Introduce abbreviation for subgroups (#10009)
Introduces abbreviation for `is_complement (H : set G) (K : set G)`.

2021-11-03 17:56:43 3a0b0d1
chore(order/lattice): add `exists_lt_of_sup/inf` (#10133)

2021-11-03 17:56:42 8f7ffec
chore(analysis/special_functions/trigonometric/inverse): move results about derivatives to a new file (#10110)
This is part of a refactor of the `analysis/special_functions` folder, in which I will isolate all lemmas about derivatives. The result will be a definition of Lp spaces that does not import derivatives.

2021-11-03 17:56:41 00a1022
chore(logic/relation): rename to permit dot notation (#10105)

2021-11-03 17:56:40 6993e6f
feat(measure_theory/constructions/borel_space): decomposing the measure of a set into slices (#10096)
Also add the fact that `μ (to_measurable μ t ∩ s) = μ (t ∩ s)`, and useful variations around this fact.

2021-11-03 17:56:38 b51f18f
feat(topology): properties about intervals and paths (#9914)
* From the sphere eversion project
* Properties about paths, the interval, and `proj_Icc`

2021-11-03 16:54:02 8d52be4
feat(measure_theory/function/ae_measurable_order): an ae measurability criterion for ennreal-valued functions (#10072)

2021-11-03 16:10:04 4f033b7
feat(analysis/seminorm): define the Minkowski functional (#9097)
This defines the gauge of a set, aka the Minkowski functional, in a vector space over a real normed field.

2021-11-03 14:39:55 95cdeba
doc(linear_algebra): fix wrong docstring (#10139)

2021-11-03 14:39:53 2b87435
feat(ring_theory/trace): remove a useless assumption (#10138)
We remove an assumption that is always true.

2021-11-03 14:39:52 93cec25
chore(*): replace `exact calc` by `calc` (#10137)
This PR is the result of a sed script that replaces
* `exact calc` by `calc`
* `refine calc` by `calc`

2021-11-03 13:35:53 eaf2a16
fix(scripts/lint-style.py): typo in error reporting (#10135)

2021-11-03 13:35:52 1e7f3ca
feat(data/zmod/basic): add nat_coe_eq_nat_coe_iff' (#10128)
To match the int version, from flt-regular

2021-11-03 09:01:33 e5c66a0
chore(topology/continuous_function/bounded): add `comp_continuous` (#10134)

2021-11-03 07:31:37 e5acda4
chore(order/conditionally_complete_lattice): drop an unneeded `nonempty` assumption (#10132)

2021-11-03 02:56:05 5f2e527
chore(scripts): update nolints.txt (#10130)
I am happy to remove some nolints for you!

2021-11-02 23:57:01 123db5e
feat(linear_algebra/determinant): basis.det_ne_zero (#10126)
Add the trivial lemma that the determinant with respect to a basis is
not the zero map (if the ring is nontrivial).

2021-11-02 23:57:00 86ed02f
chore(algebra/order/floor): add a few trivial lemmas (#10120)

2021-11-02 23:56:58 1dec85c
doc(topology): three module docstrings (#10107)

2021-11-02 21:57:35 d49636e
doc(topology/open_subgroup): add module docstring (#10111)
Also add a lattice instance.

2021-11-02 21:57:34 70ed9dc
chore(analysis/special_functions/trigonometric/basic): move results about derivatives to a new file (#10109)
This is part of a refactor of the `analysis/special_functions` folder, in which I will isolate all lemmas about derivatives. The result will be a definition of Lp spaces that does not import derivatives.

2021-11-02 21:57:33 d43daf0
feat(algebra/big_operators/order): add unbundled is_absolute_value.sum_le and map_prod (#10104)
Add unbundled versions of two existing lemmas.
Additionally generalize a few typeclass assumptions in an earlier file.
From the flt-regular project

2021-11-02 21:57:32 3accc5e
feat(data/bool): bnot_iff_not (#10095)

2021-11-02 19:48:57 00064bd
feat(logic/relation): add equivalence.comap (#10103)

2021-11-02 19:05:42 2d8be73
chore(measure_theory/probability_mass_function): avoid non-terminal simp in coe_le_one (#10112)

2021-11-02 16:26:32 6df3143
chore(combinatorics/choose/bounds): move to nat namespace (#10106)
There are module docstrings elsewhere that expect this to be in the `nat` namespace with the other `choose` lemmas.

2021-11-02 15:51:48 0dcb184
style(testing/slim_check): fix line length (#10114)

2021-11-02 14:14:07 796a051
feat(measure_theory/decomposition/lebesgue): more on Radon-Nikodym derivatives (#10070)
We show that the density in the Lebesgue decomposition theorem (aka the Radon-Nikodym derivative) is unique. Previously, uniqueness of the absolutely continuous part was known, but not of its density. We also show that the Radon-Nikodym derivative is almost everywhere finite. Plus some cleanup of the whole file.

2021-11-02 12:07:49 da6706d
feat(data/mv_polynomial/basic): lemmas about map (#10092)
This adds `map_alg_hom`, which fills the gap between `map` and `map_alg_equiv`.
The only new proof here is `map_surjective`; everything else is just a reworked existing proof.

2021-11-02 10:26:34 80dc445
refactor(order/bounded_lattice): generalize le on with_{top,bot} (#10085)
Before, some lemmas assumed `preorder` even when they were true for
just the underlying `le`. In the case of `with_bot`, the missing
underlying `has_le` instance is defined.
For both `with_{top,bot}`, a few lemmas are generalized accordingly.

2021-11-02 10:26:33 658a3d7
refactor(algebra/algebra): remove subalgebra.under (#10081)
This removes `subalgebra.under`, and replaces `subalgebra.of_under` with `subalgebra.of_restrict_scalars`.
Lemmas associated with `under` have been renamed accordingly.

2021-11-02 10:26:32 541df8a
feat(topology/algebra/ordered/liminf_limsup): convergence of a sequence which does not oscillate infinitely (#10073)
If, for all `a < b`, a sequence is not frequently below `a` and frequently above `b`, then it has to converge. This is a useful convergence criterion (called no upcrossings), used for instance in martingales.
Also generalize several statements on liminfs and limsups from complete linear orders to conditionally complete linear orders.

2021-11-02 10:26:31 880182d
chore(analysis/normed/group): add `cauchy_seq_finset_of_norm_bounded_eventually` (#10060)
Add `cauchy_seq_finset_of_norm_bounded_eventually`, use it to golf some proofs.

2021-11-02 10:26:30 fc12ca8
feat(measure_theory/probability_mass_function): Define uniform pmf on an inhabited fintype (#9920)
This PR defines uniform probability mass functions on nonempty finsets and inhabited fintypes.

2021-11-02 09:31:35 f6894c4
chore(ring_theory/adjoin/fg): generalize ring to semiring in a few places (#10089)

2021-11-02 08:23:22 26bdcac
chore(coinductive_predicates): remove private and use of import_private (#10084)
Remove a `private` modifier (I think this had previously been ported from core by @bryangingechen).
Then remove the only use of `import_private` from the library. (Besides another use in `tests/`, which we're not porting.)
(In mathlib4 we have `OpenPrivate` as an alternative. Removing `import_private` is one less thing for mathport to care about.)

2021-11-02 08:23:21 1852840
feat(analysis/calculus/mean_value): Strict convexity from derivatives (#10034)
This duplicates all the results relating convex/concave function and their derivatives to strictly convex/strictly concave functions.

2021-11-02 06:43:08 6d2af9a
chore(data/list/defs): remove unneeded open (#10100)

2021-11-02 02:55:19 d926ac7
chore(scripts): update nolints.txt (#10098)
I am happy to remove some nolints for you!

2021-11-01 21:07:30 fd783e3
chore(algebra/free_algebra): remove a heavy and unecessary import (#10093)
`transfer_instance` pulls in category theory, which is overkill

2021-11-01 20:14:44 b1d5446
chore(analysis/normed_space/operator_norm): remove an import to data.equiv.transfer_instance (#10094)
This import isn't needed, and the spelling without it is shorter.

2021-11-01 12:55:31 0144b6c
chore({data/finset,data/multiset,order}/locally_finite): Better line wraps (#10087)

2021-11-01 12:22:20 fef1535
chore(category_theory/limits): reuse a previous result (#10088)

2021-11-01 11:06:34 9ef310f
chore(algebra/algebra): implement subalgebra.under in terms of restrict_scalars (#10080)
We should probably remove `subalgebra.under` entirely, but that's likely a lot more work.

2021-11-01 11:06:33 17ebcf0
chore(ring_theory/algebra_tower): relax typeclasses (#10078)
This generalizes some `comm_ring`s to `comm_semiring`s.
Split from #10024

2021-11-01 10:12:40 23892a0
chore(analysis/normed_space/operator_norm): semilinearize part of the file (#10076)
This PR generalizes part of the `operator_norm` file to semilinear maps. Only the first section (`semi_normed`) is done, which allows us to construct continuous semilinear maps using `linear_map.mk_continuous`.
The rest of the file is trickier, since we need specify how the ring hom interacts with the norm. I'd rather leave it to a future PR since I don't need the rest now.

2021-11-01 07:01:57 85fe90e
feat(algebra/direct_sum/module) : coe and internal (#10004)
This extracts the following `def`s from within the various `is_internal` properties:
* `direct_sum.add_submonoid_coe`
* `direct_sum.add_subgroup_coe`
* `direct_sum.submodule_coe`
Packing these into a def makes things more concise, and avoids some annoying elaboration issues.

2021-11-01 05:31:03 acc504e
docs(category_theory/*): add missing module docs (#9990)

2021-11-01 02:38:33 e8fa232
chore(scripts): update nolints.txt (#10083)
I am happy to remove some nolints for you!

2021-11-01 00:38:30 cd457a5
fix(data/{rbtree,rbmap}): fix some lint errors (#10036)

2021-11-01 00:38:28 bf82122
feat(algebra/direct_sum/basic): some lemmas about `direct_sum.of` (#10003)
Some small lemmas about `direct_sum.of` that are handy.

2021-10-31 23:00:49 932e954
feat(data/finset): some simple finset lemmas (#10079)

2021-10-31 23:00:48 60cb2cf
feat(data/list): length_filter_lt_length_iff_exists (#10074)
Also moved a lemma about filter_map that was placed in the wrong file

2021-10-31 23:00:47 af4f4df
feat(list/init): simplifier lemmas for list.init (#10061)

2021-10-31 23:00:45 d6dd451
chore(data/list/basic): use dot notation here and there (#10056)
### Renamed lemmas
- `list.cons_sublist_cons` → `list.sublist.cons_cons`;
- `list.infix_of_prefix` → `list.is_prefix.is_infix`;
- `list.infix_of_suffix` → `list.is_suffix.is_infix`;
- `list.sublist_of_infix` → `list.is_infix.sublist`;
- `list.sublist_of_prefix` → `list.is_prefix.sublist`;
- `list.sublist_of_suffix` → `list.is_suffix.sublist`;
- `list.length_le_of_infix` → `list.is_infix.length_le`.
### New `simp` attrs
`list.singleton_sublist`, `list.repeat_sublist_repeat`, `list.reverse_suffix`, `list.reverse_prefix`.
### New lemmas
`list.infix_insert`, `list.sublist_insert`, `list.subset_insert`.

2021-10-31 23:00:44 76f13b3
feat(algebra/star/basic): `ring.inverse_star` (#10039)
Also adds `is_unit.star` and `is_unit_star`.

2021-10-31 21:28:18 106dc57
chore(ring_theory/ideal/operations): generalize typeclass in map_map and comap_comap (#10077)
Split from #10024 which is hitting timeouts somewhere more irritating.

2021-10-31 21:28:17 233eb66
feat(data/real/ennreal): more on integer powers on ennreal (#10071)

2021-10-31 18:58:21 5ca3c5e
chore(data/set/intervals): add some lemmas (#10062)
Add several lemma lemmas about intersection/difference of intervals.

2021-10-31 18:58:20 05bd61d
chore(analysis): move more code out of `analysis.normed_space.basic` (#10055)

2021-10-31 18:58:19 8390325
fix(data/pequiv): fix lint (#10043)

2021-10-31 18:58:18 66f7114
feat(measure_theory/group): add `measurable_set.const_smul` (#10025)
Partially based on lemmas from #2819.

2021-10-31 17:26:29 f2b77d7
refactor(set_theory/cardinal): swap sides of `simp` lemmas (#10040)
## API changes
### Swap sides of simp lemmas
- `cardinal.add_def` is no loner a `simp` lemma, `cardinal.mk_sum` (renamed from `cardinal.add`) simplifies `#(α ⊕ β)` to `lift.{v u} (#α) + lift.{u v} (#β)`;
- `cardinal.mul_def` is no loner a `simp` lemma, `cardinal.mk_prod` (merged with `cardinal.mul`) simplifies `#(α × β)` to `lift.{v u} (#α) * lift.{u v} (#β)`;
- `cardinal.power_def` is no longer a `simp` lemma. New lemma `cardinal.mk_arrow` computes `#(α → β)`. It is not a `simp` lemma because it follows from other `simp` lemmas.
- replace `cardinal.sum_mk` with `cardinal.mk_sigma` and `cardinal.prod_mk` with `cardinal.mk_pi`;
### Other changes
- new lemmas `@[simp] cardinal.lift_uzero` and `cardinal.lift_umax'`;
- split `cardinal.linear_order` into `cardinal.preorder` (doesn't rely on `classical.choice`), `cardinal.partial_order` (needs `classical.choice`, computable), and `cardinal.linear_order` (noncomputable);
- add `cardinal.lift_order_embedding`;
- add `cardinal.mk_psum`;
- rename `cardinal.prop_eq_two` to `cardinal.mk_Prop`, drop the old `mk_Prop`;
- use local notation for natural power;
- rename old `sum_const` to `sum_const'`, the new `@[simp] lemma sum_const` is what used to be `sum_const_eq_lift_mul`;
- rename old `prod_const` to `prod_const'`, the new `@[simp] lemma prod_const` deals with types in different universes;
- add `@[simp]` to `cardinal.prod_eq_zero` and `cardinal.omega_le_mk`;
- add `@[simp]` lemmas `cardinal.mk_eq_one`, `cardinal.mk_vector`, `cardinal.omega_mul_eq`, and `cardinal.mul_omega_eq`;
- replace `mk_plift_of_true` and `mk_plift_of_false` with `mk_plift_true` and `mk_plift_false`;
- `mk_list_eq_mk` and `mk_finset_eq_mk` now assume `[infinite α]` instead of `ω ≤ #α`.

2021-10-31 14:01:29 4ef3fcd
chore(algebra/group/inj_surj): add 2 missing `def`s (#10068)
`function.injective.right_cancel_monoid` and `function.injective.cancel_monoid` were missing.
`function.injective.sub_neg_monoid` was also misnamed `function.injective.sub_neg_add_monoid`.

2021-10-31 14:01:28 36de1ef
chore(ring_theory/noetherian): generalize to semiring (#10032)
This weakens some typeclasses on some results about `is_noetherian` (which already permits modules over semirings), and relaxes `is_noetherian_ring` to permit semirings.
This does not actually try changing any of the proofs, it just relaxes assumptions that were stronger than what was actually used.

2021-10-31 13:18:04 ca7fee8
feat(category_theory/limits): Results about pullbacks (#9984)
- Provided the explicit isomorphism `X ×[Z] Y ≅ Y ×[Z] X`.
- Provided the pullback of f g when either one is iso or when both are mono.

2021-10-31 11:57:21 be0a4af
chore(analysis): move `real.angle` to a dedicated file (#10065)
We don't use this type anywhere else.

2021-10-31 11:57:20 0433eb6
doc(topology/uniform_space/uniform_embedding): add some docs (#10045)

2021-10-31 11:57:19 e5f9bec
chore(linear_algebra/basic): relax ring to semiring (#10030)
This relaxes a random selection of lemmas from `ring R` to `semiring R`, and cleans up some unused `variables` nearby.
Probably the most useful of these are `submodule.mem_map_equiv`, `map_subtype.rel_iso`, and `submodule.disjoint_iff_comap_eq_bot`

2021-10-31 11:57:18 35cf154
feat(linear_algebra/eigenspace): define `eigenvalues` of an endomorphism (#10027)
Prerequisites in `linear_algebra/eigenspace` for #9995, including a definition `module.End.eigenvalues`, the eigenvalues of an endomorphism considered as a subtype of the scalar ring.

2021-10-31 10:19:07 175ac2c
chore(algebra/group/defs): golf a proof (#10067)
Use `monoid.ext` to golf `div_inv_monoid.ext`.

2021-10-31 10:19:06 31c8aa5
chore(algebra/group_with_zero/basic): zero, one, and pow lemmas for `ring.inverse` (#10049)
This adds:
* `ring.inverse_zero`
* `ring.inverse_one`
* `ring.inverse_pow` (to match `inv_pow`, `inv_pow₀`)
* `commute.ring_inverse_ring_inverse` (to match `commute.inv_inv`)

2021-10-31 09:46:36 43e7d1b
feat(order/antichain): Antichains (#9926)
This defines antichains mimicking the definition of chains.

2021-10-31 07:34:51 b7f120f
chore(*): clean up the library using to_additive (#9790)
Since #9138 and #5487 to_additive got a lot better, so a lot of duplication in the library becomes unnecessary and makes maintenence a burden. So we remove a large number of copy-pasted declarations that can now be generated automatically.

2021-10-31 03:19:22 236f395
chore(topology/compacts): add a missing simp lemma (#10063)

2021-10-31 01:33:41 c952017
chore(logic/embedding): docs, fixes (#10047)
* generalize `function.extend` and some lemmas from `Type*` to `Sort*`.
* add missing docs in `logic.embedding`;
* swap `function.embedding.arrow_congr_left` and `function.embedding.arrow_congr_right`;
* use `function.extend` to define the new `function.embedding.arrow_congr_left`.

2021-10-31 00:02:40 951c063
chore(data/set/pairwise): rename `set.pairwise_on` to `set.pairwise` to match `list.pairwise` and `multiset.pairwise` (#10035)

2021-10-30 23:31:00 7ef3262
ci(.github/workflows/bors.yml): "bors" label for staging builds (#10064)

2021-10-30 20:45:45 bdf38cf
chore(*): rename int_pow to zpow (#10058)
Leftovers of #9989

2021-10-30 09:45:40 5ff850b
feat(algebra/module/submodule_lattice): add `add_subgroup.to_int_submodule` (#10051)
This converts an `add_subgroup M` to a `submodule ℤ M`. We already have the analogous construction for `add_submonoid M`.

2021-10-30 08:28:49 d06bd9a
feat(algebra/big_operators/finprod): add finprod_eq_of_bijective (#10048)

2021-10-30 06:04:06 06b1d87
feat(algebra/group): add `commute.is_unit_mul_iff` (#10042)

2021-10-30 01:45:12 fcc158e
chore(*): update to Lean-3.35.0c (#9988)
Move `stream`, `rbtree`, and `rbmap` from core to `mathlib` and reflows some long lines. Rename some files to avoid name clashes.

2021-10-29 19:43:29 c722dae
chore(data/fintype/basic): add a few `infinite` instances (#10037)

2021-10-29 19:43:27 4f053a5
feat(data/list): chain'_drop lemma (#10028)

2021-10-29 17:12:04 c545660
chore(algebra/group_with_zero/basic): move `ring.inverse`, generalize and rename `inverse_eq_has_inv` (#10033)
This moves `ring.inverse` earlier in the import graph, since it's not about rings at all.

2021-10-29 14:39:48 e1bafaa
feat(category_theory/limits/shapes/images): some explicit instances of has_image_map (#9977)

2021-10-29 13:53:07 4f3443a
feat(measure_theory/group/arithmetic): add a section about `opposite` (#10026)

2021-10-29 08:04:41 3f6174b
fix(tactic/norm_cast): make push_cast discharger match the others (#10021)
closes #9822

2021-10-29 01:24:36 4ce2a5f
chore(algebra/module/submodule_lattice): lemmas about the trivial submodule (#10022)
Lemmas about the trivial submodule.  Also move an existing lemma `exists_mem_ne_zero_of_ne_bot` about the trivial submodule from `linear_algebra/dimension` to `algebra/module/submodule_lattice`, since it doesn't use any facts about dimension.

2021-10-29 01:24:35 7538f9b
feat(data/list/defs): map_with_prefix_suffix and map_with_complement (#10020)
Adds two list definitions: one that will be useful to me, and a generalization which may be useful to @semorrison

2021-10-29 01:24:33 c7f5139
chore(measure_theory): drop a few `measurable_set` assumptions (#9999)
We had an extra `measurable_set` assumption in (one of the copies of) Caratheodory. Also remove `measurable f` assumption in `is_finite_measure (map f μ)` and make it an instance.

2021-10-29 00:33:15 bdcb731
feat(linear_algebra/matrix/adjugate): det_adjugate and adjugate_adjugate (#9991)
This also adds `matrix.mv_polynomial_X`

2021-10-28 20:48:25 415da22
chore(topology,measure_theory): generalize a few instances (#9967)
* Prove that `Π i : ι, π i` has second countable topology if `ι` is encodable and each `π i` has second countable topology.
* Similarly for `borel_space`.
* Preserve old instances about `fintype` because we don't have (and can't have) an instance `fintype ι → encodable ι`.

2021-10-28 20:48:24 0cfae43
feat(archive/imo): IMO 2021 Q1 (#8432)
Formalised solution to IMO 2021 Q1

2021-10-28 18:57:48 99a2d5b
feat(ring_theory/adjoin_root): golf and generalize the algebra structure on `adjoin_root` (#10019)
We already have a more general version of this instance elsewhere, lets just reuse it.

2021-10-28 18:57:46 18dce13
feat(data/finset/interval): Bounded intervals in locally finite orders are finite (#9960)
A set which is bounded above and below is finite. A set which is bounded below in an `order_top` is finite. A set which is bounded above in an `order_bot` is finite.
Also provide the `order_dual` constructions for `bdd_stuff` and `locally_finite_order`.

2021-10-28 18:57:45 1733920
feat(list): add some lemmas (#9873)
Add a few lemmas about lists.
These are helpful when manipulating lists.

2021-10-28 17:00:22 e927aa4
feat(data/set/function): restrict `dite/ite/piecewise/extend` (#10017)

2021-10-28 17:00:20 0d6548f
chore(*): a few lemmas about `range_splitting (#10016)

2021-10-28 17:00:18 b9ff26b
chore(measure_theory/measure/measure_space): reorder, golf (#10015)
Move `restrict_apply'` up and use it to golf some proofs. Drop an unneeded `measurable_set` assumption in 1 proof.

2021-10-28 17:00:16 fd6f681
feat(order/bounded_lattice): add `is_compl.le_sup_right_iff_inf_left_le` (#10014)
This lemma is a generalization of `is_compl.inf_left_eq_bot_iff`.
Also drop `inf_eq_bot_iff_le_compl` in favor of
`is_compl.inf_left_eq_bot_iff` and add
`set.subset_union_compl_iff_inter_subset`.

2021-10-28 17:00:14 22d32dc
fix(field_theory/intermediate_field): use a better `algebra.smul` definition, and generalize (#10012)
Previously coe_smul was not true by `rfl`

2021-10-28 17:00:12 fe76b5c
feat(group_theory/subgroup/basic): `mul_mem_sup` (#10007)
Adds `mul_mem_sup` and golfs a couple proofs that reprove this result.

2021-10-28 17:00:10 c495ed6
move(data/set/pairwise): Move `set.pairwise_on` (#9986)
This moves `set.pairwise_on` to `data.set.pairwise`, where `pairwise` and `set.pairwise_disjoint` already are.

2021-10-28 17:00:08 628f418
feat(computability/tm_to_partrec): prove finiteness (#6955)
The proof in this file was incomplete, and I finally found the time to
finish it. `tm_to_partrec.lean` constructs a turing machine that can
simulate a given partial recursive function. Previously, the functional
correctness of this machine was proven, but it uses an infinite state
space so it is not a priori obvious that it is in fact a true (finite)
turing machine, which is important for the Church-Turing theorem. This
PR adds a proof that the machine is in fact finite.

2021-10-28 15:13:55 c8d1429
feat(data/{finset,multiset}/locally_finite): Simple interval lemmas (#9877)
`(finset/multiset).image_add_(left/right)_Ixx` and `multiset.nodup_Ixx`

2021-10-28 12:41:11 acbb2a5
feat(analysis/normed_space/pi_Lp): use typeclass inference for `1 ≤ p` (#9922)
In `measure_theory.Lp`, the exponent `(p : ℝ≥0∞)` is an explicit hypothesis, and typeclass inference finds `[fact (1 ≤ p)]` silently (with the help of some pre-built `fact_one_le_two_ennreal` etc for specific use cases).
Currently, in `pi_Lp`, the fact that `(hp : 1 ≤ p)` must be provided explicitly.  I propose changing over to the `fact` system as used `measure_theory.Lp` -- I think it looks a bit prettier in typical use cases.

2021-10-28 09:24:44 b0349aa
chore(measure_theory): a `continuous_map` is measurable (#9998)
Also move the proof of `homeomorph.measurable` up and use it in the
definition of `homeomorph.to_measurable_equiv`.

2021-10-28 09:24:43 73423cf
feat(measure/measurable_space): add `measurable_equiv.of_unique_of_unique` (#9968)
Also fix a typo in a lemma name: `measurable_equiv.measurable_coe_iff` → `measurable_comp_iff`.

2021-10-28 09:24:41 7f2b806
feat(analysis/inner_product_space/dual): complex Riesz representation theorem (#9924)
Now that we have conjugate-linear maps, the Riesz representation theorem can be stated in a form that works over both `ℝ` and `ℂ`, as the construction of a conjugate-linear isometric equivalence from a complete inner product space `E` to its dual.

2021-10-28 06:57:32 f78b739
feat(category_theory/arrow): is_iso, mono, epi instances for maps between arrows (#9976)

2021-10-28 06:57:30 8159af6
feat(measure_theory/construction/borel_space): two measures are equal if they agree on closed-open intervals (#9396)

2021-10-28 04:50:38 468a9d5
chore(scripts): update nolints.txt (#10013)
I am happy to remove some nolints for you!

2021-10-28 04:50:37 bcaeb57
fix(data/equiv/encodable): turn `unique.encodable` into a `def` (#10006)

2021-10-28 02:37:00 9db7270
chore(*): rename gsmul to zsmul and gmultiples to zmultiples (#10010)
This is consistent with an earlier rename from `gpow` to `zpow`.

2021-10-27 20:21:14 d360f3c
feat(linear_algebra/free_module/finite/rank): add linear_algebra/free_module/finite/rank (#9832)
A basic API for rank of free modules.
- [x] depends on: #9821

2021-10-27 17:47:32 8ce5da4
feat(algebra/order/archimedean): a few more lemmas (#9997)
Prove that `a + m • b ∈ Ioc c (c + b)` for some `m : ℤ`, and similarly for `Ico`.
Also move some lemmas out of a namespace.

2021-10-27 17:47:31 ec51fb7
chore(algebra/order/floor): prove `subsingleton`s (#9996)

2021-10-27 17:47:29 eaec1da
feat(group_theory/group_action/conj_act): A characteristic subgroup of a normal subgroup is normal (#9992)
Uses `mul_aut.conj_normal` to prove an instance stating that a characteristic subgroup of a normal subgroup is normal.

2021-10-27 17:47:27 c529711
refactor(*): rename fpow and gpow to zpow (#9989)
Historically, we had two notions of integer power, one on groups called `gpow` and the other one on fields called `fpow`. Since the introduction of `div_inv_monoid` and `group_with_zero`, these definitions have been merged into one, and the boundaries are not clear any more. We rename both of them to `zpow`, adding a subscript `0` to disambiguate lemma names when there is a collision, where the subscripted version is for groups with zeroes (as is already done for inv lemmas).
To limit the scope of the change. this PR does not rename `gsmul` to `zsmul` or `gmultiples` to `zmultiples`.

2021-10-27 17:47:26 9e4609b
chore(data/fintype/card): add `fin.prod_univ_{one,two}` (#9987)
Sometimes Lean fails to simplify `(default : fin 1)` to `0` and
`0.succ` to `1` in complex expressions. These lemmas explicitly use
`f 0` and `f 1` in the output.

2021-10-27 17:47:25 29079ba
feat(tactic/lint): linter improvements (#9901)
* Make the linter framework easier to use on projects outside mathlib with the new `lint_project` (replacing `lint_mathlib`). Also replace `lint_mathlib_decls` by `lint_project_decls`.
* Make most declarations in the frontend not-private (I want to use them in other projects)
* The unused argument linter does not report declarations that contain `sorry`. It will still report declarations that use other declarations that contain sorry. I did not add a test for this, since it's hard to do that while keeping the test suite silent (but I did test locally).
* Some minor changes in the test suite (not important, but they cannot hurt).

2021-10-27 15:13:53 25718c2
feat(data/nat/basic): Add two lemmas two nat/basic which are necessary for the count PR (#10001)
Add two lemmas proved by refl to data/nat/basic. They are needed for the count PR, and are changing a file low enogh in the import hierarchy to be a separate PR.

2021-10-27 15:13:51 4e29dc7
chore(topology/algebra/module): add `continuous_linear_equiv.arrow_congr_equiv` (#9982)

2021-10-27 15:13:50 a3f4a02
chore(analysis/normed_space/is_R_or_C + data/complex/is_R_or_C): make some proof steps standalone lemmas (#9933)
Separate some proof steps from `linear_map.bound_of_sphere_bound` as standalone lemmas to golf them a little bit.

2021-10-27 15:13:49 d7c689d
feat(algebraic_geometry/prime_spectrum): Closed points in prime spectrum (#9861)
This PR adds lemmas about the correspondence between closed points in `prime_spectrum R` and maximal ideals of `R`.
In order to import and talk about integral maps I had to move some lemmas from `noetherian.lean` to `prime_spectrum.lean` to prevent cyclic import dependencies.

2021-10-27 07:01:26 d9cea39
refactor(topology+algebraic_geometry): prove and make use of equalities to simplify definitions (#9972)
Prove and make use of equalities whenever possible, even between functors (which is discouraged according to certain philosophy), to replace isomorphisms by equalities, to remove the need of transporting across isomorphisms in various definitions (using `eq_to_hom` directly), most notably: [simplified definition of identity morphism for PresheafedSpace](https://github.com/leanprover-community/mathlib/compare/use_equality?expand=1#diff-252fb30c3a3221e6472db5ba794344dfb423898696e70299653d95f635de06adR89), [simplified extensionality lemma for morphisms](https://github.com/leanprover-community/mathlib/compare/use_equality?expand=1#diff-252fb30c3a3221e6472db5ba794344dfb423898696e70299653d95f635de06adR68), [simplified definition of composition](https://github.com/leanprover-community/mathlib/compare/use_equality?expand=1#diff-252fb30c3a3221e6472db5ba794344dfb423898696e70299653d95f635de06adR96) and [the global section functor](https://github.com/leanprover-community/mathlib/compare/use_equality?expand=1#diff-252fb30c3a3221e6472db5ba794344dfb423898696e70299653d95f635de06adR228) (takes advantage of defeq and doesn't require proving any new equality).
Other small changes to mathlib:
- Define pushforward functor of presheaves in topology/sheaves/presheaf.lean
- Add new file functor.lean in topology/sheaves, proves the pushforward of a sheaf is a sheaf, and defines the pushforward functor of sheaves, with the expectation that pullbacks will be added later.
- Make one of the arguments in various `restrict`s implicit.
- Change statement of [`to_open_comp_comap`](https://github.com/leanprover-community/mathlib/compare/use_equality?expand=1#diff-54364470f443f847742b1c105e853afebc25da68faad63cc5a73db167bc85d06R973) in structure_sheaf.lean to be more general (the same proof works!)
The new definitions result in simplified proofs, but apart from the main files opens.lean, presheaf.lean and presheafed_space.lean where proofs are optimized, I did only the minimum changes required to fix the broken proofs, and I expect there to be large room of improvement with the new definitions especially in the files changed in this PR. I also didn't remove the old lemmas and mostly just add new ones, so subsequent cleanup may be desired.

2021-10-27 04:25:01 996ece5
feat(tactic/suggest): add a flag to disable "Try this" lines (#9820)

2021-10-27 02:40:26 62edbe5
chore(scripts): update nolints.txt (#9994)
I am happy to remove some nolints for you!

2021-10-26 22:41:21 b592589
refactor(order/boolean_algebra): factor out pi.sdiff and pi.compl (#9955)
Provide definitional lemmas about sdiff and compl on pi types.
This allows usage later on even without a whole `boolean_algebra` instance.

2021-10-26 22:41:20 120cf5b
doc(topology) add a library note about continuity lemmas (#9954)
* This is a note with some tips how to formulate a continuity (or measurability, differentiability, ...) lemma.
* I wanted to write this up after formulating `continuous.strans` in many "wrong" ways before discovering the "right" way.
* I think many lemmas are not following this principle, and could be improved in generality and/or convenience by following this advice.
* Based on experience from the sphere eversion project.
* The note mentions a lemma that will be added in #9959, but I don't think we necessarily have to wait for that PR.

2021-10-26 21:02:25 36a2015
feat(topology/[separation, dense_embedding]): a function to a T1 space which has a limit at x is continuous at x (#9934)
We prove that, for a function `f` with values in a T1 space, knowing that `f` admits *any* limit at `x` suffices to prove that `f` is continuous at `x`.
We then use it to give a variant of `dense_inducing.extend_eq` with the same assumption required for continuity of the extension, which makes using both `extend_eq` and `continuous_extend` easier, and also brings us closer to Bourbaki who makes no explicit continuity assumption on the function to extend.

2021-10-26 20:05:59 92e9078
fix(linear_algebra/matrix/determinant): remove coercions (#9975)

2021-10-26 20:05:58 2a32c70
refactor(linear_algebra/matrix/nonsingular_inverse): split out files for adjugate and nondegenerate (#9974)
This breaks the file roughly in two, and rescues lost lemmas that ended up in the wrong sections of the file.
The module docstrings have been tweaked a little, but all the lemmas have just been moved around.

2021-10-26 17:54:26 ce164e2
chore(data/{finset,multiset}/locally_finite): rename from `.interval` (#9980)
The pattern is `data.stuff.interval` for files about `locally_finite_order stuff` and... `finset α` and `multiset α` are locally finite orders. This thus makes space for this theory.

2021-10-26 17:54:24 3aa5749
feat(group_theory/subgroup/basic): Define characteristic subgroups (#9921)
This PR defines characteristic subgroups and builds the basic API.
Getting `@[to_additive]` to work correctly was a bit tricky, so I mostly just copied the setup for `subgroup.normal`.

2021-10-26 16:22:50 50c6094
feat(topology/uniform_space/basic): add lemma `comp_open_symm_mem_uniformity_sets` (#9981)

2021-10-26 12:23:43 d2b1221
feat(algebra/order/group|order/filter): add two lemmas (#9956)
* Also open `function` namespace in `order.filter.basic`
* From the sphere eversion project

2021-10-26 09:49:59 41df5b3
docs(data/sigma/basic): Add module docstring (#9908)

2021-10-26 09:09:15 6b47ccb
feat(group_theory/p_group): Center of a p-group is nontrivial (#9973)
The center of a p-group is nontrivial, stated in two different ways.

2021-10-26 07:25:48 f229c83
chore(*): move 2 lemmas to reorder imports (#9969)
I want to use `measure_theory.measure_preserving` in various files, including `measure_theory.integral.lebesgue`. The file about measure preserving map had two lemmas about product measures. I move them to `measure_theory.constructions.prod`. I also golfed (and made it more readable at the same time!) the proof of `measure_theory.measure.prod_prod_le` using `to_measurable_set`.

2021-10-26 07:25:47 367d71e
chore(order/iterate): review, add docs (#9965)
* reorder sections;
* add section docs;
* use inequalities between functions in a few statements;
* add a few lemmas about `strict_mono` functions.

2021-10-26 07:25:45 717de02
refactor(linear_algebra/free_module/pid): move lemmas (#9962)
`linear_algebra/free_module/pid` contains several results not directly related to PID. We move them in more appropriate files.
Except for small golfing and easy generalization, the statements and the proofs are untouched.

2021-10-26 05:22:54 5227f53
chore(data/equiv/encodable): a `[unique]` type is encodable (#9970)

2021-10-26 02:28:08 a8e6442
chore(scripts): update nolints.txt (#9971)
I am happy to remove some nolints for you!

2021-10-26 01:01:18 e88b4ed
chore(measure_theory/constructions/pi): add `pi_of_empty` (#9937)

2021-10-25 22:55:58 56de12a
refactor(data/mv_polynomial): upgrade `monomial` to a `linear_map` (#9870)

2021-10-25 22:55:56 34b9933
feat(number_theory/liouville): the set of Liouville numbers has measure zero (#9702)
As a corollary, the filters `residual ℝ` and `volume.ae` are disjoint.

2021-10-25 22:55:55 c363ad6
feat(category_theory/sites/*): Cover preserving functors (#9691)
Split from #9650
- Defined `cover_preserving` functors as functors that push covering sieves to covering sieves.
- Defined `compatible_preserving` functors as functors that push compatible families to compatible families.
- Proved that functors that are both `cover_preserving` and `compatible_preserving` pulls sheaves to sheaves.

2021-10-25 20:31:21 5421200
feat(group_theory/index): Small values of `subgroup.index` (#9893)
`H.index = 1 ↔ H = ⊤` and related results.

2021-10-25 20:31:20 880c7bd
chore(linear_algebra/matrix): add fin expansions for trace and adjugate, and some trace lemmas (#9884)
We have these expansions for `det` already, I figured we may as well have them for these.
This adds some other trivial trace lemmas while I'm touching the same file.

2021-10-25 20:31:19 e808b41
feat(data/matrix/basic): lemmas about transpose and conj_transpose on sums and products (#9880)
This also generalizes some previous results from `star_ring` to `star_add_monoid` now that the latter exists.
To help prove the non-commutative statements, this adds `monoid_hom.unop_map_list_prod` and similar.
This could probably used for proving `star_list_prod` in future.

2021-10-25 17:43:11 87fa12a
chore(linear_algebra/matrix/nonsingular_inverse): replace `1 < fintype.card n` with `nontrivial n` (#9953)
This likely makes this a better simp lemma

2021-10-25 17:43:10 0d131fe
chore(group_theory/submonoid): move a lemma to reduce imports (#9951)
Currently, `algebra.pointwise` is a relatively "heavy" import (e.g., it depends on `data.set.finite`) and I want to use submonoid closures a bit earlier than that.

2021-10-25 17:43:09 374885a
feat(linear_algebra/matrix/nonsingular_inverse): lemmas about adjugate (#9947)

2021-10-25 17:43:06 c693682
chore(analysis/normed/group/basic): make various norm instances computable (#9946)
Instead of defining the default `edist` as `ennreal.of_real` which introduces an `ite` on an undecidable equality, this constructs the `ennreal` directly using a proof of non-negativity.
This removes `noncomputable theory` from some files so as to make it obvious from the source alone which definitions are and are not computable.

2021-10-25 17:43:03 5fcbd2b
chore(linear_algebra/matrix/nonsingular_inverse): use pi.single instead of ite (#9944)

2021-10-25 17:43:01 5778df8
chore(analysis/complex/circle): upgrade `exp_map_circle` to `continuous_map` (#9942)

2021-10-25 17:43:00 2026a5f
feat(measure_theory/measure): better `measure.restrict_singleton` (#9936)
With new `restrict_singleton`, `simp` can simplify `∫ x in {a}, f x ∂μ`
to `(μ {a}).to_real • f a`.

2021-10-25 17:42:59 8eb1c02
feat(analysis/special_functions/pow): Equivalent conditions for zero powers (#9897)
Lemmas for 0^x in the reals and complex numbers.

2021-10-25 17:42:58 312db88
feat(*): use `ordered_sub` instead of `nat.sub` lemmas  (#9855)
* For all `nat.sub` lemmas in core, prefer to use the `has_ordered_sub` version.
* Most lemmas have an identical version for `has_ordered_sub`. In some cases we only have the symmetric version.
* Make arguments to `tsub_add_eq_tsub_tsub` and `tsub_add_eq_tsub_tsub_swap` explicit
* Rename `add_tsub_add_right_eq_tsub -> add_tsub_add_eq_tsub_right` (for consistency with the `_left` version)
* Rename `sub_mul' -> tsub_mul` and `mul_sub' -> mul_tsub` (these were forgotten in #9793)
* Many of the fixes are to fix the identification of `n < m` and `n.succ \le m`.
* Add projection notation `h.nat_succ_le` for `nat.succ_le_of_lt h`.

2021-10-25 17:42:56 f298c55
refactor(linear_algebra/finite_dimensional): define finite_dimensional using module.finite (#9854)
`finite_dimensional K V` is by definition `is_noetherian K V`. We refactor this to use everywhere `finite K V` instead.
To keep the PR reasonably small, we don't delete `finite_dimension`, but we define it as `module.finite`. In a future PR we will remove it.
- [x] depends on: #9860

2021-10-25 13:43:52 3d457a2
chore(topology/continuous_function): review API (#9950)
* add `simps` config for `α →ᵇ β`;
* use better variable names in `topology.continuous_function.compact`;
* weaken some TC assumptions in `topology.continuous_function.compact`;
* migrate more API from `α →ᵇ β` to `C(α, β)`.

2021-10-25 13:43:51 f23354d
feat(linear_algebra/basic, ring_theory/ideal/basic): add span_insert (#9941)

2021-10-25 10:59:45 26c838f
refactor(data/real/ennreal): remove ordered sub simp lemmas (#9902)
* They are now simp lemmas in `algebra/order/sub`
* Squeeze some simps

2021-10-25 08:37:22 dc1484e
feat(ring_theory/polynomial/cyclotomic): add lemmas about evaluation of cyclotomic polynomials at one (#9910)

2021-10-25 06:51:07 7e53203
chore(group_theory/submonoid/operations): golf a few proofs (#9948)

2021-10-25 06:51:05 bfcbe68
feat(group_theory/subgroup/basic): `normalizer_eq_top` (#9917)
The normalizer is the whole group if and only if the subgroup is normal.

2021-10-25 06:51:03 41b90d7
feat(group_theory/index): Second isomorphism theorem in terms of `relindex` (#9915)
Restates the second isomorphism theorem in terms of `relindex`.

2021-10-25 05:13:27 b9260f2
feat(group_theory/subgroup/basic): `map_subtype_le` (#9916)
A subgroup of a subgroup is `≤`.

2021-10-25 01:28:17 951a60e
chore(data/list/basic): golf a proof (#9949)
Prove `list.mem_map` directly, get `list.exists_of_mem_map` and
`list.mem_map_of_mem` as corollaries.

2021-10-25 01:28:16 264d33e
docs(control/traversable/lemmas): Add module docstring (#9927)

2021-10-24 22:52:58 c4760b9
feat(algebra/big_operators/basic): prod/sum over an empty type (#9939)

2021-10-24 22:52:57 f9da68c
feat(*): a few more `fun_unique`s (#9938)

2021-10-24 22:52:56 942e60f
chore(algebra/*/pi): add missing lemmas about function.update and set.piecewise (#9935)
This adds `function.update_{zero,one,add,mul,sub,div,neg,inv,smul,vadd}`, and moves `pi.piecewise_{sub,div,neg,inv}` into the `set` namespace to match `set.piecewise_{add,mul}`.
This also adds `finset.piecewise_erase_univ`, as this is tangentially related.

2021-10-24 22:52:55 1e7f6b9
docs(control/bitraversable/instances): Add def docstrings (#9931)

2021-10-24 22:52:54 5d1e8f7
docs(control/applicative): Add module docstring (#9930)

2021-10-24 22:52:53 6f1d45d
docs(control/bitraversable/basic): Add defs docstrings (#9929)

2021-10-24 22:52:52 5642c62
docs(control/traversable/equiv): Add module docstring (#9928)

2021-10-24 22:52:51 8c0b8c7
feat(group_theory/subgroup/basic): Contrapositive of `card_le_one_iff_eq_bot` (#9918)
Adds contrapositive of `card_le_one_iff_eq_bot`.

2021-10-24 22:52:50 4468231
feat(data/nat/log): Equivalent conditions for logarithms to equal zero and one (#9903)
Add equivalent conditions for a `nat.log` to equal 0 or 1.

2021-10-24 22:52:49 12515db
feat(data/list): product of list.update_nth in terms of inverses (#9800)
Expression for the product of `l.update_nth n x` in terms of inverses instead of `take` and `drop`, assuming a group instead of a monoid.

2021-10-24 22:06:49 c20f08e
feat(dynamics/ergodic/measure_preserving): add `measure_preserving.symm` (#9940)
Also make the proof of `measure_preserving.skew_product` a bit more readable.

2021-10-24 22:06:48 4ea8de9
feat(measure_theory/integral): Divergence theorem for Bochner integral (#9811)

2021-10-24 21:16:31 a30e190
split(analysis/normed_space/exponential): split file to minimize dependencies (#9932)
As suggested by @urkud, this moves all the results depending on derivatives, `complex.exp` and `real.exp` to a new file `analysis/special_function/exponential`. That way the definitions of `exp` and `[complex, real].exp` are independent, which means we could eventually redefine the latter in terms of the former without breaking the import tree.

2021-10-24 16:04:22 dc6b8e1
feat(topology): add some lemmas (#9907)
* From the sphere eversion project
* Add compositional version `continuous.fst` of `continuous_fst`, compare `measurable.fst`.
* Add `comp_continuous_at_iff` and `comp_continuous_at_iff'` for `homeomorph` (and for `inducing`).
* Add some variants of these (requested by review).

2021-10-24 13:34:54 696f07f
split(data/list/lattice): split off `data.list.basic` (#9906)

2021-10-24 13:34:52 9dc3b4d
feat(topology/algebra/group): continuous div lemmas (#9905)
* From the sphere eversion project
* There were already some lemmas about `sub`, now they also have multiplicative versions
* Add more lemmas about `div` being continuous
* Add `continuous_at.inv`
* Rename `nhds_translation` -> `nhds_translation_sub`.

2021-10-24 10:50:08 be94800
feat(data/real/nnreal): use the nonneg instance (#9701)
... to show that `nnreal` forms a conditionally complete linear order with bot.
This requires some fixes in the order hierarchy.
* orders on subtypes are now obtained by lifting `coe` instead of `subtype.val`. This has the nice side benefit that some proofs became simpler.
* `subset_conditionally_complete_linear_order` is now reducible

2021-10-24 08:26:39 416edee
feat(analysis/normed_space/is_R_or_C): add three lemmas on bounds of linear maps over is_R_or_C. (#9827)
Adding lemmas `linear_map.bound_of_sphere_bound`, `linear_map.bound_of_ball_bound`, `continuous_linear_map.op_norm_bound_of_ball_bound` as a preparation of a PR on Banach-Alaoglu theorem.

2021-10-24 03:33:39 ecc544e
chore(scripts): update nolints.txt (#9923)
I am happy to remove some nolints for you!

2021-10-24 03:33:38 e836a72
feat(order/galois_connection): add `exists_eq_{l,u}`, tidy up lemmas (#9904)
This makes some arguments implicit to `compose` as these are inferrable from the other arguments, and changes `u_l_u_eq_u` and `l_u_l_eq_l` to be applied rather than unapplied, which shortens both the proof and the places where the lemma is used.

2021-10-24 03:33:37 49c6841
chore(topology): generalize `real.image_Icc` etc (#9784)
* add lemmas about `Ici`/`Iic`/`Icc` in `α × β`;
* introduce a typeclass for `is_compact_Icc` so that the same lemma works for `ℝ` and `ℝⁿ`;
* generalize `real.image_Icc` etc to a conditionally complete linear order (e.g., now it works for `nnreal`, `ennreal`, `ereal`), move these lemmas to the `continuous_on` namespace.

2021-10-24 01:53:46 55a1160
feat(linear_algebra): add notation for star-linear maps (#9875)
This PR adds the notation `M →ₗ⋆[R] N`, `M ≃ₗ⋆[R] N`, etc, to denote star-linear maps/equivalences, i.e. semilinear maps where the ring hom is `star`. A special case of this are conjugate-linear maps when `R = ℂ`.

2021-10-24 00:37:39 5ec1572
feat(nat/choose/central): definition of the central binomial coefficient, and bounds (#9753)
Two exponential lower bounds on the central binomial coefficient.

2021-10-24 00:37:37 d788647
feat(ring_theory): generalize `adjoin_root.power_basis` (#9536)
Now we only need that `g` is monic to state that `adjoin_root g` has a power basis. Note that this does not quite imply the result of #9529: this is phrased in terms of `minpoly R (root g)` and the other PR in terms of `g` itself, so I don't have a direct use for the current PR. However, it seems useful enough to have this statement, so I PR'd it anyway.

2021-10-23 22:10:47 928d0e0
docs(data/dlist/instances): Add module docstring (#9912)

2021-10-23 22:10:46 15161e9
docs(data/list/sigma): Add missing def dosctrings, expand module docs (#9909)

2021-10-23 22:10:45 75b1a94
refactor(analysis/special_functions/exp_log): split into 4 files (#9882)

2021-10-23 22:10:44 59db903
feat(topology/metric_space/lipschitz): continuity on product of continuity in 1 var and Lipschitz continuity in another (#9758)
Also apply the new lemma to `continuous_bounded_map`s and add a few lemmas there.

2021-10-23 20:04:35 939e8b9
docs(control/traversable/instances): Add module docstring (#9913)

2021-10-23 20:04:34 14b998b
docs(control/bifunctor): Add module and defs docstrings (#9911)

2021-10-23 20:04:33 78252a3
chore(data/real/sqrt): A couple of lemmas about sqrt (#9892)
Add a couple of lemmas about `sqrt x / x`.

2021-10-23 20:04:32 3f58dc7
feat(linear_algebra/free_module/pid): golf basis.card_le_card_of_linear_independent_aux (#9813)
We go from a 70 lines proof to a one line proof.

2021-10-23 20:04:31 fc3c056
chore(data/real): make more instances on real, nnreal, and ennreal computable (#9806)
This makes it possible to talk about the add_monoid structure of nnreal and ennreal without worrying about computability.
To make it clear exactly which operations are computable, we remove `noncomputable theory`.

2021-10-23 17:11:13 5c5d818
chore(data/fintype/basic): make units.fintype computable (#9846)
This also:
* renames `equiv.units_equiv_ne_zero` to `units_equiv_ne_zero`, and resolves the TODO comment about generalization
* renames and generalizes `finite_field.card_units` to `fintype.card_units`, and proves it right next to the fintype instance
* generalizes some typeclass assumptions in `finite_field.basic` as the linter already required me to tweak them

2021-10-23 17:11:12 36f8c1d
refactor(order/filter/bases): turn `is_countably_generated` into a class (#9838)
## API changes
### Filters
* turn `filter.is_countably_generated` into a class, turn some lemmas into instances;
* remove definition/lemmas (all were in the `filter.is_countably_generated` namespace): `generating_set`, `countable_generating_set`, `eq_generate`, `countable_filter_basis`, `filter_basis_filter`, `has_countable_basis`, `exists_countable_infi_principal`, `exists_seq`;
* rename `filter.is_countably_generated.exists_antitone_subbasis` to `filter.has_basis.exists_antitone_subbasis`;
* rename `filter.is_countably_generated.exists_antitone_basis` to `filter.exists_antitone_basis`;
* rename `filter.is_countably_generated.exists_antitone_seq'` to `filter.exists_antitone_seq`;
* rename `filter.is_countably_generated.exists_seq` to `filter.exists_antitone_eq_infi_principal`;
* rename `filter.is_countably_generated.tendsto_iff_seq_tendsto` to `filter.tendsto_iff_seq_tendsto`;
* rename `filter.is_countably_generated.tendsto_of_seq_tendsto` to `filter.tendsto_of_seq_tendsto`;
* slightly generalize `is_countably_generated_at_top` and `is_countably_generated_at_bot`;
* add `filter.generate_eq_binfi`;
### Topology
* merge `is_closed.is_Gδ` with `is_closed.is_Gδ'`;
* merge `is_Gδ_set_of_continuous_at_of_countably_generated_uniformity` with `is_Gδ_set_of_continuous_at`;
* merge `is_lub.exists_seq_strict_mono_tendsto_of_not_mem'` with `is_lub.exists_seq_strict_mono_tendsto_of_not_mem`;
* merge `is_lub.exists_seq_monotone_tendsto'` with `is_lub.exists_seq_monotone_tendsto`;
* merge `is_glb.exists_seq_strict_anti_tendsto_of_not_mem'` with `is_glb.exists_seq_strict_anti_tendsto_of_not_mem`;
* merge `is_glb.exists_seq_antitone_tendsto'` with `is_glb.exists_seq_antitone_tendsto`;
* drop `emetric.first_countable_topology`, turn `uniform_space.first_countable_topology` into an instance;
* drop `emetric.second_countable_of_separable`, use `uniform_space.second_countable_of_separable` instead;
* drop `metric.compact_iff_seq_compact`, use `uniform_space.compact_iff_seq_compact` instead;
* drop `metric.compact_space_iff_seq_compact_space`, use `uniform_space.compact_space_iff_seq_compact_space` instead;
## Measure theory and integrals
Various lemmas assume `[is_countably_generated l]` instead of `(h : is_countably_generated l)`.

2021-10-23 17:11:11 d0d1520
chore(ring_theory/derivation): add `leibniz_pow` and `leibniz_inv` (#9837)

2021-10-23 17:11:09 1ebea89
feat(field_theory/finite/galois_field): finite fields with the same cardinality are isomorphic (#9834)
Added the isomorphism of finite fields of the same cardinality.

2021-10-23 17:11:08 0411b1e
feat(ring_theory/ideal): `simp` lemmas for `ideal.quotient.mk` + `algebra_map` (#9829)
Some `simp` lemmas I needed for combining `algebra_map` with `ideal.quotient.mk`. This also allowed me to golf two existing proofs.

2021-10-23 17:11:07 44ab28e
refactor(linear_algebra/free_module/finite): move to a new folder (#9821)
We move `linear_algebra/free_module/finite` to `linear_algebra/free_module/finite/basic`.
We also move two lemmas from `linear_algebra/free_module/finite/basic` to `linear_algebra/free_module/basic`, since they don't need any finiteness assumption on the modules.

2021-10-23 14:30:44 a58ae54
chore(algebra/big_operators/finprod): remove outdated todo (#9900)

2021-10-23 14:30:43 bd81d55
feat(data/finsupp): add lemmas about `single` (#9894)
These are subset versions of the four lemmas related to `support_eq_singleton`.

2021-10-23 14:30:42 95535a3
refactor(ring_theory/unique_factorization_domain): golf some factor_set lemmas (#9889)

2021-10-23 14:30:41 e1c0dbc
feat(set_theory/cardinal): add `add_le_omega` (#9887)
* simplify `c₁ + c₂ ≤ ω` to `c₁ ≤ ω ∧ c₂ ≤ ω`;
* simplify `ω + ω` to `ω`;
* simplify `#s ≤ ω` to `s.countable`;
* simplify `(s ∪ t).countable` and `(insert a s).countable`.
Motivated by lemmas from flypitch.

2021-10-23 14:30:40 82896b5
feat(topology): add a few lemmas (#9885)
Add `is_topological_basis.is_open_map_iff`,
`is_topological_basis.exists_nonempty_subset`, and
`interior_{s,b,}Inter_subset`.
Motivated by lemmas from `flypitch`.

2021-10-23 14:30:39 1e0661c
feat(ring_theory/noetherian): generalize to semiring (#9881)
We generalize some of the results in `ring_theory/noetherian` to `semiring`.
- [x] depends on: #9860

2021-10-23 14:30:38 bb71667
feat(topology/instances/irrational): new file (#9872)
* move `is_Gδ_irrational` etc to a new file `topology.instances.irrational`;
* prove that a small ball around an irrational number is disjoint with the set of rational numbers with bounded denominators;
* prove `order_topology`, `no_top_order`, `no_bot_order`, and `densely_ordered` instances for `{x // irrational x}`.

2021-10-23 14:30:37 b877f6b
chore(analysis/normed/group): generalize `cauchy_seq.add` (#9868)
Also golf a few proofs.

2021-10-23 14:30:36 29c7266
refactor(linear_algebra/matrix/nonsingular_inverse): use ring.inverse in matrix.has_inv (#9863)
This makes some of the proofs a little shorter.
Independently, this removes an assumption from `matrix.transpose_nonsing_inv`.
This adds the missing `units.is_unit_units_mul` to complement the existing `units.is_unit_mul_units`, even though it ultimately was not used in this PR.
This removes the def `matrix.nonsing_inv` in favor of just using `has_inv.inv` directly. Having two ways to spell the same thing isn't helpful here.

2021-10-23 14:30:35 2a1f454
refactor(algebra/algebra): choose `coe` as the normal form for the map `alg_equiv → ring_equiv` (#9848)
We never chose a `simp`-normal form for this map, resulting in some duplicate work and annoying `show _ = _, from rfl` when rewriting. I picked this choice because it matches the convention for the map `alg_hom → ring_hom`.
Very surprisingly, there were absolutely no CI failures due to this choice.

2021-10-23 14:30:34 5f11361
refactor(algebra/continued_fractions): remove use of open ... as (#9847)
Lean 4 doesn't support the use of `open ... as ...`, so let's get rid of the few uses from mathlib rather than automating it in mathport.

2021-10-23 13:13:59 7b979aa
move(algebra/order/*): More algebraic order files in the correct place (#9899)
`algebra.module.ordered` and `algebra.algebra.ordered` were really continuations of `algebra.order.smul` (the first being quite literally the same with additive inverses), so it makes sense to bring them closer. `algebra.floor` and `algebra.archimedean` also perfectly qualify for the subfolder.

2021-10-23 08:22:49 eb1e037
doc(algebra/ring): correct docs for surjective pushforwards (#9896)

2021-10-23 08:22:48 a75f762
feat(ring_theory/localization): generalize `exist_integer_multiples` to finite families (#9859)
This PR shows we can clear denominators of finitely-indexed collections of fractions (i.e. elements of `S` where `is_localization M S`), with the existing result about finite sets of fractions as a special case.

2021-10-23 08:22:48 294ce35
fix(algebra/module/submodule): fix incorrectly generalized arguments to `smul_mem_iff'` and `smul_of_tower_mem` (#9851)
These put unnecessary requirements on `S`.

2021-10-23 08:22:47 2cbd4ba
feat(group_theory/index): `relindex_dvd_of_le_left` (#9835)
If `H ≤ K`, then `K.relindex L ∣ H.relindex L`.
Caution: `relindex_dvd_of_le_right` is not true. `relindex_le_of_le_right` is true, but it is harder to prove, and harder to state (because you have to be careful about `relindex = 0`).

2021-10-23 05:53:41 183b8c8
refactor(data/list/defs): move defs about rb_map (#9844)
There is nothing intrinsically `meta` about `rb_map`, but in practice in mathlib we prove nothing about it and only use it in tactic infrastructure. This PR moves a definition involving `rb_map` out of `data.list.defs` and into `meta.rb_map` (where many others already exist).
(motivated by mathport; rb_map is of course disappearing/changing, so better to quarantine this stuff off with other things that aren't being automatically ported)
`rbmap` is not related to `rb_map`. It can likely be moved from core to mathlib entirely.

2021-10-23 02:55:56 45ba2ad
chore(scripts): update nolints.txt (#9895)
I am happy to remove some nolints for you!

2021-10-22 22:06:02 7690e0a
chore(order/complete_lattice): add `(supr|infi)_option_elim` (#9886)
Motivated by `supr_option'` and `infi_option'` from `flypitch`.

2021-10-22 20:15:57 72c20fa
feat(analysis/special_functions/exp_log): Classify when log is zero (#9815)
Classify when the real `log` function is zero.

2021-10-22 15:58:28 d23b833
chore(data/set/lattice): add `@[simp]` to a few lemmas (#9883)
Add `@[simp]` to `Union_subset_iff`, `subset_Inter_iff`,
`sUnion_subset_iff`, and `subset_sInter_iff` (new lemma).

2021-10-22 15:58:26 3d237db
feat(linear_algebra/matrix/determinant): det_conj_transpose (#9879)
Also:
* Makes the arguments of `ring_hom.map_det` and `alg_hom.map_det` explicit, and removes them from the `matrix` namespace to enable dot notation.
* Adds `ring_equiv.map_det` and `alg_equiv.map_det`

2021-10-22 15:58:25 20bb02f
feat(data/fintype/basic): `fintype.card_pos` (#9876)
Two lemmas `fintype.card_pos` and `fintype.card_ne_zero` that are often easier to use than `fintype.card_pos_iff`.

2021-10-22 15:58:24 22c7474
feat(algebra/module/basic): a few more instances (#9871)
* generalize `is_scalar_tower.rat`;
* add `smul_comm_class.rat` and `smul_comm_class.rat'`;
* golf a few proofs.

2021-10-22 15:58:23 87ea780
chore(set_theory/cardinal): use `protected` instead of `private` (#9869)
Also use `mk_congr`.

2021-10-22 15:58:21 d8b9259
feat(*): add various divisibility-related lemmas (#9866)

2021-10-22 15:58:20 2955306
feat(ring_theory/finiteness): generalize module.finite to noncommutative setting (#9860)
An almost for free generalization of `module.finite` to `semiring`.

2021-10-22 15:58:19 0a7f448
chore(group_theory/congruence): lower priority for `con.quotient.decidable_eq` (#9826)
I was debugging some slow typeclass searches, and it turns out (`add_`)`con.quotient.decidable_eq` wants to be applied to all quotient types, causing a search for a `has_mul` instance before the elaborator can try unifying the `con.to_setoid` relation with the quotient type's relation, so e.g. `decidable_eq (multiset α)` first tries going all the way up to searching for a `linear_ordered_normed_etc_field (list α)` before even trying `multiset.decidable_eq`.
Another approach would be to make `multiset` and/or `con.quotient` irreducible, but that would require a lot more work to ensure we don't break the irreducibility barrier.

2021-10-22 15:58:17 03ba4cc
feat(algebra/floor): Floor semirings (#9592)
A floor semiring is a semiring equipped with a `floor` and a `ceil` function.

2021-10-22 13:16:18 bee8d4a
chore(order/filter/basic): golf a proof (#9874)

2021-10-22 13:16:16 b812fb9
refactor(ring_theory/ideal): split off `quotient.lean` (#9850)
Both `ring_theory/ideal/basic.lean` and `ring_theory/ideal/operations.lean` were starting to get a bit long, so I split off the definition of `ideal.quotient` and the results that had no further dependencies.
I also went through all the imports for files depending on either `ideal/basic.lean` or `ideal/operations.lean` to check whether they shouldn't depend on `ideal/quotient.lean` instead.

2021-10-22 13:16:15 e6c516d
feat(topology/maps): Characterize open/closed maps in terms of images of interior/closure (#9814)
Also provide the docstring for `inducing`.

2021-10-22 10:49:49 43cd79f
feat(data/finset/basic): Simple `finset.erase` lemmas (#9878)
`finset.erase.singleton` and `finset.(map/image)_erase`

2021-10-22 06:47:53 76212e6
feat(measure_theory/integral/set_integral): integral of a `is_R_or_C` function equals integral of real part + integral of imaginary part (#9735)

2021-10-22 01:15:49 c4c71d2
feat(topology): define class `[noncompact_space]` (#9839)

2021-10-21 23:04:20 6f837a6
feat(data/polynomial): generalize and rename `polynomial.normalize_monic` (#9853)
This PR renames `polynomial.normalize_monic` to `polynomial.monic.normalize_eq_self` (more dot notation!) and generalizes it from fields to `normalization_monoid`s.

2021-10-21 23:04:19 16a9031
refactor(data/complex/*): replace `complex.conj` and `is_R_or_C.conj` with star (#9640)
This PR replaces `complex.conj` and `is_R_or_C.conj` by the star operation defined in `algebra/star`. Both of these are replaced with `star_ring_aut`, which is also made available under the notation `conj` defined in the locale `complex_conjugate`. This effectively also upgrades conj from a `ring_hom` to a `ring_aut`.
Fixes #9421

2021-10-21 20:06:24 912039d
feat(algebra/group_power/lemmas): Positivity of an odd/even power (#9796)
This adds `odd.pow_nonneg` and co and `pow_right_comm`.
This also deletes `pow_odd_nonneg` and `pow_odd_pos` as they are special cases of `pow_nonneg` and `pow_pos`.
To make dot notation work, this renames `(pow/fpow)_(odd/even)_(nonneg/nonpos/pos/neg/abs)` to `(odd/even).(pow/fpow)_(nonneg/nonpos/pos/neg/abs)`

2021-10-21 18:28:20 15d4e5f
refactor(data/real/ennreal): remove sub lemmas (#9857)
* Remove all lemmas about subtraction on `ennreal` that are special cases of `has_ordered_sub` lemmas.
* [This](https://github.com/leanprover-community/mathlib/blob/fe5ddaf42c5d61ecc740e815d63ac38f5e94a2e8/src/data/real/ennreal.lean#L734-L795) gives a list of renamings.
* The lemmas that have a `@[simp]` attribute will be done in a separate PR

2021-10-21 18:28:19 5b72c4e
feat(linear_algebra/quotient): `S.restrict_scalars.quotient` is `S.quotient` (#9535)
This PR adds a more general module instance on submodule quotients, in order to show that `(S.restrict_scalars R).quotient` is equivalent to `S.quotient`. If we decide this instance is not a good idea, I can write it instead as `S.quotient.restrict_scalars`, but that is a bit less convenient to work with.

2021-10-21 15:43:25 9be8247
feat(logic/function/embedding): add `function.embedding.option_elim` (#9841)
* add `option.injective_iff`;
* add `function.embedding.option_elim`;
* use it in the proof of `cardinal.add_one_le_succ`;
* add `function.embedding.cardinal_le`, `cardinal.succ_pos`;
* add `@[simp]` to `cardinal.lt_succ`.

2021-10-21 15:43:23 14ec1c8
feat(linear_algebra/matrix/nonsingular_inverse): adjugate of a 2x2 matrix (#9830)
Since we have `det_fin_two`, let's have `adjugate_fin_two` as well.

2021-10-21 15:43:20 9c240b5
feat(analysis/inner_product_space): define `orthogonal_family` of subspaces (#9718)
Define `orthogonal_family` on `V : ι → submodule 𝕜 E` to mean that any two vectors from distinct subspaces are orthogonal.  Prove that an orthogonal family of subspaces is `complete_lattice.independent`.
Also prove that in finite dimension an orthogonal family `V` satisifies `direct_sum.submodule_is_internal` (i.e., it provides an internal direct sum decomposition of `E`) if and only if their joint orthogonal complement is trivial, `(supr V)ᗮ = ⊥`, and that in this case, the identification of `E` with the direct sum of `V` is an isometry.

2021-10-21 13:16:18 d8096aa
fix(ring_theory/subring): `inclusion` is a ring_hom! (#9849)

2021-10-21 13:16:17 d8b0d1a
chore(algebra/big_operators): avoid 'abel' tactic (#9833)
I'd like to add an import ` algebra.euclidean_domain` → `algebra.associated` in #9606, so this removes the dependency in the other direction (`algebra.associated` → `algebra.big_operators.basic` → `tactic.abel` → `tactic.norm_num` → `data.rat.cast` → `data.rat.order` → `data.rat.basic` → ` algebra.euclidean_domain`). Fortunately, the dependency on `abel` was quite shallow here.

2021-10-21 13:16:16 de13786
chore(topology/algebra/ordered): move IVT to a new file (#9792)

2021-10-21 13:16:14 d9daf54
feat(topology/metric_space/isometry): add simps config (#9757)
Also make `isometric.complete_space` take `complete_space β` as an instance argument.

2021-10-21 11:25:37 fe5ddaf
feat(ring_theory/polynomial/cyclotomic): add cyclotomic_prime_pow_eq_geom_sum and supporting lemmas (#9845)
Clean up a little bit in src/number_theory/divisors.lean using to_additive too.

2021-10-21 11:25:35 edd801f
chore(set_theory/cardinal): ensure `c ^ ↑n = c ^ n` is definitional (#9842)

2021-10-21 11:25:33 777f11c
feat(group_theory/index): Special cases of relindex (#9831)
Adds special cases of relindex. Also refactors the file to use `nat.card`, rather than the equivalent `(# _).to_nat`.

2021-10-21 11:25:32 bfa4010
feat(data/nat/modeq): `modeq.le_of_lt_add` (#9816)
If `a ≡ b [MOD m]` and `a < b + m`, then `a ≤ b`.

2021-10-21 08:38:42 da01792
refactor(*): remove integral_domain, rename domain to is_domain (#9748)

2021-10-21 02:55:10 3c11bd7
chore(*): bump to lean 3.34.0 (#9824)
### Backport coercions from Lean 4
Now `has_coe_to_fun` and `has_coe_to_sort` take the output type as an `out_param` argument. This change comes with some changes in the elaboration order, so some proofs/definitions need more type annotations.
### Smarter `by_contra`
Now `by_contra h` does better job if the goal is a negation.
### `open` and current namespace
In
```lean
namespace A
open B _root_.C
end A
```
Lean will try to open `A.B`; if this fails, it will open `B`. It will also open `C`.
`setup_tactic_parser_cmd` command was updated to open appropriate `_root_.*` namespaces.

2021-10-20 19:43:22 8366f93
feat(ring_theory/integral_domain): finite domains are division rings (#9823)
TODO: Prove Wedderburn's little theorem
which shows a finite domain is in fact commutative, hence a field.

2021-10-20 18:03:33 4ebeb05
chore(group_theory/submonoid/center): add decidable_mem_center (#9825)

2021-10-20 18:03:31 3d00081
feat(group_theory/index): Index of top and bottom subgroups (#9819)
This PR computes the index of the top and bottom subgroups.

2021-10-20 15:39:06 68a674e
refactor(algebra/order/sub): rename sub -> tsub (#9793)
* Renames lemmas in the file `algebra/order/sub` to use `tsub` instead of `sub` in the name
* Remove primes from lemma names where possible
* [Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mul_lt_mul'''')
* Remove `sub_mul_ge`, `mul_sub_ge` and `lt_sub_iff_lt_sub`. They were special cases of `le_sub_mul`, `le_mul_sub` and `lt_sub_comm`, respectively.

2021-10-20 13:23:09 5223e26
feat(field_theory/finite/galois_field): uniqueness of finite fields (#9817)
Every finite field is isomorphic to some Galois field. Closes #9599

2021-10-20 11:46:43 49ab444
fix(algebra/module/submodule_lattice): correct bad lemma (#9809)
This lemma was accidentally stating that inf and inter are the same on sets, and wasn't about submodule at all.
The old statement was `↑p ⊓ ↑q = ↑p ∩ ↑q`, the new one is `↑(p ⊓ q) = ↑p ∩ ↑q`

2021-10-20 09:53:23 24901dd
feat(linear_algebra/free_module/rank): rank of free modules  (#9810)
This file contains a basic API for the rank of free modules.
We will add the results for finite free modules in a future PR.

2021-10-20 09:53:22 2f54840
refactor(*): replace comm_ring/integral_domain with ring/domain where possible (#9739)

2021-10-20 08:19:58 a6d5ba8
chore(set_theory/cardinal): add `map`, `induction_on` etc (#9812)

2021-10-20 04:15:08 9dafdf7
feat(group_theory/subgroup/basic): `subgroup_of_self` (#9818)
A subgroup is the top subgroup of itself.

2021-10-20 04:15:07 6898728
feat(analysis/complex/basic): a complex-valued function `has_sum` iff its real part and imaginary part `has_sum` (#9648)

2021-10-20 01:45:58 cd34347
chore(*): remove uses of `universe variable` (#9794)
Most of these uses are relics of when the distinction between `universe` and `universe variable` was more significant. There is still a difference inside sections, but it's an edge case and I don't think any of these uses are consciously trying to handle the edge case.

2021-10-19 23:43:31 2d17c5a
feat(group_theory/index): Relative index (#9780)
Defines relative index between subgroups, and proves that relative index is multiplicative in towers.

2021-10-19 20:59:45 72cb2e8
refactor(*): rename some declarations ending with '' (#9504)

2021-10-19 16:49:58 65eef74
fix(data/int/basic): ensure the additive group structure on integers is computable (#9803)
This prevents the following failure:
```lean
import analysis.normed_space.basic
instance whoops : add_comm_group ℤ := by apply_instance
-- definition 'whoops' is noncomputable, it depends on 'int.normed_comm_ring'
```

2021-10-19 15:18:56 e61584d
fix(topology/sheaves/*): Fix docstrings (#9807)
As noted by @alreadydone in #9607, I forgot propagate naming changes to docstrings. This PR fixes that.

2021-10-19 12:47:04 34aa23a
feat(ring_theory/dedekind_domain): connect (/) and (⁻¹) on fractional ideals (#9808)
Turns out we never actually proved the `div_eq_mul_inv` lemma on fractional ideals, which motivated the entire definition of `div_inv_monoid`. So here it is, along with some useful supporting lemmas.

2021-10-19 11:59:41 065a708
refactor(analysis/inner_product_space/projection): speedup proof (#9804)
Speed up slow proof that caused a timeout on another branch.

2021-10-19 09:31:15 b961b68
feat(topology/connected): product of connected spaces is a connected space (#9789)
* prove more in the RHS of `filter.mem_infi'`;
* prove that the product of (pre)connected sets is a (pre)connected set;
* prove a similar statement about indexed product `set.pi set.univ _`;
* add instances for `prod.preconnected_space`, `prod.connected_space`, `pi.preconnected_space`, and `pi.connected_space`.

2021-10-19 09:31:13 ff3e868
refactor(algebra/domain): make domain and integral_domain mixins (#9719)
This PR turns `domain` and `integral_domain` into mixins. There's quite a lot of work here, as the unused argument linter then forces us to do some generalizations! (i.e. getting rid of unnecessary `integral_domain` arguments).
This PR does the minimum possible generalization: #9739 does some more.
In a subsequent PR we can unify `domain` and `integral_domain`, which now only differ in their typeclass requirements.
This also remove use of `old_structure_cmd` in `euclidean_domain`.
- [x] depends on: #9725 [An RFC]
- [x] depends on: #9736
[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)

2021-10-19 07:46:18 a7bc717
feat(algebra/big_operators/order): Upper bound on the cardinality of `finset.bUnion` (#9797)
Also fix notation in all the additivized statements docstrings.

2021-10-19 07:46:17 4df649c
feat(data/nat/modeq): Upper bound for `chinese_remainder` (#9783)
Proves that `chinese_remainder' < lcm n m` and `chinese_remainder < n * m`, as claimed by the doc-strings.

2021-10-19 07:05:07 1f8c96b
feat(data/nat/succ_pred): `ℕ` is succ- and pred- archimedean (#9730)
This provides the instances `succ_order ℕ`, `pred_order ℕ`, `is_succ_archimedean ℕ`, `is_pred_archimedean ℕ`.

2021-10-19 04:41:01 1ec385d
chore(scripts): update nolints.txt (#9799)
I am happy to remove some nolints for you!

2021-10-19 02:24:00 04094c4
feat(analysis/box_integral): Divergence thm for a Henstock-style integral (#9496)
* Define integrals of Riemann, McShane, and Henstock (plus a few
  variations).
* Prove basic properties.
* Prove a version of the divergence theorem for one of these integrals.
* Prove that a Bochner integrable function is McShane integrable.

2021-10-18 23:50:42 5eee6a2
refactor(ring_theory/adjoin/fg): replace a fragile convert with rewrites (#9786)

2021-10-18 23:50:41 98d07d3
refactor(algebra/order): replace typeclasses with constructors (#9725)
This RFC suggests removing some unused classes for the ordered algebra hierarchy, replacing them with constructors
We have `nonneg_add_comm_group extends add_comm_group`, and an instance from this to `ordered_add_comm_group`. The intention is to be able to construct an `ordered_add_comm_group` by specifying its positive cone, rather than directly its order.
There are then `nonneg_ring` and `linear_nonneg_ring`, similarly.
(None of these are actually used later in mathlib at this point.)

2021-10-18 23:50:40 442382d
feat(tactic/to_additive): Improvements to to_additive (#5487)
Change a couple of things in to_additive:
- First add a `tactic.copy_attribute'` intended for user attributes with parameters very similar to `tactic.copy_attribute` that just copies the parameter over when setting the attribute. This allows to_additive after many other attributes to transfer those attributes properly (e.g. norm_cast)
- Have to additive register generated equation lemmas as such, this necessitates a bit of restructuring, first all declarations must be generated (including equational lemmas), then the equational lemmas need their attributes, then they are registered as equation lemmas, finally the attributes are added to the main declaration.
- I also fixup the library in many places to account for these changes simplifying the source files, only one new lemma was added, in src/analysis/normed/group/quotient.lean `quotient_norm_mk_le'` to replace the unprimed version in the proof of `norm_normed_mk_le` as simp got better thanks to the new simp lemmas introduced by this PR. Probably many more handwritten additive versions can now be deleted in a future PR, especially defs and instances.
- All other library changes are just simplifications by using to additive for some hand generated declarations, and many more attributes on the generated lemmas.
- The attribute mono is trickier as it contains for its parameter not actual exprs containing names but exprs making names from strings, so I don't see how to handle it right now. We now warn the user about this, and fix the library in a couple of places.

2021-10-18 21:08:15 8b7e16f
feat(tactic/lint): improve check_univs linter (#9698)
* `check_univs` now only checks the type of `d` and ignores `d._proof_i` subterms
* move `expr.univ_params_grouped` to the linter file (it seems increasingly unlikely that this has a use in other applications)
* We now don't test automatically generated declarations anymore.

2021-10-18 17:55:59 b112d4d
refactor(ring_theory/ideal/operations): generalize various definitions to remove negation and commutativity (#9737)
Mostly this just weakens assumptions in `variable`s lines, but occasionally this moves lemmas to a more appropriate section too.

2021-10-18 16:41:10 71c203a
feat(analysis/normed/group/SemiNormedGroup/completion): add SemiNormedGroup.Completion (#9788)
From LTE.

2021-10-18 16:41:09 80071d4
refactor(algebra/floor): Add `ceil` as a field of `floor_ring` (#9591)
This allows more control on definitional equality.

2021-10-18 14:15:51 5ea384e
refactor(ring_theory/finiteness): replace fragile convert with rewrites (#9787)

2021-10-18 14:15:49 6f4aea4
feat(data/set/pairwise): Simple `pairwise_disjoint` lemmas (#9764)

2021-10-18 12:53:50 116e426
chore(group_theory/order_of_element): order_of_units (#9777)

2021-10-18 12:53:48 a7ac699
feat(topology/metric_space): dimH is the supr of local dimH (#9741)

2021-10-18 12:53:47 06179ca
feat(data/real/pointwise): Inf and Sup of `a • s` for `s : set ℝ` (#9707)
This relates `Inf (a • s)`/`Sup (a • s)` with `a • Inf s`/`a • Sup s` for `s : set ℝ`.

2021-10-18 11:21:22 e841325
feat(linear_algebra/dfinsupp): cardinality lemmas for `complete_lattice.independent` (#9705)
If `p` is a system of independent subspaces of a vector space `V`, and `v` is a system of nonzero vectors each contained in the corresponding subspace, then `v` is linearly independent.
Consequently, if `p` is a system of independent subspaces of `V`, then no more than `dim V` many can be nontrivial.

2021-10-18 09:32:36 39db98c
feat(analysis/normed_space/add_torsor_bases): the convex hull has non-empty interior iff the affine span is top (#9727)
Formalized as part of the Sphere Eversion project.

2021-10-18 08:20:00 2e62b33
chore(field_theory/galois): speedup a slow convert (#9782)
This was broken by a deterministic timeout in another branch. This replaces a `convert` with an explicit `simp`.

2021-10-18 08:19:59 27d28a8
feat(linear_algebra/affine_space/independent): affine equivalences preserve affine independence of sets of points (#9776)
The key addition is `affine_equiv.affine_independent_set_of_eq_iff`.
Formalized as part of the Sphere Eversion project.

2021-10-18 08:19:58 fb5c0be
feat(topology/metric_space): closed if spaced out (#9754)
If pairwise distances between the points of a set are bounded from below by a positive number, then the set is closed.
Also prove some theorems about `uniform_inducing` and `uniform_embedding` and show that `coe : int → real` is a closed embedding.

2021-10-18 05:53:11 6cd6ff4
split(data/list/permutation): split off `data.list.basic` (#9749)
This moves all the `list.permutations` definitions and lemmas not involving `list.perm` to a new file.

2021-10-18 02:28:14 5b527bd
refactor(linear_algebra/quadratic_form): split file (#9781)
The section on quadratic forms over complex numbers required pulling in the developing of the complex power function, which significantly increases the import depth. Splitting this file allows `clifford_algebra` to be compiled much earlier.

2021-10-17 21:55:29 27a777b
feat(data/nat/gcd): `coprime.lcm_eq_mul` (#9761)
Surprisingly, this result doesn't seem to be present yet.

2021-10-17 20:43:58 5dbe8c4
feat(topology/metric_space): a map with a contracting iterate has a fixed pt (#9760)

2021-10-17 18:13:16 084702d
chore(analysis/normed_algebra/exponential): golf, generalize (#9740)
* move `real.summable_pow_div_factorial` to
  `analysis.specific_limits`, golf the proof;
* use recently added lemma `inv_nat_cast_smul_eq` to golf the proof of
  equality of exponentials defined using different fields and
  generalize the statement: we no longer require one field to be a
  normed algebra over another.
* rename `exp_eq_exp_of_field_extension` → `exp_eq_exp` and
  `exp_series_eq_exp_series_of_field_extension` →
  `exp_series_eq_exp_series` because we no longer require
  `[normed_algebra 𝕂 𝕂']`.

2021-10-17 13:18:35 376bba8
chore(data/finset/lattice): fix infi docstrings (#9775)

2021-10-17 13:18:34 41b5645
chore(topology/algebra/ordered/basic): move code out of `basic` (#9772)

2021-10-17 13:18:32 1432c30
feat(topology/algebra/mul_action): `λ x, c • x` is a closed map for all `c` (#9756)
* rename old `is_closed_map_smul₀` to `is_closed_map_smul_of_ne_zero`;
* add a new `is_closed_map_smul₀` that assumes more about typeclasses
  but works for `c = 0`.

2021-10-17 13:18:31 48dc249
feat(measure_theory/measure): +1 version of Borel-Cantelli, drop an assumption (#9678)
* In all versions of Borel-Cantelli lemma, do not require that the
  sets are measurable.
* Add +1 version.
* Golf proofs.

2021-10-17 11:01:38 3f15148
chore(analysis/p_series): use `lift` tactic (#9773)

2021-10-17 11:01:37 9fec8f3
feat(group_theory/index): `index_comap_of_surjective` (#9768)
`subgroup.index` is preserved by `subgroup.comap`, provided that the homomorphism is surjective.

2021-10-17 11:01:36 85f3640
feat(topology/instances/ennreal): `{f | lipschitz_with K f}` is a closed set (#9766)

2021-10-17 11:01:35 678d7ed
chore(data/equiv/mul_add): add missing `to_equiv_mk` (#9765)

2021-10-17 11:01:34 24ebeec
feat(data/nat/gcd): Add `iff` version of `coprime.dvd_of_dvd_mul` (#9759)
Adds `iff` versions of `coprime.dvd_of_dvd_mul_right` and `coprime.dvd_of_dvd_mul_left`.

2021-10-17 11:01:33 1558a76
feat(group_theory/subgroup/basic): Special cases of `subgroup_of` (#9755)
Add four lemmas regarding special cases of `subgroup_of`.

2021-10-17 11:01:31 4b00aa2
refactor(ring_theory/jacobson): avoid shadowing hypothesis (#9736)
This PR postpones a `rw` in a proof, which was creating a shadowed hypothesis. At present, this shadowing was not a big deal, but in another branch it caused a hard-to-diagnose error.

2021-10-17 11:01:30 5eb47c0
feat(topology/homotopy): Define the fundamental groupoid of a topological space (#9683)

2021-10-17 08:53:58 f171c61
feat(linear_algebra/affine_space/independent): add `exists_affine_independent` (#9747)
Formalized as part of the Sphere Eversion project.

2021-10-17 06:23:24 ff8a35d
feat(group_theory/subgroup/basic): Kernel of `subtype` and `inclusion` (#9763)
`subtype` and `inculusion` are injective, so they have trivial kernel.

2021-10-17 03:34:30 7aa431c
chore(group_theory/quotient_group): Tag lemmas with `@[to_additive]` (#9771)
Adds `@[to_additive]` to a couple lemmas.

2021-10-17 03:34:29 a1a05ad
chore(measure_theory/*): don't require the codomain to be a normed group (#9769)
Lemmas like `continuous_on.ae_measurable` are true for any codomain. Also add `continuous.integrable_on_Ioc` and `continuous.integrable_on_interval_oc`.

2021-10-17 03:34:28 08a070b
chore(topology/instances/ennreal): golf a proof (#9767)

2021-10-17 02:23:49 4a837fb
chore(analysis/normed/group): add a few convenience lemmas (#9770)
Add `lipschitz_on_with.norm_sub_le_of_le`,
`lipschitz_with.norm_sub_le`, and `lipschitz_with.norm_sub_le_of_le`.

2021-10-16 23:11:25 cf72eff
refactor(group_theory/quotient_group): Fix typo (#9746)
Fix typo in `quotient_bot`.

2021-10-16 21:46:54 ad7000b
feat(set_theory/cardinal): cardinal.to_nat_congr (#9726)
If `e : α ≃ β`, then `(cardinal.mk α).to_nat = (cardinal.mk β).to_nat`.

2021-10-16 20:32:52 b97bb92
feat(set_theory/cardinal): lemmas (#9690)
* swap sides of `cardinal.lift_mk`, rename it to `cardinal.mk_ulift`;
* add `cardinal.out_mk_equiv`.

2021-10-16 18:01:16 3fe67d6
feat(analysis/special_functions/integrals): integral of `|x - a| ^ n` over `Ι a b` (#9752)
Also use notation for `interval a b` and `interval_oc a b`.

2021-10-16 18:01:15 54e9e12
chore(topology/maps): add `is_closed_map.closed_range` (#9751)

2021-10-16 18:01:14 998ab78
chore(data/list/lex): make data.list.lex not depend on data.list.basic (#9750)
Another simplification in list related dependencies, if this commit breaks external code the fix is to add `import data.list.basic` to the broken file.

2021-10-16 18:01:13 066a168
feat(topology/G_delta): add lemmas, minor golf (#9742)
* the complement to a countable set is a Gδ set;
* a closed set is a Gδ set;
* finite union of Gδ sets is a Gδ set;
* generalize some universe levels in `topology.basic`;
* golf a few proofs in `topology.uniform_space.basic`;
* add `filter.has_basis.bInter_bUnion_ball`.

2021-10-16 18:01:11 aa0d0d4
feat(group_theory/subgroup/basic): Range of inclusion (#9732)
If `H ≤ K`, then the range of `inclusion : H → K` is `H` (viewed as a subgroup of `K`).

2021-10-16 18:01:10 155f8e6
feat(data/int/succ_pred): `ℤ` is succ- and pred- archimedean (#9731)
This provides the instances `succ_order ℤ`, `pred_order ℤ`, `is_succ_archimedean ℤ`, `is_pred_archimedean ℤ`.

2021-10-16 18:01:09 e744033
feat(data/finset/basic, lattice): Simple lemmas (#9723)
This proves lemmas about `finset.sup`/`finset.inf` and `finset.singleton`.

2021-10-16 18:01:08 bf34d9b
feat(analysis/normed/group/SemiNormedGroup/kernels): add explicit_cokernel.map (#9712)
From LTE.

2021-10-16 18:01:07 686b363
feat(analysis/normed/group/SemiNormedGroup/kernels): add kernels (#9711)
From LTE.

2021-10-16 18:01:06 3d99926
feat(analysis/normed/group/SemiNormedGroup): add iso_isometry_of_norm_noninc (#9710)
From LTE.

2021-10-16 18:01:05 5ac586a
feat(algebra/group_power/order): When a power is less than one (#9700)
This proves a bunch of simple order lemmas relating `1`, `a` and `a ^ n`. I also move `pow_le_one` upstream as it could already be proved in `algebra.group_power.order` and remove `[nontrivial R]` from `one_lt_pow`.

2021-10-16 16:46:55 99b2d40
feat(algebra/floor): Floor and ceil of `-a` (#9715)
This proves `floor_neg : ⌊-a⌋ = -⌈a⌉` and `ceil_neg : ⌈-a⌉ = -⌊a⌋` and uses them to remove explicit dependency on the definition of `int.ceil` in prevision of #9591. This also proves `⌊a + 1⌋ = ⌊a⌋ + 1` and variants.

2021-10-16 09:26:55 9ac2aa2
feat(topology/metric_space/lipschitz): add `lipschitz_with.min` and `lipschitz_with.max` (#9744)
Also change assumptions in some lemmas in `algebra.order.group` from
 `[add_comm_group α] [linear_order α] [covariant_class α α (+) (≤)]`
to `[linear_ordered_add_comm_group α]`. These two sets of assumptions
are equivalent but the latter is more readable.

2021-10-16 09:26:54 96ba8b6
chore(topology/uniform_space/pi): add `uniform_continuous_pi` (#9743)

2021-10-16 08:44:20 e362293
refactor(ring_theory/fractional_ideal): speedup a proof (#9738)
This was timing out on another branch. Just replaces a `simp only []` with a `rw []`.

2021-10-16 07:32:33 f40cd88
chore(topology/algebra/ordered): move some lemmas to a new file (#9745)

2021-10-16 04:16:34 150bbea
feat(group_theory/subgroup/basic): Bottom subgroup has unique element (#9734)
Adds instance for `unique (⊥ : subgroup G)`.

2021-10-16 01:17:29 1766588
feat(measure_theory/covering/vitali): Vitali covering theorems (#9680)
The topological and measurable Vitali covering theorems.
* topological version: if a space is covered by balls `(B (x_i, r_i))_{i \in I}`, one can extract a disjointed subfamily indexed by `J` such that the space is covered by the balls `B (x_j, 5 r_j)`.
* measurable version: if additionally the measure has a doubling-like property, and the covering contains balls of arbitrarily small radius at every point, then the disjointed subfamily one obtains above covers almost all the space.
These two statements are particular cases of more general statements that are proved in this PR.

2021-10-15 22:57:51 ea22ce3
chore(data/list): move lemmas from data.list.basic that require algebra.group_power to a new file (#9728)
Hopefully ease the dependencies on anyone importing data.list.basic, if your code broke after this change adding `import data.list.prod_monoid` should fix it.
Lemmas moved:
- `list.prod_repeat`
- `list.sum_repeat`
- `list.prod_le_of_forall_le`
- `list.sum_le_of_forall_le`

2021-10-15 21:35:25 711aa75
refactor(algebra/gcd_monoid): remove superfluous old_structure_cmd (#9720)

2021-10-15 16:38:20 b3f602b
feat(linear_algebra/linear_independent): add variant of `exists_linear_independent` (#9708)
Formalized as part of the Sphere Eversion project.

2021-10-15 15:08:13 d6fd5f5
feat(linear_algebra/dimension): generalize dim_zero_iff_forall_zero (#9713)
We generalize `dim_zero_iff_forall_zero` to `[nontrivial R] [no_zero_smul_divisors R M]`.
If you see a more general class to consider let me know.

2021-10-15 12:10:59 ad6d476
refactor(ring_theory/derivation): remove old_structure_cmd (#9724)

2021-10-15 12:10:58 a2737b4
chore(data/set_like/basic): remove superfluous old_structure_cmd (#9722)

2021-10-15 11:28:36 6bc2a1a
refactor(algebra/lie/basic): remove old_structure_cmd (#9721)

2021-10-15 06:28:08 7707036
feat(tactic/by_contra): add by_contra' tactic (#9619)

2021-10-15 01:06:58 be91f69
chore(algebra/floor): general golf (#9716)
This cleans the file in depth:
* kill some `simp`
* use available dot notation on `≤`
* remove the `by ... ; ...` (there's one left that #9715) takes care of
* group definition and notation of `int.floor`,`int.ceil` and `int.fract`
* move `int.preimage_...` lemmas with the rest of the `ℤ` stuff
* homogeneize variable names

2021-10-14 23:10:05 c37ea53
feat(order/succ_pred): `succ`-Archimedean orders (#9714)
This defines `succ`-Archimedean orders: orders in which `a ≤ b` means that `succ^[n] a = b` for some `n`.

2021-10-14 21:12:58 c12aced
feat(algebra/star): star_linear_equiv (#9426)

2021-10-14 19:54:19 158fbc5
refactor(algebra/module/order): Make space argument explicit in the `order_iso` (#9706)
Explicitly providing `M` in `order_iso.smul_left` and `order_iso.smul_left_dual` turns out to work much better with dot notation on `order_iso`. This allows golfing half the proofs introduced in #9078.

2021-10-14 18:49:52 72789f5
feat(linear_algebra/affine_space/affine_subspace): add lemma `affine_equiv.span_eq_top_iff` (#9695)
Together with supporting lemmas.
Formalized as part of the Sphere Eversion project.

2021-10-14 18:06:10 cef78dd
feat(archive/abel_ruffini): speedup by squeezing  (#9709)
30s->9s elaboration for me, hopefully stop #9705 timing out

2021-10-14 16:25:51 393fe70
chore(analysis/p_series): add 2 more versions (#9703)

2021-10-14 13:24:56 aff49a6
feat(data/equiv/basic): prop_equiv_pempty (#9689)

2021-10-14 13:24:54 dc23dfa
feat(data/equiv/basic): subtype_equiv_psigma (#9688)
- [x] depends on: #9687
[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)

2021-10-14 13:24:52 9da33a8
refactor(algebra/floor): Rename floor and ceil functions (#9590)
This renames
* `floor` -> `int.floor`
* `ceil` -> `int.ceil`
* `fract` -> `int.fract`
* `nat_floor` -> `nat.floor`
* `nat_ceil` -> `nat.ceil`

2021-10-14 07:51:21 264ff90
refactor(analysis/special_functions): generalise nth-root lemmas (#9704)
`exists_pow_nat_eq` and `exists_eq_mul_self` both hold for any algebraically closed field, so pull them out into `is_alg_closed/basic` and generalise appropriately
Closes #4674

2021-10-14 07:51:19 8d67d9a
chore(category_theory/sites/*): Generalize universes (#9675)
This generalizes the universe levels for sheaves to some extent.
This will allow us to now consider sheaves on `C : Type u` (satisfying `[category.{v} C]` and endowed with a Grothendieck topology) taking values in an arbitrary category with no additional universe restrictions.
The only part of the theory which has not been generalized is the equivalence of the sheaf condition with the condition involving Yoneda. To generalize this would require composing with `ulift_functors`'s, which we may or may not want to do.

2021-10-14 05:36:14 34f3494
chore(set_theory/cardinal): rename `is_empty`/`nonempty` lemmas (#9668)
* add `is_empty_pi`, `is_empty_prod`, `is_empty_pprod`, `is_empty_sum`;
* rename `cardinal.eq_zero_of_is_empty` to `cardinal.mk_eq_zero`, make
  the argument `α : Type u` explicit;
* rename `cardinal.eq_zero_iff_is_empty` to `cardinal.mk_eq_zero_iff`;
* rename `cardinal.ne_zero_iff_nonempty` to `cardinal.mk_ne_zero_iff`;
* add `@[simp]` lemma `cardinal.mk_ne_zero`;
* fix compile errors caused by these changes, golf a few proofs.

2021-10-14 04:04:03 3340617
feat(algebra/bounds): `smul` of upper/lower bounds (#9078)
This relates `lower_bounds (a • s)`/`upper_bounds (a • s)` and `a • lower_bounds s`/`a • upper_bounds s`.

2021-10-13 21:29:32 19da20b
feat(combinatorics/hall): generalized Hall's Marriage Theorem (#7825)
Used the generalized Kőnig's lemma to prove a version of Hall's Marriage Theorem with the `fintype` constraint on the index type removed.  The original `fintype` version is moved into `hall/finite.lean`, and the infinite version is put in `hall/basic.lean`.  They are in separate files because the infinite version pulls in `topology.category.Top.limits`, which is a rather large dependency.

2021-10-13 17:58:00 5db83f9
feat(set_theory/cardinal): add lemmas (#9697)
We add three easy lemmas about cardinals living in different universes.

2021-10-13 17:57:59 3faf0f5
chore(data/real/irrational): add more lemmas (#9684)

2021-10-13 17:57:58 096923c
feat(topology/connected.lean): add theorems about connectedness o… (#9633)
feat(src/topology/connected.lean): add theorems about connectedness of closure
add two theorems is_preconnected.inclosure and is_connected.closure
	which formalize that if a set s is (pre)connected
	and a set t satisfies s ⊆ t ⊆ closure s,
	then t is (pre)connected as well
modify is_preconnected.closure and is_connected.closure
	to take these theorems into account
add a few comments for theorems in the code

2021-10-13 15:48:29 32e1b6c
chore(ring_theory/ideal): improve 1st isomorphism theorem docstrings (#9699)
Fix a typo and add **bold** to the theorem names.

2021-10-13 15:48:28 0ce4442
refactor(algebra/group_power/order): relax linearity condition on `one_lt_pow` (#9696)
`[linear_ordered_semiring R]` becomes `[ordered_semiring R] [nontrivial R]`. I also golf the proof and move ìt from `algebra.field_power` to `algebra.group_power.order`, where it belongs.

2021-10-13 15:48:27 bc9e38f
refactor(linear_algebra/dimension): remove some nontrivial assumptions (#9693)
We remove some `nontrivial R` assumptions.

2021-10-13 15:48:25 313db47
feat(measure_theory/covering/besicovitch): remove measurability assumptions (#9679)
For applications, it is important to allow non-measurable sets in the Besicovitch covering theorem. We tweak the proof to allow this.
Also give an improved statement that is easier to use in applications.

2021-10-13 15:48:24 f29755b
refactor(data/set/pairwise): generalize `pairwise_disjoint` to `semilattice_inf_bot` (#9670)
`set.pairwise_disjoint` was only defined for `set (set α)`. Now, it's defined for `set α` where `semilattice_inf_bot α`. I also
* move it to `data.set.pairwise` because it's really not about `set` anymore.
* drop the `set` namespace.
* add more general elimination rules and rename the current one to `elim_set`.

2021-10-13 15:48:22 9ee2a50
fix(group_theory/group_action): `has_scalar.comp.is_scalar_tower` is a dangerous instance (#9656)
This issue came up in the discussion of #9535: in certain cases, the instance `has_scalar.comp.is_scalar_tower` is fed too many metavariables and starts recursing infinitely. So I believe we should demote it from being an instance. Example trace:
```plain
[class_instances] (0) ?x_0 : has_scalar S P.quotient := @quotient.has_scalar ?x_1 ?x_2 ?x_3 ?x_4 ?x_5 ?x_6 ?x_7 ?x_8 ?x_9 ?x_10
[class_instances] (1) ?x_9 : @is_scalar_tower S R M ?x_7
  (@smul_with_zero.to_has_scalar R M
     (@mul_zero_class.to_has_zero R
        (@mul_zero_one_class.to_mul_zero_class R
           (@monoid_with_zero.to_mul_zero_one_class R (@semiring.to_monoid_with_zero R (@ring.to_semiring R _inst_1)))))
     (@add_zero_class.to_has_zero M
        (@add_monoid.to_add_zero_class M
           (@add_comm_monoid.to_add_monoid M (@add_comm_group.to_add_comm_monoid M _inst_2))))
     (@mul_action_with_zero.to_smul_with_zero R M (@semiring.to_monoid_with_zero R (@ring.to_semiring R _inst_1))
        (@add_zero_class.to_has_zero M
           (@add_monoid.to_add_zero_class M
              (@add_comm_monoid.to_add_monoid M (@add_comm_group.to_add_comm_monoid M _inst_2))))
        (@module.to_mul_action_with_zero R M (@ring.to_semiring R _inst_1)
           (@add_comm_group.to_add_comm_monoid M _inst_2)
           _inst_3)))
  ?x_8 := @has_scalar.comp.is_scalar_tower ?x_11 ?x_12 ?x_13 ?x_14 ?x_15 ?x_16 ?x_17 ?x_18 ?x_19
[class_instances] (2) ?x_18 : @is_scalar_tower ?x_11 R M ?x_15
  (@smul_with_zero.to_has_scalar R M
     (@mul_zero_class.to_has_zero R
        (@mul_zero_one_class.to_mul_zero_class R
           (@monoid_with_zero.to_mul_zero_one_class R (@semiring.to_monoid_with_zero R (@ring.to_semiring R _inst_1)))))
     (@add_zero_class.to_has_zero M
        (@add_monoid.to_add_zero_class M
           (@add_comm_monoid.to_add_monoid M (@add_comm_group.to_add_comm_monoid M _inst_2))))
     (@mul_action_with_zero.to_smul_with_zero R M (@semiring.to_monoid_with_zero R (@ring.to_semiring R _inst_1))
        (@add_zero_class.to_has_zero M
           (@add_monoid.to_add_zero_class M
              (@add_comm_monoid.to_add_monoid M (@add_comm_group.to_add_comm_monoid M _inst_2))))
        (@module.to_mul_action_with_zero R M (@ring.to_semiring R _inst_1)
           (@add_comm_group.to_add_comm_monoid M _inst_2)
           _inst_3)))
  ?x_16 := @has_scalar.comp.is_scalar_tower ?x_20 ?x_21 ?x_22 ?x_23 ?x_24 ?x_25 ?x_26 ?x_27 ?x_28
...
```
You'll see that the places where `has_scalar.comp.is_scalar_tower` expects a `has_scalar.comp` are in fact metavariables, so they always unify.
I have included a test case where the instance looks innocuous enough in its parameters: everything is phrased in terms of either irreducible defs, implicit variables or instance implicits, to argue that the issue really lies with `has_scalar.comp.is_scalar_tower`. Moreover, I don't think we lose a lot by demoting the latter from an instance since `has_scalar.comp` isn't an instance either.

2021-10-13 15:48:21 e8427b0
feat(ring_theory/ideal/operation): add some extra definitions in the `double_quot` section (#9649)

2021-10-13 15:48:20 a7ec633
chore(algebra/*): add missing lemmas about `copy` on subobjects (#9624)
This adds `coe_copy` and `copy_eq` to `sub{mul_action,group,ring,semiring,field,module,algebra,lie_module}`, to match the lemmas already present on `submonoid`.

2021-10-13 15:48:18 577cac1
feat(algebra/order/nonneg): properties about the nonnegative cone (#9598)
* Provide various classes on the type `{x : α // 0 ≤ x}` where `α` has some order (and algebraic) structure.
* Use this to automatically derive the classes on `nnreal`.
* We currently do not yet define `conditionally_complete_linear_order_bot nnreal` using nonneg, since that causes some errors (I think Lean then thinks that there are two orders that are not definitionally equal (unfolding only instances)).
* We leave a bunch of `example` lines in `nnreal` to show that `nnreal` has all the old classes. These could also be removed, if desired.
* We currently only give some instances and simp/norm_cast lemmas. This could be expanded in the future.

2021-10-13 13:20:49 aa67421
lint(tactic/lint/misc): do not lint autogenerated proofs for bad universes (#9676)

2021-10-13 13:20:48 ea360f2
feat(group_theory/sylow): Frattini's Argument (#9662)
Frattini's argument: If `N` is a normal subgroup of `G`, and `P` is a Sylow `p`-subgroup of `N`, then `PN=G`.
The proof is an application of Sylow's second theorem (all Sylow `p`-subgroups of `N` are conjugate).

2021-10-13 13:20:46 acc1d4b
feat(analysis/normed_space/SemiNormedGroup/kernels) : add lemmas (#9654)
From LTE.

2021-10-13 13:20:45 6ea59e3
feat(category_theory/sites/sieves): Added functor pushforward (#9647)
Defined `sieve.functor_pushforward`.
Proved that `sieve.functor_pushforward` and `sieve.functor_pullback` forms a Galois connection.
Provided some lemmas about `sieve.functor_pushforward`, `sieve.functor_pullback` regarding the lattice structure.

2021-10-13 13:20:44 17d8928
feat(algebra/graded_monoid,algebra/direct_sum/ring): provide lemmas about powers in graded monoids (#9631)
The key results are `direct_sum.of_pow` and `graded_monoid.mk_pow`.

2021-10-13 13:20:43 edf07cf
feat(topology/sheaves/sheaf_condition/sites): Connect sheaves on sites to sheaves on spaces (#9609)
Show that a sheaf on the site `opens X` is the same thing as a sheaf on the space `X`. This finally connects the theory of sheaves on sites to sheaves on spaces, which were previously independent of each other.

2021-10-13 13:20:41 f238733
feat(algebra/order/smul): Monotonicity of scalar multiplication (#9558)
Also prove `smul_nonneg`, `smul_pos` and variants.

2021-10-13 12:04:30 04ed867
chore(topology/uniform_space/cauchy): add a few simple lemmas (#9685)
* rename `cauchy_prod` to `cauchy.prod`;
* add `cauchy_seq.tendsto_uniformity`, `cauchy_seq.nonempty`,
  `cauchy_seq.comp_tendsto`, `cauchy_seq.prod`, `cauchy_seq.prod_map`,
  `uniform_continuous.comp_cauchy_seq`, and
  `filter.tendsto.subseq_mem_entourage`;
* drop `[nonempty _]` assumption in `cauchy_seq.mem_entourage`.

2021-10-13 09:37:08 46a7014
feat(data/equiv/basic): psigma_congr_right (#9687)

2021-10-13 09:37:07 4c1a9c4
chore(order/filter): add 2 lemmas (#9682)

2021-10-13 09:37:00 8886386
feat(star/basic): add a `star_monoid (units R)` instance (#9681)
This also moves all the `opposite R` instances to be adjacent, and add some missing `star_module` definitions.

2021-10-13 09:36:59 52d5fd4
feat(linear_algebra/{dimension,affine_space/finite_dimensional}): independent subsets of finite-dimensional spaces are finite. (#9674)
Formalized as part of the Sphere Eversion project.

2021-10-13 07:56:13 2c8abe5
feat(algebra/star): `star_gpow` and `star_fpow` (#9661)
One unrelated proof changes as the import additions pulls in a simp lemma that was previously missing, making the call to `ring` no longer necessary.

2021-10-13 02:43:35 ea70e1c
chore(scripts): update nolints.txt (#9686)
I am happy to remove some nolints for you!

2021-10-12 22:59:49 c65de1e
chore(data/sym/sym2): speed up some proofs (#9677)
In one test, elaboration of sym2_ext went from 46.9s to 734ms, and of elems_iff_eq from 54.3s to 514ms.

2021-10-12 17:00:40 66285c9
feat(topology/instances/ennreal): if a tsum is finite, then the tsum over the complement of a finset tends to 0 at top (#9665)
Together with minor tweaks of the library:
* rename `bounded.subset` to `bounded.mono`
* remove `bUnion_subset_bUnion_right`, which is exactly the same as `bUnion_mono`. Same for intersections.
* add `bUnion_congr` and `bInter_congr`
* introduce lemma `null_of_locally_null`: if a set has zero measure in a neighborhood of each of its points, then it has zero measure in a second-countable space.

2021-10-12 17:00:39 817c70d
feat(category_theory/*): Functors about comma categories. (#9627)
Added `pre` and `post` for `comma`, `structured_arrow`, `costructured_arrow`.

2021-10-12 15:09:33 f63b8f1
feat(algebra/star/basic): add some helper lemmas about star (#9651)
This adds the new lemmas:
* `star_pow`
* `star_nsmul`
* `star_gsmul`
* `star_prod`
* `star_div`
* `star_div'`
* `star_inv`
* `star_inv'`
* `star_mul'`
and generalizes the typeclass assumptions from `star_ring` to `star_add_monoid` on:
* `star_neg`
* `star_sub`
* `star_sum`

2021-10-12 11:41:14 b486c88
chore(analysis): fix file name (#9673)
This file was moved since the docstring was written

2021-10-12 11:41:13 bcb2943
chore(set_theory/cardinal): move defs/lemmas about `lift` up (#9669)

2021-10-12 11:41:12 a979d15
feat(order/filter): `∃ᶠ m in at_top, m ≡ d [MOD n]` (#9666)

2021-10-12 08:59:45 fd7da4e
refactor(combinatorics/partition): add `nat` namespace (#9672)
`partition` is now `nat.partition`

2021-10-12 08:59:43 2e72f35
refactor(data/opposite): Remove the `op_induction` tactic (#9660)
The `induction` tactic is already powerful enough for this; we don't have `order_dual_induction` or `nat_induction` as tactics.
The bulk of this change is replacing `op_induction x` with `induction x using opposite.rec`.
This leaves behind the non-interactive `op_induction'` which is still needed as a `tidy` hook.
This also renames the def `opposite.op_induction` to `opposite.rec` to match `order_dual.rec` etc.

2021-10-12 08:59:41 ad4040d
feat(algebra/opposites): provide npow and gpow explicitly, prove `op_gpow` and `unop_gpow` (#9659)
By populating the `npow` and `gpow` fields in the obvious way, `op_pow` and `unop_pow` are true definitionally.
This adds the new lemmas `op_gpow` and `unop_gpow` which works for `group`s and `division_ring`s too.
Note that we do not provide an explicit `div` in `div_inv_monoid`, because there is no "reversed division" operator to define it via.
This also reorders the lemmas so that the definitional lemmas are available before any proof obligations might appear in stronger typeclasses.

2021-10-12 08:59:38 34ffb15
feat(linear_algebra/affine_space/finite_dimensional): upgrade `affine_independent.affine_span_eq_top_of_card_eq_finrank_add_one` to an iff (#9657)
Also including some related, but strictly speaking independent, lemmas such as `affine_subspace.affine_span_eq_top_iff_vector_span_eq_top_of_nontrivial`.
Formalized as part of the Sphere Eversion project.

2021-10-12 08:16:55 1023d81
chore(ring_theory/tensor_product): squeeze simps in a slow proof (#9671)
This proof just timed out in bors. Goes from 21s to 1s on my computer just by squeezing the simps.

2021-10-12 06:20:54 a132d0a
chore(analysis): move some files to `analysis/normed/group` (#9667)

2021-10-12 01:53:33 638dd0f
feat(data/dfinsupp, algebra/direct_sum/module): direct sum on fintype (#9664)
Analogues for `dfinsupp`/`direct_sum` of definitions/lemmas such as `finsupp.equiv_fun_on_fintype`:  a `dfinsupp`/`direct_sum` over a finite index set is canonically equivalent to `pi` over the same index set.

2021-10-11 22:34:26 c2a30be
feat(analysis/normed_space/normed_group_hom): add norm_noninc.neg (#9658)
From LTE.

2021-10-11 21:39:10 df132fe
feat(topology/path_connected): add `path.reparam` for reparametrising a path. (#9643)
I've also added `simps` to some of the definitions in this file.

2021-10-11 20:04:44 136d0ce
feat(topology/homotopy/path): Add homotopy between paths (#9141)
There is also a lemma about `path.to_continuous_map` which I needed in a prior iteration of this PR that I missed in #9133

2021-10-11 18:55:35 6872dfb
feat(analysis/normed/group/basic): add norm_le_add_norm_add (#9655)
From LTE.

2021-10-11 15:29:09 fa5d9d6
feat(tactic/lint/misc): unused haves and suffices linters (#9310)
A linter for unused term mode have and suffices statements.
Based on initial work by @robertylewis https://leanprover.zulipchat.com/#narrow/stream/187764-Lean-for.20teaching/topic/linter.20for.20helping.20grading/near/209243601 but hopefully with less false positives now.

2021-10-11 07:59:25 c2fde70
feat(number_theory/liouville): Liouville numbers form a dense Gδ set (#9646)

2021-10-11 07:59:24 082aa83
feat(data/finset): add `finset.erase_none` (#9630)
* move `option.to_finset` and `finset.insert_none` to a new file `data.finset.option`; redefine the latter in terms of `finset.cons`;
* define `finset.erase_none`, prove lemmas about it;
* add `finset.prod_cons`, `finset.sum_cons`, `finset.coe_cons`, `finset.cons_subset_cons`, `finset.card_cons`;
* add `finset.subtype_mono` and `finset.bUnion_congr`;
* add `set.insert_subset_insert_iff`;
* add `@[simp]` to `finset.map_subset_map`;
* upgrade `finset.map_embedding` to an `order_embedding`;
* add `@[simps]` to `equiv.option_is_some_equiv` and `function.embedding.some`;
* golf some proofs.

2021-10-11 07:59:23 1539ee1
refactor(topology/sheaves/*): Make sheaf condition a Prop (#9607)
Make `sheaf_condition` into a `Prop` and redefine the type of sheaves on a topological space `X` as a subtype of `(opens X)ᵒᵖ ⥤ C`.

2021-10-11 07:59:22 4a191ad
feat(algebra.algebra.subalgebra): add `subalgebra.gc_map_comap` (#9435)
Other changes:
* add `linear_map.coe_inl`/`linear_map.coe_inr` and move `@[simp]` from `inl_apply`/`inr_apply` to these lemmas;
* fix a typo in the name (`adjoint` → `adjoin`);
* drop `algebra.adjoin_inl_union_inr_le_prod `: we prove an equality anyway;
* add `alg_hom.map_adjoin` (same as `(adjoin_image _ _ _).symm`) to match `monoid_hom.map_closure` etc.

2021-10-11 06:17:12 30cf8b7
feat(group_theory/subgroup/basic): apply_mem_map_injective (#9637)
A translation of `function.injective.mem_set_image`.

2021-10-11 06:17:11 957f64e
feat(algebra/floor): When the floor is strictly positive (#9625)
`⌊a⌋₊` and `⌊a⌋` are strictly positive iff `1 ≤ a`. We use this to slightly golf IMO 2013 P5.

2021-10-11 04:03:52 bcd79a1
chore(analysis/normed/group/basic): rename vars (#9652)
* use `E`, `F` for (semi)normed groups and greek letters for other
  types;
* golf some proofs (`bounded_iff_forall_norm_le`, `norm_pos_iff'`);
* use `namespace lipschitz_with` and `namespace antilipschitz_with`
  instead of manual prefixes for all lemmas;
* generalize `antilipschitz_with.add_lipschitz_with` to
  `pseudo_emetric_space`;
* add `antilipschitz_with.edist_lt_top` and
  `antilipschitz_with.edist_ne_top`;
* fix a typo in `pseudo_emetric_space.to_pseudo_metric_space`.

2021-10-11 04:03:51 11117ec
feat(topology/G_delta): a finite set is a Gδ-set (#9644)

2021-10-11 04:03:50 c02a655
feat(linear_algebra/affine_space/barycentric_coords): we can recover a point from its barycentric coordinates (#9629)
Formalized as part of the Sphere Eversion project.

2021-10-11 04:03:49 0bd14ba
feat(category_theory/limits/lattice): Add explicit formulas for limits in lattices (#9608)
Add explicit descriptions of finite limits and colimits in complete lattices. In particular, the product and the pullback is equal to the infimum, while coproduct and pushout is the supremum. Furthermore, `limit_iso_infi` can be strengthened to an equality, as preorder categories are skeletal.

2021-10-11 04:03:48 c803c8d
feat(algebra/gcd_monoid): trivial `gcd` on `comm_group_with_zero`s (#9602)
This PR extends the `normalization_monoid` defined on `comm_group_with_zero`s (e.g. fields) to a `normalized_gcd_monoid`. This is useful if you need to take the gcd of two polynomials in a field.

2021-10-11 04:03:47 ec5835d
chore(order/*): use to_dual and of_dual in statements instead of implicit coercions between and `α` and  `order_dual α`  (#9593)
Previously the meaning of the statement was hidden away in an invisible surprising typeclass argument.
Before this change, the docs suggested the nonsensical statement that `monotone f` implies `antitone f`!
![image](https://user-images.githubusercontent.com/425260/136348562-d3ecbb85-2a54-4c13-adda-806eb150b00a.png)
Most of the proof changes in this PR are a consequence of changing the interval lemmas, not the monotonicity or convexity ones.

2021-10-11 04:03:45 ef46da8
feat(category_theory/*): Curried yoneda lemma (#9579)
Provided curried versions of the Yoneda lemma when the category is small.

2021-10-11 02:26:38 e32154d
feat(data/equiv/ring): add basic API lemmas for ring_equiv (#9639)
This PR adds the lemmas `map_inv`, `map_div`, `map_pow` and `map_fpow` for `ring_equiv`. These lemmas were already available for `ring_hom`s. I'm very open to suggestions about where they should go; `map_fpow` in particular requires a new import in `algebra/field_power.lean`.

2021-10-10 21:07:28 64255e2
chore(analysis): move some code to `analysis.normed.group.basic` (#9642)

2021-10-10 21:07:27 fa41436
feat(algebra/*,group_theory/*): instances/lemmas about `is_scalar_tower` and `smul_comm_class` (#9533)

2021-10-10 18:58:39 0bba837
chore(data/nat/factorial): use `n + 1` instead of `n.succ` in `nat.factorial_succ` (#9645)

2021-10-10 09:54:18 3d438ba
feat(probability_theory/density): add continuous uniform distribution (#9385)

2021-10-09 16:48:06 54a4c17
feat(group_theory/sylow): `set_like` instance for `sylow` (#9641)
Adds a `set_like` instance for `sylow p G`.
Coauthored by @jcommelin

2021-10-09 14:56:51 bb98444
refactor(group_theory/congruence): remove old_structure_cmd (#9622)

2021-10-09 09:53:15 7ed091d
feat(group_theory/perm/concrete_cycle): computable cyclic perm notation (#9470)

2021-10-09 07:26:30 ce50450
chore(analysis/normed_space/linear_isometry): adjust `isometry` API (#9635)
Now that we have the `linear_isometry` definition, it is better to pass through this definition rather then using a `linear_map` satisfying the `isometry` hypothesis.  To this end, convert old lemma `linear_map.norm_apply_of_isometry` to a new definition `linear_map.to_linear_isometry`, and delete old definition `continuous_linear_equiv.of_isometry`, whose use should be replaced by the pair of definitions`linear_map.to_linear_isometry`, `linear_isometry_equiv.of_surjective`.

2021-10-09 07:26:28 a9643aa
feat(order/min_max): min_cases and max_cases lemmata (#9632)
These lemmata make the following type of argument work seamlessly:
```lean
example (h1 : 0 ≤ x) (h2 : x ≤ 1) : min 1 x ≤ max x 0 := by cases min_cases 1 x; cases max_cases x 0; linarith
```
See similar PR #8124

2021-10-09 07:26:25 e0f80e7
feat(analysis/convex/quasiconvex): Quasiconvexity of functions (#9561)
A function is quasiconvex iff all its sublevels are convex. This generalizes unimodality to non-ordered spaces.

2021-10-09 04:58:07 7a7fada
refactor(data/nat/basic): finish removing sub lemmas (#9601)
* Follow-up of #9544 to remove the remaining sub lemmas on `nat` that can be generalized to `has_ordered_sub`.
* The renamings of the lemmas in mathlib that occurred at least once:
```
nat.sub_eq_of_eq_add -> sub_eq_of_eq_add_rev
nat.add_sub_sub_cancel -> add_sub_sub_cancel'
nat.sub_le_self -> sub_le_self'
```

2021-10-09 02:44:04 7aaa1b4
chore(scripts): update nolints.txt (#9636)
I am happy to remove some nolints for you!

2021-10-08 21:56:11 7e3fa4c
chore(*): fix typos (#9634)

2021-10-08 21:06:41 70a9540
refactor(group_theory/monoid_localization) remove old_structure_cmd (#9621)

2021-10-08 20:24:14 c37e3e7
refactor(field_theory/intermediate_field): remove old_structure_cmd (#9620)

2021-10-08 20:24:12 b39feab
refactor(algebra/lie): reduce use of old_structure_cmd (#9616)

2021-10-08 17:52:23 91ee8f1
chore(data/equiv/ring): add big operator lemmas for ring equivs (#9628)
This PR adds lemmas involving big operators (such as `map_sum`, `map_prod`, etc) for `ring_equiv`s.

2021-10-08 16:13:52 57cd1e9
feat(analysis/normed_space/exponential): remove char_p assumption (#9618)
Remove the `char_p` assumption from `exp_series_eq_exp_series_of_field_extension` as suggested by @urkud here : https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/256679511

2021-10-08 14:22:17 5fd3664
feat(algebra/graded_monoid): Split out graded monoids from graded rings (#9586)
This cleans up the `direct_sum.gmonoid` typeclass to not contain a bundled morphism, which allows it to be used to describe graded monoids too, via the alias for `sigma` `graded_monoid`. Essentially, this:
* Renames:
  * `direct_sum.ghas_one` to `graded_monoid.has_one`
  * `direct_sum.ghas_mul` to `direct_sum.gnon_unital_non_assoc_semiring`
  * `direct_sum.gmonoid` to `direct_sum.gsemiring`
  * `direct_sum.gcomm_monoid` to `direct_sum.gcomm_semiring`
* Introduces new typeclasses which represent what the previous names should have been:
  * `graded_monoid.ghas_mul`
  * `graded_monoid.gmonoid`
  * `graded_monoid.gcomm_monoid` 
This doesn't do as much deduplication as I'd like, but it at least manages some.
There's not much in the way of new definitions here either, and most of the names are just copied from the graded ring case.

2021-10-08 14:22:16 745cbfc
feat(data/polynomial): %ₘ as a linear map  (#9532)
This PR bundles `(%ₘ) = polynomial.mod_by_monic` into a linear map. In a follow-up PR, I'll show this map descends to a linear map `adjoin_root q → polynomial R`, thereby (computably) assigning coefficients to each element in `adjoin_root q`.

2021-10-08 12:12:57 99c3e22
refactor(geometry/manifold): remove old_structure_cmd (#9617)

2021-10-08 12:12:56 c107549
refactor(ring_theory/valuation): remove unnecessary old_structure_cmd (#9615)

2021-10-08 12:12:55 7bdd10e
refactor(order/category): remove old_structure_cmd (#9614)

2021-10-08 12:12:54 af09d3f
refactor(algebra/absolute_value): remove unnecessary old_structure_cmd (#9613)

2021-10-08 12:12:52 25a45ab
refactor(order/omega_complete_partial_order): remove old_structure_cmd (#9612)
Removing a use of `old_structure_cmd`.

2021-10-08 12:12:51 cea97d9
feat(*): add not_mem_of_not_mem_closure for anything with subset_closure (#9595)
This is a goal I would expect library search to finish if I have something not in a closure and I want it not in the base set.

2021-10-08 10:04:44 6c9eee4
refactor(data/finsupp/basic): remove sub lemmas (#9603)
* Remove the finsupp sub lemmas that are special cases of lemmas in `algebra/order/sub`, namely:
  * `finsupp.nat_zero_sub`
  * `finsupp.nat_sub_self`
  * `finsupp.nat_add_sub_of_le`
  * `finsupp.nat_sub_add_cancel`
  * `finsupp.nat_add_sub_cancel`
  * `finsupp.nat_add_sub_cancel_left`
  * `finsupp.nat_add_sub_assoc`
* Rename the remaining lemmas to use `tsub`:
  * `finsupp.coe_nat_sub` → `finsupp.coe_tsub`
  * `finsupp.nat_sub_apply` → `finsupp.tsub_apply`
  Lemmas in `algebra/order/sub` will soon also use `tsub` (see [Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mul_lt_mul''''))

2021-10-08 10:04:43 34145b7
feat(group_theory/subgroup/basic): a new to_additive lemma, and remove a by hand proof (#9594)
I needed `add_subgroup.smul_mem` which didn't seem to exist, and noticed that the `add_subgroup.gsmul_mem` version is proved by hand while to_additive generates it fine (now?)

2021-10-08 10:04:41 d5146f4
feat(ring_theory): `adjoin_root g ≃ S` if `S` has a power basis with the right minpoly (#9529)
This is basically `power_basis.equiv'` with slightly different hypotheses, specialised to `adjoin_root`. It guarantees that even over non-fields, a monogenic extension of `R` can be given by the polynomials over `R` modulo the relevant minimal polynomial.

2021-10-08 10:04:40 82e2b98
feat(ring_theory): generalize `power_basis.equiv` (#9528)
`power_basis.equiv'` is an alternate formulation of `power_basis.equiv` that is somewhat more general when not over a field: instead of requiring the minimal polynomials are equal, we only require the generators are the roots of each other's minimal polynomials.
This is not quite enough to show `adjoin_root (minpoly R (pb : power_basis R S).gen)` is isomorphic to `S`, since `minpoly R (adjoin_root.root g)` is not guaranteed to have the same exact roots as `g` itself. So in a follow-up PR I will strengthen `power_basis.equiv'` to `adjoin_root.equiv'` that requires the correct hypothesis.

2021-10-08 10:04:39 179a495
feat(algebra/star/algebra): generalize to modules (#9484)
This means there is now a `star_module ℂ (ι → ℂ)` instance available.
This adds `star_add_monoid`, and renames `star_algebra` to `star_module` with significantly relaxed typeclass arguments.
This also uses `export` to cut away some unnecessary definitions, and adds the missing `pi.star_def` to match `pi.add_def` etc.

2021-10-08 07:33:10 9ecdd38
chore(algebra/order/sub): generalize 2 lemmas (#9611)
* generalize `lt_sub_iff_left` and `lt_sub_iff_right`;
* use general lemmas in `data.real.ennreal`.

2021-10-08 07:33:09 639a7ef
feat(algebra/order/ring): variants of mul_sub' (#9604)
Add some variants of `mul_sub'` and `sub_mul'` and use them in `ennreal`. (Also sneaking in a tiny stylistic change in `topology/ennreal`.)

2021-10-08 07:33:08 83a07ce
feat(data/nat/log): add antitonicity lemmas for first argument (#9597)
`log` and `clog` are only antitone on bases >1, so we include this as an
assumption in `log_le_log_of_left_ge` (resp. `clog_le_...`) and as a
domain restriction in `log_left_gt_one_anti` (resp. `clog_left_...`).

2021-10-08 07:33:06 41dd4da
feat(data/multiset/interval): Intervals as `multiset`s (#9588)
This provides API for `multiset.Ixx` (except `multiset.Ico`).

2021-10-08 07:33:05 c3768cc
refactor(data/multiset/basic): remove sub lemmas (#9578)
* Remove the multiset sub lemmas that are special cases of lemmas in `algebra/order/sub`
* [This](https://github.com/leanprover-community/mathlib/blob/14c3324143beef6e538f63da9c48d45f4a949604/src/data/multiset/basic.lean#L1513-L1538) gives the list of renamings.
* Use `derive` in `pnat.factors`.

2021-10-08 07:33:03 c400677
feat(algebra/module/basic): `module rat E` is a subsingleton (#9570)
* allow different (semi)rings in `add_monoid_hom.map_int_cast_smul` and `add_monoid_hom.map_nat_cast_smul`;
* add `add_monoid_hom.map_inv_int_cast_smul` and `add_monoid_hom.map_inv_nat_cast_smul`;
* allow different division rings in `add_monoid_hom.map_rat_cast_smul`, drop `char_zero` assumption;
* prove `subsingleton (module rat M)`;
* add a few convenience lemmas.

2021-10-08 07:33:02 eb3595e
move(order/*): move from `algebra.order.` the files that aren't about algebra (#9562)
`algebra.order.basic` and `algebra.order.functions` never mention `+`, `-` or `*`. Thus they belong under `order`.

2021-10-08 07:33:00 8aa1893
feat(group_theory/subgroup/basic): Analog of `mul_aut.conj` for normal subgroups. (#9552)
Analog of `mul_aut.conj` for normal subgroups (pretty much just copying the code from `data/equiv/mul_add_aut.lean`).

2021-10-08 07:32:59 1390b44
feat(analysis/convex/function): API for strict convex functions (#9437)
This provides all the basic API for `strict_convex_on` and `strict_concave_on`.

2021-10-08 07:32:58 a0504eb
refactor(data/*/interval): generalize `finset.Ico` to locally finite orders (#7987)
`finset.Ico` currently goes `ℕ → ℕ → finset ℕ`. This generalizes it to `α → α → finset α` where `locally_finite_order α`.
This also ports all the existing `finset.Ico` lemmas to the new API, which involves renaming and moving them to `data.finset.interval` or `data.nat.interval` depending on whether I could generalize them away from `ℕ` or not.

2021-10-08 06:08:46 ba2454e
feat(ring_theory/coprime): two lemmas prereq for #8611 (#9456)
Two variants of the fact that `¬ is_coprime 0 0`.

2021-10-08 02:40:18 235bfd7
chore(scripts): update nolints.txt (#9610)
I am happy to remove some nolints for you!

2021-10-08 01:32:09 9ea4568
fix(topology/path_connected): add `continuity` to `path.continuous_extend` (#9605)

2021-10-08 00:30:16 fa3b622
refactor(analysis/normed_space/linear_isometry): semilinear isometries (#9551)
Generalize the theory of linear isometries to the semilinear setting.

2021-10-07 21:23:16 9518ce1
feat(topology/algebra): valued fields (#9589)
This is a modernized version of code from the perfectoid spaces project.

2021-10-07 19:09:56 ebccce9
feat(measure_theory/covering/besicovitch): the measurable Besicovitch covering theorem (#9576)
The measurable Besicovitch theorem ensures that, in nice metric spaces, if at every point one considers a class of balls of arbitrarily small radii, called admissible balls, then one can cover almost all the space by a family of disjoint admissible balls. It is deduced from the topological Besicovitch theorem.

2021-10-07 15:09:34 8a60fd7
refactor(data/ennreal/basic): prove has_ordered_sub instance (#9582)
* Give `has_sub` and `has_ordered_sub` instances on `with_top α`.
* This gives a new subtraction on `ennreal`. The lemma `ennreal.sub_eq_Inf` proves that it is equal to the old value.
* Simplify many proofs about `sub` on `ennreal` 
* Proofs that are instantiations of more general lemmas will be removed in a subsequent PR
* Many lemmas that require `add_le_cancellable` in general are reformulated using `≠ ∞`
* Lemmas are reordered, but no lemmas are renamed, removed, or have a different type. Some `@[simp]` tags are removed if a more general simp lemma applies.
* Minor: generalize `preorder` to `has_le` in `has_ordered_sub` (not necessary for this PR, but useful in another (abandoned) branch).

2021-10-07 13:09:23 bf76a1f
feat(algebra/order/with_zero): add lt_of_mul_lt_mul_of_le₀ and mul_lt_mul_of_lt_of_le₀ (#9596)

2021-10-07 11:57:08 18a42f3
feat(src/category_theory/*): Yoneda preserves limits. (#9580)
Shows that `yoneda` and `coyoneda` preserves and reflects limits.

2021-10-07 06:55:11 f874783
feat(data/multiset/erase_dup): Alias for `multiset.erase_dup_eq_self` (#9587)
The new `multiset.nodup.erase_dup` allows dot notation.

2021-10-07 06:55:10 cc46f31
feat(analysis/normed_space/add_torsor_bases): the interior of the convex hull of a finite affine basis is the set of points with strictly positive barycentric coordinates (#9583)
Formalized as part of the Sphere Eversion project.

2021-10-07 06:14:33 a7784aa
feat(category_theory/*): Yoneda extension is Kan (#9574)
- Proved that `(F.elements)ᵒᵖ ≌ costructured_arrow yoneda F`.
- Verified that the yoneda extension is indeed the left Kan extension along the yoneda embedding.

2021-10-07 06:14:32 b9097f1
feat(analysis/asymptotics): Define superpolynomial decay of a function (#9440)
Define superpolynomial decay of functions in terms of asymptotics.is_O.

2021-10-07 04:15:17 0bc7c2d
fix(algebra/group/{prod,pi}): fix non-defeq `has_scalar` diamonds (#9584)
This fixes diamonds in the following instances for nat- and int- actions:
* `has_scalar ℕ (α × β)`
* `has_scalar ℤ (α × β)`
* `has_scalar ℤ (Π a, β a)`
The last one revealed a diamond caused by inconsistent use of `pi_instance_derive_field`:
```lean
-- fails before this change
example [Π a, group $ β a] : group.to_div_inv_monoid (Π a, β a) = pi.div_inv_monoid := rfl
```

2021-10-07 04:15:16 cb3c844
feat(category_theory/limits/*): Filtered colimits preserves finite limits (#9522)
Restated `category_theory.limits.colimit_limit_to_limit_colimit_is_iso` in terms of limit preserving.

2021-10-07 02:14:30 7a2696d
feat(category_theory/limits/preserves/*): Show that whiskering left preserves limits. (#9581)

2021-10-07 02:14:29 f37aeb0
refactor(algebra/gcd_monoid): drop nontriviality assumptions  (#9568)

2021-10-06 21:14:59 f63786b
refactor(data/finsupp/basic): has_ordered_sub on finsupp (#9577)
* Generalize `has_sub` and `canonically_ordered_add_monoid` instances for any finsupp with codomain a `canonically_ordered_add_monoid` & `has_ordered_sub`.
* Provide `has_ordered_sub` instance in the same situation
* Generalize lemmas about `nat` to this situation.
* Prove some lemmas as special cases of `has_ordered_sub` lemmas. These will be removed in a subsequent PR.
* Simplify some lemmas about `α →₀ ℕ` using `has_ordered_sub` lemmas.
* Prove `nat.one_le_iff_ne_zero` (it's the second time I want to use it this week)

2021-10-06 21:14:58 b4a9767
feat(data/multiset/basic): has_ordered_sub multiset (#9566)
* Provide `instance : has_ordered_sub (multiset α)`
* Prove most multiset subtraction lemmas as special cases of `has_ordered_sub` lemmas
* In a subsequent PR I will remove the specialized multiset lemmas

2021-10-06 21:14:56 845d064
feat(algebra/big_operators/finprod): add finprod.mem_dvd (#9549)

2021-10-06 19:23:08 b2ae195
move(data/fin/*): group `fin` files under a `fin` folder (#9524)

2021-10-06 18:27:53 5c3cdd2
feat(analysis/normed_space/add_torsor_bases): barycentric coordinates are open maps (in finite dimensions over a complete field) (#9543)
Using the open mapping theorem with a one-dimensional codomain feels a bit ridiculous but I see no reason not to do so.
Formalized as part of the Sphere Eversion project.

2021-10-06 17:48:50 a7b4e78
fix(computability/DFA): tighten regular pumping lemma to match standard textbooks (#9585)
This PR slightly tightens the regular pumping lemma: the current version applies only to words that are of length at least the number of states in the DFA plus one. Here we remove the plus one.

2021-10-06 15:46:06 bcd13a7
refactor(data/equiv): split out `./set` from `./basic` (#9560)
This move all the equivalences between sets-coerced-to-types to a new file, which makes `equiv/basic` a slightly more manageable size.
The only non-move change in this PR is the rewriting of `equiv.of_bijective` to not go via `equiv.of_injective`, as we already have all the fields available directly and this allows the latter to move to a separate file.
This will allow us to import `order_dual.lean` earlier, as we no longer have to define boolean algebras before equivalences are available.
This relates to #4758.

2021-10-06 15:46:04 0b356b0
feat(analysis/normed_space/banach): open mapping theorem for maps between affine spaces (#9540)
Formalized as part of the Sphere Eversion project.

2021-10-06 15:46:03 5773bc6
feat(group_theory/group_action/conj_act): conjugation action of groups (#8627)

2021-10-06 14:53:28 6abd6f2
chore(ring_theory/witt_vector): fix a docstring (#9575)

2021-10-06 13:44:03 850d5d2
feat(analysis/convex/function): Dual lemmas (#9571)

2021-10-06 10:12:02 8c65781
refactor(data/nat/basic): remove sub lemmas (#9544)
* Remove the nat sub lemmas that are special cases of lemmas in `algebra/order/sub`
* This PR does 90% of the work, some lemmas require a bit more work (which will be done in a future PR)
* Protect `ordinal.add_sub_cancel_of_le`
* Most fixes in other files were abuses of the definitional equality of `n < m` and `nat.succ n \le m`.
* [This](https://github.com/leanprover-community/mathlib/blob/7a5d15a955a92a90e1d398b2281916b9c41270b2/src/data/nat/basic.lean#L498-L611) gives the list of renamings.
* The regex to find 90+% of the occurrences of removed lemmas. Some lemmas were not protected, so might not be found this way.
```
nat.(le_sub_add|add_sub_cancel'|sub_add_sub_cancel|sub_cancel|sub_sub_sub_cancel_right|sub_add_eq_add_sub|sub_sub_assoc|lt_of_sub_pos|lt_of_sub_lt_sub_right|lt_of_sub_lt_sub_left|sub_lt_self|le_sub_right_of_add_le|le_sub_left_of_add_le|lt_sub_right_of_add_lt|lt_sub_left_of_add_lt|add_lt_of_lt_sub_right|add_lt_of_lt_sub_left|le_add_of_sub_le_right|le_add_of_sub_le_left|lt_add_of_sub_lt_right|lt_add_of_sub_lt_left|sub_le_left_of_le_add|sub_le_right_of_le_add|sub_lt_left_iff_lt_add|le_sub_left_iff_add_le|le_sub_right_iff_add_le|lt_sub_left_iff_add_lt|lt_sub_right_iff_add_lt|sub_lt_right_iff_lt_add|sub_le_sub_left_iff|sub_lt_sub_right_iff|sub_lt_sub_left_iff|sub_le_iff|sub_lt_iff)[^_]
```

2021-10-06 10:12:00 facc1d2
feat(topology/algebra): topology on a linear_ordered_comm_group_with_zero (#9537)
This is a modernized version of code from the perfectoid spaces project.

2021-10-06 08:03:57 b534fed
refactor(analysis/{normed_space, inner_product_space}/dual): redefine using `linear_isometry` (#9569)
Linear isometric embeddings appear naturally when studying the duals of normed spaces:  the map `λ y, ⟪x, y⟫` from an inner product space to its dual is a linear isometric embedding++, and so is the canonical map from a normed space to its double dual**.
When these natural maps were defined last year, we didn't have the definition `linear_isometry` (notation: `X →ₗᵢ[R] Y`), so they were defined as continuous linear maps which satisfied the predicate `isometry`, and several lemmas were proven ad-hoc which are now available as general lemmas about  `linear_isometry`.
This PR refactors to use the `linear_isometry` structure.  Lemmas deleted (I have been enthusiastic here, and can scale back if desired ...):
normed_space.inclusion_in_double_dual_isometry
inner_product_space.to_dual_map_isometry
inner_product_space.to_dual_map_injective
inner_product_space.ker_to_dual_map
inner_product_space.to_dual_map_eq_iff_eq 
inner_product_space.range_to_dual_map
inner_product_space.isometric.to_dual
inner_product_space.to_dual_eq_iff_eq
inner_product_space.to_dual_eq_iff_eq'
inner_product_space.norm_to_dual_apply
inner_product_space.norm_to_dual_symm_apply
++ (over `ℝ` -- over `ℂ` it's conjugate-linear, which will be dealt with in future PRs)
** over `ℝ` or `ℂ`

2021-10-06 08:03:56 e52e533
feat(order/bounds): Antitone lemmas (#9556)

2021-10-06 06:05:04 f811910
feat(linear_algebra/affine_space/barycentric_coords): barycentric coordinates are 1 in zero dimensions (#9564)

2021-10-06 01:36:04 db5ee76
chore(linear_algebra/quadratic_form): squeeze simps (#9572)
#9567 speeds up the slowest declaration in the file, but many other declarations are also slow.
This PR squeezes all simps.

2021-10-05 21:57:44 fdf8a71
feat(topology/bases): a family of nonempty disjoint open sets is countable in a separable space (#9557)
Together with unrelated small lemmas on balls and on `pairwise_on`.

2021-10-05 21:57:43 815eaca
feat(analysis/normed_space/affine_isometry): affine maps are open iff their underlying linear maps are (#9538)
Formalized as part of the Sphere Eversion project.

2021-10-05 19:53:22 63903f2
doc(linear_algebra/free_module/strong_rank_condition): correct a typo (#9565)

2021-10-05 19:53:21 0b57520
feat(order/bounds): Image under an `order_iso` and `upper_bounds` commute (#9555)

2021-10-05 19:53:20 111d73b
feat(data/int/interval): Finite intervals in ℤ (#9526)
This proves that `ℤ` is a locally finite order.

2021-10-05 17:44:36 7455f47
chore(linear_algebra/quadratic_form): speed up quadratic_form.lin_mul_lin (#9567)
In my single profiler run, this reduced elaboration time from 20s to 1.5s.

2021-10-05 11:41:22 5926f10
fix(data/equiv/basic): use `subtype p` not `coe_sort (set_of p)` (#9559)
`↥{x | p x}` is just a clumsy way to write `{x // p x}`.

2021-10-05 10:10:30 da4d550
chore(measure_theory/*): better names and notations, add easy lemmas (#9554)
* Localize notation for absolutely continuous in the `measure_theory` namespace, and add separate notations for the case of measures and of vector measures.
* Standardize some names, using `measure` instead of `meas`.
* Add two lemmas on measures with density.

2021-10-05 10:10:29 e7ea02f
feat(analysis/convex/basic): Levels of a monotone/antitone function (#9547)
The set of points whose image under a monotone function is less than a fixed value is convex, when the space is linear.

2021-10-05 10:10:28 5b79319
feat(ring_theory/polynomial/basic): add a lemma `polynomial_quotient_equiv_quotient_polynomial_map_mk` (#9542)

2021-10-05 10:10:27 2666033
refactor(algebra/gcd_monoid): don't require normalization (#9443)
This will allow us to set up a gcd_monoid instance for all euclidean_domains and generalize the results in ring_theory/euclidean_domain.lean to PIDs.

2021-10-05 08:58:55 def4814
refactor(topology/algebra/module): continuous semilinear maps (#9539)
Generalize the theory of continuous linear maps to the semilinear setting.
We introduce a notation `∘L` for composition of continuous linear (i.e., not semilinear) maps, used sporadically to help with unification.  See #8857 for a discussion of a related problem and fix.

2021-10-05 08:05:44 fefd8a3
refactor(analysis/convex/*): prove `convex_independent_iff_finset` without full Carathéodory (#9550)
Also relax one `add_comm_group` to `add_comm_monoid` and two `𝕜` to `β` + `module 𝕜 β`, and simplify imports.

2021-10-05 08:05:43 c42786f
feat(topology/algebra): adic topology (#9521)
This is a modernized version of code from the perfectoid spaces project.

2021-10-05 08:05:41 61cd266
ci(.github/workflows): automatically remove awaiting-CI label (#9491)
This PR adds a job to our CI which removes the label "awaiting-CI" when the build finishes successfully.
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/awaiting-CI.2C.20.23bors.2C.20and.20the.20PR.20.23queue/near/255754196)

2021-10-05 03:31:26 1536412
refactor(data/polynomial): use `monic.ne_zero` and `nontriviality` (#9530)
There is a pattern in `data/polynomial` to have both `(hq : q.monic) (hq0 : q ≠ 0)` as assumptions. I found this less convenient to work with than `[nontrivial R] (hq : q.monic)` and using `monic.ne_zero` to replace `hq0`.
The `nontriviality` tactic automates all the cases where previously `nontrivial R` (or similar) was manually derived from the hypotheses.

2021-10-05 02:21:57 fd18953
chore(scripts): update nolints.txt (#9553)
I am happy to remove some nolints for you!

2021-10-05 01:26:25 0491621
docs(ring_theory/adjoin_root): fix docstring (#9546)

2021-10-05 01:26:24 7466424
feat(number_theory/padics): add padic_norm lemmas (#9527)

2021-10-04 23:18:15 3aac8e5
fix(order/sub): make arguments explicit (#9541)
* This makes some arguments of lemmas explicit.
* These lemmas were not used in places where the implicitness/explicitness of the arguments matters
* Providing the arguments is sometimes useful, especially in `rw ← ...`
* This follows the explicitness of similar lemmas (like the instantiations for `nat`).

2021-10-04 19:37:54 10da8e6
feat(set_theory/cardinal,*): assorted lemmas (#9516)
### New instances
* a denumerable type is infinite;
* `Prop` is (noncomputably) enumerable;
* `Prop` is nontrivial;
* `cardinal.can_lift_cardinal_Type`: lift `cardinal.{u}` to `Type u`.
### New lemmas / attrs
* `quotient.out_equiv_out` : `x.out ≈ y.out ↔ x = y`;
* `quotient.out_inj` : `x.out = y.out ↔ x = y`;
* `cardinal.lift_bit0`, `cardinal.lift_bit1`, `cardinal.lift_two`, `cardinal.lift_prod` :
  new lemmas about `cardinal.lift`;
* `cardinal.omega_le_lift` and `cardinal.lift_le_omega` : simplify `ω ≤ lift c` and `lift c ≤ ω`;
* `cardinal.omega_le_add_iff`, `cardinal.encodable_iff`, `cardinal.mk_le_omega`,
  `cardinal.mk_denumerable`: new lemmas about `cardinal.omega`;
* add `@[simp]` attribute to `cardinal.mk_univ`, add `cardinal.mk_insert`;
* generalize `cardinal.nat_power_eq` to `cardinal.power_eq_two_power` and `cardinal.prod_eq_two_power`.

2021-10-04 19:37:52 50b51c5
refactor(group_theory/is_p_group): Generalize `is_p_group.comap_injective` (#9509)
`is_p_group.comap_injective` (comap along injective preserves p-groups) can be generalized to `is_p_group.comap_ker_is_p_group` (comap with p-group kernel preserves p-groups). This also simplifies the proof of `is_p_group.to_sup_of_normal_right`

2021-10-04 15:09:53 7a5d15a
feat(data/pnat/interval): Finite intervals in ℕ+ (#9534)
This proves that `ℕ+` is a locally finite order.

2021-10-04 15:09:52 e998e4c
feat(order/conditionally_complete_lattice): image and cSup commute (#9510)

2021-10-04 15:09:51 d8968ba
feat(algebra/order/functions): recursors and images under monotone maps (#9505)

2021-10-04 15:09:50 fa52067
refactor(order/fixed_points): rewrite using bundled `preorder_hom`s (#9497)
This way `fixed_points.complete_lattice` can be an instance.

2021-10-04 15:09:49 387ff6e
feat(topology/homotopy): add `homotopy_with` (#9252)
Added `homotopy_with` as in [`HOL-Analysis`](https://isabelle.in.tum.de/library/HOL/HOL-Analysis/Homotopy.html) extending `homotopy`. Furthermore, I've added `homotopy_rel`.
Also rename/moved the file. There is also some refactoring which is part of the suggestions from #9141 .

2021-10-04 14:16:41 f6c77be
fix(ci): always use python3 executable (#9531)
On many (particularly older) systems, the `python` command can refer to `python2` instead of `python3`.  Therefore we change all `python` calls to `python3` to prevent failures on some self-hosted runners.

2021-10-04 14:16:40 a07d1de
feat(data/fin/interval): Finite intervals in `fin n` (#9523)

2021-10-04 13:23:23 15d987a
feat(probability_theory/notation): add notations for expected value, conditional expectation (#9469)
When working in probability theory, the measure on the space is most often implicit. With our current notations for measure spaces, that means writing `volume` in a lot of places. To avoid that and introduce notations closer to the usual practice, this PR defines
- `𝔼[X]` for the expected value (integral) of a function `X` over the volume measure,
- `P[X]` for the expected value over the measure `P`,
- `𝔼[X | hm]` for the conditional expectation with respect to the volume,
- `X =ₐₛ Y` for `X =ᵐ[volume] Y` and similarly for `X ≤ᵐ[volume] Y`,
- `∂P/∂Q` for `P.rn_deriv Q`
All notations are localized to the `probability_theory` namespace.

2021-10-04 09:48:18 ab7d251
feat(measure_theory/covering/besicovitch_vector_space): vector spaces satisfy the assumption of Besicovitch covering theorem (#9461)
The Besicovitch covering theorem works in any metric space subject to a technical condition: there should be no satellite configuration of `N+1` points, for some `N`. We prove that this condition is satisfied in finite-dimensional real vector spaces. Moreover, we get the optimal bound for `N`: it coincides with the maximal number of `1`-separated points that fit in a ball of radius `2`, by [Füredi and Loeb, On the best constant for the Besicovitch covering theorem][furedi-loeb1994]

2021-10-04 09:48:17 b6f94a9
feat(analysis/special_functions): real derivs of `complex.exp` and `complex.log` (#9422)

2021-10-04 09:48:16 1faf964
feat(ring_theory/algebraic_independent): Existence of transcendence bases and rings are algebraic over transcendence basis (#9377)

2021-10-04 09:48:14 8a05dca
feat(order/jordan_holder): Jordan Hölder theorem (#8976)
The Jordan Hoelder theorem proved for a Jordan Hölder lattice, instances of which include submodules of a module and subgroups of a group.

2021-10-04 09:48:13 abe81bc
feat(linear_algebra/matrix/general_linear_group): GL(n, R) (#8466)
added this file which contains definition of the general linear group as well as the subgroup of matrices with positive determinant.

2021-10-04 08:10:26 edb22fe
feat(topology/algebra): nonarchimedean filter bases (#9511)
This is preparatory material for adic topology. It is a modernized version of code from the perfectoid spaces project.

2021-10-04 08:10:24 6bd6afa
feat(data/nat/interval): finite intervals of naturals (#9507)
This proves that `ℕ` is a `locally_finite_order`.

2021-10-04 08:10:23 dc1b045
feat(linear_algebra/free_module/strong_rank_condition): add `comm_ring_strong_rank_condition` (#9486)
We add `comm_ring_strong_rank_condition`: any commutative ring satisfies the strong rank condition.
Because of a circular import, this can't be in `linear_algebra.invariant_basis_number`.

2021-10-04 08:10:22 6a6b4d0
feat(category_theory/sites/*): Cover-lifting functors on sites (#9431)
This PR defines cover-liftings functors between sites, and proves that `Ran F.op` maps sheaves to sheaves for cover-lifting functors `F`. 
This will probably be needed when we want to glue B-sheaves into sheaves.

2021-10-04 05:54:42 d677c29
feat(field_theory/algebraic_closure): versions of exists_aeval_eq_zero for rings (#9517)

2021-10-03 20:33:50 52495a0
chore(data/set/lattice): fix name (#9520)
`comp` is for composition, `compl` for complement. Fix names using `comp` instead of `compl`.

2021-10-03 20:33:49 465508f
split(order/monotone): split off `order.basic` (#9518)

2021-10-03 20:33:48 c0f7c56
feat(algebra/order): exists_square_le (#9513)
This is a modernized version of code from the perfectoid project.

2021-10-03 20:33:47 bc5a081
feat(topology/algebra): Cauchy filters on groups (#9512)
This adds a tiny file but putting this lemma in `topology/algebra/filter_basis.lean` would make that file import a lot of uniform spaces theory. This is a modernized version of code from the perfectoid spaces project.

2021-10-03 20:33:46 44f4d70
chore(*): use dot-notation for is_conj.symm and is_conj.trans (#9498)
renames:
* is_conj_refl -> is_conj.refl
* is_conj_symm -> is_conj.symm
* is_conj_trans -> is_conj.trans

2021-10-03 20:33:45 c1936c1
feat(order/basic): define `is_top` and `is_bot` (#9493)
These predicates allow us to formulate & prove some theorems
simultaneously for the cases `[order_top α]` and `[no_top_order α]`.

2021-10-03 18:50:48 e789ad3
feat(group_theory/subgroup): mk lemmas (#9514)
See discussion at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/set_like.20idiom

2021-10-03 15:22:43 d260894
feat(analysis/convex/combination): lemmas connecting convex hull with affine combinations and barycentric coordinates (#9499)

2021-10-03 11:42:58 cff9927
refactor(ring_theory/unique_factorization_domain): rename unique_factorization_monoid.factors (#9503)
This frees up the name for the non-normalizing version.

2021-10-03 11:42:57 18e7f91
feat(group_theory/quotient_group): if a quotient is trivial then the subgroup is the whole group (#9092)

2021-10-03 10:10:01 55c30c6
feat(topology/basic): interior of finite intersection is intersection of interiors (#9508)
And likewise for finite unions and closures.

2021-10-03 09:15:42 2807d83
feat(analysis/normed_space/add_torsor_bases): barycentric coordinates are continuous (#9515)

2021-10-03 06:55:59 7d83ff1
feat(analysis/special_functions/exp_log): prove continuity of exp without derivatives (#9501)
This is a first step towards making the definition of log and rpow independent of derivatives. The final goal is to avoid importing all of calculus in measure_theory/function/lp_space.lean .

2021-10-03 01:38:49 5f803fa
feat(analysis/convex/function): helper lemmas and general cleanup (#9438)
This adds
* `convex_iff_pairwise_on_pos`
* `convex_on_iff_forall_pos`, `concave_on_iff_forall_pos`,
* `convex_on_iff_forall_pos_ne`, `concave_on_iff_forall_pos_ne`
* `convex_on.convex_strict_epigraph`, `concave_on.convex_strict_hypograph`
generalizes some instance assumptions:
* `convex_on.translate_` didn't need `module 𝕜 β` but `has_scalar 𝕜 β`.
* some proofs in `analysis.convex.exposed` were vestigially using `ℝ`.
 
and golfs proofs.

2021-10-02 23:49:54 7b02277
chore(topology/*): more lemmas about `dense`/`dense_range` (#9492)

2021-10-02 17:58:29 c46a04a
chore(measure_theory): move, deduplicate (#9489)
* move lemmas like `is_compact.measure_lt_top` from `measure_theory.constructions.borel` to `measure_theory.measure.measure_space`;
* drop `is_compact.is_finite_measure` etc;
* add `measure_Ixx_lt_top`.

2021-10-02 17:58:27 a97e86a
chore(ring_theory/ideal): some simp attributes (#9487)

2021-10-02 16:08:36 e60dc2b
docs(measure_theory/integral/lebesgue): Add "Markov's inequality" to the doc string of `mul_meas_ge_le_lintegral` (#9506)

2021-10-02 16:08:34 110c740
refactor(linear_algebra/charpoly): split in two files (#9485)
We split `linear_algebra/charpoly` in `linear_algebra/charpoly/basic` and `linear_algebra/charpoly/to_matrix`.
Currently in `linear_algebra/charpoly/to_matrix` we only prove `linear_map.charpoly_to_matrix f` : `charpoly f` is the characteristic polynomial of the matrix of `f` in any basis. This needs to be in a separate file then the definition of `f.charpoly` since it needs the invariant basis number property for commutative rings and in a future PR I will prove this as a special case of the fact that any commutative ring satisfies the strong rank condition, but the proof of this uses the characteristic polynomial.
We plan to add ohter results regarding the characteristic polynomial in the future.

2021-10-02 16:08:33 1ceebca
refactor(linear_algebra/free_module_pid): move linear_algebra/free_module_pid to linear_algebra/free_module/pid (#9482)
We move `linear_algebra/free_module_pid` to `linear_algebra/free_module/pid`.

2021-10-02 16:08:31 fa7fdca
feat(measure_theory/function/ae_eq_of_integral): two ennreal-valued function are a.e. equal if their integrals agree (#9372)

2021-10-02 13:51:01 241aad7
feat(data/finset/interval): API for `finset.Ixx` (#9495)
This proves basic results about `finset.Ixx` & co. Lemma names (should) match their `set` counterparts.

2021-10-02 12:12:09 f3746ea
chore(src/analysis/special_functions/trigonometric/basic) : prove continuity of sin/cos/sinh/cosh without derivatives (#9502)
In a future PR, I want to split all files in the special_functions folder to avoid importing calculus when not needed (the goal is to avoid importing it in the definition of lp_space in measure_theory). This PR changes the proofs of continuity of trigonometric functions.

2021-10-02 09:30:39 e26a9e5
feat(measure_theory/covering/besicovitch): the Besicovitch covering theorem (#9462)
The Besicovitch covering theorem: in a nice metric space (e.g. real vector spaces), from any family of balls one can extract `N` subfamilies made of disjoint balls, covering all the centers of the balls in the family. The number `N` only depends on the metric space.

2021-10-02 09:30:37 9e54ad0
feat(ring_theory/algebraic_independent): algebraic independence (#9229)

2021-10-02 07:33:19 709b449
chore(algebra/star/basic): provide automorphisms in commutative rings (#9483)
This adds `star_mul_aut` and `star_ring_aut`, which are the versions of `star_mul_equiv` and `star_ring_equiv` which avoid needing `opposite` due to commutativity.

2021-10-02 07:33:18 fc7f9f3
feat(algebra/algebra): the range of `algebra_map (S : subalgebra R A) A` (#9450)

2021-10-02 07:33:17 a59876f
feat(ring_theory): quotients of a noetherian ring are noetherian (#9449)

2021-10-02 04:58:50 37f43bf
feat(linear_algebra/affine_space/barycentric_coords): define barycentric coordinates (#9472)

2021-10-01 23:08:54 06b184f
refactor(analysis/convex/caratheodory): generalize ℝ to an arbitrary linearly ordered field (#9479)
As a result; `convex_independent_iff_finset` also gets generalized.

2021-10-01 20:36:04 118d45a
doc(ring_theory/subring): fix docstring of `subring.center` (#9494)

2021-10-01 20:36:02 e6f8ad7
refactor(analysis/convex/cone): generalize ℝ to an ordered semiring (#9481)
Currently, `convex_cone` is only defined in ℝ-modules. This generalizes ℝ to an arbitray ordered semiring. `convex_cone E` is now spelt `convex_cone 𝕜 E`. Similarly, `positive_cone E` becomes `positive_cone 𝕜 E`.

2021-10-01 20:36:00 05ee42c
feat(order/circular): define circular orders (#9413)
A circular order is the way to formalize positions on a circle. This is very foundational, as a good lot of the order-algebra-topology hierarchy has a circular analog.

2021-10-01 20:35:59 5c92eb0
feat(measure_theory/function/conditional_expectation): conditional expectation on real functions equal Radon-Nikodym derivative (#9378)

2021-10-01 20:35:58 75d022b
feat(probability_theory/density): define probability density functions (#9323)
This PR also proves some elementary properties about probability density function such as the law of the unconscious statistician.

2021-10-01 18:34:46 6354fe9
feat(topology/algebra): discrete group criterion (#9488)

2021-10-01 18:34:45 a5fc0a3
feat(topology/algebra): filters bases for algebra (#9480)
This is modernized version of code from the perfectoid spaces project.

2021-10-01 17:21:37 db6d862
split(analysis/convex/basic): split off `analysis.convex.hull` (#9477)

2021-10-01 15:54:07 249a015
chore(ring_theory/coprime): split out imports into a new file so that `is_coprime` can be used earlier. (#9403)
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Use.20of.20is_coprime.20in.20rat.2Ebasic/near/254942750)

2021-10-01 15:54:06 102ce30
feat(linear_algebra/direct_sum): `submodule_is_internal_iff_independent_and_supr_eq_top` (#9214)
This shows that a grade decomposition into submodules is bijective iff and only iff the submodules are independent and span the whole module.
The key proofs are:
* `complete_lattice.independent_of_dfinsupp_lsum_injective`
* `complete_lattice.independent.dfinsupp_lsum_injective`
Everything else is just glue.
This replaces parts of #8246, and uses what is probably a similar proof strategy, but without unfolding down to finsets.
Unlike the proof there, this requires only `add_comm_monoid` for the `complete_lattice.independent_of_dfinsupp_lsum_injective` direction of the proof. I was not able to find a proof of `complete_lattice.independent.dfinsupp_lsum_injective` with the same weak assumptions, as it is not true! A counter-example is included,

2021-10-01 13:24:12 9be12dd
feat(order/locally_finite): introduce locally finite orders (#9464)
The new typeclass `locally_finite_order` homogeneizes treatment of intervals as `finset`s and `multiset`s. `finset.Ico` is now available for all locally finite orders (instead of being ℕ-specialized), rendering `finset.Ico_ℤ` and `pnat.Ico` useless.
This PR also introduces the long-awaited `finset.Icc`, `finset.Ioc`, `finset.Ioo`, and `finset.Ici`, `finset.Ioi` (for `order_top`s) and `finset.Iic`, `finset.Iio` (for `order_bot`s), and the `multiset` variations thereof.

2021-10-01 13:24:10 62b8c1f
feat(order/basic): Antitone functions (#9119)
Define `antitone` and `strict_anti`. Use them where they already were used in expanded form. Rename lemmas accordingly.
Provide a few more `order_dual` results, and rename `monotone.order_dual` to `monotone.dual`.
Restructure `order.basic`. Now, monotone stuff can easily be singled out to go in a new file `order.monotone` if wanted. It represents 587 out of the 965 lines.

2021-10-01 13:24:08 d6bf2dd
refactor(*): replace `abs` with vertical bar notation (#8891)
The notion of an "absolute value" occurs both in algebra (e.g. lattice ordered groups) and analysis (e.g. GM and GL-spaces). I introduced a `has_abs` notation class in #9172, along with the  conventional mathematical vertical bar notation `|.|` for `abs`.
The notation vertical bar notation was already in use in some files as a local notation. This PR replaces `abs` with the vertical bar notation throughout mathlib.

2021-10-01 12:27:23 c33407a
feat(algebraic_geometry/*): Proved Spec ⋙ Γ ≅ 𝟭 (#9416)
- Specialied `algebraic_geometry.structure_sheaf.basic_open_iso` into global sections, proving that the map `structure_sheaf.to_open R ⊤` is an isomorphism in `algebraic_geometry.is_iso_to_global`.
- Proved that the map `R ⟶ Γ(Spec R)` is natural, and presents the fact above as an natural isomorphism `Spec.right_op ⋙ Γ ≅ 𝟭 _` in `algebraic_geometry.Spec_Γ_identity`.

2021-10-01 10:38:53 38395ed
chore(bors): bors should block on label awaiting-CI (#9478)

2021-10-01 10:38:52 5936f53
feat(topology/maps): for a continuous open map, preimage and interior commute (#9471)

2021-10-01 10:38:51 265345c
feat(linear_algebra/{bilinear,quadratic}_form): remove non-degeneracy requirement from `exists_orthogonal_basis` and Sylvester's law of inertia (#9465)
This removes the `nondegenerate` hypothesis from `bilin_form.exists_orthogonal_basis`, and removes the `∀ i, B (v i) (v i) ≠ 0` statement from the goal. This property can be recovered in the case of a nondegenerate form with `is_Ortho.not_is_ortho_basis_self_of_nondegenerate`.
This also swaps the order of the binders in `is_Ortho` to make it expressible with `pairwise`.

2021-10-01 10:38:49 74457cb
feat(data/polynomial,field_theory): `(minpoly A x).map f ≠ 1` (#9451)
We use this result to generalize `minpoly.not_is_unit` from integral domains to nontrivial `comm_ring`s.

2021-10-01 08:55:56 f7d7a91
feat(algebraic_geometry/ringed_space): Define basic opens for ringed spaces. (#9358)
Defines the category of ringed spaces, as an alias for `SheafedSpace CommRing`. We provide basic lemmas about sections being units in the stalk and define basic opens in this context.

2021-10-01 08:55:55 9235c8a
feat(data/polynomial/basic): polynomial.update (#9020)

2021-10-01 06:05:13 e0f7d0e
feat(group_theory/complement): is_complement_iff_card_mul_and_disjoint (#9476)
Adds the converse to an existing lemma `is_complement_of_disjoint` (renamed `is_complement_of_card_mul_and_disjoint`).

2021-10-01 06:05:12 57fa903
refactor(group_theory/complement): Split `complement.lean` (#9474)
Splits off Schur-Zassenhaus from `complement.lean`. In the new file, we can replace `fintype.card (quotient_group.quotient H)` with `H.index`.
Advantages: We can avoid importing `cardinal.lean` in `complement.lean`. Later (once full SZ is proved), we can avoid importing `sylow.lean` in `complement.lean`.

2021-10-01 06:05:11 76ddb2b
feat(analysis/normed_space/lattice_ordered_group): introduce normed lattice ordered groups (#9274)
Motivated by Banach Lattices, this PR introduces normed lattice ordered groups and proves that they are topological lattices. To support this `has_continuous_inf` and `has_continuous_sup` mixin classes are also defined.

2021-10-01 03:25:37 812d6bb
chore(scripts): update nolints.txt (#9475)
I am happy to remove some nolints for you!

2021-10-01 03:25:36 125dac8
feat(group_theory/sylow): The number of Sylow subgroups equals the index of the normalizer (#9455)
This PR adds further consequences of Sylow's theorems (still for infinite groups, more will be PRed later).

2021-10-01 03:25:35 b786443
chore(algebra/category/*): Added `of_hom` to all of the algebraic categories. (#9454)
As suggested in the comments of #9416.

2021-10-01 03:25:34 babca8e
refactor(algebra/group_with_zero): rename lemmas to use ₀ instead of ' (#9424)
We currently have lots of lemmas for `group_with_zero` that already have a corresponding lemma for `group`. We've dealt with name collisions so far just by adding a prime.
This PR renames these lemmas to use a `₀` suffix instead of a `'`.
In part this is out of desire to reduce our overuse of primes in mathlib names (putting the burden on users to know names, rather than relying on naming conventions).
But it may also help with a problem Daniel Selsam ran into at https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib. (Briefly, mathport is also adding primes to names when it encounters name collisions, and these particular primes were causing problems. There are are other potential fixes in the works, but everything helps.)

2021-10-01 01:14:03 540fb94
feat(data/fintype/basic): bijection preserves cardinality (#9473)
We don't seem to have this lemma yet, so I've added it.

2021-10-01 01:14:02 456db24
feat(topology/algebra/module): has_continuous_smul (#9468)
in terms of nice neighborhoods of zero

2021-10-01 01:14:00 2b23d2e
chore(topology/algebra): remove dead code (#9467)
This code wasn't used and its historically intended use will soon be redone much better. The second file is only a dead import and a misleading comment (referring to the dead code of the *other* file).

2021-10-01 01:13:59 5b02571
chore(measure_theory/decomposition/lebesgue): make measurable_space implicit (#9463)
Whenever the `measurable_space` can be inferred from a `measure` argument, it should be implicit. This PR applies that rule to the Lebesgue decomposition file.

2021-09-30 22:39:03 a24b496
feat(analysis/normed_space/add_torsor_bases): add lemma `exists_subset_affine_independent_span_eq_top_of_open` (#9418)
Also some supporting lemmas about affine span, affine independence.

2021-09-30 22:39:00 931cd6d
feat(data/set/equitable): Equitable functions (#8509)
Equitable functions are functions whose maximum is at most one more than their minimum. Equivalently, in an additive successor order (`a < b ↔ a +1 ≤ b`), this means that the function takes only values `a` and `a + 1` for some `a`.
From Szemerédi's regularity lemma. Co-authored by @b-mehta

2021-09-30 20:25:20 a52a54b
chore(analysis/convex/basic): instance cleanup (#9466)
Some lemmas were about `f : whatever → 𝕜`. They are now about `f : whatever → β` + a scalar instance between `𝕜` and `β`.
Some `add_comm_monoid` assumptions are actually promotable to `add_comm_group` directly thanks to [`module.add_comm_monoid_to_add_comm_group`](https://leanprover-community.github.io/mathlib_docs/algebra/module/basic.html#module.add_comm_monoid_to_add_comm_group). [Related Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Convexity.20refactor/near/255268131).

2021-09-30 20:25:18 97036e7
feat(measure_theory/constructions/pi): volume on `α × α` as a map of volume on `fin 2 → α` (#9432)

2021-09-30 20:25:17 64bcb38
feat(order/succ_pred): define successor orders (#9397)
A successor order is an order in which every (non maximal) element has a least greater element. A predecessor order is an order in which every (non minimal) element has a greatest smaller element. Typical examples are `ℕ`, `ℕ+`, `ℤ`, `fin n`, `ordinal`. Anytime you want to turn `a < b + 1` into `a ≤ b` or `a < b` into `a + 1 ≤ b`, you want a `succ_order`.

2021-09-30 20:25:16 f7795d1
feat(monoid_algebra/grading): `add_monoid_algebra`s permit an internal grading (#8927)

2021-09-30 18:34:36 b18eedb
feat(linear_algebra/affine_space/combination): add lemma `finset.map_affine_combination` (#9453)
The other included lemmas `affine_map.coe_sub`,  `affine_map.coe_neg` are unrelated but are included to reduce PR overhead.

2021-09-30 18:34:34 6e6fe1f
move(category_theory/category/default): rename to `category_theory.basic` (#9412)

2021-09-30 18:34:33 4091f72
refactor(linear_algebra/free_module): split in two files (#9407)
We split `linear_algebra/free_module` in `linear_algebra/free_module/basic` and `linear_algebra/free_module/finite`, so one can work with free modules without having to import all the theory of dimension.

2021-09-30 18:34:32 6210d98
feat(*): Clean up some misstated lemmas about analysis/manifolds (#9395)
A few lemmas whose statement doesn't match the name / docstring about analytical things, all of these are duplicates of other lemmas, so look like copy paste errors.

2021-09-30 16:11:19 118e809
refactor(algebra/module/linear_map): Move elementwise structure from linear_algebra/basic (#9331)
This helps reduce the size of linear_algebra/basic, and by virtue of being a smaller file makes it easier to spot typeclasses which can be relaxed.
As an example, `linear_map.endomorphism_ring` now requires only `semiring R` not `ring R`.
Having instances available as early as possible is generally good, as otherwise it is hard to even state things elsewhere.

2021-09-30 16:11:18 0dca20a
feat(data/(d)finsupp): update_eq_sub_add_single (#9184)
Also with `erase_eq_sub_single`.

2021-09-30 16:11:16 8ec7fcf
feat(ring_theory/henselian): Henselian local rings (#8986)

2021-09-30 13:44:22 f184dd7
feat(group_theory/perm/concrete_cycle): perm.to_list (#9178)
The conceptual inverse to `list.form_perm`.

2021-09-30 13:44:21 3daae2c
refactor(algebra/abs): add has_abs class (#9172)
The notion of an "absolute value" occurs both in algebra (e.g. lattice ordered groups) and analysis (e.g. GM and GL-spaces). I introduced a `has_abs` notation class in https://github.com/leanprover-community/mathlib/pull/8673 for lattice ordered groups, along with the notation `|.|` and was asked by @eric-wieser and @jcommelin to add it in a separate PR and retro fit `has_abs` and the notation to mathlib.
I tried to introduce both the `has_abs` class and the `|.|` notation in #8891 . However, I'm finding such a large and wide-ranging PR unwieldy to work with, so I'm now opening this PR which just replaces the previous definitions of `abs : α → α` in the following locations:
https://github.com/leanprover-community/mathlib/blob/f36c98e877dd86af12606abbba5275513baa8a26/src/algebra/ordered_group.lean#L984
https://github.com/leanprover-community/mathlib/blob/f36c98e877dd86af12606abbba5275513baa8a26/src/topology/continuous_function/basic.lean#L113
Out of scope are the following `abs : α → β`:
https://github.com/leanprover-community/mathlib/blob/f36c98e877dd86af12606abbba5275513baa8a26/src/data/complex/is_R_or_C.lean#L439
https://github.com/leanprover-community/mathlib/blob/f36c98e877dd86af12606abbba5275513baa8a26/src/data/complex/basic.lean#L406
https://github.com/leanprover-community/mathlib/blob/f36c98e877dd86af12606abbba5275513baa8a26/src/data/real/nnreal.lean#L762
https://github.com/leanprover-community/mathlib/blob/f36c98e877dd86af12606abbba5275513baa8a26/src/data/num/basic.lean#L315
Replacing the `abs` notation with `|.|` can be considered in a subsequent PR.

2021-09-30 11:12:34 2fd713a
chore(order/basic): rename monotonicity concepts (#9383)
This:
* Renames various mono lemmas either to enable dot notation (in some cases for types that don't exist yet) or to reflect they indicate monotonicity within a particular domain.
* Renames `strict_mono.top_preimage_top'` to `strict_mono.maximal_preimage_top'`
* Sorts some imports
* Replaces some `rcases` with `obtain`

2021-09-30 11:12:33 09506e6
feat(ring_theory/finiteness): add finiteness of restrict_scalars (#9363)
We add `module.finitte.of_restrict_scalars_finite` and related lemmas: if `A` is an `R`-algebra and `M` is an `A`-module that is finite as `R`-module, then it is finite as `A`-module (similarly for `finite_type`).

2021-09-30 11:12:32 3b48f7a
docs(category_theory): provide missing module docs (#9352)

2021-09-30 08:02:28 6d12b2e
feat(group_theory/complement): Top is complement to every singleton subset (#9460)
The top subset of G is complement to every singleton subset of G.

2021-09-30 08:02:27 f31758a
chore(linear_algebra/quadratic_form): add missing lemmas, lift instance, and tweak argument implicitness (#9458)
This adds `{quadratic,bilin}_form.{ext_iff,congr_fun}`, and a `can_lift` instance to promote `bilin_form`s to `quadratic_form`s.
The `associated_*` lemmas should have `Q` and `S` explicit as they are not inferable from the arguments. In particular, with `S` implicit, rewriting any of them backwards introduces a lot of noisy subgoals.

2021-09-30 08:02:25 f6d2434
feat(set_theory/cardinal_ordinal): there is no injective function from ordinals to types in the same universe (#9452)
Contributed by @rwbarton at https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Transfinite.20recursion/near/253614140

2021-09-30 08:02:23 089614b
feat(algebra/star): If `R` is a `star_monoid`/`star_ring` then so is `Rᵒᵖ` (#9446)
The definition is simply that `op (star r) = star (op r)`

2021-09-30 08:02:22 d1f78e2
feat(order/filter/{basic, cofinite}, topology/subset_properties): filter lemmas, prereqs for #8611 (#9419)

2021-09-30 08:02:21 f76d019
chore({field,ring}_theory): generalize `fraction_ring` and `is_separable` to rings (#9415)
These used to be defined only for `integral_domain`s resp. `field`s, however the construction makes sense even for `comm_ring`s. So we can just do the generalization for free, and moreover it makes certain proof terms in their definition a lot smaller. Together with #9414, this helps against [timeouts when combining `localization` and `polynomial`](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60variables.60.20doesn't.20time.20out.20but.20inline.20params.20do), although the full test case is still quite slow (going from >40sec to approx 11 sec).

2021-09-30 08:02:19 92526c8
chore(ring_theory/localization): speed up `localization` a bit (#9414)
Now `nsmul` and `gsmul` are irreducible on `localization`. This helps against [timeouts when combining `localization` and `polynomial`](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60variables.60.20doesn't.20time.20out.20but.20inline.20params.20do), although the full test case is still quite slow (going from >40sec to approx 11 sec).

2021-09-30 06:24:50 8b238eb
refactor(data/mv_polynomial/equiv): simplify option_equiv_left (#9427)

2021-09-30 05:32:29 c7dd27d
split(analysis/convex/jensen): split Jensen's inequalities off `analysis.convex.function` (#9445)

2021-09-30 02:54:54 d9ed073
chore(scripts): update nolints.txt (#9459)
I am happy to remove some nolints for you!

2021-09-30 02:06:41 f254c2f
refactor(analysis/normed_space/{dual, pi_Lp}): split out inner product space parts (#9388)
This is just moving code, no math changes.
https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/New.20folder.20analysis.2Finner_product_space

2021-09-29 21:38:23 519ab35
feat(topology/metric_space/basic): nonempty intersections of balls (#9448)

2021-09-29 21:38:22 acced82
chore(*): linting (#9343)

2021-09-29 20:27:33 3681b5a
split(analysis/convex/slope): split slope results off `analysis.convex.function` (#9444)

2021-09-29 18:44:41 eca3fd9
feat(data/real/ennreal): composition of coercion of natural numbers in ennreal (#9447)

2021-09-29 16:34:59 88e613e
feat(data/mv_polynomial/cardinal): cardinalities of polynomial rings (#9384)

2021-09-29 16:34:57 2cd1d04
feat(group_theory/sylow): Sylow's theorems for infinite groups (#9288)
This PR contains all three of Sylow's theorems for infinite groups, building off the work of @ChrisHughes24 in the `ch_sylow2` branch of mathlib.
Later, I'll PR some consequences (e.g., index of normalizer stuff, maybe a golf of the original sylow stuff using the new results, Frattini's argument, ...).

2021-09-29 14:22:40 9535c08
feat(linear_algebra/affine_space/combination, analysis/convex/combination): basic lemmas about affine combinations, center of mass, centroid (#9103)

2021-09-29 13:14:50 9e91b70
feat(analysis/convex/function): define strictly convex/concave functions (#9439)

2021-09-29 11:22:48 6f609ba
feat(data/mv_polynomial/basic): aeval_tower (#9429)

2021-09-29 11:22:47 43c1ab2
fix(linear_algebra/basic): generalize `linear_map.add_comm_group` to semilinear maps (#9402)
Also generalizes `coe_mk` and golfs some proofs.

2021-09-29 10:20:15 d2463aa
feat(ring_theory/algebraic): is_algebraic_of_larger_base_of_injective (#9433)

2021-09-29 09:37:26 e150668
chore(topology/sheaves): fix timeout by splitting proof (#9436)
In #7033 we were getting a timeout in `app_surjective_of_stalk_functor_map_bijective`. Since the proof looks like it has two rather natural components, I split out the first half into its own lemma. This is a separate PR since I don't really understand the topology/sheaf library, so I might be doing something very weird.
Timings:
 * original (master): 4.42s
 * original (master + #7033): 5.93s
 * new (master + this PR): 4.24s + 316ms
 * new (master + #7033 + this PR): 5.48s + 212ms

2021-09-29 09:37:24 0de5432
feat(data/W/cardinal): results about cardinality of W-types (#9210)

2021-09-29 08:41:05 c758cec
chore(analysis/convex/function): change `add_comm_monoid` to `add_comm_group` when carrier type is module of scalars containing -1 (#9442)
Related [Zulip conversation](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Convexity.20refactor/near/255268131)

2021-09-29 04:03:07 d7abdff
chore(analysis/normed_space/*): prereqs for #8611 (#9379)
The functions `abs` and `norm_sq` on `ℂ` are proper.
A matrix with entries in a {seminormed group, normed group, normed space} is itself a {seminormed group, normed group, normed space}.
An injective linear map with finite-dimensional domain is a closed embedding.

2021-09-29 04:03:06 8bd75b2
feat(measure_theory/measure/haar_lebesgue): properties of Haar measure on real vector spaces (#9325)
We show that any additive Haar measure on a finite-dimensional real vector space is rescaled by a linear map through its determinant, and we compute the measure of balls and spheres.

2021-09-29 04:03:04 861d3bc
chore(order/preorder_hom): more homs, golf a few proofs (#9256)
### New `preorder_hom`s
* `preorder_hom.curry`: an order isomorphism between `α × β →ₘ γ` and `α →ₘ β →ₘ γ`;
* `preorder_hom.compₘ`: a fully bundled version of `preorder_hom.comp`;
* `preorder_hom.prodₘ`: a fully bundled version of `preorder_hom.prod`;
* `preorder_hom.prod_iso`: Order isomorphism between the space of
  monotone maps to `β × γ` and the product of the spaces +of monotone
  maps to `β` and `γ`;
* `preorder_hom.pi`: construct a bundled monotone map `α →ₘ Π i, π i`
  from a family of monotone maps +`f i : α →ₘ π i`;
* `preorder_hom.pi_iso`: same thing, as an `order_iso`;
* `preorder_hom.dual`: interpret `f : α →ₘ β` as `order_dual α →ₘ order_dual β`;
* `preorder_hom.dual_iso`: same as an `order_iso` (with one more
  `order_dual` to get a monotone map, not an antitone map);
### Renamed/moved `preorder_hom`s
The following `preorder_hom`s were renamed and/or moved from
`order.omega_complete_partial_order` to `order.preorder_hom`.
* `preorder_hom.const` : moved, bundle as `β →ₘ α →ₘ β`;
* `preorder_hom.prod.diag` : `preorder_hom.diag`;
* `preorder_hom.prod.map` : `preorder_hom.prod_map`;
* `preorder_hom.prod.fst` : `preorder_hom.fst`;
* `preorder_hom.prod.snd` : `preorder_hom.snd`;
* `preorder_hom.prod.zip` : `preorder_hom.prod`;
* `pi.monotone_apply` : `pi.eval_preorder_hom`;
* `preorder_hom.monotone_apply` : `preorder_hom.apply`;
* `preorder_hom.to_fun_hom` : moved.
### Other changes
* add an instance `can_lift (α → β) (α →ₘ β)`;
- rename `omega_complete_partial_order.continuous.to_monotone` to
  `omega_complete_partial_order.continuous'.to_monotone` to enable dot
  notation, same with
  `omega_complete_partial_order.continuous.to_bundled`;
* use `order_dual` to get some proofs;
* golf some proofs;
* redefine `has_Inf.Inf` and `has_Sup.Sup` using `infi`/`supr`;
* generalize some `mono` lemmas;
* use notation `→ₘ`.

2021-09-29 03:09:45 49805e6
chore(scripts): update nolints.txt (#9441)
I am happy to remove some nolints for you!

2021-09-28 23:13:37 73afb6c
chore(data/fintype/basic): add `fintype.card_set` (#9434)

2021-09-28 20:09:13 e2cb9e1
feat(data/mv_polynomial/supported): subalgebra of polynomials supported by a set of variables (#9183)

2021-09-28 16:57:32 e18b9ca
feat(set_theory/continuum): define `cardinal.continuum := 2 ^ ω` (#9354)

2021-09-28 14:01:07 15f15a6
chore(order/*): replace `mono_incr` and `mono_decr` in lemma names wih `monotone` and `antitone` (#9428)
This change was performed as a find-and-replace. No occurrences of `incr` or `decr` appear as tokens in lemma names after this change.

2021-09-28 14:01:05 2d5fd65
fix(algebra/opposites): add a missing `comm_semiring` instance (#9425)

2021-09-28 14:01:04 84bbb00
feat(data/set/intervals): add `order_iso.image_Ixx` lemmas (#9404)

2021-09-28 11:33:36 4a02fd3
refactor(algebra/order/ring,data/complex): redefine `ordered_comm_ring` and complex order (#9420)
* `ordered_comm_ring` no longer extends `ordered_comm_semiring`.
  We add an instance `ordered_comm_ring.to_ordered_comm_semiring` instead.
* redefine complex order in terms of `re` and `im` instead of existence of a nonnegative real number.
* simplify `has_star.star` on `complex` to `conj`;
* rename `complex.complex_partial_order` etc to `complex.partial_order` etc, make them protected.

2021-09-28 11:33:35 06610c7
feat(data/list/basic): lemmas about tail (#9259)

2021-09-28 11:33:33 c0dbe14
feat(linear_algebra/matrix/fpow): integer powers of matrices (#8683)
Since we have an inverse defined for matrices via `nonsing_inv`, we provide a `div_inv_monoid` instance for matrices.
The instance provides the ability to refer to integer power of matrices via the auto-generated `gpow`.
This is done in a new file to allow selective use.
Many API lemmas are provided to facilitate usage of the new `gpow`, many copied in form/content from
`algebra/group_with_zero/power.lean`, which provides a similar API.

2021-09-28 07:29:17 01adfd6
chore(analysis/special_functions): add some `@[simp]` attrs (#9423)
Add `@[simp]` attrs to `real.sin_add_pi` and similar lemmas.

2021-09-28 07:29:16 6108616
doc(*): remove docstrings from copyright headers (#9411)
This moves/removes the docs from the copyright header that are enough to make for the missing module docstring/redundant with the module docstring.

2021-09-28 07:29:14 36c09f7
doc(order/*): use "monotone" / "antitone" in place of "monotonically increasing" / "monotonically decreasing" (#9408)
This PR cleans up the references to monotone and antitone function in lemmas and docstrings.
It doesn't touch anything beyond the docstrings.

2021-09-28 07:29:13 22f2409
chore(measure_theory/integral/interval_integral): change of variables for normed-space target (#9350)
Re-state change of variables for `interval_integral` for a function with target a real normed space `E`, rather than just `ℝ`.  The proofs are exactly the same.

2021-09-28 06:33:23 1db626e
feat(analysis/normed_space/is_bounded_bilinear_map): direct proof of continuity (#9390)
Previously `is_bounded_bilinear_map.continuous`, the continuity of a bounded bilinear map, was deduced from its differentiability and lived in `analysis.calculus.fderiv`.  This PR gives a direct proof so it can live in `analysis.normed_space.bounded_linear_maps`.
Two consequences of this lemma are also moved earlier in the hierarchy:
- `continuous_linear_equiv.is_open`, the openness of the set of continuous linear equivalences in the space of continuous linear maps, moves from `analysis.calculus.fderiv` to `analysis.normed_space.bounded_linear_maps`
- `continuous_inner`, the continuity of the inner product, moves from `analysis.inner_product_space.calculus` to `analysis.inner_product_space.basic`.
Previously discussed at
https://github.com/leanprover-community/mathlib/pull/4407#pullrequestreview-506198222

2021-09-28 03:23:06 4b5bf56
feat(measure_theory/integral/interval_integral): one more FTC-2 (#9409)

2021-09-28 01:02:53 8c5d93b
feat(analysis/special_functions/complex/log): `exp ⁻¹' s` is countable (#9410)
Also prove that the preimage of a countable set under an injective map
is countable.

2021-09-28 01:02:52 b21bc97
feat(analysis/special_functions): limits of `arg` and `log` at a real negative (#9406)
Also add a `can_lift ℂ ℝ` instance.

2021-09-27 22:35:23 8279510
feat(*): Clean up some misstated lemmas about algebra (#9417)
Similar to #9395 clean up a few lemmas whose statement doesn't match the name / docstring about algebraic things, all of these are duplicates of other lemmas, so look like copy paste errors.

2021-09-27 20:53:13 0d37fd6
feat(data/polynomial/algebra_map): aeval_tower (#9250)

2021-09-27 17:49:20 f181d81
chore(analysis/special_functions/exp_log): add some missing dot notation lemmas (#9405)

2021-09-27 17:49:19 9175158
refactor(analysis/convex/function): generalize lemmas about convexity/concavity of functions, prove concave Jensen (#9356)
`convex_on` and `concave_on` are currently only defined for real vector spaces. This generalizes ℝ to an arbitrary `ordered_semiring`. As a result, we now have the concave Jensen inequality for free.

2021-09-27 13:07:20 5dfb76f
feat(analysis/calculus/fderiv): generalize `const_smul` lemmas (#9399)

2021-09-27 13:07:18 954896a
feat(data/nat/choose/cast): Cast of binomial coefficients equals a Pochhammer polynomial (#9394)
This adds some glue between `nat.factorial`/`nat.asc_factorial`/`nat.desc_factorial` and `pochhammer` to provide some API to calculate binomial coefficients in a semiring. For example, `n.choose 2` as a real is `n * (n - 1)/2`.
I also move files as such:
* create `data.nat.choose.cast`
* create `data.nat.factorial.cast`
* rename `data.nat.factorial` to `data.nat.factorial.basic`

2021-09-27 13:07:17 9a30f8c
refactor(data/fin): drop `fin.cast_add_right` (#9371)
This was a duplicate of `fin.nat_add`. Also simplify some definitions of equivalences.

2021-09-27 10:29:19 850784c
chore(order/*): rename `strict_mono_{incr,decr}_on` to `strict_{mono,anti}_on` (#9401)
This was done as a direct find and replace

2021-09-27 10:29:16 1472799
chore(order): globally replace "antimono" with "antitone" (#9400)
This was done with the regex `(?<=\b|_)antimono(?=\b|_)`

2021-09-27 10:29:14 d1c68ef
docs(docker): adjust readme to reflect that the PR was merged (#9303)

2021-09-27 09:34:51 cafd6fb
chore(measure_theory/decomposition/lebesgue): rename `radon_nikodym_deriv` to `rn_deriv` (#9386)

2021-09-27 04:20:23 a4b92a3
refactor(analysis/special_functions/trigonometric): split file (#9340)
Another mammoth file, cut into several pieces.

2021-09-26 22:22:00 62abfe5
refactor(measure_theory/measure/hausdorff): move `dimH` to a new file, redefine (#9391)
* move definition of the Hausdorff dimension to a new file
  `topology.metric_space.hausdorff_dimension`;
* move `dimH` and related lemmas to the root namespace;
* rewrite the definition so that it no longer requires
  `[measurable_space X] [borel_space X]`; use `rw dimH_def` to get a
  version using `[measurable_space X]` from the environment;
* add `dimH_le`, `set.finite.dimH_zero` and `finset.dimH_zero`;
* make `dimH` irreducible.

2021-09-26 22:21:59 432271f
feat(algebra/pointwise): add smul_set_inter (#9374)
From #2819 .

2021-09-26 21:40:02 996783c
feat(topology/sheaves/stalks): Generalize from Type to algebraic categories (#9357)
Previously, basic lemmas about stalks like `germ_exist` and `section_ext` were only available for `Type`-valued (pre)sheaves. This PR generalizes these to (pre)sheaves valued in any concrete category where the forgetful functor preserves filtered colimits, which includes most algebraic categories like `Group` and `CommRing`. For the statements about stalks maps, we additionally assume that the forgetful functor reflects isomorphisms and preserves limits.

2021-09-26 12:40:21 865ad47
feat(algebra/module/pointwise_pi): add a file with lemmas on smul_pi (#9369)
Make a new file rather than add an import to either of `algebra.pointwise` or `algebra.module.pi`.
From #2819

2021-09-26 10:39:54 b3ca07f
docs(undergrad): Add trigonometric Weierstrass (#9393)

2021-09-26 10:39:53 4ae46db
feat(field_theory/is_alg_closed): more isomorphisms of algebraic closures (#9376)

2021-09-26 10:39:52 453f218
refactor(linear_algebra/charpoly): move linear_algebra/charpoly to linear_algebra/matrix/charpoly (#9368)
We move `linear_algebra/charpoly`to `linear_algebra/matrix/charpoly`, since the results there are for matrices. We also rename some lemmas in `linear_algebra/matrix/charpoly/coeff` to have the namespace `matrix`.

2021-09-26 10:39:51 a2517af
refactor(data/fin,*): redefine `insert_nth`, add lemmas (#9349)
### `data/fin`
* add `fin.succ_above_cast_lt`, `fin.succ_above_pred`,
  `fin.cast_lt_succ_above`, `fin.pred_succ_above`;
* add `fin.exists_succ_above_eq` and `fin.exists_succ_above_eq_iff`,
  use the latter to prove `fin.range_succ_above`;
* add `@[simp]` to `fin.succ_above_left_inj`;
* add `fin.cases_succ_above` induction principle, redefine
  `fin.insert_nth` to be `fin.cases_succ_above`;
* add lemmas about `fin.insert_nth` and some algebraic operations.
### `data/fintype/basic`
* add `finset.insert_compl_self`;
* add `fin.image_succ_above_univ`, `fin.image_succ_univ`,
  `fin.image_cast_succ` and use them to prove `fin.univ_succ`,
  `fin.univ_cast_succ`, and `fin.univ_succ_above` using `by simp`;
### `data/fintype/card`
* slightly golf the proof of `fin.prod_univ_succ_above`;
* use `@[to_additive]` to generate some proofs.
### `topology/*`
* prove continuity of `fin.insert_nth` in both arguments and add all
  the standard dot-notation `*.fin_insert_nth` lemmas (`*` is one of
  `filter.tendsto`, `continuous_at`, `continuous_within_at`,
  `continuous_on`, `continuous`).

2021-09-26 08:35:17 83470af
feat(algebra/order/ring): add odd_neg, odd_abs, generalize dvd/abs lemmas (#9362)

2021-09-26 07:23:13 def1c02
refactor(analysis/convex/function): generalize definition of `convex_on`/`concave_on` to allow any (ordered) scalars (#9389)
`convex_on` and `concave_on` are currently only defined for real vector spaces. This generalizes ℝ to an arbitrary `ordered_semiring` in the definition.

2021-09-26 02:41:05 793a598
chore(scripts): update nolints.txt (#9392)
I am happy to remove some nolints for you!

2021-09-25 17:07:10 9866526
feat(data/multiset/basic): add lemma that `multiset.map f` preserves `count` under certain assumptions on `f` (#9117)

2021-09-25 16:04:00 168806c
feat(measure_theory/integral/lebesgue): lintegral is strictly monotone under some conditions (#9373)

2021-09-25 15:05:39 eba2b2e
feat(measure_theory/function/l1_space): add integrability lemma for `measure.with_density` (#9367)

2021-09-25 09:01:16 6ea8168
refactor(topology/compact_open): use bundled continuous maps (#9351)

2021-09-25 06:48:09 51ad06e
refactor(analysis/inner_product_space/*): split big file (#9382)
This PR makes a new folder `analysis/inner_product_space/*` comprising several files splitting the old `analysis/normed_space/inner_product` (which had reached 2900 lines!).
https://leanprover.zulipchat.com/#narrow/stream/116395-maths

2021-09-25 06:48:08 55d8cd0
chore(scripts): update nolints.txt (#9381)
I am happy to remove some nolints for you!

2021-09-25 06:48:07 42d8243
feat(data/polynomial/eval): map_equiv (#9375)

2021-09-25 04:13:25 59b9ebb
feat(algebra/group/to_additive): customize the relevant argument (#9138)
`@[to_additive]` now automatically checks for each declaration what the first argument is with a multiplicative structure on it. 
This is now the argument that is tested when executing later occurrences of `@[to_additive]` for a fixed type to decide whether this declaration should be translated or not.

2021-09-25 01:43:26 64b794a
chore(analysis/complex/basic): rename `complex/normed_space` (#9366)
This matches `module.complex_to_real`

2021-09-24 21:40:17 b0cd1f9
chore(algebra/group): move is_unit.inv lemmas (#9364)

2021-09-24 21:40:16 c42aaa3
chore(data/pi): add missing `pi.{inv,neg}_def` (#9361)

2021-09-24 21:40:15 8ff756c
feat(group_theory/*/pointwise): Copy set lemmas about pointwise actions to subgroups and submonoids (#9359)
This is pretty much just a copy-and-paste job. At least the proofs themselves don't need copying. The set lemmas being copied here are:
https://github.com/leanprover-community/mathlib/blob/a9cd8c259d59b0bdbe931a6f8e6084f800bd7162/src/algebra/pointwise.lean#L607-L680
I skipped the `preimage_smul` lemma for now because I couldn't think of a useful statement using `map`.

2021-09-24 19:49:10 18f06ec
chore(measure_theory/integral/interval_integral): generalize `integral_smul` (#9355)
Make sure that it works for scalar multiplication by a complex number.

2021-09-24 19:49:09 7cb7246
chore(linear_algebra/basic): add `linear_map.neg_comp`, generalize `linear_map.{sub,smul}_comp` (#9335)
`sub_comp` had unnecessary requirements that the codomain of the right map be an additive group, while `smul_comp` did not support compatible actions.
This also golfs the proofs of all the `comp_*` lemmas to eliminate `simp`.
`smul_comp` and `comp_smul` are also both promoted to instances.

2021-09-24 19:49:07 c794c5c
chore(linear_algebra/basic): split out quotients and isomorphism theorems (#9332)
`linear_algebra.basic` had become a very large file; I think too unwieldy to even be able to edit.
Fortunately there are some natural splits on content. I moved everything about quotients out to `linear_algebra.quotient`. Happily many files in `linear_algebra/` don't even need this, so we also get some significant import reductions.
I've also moved Noether's three isomorphism theorems for submodules to their own file.

2021-09-24 19:49:06 6f2d1ba
feat(data/dfinsupp): add submodule.bsupr_eq_range_dfinsupp_lsum (#9202)
Also a version for `add_submonoid`. Unfortunately the proofs are almost identical, but that's consistent with the surrounding bits of the file anyway.
The key result is a dfinsupp version of the lemma in #8246,
```lean
x ∈ (⨆ i (H : p i), f i) ↔ ∃ v : ι →₀ M, (∀ i, v i ∈ f i) ∧ ∑ i in v.support, v i = x ∧ (∀ i, ¬ p i → v i = 0) :=
```
as
```lean
x ∈ (⨆ i (h : p i), S i) ↔ ∃ f : Π₀ i, S i, dfinsupp.lsum ℕ (λ i, (S i).subtype) (f.filter p) = x
```

2021-09-24 13:55:52 981f8ba
chore(*): remove some `assume`s (#9365)

2021-09-24 12:53:07 e14cf58
feat(measure_theory/function/conditional_expectation): define the conditional expectation of a function, prove the equality of integrals (#9114)
This PR puts together the generalized Bochner integral construction of #8939 and the set function `condexp_ind` of #8920 to define the conditional expectation of a function.
The equality of integrals that defines the conditional expectation is proven in `set_integral_condexp`.

2021-09-24 11:04:41 0db6caf
feat(linear_algebra/affine_space/affine_map): add missing simp lemma `affine_map.homothety_apply_same` (#9360)

2021-09-24 11:04:40 48883dc
chore(algebra/basic): split out facts about lmul (#9300)

2021-09-24 11:04:39 854e5c6
refactor(measure_theory/measure/regular): add `inner_regular`, `outer_regular`, generalize (#9283)
### Regular measures
* add a non-class predicate `inner_regular` to prove some lemmas once, not twice;
* add TC `outer_regular`, drop primed lemmas;
* consistently use `≠ ∞`, `≠ 0` in the assumptions;
* drop some typeclass requirements.
### Other changes
* add a few lemmas about subtraction to `data.real.ennreal`;
* add `ennreal.add_lt_add_left`, `ennreal.add_lt_add_right`, and use them;

2021-09-24 11:04:38 a512db1
feat(linear_algebra/free_modules): add instances (#9223)
We add the instances `module.finite` and `module.free` on `(M →+ N)`, for `M` and `N` finite and free abelian groups.
We already have the more general version over any ring, for `(M →ₗ[R] N)`. (They are mathematically more general, but not for Lean.)

2021-09-24 08:36:36 6a9ba18
feat(measure_theory): `ι → α ≃ᵐ α` if `[unique ι]` (#9353)
* define versions of `equiv.fun_unique` for `order_iso` and
  `measurable_equiv`;
* use the latter to relate integrals over (sets in) `ι → α` and `α`,
  where `ι` is a type with an unique element.

2021-09-24 08:36:35 9e59e29
feat(category_theory/opposites): Add is_iso_op (#9319)

2021-09-24 08:36:34 9618d73
feat(algebra,group_theory): smul_(g)pow (#9311)
Rename `smul_pow` to `smul_pow'` to match `smul_mul'`. Instead provide the distributing lemma `smul_pow` where the power distributes onto the scalar as well. Provide the group action `smul_gpow` as well.

2021-09-24 06:10:23 a9cd8c2
feat(linear_algebra): redefine `linear_map` and `linear_equiv` to be semilinear (#9272)
This PR redefines `linear_map` and `linear_equiv` to be semilinear maps/equivs.
A semilinear map `f` is a map from an `R`-module to an `S`-module with a ring homomorphism `σ` between `R` and `S`, such that `f (c • x) = (σ c) • (f x)`. If we plug in the identity into `σ`, we get regular linear maps, and if we plug in the complex conjugate, we get conjugate linear maps. There are also other examples (e.g. Frobenius-linear maps) where this is useful which are covered by this general formulation. This was discussed on Zulip [here](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Semilinear.20maps), and a few preliminaries for this have already been merged.
The main issue that we had to overcome involved composition of semilinear maps, and `symm` for linear equivalences: having things like `σ₂₃.comp σ₁₂` in the types of semilinear maps creates major problems. For example, we want the composition of two conjugate-linear maps to be a regular linear map, not a `conj.comp conj`-linear map. To solve this issue, following a discussion from back in January, we created two typeclasses to make Lean infer the right ring hom. The first one is `[ring_hom_comp_triple σ₁₂ σ₂₃ σ₁₃]` which expresses the fact that `σ₂₃.comp σ₁₂ = σ₁₃`, and the second one is `[ring_hom_inv_pair σ₁₂ σ₂₁]` which states that `σ₁₂` and `σ₂₁` are inverses of each other. There is also `[ring_hom_surjective σ]`, which is a necessary assumption to generalize some basic lemmas (such as `submodule.map`). Note that we have introduced notation to ensure that regular linear maps can still be used as before, i.e. `M →ₗ[R] N` still works as before to mean a regular linear map.
The main changes are in `algebra/module/linear_map.lean`, `data/equiv/module.lean` and `linear_algebra/basic.lean` (and `algebra/ring/basic.lean` for the `ring_hom` typeclasses). The changes in other files fall into the following categories:
1. When defining a regular linear map directly using the structure (i.e. when specifying `to_fun`, `map_smul'` and so on), there is a `ring_hom.id` that shows up in `map_smul'`. This mostly involves dsimping it away.
2. Elaboration seems slightly more brittle, and it fails a little bit more often than before. For example, when `f` is a linear map and `g` is something that can be coerced to a linear map (say a linear equiv), one has to write `↑g` to make `f.comp ↑g` work, or sometimes even to add a type annotation. This also occurs when using `trans` twice (i.e. `e₁.trans (e₂.trans e₃)`). In those places, we use the notation defined in #8857 `∘ₗ` and `≪≫ₗ`. 
3. It seems to exacerbate the bug discussed [here](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/odd.20repeated.20type.20class.20search) for reasons that we don't understand all that well right now. It manifests itself in very slow calls to the tactic `ext`, and the quick fix is to manually use the right ext lemma.
4. The PR triggered a few timeouts in proofs that were already close to the edge. Those were sped up.
5. A few random other issues that didn't arise often enough to see a pattern.

2021-09-24 04:51:04 a7a9c91
feat(ring_theory/localization): Localizing at units is isomorphic to the ring (#9324)

2021-09-24 02:10:32 4a8fb6a
chore(linear_algebra): rename endomorphism multiplicative structures for consistency (#9336)
This renames:
* `module.endomorphism_semiring` → `module.End.semiring`
* `module.endomorphism_ring` → `module.End.ring`
* `module.endomorphism_algebra` → `module.End.algebra`
* `linear_map.module.End.division_ring` → `module.End.division_ring`
This brings the name in line with the names for `add_monoid.End`.
Since `module.End` is an abbreviation, it does not matter that the instances now use this instead of `M →ₗ[R] M`.

2021-09-24 01:29:26 dd519df
chore(*): linting (#9342)

2021-09-24 00:26:14 1a341fd
feat(algebra/*): Tensor product is the fibered coproduct in CommRing (#9338)

2021-09-24 00:26:13 2d17f52
feat(measure_theory/integral/*): integral over map (e : α ≃ᵐ β) μ  (#9316)

2021-09-24 00:26:12 18f0093
feat(measure_theory/measure/measure_space): add measure_Union_of_null_inter (#9307)
From #2819

2021-09-24 00:26:11 7e3256b
feat(ring_theory/derivation): helper lemma for custom `derivation_ext` lemmas (#9255)

2021-09-24 00:26:10 9b1f0bb
feat(topology/compact_open): convergence in the compact-open topology can be checked on compact sets (#9240)

2021-09-23 22:18:50 d2f7b24
feat(algebra/pointwise): more to_additive attributes for new lemmas (#9348)
Some of these lemmas introduced in #9226 I believe.
Spun off from #2819.

2021-09-23 22:18:49 88c79e5
feat(data/fintype/basic): embeddings of fintypes based on cardinal inequalities (#9346)
From https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/mapping.20a.20fintype.20into.20a.20finset/near/254493754, based on suggestions by @kmill  and @eric-wieser and @riccardobrasca.

2021-09-23 22:18:48 c950c45
feat(analysis/calculus/[f]deriv): derivative of pointwise composition/application of continuous linear maps (#9174)
This introduces useful analogs to the product rule when working with derivatives in spaces of continuous linear maps.

2021-09-23 21:18:45 54eb603
chore(analysis/normed_space/conformal_linear_map): delay dependence on inner products (#9293)

2021-09-23 19:20:02 14bcb2e
feat(measure_theory/measure/measure_space_def): some simple lemmas about measures and intersection (#9306)
From #2819

2021-09-23 19:20:01 ea59c90
feat(ring_theory/algebraic): is_algebraic_iff_not_injective (#9254)

2021-09-23 16:42:28 9e367ff
feat(linear_algebra/invariant_basis_number): strong_rank_condition_iff_succ (#9128)
We add `strong_rank_condition_iff_succ`: a ring satisfies the strong rank condition if and only if, for all `n : ℕ`, there are no
injective linear maps `(fin (n + 1) → R) →ₗ[R] (fin n → R)`. This will be used to prove that any commutative ring satisfies the strong rank condition.
The proof is simple and it uses the natural inclusion `R^n → R^m`, for `n ≤ m` (adding zeros at the end). We provide this in general as `extend_by_zero.linear_map : (ι → R) →ₗ[R] (η → R)` where `ι` and `η` are types endowed with a function `ι → η`.

2021-09-23 15:31:34 b365367
feat(README.md): add Oliver Nash (#9347)

2021-09-23 15:31:33 81f6e88
chore(analysis/calculus): add 2 simple lemmas (#9334)
Add `differentiable_on.has_fderiv_at` and `differentiable_on.has_deriv_at`.

2021-09-23 15:31:31 0243da3
feat(ereal): added useful lemmas (#9313)
Some small addition to the api for ereals.

2021-09-23 14:08:43 cc0d839
feat(measure_theory/measure/haar): cleanup, link with the is_haar_measure typeclass (#9244)
We show that the Haar measure constructed in `measure_theory/measure/haar` satisfies the `is_haar_measure` typeclass, and use the existence to show a few further properties of all Haar measures. Also weaken a little bit some assumptions in this file.

2021-09-23 08:15:13 602ad58
feat(measure_theory/integral): add a few lemmas (#9285)

2021-09-23 08:15:12 145c5ca
refactor(topology/category/Top/open_nhds): remove open_nhds.is_filtered (#9211)
Remove instance that can be inferred automatically.

2021-09-23 06:57:23 8a0d60e
chore(topology): rename compact_ball to is_compact_closed_ball (#9337)
The old name didn't follow the naming convention at all, which made it hard to discover.

2021-09-23 06:06:00 7615f83
chore(archive/100-theorems-list/42): typo (#9341)

2021-09-23 05:13:45 d238087
chore(data/real/pi/*): correct authorship data (#9314)
#9295 split `data.real.pi` into three files with the naive transferral of authorship and copyright data, this updates it to the actual authorship.

2021-09-23 04:17:39 a15ae9c
chore(measure_theory/measurable_space): add simps config for `measurable_equiv` (#9315)
Also add `@[ext]` lemma and some standard `equiv` lemmas.

2021-09-23 02:22:43 b563e5a
chore(scripts): update nolints.txt (#9339)
I am happy to remove some nolints for you!

2021-09-23 00:38:17 671b179
refactor(group_theory/subgroup,linear_algebra/basic): put pointwise actions in their own files to match submonoid (#9312)

2021-09-23 00:38:16 20981be
feat(linear_algebra/charpoly): add linear_map.charpoly (#9279)
We add `linear_map.charpoly`, the characteristic polynomial of an endomorphism of a finite free module, and a basic API.

2021-09-22 20:20:50 5b3b71a
chore(data/equiv): rename `bool_to_equiv_prod` to `bool_arrow_equiv_prod` (#9333)
Other changes:
* use an explicit definition;
* use `@[simps]`.

2021-09-22 16:35:13 6eb8d41
chore(ring_theory/dedekind_domain): speed up `dedekind_domain.lean` (#9232)
@eric-wieser [noticed that `dedekind_domain.lean`](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Timeouts.20in.20ring_theory.2Fdedekind_domain.2Elean.3A664.3A9) was compiling slowly and on the verge of a timeout. @kbuzzard, @sgouezel and I reworked some definitions to make everything elaborate much faster: `is_dedekind_domain_inv_iff`, `mul_inv_cancel_of_le_one` and `ideal.unique_factorization_monoid` went from over 10 seconds on my machine to less than 3 seconds. No other declaration in that file now takes over 2 seconds on my machine.
Apart from the three declarations getting new proofs, I also made the following changes:
 * The operations on `localization` (`has_add`, `has_mul`, `has_one`, `has_zero`, `has_neg`, `npow` and `localization.inv`) are now `@[irreducible]`
 * `fraction_ring.field` copies its field from `localization.comm_ring` for faster unification (less relevant after the previous change)
 * Added `fractional_ideal.map_mem_map` and `fractional_ideal.map_injective` to simplify the proof of `is_dedekind_domain_inv_iff`.
 * Split the proof of `matrix.exists_mul_vec_eq_zero_iff` into two parts to speed it up

2021-09-22 15:37:39 dc5a3db
feat(algebra/category): Forgetful functors preserve filtered colimits (#9101)
Shows that forgetful functors of various algebraic categories preserve filtered colimits.

2021-09-22 14:37:26 41414a3
chore(analysis/special_functions): typo in module doc (#9330)

2021-09-22 14:37:25 2b84c4c
feat(linear_algebra/matrix/basis): add matrix basis change formula (#9280)
We add `basis_to_matrix_mul_linear_map_to_matrix_mul_basis_to_matrix`, the formula for the change of basis.

2021-09-22 14:37:23 68dbf27
feat(number_theory): the class group of an integral closure is finite (#9059)
This is essentially the proof that the ring of integers of a global field has a finite class group, apart from filling in each hypothesis.

2021-09-22 12:11:46 a5d2dbc
chore(measure_theory/integral/set_integral): generalize, golf (#9328)
* rename `integrable_on_finite_union` to `integrable_on_finite_Union`;
* rename `integrable_on_finset_union` to `integrable_on_finset_Union`;
* add `integrable_on_fintype_Union`;
* generalize `tendsto_measure_Union` and `tendsto_measure_Inter from
  `s : ℕ → set α` to
  `[semilattice_sup ι] [encodable ι] {s : ι → set α}`;
* add `integral_diff`;
* generalize `integral_finset_bUnion`, `integral_fintype_Union` and
  `has_sum_integral_Union` to require appropriate `integrable_on`
  instead of `integrable`;
* golf some proofs.

2021-09-22 12:11:44 a994071
chore(data/complex/module): rename `complex.smul_coe` to `real_smul` (#9326)
* the name was misleading b/c there is no `coe` in the LHS;
* add `complex.coe_smul`: given `x : ℝ` and `y : E`, we have
  `(x : ℂ) • y = x • y`;
* add `normed_space.complex_to_real`.

2021-09-22 12:11:43 7e350c2
feat(category_theory/*): Fully faithful functors induces equivalence (#9322)
Needed for AffineSchemes ≌ CommRingᵒᵖ.

2021-09-22 12:11:42 15730e8
chore(analysis/convex): trivial generalizations of ℝ (#9298)

2021-09-22 12:11:41 eb3d600
feat(data/{list,multiset}): add `can_lift` instances (#9262)
* add `can_lift` instances for `set`, `list`, `multiset`, and `finset`;
* use them in `submonoid.{list,multiset}_prod_mem`;
* more `to_additive` attrs in `group_theory.submonoid.membership`.

2021-09-22 10:01:07 c9638b9
chore(measure_theory): add 2 lemmas (#9329)

2021-09-22 10:01:05 6f2cbde
chore(order/lattice): tidy up pi instances (#9305)
These were previously defined in the wrong file, and the lemmas were missing the `pi` prefix that is present on `pi.add_apply` etc.
This also removes the instance names as they are autogenerated correctly.
Finally, this adds new `top_def`, `bot_def`, `sup_def`, and `inf_def` lemmas, which are useful for when wanting to rewrite under the lambda. We already have `zero_def`, `add_def`, etc.

2021-09-22 10:01:04 f95f216
feat(linear_algebra/std_basis): add matrix.std_basis_eq_std_basis_matrix (#9216)
As suggested in #9072 by @eric-wieser, we modify `matrix.std_basis` to use the more familiar `n × m` as the index of the basis and we prove that the `(i,j)`-th element of this basis is `matrix.std_basis_matrix i j 1`.

2021-09-22 07:37:28 5b55a86
chore(analysis/calculate/fderiv): move results about analytic functions to a new file (#9296)
These are not necessary for many of the downstream files, so we can speed up compilation a bit by parallelising these.

2021-09-22 07:37:27 6d86622
chore(*): removing unneeded imports (#9278)

2021-09-22 07:37:21 b77aa3a
feat(linear_algebra/affine_space/affine_subspace): prove that a set whose affine span is top cannot be empty. (#9113)
The lemma `finset.card_sdiff_add_card` is unrelated but I've been meaning to add it
and now seemed like a good time since I'm touching `data/finset/basic.lean` anyway.

2021-09-22 06:45:10 f59dbf2
chore(data/complex/exponential): add `abs_exp`, golf (#9327)

2021-09-22 02:48:40 7112730
feat(set_theory/cardinal_ordinal): mul_le_max and others (#9269)

2021-09-22 02:48:39 9c34e80
chore(linear_algebra/basic): generalize `add_monoid_hom_lequiv_{nat,int}` (#9233)

2021-09-22 01:01:52 5625ec0
refactor(algebra/module/linear_map): Put linear equivalences in their own file (#9301)
This is consistent with how we have ring homs and ring equivs in separate files.
By having each of these files smaller than the original, we can split `linear_algebra/basic` more effectively between them.

2021-09-21 17:41:00 e0d568e
feat(analysis/normed_space/basic): the rescaling of a ball is a ball (#9297)
Also rename all statements with `ball_0` to `ball_zero` for coherence.

2021-09-21 15:54:06 56a6ed6
chore(algebra/algebra/basic): remove a duplicate instance (#9320)
`algebra.linear_map.module'` is just a special case of `linear_map.module'`.
`by apply_instance` finds this instance provided it's used after the definition of `is_scalar_tower.to_smul_comm_class`.

2021-09-21 15:54:04 420f11a
feat(measure_theory/decomposition/radon_nikodym): Radon-Nikodym and Lebesgue decomposition for signed measures (#9065)
This PR proves the Radon-Nikodym theorem for signed measures.

2021-09-21 14:54:34 c4fbb6f
refactor(data/real/ereal): replace `.cases` with `.rec` (#9321)
This provides a nicer spelling than the pile of `rfl`s we use with the old `ereal.cases`, as follows:
```diff
-rcases x.cases with rfl|⟨y, rfl⟩|rfl,
+induction x using ereal.rec with y,
```
As a bonus, the subgoals now end up with names matching the hypotheses.

2021-09-21 11:46:50 30617c7
chore(group_theory/order_of_element): bump up (#9318)
there may be other lemmas that can similarly be moved around here

2021-09-21 09:53:10 b5a6422
feat(data/finset): add lemmas (#9209)
* add `finset.image_id'`, a version of `finset.image_id` using `λ x, x` instead of `id`;
* add some lemmas about `finset.bUnion`, `finset.sup`, and `finset.sup'`.

2021-09-21 08:03:51 524ded6
refactor(data/polynomial/{coeff,monomial}): move smul_eq_C_mul (#9287)
This moves `smul_eq_C_mul` from `monomial.lean` into `coeff.lean` so that the import on `monomial.lean` can be changed from `data.polynomial.coeff` to `data.polynomial.basic`. This should shave about 10 seconds off the [longest pole for parallelized mathlib compilation](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/The.20long.20pole.20in.20mathlib/near/253932389).

2021-09-21 08:03:50 4cee743
feat(measure_theory/measure/vector_measure): add `mutually_singular.neg` (#9282)

2021-09-21 08:03:48 78340e3
feat(topology/continuous_function/basic): gluing lemmas (#9239)

2021-09-21 06:38:58 49e0bcf
feat(topology/bases): continuous_of_basis_is_open_preimage (#9281)
Check continuity on a basis.

2021-09-21 02:39:51 13780bc
chore(scripts): update nolints.txt (#9317)
I am happy to remove some nolints for you!

2021-09-20 20:43:00 46ff449
feat(data/vector/basic): lemmas, and linting (#9260)

2021-09-20 18:11:00 175afa8
refactor(analysis/convex/{extreme, exposed}): generalize `is_extreme` and `is_exposed` to semimodules (#9264)
`is_extreme` and `is_exposed` are currently only defined in real vector spaces. This generalizes ℝ to arbitrary `ordered_semiring`s in definitions and abstracts it away to the correct generality in lemmas. It also generalizes the space from `add_comm_group` to `add_comm_monoid`.

2021-09-20 16:39:36 ae726e1
chore(ring_theory/polynomial/tower): remove a duplicate instance (#9302)
`apply_instance` already finds a much more general statement of this instance.

2021-09-20 16:39:35 c2d8a58
feat(algebra/algebra/basic): lemmas about alg_hom and scalar towers (#9249)

2021-09-20 14:51:32 866294d
fix(data/dfinsupp): fix nat- and int- module diamonds (#9299)
This also defines `has_sub` separately in case it turns out to help with unification

2021-09-20 13:42:14 3703ab2
chore(data/real/pi): split into three files (#9295)
This is the last file to finish compilation in mathlib, and it naturally splits into three chunks, two of which have simpler dependencies.

2021-09-20 13:42:12 8c96c54
feat(ci): Download all possible caches in gitpod (#9286)
This requests mathlibtools 1.1.0

2021-09-20 13:42:11 72a8cd6
feat(field_theory/algebraic_closure): any two algebraic closures are isomorphic (#9231)

2021-09-20 11:48:30 cb33f68
feat(docker): pin version for better reproducibility (#9304)
Also hopefully force docker rebuild for gitpod

2021-09-20 11:48:29 4df2a1b
feat(topology/instances/ennreal): sum of nonzero constants is infinity (#9294)

2021-09-20 11:48:28 e41e9bc
chore(group_theory/submonoid/operations): split a file (#9292)

2021-09-20 11:48:27 7389a6b
feat(linear_algebra/matrix/to_lin): simp lemmas for to_matrix and algebra (#9267)

2021-09-20 11:48:26 ba28234
feat(algebra/pointwise): more lemmas about pointwise actions (#9226)
This:
* Primes the existing lemmas about `group_with_zero` and adds their group counterparts
* Adds:
  * `smul_mem_smul_set_iff`
  * `set_smul_subset_set_smul_iff`
  * `set_smul_subset_iff`
  * `subset_set_smul_iff`
* Generalizes `zero_smul_set` to take weaker typeclasses

2021-09-20 10:37:41 e29dfc1
chore(analysis/normed_space/finite_dimensional): restructure imports (#9289)
Delays importing `linear_algebra.finite_dimensional` in the `analysis/normed_space/` directory until it is really needed.
This reduces the ["long pole"](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/The.20long.20pole.20in.20mathlib) of mathlib compilation by 3 minutes (out of 55).

2021-09-20 08:13:28 d93c6a8
feat(data/vector/basic): induction principles (#9261)

2021-09-20 04:23:41 238d792
chore(scripts): update nolints.txt (#9290)
I am happy to remove some nolints for you!

2021-09-20 04:23:40 035bd24
refactor(field_theory/algebraic_closure): Move construction of algebraic closure and lemmas about alg closed fields into seperate files. (#9265)

2021-09-20 04:23:39 acb10a5
feat(linear_algebra/{multilinear,alternating): add of_subsingleton (#9196)
This was refactored from the `koszul_cx` branch, something I mentioned doing in [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/two.20decidable_eq.20instances.20on.20.28fin.201.29.20in.20mathlib.20.3A-.28/near/225596630).
The original version was:
```lean
def multilinear_map.of_subsingleton (ι : Type v) [subsingleton ι] [inhabited ι] {N : Type u}
  [add_comm_group N] [module R N] (f : M →ₗ[R] N) : multilinear_map R (λ (i : ι), M) N :=
{ to_fun := λ x, f (x $ default ι),
  map_add' := λ m i x y, by rw subsingleton.elim i (default ι); simp only
    [function.update_same, f.map_add],
  map_smul' := λ m i r x, by rw subsingleton.elim i (default ι); simp only
    [function.update_same, f.map_smul], }
```
but I decided to remove the `f : M →ₗ[R] N` argument as it can be added later with `(of_subsingleton R M i).comp_linear_map f`.

2021-09-20 04:23:38 976b261
feat(data/{multiset,finset}/basic): card_erase_eq_ite (#9185)
A generic theorem about the cardinality of a `finset` or `multiset` with an element erased.

2021-09-20 01:59:40 f37f57d
feat(order/lattice): `sup`/`inf`/`max`/`min` of mono functions (#9284)
* add `monotone.sup`, `monotone.inf`, `monotone.min`, and
  `monotone.max`;
* add `prod.le_def` and `prod.mk_le_mk`.

2021-09-19 21:03:01 4887f80
chore(measure_theory/function/simple_func_dense): distance to `approx_on` is antitone (#9271)

2021-09-19 20:10:14 f7135f1
feat(group_theory/p_group): `is_p_group` is preserved by `subgroup.comap` (#9277)
If `H` is a p-subgroup, then `H.comap f` is a p-subgroup, assuming that `f` is injective.

2021-09-19 17:47:09 965e457
feat(measure_theory/measure/lebesgue): a linear map rescales Lebesgue by the inverse of its determinant (#9195)
Also supporting material to be able to apply Fubini in `ι → ℝ` by separating some coordinates.

2021-09-19 16:07:52 180c758
feat(group_theory/p_group): `is_p_group` is preserved by `subgroup.map` (#9276)
If `H` is a p-subgroup, then `H.map f` is a p-subgroup.

2021-09-19 13:44:55 55a2c1a
refactor(set_theory/{cardinal,ordinal}): swap the order of universes in `lift` (#9273)
Swap the order of universe arguments in `cardinal.lift` and `ordinal.lift`. This way (a) they match the order of arguments in `ulift`; (b) usually Lean can deduce the second universe level from the argument.

2021-09-19 13:44:53 8df86df
feat(order/ideal, data/set/lattice): when order ideals are a complete lattice (#9084)
- Added the `ideal_Inter_nonempty` property, which states that the intersection of all ideals in the lattice is nonempty.
- Proved that when a preorder has the above property and is a `semilattice_sup`, its ideals are a complete lattice
- Added some lemmas about empty intersections in set/lattice, akin to #9033

2021-09-19 11:34:13 075ff37
refactor(algebra/order*): move files about ordered algebraic structures into subfolder (#9024)
There were many files named `algebra/order_*.lean`. There are also `algebra.{module,algebra}.ordered`. The latter are Prop-valued mixins. This refactor moves the data typeclasses into their own subfolder. That should help facilitate organizing further refactoring to provide the full gamut of the order x algebra hierarchy.

2021-09-19 10:06:14 383e05a
feat(measure_theory/integral/lebesgue): add set version of `lintegral_with_density_eq_lintegral_mul` (#9270)
I also made `measurable_space α` an implicit argument whenever `μ : measure α` is explicit.

2021-09-19 07:45:41 25e67dd
feat(measure_theory/function/lp_space): add mem_Lp_indicator_iff_restrict (#9221)
We have an equivalent lemma for `integrable`. Here it is generalized to `mem_ℒp`.

2021-09-19 06:12:34 f2c162c
feat(data/dfinsupp): more lemmas about erase, filter, and negation (#9248)

2021-09-19 02:28:42 cbf8788
chore(scripts): update nolints.txt (#9275)
I am happy to remove some nolints for you!

2021-09-18 23:07:48 fbc9e5e
feat(measure_theory/function/conditional_expectation): condexp_ind is ae_measurable' (#9263)

2021-09-18 23:07:47 6b96736
feat(measure_theory/integral/set_to_L1): image of an indicator by set_to_fun (and related functions) (#9205)
We show the following equality, as well as versions of it for other intermediate `set_to_*` functions:
```
set_to_fun (hT : dominated_fin_meas_additive μ T C) (s.indicator (λ _, x)) = T s x
```

2021-09-18 23:07:46 c1d7ee5
feat(measure_theory/measure/finite_measure_weak_convergence): definitions of types of finite_measures and probability_measures, to be equipped with the topologies of weak convergence (#8904)
feat(measure_theory/measure/finite_measure_weak_convergence): definitions of types of finite_measures and probability_measures, to be equipped with the topologies of weak convergence
This PR defines the types `probability_measure` and `finite_measure`. The next step is to give a topology instance on these types.

2021-09-18 20:45:54 429aaa3
feat(order/bounded_lattice): coe_unbot simp lemma (#9258)

2021-09-18 20:45:53 811c87a
chore(order/galois_connection): golf (#9236)
* add `galois_insertion.is_lub_of_u_image`,
  `galois_insertion.is_glb_of_u_image`,
  `galois_coinsertion.is_glb_of_l_image`, and
  `galois_coinsertion.is_lub_of_l_image`;
* get some proofs in `lift_*` from `order_dual` instances;
* this changes definitional equalities for `Inf` and `Sup` so that we can reuse the same `Inf`/`Sup` for a `conditionally_complete_lattice` later.

2021-09-18 19:04:24 e4bf496
feat(data/set/finite): simple infiniteness lemmas (#9242)

2021-09-18 19:04:23 255862e
refactor(linear_algebra/char_poly/basic): rename char_poly to matrix.charpoly (#9230)
We rename `char_matrix` to `charmatrix` and `char_poly` to `matrix.charpoly`, so `M.charpoly` becomes available (and everything is coherent with `minpoly`).

2021-09-18 16:39:30 e757936
chore(data/real/ennreal, measure_theory/): use `≠ ∞` and `≠ 0` in assumptions (#9219)

2021-09-18 15:14:00 33db1c7
chore(data/mv_polynomial/basic): add ring_hom_ext' and move ext attribute to ring_hom_ext' (#9235)

2021-09-18 13:22:05 10a6201
feat(set_theory/ordinal): add conditionally_complete_linear_order_bot instance (#9266)
Currently, it is not possible to talk about `Inf s` when `s` is a set of ordinals. This is fixed by this PR.

2021-09-18 12:00:20 d6b4cd7
chore(ring_theory/adjoin/basic): split (#9257)
I want to use basic facts about `adjoin` in `polynomial.basic`.

2021-09-18 10:03:09 0ee36a3
feat(order/conditionally_complete_lattice): add lemmas (#9237)
* add lemmas about `conditionally_complete_linear_order_bot`; in this
  case we can drop some `nonempty` assumptions;
* add lemmas for the case of `[is_well_order α (<)]`; in this case
  infimum of a nonempty set is the least element of this set.

2021-09-18 06:53:44 36751e4
chore(algebra/algebra/tower): golf `algebra.lsmul` (#9253)

2021-09-18 06:53:43 41e152f
fix(algebra/algebra/tower): remove `subalgebra.res` which duplicates `subalgebra.restrict_scalars` (#9251)
We use the name `restrict_scalars` everywhere else, so I kept that one instead of `res`.
`res` was here first, but the duplicate was added by #7949 presumably because the `res` name wasn't discoverable.

2021-09-18 06:53:42 5e58247
feat(algebra/ordered_pi): ordered_comm_monoid and canonically_ordered_monoid instances (#9194)
Presumably these instances were missing because they were not actually constructible until we fixed the definition of `ordered_monoid` in #8877!

2021-09-18 02:27:19 0bdd47f
feat(data/list/basic): add lemmas about list.take list.drop (#9245)
I added these lemmas about list.take and list.drop, which are present in Coq for example. Note that they are not entirely equivalent to list.take_append and list.drop_append because they also handle the case when `n ≤ l₁.length`

2021-09-18 02:27:17 a8f2bab
chore(set_theory/cardinal): use notation `#`, add notation `ω` (#9217)
The only API change: rename `cardinal.eq_congr` to `cardinal.mk_congr`.

2021-09-18 00:17:26 ec9d520
feat(order/filter,*): lemmas about `filter.ne_bot` (#9234)
* add `prod.range_fst`, `prod.range_snd`, `set.range_eval`;
* add `function.surjective_eval`;
* add `filter.*_ne_bot` and/or `filter.*_ne_bot_iff` lemmas for `sup`, `supr`,
  `comap prod.fst _`, `comap prod.snd _`, `coprod`, `Coprod`.

2021-09-17 20:09:59 a80e1d7
chore(topology/metric_space): split `iff` into 2 lemmas (#9238)
One of the implications of `compact_iff_closed_bounded` doesn't need `t2_space`. Also add `compact_space_iff_bounded_univ`.

2021-09-17 20:09:58 c42a9ad
chore(data/finsupp/basic): lemmas about sub and neg on filter and erase (#9228)

2021-09-17 20:09:57 54217b6
chore(data/list): make separate lexicographic file (#9193)
A minor effort to reduce the `data.list.basic` monolithic, today inspired by yet again being annoyed that I couldn't find something.

2021-09-17 20:09:56 696db1e
feat(analysis/convex/topology): add lemma `convex.subset_interior_image_homothety_of_one_lt` (#9044)

2021-09-17 16:23:57 58f26a0
chore(order/bounded_lattice): trivial generalizations (#9246)

2021-09-17 14:39:08 dfd4bf5
split(analysis/convex/function): move `convex_on` and `concave_on` to their own file (#9247)
Convex/concave functions now earn their own file. This cuts down `analysis.convex.basic` by 500 lines.

2021-09-17 12:18:09 5f140ab
chore(*): rename `coe_fn_inj` to `coe_fn_injective` (#9241)
This also removes some comments about it not being possible to use `function.injective`, since now we use it without problem.

2021-09-17 09:52:16 5b75f5a
chore(algebra/group/basic): add `ite_one_mul` and `ite_zero_add` (#9227)
We already had the versions with the arguments in the other order.
Follows on from #3217

2021-09-17 09:00:53 18d031d
fix(ring_theory/dedekind_domain): Speed up ideal.unique_factorization_monoid (#9243)
The old proof was causing timeouts in CI.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Timeouts.20in.20ring_theory.2Fdedekind_domain.2Elean.3A664.3A9/near/253579691)

2021-09-17 06:22:56 15bf066
feat(measure_theory/function/l1_space): add integrability lemmas for composition with `to_real` (#9199)

2021-09-16 19:59:45 59cda6d
feat(measure_theory/group/basic): introduce a class is_haar_measure, and its basic properties (#9142)
We have in mathlib a construction of Haar measures. But there are many measures which do not come from this construction, and are still Haar measures (Lebesgue measure on a vector space, Hausdorff measure of the right dimension, for instance). We introduce a new class `is_haar_measure` (and its additive analogue) to be able to express facts simultaneously for all these measures, and prove their basic properties.

2021-09-16 16:02:06 76f87b7
feat(group_theory/group_action/basic): Action on an orbit (#9220)
A `mul_action` restricts to a `mul_action` on an orbit.

2021-09-16 13:26:32 ca38357
feat(group_theory/group_action): add `distrib_mul_action.to_add_aut` and `mul_distrib_mul_action.to_mul_aut` (#9224)
These can be used to golf the existing `mul_aut_arrow`.
This also moves some definitions out of `algebra/group_ring_action.lean` into a more appropriate file.

2021-09-16 13:26:31 17a473e
feat(group_theory/p_group): Sup of p-subgroups is a p-subgroup (#9222)
The sup of p-subgroups is a p-subgroup, assuming normality.

2021-09-16 13:26:30 b0d961b
chore(algebra/indicator_function): add `finset.sum_indicator_eq_sum_filter` (#9208)

2021-09-16 13:26:29 fdfe782
feat(combinatorics/derangements/*): add lemmas about counting derangements (#9089)
This defines `card_derangements` as the cardinality of the set of derangements of a fintype, and `num_derangements` as a function from N to N, and proves their equality, along with some other lemmas.
Context: PR #7526 grew too large and had to be split in half. The first half retained the original PR ID, and this is the second half. This adds back the finite.lean and exponential.lean files. Also, added entries back to 100.yaml.

2021-09-16 13:26:27 89b0cfb
refactor(analysis/convex/basic): generalize convexity to vector spaces (#9058)
`convex` and `convex_hull` are currently only defined in real vector spaces. This generalizes ℝ to arbitrary ordered_semirings in definitions and abstracts it away to the correct generality in lemmas. It also generalizes the space from `add_comm_group` to `add_comm_monoid` where possible.

2021-09-16 11:34:14 f536b4f
fix(group_theory/submonoid/operations): add missing `to_additive` tags on galois lemmas (#9225)

2021-09-16 11:34:13 8a1fc68
feat(measure_theory/measure/with_density_vector_measure): `with_densityᵥ` of a real function equals the density of the pos part - density of the neg part (#9215)

2021-09-16 11:34:12 232ff44
feat(measure_theory/measure/measure_space): add mutually singular lemmas (#9213)

2021-09-16 11:34:11 bc7cde8
feat(data/dfinsupp): add `filter_ne_eq_erase` (#9182)

2021-09-16 11:34:09 86d20e5
feat(data/dfinsupp): add arithmetic lemmas about filter (#9175)
This adds `dfinsupp.filter_{zero,add,neg,sub,smul}` and `dfinsupp.subtype_domain_smul`, along with some bundled maps.
This also cleans up some variable explicitness.

2021-09-16 10:37:03 b759384
feat(field_theory/algebraic_closure): map from algebraic extensions into the algebraic closure (#9110)

2021-09-16 05:50:06 18dc1a1
feat(group_theory/p_group): p-groups are preserved by isomorphisms (#9203)
Adds three lemmas about transporting `is_p_group` across injective, surjective, and bijective homomorphisms.

2021-09-15 23:41:53 519b4e9
chore(algebra/big_operators): move, golf (#9218)
move 2 lemmas up and golf the proof of `finset.prod_subset`.

2021-09-15 18:42:11 2b589ca
feat(group_theory/subgroup): Generalize `comap_sup_eq` (#9212)
The lemma `comap_sup_eq` can be generalized from assuming `function.surjective f` to assuming `≤ f.range`.

2021-09-15 18:42:10 8185637
refactor(data/real/nnreal): use `has_ordered_sub` (#9167)
* provide a `has_ordered_sub` instance for `nnreal`;
* drop most lemmas about subtraction in favor of lemmas from `algebra/ordered_sub`;
* add `mul_sub'` and `sub_mul'`;
* generalize some lemmas about `has_ordered_sub` to `has_add`;
* add `add_hom.mul_left` and `add_hom.mul_right`.

2021-09-15 18:42:09 a4341f9
refactor(data/set/finite): use a custom inductive type (#9164)
Currently Lean treats local assumptions `h : finite s` as local instances, so one needs to do something like
```lean
  unfreezingI { lift s to finset α using hs },
```
I change the definition of `set.finite` to an inductive predicate that replicates the definition of `nonempty` and remove `unfreezingI` here and there. Equivalence to the old definition is given by `set.finite_def`.

2021-09-15 18:42:07 244285c
feat(linear_algebra/free_module): add instances (#9087)
We add some `module.finite` instances. These are in the `linear_algebra/free_module.lean` files since they concern free modules.
From LTE

2021-09-15 18:42:06 bab7e99
docs(data/part): add module docstring (#8966)

2021-09-15 17:09:28 b63c560
feat(data/set/Union_lift): lift functions to Unions of sets (#9019)

2021-09-15 15:40:39 2597264
chore(ring_theory/ideal/operations): golf a definition using new actions (#9152)
This action can be expressed more directly in terms of other actions, without the unfolded definition changing.

2021-09-15 13:22:40 3a6340c
chore(data/dfinsupp): golf using `quotient.map` instead of `quotient.lift_on` (#9176)

2021-09-15 13:22:39 f8d8171
refactor(logic/relator): turn *_unique and *_total into defs, not classes (#9135)
We had (almost) no instances for these classes and (almost) no lemmas taking these assumptions as TC arguments.

2021-09-15 12:38:53 f1bf7b8
feat(category_theory/filtered): Special support for bowtie and tulip diagrams (#9099)
Add special support for two kinds of diagram categories: The "bowtie" and the "tulip". These are convenient when proving that forgetful functors of algebraic categories preserve filtered colimits.

2021-09-15 10:33:05 bb38ce9
feat(ring_theory/artinian): is_nilpotent_jacobson (#9153)

2021-09-15 07:15:07 85dc9f3
refactor(measure_theory/measure): redefine `measure_theory.sigma_finite` (#9207)
* don't require in the definition that covering sets are measurable;
* use `to_measurable` in `sigma_finite.out` to get measurable sets.

2021-09-15 06:12:44 7492aa6
refactor(measure_theory/integral/lebesgue): golf a proof (#9206)
* add `exists_pos_tsum_mul_lt_of_encodable`;
* add `measure.spanning_sets_index` and lemmas about this definition;
* replace the proof of `exists_integrable_pos_of_sigma_finite` with a simpler one.

2021-09-15 02:43:59 591ff3a
feat(group_theory/subgroup): Subgroup of subgroup is isomorphic to itself (#9204)
If `H ≤ K`, then `H` as a subgroup of `K` is isomorphic to `H`.

2021-09-15 02:43:58 463089d
feat(order/rel_classes): A total relation is trichotomous (#9181)

2021-09-15 02:43:57 23eac53
chore(*): upgrade to Lean 3.33.0c (#9165)
My main goal is to fix various diamonds with `sup`/`inf`, see leanprover-community/lean#609. I use lean-master + 1 fixup commit leanprover-community/lean#615.

2021-09-15 00:53:15 82dced6
feat(analysis/normed_space/finite_dimension): Riesz theorem on compact unit ball and finite dimension (#9147)

2021-09-14 20:59:54 27b0a76
feat(ring_theory/adjoin): adjoin_range_eq_range_aeval (#9179)

2021-09-14 18:16:26 bf0b5df
chore(combinatorics/simple_graph): fixup docs (#9161)

2021-09-14 17:25:52 ec118dd
ci(.github/workflows/*): lint PR style on GitHub runners (#9198)
Since the style linter usually finishes in just a few seconds, we can move it off our self-hosted runners to give PR authors quicker feedback when the build queue is long.
We do this only for PR runs, so that `bors` won't be held up in case the GitHub runners are backed up for whatever reason.

2021-09-14 15:08:00 6a6b0a5
chore(order/pilex): use `*_order_of_*TO` from `order.rel_classes` (#9129)
This changes definitional equality for `≤` on `pilex` from
`x < y ∨ x = y` to `x = y ∨ x < y`.

2021-09-14 13:37:53 91f053e
chore(*): simplify `data.real.cau_seq` import (#9197)
Some files were still importing `data.real.cau_seq` when their dependency really was on `is_absolute_value`, which has been moved to `algebra.absolute_value`. Hopefully simplifying the dependency tree slightly reduces build complexity.

2021-09-14 12:09:47 e489ca1
feat(group_theory/p_group): Intersection with p-subgroup is a p-subgroup (#9189)
Two lemmas stating that the intersection with a p-subgroup is a p-subgroup.
Not sure which one should be called left and which one should be called right though :)

2021-09-14 12:09:45 eb20390
refactor(group_theory/p_group): Move lemmas to is_p_group namespace (#9188)
Moves `card_modeq_card_fixed_points`, `nonempty_fixed_point_of_prime_not_dvd_card`, and `exists_fixed_point_of_prime_dvd_card_of_fixed_point` to the `is_p_group` namespace. I think this simplifies things, since they already had explicit `hG : is_p_group G` hypotheses anyway.

2021-09-14 12:09:44 6309c81
chore(ring_theory/adjoin) elab_as_eliminator attribute (#9168)

2021-09-14 12:09:43 251e418
feat(ring_theory/nakayama): Alternative Statements of Nakayama's Lemma (#9150)

2021-09-14 12:09:42 19949a0
feat(linear_algebra/free_module): add instances (#9072)
From LTE.
We prove that `M →ₗ[R] N` is free if both `M` and `N` are finite and free. This needs the quite long result that for a finite and free module any basis is finite.
Co-authored with @jcommelin

2021-09-14 12:09:41 2a3cd41
feat(group_theory/free_product): equivalence with reduced words (#7395)
We show that each element of the free product is represented by a unique reduced word.

2021-09-14 10:41:25 7deb32c
chore(data/fintype/intervals): finiteness of `Ioo`, `Ioc`, and `Icc` over `ℕ` (#9096)
We already have the analogous lemmas and instance for `ℤ`.

2021-09-14 08:41:19 2d57545
feat(measure_theory/measure/integral): integral over an encodable type (#9191)

2021-09-14 08:41:17 790e98f
feat(linear_algebra/matrix/is_diag): add a file (#9010)

2021-09-14 06:36:12 9af1db3
feat(measure_theory/measure/measure_space): The pushfoward measure of a finite measure is a finite measure (#9186)

2021-09-14 06:36:11 ceab0e7
chore(order/bounded_lattice): make `bot_lt_some` and `some_lt_none` consistent (#9180)
`with_bot.bot_lt_some` gets renamed to `with_bot.none_lt_some` and now syntactically applies to `none : with_bot α` (`with_bot.bot_le_coe` already applies to `⊥` and `↑a`).
`with_top.some_lt_none` now takes `a` explicit.

2021-09-14 06:36:10 ef78b32
feat(measure_theory/function/lp_space): add lemmas about snorm and mem_Lp (#9146)
Also move lemma `snorm_add_le` (and related others) out of the borel space section, since `opens_measurable_space` is a sufficient hypothesis.

2021-09-14 06:36:09 5aaa5fa
chore(measure_theory/integral/set_integral): update old lemmas that were in comments at the end of the file (#9111)
The file `set_integral` had a list of lemmas in comments at the end of the file, which were written for an old implementation of the set integral. This PR deletes the comments, and adds the corresponding results when they don't already exist.
The lemmas `set_integral_congr_set_ae` and `set_integral_mono_set` are also moved to relevant sections.

2021-09-14 06:36:08 4b7593f
feat(data/last/basic): a lemma specifying list.split_on (#9104)

2021-09-14 04:32:20 d3b345d
feat(group_theory/p_group): Bottom subgroup is a p-group (#9190)
The bottom subgroup is a p-group.
Name is consistent with `is_p_group.of_card`

2021-09-14 04:32:19 8dffafd
feat(topology): one-point compactification of a topological space (#8579)
Define `alexandroff X` to be the one-point compactification of a topological space `X` and prove some basic lemmas about this definition.
Co-authored by: Yury G. Kudryashov <urkud@urkud.name>

2021-09-14 03:42:22 f88f3a7
chore(scripts): update nolints.txt (#9192)
I am happy to remove some nolints for you!

2021-09-14 01:19:50 f0a1356
feat(linear_algebra/matrix/circulant): add a file (#9011)

2021-09-13 23:34:39 103c1ff
feat(data/(d)finsupp): (d)finsupp.update (#9015)

2021-09-13 18:35:51 d9476d4
fix(tactic/rcases): Don't parameterize parsers (#9159)
The parser description generator only unfolds parser constants if they have no arguments, which means that parsers like `rcases_patt_parse tt` and `rcases_patt_parse ff` don't generate descriptions even though they have a `with_desc` clause. We fix this by naming the parsers separately.
Fixes #9158

2021-09-13 17:45:52 ec5f496
feat(README.md): add Rémy Degenne (#9187)

2021-09-13 16:19:14 40247bd
feat(measure_theory/measure/vector_measure): add `vector_measure.trim` (#9169)

2021-09-13 16:19:13 3b4f4da
feat(linear_algebra/determinant): more on the determinant of linear maps (#9139)

2021-09-13 13:59:40 a9e7d33
chore(analysis/calculus/[f]deriv): generalize product formula to product in normed algebras (#9163)

2021-09-13 13:59:39 ad62583
chore(algebra/big_operators): add a lemma (#9120)
(product over `s.filter p`) * (product over `s.filter (λ x, ¬p x)) = product over s

2021-09-13 10:22:39 b0e8ced
feat(group_theory/nilpotent): add intermediate lemmas (#9016)
Add two new lemmas on nilpotent groups.

2021-09-13 09:34:19 a8a8edc
feat(group_theory/p_group): Generalize to infinite p-groups (#9082)
Defines p-groups, and generalizes the results of `p_group.lean` to infinite p-groups. The eventual goal is to generalize Sylow's theorems to infinite groups.

2021-09-13 09:34:17 d4f8b92
feat(measure_theory/measure/with_density_vector_measure): define vector measures by an integral over a function (#9008)
This PR defined the vector measure corresponding to mapping the set `s` to the integral `∫ x in s, f x ∂μ` given some measure `μ` and some integrable function `f`.

2021-09-13 09:34:16 80085fc
feat(number_theory/padics/padic_integers): Z_p is adically complete (#8995)

2021-09-13 08:46:12 d082001
feat(analysis/convex/independent): convex independence (#9018)

2021-09-13 06:36:44 1cf1704
chore(order/filter): more readable proof (#9173)

2021-09-13 06:36:43 1479068
chore(ring_theory/polynomial/cyclotomic): fix namespacing (#9116)
@riccardobrasca told me I got it wrong, so I fixed it :)

2021-09-13 06:00:30 5651157
feat(linear_algebra/adic_completion): le_jacobson_bot (#9125)
This PR proves that in an `I`-adically complete commutative ring `R`, the ideal `I` is contained in the Jacobson radical of `R`.

2021-09-13 04:04:40 ca23d52
feat(set_theory/surreal): add dyadic surreals (#7843)
We define `surreal.dyadic` using a map from \int localized away from 2 to surreals. As currently we do not have the ring structure on `surreal` we do this "by hand". 
Next steps: 
1. Prove that `dyadic_map` is injective
2. Prove that `dyadic_map` is a group hom
3. Show that \int localized away from 2 is a subgroup of \rat.

2021-09-13 02:40:27 f0effbd
chore(scripts): update nolints.txt (#9177)
I am happy to remove some nolints for you!

2021-09-13 00:53:07 87c1820
feat(group_theory/perm/concrete_cycle): perms from cycle data structure (#8866)

2021-09-12 22:30:08 f6c8aff
feat(order/zorn) : `chain_univ` (#9162)
`univ` is a `r`-chain iff `r` is trichotomous

2021-09-12 20:47:08 5b702ec
chore(linear_algebra/basic): move map_comap_eq into submodule namespace (#9160)
We change the following lemmas from the `linear_map` namespace into the `submodule` namespace
- map_comap_eq
- comap_map_eq
- map_comap_eq_self
- comap_map_eq_self
This is consistent with `subgroup.map_comap_eq`, and the lemmas are about `submodule.map` so it make sense to keep them in the submodule namespace.

2021-09-12 18:41:01 00d570a
doc(algebra/covariant_and_contravariant): fix parameter documentation… (#9171)
… in covariant_class and contravariant_class
In the documentation of `algebra.covariant_and_contravariant.covariant_class` and `algebra.covariant_and_contravariant.contravariant_class`, the parameter `r` is described as having type `N → N`. It's actual type is `N → N → Prop`. We change the documentation to give the correct type of `r`.

2021-09-12 18:41:00 65f8148
chore(algebra/field_power): golf some proofs (#9170)

2021-09-12 18:40:59 3366a68
feat(data/fin): eq_zero_or_eq_succ (#9136)
Particularly useful with `rcases i.eq_zero_or_eq_succ with rfl|⟨j,rfl⟩`.
Perhaps it not worth having as a separate lemma, but it seems to avoid breaking the flow of a proof I was writing.

2021-09-12 17:53:26 a7d872f
chore(category/abelian/pseudoelements): localize expensive typeclass (#9156)
Per @fpvandoorn's [new linter](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/type-class.20loops.20in.20category.20theory).

2021-09-12 15:14:38 995f481
feat(logic/basic): a few lemmas (#9166)

2021-09-12 09:48:17 04d2b12
feat(ring_theory/ideal/operations): annihilator_smul (#9151)

2021-09-12 06:48:16 f863703
fix(category_theory/concrete_category): remove bad instance (#9154)
Per @fpvandoorn's [new linter](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/type-class.20loops.20in.20category.20theory).

2021-09-12 06:48:15 858e764
fix(ring_theory/ideal/basic): ideal.module_pi speedup (#9148)
Eric and Yael were both complaining that `ideal.module_pi` would occasionally cause random timeouts on unrelated PRs. This PR (a) makes the `smul` proof obligation much tidier (factoring out a sublemma) and (b) replaces the `all_goals` trick by 6 slightly more refined proofs (making the new proof longer, but quicker). On my machine the profiler stats are:
```
ORIG
parsing took 74.1ms
elaboration of module_pi took 3.83s
type checking of module_pi took 424ms
decl post-processing of module_pi took 402ms
NEW
parsing took 136ms
elaboration of module_pi took 1.19s
type checking of module_pi took 82.8ms
decl post-processing of module_pi took 82.5ms
```

2021-09-12 06:48:14 b55483a
feat(category_theory/monoidal): rigid (autonomous) monoidal categories (#8946)
Defines rigid monoidal categories and creates the instance of finite dimensional vector spaces.

2021-09-12 05:54:55 e1bed5a
fix(category_theory/adjunction/limits): remove bad instance (#9157)
Per @fpvandoorn's [new linter](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/type-class.20loops.20in.20category.20theory).

2021-09-12 05:54:54 059eba4
fix(category/preadditive/single_obj): remove superfluous instance (#9155)
Per @fpvandoorn's [new linter](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/type-class.20loops.20in.20category.20theory).

2021-09-12 02:16:49 96c1d69
doc(data/list/*): Elaborate module docstrings (#9076)
Just adding some elaboration that @YaelDillies requested in #8867, but which didn't get included before it was merged.

2021-09-12 01:07:51 f75bee3
chore(ring_theory/noetherian): fix URL (#9149)

2021-09-11 22:57:24 55aaebe
feat(data/real/ennreal): add `contravariant_class ennreal ennreal (+) (<)` (#9143)
## `algebra/ordered_monoid`
* use `≠ ⊤`/`≠ ⊥` instead of `< ⊤`/`⊥ <`  in the assumptions of `with_top.add_lt_add_iff_left`, `with_top.add_lt_add_iff_right`, `with_bot.add_lt_add_iff_left`, and `with_bot.add_lt_add_iff_right`;
* add instances for `contravariant_class (with_top α) (with_top α) (+) (<)` and `contravariant_class (with_bot α) (with_bot α) (+) (<)`.
## `data/real/ennreal`
* use `≠ ∞` instead of `< ∞`  in the assumptions of `ennreal.add_lt_add_iff_left`, `ennreal.add_lt_add_iff_right`, `ennreal.lt_add_right`,
* add an instance `contravariant_class ℝ≥0∞ ℝ≥0∞ (+) (<)`;
* rename `ennreal.sub_infty` to `ennreal.sub_top`.
## `measure_theory/measure/outer_measure`
* use `≠ ∞` instead of `< ∞`  in the assumptions of `induced_outer_measure_exists_set`;
## `topology/metric_space/emetric_space`
* use `≠ ∞` instead of `< ∞`  in the assumptions of `emetric.ball_subset`.

2021-09-11 21:56:23 c0693ca
chore(analysis/calculus/*): add `filter.eventually_eq.deriv` etc. (#9131)
* add `filter.eventually_eq.deriv` and `filter.eventually_eq.fderiv`;
* add `times_cont_diff_within_at.eventually` and `times_cont_diff_at.eventually`.

2021-09-11 20:56:00 1605b85
feat(data/real/ennreal): add ennreal.to_(nn)real_inv and ennreal.to_(nn)real_div (#9144)

2021-09-11 17:31:41 b9ad733
split(analysis/convex/combination): split off `analysis.convex.basic` (#9115)
This moves `finset.center_mass` into its own new file.
About the copyright header, `finset.center_mass` comes from #1804, which was written by Yury in December 2019.

2021-09-11 15:52:14 62de591
feat(interval_integral): generalize change of variables (#8869)
* Generalizes `interval_integral.integral_comp_mul_deriv'`.
In this version:
(1) `f` need not be differentiable at the endpoints of `[a,b]`, only continuous,
(2) I removed the `measurable_at_filter` assumption
(3) I assumed that `g` was continuous on `f '' [a,b]`, instead of continuous at every point of `f '' [a,b]` (which differs in the endpoints).
This was possible after @sgouezel's PR #7978.
The proof was a lot longer/messier than expected. Under these assumptions we have to be careful to sometimes take one-sided derivatives. For example, we cannot take the 2-sided derivative of `λ u, ∫ x in f a..u, g x` when `u` is the maximum/minimum of `f` on `[a, b]`.
@urkud: I needed more `FTC_filter` classes, namely for closed intervals (to be precise: `FTC_filter x (𝓝[[a, b]] x) (𝓝[[a, b]] x)`). Was there a conscious reason to exclude these classes? (The documentation explicitly enumerates the existing instances.)

2021-09-11 14:06:54 6823886
feat(measure_theory/function/conditional_expectation): conditional expectation of an indicator (#8920)
This PR builds `condexp_ind  (s : set α) : E →L[ℝ] α →₁[μ] E`, which takes `x : E` to the conditional expectation of the indicator of the set `s` with value `x`, seen as an element of `α →₁[μ] E`.
This linear map will be used in a next PR to define the conditional expectation from L1 to L1, by using the same extension mechanism as in the Bochner integral construction.

2021-09-11 12:23:38 241ee9e
feat(data/finsupp): more lemmas about `α →₀ ℕ` (#9137)

2021-09-11 12:23:37 e009354
chore(data/mv_polynomials): golf, add a lemma (#9132)
* add `monoid_algebra.support_mul_single`;
* transfer a few more lemmas from `monoid_algebra` to `add_monoid_algebra`
* add `mv_polynomial.support_mul_X`
* reuse a proof.

2021-09-11 12:23:36 d72119c
feat(data/mv_polynomial/equiv): empty_equiv (#9122)

2021-09-11 11:48:10 f318e5d
chore(ring_theory/artinian): typo (#9140)

2021-09-11 04:25:26 579ca5e
chore(combinatorics/simple_graph): rename sym to symm (#9134)
The naming convention for symmetry of a relation in mathlib seems to be symm, so this commit renames the axiom for the symmetry of the adjacency relation of a simple graph to this.

2021-09-11 04:25:25 919aad2
refactor(topology/path_connected): make `path` extend `C(I, X)` (#9133)

2021-09-11 04:25:24 8413622
chore(algebra/ordered_smul): reduce instance assumptions & delete duplicated instances (#9130)
These instances all assumed `semiring R` superfluously:
* `order_dual.smul_with_zero`
* `order_dual.mul_action`
* `order_dual.mul_action_with_zero`
* `order_dual.distrib_mul_action`
and these instances were duplicates (with their `opposite.`-less counterparts):
* `opposite.mul_zero_class.to_opposite_smul_with_zero`
* `opposite.monoid_with_zero.to_opposite_mul_action_with_zero`
* `opposite.semiring.to_opposite_module`

2021-09-11 04:25:23 2e9f708
feat(algebra/ordered_monoid): order_embedding.mul_left (#9127)

2021-09-11 03:46:20 4c96b8a
feat(measure_theory/measure/set_integral): new lemma integral_Union (#9093)

2021-09-11 01:08:22 426227d
chore(algebra/group/basic): add 3 `simp` attrs (#9050)

2021-09-10 20:31:43 e4ca117
feat(ring_theory/algebraic): is_algebraic_of_larger_base (#9109)

2021-09-10 18:48:06 7500529
refactor(analysis/convex/basic): generalize segments to vector spaces (#9094)
`segment` and `open_segment` are currently only defined in real vector spaces. This generalizes ℝ to arbitrary ordered_semirings in definitions and abstracts it away to the correct generality in lemmas. It also generalizes the space from `add_comm_group` to `add_comm_monoid` where possible.

2021-09-10 18:48:05 0e014ba
feat(combinatorics/simple_graph/adj_matrix): more lemmas (#9021)

2021-09-10 16:18:38 a949b57
feat(data/mv_polynomial): mv_polynomial.subsingleton (#9124)

2021-09-10 16:18:37 92e7bbe
refactor(algebra/group/units): better defeq for is_unit.unit (#9112)
Make sure that, for `x : M` and `h : is_unit M`, then `is_unit.unit x h : M` is defeq to `x`.

2021-09-10 16:18:36 574864d
feat(topology/compact_open): express the compact-open topology as an Inf of topologies (#9106)
For `f : C(α, β)` and a set `s` in `α`, define `f.restrict s` to be the restriction of `f` as an element of `C(s, β)`.  This PR then proves that the compact-open topology on `C(α, β)` is equal to the infimum of the induced compact-open topologies from the restrictions to compact sets.

2021-09-10 16:18:35 d2afdc5
feat(ring_theory/dedekind_domain): add proof that `I \sup J` is the product of `factors I \inf factors J` for `I, J` ideals in a Dedekind Domain  (#9055)

2021-09-10 15:18:22 6d2cbf9
feat(ring_theory/artinian): Artinian modules (#9009)

2021-09-10 15:18:21 2410c1f
feat(topology/homotopy): Define homotopy between functions (#8947)
More PRs are to come, with homotopy between paths etc. So this will probably become a folder at some point, but for now I've just put it in `topology/homotopy.lean`. There's also not that much API here at the moment, more will be added later on.

2021-09-10 13:08:34 5ce9280
feat(measure_theory/integral/bochner): generalize the Bochner integral construction (#8939)
The construction of the Bochner integral is generalized to a process extending a set function `T : set α → (E →L[ℝ] F)` from sets to functions in L1. The integral corresponds to `T s` equal to the linear map `E →L[ℝ] E` with value `λ x, (μ s).to_real • x`.
The conditional expectation from L1 to L1 will be defined by taking for `T` the function `condexp_ind : set α → (E →L[ℝ] α →₁[μ] E)` defined in #8920 .

2021-09-10 13:08:33 56ff42b
feat(linear_algebra/matrix/transvection): matrices are generated by transvections and diagonal matrices (#8898)
One version of Gauss' pivot: any matrix can be obtained starting from a diagonal matrix and doing elementary moves on rows and columns. Phrased in terms of multiplication by transvections.

2021-09-10 10:53:36 a057a8e
feat(ring_theory/norm): `norm R x = 0 ↔ x = 0` (#9042)
Nonzero values of `S / R` have nonzero norm over `R`.

2021-09-10 07:18:23 37e17c5
feat(measure_theory/integral/lebesgue): add some lintegral lemmas (#9064)
This PR contains some lemmas useful for #9065.

2021-09-10 07:18:22 ae86776
feat(measure_theory/measure/vector_measure): define mutually singular for vector measures (#8896)

2021-09-10 02:16:47 aec02d8
chore(scripts): update nolints.txt (#9126)
I am happy to remove some nolints for you!

2021-09-09 20:12:35 4d88ae8
feat(tactic/lint): better fails_quickly linter (#8932)
This linter catches a lot more loops.

2021-09-09 17:58:39 138d98b
feat(ring_theory/mv_polynomial): linear_independent_X (#9118)

2021-09-09 16:13:53 b9fcf9b
feat(linear_algebra/matrix/nonsingular_inverse): adjugate_mul_distrib (#8682)
We prove that the adjugate of a matrix distributes over the product. To do so, a separate file 
`linear_algebra.matrix.polynomial` states some general facts about the polynomial `det (t I + A)`.

2021-09-09 14:10:32 2331607
feat(group_theory/sub{monoid,group}): pointwise actions on `add_sub{monoid,group}`s and `sub{monoid,group,module,semiring,ring,algebra}`s (#8945)
This adds the pointwise actions characterized by `↑(m • S) = (m • ↑S : set R)` on:
* `submonoid`
* `subgroup`
* `add_submonoid`
* `add_subgroup`
* `submodule` ([Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Lost.20instance/near/249467913))
* `subsemiring`
* `subring`
* `subalgebra`
within the locale `pointwise` (which must be open to state the RHS of the characterization above anyway).

2021-09-09 12:54:22 1825671
feat(ring_theory/unique_factorization_domain): add lemma that a member of `factors a` divides `a` (#9108)

2021-09-09 09:36:30 e597b75
feat(algebra/algebra/subalgebra): mem_under (#9107)

2021-09-09 09:36:29 694da7e
feat(ring_theory): the surjective image of a PID is a PID (#9069)
If the preimage of an ideal/submodule under a surjective map is principal, so is the original ideal. Therefore, the image of a principal ideal domain under a surjective ring hom is again a PID.

2021-09-09 09:36:28 1356397
refactor(linear_algebra/*): linear_equiv.of_bijective over semirings (#9061)
`linear_equiv.of_injective` and `linear_equiv.of_bijective`
took as assumption `f.ker = \bot`,
which is equivalent to injectivity of `f` over rings,
but not over semirings.
This PR changes the assumption to `injective f`.
For reasons of symmetry,
the surjectivity assumption is also switched to `surjective f`.
As a consequence, this PR also renames:
* `linear_equiv_of_ker_eq_bot` to `linear_equiv_of_injective`
* `linear_equiv_of_ker_eq_bot_apply` to `linear_equiv_of_injective_apply`

2021-09-09 07:32:09 f6ccb6b
chore(ring_theory/polynomial/cyclotomic): golf+remove `nontrivial` (#9090)

2021-09-09 07:32:08 90475a9
refactor(data/matrix): put std_basis_matrix in its own file (#9088)
The authors here are recovered from the git history.
I've avoided the temptation to generalize typeclasses in this PR; the lemmas are copied to this file unmodified.

2021-09-09 07:32:07 9568977
fix(group_theory/group_action): generalize assumptions on `ite_smul` and `smul_ite` (#9085)

2021-09-09 07:32:06 3e10324
feat(data/polynomial/taylor): Taylor expansion of polynomials (#9000)

2021-09-09 06:19:13 e336caf
chore(algebra/floor): add a trivial lemma (#9098)
* add `nat_ceil_eq_zero`;
* add `@[simp]` to `nat_ceil_le`.

2021-09-09 04:01:05 796efae
feat(data/real/sqrt): `nnreal.coe_sqrt` and `nnreal.sqrt_eq_rpow` (#9025)
Also rename a few lemmas:
* `nnreal.mul_sqrt_self` -> `nnreal.mul_self_sqrt` to follow `real.mul_self_sqrt`
* `real.sqrt_le` -> `real.sqrt_le_sqrt_iff`
* `real.sqrt_lt` -> `real.sqrt_lt_sqrt_iff`
and provide a few more for commodity:
* `nnreal.sqrt_sq`
* `nnreal.sq_sqrt`
* `real.sqrt_lt_sqrt`
* `real.sqrt_lt_sqrt_iff_of_pos`
* `nnreal.sqrt_le_sqrt_iff`
* `nnreal.sqrt_lt_sqrt_iff`
Closes #8016

2021-09-09 02:59:19 15b6c56
refactor(category_theory/limits/types): Refactor filtered colimits. (#9100)
- Rename `filtered_colimit.r` into `filtered_colimit.rel`, to match up with `quot.rel`,
- Rename lemma `r_ge`,
- Abstract out lemma `eqv_gen_quot_rel_of_rel` from later proof.

2021-09-09 02:09:44 cfc6b48
chore(scripts): update nolints.txt (#9105)
I am happy to remove some nolints for you!

2021-09-09 00:00:26 49cf386
feat(measure_theory/measure/vector_measure): add `absolutely_continuous.add` and `absolutely_continuous.smul` (#9086)

2021-09-08 21:47:47 87e7a0c
feat(linear_algebra/matrix): `M` maps some `v ≠ 0` to zero iff `det M = 0` (#9041)
A result I have wanted for a long time: the two notions of a "singular" matrix are equivalent over an integral domain. Namely, a matrix `M` is singular iff it maps some nonzero vector to zero, which happens iff its determinant is zero.
Here, I find such a `v` by going through the field of fractions, where everything is a lot easier because all injective endomorphisms are automorphisms. Maybe a bit overkill (and unsatisfying constructively), but it works and is a lot nicer to write out than explicitly finding an element of the kernel.

2021-09-08 21:02:02 ab0a295
feat(linear_algebra/matrix): some bounds on the determinant of matrices (#9029)
This PR shows that matrices with bounded entries also have bounded determinants.
`matrix.det_le` is the most generic version of these results, which we specialise in two steps to `matrix.det_sum_smul_le`. In a follow-up PR we will connect this to `algebra.left_mul_matrix` to provide an upper bound on `algebra.norm`.

2021-09-08 17:50:43 4222c32
lint(testing/slim_check/*): break long lines (#9091)

2021-09-08 17:50:42 56a59d3
feat(data/polynomial/hasse_deriv): Hasse derivatives (#8998)

2021-09-08 17:50:41 42dda89
feat(ring_theory/discrete_valuation_ring): is_Hausdorff (#8994)
Discrete valuation rings are Hausdorff in the algebraic sense
that the intersection of all powers of the maximal ideal is 0.

2021-09-08 16:06:33 f4f1cd3
feat(algebra/module/ordered): simple `smul` lemmas (#9077)
These are the negative versions of the lemmas in `ordered_smul`, which suggests that both files should be merged.
Note however that, contrary to those, they need `module k M` instead of merely `smul_with_zero k M`.

2021-09-08 16:06:31 76ab749
feat(analysis/normed_space/operator_norm): variants of continuous_linear_map.lsmul and their properties (#8984)

2021-09-08 14:01:04 146dddc
feat(measure_theory/group/arithmetic): add more to_additive attributes for actions (#9032)
Introduce additivised versions of some more smul classes and corresponding instances and lemmas for different types of (measurable) additive actions.

2021-09-08 14:01:03 99b70d9
feat(data/(fin)set/basic): `image` and `mem` lemmas (#9031)
I rename `set.mem_image_of_injective` to `function.injective.mem_set_image_iff` to allow dot notation and fit the new  `function.injective.mem_finset_image_iff`.

2021-09-08 14:01:01 3d31c2d
chore(linear_algebra/affine_space/independent): allow dot notation on affine_independent (#8974)
This renames a few lemmas to make dot notation on `affine_independent` possible.

2021-09-08 14:00:59 7a2ccb6
feat(group_theory/group_action): Extract a smaller typeclass out of `mul_semiring_action` (#8918)
This new typeclass, `mul_distrib_mul_action`, is satisfied by conjugation actions. This PR provides instances for:
* `mul_aut`
* `prod` of two types with a `mul_distrib_mul_action`
* `pi` of types with a `mul_distrib_mul_action`
* `units` of types with a `mul_distrib_mul_action`
* `ulift` of types with a `mul_distrib_mul_action`
* `opposite` of types with a `mul_distrib_mul_action`
* `sub(monoid|group|semiring|ring)`s of types with a `mul_distrib_mul_action`
* anything already satisfying a `mul_semiring_action`

2021-09-08 14:00:58 4c7d95f
feat(analysis/normed_space/inner_product): reflections API (#8884)
Reflections, as isometries of an inner product space, were defined in #8660.  In this PR, various elementary lemmas filling out the API:
- Lemmas about reflection through a subspace K, of a point which is in (i) K itself; (ii) the orthogonal complement of K.
- Lemmas relating the orthogonal projection/reflection on the `submodule.map` of a subspace, with the orthogonal projection/reflection on the original subspace.
- Lemma characterizing the reflection in the trivial subspace.

2021-09-08 12:15:54 71df310
chore(*): remove instance binders in exists, for mathport (#9083)
Per @digama0's request at https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Instance.20binders.20in.20exists.
Instance binders under an "Exists" aren't allowed in Lean4, so we're backport removing them. I've just turned relevant `[X]` binders into `(_ : X)` binders, and it seems to all still work. (i.e. the instance binders weren't actually doing anything).
It turns out two of the problem binders were in `infi` or `supr`, not `Exists`, but I treated them the same way.

2021-09-08 12:15:53 3108153
feat(linear_algebra/affine_space/independent): homotheties preserve affine independence (#9070)

2021-09-08 12:15:52 e4e07ea
feat(ring_theory): `map f (span s) = span (f '' s)` (#9068)
We already had this for submodules and linear maps, here it is for ideals and ring homs.

2021-09-08 12:15:50 aae2b37
feat(field_theory/separable): a finite field extension in char 0 is separable (#9066)

2021-09-08 12:15:49 157e99d
feat(ring_theory): PIDs are Dedekind domains (#9063)
We had all the ingredients ready for a while, apparently I just forgot to PR the instance itself.
Co-Authored-By: Ashvni <ashvni.n@gmail.com>
Co-Authored-By: Filippo A. E. Nuccio <filippo.nuccio@univ-st-etienne.fr>

2021-09-08 12:15:48 c3f2c23
feat(analysis/convex/basic): the affine image of the convex hull is the convex hull of the affine image (#9057)

2021-09-08 12:15:46 57a0789
chore(topology/order): relate Sup and Inf of topologies to `generate_from` (#9045)
Since there is a Galois insertion between `generate_from : set (set α) → topological_space α` and the "forgetful functor" `topological_space α → set (set α)`, all kinds of lemmas about the interaction of `generate_from` and the ordering on topologies automatically follow.  But it is hard to use the Galois insertion lemmas directly, because the Galois insertion is actually provided for the dual order on topologies, which confuses Lean.  Here we re-state most of the Galois insertion API in this special case.

2021-09-08 12:15:45 a8c5c5a
feat(algebra/module/basic): add `module.to_add_monoid_End` (#8968)
I also removed `smul_add_hom_one` since it's a special case of the ring_hom.
I figured I'd replace a `simp` with a `rw` when fixing `finsupp.to_free_abelian_group_comp_to_finsupp` for this removal.

2021-09-08 10:25:38 4e8d966
feat(algebra/subalgebra): add missing actions by and on subalgebras (#9081)
For `S : subalgebra R A`, this adds the instances:
* for actions on subalgebras (generalizing the existing `algebra R S`):
  * `module R' S`
  * `algebra R' S`
  * `is_scalar_tower R' R S`
* for actions by subalgebras (generalizing the existing `algebra S α`):
  * `mul_action S α`
  * `smul_comm_class S α β`
  * `smul_comm_class α S β`
  * `is_scalar_tower S α β`
  * `has_faithful_scalar S α`
  * `distrib_mul_action S α`
  * `module S α`
This also removes the commutativity requirement on `A` for the `no_zero_smul_divisors S A` instance.

2021-09-08 10:25:37 585c5ad
feat(data/finset): monotone maps preserve the maximum of a finset (#9035)

2021-09-08 08:23:11 fc75aea
feat(topology/algebra/ordered): `{prod,pi}.order_closed_topology` (#9073)

2021-09-08 08:23:10 8341d16
feat(linear_algebra/finite_dimensional): make finite_dimensional_bot an instance (#9053)
This was previously made into a local instance in several places, but there appears to be no reason it can't be a global instance.
cf discussion at #8884.

2021-09-08 08:23:08 b4a88e2
feat(data/equiv/derangements/basic): define derangements (#7526)
This proves two formulas for the number of derangements on _n_ elements, and defines some combinatorial equivalences
involving derangements on α and derangements on certain subsets of α. This proves Theorem 88 on Freek's list.

2021-09-08 06:17:22 189fe5b
feat(data/nat/enat): refactor coe from nat to enat (#9023)
The coercion from nat to enat was defined to be enat.some. But another
coercion could be inferred from the additive structure on enat, leading to
confusing goals of the form
`↑n = ↑n` where the two sides were not defeq.
We now make the coercion inferred from the additive structure the default, 
even though it is not computable.
A dedicated function `enat.some` is introduced, to be used whenever
computability is important.

2021-09-08 06:17:21 cef862d
feat(ring_theory/noetherian): is_noetherian_of_range_eq_ker (#8988)

2021-09-08 06:17:20 4dc96e4
feat(group_theory/index): define the index of a subgroup (#8971)
Defines `subgroup.index` and proves various divisibility properties.

2021-09-08 06:17:19 ded0d64
feat(number_theory): define "admissible" absolute values (#8964)
We say an absolute value `abv : absolute_value R ℤ` is admissible if it agrees with the Euclidean domain structure on R (see also `is_euclidean` in #8949), and large enough sets of elements in `R^n` contain two elements whose remainders are close together.
Examples include `abs : ℤ → ℤ` and `card_pow_degree := λ (p : polynomial Fq), (q ^ p.degree : ℤ)`, where `Fq` is a finite field with `q` elements. (These two correspond to the number field and function field case respectively, in our proof that the class number of a global field is finite.) Proving these two are indeed admissible involves a lot of pushing values between `ℤ` and `ℝ`, but is otherwise not so exciting.

2021-09-08 06:17:18 ec51460
feat(data/finset): define `finset.pimage` (#8907)

2021-09-08 04:46:13 628969b
chore(linear_algebra/basic): speed up slow decl (#9060)

2021-09-08 02:22:54 782a20a
chore(scripts): update nolints.txt (#9079)
I am happy to remove some nolints for you!

2021-09-07 23:04:14 dcd8782
feat(algebra/algebra): lemmas connecting `basis ι R A`, `no_zero_smul_divisors R A` and `injective (algebra_map R A)` (#9039)
Additions:
 * `basis.algebra_map_injective`
 * `no_zero_smul_divisors.algebra_map_injective`
 * `no_zero_smul_divisors.iff_algebra_map_injective`
Renamed:
 * `algebra.no_zero_smul_divisors.of_algebra_map_injective` → `no_zero_smul_divisors.of_algebra_map_injective`

2021-09-07 21:34:33 50f5d8b
docs(linear_algebra/bilinear_map): fix inconsistency in docstring (#9075)

2021-09-07 21:34:32 b0b0a24
feat(data/int): absolute values and integers (#9028)
We prove that an absolute value maps all `units ℤ` to `1`.
I added a new file since there is no neat place in the import hierarchy where this fit (the meet of `algebra.algebra.basic` and `data.int.cast`).

2021-09-07 19:33:39 fd453cf
chore(data/set/basic): add some simp attrs (#9074)
Also add `set.pairwise_on_union`.

2021-09-07 16:31:29 463e753
feat(linear_algebra/finite_dimensional): generalisations to division_ring (#8822)
I generalise a few results about finite dimensional modules from fields to division rings. Mostly this is me trying out @alexjbest's `generalisation_linter`. (review: it works really well, and is very helpful for finding the right home for lemmas, but it is slow).

2021-09-07 15:17:24 9c886ff
chore(ring_theory): typo fix (#9067)
`principal_idea_ring` -> `principal_ideal_ring`

2021-09-07 15:17:23 f8cfed4
feat(algebra/tropical/basic): define tropical semiring (#8864)
Just the initial algebraic structures. Follow up PRs will provide these with a topology, prove that tropical polynomials can be interpreted as sums of affine maps, and further towards tropical geometry.

2021-09-07 13:48:09 eeb4bb6
feat(algebra/big_operators): absolute values and big operators  (#9027)
This PR extends `absolute_value.add_le` and `absolute_value.map_mul` to `finset.sum` and `finset.prod` respectively.

2021-09-07 11:06:56 6c8203f
chore(linear_algebra/bilinear_map): split off new file from linear_algebra/tensor_product (#9054)
The first part of linear_algebra/tensor_product consisted of some basics on bilinear maps that are not directly related to the construction of the tensor product.
This PR moves them to a new file.

2021-09-07 11:06:55 0508c7b
feat(analysis/specific_limits): add `set.countable.exists_pos_has_sum_le` (#9052)
Add versions of `pos_sum_of_encodable` for countable sets.

2021-09-07 11:06:54 98942ab
feat(ring_theory): non-zero divisors are not zero (#9043)
I'm kind of suprised we didn't have this before!

2021-09-07 11:06:53 812ff38
docs(algebra/ordered_ring): add module docstring (#9030)

2021-09-07 11:06:52 a84b538
feat(algebra/algebra/subalgebra): inclusion map of subalgebras (#9013)

2021-09-07 11:06:51 d69c12e
feat(ring_theory/ideal/local_ring): residue field is an algebra (#8991)
Also, the kernel of a surjective map to a field is equal to the unique maximal ideal.

2021-09-07 11:06:50 58a8853
doc(data/list/*): Add missing documentation (#8867)
Fixing the missing module docstrings in `data/list`, as well as documenting some `def`s and `theorem`s.

2021-09-07 11:06:49 d366eb3
feat(ring_theory/ideal/operations): add some theorems about taking the quotient of a ring by a sum of ideals  (#8668)
The aim of this section is to prove that if `I, J` are ideals of the ring `R`, then the quotients `R/(I+J)` and `(R/I)/J'`are isomorphic, where `J'` is the image of `J` in `R/I`.

2021-09-07 08:01:11 d0c02bc
feat(order/filter/basic): add `supr_inf_principal` and `tendsto_supr` (#9051)
Also golf a few proofs

2021-09-07 08:01:09 6b0c73a
chore(analysis/normed_space): add `dist_sum_sum_le` (#9049)

2021-09-07 08:01:08 3fdfc8e
chore(data/bool): add a few lemmas about inequalities and `band`/`bor` (#9048)

2021-09-07 08:01:07 c4f3707
chore(scripts): update nolints.txt (#9047)
I am happy to remove some nolints for you!

2021-09-07 05:56:36 77f4ed4
docs(set_theory/lists): add module docstring and def docstrings (#8967)

2021-09-07 05:56:34 0c19d5f
feat(topology/uniform_space/basic): add corollary of Lebesgue number lemma `lebesgue_number_of_compact_open` (#8963)

2021-09-07 05:56:33 a7be93b
feat(data/matrix/hadamard): add the Hadamard product (#8956)

2021-09-07 05:56:32 91824e5
feat(group_theory/subgroup): Normal Core (#8940)
Defines normal core, and proves lemmas analogous to those for normal closure.

2021-09-07 05:56:31 298f231
feat(*): trivial lemmas from #8903 (#8909)

2021-09-07 05:56:30 5b29630
chore(linear_algebra/tensor_product): remove `@[ext]` tag from `tensor_product.mk_compr₂_inj` (#8868)
This PR removes the `@[ext]` tag from `tensor_product.mk_compr₂_inj` and readds it locally only where it is needed. This is a workaround for the issue discussed [in this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/odd.20repeated.20type.20class.20search): basically, when `ext` tries to apply this lemma to linear maps, it fails only after a very long typeclass search. While this problem is already present to some extent in current mathlib, it is exacerbated by the [upcoming generalization of linear maps to semilinear maps](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Semilinear.20maps).
In addition to this change, a few individual uses of `ext` have been replaced by a manual application of the relevant ext lemma(s) for performance reasons.
For discoverability, the lemma `tensor_product.mk_compr₂_inj` is renamed to `tensor_product.ext` and the former `tensor_product.ext` to `tensor_product.ext'`.

2021-09-07 03:50:01 ceb9da6
feat(analysis/convex/caratheodory): strengthen Caratheodory's lemma to provide affine independence (#8892)
The changes here are:
- Use hypothesis `¬ affine_independent ℝ (coe : t → E)` instead of `finrank ℝ E + 1 < t.card`
- Drop no-longer-necessary `[finite_dimensional ℝ E]` assumption
- Do not use a shrinking argument but start by choosing an appropriate subset of minimum cardinality via `min_card_finset_of_mem_convex_hull`
- Provide a single alternative form of Carathéodory's lemma `eq_pos_convex_span_of_mem_convex_hull`
- In the alternate form, define the explicit linear combination using elements parameterised by a new `fintype` rather than on the entire ambient space `E` (we thus avoid the issue of junk values outside of the relevant subset)

2021-09-07 03:49:59 5eb1918
feat(group_theory/perm/concrete_cycle): is_cycle_form_perm (#8859)

2021-09-07 03:49:58 f157b6d
feat(linear_algebra): introduce notation for `linear_map.comp` and `linear_equiv.trans` (#8857)
This PR introduces new notation for the composition of linear maps and linear equivalences: `∘ₗ` denotes `linear_map.comp` and `≫ₗ` denotes `linear_equiv.trans`. This will be needed by an upcoming PR generalizing linear maps to semilinear maps (see discussion [here](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Semilinear.20maps)): in some places, we need to help the elaborator a bit by telling it that we are composing plain linear maps/equivs as opposed to semilinear ones. We have not made the change systematically throughout the library, only in places where it is needed in our semilinear maps branch.

2021-09-07 03:49:57 d262500
feat(group_theory/nilpotent): add antimono and functorial lemma for lower central series (#8853)

2021-09-07 03:49:56 f0f6c1c
feat(tactic/lint): reducible non-instance linter (#8540)
* This linter checks that if an instances uses a non-instance with as type a class, the non-instances is reducible.
* There are many false positives to this rule, which we probably want to allow (that are unlikely to cause problems). To cut down on the many many false positives, the linter currently only consider classes that have either an `add` or a `mul` field. Maybe we want to also include order-structures, but there are (for example) a bunch of `complete_lattice` structures that are derived using Galois insertions that haven't ever caused problems (I think).

2021-09-07 01:49:05 d6a1fc0
feat(algebra/ordered_monoid): correct definition (#8877)
Our definition of `ordered_monoid` is not the usual one, and this PR corrects that.
The standard definition just says
```
(mul_le_mul_left       : ∀ a b : α, a ≤ b → ∀ c : α, c * a ≤ c * b)
```
while we currently have an extra axiom
```
(lt_of_add_lt_add_left : ∀ a b c : α, a + b < a + c → b < c)
```
(This was introduced in ancient times, https://github.com/leanprover-community/mathlib/commit/7d8e3f3a6de70da504406727dbe7697b2f7a62ee, with no indication of where the definition came from. I couldn't find it in other sources.)
As @urkud pointed out a while ago [on Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/ordered_comm_monoid), these really are different.
The second axiom *does* automatically hold for cancellative ordered monoids, however.
This PR simply drops the axiom. In practice this causes no harm, because all the interesting examples are cancellative. There's a little bit of cleanup to do. In `src/algebra/ordered_sub.lean` four lemmas break, so I just added the necessary `[contravariant_class _ _ (+) (<)]` hypothesis. These lemmas aren't currently used in mathlib, but presumably where they are needed this typeclass will be available.

2021-09-07 00:33:29 ce31c1c
feat(order/prime_ideal): prime ideals are maximal (#9004)
Proved that in boolean algebras:
1. An ideal is prime iff it always contains one of x, x^c
2. A prime ideal is maximal

2021-09-07 00:33:28 5431521
refactor(topology/sheaves/sheaf_condition): Generalize unique gluing API (#9002)
Previously, the sheaf condition in terms of unique gluings has been defined only for type-valued presheaves. This PR generalizes this to arbitrary concrete categories, whose forgetful functor preserves limits and reflects isomorphisms (e.g. algebraic categories like `CommRing`). As a side effect, this solves a TODO in `structure_sheaf.lean`.

2021-09-07 00:33:27 d472c56
feat(linear_algebra/affine_space/affine_equiv): affine homotheties as equivalences (#8983)

2021-09-06 21:09:20 309674d
feat(linear_algebra/basis): a nontrivial module has nonempty bases (#9040)
A tiny little lemma that guarantees the dimension of a nontrivial module is nonzero. Noticeably simplifies the proof that the dimension of a power basis is positive in this case.

2021-09-06 21:09:19 3218c37
feat(linear_algebra/smodeq): sub_mem, eval (#8993)

2021-09-06 21:09:18 fde1fc2
feat(*): make more non-instances reducible (#8941)
* Also add some docstrings to `cau_seq_completion`.
* Related PR: #7835

2021-09-06 17:52:24 bfcf73f
feat(data/multiset/basic): Add a result on intersection of multiset with `repeat a n` (#9038)

2021-09-06 17:52:23 3148cfe
feat(field_theory/algebraic_closure): polynomials in an algebraically closed fields have roots (#9037)

2021-09-06 17:52:21 3a62419
chore(data/nat/mul_ind): make docgen happy (#9036)

2021-09-06 17:52:20 11284f2
feat(ring_theory): `y ≠ 0` in a UFD has finitely many divisors (#9034)
This implies ideals in a Dedekind domain are contained in only finitely many larger ideals.

2021-09-06 17:52:19 86dd706
feat(set/lattice): two lemmas about when sInter is empty (#9033)
- Added sInter_eq_empty_iff
- Added sInter_nonempty_iff

2021-09-06 17:52:18 98cbad7
chore(set_theory/pgame): add protected (#9022)
Breaks #7843 into smaller PRs.
These lemmas about `pgame` conflict with the ones for `game` when used in `calc` mode proofs, which confuses Lean.
There is no way to use the lemmas for `game` (required for surreal numbers) without using `_root_` as `game` inherits these lemmas from its abelian group structure.

2021-09-06 17:52:17 c83c22d
feat(measure_theory/measure/vector_measure): zero is absolutely continuous wrt any vector measure (#9007)

2021-09-06 17:52:16 339c2c3
feat(linear_algebra/affine_space/independent): affine independence is preserved by affine maps (#9005)

2021-09-06 12:26:04 c2e6e62
feat(algebra/absolute_value): generalize a few results to `linear_ordered_ring`s (#9026)
The proofs were copied literally from `is_absolute_value`, which was defined on fields, but we can generalize them to rings with only a few tweaks.

2021-09-06 12:26:02 448f821
feat(algebra/pointwise): enable pointwise add_action (#9017)
Just a little to_additive declaration

2021-09-06 12:26:01 f0c3f9e
feat(linear_algebra/basic): surjective_of_iterate_surjective (#9006)

2021-09-06 12:26:00 d16cb00
feat(linear_algebra/basic): of_le_injective (#8977)

2021-09-06 12:25:59 c0f01ee
feat(data/fin): pos_iff_nonempty (#8975)

2021-09-06 12:25:58 de37a6a
chore(field_theory/fixed): reuse existing `mul_semiring_action.to_alg_hom`  by providing `smul_comm_class` (#8965)
This removes `fixed_points.to_alg_hom` as this is really just a bundled form of `mul_semiring_action.to_alg_hom` + `mul_semiring_action.to_alg_hom_injective`, once we provide the missing `smul_comm_class`.

2021-09-06 12:25:57 2aebabc
feat(topology/continuous_function/basic): add `continuous_map.Icc_extend` (#8952)

2021-09-06 12:25:55 773b45f
feat(algebra/module/ordered): redefine `ordered_module` as `ordered_smul` (#8930)
One would like to talk about `ordered_monoid R (with_top R)`, but the `module` constraint is too strict to allow this.
The definition of `ordered_monoid` works if it is loosened to `has_scalar R M`. Most of the proofs that are part of its API need at most `smul_with_zero`. So it has been loosened to `smul_with_zero`, since a lawless `ordered_monoid` wouldn't do much.
In the `ordered_field` portion, `module` has been loosened to `mul_action_with_zero`.
`order_dual` instances of `smul` instances have also been generalized to better transmit. There are more generalizations possible, but seem out of scope for a single PR.
Unfortunately, these generalizations exposed a gnarly misalignment between `prod.has_lt` and `prod.has_le`, which have incompatible definitions, when inferred through separate paths. In particular, the `lt` definition of generated by `prod.preorder` is different than the core `prod.has_lt`. Due to this, the `prod.ordered_monoid` instance has not been generalized.

2021-09-06 12:25:54 e8fff26
refactor(group_theory/*): Move Cauchy's theorem (#8916)
Moves Cauchy's theorem from `sylow.lean` to `perm/cycle_type.lean`. Now `perm/cycle_type.lean` no longer depends on `sylow.lean`, and `p_group.lean` can use Cauchy's theorem (e.g. for equivalent characterizations of p-groups).

2021-09-06 12:25:53 893c474
feat(group_theory/submonoid/membership): add log, exp lemmas (#8870)
Breaking up a previous PR (#7843) into smaller ones.
This PR adds lemmas about injectivity of `pow` and `log` functions under appropriate conditions.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.238870)

2021-09-06 12:25:52 74373b8
feat(algebra/lattice_ordered_group): add basic theory of lattice ordered groups (#8673)

2021-09-06 11:10:12 c563692
feat(data/polynomial/eval): leval, eval as linear map (#8999)

2021-09-06 05:31:16 1f10390
lint(tactic/*): break long lines (#8973)
For code lines, the fix was often simple, just break that damn line.
For strings, you shouldn't break a line inside one as this will be a visible change to the tactic's output. When nothing else can be done, I used the trick of breaking the string into two appended strings. "A B" becomes "A" ++ " B", and that's line-breakable.

2021-09-06 03:41:00 1bc59c9
refactor(*): replace `function.swap` by `swap` (#8612)
This shortens some statements without decreasing legibility (IMO).

2021-09-05 23:31:30 a399728
feat(group_theory/coset): Interaction between quotient_group.mk and right multiplication by elements of the subgroup (#8970)
Two helpful lemmas regarding the interaction between `quotient_group.mk` and right multiplication by elements of the subgroup.

2021-09-05 22:12:20 0a94b29
feat(data/nat/choose/vandermonde): Vandermonde's identity for binomial coefficients (#8992)
I place this identity in a new file because the current proof depends on `polynomial`.

2021-09-05 02:26:54 9fc45d8
chore(scripts): update nolints.txt (#9014)
I am happy to remove some nolints for you!

2021-09-04 20:06:15 2ea1650
fix(algebra/ordered_monoid): slay with_top monoid diamonds caused by irreducibility (#8926)
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Diamond.20in.20instances.20on.20.60with_top.20R.60
Instead of copying over from `with_zero`, just work through the definitions directly.

2021-09-04 18:18:07 fd0cdae
feat(linear_algebra/pi): pi_option_equiv_prod (#9003)

2021-09-04 18:18:06 8ff139a
feat(data/equiv/fin): fin_sum_fin_equiv simp lemmas (#9001)

2021-09-04 18:18:05 7729bb6
feat(algebra): define "Euclidean" absolute values (#8949)
We say an absolute value `abv : absolute_value R S` is Euclidean if agrees with the Euclidean domain structure on `R`, namely `abv x < abv y ↔ euclidean_domain.r x y`.
Examples include `abs : ℤ → ℤ` and `λ (p : polynomial Fq), (q ^ p.degree : ℤ)`, where `Fq` is a finite field with `q` elements. (These two correspond to the number field and function field case respectively, in our proof that the class number of a global field is finite.)

2021-09-04 18:18:04 28592d9
feat(set_theory/cardinal): cardinal.to_nat_mul (#8943)
`cardinal.to_nat` distributes over multiplication.

2021-09-04 17:05:08 9df3f0d
feat(data/nat/prime): nat.prime.eq_pow_iff (#8917)
If a^k=p then a=p and k=1.

2021-09-04 15:15:27 a4df460
feat(linear_algebra/matrix/symmetric): add a file (#8955)

2021-09-04 13:21:59 18d7b74
feat(data/nat/choose/dvd): generalize to division rings (#8997)

2021-09-04 11:21:20 4435e90
feat(ring_theory/ideal/operations): ideal.pow_mem_pow (#8996)

2021-09-04 11:21:19 dcc45b4
feat(order/prime_ideal, order/boolean_algebra): small lemmas about prime ideals (#8980)
- Added is_prime.mem_or_compl_mem 
- Added is_prime.mem_compl_of_not_mem 
- Added sup_inf_inf_compl

2021-09-04 10:04:21 7f7f3d9
feat(ring_theory/ideal/operations): ring_hom.ker_is_maximal_of_surjective (#8990)

2021-09-04 08:16:53 9d86dad
feat(linear_algebra/prod): lemmas about ker and range (#8989)

2021-09-04 08:16:52 855613e
feat(linear_algebra/basic): galois insertion lemmas for map and comap (#8978)

2021-09-04 06:46:17 b57af8a
feat(category_theory/basic/category): Combine and improve API on preorder categories. (#8982)
Material on preorders as categories was previously scattered throughout the library. This PR unites this material into a single file `category_theory/category/preorder` and also expands upon it, by relating adjoints to galois connections.

2021-09-04 02:26:04 b9d8081
chore(scripts): update nolints.txt (#8987)
I am happy to remove some nolints for you!

2021-09-04 00:27:12 464c3d7
chore(group_theory/group_action/defs): weaken assumptions of `mul_smul_comm` and `smul_mul_assoc` (#8972)

2021-09-04 00:27:11 6ab6695
docs(topology/algebra/floor_ring): add module docstring (#8969)

2021-09-03 22:57:17 66cb5e0
fix(data/setoid/partition): make def more readable (#8951)
If we change the statement of `partition.order_iso` from `setoid α ≃o subtype (@is_partition α)` to `setoid α ≃o {C : set (set α) // is_partition C}` then this doesn't change anything up to defeq and it's much easier for a beginner to read, as well as avoiding the `@`. I also change some variable names. Why? I want to show this part of this file to undergraduates and I want to make it look as easy and nice as possible.

2021-09-03 22:57:16 93a15d6
feat(ring_theory/subring): field structure on centers of a division_ring (#8472)
I've also tidied up the subtitles. Previously there was a mix of h1 and h3s, I've made them all h2s.

2021-09-03 20:53:49 3a0dddc
feat(algebra/order_functions): (min|max)_eq_iff (#8911)

2021-09-03 20:53:48 39cea43
docs(data/subtype): add module docstring (#8900)

2021-09-03 18:48:25 710a76e
chore(algebra/divisibility): help dot notation on `dvd` (#8766)
Add aliases
* `dvd_mul_of_dvd_left` -> `has_dvd.dvd.mul_right`
* `dvd_mul_of_dvd_right` -> `has_dvd.dvd.mul_left`
Add, to help with a few proofs,
* `dvd_rfl`
* `dvd_pow_self`
Use `has_dvd.dvd.trans` more largely.

2021-09-03 09:56:24 5e27f50
feat(analysis/complex/basic): convex_on.sup (#8958)

2021-09-02 21:50:49 fdc24f5
feat(algebra/ordered_ring): `linear_ordered_semiring` extends `linear_ordered_add_comm_monoid` (#8961)

2021-09-02 19:07:49 d821860
feat(group_theory/group_action/basic): class formula, Burnside's lemma (#8801)
This adds class formula and Burnside's lemma for group action, both as an equiv and using cardinals.
I also added a cardinal version of the Orbit-stabilizer theorem.

2021-09-02 15:21:36 17747c0
feat(number_theory): define number fields, function fields and their rings of integers (#8701)
Co-Authored-By: Ashvni <ashvni.n@gmail.com>

2021-09-02 14:35:26 88525a9
feat(ring_theory/ideal): generalize from `integral_closure` to `is_integral_closure` (#8944)
This PR restates a couple of lemmas about ideals the integral closure to use an instance of `is_integral_closure` instead. The originals are still available, but their proofs are now oneliners shelling out to `is_integral_closure`.

2021-09-02 12:25:11 55a7d38
feat(group_theory/coset): rw lemmas involving quotient_group.mk (#8957)
When doing computations with quotient groups, I found these lemmas to be helpful when rewriting.

2021-09-02 12:25:09 baefdf3
fix(group_theory/group_action/defs): deduplicate `const_smul_hom` and `distrib_mul_action.to_add_monoid_hom` (#8953)
This removes `const_smul_hom` as `distrib_mul_action.to_add_monoid_hom` fits a larger family of similarly-named definitions.
This also renames `distrib_mul_action.hom_add_monoid_hom` to `distrib_mul_action.to_add_monoid_End` to better match its statement.
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Definition.20elimination.20contest/near/237347199)

2021-09-02 10:34:12 1dddd7f
feat(algebra/group/hom_instance): additive endomorphisms form a ring (#8954)
We already have all the data to state this, this just provides the extra proofs.
The multiplicative version is nasty because `monoid.End` has two different multiplicative structures depending on whether `End` is unfolded; so this PR leaves that until someone actually needs it.
With this in place we can provide `module.to_add_monoid_End : R →+* add_monoid.End M` in a future PR.

2021-09-02 09:31:58 2fa8251
refactor(*): rename {topological,smooth}_semiring to {topological,smooth}_ring (#8902)
A topological semiring that is a ring, is a topological ring.
A smooth semiring that is a ring, is a smooth ring.
This PR renames:
* `topological_semiring` -> `topological_ring`
* `smooth_semiring` -> `smooth_ring`
It drops the existing `topological_ring` and `smooth_ring`.

2021-09-02 08:19:17 289e6dc
feat(category_theory/limits/kan_extension): Prove (co)reflectivity for Kan extensions (#8962)

2021-09-02 08:19:16 8da6699
chore(analysis/convex/basic): generalize `concave_on.le_on_segment` to monoids (#8959)
This matches the generalization already present on `convex_on.le_on_segment`.

2021-09-02 08:19:14 9d3e3e8
feat(ring_theory/dedekind_domain): the integral closure of a DD is a DD (#8847)
Let `L` be a finite separable extension of `K = Frac(A)`, where `A` is a Dedekind domain. Then any `is_integral_closure C A L` is also a Dedekind domain, in particular for `C := integral_closure A L`.
In combination with the definitions of #8701, we can conclude that rings of integers are Dedekind domains.

2021-09-02 06:16:19 6c24731
feat(order/bounded_lattice): `ne_(bot|top)_iff_exists` (#8960)
Like `ne_zero_iff_exists`

2021-09-01 19:25:02 07c57b5
feat(group_theory): Add `monoid_hom.mker` and generalise the codomain for `monoid_hom.ker` (#8532)
Add `monoid_hom.mker` for `f : M ->* N`, where `M` and `N` are `mul_one_class`es, and `monoid_hom.ker` is now defined for `f : G ->* H`, where `H` is a `mul_one_class`

2021-09-01 17:19:33 0b8a858
feat(tactic/lint): minor linter improvements (#8934)
* Change `#print foo` with `#check @foo` in the output of the linter
* Include the number of linters in the output message
* add `attribute [nolint syn_taut] rfl`

2021-09-01 15:38:10 9b00046
chore(algebra,group_theory,right_theory,linear_algebra): add missing lemmas (#8948)
This adds:
* `sub{group,ring,semiring}.map_id`
* `submodule.add_mem_sup`
* `submodule.map_add_le`
And moves `submodule.sum_mem_supr` and `submodule.sum_mem_bsupr` to an earlier file.

2021-09-01 14:07:44 2beaa28
fix(category_theory/adjunction/basic): Fix typo in docstring (#8950)

2021-09-01 14:07:42 510e65d
feat(topology/algebra/localization): add topological localization (#8894)
We show that ring topologies on a ring `R` form a complete lattice.
We use this to define the topological localization of a topological commutative ring `R` at a submonoid `M`.

2021-09-01 12:16:34 d472e1b
feat(order/basic): recursor for order_dual (#8938)

2021-09-01 12:16:33 0970d07
feat(order/well_founded): define `function.argmin`, `function.argmin_on` (#8895)
Evidently, these are just thin wrappers around `well_founded.min` but I think
this use case is common enough to deserve this specialisation.

2021-09-01 12:16:32 faf5e5c
feat(order/bounded_lattice): unbot and untop (#8885)
`unbot` sends non-`⊥` elements of `with_bot α` to the corresponding element of `α`. `untop` does the analogous thing for `with_top`.

2021-09-01 10:35:59 f3101e8
feat(group_theory/perm/basic): permutations of a subtype (#8691)
This is the same as `(equiv.refl _)^.set.compl .symm.trans (subtype_equiv_right $ by simp)` (up to a `compl`) but with better unfolding.

2021-09-01 07:45:41 73f50ac
feat(algebraic_geometry): Redefine Schemes in terms of isos of locally ringed spaces (#8888)
Addresses the project mentioned in `Scheme.lean` to redefine Schemes in terms of isomorphisms of locally ringed spaces, instead of presheafed spaces.

2021-09-01 07:45:39 5b04a89
feat(measure_theory/conditional_expectation): the integral of the norm of the conditional expectation is lower  (#8318)
Let `m` be a sub-σ-algebra of `m0`, `f` a `m0`-measurable function and `g` a `m`-measurable function, such that their integrals coincide on `m`-measurable sets with finite measure. Then `∫ x in s, ∥g x∥ ∂μ ≤ ∫ x in s, ∥f x∥ ∂μ` on all `m`-measurable sets with finite measure.
This PR also defines a notation `measurable[m] f`, to mean that `f : α → β` is measurable with respect to the `measurable_space` `m` on `α`.

2021-09-01 05:57:01 f0451d8
feat(algebra/group/defs): ext lemmas for (semi)groups and monoids (#8391)
[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.236476.20boolean_algebra.2Eto_boolean_ring/near/242118386)

2021-08-31 23:00:50 065a35d
feat(algebra/{pointwise,algebra/operations}): add `supr_mul` and `mul_supr` (#8923)
Requested by @eric-wieser  on Zulip, https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/submodule.2Esupr_mul/near/250122435
and a couple of helper lemmas.

2021-08-31 21:31:09 9339006
feat(algebra/{module/linear_map, algebra/basic}): Add `distrib_mul_action.to_linear_(map|equiv)` and `mul_semiring_action.to_alg_(hom|equiv)` (#8936)
This adds the following stronger versions of `distrib_mul_action.to_add_monoid_hom`:
* `distrib_mul_action.to_linear_map`
* `distrib_mul_action.to_linear_equiv`
* `mul_semiring_action.to_alg_hom`
* `mul_semiring_action.to_alg_equiv`
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/group.20acting.20on.20algebra/near/251372497)

2021-08-31 15:40:30 3d6a828
chore(order/bounded_lattice): dot-notation lemmas ne.bot_lt and ne.lt_top (#8935)

2021-08-31 15:40:29 12bbd53
chore(topology/metric_space/basic): add `metric.uniform_continuous_on_iff_le` (#8906)
This is a version of `metric.uniform_continuous_on_iff` with `≤ δ` and
`≤ ε` instead of `< δ` and `< ε`. Also golf the proof of
`metric.uniform_continuous_on_iff`.

2021-08-31 15:40:28 603a606
feat(measure_theory/hausdorff_measure): dimH and Hölder/Lipschitz maps (#8361)
* expand module docs;
* prove that a Lipschitz continuous map does not increase Hausdorff measure and Hausdorff dimension of sets;
* prove similar lemmas about Hölder continuous and antilipschitz maps;
* add convenience lemmas for some bundled types and for `Cⁿ` smooth maps;
* Hausdorff dimension of `ℝⁿ` equals `n`;
* prove a baby version of Sard's theorem: if `f : E → F` is a `C¹` smooth map between normed vector spaces such that `finrank ℝ E < finrank ℝ F`, then `(range f)ᶜ` is dense.

2021-08-31 13:58:34 d9b2db9
chore(group_theory/submonoid/center): fix typo and extend docstring (#8937)

2021-08-31 10:54:15 ab967d2
feat(group_theory/submonoid): center of a submonoid (#8921)
This adds `set.center`, `submonoid.center`, `subsemiring.center`, and `subring.center`, to complement the existing `subgroup.center`.
This ran into a timeout, so had to squeeze some `simp`s in an unrelated file.

2021-08-31 09:04:38 6b63c03
fix(order/rel_classes): remove looping instance (#8931)
This instance causes loop with `is_total_preorder.to_is_total`, and was unused in the library.
Caught by the new linter (#8932).

2021-08-31 09:04:37 53f074c
fix(data/complex/basic): better formulas for nsmul and gsmul on complex to fix a diamond (#8928)
As diagnosed by @eric-wieser in https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/diamond.20in.20data.2Ecomplex.2Emodule/near/250318167
After the PR,
```lean
example :
  (sub_neg_monoid.has_scalar_int : has_scalar ℤ ℂ) = (complex.has_scalar : has_scalar ℤ ℂ) :=
rfl
```
works fine, while it fails on current master.

2021-08-31 09:04:36 c04e8a4
feat(logic/basic): equivalence of by_contra and choice (#8912)
Based on an email suggestion from Freek Wiedijk: `classical.choice` is equivalent to the following Type-valued variation on `by_contradiction`:
```lean
axiom classical.by_contradiction' {α : Sort*} : ¬ (α → false) → α
```

2021-08-31 09:04:35 1c13454
feat(algebraic_geometry): Restriction of locally ringed spaces (#8809)
Proves that restriction of presheafed spaces doesn't change the stalks and defines the restriction of a locally ringed space along an open embedding.

2021-08-31 07:22:54 1dbd561
refactor(order/atoms): reorder arguments of `is_simple_lattice.fintype` (#8933)
Previously, this instance would first look for `decidable_eq` instances and after that for `is_simple_lattice` instances. The latter has only 4 instances, while the former takes hundreds of steps. Reordering the arguments makes a lot of type-class searches fail a lot quicker.
Caught by the new linter (#8932).

2021-08-31 02:54:16 22a297c
feat(algebra/module/prod,pi): instances for actions with zero (#8929)

2021-08-31 01:35:58 f4d7205
chore(measure_theory/*): rename `probability_measure` and `finite_measure` (#8831)
Renamed to `is_probability_measure` and `is_finite_measure`, respectively.  Also, `locally_finite_measure` becomes `is_locally_finite_measure`. See
https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.238337.20Weak.20convergence

2021-08-30 18:18:38 6adb5e8
feat(topology/algebra/ordered): monotone convergence in pi types (#8841)
* add typeclasses `Sup_convergence_class` and `Inf_convergence_class`
* reformulate theorems about monotone convergence in terms of these typeclasses;
* provide instances for a linear order with order topology, for products, and for pi types.

2021-08-30 16:14:57 4a65197
chore(algebra/direct_sum/algebra): add missing rfl lemmas (#8924)
I realized I was resorting to nasty unfolding to get these mid-proof

2021-08-30 16:14:56 aa0694a
fix(data/set/finite): drop {α : Type}, fixes universe issue (#8922)

2021-08-30 16:14:55 ad7519a
doc(tactic/lint): instructions on fails_quickly failure (#8910)
* Also set `is_fast` to `tt`, since it takes ~10s on all of mathlib.

2021-08-30 16:14:54 b3807ee
chore(data/finset/basic): lemmas about `(range n).nonempty` (#8905)
Add `finset.nonempty_range_iff`, `finset.range_eq_empty_iff`, and
`range.nonempty_range_succ`.

2021-08-30 14:54:37 1e89df2
chore(algebra/monoid_algebra): convert a filename prefix into a folder (#8925)
This moves:
* `algebra.monoid_algebra` to `algebra.monoid_algebra.basic`
* `algebra.monoid_algebra_to_direct_sum` to `algebra.monoid_algebra.to_direct_sum`

2021-08-30 13:16:49 98466d2
feat(algebra/direct_sum): graded algebras (#8783)
This provides a `direct_sum.galgebra` structure on top of the existing `direct_sum.gmonoid` structure.
This typeclass is used to provide an `algebra R (⨁ i, A i)` instance.
This also renames and improves the stateement of `direct_sum.module.ext` to `direct_sum.linear_map_ext` and adds `direect_sum.ring_hom_ext` and `direct_sum.alg_hom_ext` to match.

2021-08-29 18:50:41 2bae06a
fix(ring_theory/polynomial/homogeneous): spelling mistake in `homogeneous` (#8914)

2021-08-29 14:08:26 395bb6c
feat(algebraic_geometry): Lift isomorphism of sheafed spaces to locally ringed spaces (#8887)
Adds the fact that an isomorphism of sheafed spaces can be lifted to an isomorphism of locally ringed spaces. The main ingredient is the fact that stalk maps of isomorphisms are again isomorphisms.
In particular, this implies that the forgetful functor `LocallyRingedSpace ⥤ SheafedSpace CommRing` reflects isomorphisms.

2021-08-28 19:59:37 d75a2d9
refactor(data/set/finite): use `[fintype (plift ι)]` in `finite_Union` (#8872)
This way we can use `finite_Union` instead of `finite_Union_Prop`.

2021-08-28 18:30:09 db06b5a
feat(group_theory/perm/cycle_type): Fixed points of permutations of prime order (#8832)
A few basic lemmas about fixed points of permutations of prime order.

2021-08-28 18:30:08 e824b88
refactor(category_theory/limits/final): Symmetric API for final and initial functors (#8808)
Dualise the API for cofinal functors to symmetrically support final and initial functors.
This PR renames `cofinal` functors to `final` functors.

2021-08-28 18:30:07 14a992b
chore(data/set_like): some additional documentation (#8765)
Gives some more explanation for `set_like` and what it does and is for.

2021-08-28 17:56:07 0b48570
feat(group_theory/nilpotent): add subgroups of nilpotent group are nilpotent (#8854)

2021-08-28 16:48:45 1aaff8d
feat(measure_theory/decomposition/lebesgue): Lebesgue decomposition for sigma-finite measures (#8875)
This PR shows sigma-finite measures `have_lebesgue_decomposition`. With this instance, `absolutely_continuous_iff_with_density_radon_nikodym_deriv_eq` will provide the Radon-Nikodym theorem for sigma-finite measures.

2021-08-28 09:42:18 42b5e80
feat(data/polynomial/basic): monomial_eq_zero_iff (#8897)
Via a new `monomial_injective`.

2021-08-28 08:03:49 8ee05e9
feat(data/nat/log): Ceil log (#8764)
Defines the upper natural log, which is the least `k` such that `n ≤ b^k`.
Also expand greatly the docs of `data.nat.multiplicity`, in particular to underline that it proves Legendre's theorem.

2021-08-28 02:16:20 d3c592f
chore(scripts): update nolints.txt (#8899)
I am happy to remove some nolints for you!

2021-08-28 01:06:00 0fd51b1
feat(data/real/irrational): exists irrational between any two distinct rationals and reals (#8753)
Did not find these proofs in `data/real/irrational`, seemed like they belong here.  Just proving the standard facts about irrationals between rats and reals.  I am using these lemmas in a repo about the Thomae's function.

2021-08-27 17:22:21 2eaec05
feat(ring_theory): define integrally closed domains (#8893)
In this follow-up to #8882, we define the notion of an integrally closed domain `R`, which contains all integral elements of `Frac(R)`.
We show the equivalence to `is_integral_closure R R K` for a field of fractions `K`.
We provide instances for `is_dedekind_domain`s, `unique_fractorization_monoid`s, and to the integers of a valuation. In particular, the rational root theorem provides a proof that `ℤ` is integrally closed.

2021-08-27 15:28:35 c4cf4c2
feat(algebra/polynomial/big_operators): coeff of sums and prods of polynomials (#8680)
Additionally, provide results for degree and nat_degree over lists,
which generalize away from requiring commutativity.

2021-08-27 14:36:55 dcd60e2
feat(ring_theory/trace): the trace form is nondegenerate (#8777)
This PR shows the determinant of the trace form is nonzero over a finite separable field extension. This is an important ingredient in showing the integral closure of a Dedekind domain in a finite separable extension is again a Dedekind domain, i.e. that rings of integers are Dedekind domains. We extend the results of #8762 to write the trace form as a Vandermonde matrix to get a nice expression for the determinant, then use separability to show this value is nonzero.

2021-08-27 14:36:54 7f25698
feat(analysis/complex/isometry): Show that certain complex isometries are not equal (#8646)
1. Lemma `reflection_rotation` proves that rotation by `(a : circle)` is not equal to reflection over the x-axis (i.e, `conj_lie`).  
2. Lemma `rotation_injective` proves that rotation by different `(a b: circle)` are not the same,(i.e, `rotation` is injective).
Co-authored by Kyle Miller

2021-08-27 14:02:35 7cfc987
feat(measure_theory/decomposition/radon_nikodym): the Radon-Nikodym theorem (#8763)
The Radon-Nikodym theorem 🎉

2021-08-27 12:25:45 023a816
feat(algebra): define a bundled type of absolute values (#8881)
The type `absolute_value R S` is a bundled version of the typeclass `is_absolute_value R S` defined in `data/real/cau_seq.lean` (why was it defined there?), putting both in one file `algebra/absolute_value.lean`. The lemmas from `is_abs_val` have been copied mostly literally, with weakened assumptions when possible. Maps between the bundled and unbundled versions are also available.
We also define `absolute_value.abs` that represents the "standard" absolute value `abs`.
The point of this PR is both to modernize absolute values into bundled structures, and to make it easier to extend absolute values to represent "absolute values respecting the Euclidean domain structure", and from there "absolute values that show the class group is finite".

2021-08-27 11:47:58 a327851
feat(ring_theory): a typeclass `is_integral_closure` (#8882)
The typeclass `is_integral_closure A R B` states `A` is the integral closure of `R` in `B`, i.e. that an element of `B` is integral over `R` iff it is an element of (the image of) `A`.
We also show that any integral extension of `R` contained in `B` is contained in `A`, and the integral closure is unique up to isomorphism.
This was suggested in the review of #8701, in order to define a characteristic predicate for rings of integers.

2021-08-27 10:03:00 88e47d7
feat(linear_algebra/matrix/nonsingular_inverse): adjugate_mul_distrib_aux (#8681)
We prove towards the fact that the adjugate of a matrix distributes
over the product. The current proof assumes regularity of the matrices.
In the general case, this hypothesis is not required, but this lemma
will be crucial in a follow-up PR
which has to use polynomial matrices for the general case.
Additionally, we provide many API lemmas for det, cramer, 
nonsing_inv, and adjugate.

2021-08-27 08:03:55 0c50326
refactor(*): use `is_empty` instead of `not (nonempty α)` (#8858)
`eq_empty_of_not_nonempty` gets dropped in favour of `eq_empty_of_is_empty`.

2021-08-27 07:04:59 fe13f03
feat(category_theory/structured_arrow): Duality between structured and costructured arrows (#8807)
This PR formally sets up the duality of structured and costructured arrows as equivalences of categories. Unfortunately, the code is a bit repetitive, as the four functors introduced all follow a similar pattern, which I wasn't able to abstract out. Suggestions are welcome!

2021-08-27 06:31:17 4705a6b
doc(ring_theory/hahn_series): Update Hahn Series docstring (#8883)
Updates `ring_theory/hahn_series` docstring to remove outdated TODOs

2021-08-27 05:01:51 a9de197
feat(algebra/big_operators/basic): add `prod_dite_of_false`, `prod_dite_of_true` (#8865)
The proofs are not mine cf [Zulip conversation](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60prod_dite_of_true.60)

2021-08-27 03:31:00 bcd5cd3
feat(algebra/pointwise): add to_additive attributes for pointwise smul (#8878)
I wanted this to generalize some definitions in #2819 but it should be independent.

2021-08-27 02:26:16 bb4026f
chore(scripts): update nolints.txt (#8886)
I am happy to remove some nolints for you!

2021-08-27 00:42:51 11e3047
feat(algebra/ordered_monoid): min_top_(left|right) (#8880)

2021-08-26 19:37:09 e290569
feat(data/nat/totient): add nat.totient_prime_iff (#8833)

2021-08-26 19:37:08 080362d
feat(data/finset/pi_induction): induction on `Π i, finset (α i)` (#8794)

2021-08-26 19:37:07 83490fc
feat(data/multiset/basic): add some lemmas (#8787)

2021-08-26 18:49:05 d9f4713
feat(ring_theory/trace): Tr(x) is the sum of embeddings σ x into an algebraically closed field (#8762)
The point of this PR is to provide the other formulation of "the trace of `x` is the sum of its conjugates", alongside `trace_eq_sum_roots`, namely `trace_eq_sum_embeddings`. We do so by exploiting the bijection between conjugate roots to `x : L` over `K` and embeddings of `K(x)`, then counting the number of embeddings of `x` to go to the whole of `L`.

2021-08-26 16:48:12 5a2082d
chore(category/grothendieck): split definition to avoid timeout (#8871)
Helpful for #8807.

2021-08-26 16:48:10 9038709
feat(analysis/normed_space/inner_product): multiplication by I is real-orthogonal (#8852)

2021-08-26 16:48:09 5bd69fd
feat(ring_theory/ideal/local_ring): Isomorphisms are local (#8850)
Adds the fact that isomorphisms (and ring equivs) are local ring homomorphisms.

2021-08-26 16:48:08 5afdaea
feat(data/fin): reverse_induction (#8845)

2021-08-26 16:48:07 678a2b5
feat(data/list,multiset,finset): monotone_filter_(left|right) (#8842)

2021-08-26 16:48:06 8e87f42
feat(tactic/lint/misc): Add syntactic tautology linter (#8821)
Add a linter that checks whether a lemma is a declaration that `∀ a b ... z,e₁ = e₂` where `e₁` and `e₂` are equal
exprs, we call declarations of this form syntactic tautologies.
Such lemmas are (mostly) useless and sometimes introduced unintentionally when proving basic facts
with rfl when elaboration results in a different term than the user intended.
@PatrickMassot suggested this at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/syntactic.20tautology.20linter/near/250267477.
The found problems are fixed in #8811.

2021-08-26 13:06:18 70e1f9a
feat(data/fin): add_cases (#8876)

2021-08-26 13:06:17 976e930
chore(archive/imo/README): whitespace breaks links (#8874)

2021-08-26 13:06:15 0d07d04
chore(data/set): add a few lemmas and `@[simp]` attrs (#8873)

2021-08-26 13:06:14 1f13610
feat(*): remove the `fintype` requirement from matrices. (#8810)
For historical reasons, `matrix` has always had `fintype` attached to it. I remove this artificial limitation, but with a big caveat; multiplication is currently defined in terms of the dot product, which requires finiteness; therefore, any multiplicative structure on matrices currently requires fintypes. This can be removed in future contributions, however.

2021-08-26 11:17:26 0861cc7
refactor(*): move code about `ulift`/`plift` (#8863)
* move old file about `ulift`/`plift` from `data.ulift` to `control.ulift`;
* redefine `ulift.map` etc without pattern matching;
* create new `data.ulift`, move `ulift.subsingleton` etc from `data.equiv.basic` to this file;
* add `ulift.is_empty` and `plift.is_empty`;
* add `ulift.exists`, `plift.exists`, `ulift.forall`, and `plift.forall`;
* rename `equiv.nonempty_iff_nonempty` to `equiv.nonempty_congr` to match `equiv.subsingleton_congr` etc;
* rename `plift.fintype` to `plift.fintype_Prop`, add a new `plift.fintype`.

2021-08-26 11:17:25 2a6fef3
refactor(order/filter/bases): allow `ι : Sort*` (#8856)
* `ι` in `filter.has_basis (l : filter α) (p : ι → Prop) (s : ι → set )` now can be a `Sort *`;
* some lemmas now have "primed" versions that use `pprod` instead of `prod`;
* new lemma: `filter.has_basis_supr`.
I also added a few missing lemmas to `data.pprod` and golfed a couple of proofs.

2021-08-26 11:17:24 3287c94
refactor(tactic/ext): simplify ext attribute (#8785)
This simplifies the `ext` attribute from taking a list with `*`, `(->)` and names to just `@[ext]` or `@[ext ident]`. The `(->)` option is only used once, in the file that declares the `ext` attribute itself, so it's not worth the parser complexity. The ability to remove attributes with `@[ext -foo]` is removed, but I don't think it was tested because it was never used and doesn't work anyway.
Also fixes an issue with ext attributes being quadratic (in the number of ext attributes applied), and also makes `ext` attributes remove themselves (the real work of ext attributes is done by two internal attributes `_ext_core` and `_ext_lemma_core`), so that they don't pollute `#print` output. Before:
```lean
#print funext
@[_ext_lemma_core, ext list.cons.{0} ext_param_type (sum.inr.{0 0} (option.{0} name) (option.{0} name) (option.some.{0} name (name.mk_numeral (unsigned.of_nat' (has_zero.zero.{0} nat nat.has_zero)) name.anonymous))) (list.cons.{0} ext_param_type (sum.inr.{0 0} (option.{0} name) (option.{0} name) (option.some.{0} name (name.mk_string "thunk" name.anonymous))) (list.nil.{0} ext_param_type)), intro!]
theorem funext : ∀ {α : Sort u} {β : α → Sort v} {f₁ f₂ : Π (x : α), β x}, (∀ (x : α), f₁ x = f₂ x) → f₁ = f₂ :=
```
After:
```lean
#print funext
@[_ext_lemma_core, intro!]
theorem funext : ∀ {α : Sort u} {β : α → Sort v} {f₁ f₂ : Π (x : α), β x}, (∀ (x : α), f₁ x = f₂ x) → f₁ = f₂ :=
```

2021-08-26 11:17:23 a4b33d3
feat(data/matrix/kronecker): add two reindex lemmas (#8774)
Added two lemmas `kronecker_map_reindex_right` and `kronecker_map_reindex_left` (used in LTE) and moved the two `assoc` lemmas some lines up, before the `linear` section, because they are unrelated to any linearity business.

2021-08-26 11:17:22 3e5bbca
feat(field_theory/intermediate_field): generalize `algebra` instances (#8761)
The `algebra` and `is_scalar_tower` instances for `intermediate_field` are (again) as general as those for `subalgebra`.

2021-08-26 11:17:21 2c698bd
docs(set_theory/zfc): add module docstring and missing def docstrings (#8744)

2021-08-26 10:02:38 2e1e98f
feat(linear_algebra/bilinear_form): bilinear forms with `det ≠ 0` are nonsingular (#8824)
In particular, the trace form is such a bilinear form (see #8777).

2021-08-26 10:02:37 147af57
feat(category_theory/is_connected): The opposite of a connected category is connected (#8806)

2021-08-26 10:02:36 058f639
feat(data/equiv/fin): fin_succ_equiv_last (#8805)
This commit changes the type of `fin_succ_equiv'`. `fin_succ_equiv' i` used to take an argument of type `fin n` which was 
strange and it now takes an argument of type `fin (n + 1)` meaning it is now possible to send `fin.last n` to `none` if desired. I also defined `fin.succ_equiv_last`, the canonical equiv `fin (n + 1)` to `option (fin n)` sending `fin.last` to `none`.

2021-08-26 09:18:22 94d4a32
feat(linear_algebra/bilinear_form): the dual basis for a nondegenerate bilin form (#8823)
Let `B` be a nondegenerate (symmetric) bilinear form on a finite-dimensional vector space `V` and `b` a basis on `V`. Then there is a "dual basis" `d` such that `d.repr x i = B x (b i)` and `B (d i) (b j) = B (b i) (d j) = if i = j then 1 else 0`.
In a follow-up PR, we'll show that the trace form for `L / K` produces a dual basis consisting only of elements integral over the ring of integers of `K`.

2021-08-26 07:01:23 acbe935
chore(topology/metric_space): add 2 lemmas, golf (#8861)

2021-08-26 07:01:22 9438552
feat(data/fin): cast_add_lt (#8830)

2021-08-26 07:01:21 6c6fc02
feat(data/fin): cast_add_right (#8829)

2021-08-26 07:01:20 bafeccf
feat(data/fin): fin.succ_cast_succ (#8828)

2021-08-26 07:01:19 cb1932d
feat(data/complex/exponential): bound on exp for arbitrary arguments (#8667)
This PR is for a new lemma (currently called `exp_bound'`) which proves `exp x` is close to its `n`th degree taylor expansion for sufficiently large `n`. Unlike the previous bound, this lemma can be instantiated on any real `x` rather than just `x` with absolute value less than or equal to 1. I am separating this lemma out from #8002 because I think it stands on its own.
The last time I checked it was sorry free - but that was before I merged with master and moved it to a different branch. It may also benefit from a little golfing.
There are a few lemmas I proved as well to support this - one about the relative size of factorials and a few about sums of geometric sequences. The ~~geometric series ones should probably be generalized and moved to another file~~ this generalization sort of exists and is in the algebra.geom_sum file. I didn't find it initially since I was searching for "geometric" not "geom".

2021-08-26 05:17:35 fe47777
feat(analysis/complex/upper_half_plane): new file (#8377)
This file defines `upper_half_plane` to be the upper half plane in `ℂ`.
We furthermore equip it with the structure of an `SL(2,ℝ)` action by
fractional linear transformations.
Co-authored by Heather Macbeth <25316162+hrmacbeth@users.noreply.github.com>
Co-authored by Marc Masdeu <marc.masdeu@gmail.com>

2021-08-26 03:51:48 7e781a8
chore(*): Fix syntactic tautologies (#8811)
Fix a few lemmas that were accidentally tautological in the sense that they were equations with syntactically equal LHS and RHS.
A linter will be added in a second PR, for now we just fix the found issues.
It would be great if a category expert like @semorrison would check the category ones, as its unclear to me which direction they are meant to go.
As pointed out by @PatrickMassot on Zulip https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/syntactic.20tautology.20linter/near/250267477.
Thanks to @eric-wieser for helping figure out the corrected versions.

2021-08-26 02:42:53 daf0d02
feat(archive/imo): README.md (#8799)
Proposed text for a README file in the IMO directory. I don't think we have a particular problem with IMO submissions, but thought it could be useful to set the parameters around IMO problems, as it's never been completely clear they belong in mathlib.
If we merge this, or something like it, I'll link #imo on Zulip to it.

2021-08-25 21:27:03 8befa82
feat(group_theory/perm/list): lemmas on form_perm (#8848)

2021-08-25 21:27:01 49af34d
feat(group_theory/perm/cycles): same_cycle and cycle_of lemmas (#8835)

2021-08-25 18:32:55 40bd7c6
feat(data/nat/modeq): Rotating list.repeat (#8817)
Some consequences of `list.rotate_eq_self_iff_eq_repeat`.

2021-08-25 18:32:54 c544742
feat(linear_algebra/finite_dimensional): add finrank_map_le (#8815)

2021-08-25 18:32:53 6a41805
chore(group_theory/group_action/basic): `to_additive` attributes throughout (#8814)

2021-08-25 18:32:52 b6e6c84
feat(data/finset/basic): to_list (#8797)
Produce a list of the elements of a finite set using choice.

2021-08-25 18:32:50 aca0874
chore(algebra/direct_sum): Move all the algebraic structure on `direct_sum` into a single directory (#8771)
This ends up splitting one file in two, but all the contents are just moved.

2021-08-25 18:32:49 df8818c
feat(data/nat/multiplicity): bound on the factorial multiplicity (#8767)
This proves `multiplicity p n! ≤ n/(p - 1)`, for `p` prime and `n` natural.

2021-08-25 18:32:48 301eb10
feat(data/polynomial/monic): monic.is_regular (#8679)
This golfs/generalizes some proofs.
Additionally, provide some helper API for `is_regular`,
for non-zeros in domains,
and for smul of units.

2021-08-25 17:03:35 b364cfc
feat(linear_algebra/basis): if `R ≃ R'`, map a basis for `R`-module `M` to `R'`-module `M` (#8699)
If `R` and `R'` are isomorphic rings that act identically on a module `M`, then a basis for `M` as `R`-module is also a basis for `M` as `R'`-module.

2021-08-25 15:26:51 0ad5abc
chore(data/set/finite): golf 2 proofs (#8862)
Also add `finset.coe_emb`.

2021-08-25 12:58:19 97c327c
feat(tactic/suggest): suggest using X, to filter results (#8819)
You can now write `suggest using X`, to only give suggestions which make use of the local hypothesis `X`.
Similarly `suggest using X Y Z` for multiple hypotheses. `library_search using X` is also enabled.
This makes `suggest` much more useful. Previously
```
example (P Q : list ℕ) : list ℕ := by suggest
```
would have just said `exact P`.
Now you can write
```
example (P Q : list ℕ) : list ℕ := by suggest using P Q
```
and get:
```
Try this: exact list.diff P Q
Try this: exact list.union P Q
Try this: exact list.inter P Q
Try this: exact list.append P Q
Try this: exact list.bag_inter P Q
Try this: exact list.remove_all P Q
Try this: exact list.reverse_core P Q
```

2021-08-25 06:39:27 26a3286
fix(data/set/lattice): lemmas about `Union`/`Inter` over `p : Prop` (#8860)
With recently added `@[congr]` lemmas, it suffices to deal with unions/inters over `true` and `false`.

2021-08-25 06:39:26 4a0c3d7
feat(linear_algebra/finite_dimension): nontriviality lemmas (#8851)
A vector space of `finrank` greater than zero is `nontrivial`, likewise a vector space whose `finrank` is equal to the successor of a natural number.
Also write the non-`fact` version of `finite_dimensional_of_finrank_eq_succ`, a lemma which previously existed under a `fact` hypothesis, and rename the `fact` version to `fact_finite_dimensional_of_finrank_eq_succ`.

2021-08-25 06:39:25 fd03625
chore(ring_theory/ideal): Move local rings into separate file (#8849)
Moves the material on local rings and local ring homomorphisms into a separate file and adds a module docstring.

2021-08-25 06:39:24 88db4e2
feat(ring_theory): `M / S` is noetherian if `M / S / R` is (#8846)
Let `M` be an `S`-module and `S` an `R`-algebra. Then to show `M` is noetherian as an `S`-module, it suffices to show it is noetherian as an `R`-module.

2021-08-25 06:39:23 00e57d3
chore(order/rel_iso): rename `order_embedding.of_map_rel_iff` to `of_map_le_iff` (#8839)
The old name comes from `rel_embedding`.

2021-08-25 06:39:21 ef428c6
feat(topology/metric_space): add `uniform_embedding.comap_metric_space` (#8838)
* add `uniform_embedding.comap_metric_space` and
  `uniform_inducing.comap_pseudo_metric_space`;
* use the former for `int.metric_space`;
* also add `emetric.closed_ball_mem_nhds`.

2021-08-25 05:54:13 bd9622f
chore(category_theory/Fintype): Fix universe restriction in skeleton (#8855)
This removes a universe restriction in the existence of a skeleton for the category `Fintype`.
Once merged, `Fintype.skeleton.{u}` will be a (small) skeleton for `Fintype.{u}`, with `u` any universe parameter.

2021-08-24 21:23:20 6c3dda5
feat(measure_theory/measure/vector_measure): add absolute continuity for vector measures (#8779)
This PR defines absolute continuity for vector measures and shows that a signed measure is absolutely continuous wrt to a positive measure iff its total variation is absolutely continuous wrt to that measure.

2021-08-24 10:50:23 1dda1cd
feat(algebra/big_operators/finprod): a few more lemmas (#8843)
* versions of `monoid_hom.map_finprod` that assume properties of
  `f : M →* N` instead of finiteness of the support;
* `finsum_smul`, `smul_finsum`, `finprod_inv_distrib`: missing
  analogues of lemmas from `finset.prod`/`finset.sum` API.

2021-08-24 09:54:38 a21fcfa
feat(data/real/nnreal): upgrade `nnabs` to a `monoid_with_zero_hom` (#8844)
Other changes:
* add `nnreal.finset_sup_div`;
* rename `nnreal.coe_nnabs` to `real.coe_nnabs`;
* add `real.nndist_eq` and `real.nndist_eq'`.

2021-08-24 08:27:38 19ae317
feat(measure_theory/interval_integral): strong version of FTC-2 (#7978)
The equality `∫ y in a..b, f' y = f b - f a` is currently proved in mathlib assuming that `f'` is continuous. We weaken the assumption, assuming only that `f'` is integrable.

2021-08-24 04:00:04 737b208
feat(linear_algebra/dimension): generalize dim_map_le to heterogeneous universes (#8800)
Per @hrmacbeth's [request on zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Behaviour.20of.20finrank.20under.20morphisms).

2021-08-24 02:16:33 4aa8705
chore(scripts): update nolints.txt (#8840)
I am happy to remove some nolints for you!

2021-08-23 20:37:30 26448a2
feat(analysis/normed_space/exponential): define exponential in a Banach algebra and prove basic results (#8576)

2021-08-23 17:56:01 2f4dc3a
feat(ring_theory): generalize `exists_integral_multiple` (#8827)
Not only is `z * (y : integral_closure R A)` integral, so is `z * (y : R)`!

2021-08-23 17:55:59 700effa
feat(ring_theory/localization): the algebraic elements over `Frac(R)` are those over `R` (#8826)
We had this lemma for `L / K` is algebraic iff `L / A` is, but now we also have it elementwise!

2021-08-23 17:55:58 2a69dc2
feat(ring_theory): two little lemmas on Noetherianness (#8825)
No real deep thoughts behind these lemmas, just that they are needed to show the integral closure of a Dedekind domain is Noetherian.

2021-08-23 17:55:57 8a7e4f7
feat(measure_theory): volume of a (closed) L∞-ball (#8791)
* pi measure of a (closed or open) ball;
* volume of a (closed or open) ball in
  - `Π i, α i`;
  - `ℝ`;
  - `ι → ℝ`;
* volumes of `univ`, `emetric.ball`, and `emetric.closed_ball` in `ℝ`.

2021-08-23 17:55:56 ff85e9c
feat(measure_theory/measure/measure_space): obtain pairwise disjoint spanning sets wrt. two measures (#8750)
Given two sigma finite measures, there exists a sequence of pairwise disjoint spanning sets that are finite wrt. both measures

2021-08-23 17:55:55 98a6329
refactor(algebra/group_power): use `covariant_class` (#8713)
## Main changes
* use `covariant_class` instead of `canonically_ordered_*` or `ordered_add_*` as an assumption in many lemmas;
* move some lemmas to the root namespace;
* use `to_additive` for more lemmas;
## Detailed list of API changes
* `canonically_ordered_comm_semiring.pow_le_pow_of_le_left`:
  - rename to `pow_le_pow_of_le_left'`;
  - assume `[covariant_class M M (*) (≤)]`;
  - use `to_additive` to generate `nsmul_le_nsmul_of_le_right`;
* `canonically_ordered_comm_semiring.one_le_pow_of_one_le`:
  - rename to `one_le_pow_of_one_le`';
  - assume `[covariant_class M M (*) (≤)]`;
  - use `to_additive` to generate `nsmul_nonneg`;
* `canonically_ordered_comm_semiring.pow_le_one`:
  - rename to `pow_le_one'`;
  - assume `[covariant_class M M (*) (≤)]`;
  - use `to_additive` to generate `nsmul_nonpos`;
* add `pow_le_pow'`, generate `nsmul_le_nsmul`;
* add `pow_le_pow_of_le_one'` and `nsmul_le_nsmul_of_nonpos`;
* add `one_lt_pow'`, generate `nsmul_pos`;
  - as a side effect, `nsmul_pos` now assumes `n ≠ 0` instead of `0 < n`.
* add `pow_lt_one'`, generate `nsmul_neg`;
* add `pow_lt_pow'`, generate `nsmul_lt_nsmul`;
* generalize `one_le_pow_iff` and `pow_le_one_iff`, generate `nsmul_nonneg_iff` and `nsmul_nonpos_iff`;
* generalize `one_lt_pow_iff`, `pow_lt_one_iff`, and `pow_eq_one_iff`, generate `nsmul_pos_iff`, `nsmul_neg_iff`, and `nsmul_eq_zero_iff`;
* add `one_le_gpow`, generate `gsmul_nonneg`;
* rename `eq_of_sq_eq_sq` to `sq_eq_sq`, golf;
* drop `eq_one_of_pow_eq_one` in favor of the `iff` version `pow_eq_one_iff`;
* add missing instance `nat.ordered_comm_semiring`;
## Misc changes
* replace some proofs about `nat.pow` with references to generic lemmas;
* add `nnreal.coe_eq_one`;

2021-08-23 17:55:54 b7f0323
feat(topology): interior of a finite product of sets (#8695)
Also finishes the filter inf work from #8657 proving stronger lemmas for
filter.infi

2021-08-23 16:45:34 608faf0
feat(measure_theory/function/conditional_expectation): uniqueness of the conditional expectation (#8802)
The main part of the PR is the new file `ae_eq_of_integral`, in which many different lemmas prove variants of the statement "if two functions have same integral on all sets, then they are equal almost everywhere".
In the file `conditional_expectation`, a similar lemma is written for functions which have same integral on all sets in a sub-sigma-algebra and are measurable with respect to that sigma-algebra. This proves the uniqueness of the conditional expectation.

2021-08-23 16:02:50 9a7d9a8
feat(group_theory/nilpotent): add def lemmas, basic lemmas on central series (#8730)
Add to API for nilpotent groups with simp def lemmas and other basic properties of central series.

2021-08-23 14:22:14 df3e886
feat(group_theory/group_action): generalize mul_action.function_End to other endomorphisms (#8724)
The main aim of this PR is to remove [`intermediate_field.subgroup_action`](https://leanprover-community.github.io/mathlib_docs/field_theory/galois.html#intermediate_field.subgroup_action) which is a weird special case of the much more general instance `f • a = f a`, added in this PR as `alg_equiv.apply_mul_semiring_action`. We add the same actions for all the other hom types for consistency.
These generalizations are in line with the `mul_action.function_End` (renamed to `function.End.apply_mul_action`) and `mul_action.perm` (renamed to `equiv.perm.apply_mul_action`) instances introduced by @dwarn, providing any endomorphism that has a monoid structure with a faithful `mul_action` corresponding to function application.
Note that there is no monoid structure on `ring_equiv`, or `alg_hom`, so this PR does not bother with the corresponding action.

2021-08-23 12:46:47 3c49044
feat(data/list/nodup): nodup.nth_le_inj_iff (#8813)
This allows rewriting as an `inj_iff` lemma directly via proj notation.

2021-08-23 12:46:47 f8f551a
feat(data/fintype/basic): choose_subtype_eq (#8812)
Choosing out of a finite subtype such that the underlying value is precisely some value of the parent type works as intended.

2021-08-23 12:00:47 a85c9f6
chore(field_theory): make `is_separable` an instance parameter (#8741)
There were a few places that had an explicit `is_separable` parameter. For simplicity and consistency, let's make them all instance params.

2021-08-23 10:17:14 8b9a47b
feat(data/finset/basic): finset.exists_ne_of_one_lt_card (#8816)
Analog of `fintype.exists_ne_of_one_lt_card`.

2021-08-23 10:17:13 a52a9fe
chore(data/multiset/basic): move abs_sum_le_sum_abs from algebra/big_operators/basic.lean. (#8804)
There doesn't seem to be a reason for the place it has now.

2021-08-23 10:17:12 f98fc00
docs(logic/relation): add module docstring (#8773)
Also fix whitespaces

2021-08-23 10:17:11 c811dd7
feat(data/nat/mul_ind): multiplicative induction principles (#8514)

2021-08-23 09:16:14 f949172
feat(data/polynomial/basic): polynomial.op_ring_equiv (#8537)

2021-08-22 20:10:11 9945a16
refactor(analysis/normed_space/{add_torsor, mazur_ulam}): adjust Mazur-Ulam file to use affine isometries (#8661)

2021-08-22 19:02:17 d9113ec
doc(linear_algebra/trace): fix error in title (#8803)
the first two lines of this were super contradictory

2021-08-22 16:54:23 87f14e3
feat(topology/basic): interior of a singleton (#8784)
* add generic lemmas `interior_singleton`, `closure_compl_singleton`;
* add more lemmas and instances about `ne_bot (𝓝[{x}ᶜ] x)`;
* rename `dense_compl_singleton` to `dense_compl_singleton_iff_not_open`,
  add new `dense_compl_singleton` that assumes `[ne_bot (𝓝[{x}ᶜ] x)]`.

2021-08-22 16:54:22 db9d4a3
feat(data/finset,order/conditionally_complete_lattice): lemmas about `min'/max'` (#8782)
## `data/finset/*`
* add `finset.nonempty.to_set`;
* add lemmas `finset.max'_lt_iff`, `finset.lt_min'_iff`,
  `finset.max'_eq_sup'`, `finset.min'_eq_inf'`;
* rewrite `finset.induction_on_max` without using `finset.card`,
  move one step to `finset.lt_max'_of_mem_erase_max'`;
## `order/conditionally_complete_lattice`
* add lemmas relating `Sup`/`Inf` of a nonempty finite set in a
  conditionally complete lattice to
 `finset.sup'`/`finset.inf'`/`finset.max'`/`finset.min'`;
* a few more lemmas about `Sup`/`Inf` of a nonempty finite set
  in a conditionally complete lattice / linear order;
## `order/filter/at_top_bot`
* golf the proof of `filter.high_scores`.

2021-08-22 16:54:21 ea9cd02
refactor(geometry/euclidean/basic): adjust Euclidean geometry to use affine isometries for reflections (#8662)

2021-08-22 15:49:31 a9c1300
refactor(topology/metric_space/basic): rename `closed_ball_Icc` (#8790)
* rename `closed_ball_Icc` to `real.closed_ball_eq`;
* add `real.ball_eq`, `int.ball_eq`, `int.closed_ball_eq`,
  `int.preimage_ball`, `int.preimage_closed_ball`.

2021-08-22 13:58:19 373911d
chore(measure_theory): make `μ` an explicit argument in `subsingleton.measure_zero` etc (#8793)

2021-08-22 03:08:52 8a96d00
chore(scripts): update nolints.txt (#8798)
I am happy to remove some nolints for you!

2021-08-22 01:10:57 f915106
chore(data/set/lattice): a few lemmas, golf (#8795)

2021-08-21 21:43:39 d3e20b4
chore(data/multiset/basic): consistently use singleton notation (#8786)

2021-08-21 21:43:38 252cb02
feat(linear_algebra/vandermonde): `vandermonde v` multiplied by its transpose (#8776)
Two not very exciting lemmas about multiplying a Vandermonde matrix by its transpose (one for each side). I don't know if they are really useful, so I could also just inline them in #8777.

2021-08-21 21:43:37 5f51771
feat(linear_algebra/bilinear_form): basis changing `bilin_form.to_matrix` (#8775)
A few `simp` lemmas on bilinear forms.

2021-08-21 21:43:36 c44f19f
feat(algebra/associated): simple lemmas and dot notation (#8770)
Introduce
* `prime.exists_mem_finset_dvd`
* `prime.not_dvd_one`
Rename
* `exists_mem_multiset_dvd_of_prime` -> `prime.exists_mem_multiset_dvd`
* `left_dvd_or_dvd_right_of_dvd_prime_mul ` ->`prime.left_dvd_or_dvd_right_of_dvd_mul`

2021-08-21 19:52:15 57e127a
refactor(order/complete_lattice): use `is_empty` (#8796)
* change `set.univ_eq_empty_iff` to use `is_empty`;
* rename `set.range_eq_empty` to `set.range_eq_empty_iff`;
* add new `set.range_eq_empty`, it assumes `[is_empty α]`;
* combine `supr_of_empty`, `supr_of_empty'`, and `supr_empty` into `supr_of_empty`, same for `infi`;
* replace `csupr_neg` with `csupr_of_empty` and `csupr_false`;
* adjust some proofs to use `casesI is_empty_of_nonempty α` instead of `by_cases h : nonempty α`.

2021-08-21 19:52:14 8eba262
feat(topology/metric_space/basic): union of balls `ball x n`, `n : ℕ` (#8792)

2021-08-21 19:52:13 9b60e0f
feat(data/set/basic): add `pairwise_on_pair` (#8789)
Add `set.pairwise_on_insert`, `set.pairwise_on_pair`, and `set.pairwise_on_pair_of_symmetric`.

2021-08-21 19:52:12 44b8138
chore(topology/instances/ennreal): use `tactic.lift` (#8788)
* use `tactic.lift` in two proofs;
* use the `order_dual` trick in one proof.

2021-08-21 19:52:11 e00afed
feat(topology/metric_space): turn `nonempty_ball` into an `iff` (#8747)
* add `set.univ_pi_empty`;
* turn `metric.nonempty_ball` into an `iff`, mark it with `@[simp]`; add `metric.ball_eq_empty`
* do the same thing to `closed_ball`s;
* add primed versions of `metric.ball_pi` and `metric.closed_ball_pi`.

2021-08-21 18:46:32 d31b85f
feat(data/list/rotate): is_rotated_append (#8780)
`list.append` is commutative with respect to `~r`.

2021-08-21 18:46:31 0760b20
feat(topology/metric_space): metrizable spaces (#8759)
Define (pseudo)-metric space constructors for metrizable topological spaces.

2021-08-21 17:31:49 bafe207
chore(linear_algebra): remove `→ₗ` notation where the ring is not specified (#8778)
This PR removes the notation `M →ₗ N` for linear maps, where the ring is not specified. This is not used much in the library, and is needed for an upcoming refactor that will generalize linear maps to semilinear maps. See the discussion [here](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Semilinear.20maps).

2021-08-21 15:59:17 897e4ed
feat(field_theory): finite fields exist (#8692)

2021-08-21 12:26:51 f72126b
chore(algebra/gcd_monoid): move `algebra.gcd_monoid` to `algebra.gcd_monoid.basic` (#8772)

2021-08-21 05:42:59 f36c98e
chore(*): remove spurious whitespace (#8769)

2021-08-20 21:38:03 d869256
refactor(data/nat/lattice): move code, add lemmas (#8708)
* move `nat.conditionally_complete_linear_order_with_bot` and `enat.complete_linear_order` to a new file `data.nat.lattice`;
* add a few lemmas (`nat.supr_lt_succ` etc), move `set.bUnion_lt_succ` to the same file;
* use `galois_insertion.lift_complete_lattice` to define `enat.complete_linear_order`.

2021-08-20 14:42:08 45e7eb8
feat(dynamics/fixed_points): simple lemmas (#8768)

2021-08-20 14:42:07 6ae3747
feat(algebra/big_operators): the product over `{x // x ∈ m}` is the product over `m.to_finset` (#8742)

2021-08-20 14:42:06 d62a461
feat(linear_algebra/determinant): `det (M ⬝ N) = det (N ⬝ M)` if `M` is invertible (#8720)
If `M` is a square or invertible matrix, then `det (M ⬝ N) = det (N ⬝ M)`. This is basically just using `mul_comm` on `det M * det N`, except for some tricky rewriting to handle the invertible case.

2021-08-20 14:42:05 7ccf463
feat(algebra): is_smul_regular for `pi`, `finsupp`, `matrix`, `polynomial` (#8716)
Also provide same lemma for finsupp, and specialize it for matrices and polynomials
Inspired by 
https://github.com/leanprover-community/mathlib/pull/8681#discussion_r689320217
https://github.com/leanprover-community/mathlib/pull/8679#discussion_r689545373

2021-08-20 14:42:03 aee7bad
feat(data/list/rotate): cyclic_permutations (#8678)
For `l ~ l'` we have `list.permutations`. We provide the list of cyclic permutations of `l` such that all members are `l ~r l'`. This relationship is proven, as well as the induced `nodup` of the list of cyclic permutants.
This also simplifies the `cycle.list` definition, and removed the requirement for decidable equality in it.

2021-08-20 14:42:02 7e8432d
chore(algebra/group_power/lemmas): Lemmas about gsmul (#8618)
This restates some existing lemmas as `monotone` and `strict_monotone`, and provides new lemmas about the right argument of gsmul:
* `gsmul_le_gsmul'`
* `gsmul_lt_gsmul'`
* `gsmul_le_gsmul_iff'`
* `gsmul_lt_gsmul_iff'`
This also removes an unnecessary `linear_order` assumption from `gsmul_le_gsmul_iff` and `gsmul_lt_gsmul_iff`.

2021-08-20 14:42:00 7265a4e
feat(linear_algebra/dimension): generalize inequalities and invariance of dimension to arbitrary rings (#8343)
We implement some of the results of [_Les familles libres maximales d'un module ont-elles le meme cardinal?_](http://www.numdam.org/article/PSMIR_1973___4_A4_0.pdf).
We also generalize many theorems which were previously proved only for vector spaces, but are true for modules over arbitrary rings or rings satisfying the (strong) rank condition or have invariant basis number. (These typically need entire new proofs, as the original proofs e.g. used rank-nullity.)
The main new results are:
* `basis_fintype_of_finite_spans`: 
  Over any nontrivial ring, the existence of a finite spanning set implies that any basis is finite.
* `union_support_maximal_linear_independent_eq_range_basis`: 
  Over any ring `R`, if `b` is a basis for a module `M`,
  and `s` is a maximal linearly independent set,
  then the union of the supports of `x ∈ s` (when written out in the basis `b`) is all of `b`.
* `infinite_basis_le_maximal_linear_independent`:
  Over any ring `R`, if `b` is an infinite basis for a module `M`,
  and `s` is a maximal linearly independent set,
  then the cardinality of `b` is bounded by the cardinality of `s`.
* `mk_eq_mk_of_basis`:
  We generalize the invariance of dimension theorem to any ring with the invariant basis number property.
* `basis.le_span`:
  We generalize this statement (the size of a basis is bounded by the size of any spanning set)
  to any ring satisfying the rank condition.
* `linear_independent_le_span`:
  If `R` satisfies the strong rank condition,
  then for any linearly independent family `v : ι → M`
  and any finite spanning set `w : set M`,
  the cardinality of `ι` is bounded by the cardinality of `w`.
* `linear_independent_le_basis`:
  Over any ring `R` satisfying the strong rank condition,
  if `b` is a basis for a module `M`,
  and `s` is a linearly independent set,
  then the cardinality of `s` is bounded by the cardinality of `b`.
  
There is a naming discrepancy: most of the theorem names refer to `dim`,
even though the definition is of `module.rank`.
This reflects that `module.rank` was originally called `dim`, and only defined for vector spaces.
I would prefer to address this in a separate PR (note this discrepancy wasn't introduced in this PR).

2021-08-20 14:41:58 15b1461
feat(archive/imo): IMO 2006 Q3 (#8052)
Formalization of IMO 2006/3

2021-08-19 16:19:58 5dc8bc1
feat(linear_algebra/clifford_algebra/equivs): the equivalences preserve conjugation (#8739)

2021-08-19 14:31:16 dd5e779
fix(linear_algebra/basic): fix incorrect namespaces (#8757)
Previously there were names in the `linear_map` namespace which were about `linear_equiv`s.
This moves:
* `linear_map.fun_congr_left` to `linear_equiv.fun_congr_left`
* `linear_map.automorphism_group` to `linear_equiv.automorphism_group`
* `linear_map.automorphism_group.to_linear_map_monoid_hom` to `linear_equiv.automorphism_group.to_linear_map_monoid_hom`

2021-08-19 14:31:14 d172085
docs(overview): add weak-* topology (#8755)

2021-08-19 14:31:13 86fccaa
feat(measure_theory/strongly_measurable): define strongly measurable functions (#8623)
A function `f` is said to be strongly measurable with respect to a measure `μ` if `f` is the sequential limit of simple functions whose support has finite measure.
Functions in `Lp` for `0 < p < ∞` are strongly measurable. If the measure is sigma-finite, measurable and strongly measurable are equivalent.
The main property of strongly measurable functions is `strongly_measurable.exists_set_sigma_finite`: there exists a measurable set `t` such that `f` is supported on `t` and `μ.restrict t` is sigma-finite. As a consequence, we can prove some results for those functions as if the measure was sigma-finite.
I will use this to prove properties of the form `f =ᵐ[μ] g` for `Lp` functions.

2021-08-19 12:44:51 802859f
chore(algebra/big_operators): weaken assumption for multiset.exists_smul_of_dvd_count (#8758)
This is slightly more convenient than doing a case split on `a ∈ s` in the caller.

2021-08-19 12:44:50 1efa367
feat(group_action/defs): add missing comp_hom smul instances (#8707)
This adds missing `smul_comm_class` and `is_scalar_tower` instances about the `comp_hom` definitions.
To resolve unification issues in finding these instances caused by the reducibility of the `comp_hom` defs, this introduces a semireducible def `has_scalar.comp.smul`.

2021-08-19 12:44:49 4113db5
feat(ring_theory): the trace of an integral element is integral (#8702)
This PR uses `trace_gen_eq_sum_roots` and `trace_trace` to show the trace of an integral element `x : L` over `K` is a multiple of the sum of all conjugates of `x`, and concludes that the trace of `x` is integral.

2021-08-19 11:02:14 159e34e
Revert "feat(field_theory/intermediate_field): generalize `algebra` instances"
OOPS!
This reverts commit 4b525bf25aa33201bd26942a938b84b2df71f175.

2021-08-19 11:01:55 4b525bf
feat(field_theory/intermediate_field): generalize `algebra` instances
The `algebra` and `is_scalar_tower` instances for `intermediate_field` are (again) as general as those for `subalgebra`.

2021-08-19 09:57:42 902d3ac
chore(tactic/rewrite_search): reuse rw_rules_p parser (#8752)
The parser defined here is the same as `rw_rules_p`, so use it.

2021-08-19 08:28:44 28a360a
feat(analysis/calculus/deriv): prove `deriv_inv` at `x = 0` as well (#8748)
* turn `differentiable_at_inv` and `differentiable_at_fpow` into `iff` lemmas;
* slightly weaker assumptions for `differentiable_within_at_fpow` etc;
* prove `deriv_inv` and `fderiv_inv` for all `x`;
* prove formulas for iterated derivs of `x⁻¹` and `x ^ m`, `m : int`;
* push `coe` in these formulas;

2021-08-19 06:51:43 1c60e61
feat(topology/metric_space/basic): `emetric.ball x ∞ = univ` (#8745)
* add `@[simp]` to `metric.emetric_ball`,
  `metric.emetric_ball_nnreal`, and
  `metric.emetric_closed_ball_nnreal`;
* add `@[simp]` lemmas `metric.emetric_ball_top` and
  `emetric.closed_ball_top`.

2021-08-19 03:46:27 0e0a240
chore(scripts): update nolints.txt (#8754)
I am happy to remove some nolints for you!

2021-08-19 01:51:34 ee3f8b8
chore(order/complete_lattice): golf some proofs (#8746)

2021-08-18 23:53:44 8455433
doc(tactic/simps): typo (#8751)
Missed this review comment in #8729

2021-08-18 23:53:43 6fe5b55
feat(algebra/algebra): `alg_{hom,equiv}.restrict_scalars` is injective (#8743)

2021-08-18 21:30:49 e0bf9a1
doc({topology.algebra.weak_dual_topology, analysis.normed_space.weak_dual}): fix docstrings (#8710)
Fixing docstrings from the recently merged PR #8598 on weak-* topology.

2021-08-18 21:30:47 23cf025
feat(algebra/ordered_sub): define truncated subtraction in general (#8503)
* Define and prove properties of truncated subtraction in general
* We currently only instantiate it for `nat`. The other types (`multiset`, `finsupp`, `nnreal`, `ennreal`, ...) will be in future PRs.
Todo in future PRs:
* Provide `has_ordered_sub` instances for all specific cases
* Remove the lemmas specific to each individual type

2021-08-18 18:52:52 0860c41
feat(data/nat/pairing): add some `nat.pair` lemmas (#8740)

2021-08-18 18:52:51 e6fda2a
fix(transform_decl): fix namespace bug (#8733)
* The problem was that when writing `@[to_additive] def foo ...` every declaration used in `foo` in namespace `foo` would be additivized without changing the last part of the name. This behavior was intended to translate automatically generated declarations like `foo._proof_1`. However, if `foo` contains a non-internal declaration `foo.bar` and `add_foo.bar` didn't exist yet, it would also create a declaration `add_foo.bar` additivizing `foo.bar`.
* This PR changes the behavior: if `foo.bar` has the `@[to_additive]` attribute (potentially with a custom additive name), then we won't create a second additive version of `foo.bar`, and succeed normally. However, if `foo.bar` doesn't have the `@[to_additive]` attribute, then we fail with a nice error message. We could potentially support this behavior, but it doesn't seem that worthwhile and it would require changing a couple low-level definitions that `@[to_additive]` uses (e.g. by replacing `name.map_prefix` so that it only maps prefixes if the name is `internal`).
* So far this didn't happen in the library yet. There are currently 5 non-internal declarations `foo.bar` that are used in `foo` where `foo` has the `@[to_additive]` attribute, but all of these declarations were already had an additive version `add_foo.bar`.
* These 5 declarations are `[Mon.has_limits.limit_cone, Mon.has_limits.limit_cone_is_limit, con_gen.rel, magma.free_semigroup.r, localization.r]`
* This fixes the error in #8707 and resolves the Zulip thread https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.238707.20linter.20weirdness
* I also added some documentation / comments to the function `transform_decl_with_prefix_fun_aux`, made it non-private, and rewrote some steps.

2021-08-18 18:52:50 9a249ee
doc(tactic/simps): expand (#8729)
* Better document custom projections that are composites of multiple projections
* Give examples of `initialize_simps_projections`
* Add `initialize_simps_projections` entry to commands.

2021-08-18 18:52:49 6a83c7d
feat(topology/compact_open): the family of constant maps collectively form a continuous map (#8721)

2021-08-18 18:52:48 3ac609b
chore(topology/continuous_function/compact): relax typeclass assumptions for metric space structure on C(X, Y) (#8717)

2021-08-18 18:52:47 0d59511
feat(topology/{continuous_function/bounded, metric_space/algebra}): new mixin classes (#8580)
This PR defines mixin classes `has_lipschitz_add` and `has_bounded_smul` which are designed to abstract algebraic properties of metric spaces shared by normed groups/fields/modules and by `ℝ≥0`.
This permits the bounded continuous functions `α →ᵇ ℝ≥0` to be naturally a topological (ℝ≥0)-module, by a generalization of the proof previously written for normed groups/fields/modules.
Frankly, these typeclasses are a bit ad hoc -- but it all seems to work!

2021-08-18 18:52:46 26590e9
feat(data/list/min_max): maximum is a fold, bounded prod (#8543)
Also provide the same lemmas for multiset.

2021-08-18 18:52:45 4e7e7df
feat(algebra/monoid_algebra): add_monoid_algebra.op_{add,ring}_equiv (#8536)
Transport an opposite `add_monoid_algebra` to the algebra over the opposite ring.
On the way, 
- provide API lemma `mul_equiv.inv_fun_eq_symm {f : M ≃* N} : f.inv_fun = f.symm` and the additive version
- generalize simp lemmas `equiv_to_opposite_(symm_)apply` to `equiv_to_opposite_(symm_)coe`
- tag `map_range.(add_)equiv_symm` with `[simp]

2021-08-18 18:52:43 15444e1
feat(model_theory/basic): more substructure API, including subtype, map, and comap (#7937)
Defines `first_order.language.embedding.of_injective`, which bundles an injective hom in an algebraic language as an embedding
Defines the induced `L.Structure` on an `L.substructure`
Defines the embedding `S.subtype` from `S : L.substructure M` into `M`
Defines `substructure.map` and `substructure.comap` and associated API including Galois insertions

2021-08-18 16:14:18 a47d49d
chore(set/function): remove reducible on eq_on (#8738)
This backs out #8736, and instead removes the unnecessary `@[reducible]`. 
This leaves the `simp` lemma available if anyone wants it (although it is not currently used in mathlib3), but should still resolve the problem that @dselsam's experimental `simp` in the binport of mathlib3 was excessively enthusiastic about using this lemma.

2021-08-18 16:14:17 02b90ab
doc(tactic/monotonicity): bad ac_mono syntax doc (#8734)
The syntax `ac_mono h` was at some point changed to `ac_mono := h` but the documentation did not reflect the change.

2021-08-18 12:08:53 83c7821
fix(algebra/algebra/restrict_scalars): Remove a bad instance (#8732)
This instance forms a non-defeq diamond with the following one
```lean
instance submodule.restricted_module' [module R M] [is_scalar_tower R S M] (V : submodule S M) :
  module R V :=
by apply_instance
```
The `submodule.restricted_module_is_scalar_tower` instance is harmless, but it can't exist without the first one so we remove it too.
Based on the CI result, this instance wasn't used anyway.

2021-08-18 12:08:52 c0f16d2
feat(analysis/normed_space/affine_isometry): new file, bundled affine isometries (#8660)
This PR defines bundled affine isometries and affine isometry equivs, adapting the theory more or less wholesale from the linear isometry and affine map theories.
In follow-up PRs I re-work the Mazur-Ulam and Euclidean geometry libraries to use these objects where appropriate.

2021-08-18 12:08:51 d1b34f7
feat(ring_theory): define the ideal class group (#8626)
This PR defines the ideal class group of an integral domain, as the quotient of the invertible fractional ideals by the principal fractional ideals. It also shows that this corresponds to the more traditional definition in a Dedekind domain, namely the quotient of the nonzero ideals by `I ~ J ↔ ∃ xy, xI = yJ`.
Co-Authored-By: Ashvni ashvni.n@gmail.com
Co-Authored-By: Filippo A. E. Nuccio filippo.nuccio@univ-st-etienne.fr

2021-08-18 10:32:47 a0aee51
chore({group,ring}_theory/sub{group,monoid,ring,semiring}): Add missing scalar action typeclasses (#8731)
This adds `has_faithful_scalar` and `mul_semiring_action` instances for simple subtypes. 
Neither typeclass associates any new actions with these types; they just provide additionally properties of the existing actions.

2021-08-18 10:32:46 6bd6c11
refactor(field_theory,ring_theory): generalize adjoin_root.equiv to `power_basis` (#8726)
We had two proofs that `A`-preserving maps from `A[x]` or `A(x)` to `B` are in bijection with the set of conjugate roots to `x` in `B`, so by stating the result for `power_basis` we can avoid reproving it twice, and get some generalizations (to a `comm_ring` instead of an `integral_domain`) for free.
There's probably a bit more to generalize in `adjoin_root` or `intermediate_field.adjoin`, which I will do in follow-up PRs.

2021-08-18 10:32:45 3de385a
feat(ring_theory/dedekind_domain): prime elements of `ideal A` are the prime ideals (#8718)
This shows that Dedekind domains have unique factorization into prime *ideals*, not just prime *elements* of the monoid `ideal A`.
After some thinking, I believe Dedekind domains are the most common setting in which this equality hold. If anyone has a reference showing how to generalize this, that would be much appreciated.

2021-08-18 10:32:44 f1b6c8f
feat(data/matrix/kronecker): add two lemmas (#8700)
Added two lemmas `kronecker_map_assoc` and `kronecker_assoc` showing associativity of the Kronecker product

2021-08-18 08:28:19 5335c67
refactor(topology/algebra/ring): `topological_ring` extends `topological_add_group` (#8709)

2021-08-18 08:28:18 1151611
feat(algebra/pointwise): instances in locale pointwise (#8689)
@rwbarton and @bryangingechen mentioned in https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Friday.20afternoon.20puzzle.20--.2037.20.E2.88.88.2037.3F that we should put pointwise instances on sets in a locale.
This PR does that. You now have to write `open_locale pointwise` to get algebraic operations on sets and finsets.

2021-08-18 08:28:17 efa34dc
feat(data/list/perm): nodup_permutations (#8616)
A simpler version of #8494
TODO: `nodup s.permutations ↔ nodup s`
TODO: `count s s.permutations = (zip_with count s s.tails).prod`

2021-08-18 07:53:20 41f7b5b
feat(linear_algebra/clifford_algebra/equivs): there is a clifford algebra isomorphic to every quaternion algebra (#8670)
The proofs are not particularly fast here unfortunately.

2021-08-18 05:11:57 40b7dc7
chore(data/set/function): remove useless @[simp] (#8736)
This lemma
```
lemma eq_on_empty (f₁ f₂ : α → β) : eq_on f₁ f₂ ∅ := λ x, false.elim
```
is currently marked `@[simp]`, but can never fire, because after noting `eq_on` is `@[reducible]`, the pattern we would be replacing looks like `?f ?x`, which Lean3's simp doesn't like.
On the other hand, @dselsam's experiments with discrimination trees in simp in the binport of mathlib are spending most of their time on this lemma!
Let's get rid of it.

2021-08-18 03:17:06 cb3d5db
feat(algebra/ordered_monoid): generalize {min,max}_mul_mul_{left,right} (#8725)
Before, it has assumptions about `cancel_comm_monoid` for all the lemmas.
In fact, they hold under much weaker `has_mul`.

2021-08-18 02:21:49 e23e6eb
chore(scripts): update nolints.txt (#8735)
I am happy to remove some nolints for you!

2021-08-18 00:41:07 ce965a5
feat(measure_theory/decomposition/lebesgue): the Lebesgue decomposition theorem (#8687)
This PR proves the existence and uniqueness of the Lebesgue decompositions theorem which is the last step before proving the Radon-Nikodym theorem 🎉

2021-08-17 22:18:00 67501f6
feat(algebra): generalize `ring_hom.map_dvd` (#8722)
Now it is available for `mul_hom` and `monoid_hom`, and in a `monoid` (or `semiring` in the `ring_hom` case), not just `comm_semiring`

2021-08-17 21:07:52 e6e5718
chore(lie/semisimple): tweak `lie_algebra.subsingleton_of_semisimple_lie_abelian` (#8728)

2021-08-17 21:07:51 31d5549
docs(overview): nilpotent and presented groups (#8711)

2021-08-17 18:30:13 5b5b432
fix(tactic/tfae): remove unused arg in tfae_have (#8727)
Since this "discharger" argument is not using the interactive tactic parser, you can only give names of tactics here, and in any case it's unused by the body, so there is no point in specifying the discharger in the first place.

2021-08-17 18:30:12 e0656d1
chore(algebra/module/basic): golf a proof (#8723)

2021-08-17 18:30:11 579ec7d
feat(ring_theory/power_basis): `pb.minpoly_gen = minpoly pb.gen` (#8719)
It actually kind of surprised me that this lemma was never added!

2021-08-17 18:30:10 fefdcf5
feat(tactic/lint): add universe linter (#8685)
* The linter checks that there are no bad `max u v` occurrences in declarations (bad means that neither `u` nor `v` occur by themselves). See documentation for more details.
* `meta/expr` now imports `meta/rb_map` (but this doesn't give any new transitive imports, so it barely matters). I also removed a transitive import from `meta/rb_map`.

2021-08-17 18:30:09 3453f7a
docs(order/filter/partial): add module docstring (#8620)
Fix up some names:
* `core_preimage_gc ` -> `image_core_gc`
* `rtendsto_iff_le_comap` -> `rtendsto_iff_le_rcomap`
Add whitespaces around tokens

2021-08-17 18:30:08 90fc064
chore(algebra/associated): use more dot notation (#8556)
I was getting annoyed that working with definitions such as `irreducible`, `prime` and `associated`, I had to write quite verbose terms like `dvd_symm_of_irreducible (irreducible_of_prime (prime_of_factor _ hp)) (irreducible_of_prime (prime_of_factor _ hq)) hdvd`, where a lot of redundancy can be eliminated with dot notation: `(prime_of_factor _ hp).irreducible.dvd_symm (prime_of_factor _ hq).irreducible hdvd`. This PR changes the spelling of many of the lemmas in `algebra/associated.lean` to make usage of dot notation easier. It also adds a few shortcut lemmas that address common patterns.
Since this change touches a lot of files, I'll add a RFC label / [open a thread on Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/RFC.3A.20adding.20dot.20notations.20.238556) to see what everyone thinks.
Renamings:
 * `irreducible_of_prime` → `prime.irreducible`
 * `dvd_symm_of_irreducible` → `irreducible.dvd_symm`
 * `dvd_symm_iff_of_irreducible` → `irreducible.dvd_comm` (cf. `eq.symm` versus `eq_comm`)
 * `associated_mul_mul` → `associated.mul_mul`
 * `associated_pow_pow` → `associated.pow_pow`
 * `dvd_of_associated` → `associated.dvd`
 * `dvd_dvd_of_associated` → `associated.dvd_dvd`
 * `dvd_iff_dvd_of_rel_{left,right}` → `associated.dvd_iff_dvd_{left,right}`
 * `{eq,ne}_zero_iff_of_associated` → `associated.{eq,ne}_zero_iff`
 * `{irreducible,prime}_of_associated` → `associated.{irreducible,prime}`
 * `{irreducible,is_unit,prime}_iff_of_associated` → `associated.{irreducible,is_unit,prime}_iff`
  * `associated_of_{irreducible,prime}_of_dvd` → `{irreducible,prime}.associated_of_dvd`
 * `gcd_eq_of_associated_{left,right}` → `associated.gcd_eq_{left,right}`
 * `{irreducible,prime}_of_degree_eq_one_of_monic` → `monic.{irreducible,prime}_of_degree_eq_one`
  * `gcd_monoid.prime_of_irreducible` → `irreducible.prime` (since the GCD case is probably the only case we care about for this implication. And we could generalize to Schreier domains if not)
Additions:
 * `associated.is_unit := (associated.is_unit_iff _).mp` (to match `associated.prime` and `associated.irreducible`)
 * `associated.mul_left := associated.mul_mul (associated.refl _) _`
 * `associated.mul_right := associated.mul_mul _  (associated.refl _)`
Other changes:
 * `associated_normalize`, `normalize_associated`, `associates.mk_normalize`, `normalize_apply`, `prime_X_sub_C`: make their final parameter explicit, since it is only inferrable when trying to apply these lemmas. This change helped to golf a few proofs from tactic mode to term mode.
 * slight golfing and style fixes

2021-08-17 16:30:01 508b13e
chore(*): flip various `subsingleton_iff`, `nontrivial_iff` lemmas and add `simp` (#8703)

2021-08-17 13:05:54 450c2d0
refactor(algebra/algebra/basic): move restrict_scalars into more appropriate files (#8712)
This puts:
* `submodule.restrict_scalars` in `submodule.lean` since the proofs are all available there, and this is consistent with how `linear_map.restrict_scalars` is placed.
  This is almost a copy-paste, but all the `R` and `S` variables are swapped to match the existing convention in that file.
* The type alias `restrict_scalars` is now in its own file.
  The docstring at the top of the file is entirely new, but the rest is a direct copy and paste.
The motivation is primarily to reduce the size of `algebra/algebra/basic` a little.

2021-08-17 12:21:22 0c145d8
feat(measure_theory/measure/measure_space): add formula for `(map f μ).to_outer_measure` (#8714)

2021-08-17 10:49:29 4df3fb9
chore(topology/maps): add tendsto_nhds_iff lemmas (#8693)
This adds lemmas of the form `something.tendsto_nhds_iff` to ease use.
I also had to get lemmas out of a section because `α` was duplicated and that caused typechecking problems.

2021-08-17 09:42:21 edb0ba4
chore(measure_theory/measure/hausdorff): golf (#8706)
* add a `mk_metric` version of `hausdorff_measure_le`, add `finset.sum` versions for both `mk_metric` and `hausdorff_measure`;
* slightly golf the proof.

2021-08-17 08:38:06 0591c27
feat(ring_theory/fractional_ideal): lemmas on `span_singleton _ x * I` (#8624)
Useful in proving the basic properties of the ideal class group. See also #8622 which proves similar things for integral ideals.

2021-08-17 01:58:23 b6f1214
chore(scripts): update nolints.txt (#8715)
I am happy to remove some nolints for you!

2021-08-16 18:56:34 1263906
chore(data/nat/pairing): add `pp_nodot`, fix some non-finalizing `simp`s (#8705)

2021-08-16 18:56:33 40d2602
chore(analysis/calculus/deriv): weaker assumptions for `deriv_mul_const` (#8704)

2021-08-16 18:56:32 d5ce7e5
chore(data/vector): rename vector2 (#8697)
This file was named this way to avoid clashing with `data/vector.lean` in core.
This renames it to `data/vector/basic.lean` which avoids the problem.
There was never a `vector2` definition, this was only ever a filename.

2021-08-16 16:19:26 253712e
feat(ring_theory/ideal): lemmas on `ideal.span {x} * I` (#8622)
Originally created for being used in the context of the ideal class group, but didn't end up being used. Hopefully they are still useful for others.

2021-08-16 16:19:25 65b0c58
feat(ring_theory/localization): some lemmas on `coe_submodule` (#8621)
A small assortment of results on `is_localization.coe_submodule`, needed for elementary facts about the ideal class group.

2021-08-16 16:19:24 80b699b
chore(ring_theory): generalize `non_zero_divisors` lemmas to `monoid_with_zero` (#8607)
None of the results about `non_zero_divisors` needed a ring structure, just a `monoid_with_zero`. So the generalization is obvious.
Shall we move this file to the `algebra` namespace sometime soon?

2021-08-16 16:19:23 106bd3b
feat(group_theory/nilpotent): add nilpotent groups (#8538)
We make basic definitions of nilpotent groups and prove the standard theorem that a group is nilpotent iff the upper resp. lower central series reaches top resp. bot.

2021-08-16 16:19:22 a55084f
feat(data/fintype/basic): card_sum, card_subtype_or (#8490)

2021-08-16 16:19:21 f8241b7
feat(algebra/big_operators/basic): prod_subsingleton (#8423)

2021-08-16 16:19:20 e195347
feat(finsupp/basic): lemmas about emb_domain (#7883)

2021-08-16 15:18:10 53d97e1
puzzle(archive/oxford_invariants): Oxford Invariants Puzzle Challenges, Summer 2021, Week 3, Problem 1 (#8656)
This is a formalisation of a problem posed by the Oxford Invariants.
Co-authored by @b-mehta

2021-08-16 15:18:08 55b2e86
feat(analysis/normed_space): normed group hom completion (#8499)
From LTE

2021-08-16 15:18:07 217308c
feat(analysis): `x^y` is smooth as a function of `(x, y)` (#8262)

2021-08-16 13:12:47 d6aae6c
feat(tactic/abel): check for defeq of atoms instead of syntactic eq (#8628)
I had a call to `abel` break after adding a new typeclass instance, and it turns out this was because two terms became defeq-but-not-syntactically-eq. This PR modifies the equality check in `abel` to follow the implementation in e.g. `ring`.
By default, `abel` now unifies atoms up to `reducible`, which should not have a huge impact on build times. Use `abel!` for trying to unify up to `semireducible`.
I also renamed the `tactic.abel.cache` to `tactic.abel.context`, since we store more things in there than a few elaborated terms. To appease the docstring linter, I added docs for all of the renamed `def`s.

2021-08-16 11:55:51 deedf25
feat(algebra/lie/semisimple): adjoint action is injective for semisimple Lie algebras (#8698)

2021-08-16 08:39:16 c416a48
feat(algebra/gcd_monoid): move the `gcd_monoid nat` instance (#7180)
moves `gcd_monoid nat` instance, removes corresponding todos.
removes:
* `nat.normalize_eq` -- use `normalize_eq` instead
renames:
* `nat.gcd_eq_gcd` to `gcd_eq_nat_gcd`
* `nat.lcm_eq_lcm` to `lcm_eq_nat_lcm`

2021-08-16 08:06:39 2b43587
feat(measure_theory/hausdorff_measure): Hausdorff measure and volume coincide in pi types (#8554)
co-authored by Yury Kudryashov

2021-08-16 06:19:36 a983f24
fix(*): fix universe levels (#8677)
The universe levels in the following declarations have been fixed . 
This means that there was an argument of the form `Type (max u v)` or `Sort (max u v)`, which could be generalized to `Type u` or `Sort u`. In a few cases, I made explicit that there is a universe restriction (sometimes `max u v` is legitimately used as an arbitrary universe level higher than `u`)
In some files I also cleaned up some declarations around these.
```
algebraic_geometry.Spec.SheafedSpace_map
algebraic_geometry.Spec.to_SheafedSpace
algebraic_geometry.Spec.to_PresheafedSpace
category_theory.discrete_is_connected_equiv_punit
writer_t.uliftable'
writer_t.uliftable
equiv.prod_equiv_of_equiv_nat
free_algebra.dim_eq
linear_equiv.alg_conj
module.flat
cardinal.add_def
slim_check.injective_function.mk
topological_add_group.of_nhds_zero'
topological_group.of_nhds_one'
topological_group.of_comm_of_nhds_one
topological_add_group.of_comm_of_nhds_zero
has_continuous_mul.of_nhds_one
has_continuous_add.of_nhds_zero
has_continuous_add_of_comm_of_nhds_zero
has_continuous_mul_of_comm_of_nhds_one
uniform_space_of_compact_t2
AddCommGroup.cokernel_iso_quotient
algebraic_geometry.Scheme
algebraic_geometry.Scheme.Spec_obj
simplex_category.skeletal_functor
category_theory.Type_to_Cat.full
CommMon_.equiv_lax_braided_functor_punit.lax_braided_to_CommMon
CommMon_.equiv_lax_braided_functor_punit.unit_iso
Mon_.equiv_lax_monoidal_functor_punit.lax_monoidal_to_Mon
Mon_.equiv_lax_monoidal_functor_punit.unit_iso
uliftable.down_map
weak_dual.has_continuous_smul
stone_cech_equivalence
Compactum_to_CompHaus.full
TopCommRing.category_theory.forget₂.category_theory.reflects_isomorphisms
```

2021-08-16 05:42:56 69785fe
chore(scripts): update nolints.txt (#8696)
I am happy to remove some nolints for you!

2021-08-16 03:52:43 b97344c
chore(algebra/module): Swap the naming of `smul_(left|right)_injective` to match the naming guide (#8659)
The naming conventions say:
> An injectivity lemma that uses "left" or "right" should refer to the argument that "changes". For example, a lemma with the statement `a - b = a - c ↔ b = c` could be called `sub_right_inj`.
This corrects the name of `function.injective (λ c : R, c • x)` to be `smul_left_injective` instead of the previous `smul_right_injective`, and vice versa for `function.injective (λ x : M, r • x)`.
This also brings it in line with `mul_left_injective` and `mul_right_injective`.

2021-08-16 03:52:42 2e9029f
feat(tactic/ext): add tracing option (#8633)
Adds an option to trace all lemmas that `ext` tries to apply, along with the time each attempted application takes. This was useful in debugging a slow `ext` call.

2021-08-16 02:20:04 59954c1
docs(data/pfun): add module docstring and def docstrings (#8629)

2021-08-16 02:20:03 46b3fae
feat(topology/category/*/projective): CompHaus and Profinite have enough projectives (#8613)

2021-08-16 02:20:02 4bf5177
feat(algebraic_geometry/EllipticCurve): add working definition of elliptic curve (#8558)
The word "elliptic curve" is used in the literature in many different ways. Differential geometers use it to mean a 1-dimensional complex torus. Algebraic geometers nowadays use it to mean some morphism of schemes with a section and some axioms. However classically number theorists used to use a low-brow definition of the form y^2=cubic in x; this works great when the base scheme is, for example, Spec of the rationals. 
It occurred to me recently that the standard minor modification of the low-brow definition works for all commutative rings with trivial Picard group, and because this covers a lot of commutative rings (e.g. all fields, all PIDs, all integral domains with trivial class group) it would not be unreasonable to have it as a working definition in mathlib. The advantage of this definition is that people will be able to begin writing algorithms which compute various invariants of the curve, for example we can begin to formally verify the database of elliptic curves at LMFDB.org .

2021-08-16 01:12:19 ec68c7e
feat(set_theory/cardinal): lift_sup (#8675)

2021-08-16 00:24:41 462359d
feat(measure): prove Haar measure = Lebesgue measure on R (#8639)

2021-08-15 23:17:23 8e50863
chore(analysis/normed_space/dual): golf some proofs (#8694)

2021-08-15 21:24:22 8ac0242
feat(topology/algebra/ring): pi instances (#8686)
Add instances `pi.topological_ring` and `pi.topological_semiring`.

2021-08-15 21:24:21 9af80f3
feat(algebra/opposites): more scalar action instances (#8672)
This adds weaker and stronger versions of `monoid.to_opposite_mul_action` for `has_mul`, `monoid_with_zero`, and `semiring`. It also adds an `smul_comm_class` instance.

2021-08-15 21:24:20 fc7da8d
chore(data/vector3): extract to a new file (#8669)
This is simply a file move, with no other changes other than a minimal docstring.
In it's old location this was very hard to find.

2021-08-15 21:24:18 6aefa38
chore(topology/algebra/*,analysis/specific_limits): continuity of `fpow` (#8665)
* add more API lemmas about continuity of `x ^ n` for natural and integer `n`;
* prove that `x⁻¹` and `x ^ n`, `n < 0`, are discontinuous at zero.

2021-08-15 21:24:18 fddc1f4
doc(tactic/congr): improve convert_to docs (#8664)
The docs should explain how `convert` and `convert_to` differ.

2021-08-15 19:29:26 ca5987f
chore(data/set/basic): add `image_image` and `preimage_preimage` to `function.left_inverse` (#8688)

2021-08-15 13:05:32 bf6eeb2
feat(data/list/cycle): cycle.map and has_repr (#8170)

2021-08-15 07:43:38 0bb283b
feat(algebra/bounds): add `csupr_mul` etc (#8584)
* add `csupr_mul`, `mul_csupr`, `csupr_div`, `csupr_add`,
  `mul_csupr`, `add_csupr`, `csupr_sub`;
* add `is_lub_csupr`, `is_lub_csupr_set`, `is_glb_cinfi`,
  `is_glb_cinfi_set`;
* add `is_lub.csupr_eq`, `is_lub.csupr_set_eq`, `is_glb.cinfi_eq`,
  `is_glb.cinfi_set_eq`;
* add `is_greatest.Sup_mem`, `is_least.Inf_mem`;
* add lemmas about `galois_connection` and `Sup`/`Inf` in
  conditionally complete lattices;
* add lemmas about `order_iso` and `Sup`/`Inf` in conditionally
  complete lattices.

2021-08-15 02:59:48 b7d980c
feat(topology/algebra/weak_dual_topology + analysis/normed_space/weak_dual_of_normed_space): add definition and first lemmas about weak-star topology (#8598)
Add definition and first lemmas about weak-star topology.

2021-08-15 02:18:05 ff721ad
chore(scripts): update nolints.txt (#8676)
I am happy to remove some nolints for you!

2021-08-15 00:01:46 708d99a
feat(data/real/ennreal): add `to_real_sub_of_le` (#8674)

2021-08-15 00:01:45 4644447
fix(tactic/norm_cast): assumption_mod_cast should only work on one goal (#8649)
fixes #8438

2021-08-14 23:29:05 c4208d2
chore(measure_theory): fix namespace in docstrings for docgen (#8671)

2021-08-14 13:38:26 8f863f6
feat(measure_theory/decomposition/jordan): the Jordan decomposition theorem for signed measures (#8645)
This PR proves the Jordan decomposition theorem for signed measures, that is, given a signed measure `s`, there exists a unique pair of mutually singular measures `μ` and `ν`, such that `s = μ - ν`.

2021-08-14 11:55:36 ba76bf7
chore(data/option,data/set): a few lemmas, golf (#8636)
* add `option.subsingleton_iff_is_empty` and an instance
  `option.unique`;
* add `set.is_compl_range_some_none`, `set.compl_range_some`,
  `set.range_some_inter_none`, `set.range_some_union_none`;
* split the proof of `set.pairwise_on_eq_iff_exists_eq` into
  `set.nonempty.pairwise_on_eq_iff_exists_eq` and
  `set.pairwise_on_eq_iff_exists_eq`.
Inspired by #8579

2021-08-14 10:40:01 721f571
feat(linear_algebra/basic) : add a small lemma for simplifying a map between equivalent quotient spaces (#8640)

2021-08-14 06:36:18 c765b04
chore(data/(int, nat)/modeq): rationalize lemma names (#8644)
Many `modeq` lemmas were called `nat.modeq.modeq_something` or `int.modeq.modeq_something`. I'm deleting the duplicated `modeq`, so that lemmas (usually) become `nat.modeq.something` and `int.modeq.something`. Most of them must be `protected`.
This facilitates greatly the use of dot notation on `nat.modeq` and `int.modeq` while shortening lemma names.
I'm adding a few lemmas:
* `nat.modeq.rfl`, `int.modeq.rfl`
* `nat.modeq.dvd`, `int.modeq.dvd`
* `nat.modeq_of_dvd`, `int.modeq_of_dvd`
* `has_dvd.dvd.modeq_zero_nat`, `has_dvd.dvd.zero_modeq_nat`, `has_dvd.dvd.modeq_zero_int`, `has_dvd.dvd.zero_modeq_int`
* `nat.modeq.add_left`, `nat.modeq.add_right`, `int.modeq.add_left`, `int.modeq.add_right`
* `nat.modeq.add_left_cancel'`, `nat.modeq.add_right_cancel'`, `int.modeq.add_left_cancel'`, `int.modeq.add_right_cancel'`
* `int.modeq.sub_left`, `int.modeq.sub_right`
* `nat.modeq_sub`, `int.modeq_sub`
* `int.modeq_one`
* `int.modeq_pow`
I'm also renaming some lemmas (on top of the general renaming):
* `add_cancel_left` -> `add_left_cancel`, `add_cancel_right` -> `add_right_cancel`
* `modeq_zero_iff` -> `modeq_zero_iff_dvd` in prevision of an upcoming PR

2021-08-14 04:51:40 679a8a7
docs(data/int/basic): add module docstring (#8655)

2021-08-14 02:16:22 36826cb
chore(scripts): update nolints.txt (#8666)
I am happy to remove some nolints for you!

2021-08-14 02:16:21 1b1088c
feat(linear_algeba/linear_independent): coe_range (#8341)

2021-08-14 00:25:39 50d3de9
feat(logic/basic): a few lemmas about `xor` (#8650)
Inspired by #8579

2021-08-13 21:43:57 94e4667
feat(order/filter): change definition of inf (#8657)
The current definition of `filter.inf` came directly from the Galois insertion: `u ∈ f ⊓ g` if it contains `s ∩ t` for some `s ∈ f` and `t ∈ g`, but the new one is tidier: `u ∈ f ⊓ g` if `u = s ∩ t` for some `s ∈ f` and `t ∈ g`. This gives a stronger assertion to work with when assuming a set belongs to a filter inf. On the other hand it makes it harder to prove such a statement so we keep the old version as a lemma `filter.mem_inf_of_inter :  ∀ {f g : filter α} {s t u : set α}, s ∈ f → t ∈ g → s ∩ t ⊆ u → u ∈ f ⊓ g`.
Also renames lots of lemmas to remove the word "sets" that was a remnant of the very early days.
In passing I also changed the simp lemma `filter.mem_map` from  `t ∈ map m f ↔ {x | m x ∈ t} ∈ f` to 
`t ∈ map m f ↔ m ⁻¹' t ∈ f` which seemed more normal form to me. But this led to a lot of breakage, so I also kept the old version as `mem_map'`.

2021-08-13 20:14:43 fdeb064
feat(topology/*): lemmas about `dense`/`dense_range` and `is_(pre)connected` (#8651)
* add `dense_compl_singleton`;
* extract new lemma `is_preconnected_range` from the proof of
  `is_connected_range`;
* add `dense_range.preconnected_space` and
  `dense_inducing.preconnected_space`;
* rename `self_sub_closure_image_preimage_of_open` to
  `self_subset_closure_image_preimage_of_open`.
Inspired by #8579

2021-08-13 18:20:13 8b9c4cf
fix(tactic/core): fix incorrect uses of with_ident_list (#8653)
`with_ident_list` uses `tk "with" >> ident_*`, which is incorrect for some tactics, where `_` doesn't mean anything. (It is good for tactics that name hypotheses like `cases`, but not tactics that use the list to reference hypotheses like `revert_deps`.)

2021-08-13 18:20:12 7f5d5b9
feat(ring_theory): ideals in a Dedekind domain have unique factorization (#8530)

2021-08-13 17:03:29 8eca293
feat(field_theory): more general `algebra _ (algebraic_closure k)` instance (#8658)
For example, now we can take a field extension `L / K` and map `x : K` into the algebraic closure of `L`.

2021-08-13 17:03:28 c711909
feat(linear_algebra/basic, group_theory/quotient_group, algebra/lie/quotient): ext lemmas for morphisms out of quotients (#8641)
This allows `ext` to see through quotients by subobjects of a type `A`, and apply ext lemmas specific to `A`.

2021-08-13 15:23:28 9e83de2
feat(data/list/perm): subperm_ext_iff (#8504)
A helper lemma to construct proofs of `l <+~ l'`. On the way to proving
`l ~ l' -> l.permutations ~ l'.permutations`.

2021-08-13 08:01:49 733e6e3
chore(*): update lean to 3.32.1 (#8652)

2021-08-13 06:38:14 03ddb8d
feat(finsupp/basic): restrict a finitely supported function on option A to A (#8342)

2021-08-13 05:15:52 d0804ba
feat(linear_algebra/invariant_basis_number): basic API lemmas (#7882)

2021-08-13 02:17:49 3b37614
chore(scripts): update nolints.txt (#8654)
I am happy to remove some nolints for you!

2021-08-12 19:28:31 4a864ed
fix(tactic/core): mk_simp_attribute: remove superfluous disjunct (#8648)
`with_ident_list` already returns `[]` if `with` is not present.

2021-08-12 19:28:30 ce26133
feat(data/nat/(basic, modeq)): simple lemmas (#8647)

2021-08-12 19:28:29 c2580eb
refactor(tactic/*): mark internal attrs as `parser := failed` (#8635)
I saw this trick in some of the other user attributes, and it seems like a good idea to apply generally. Any attribute that is "internal use only" should have its `parser` field set to `failed`, so that it is impossible for the user to write the attribute. It is still possible for meta code to set the attributes programmatically, which is generally what's happening anyway.

2021-08-12 19:28:28 8a2a630
feat(analysis/convex/basic): add lemma add_smul regarding linear combinations of convex sets (#8608)
From #2819

2021-08-12 19:28:27 2412b97
feat(algebra/quaternion_basis): add a quaternion version of complex.lift (#8551)
This is some prework to show `clifford_algebra (Q c₁ c₂) ≃ₐ[R] ℍ[R,c₁,c₂]` for an appropriate `Q`.
For `complex.lift : {I' // I' * I' = -1} ≃ (ℂ →ₐ[ℝ] A)`, we could just use a subtype. For quaternions, we now have two generators and three relations, so a subtype isn't particularly viable any more; so instead this commit creates a new `quaternion_algebra.basis` structure.

2021-08-12 19:28:26 8914b68
feat(ring_theory/dedekind_domain): ideals in a DD are cancellative  (#8513)
This PR provides a `comm_cancel_monoid_with_zero` instance on integral ideals in a Dedekind domain.
As a bonus, it deletes an out of date TODO comment.

2021-08-12 17:46:21 0f59141
docs(data/fintype/sort): add module docstring (#8643)
And correct typo in the docstrings

2021-08-12 17:46:20 3689655
feat(measure_theory/stieltjes_measure): Stieltjes measures associated to monotone functions (#8266)
Given a monotone right-continuous real function `f`, there exists a measure giving mass `f b - f a` to the interval `(a, b]`. These measures are called Stieltjes measures, and are especially important in probability theory. The real Lebesgue measure is a particular case of this construction, for `f x = x`. This PR extends the already existing construction of the Lebesgue measure to cover all Stieltjes measures.

2021-08-12 16:55:31 7b27f46
feat(measure_theory/vector_measure): a signed measure restricted on a positive set is a unsigned measure (#8597)
This PR defines `signed_measure.to_measure` which is the measure corresponding to a signed measure restricted on some positive set. This definition is useful for the Jordan decomposition theorem.

2021-08-12 15:02:55 ee18995
feat(algebra/group_with_zero): `units.mk0` is a "monoid hom" (#8625)
This PR shows that `units.mk0` sends `1` to `1` and `x * y` to `mk0 x * mk0 y`. So it is a monoid hom, if we ignore the proof fields.

2021-08-12 15:02:54 e17e9ea
feat(measure_theory/lp_space): add mem_Lp and integrable lemmas for is_R_or_C.re/im and inner product with a constant (#8615)

2021-08-12 13:21:49 f63c27b
feat(linear_algebra): Smith normal form for submodules over a PID (#8588)
This PR expands on `submodule.basis_of_pid` by showing that this basis can be chosen in "Smith normal form". That is: if `M` is a free module over a PID `R` and `N ≤ M`, then we can choose a basis `bN` for `N` and `bM` for `M`, such that the inclusion map from `N` to `M` expressed in these bases is a diagonal matrix in Smith normal form.
The rather gnarly induction in the original `submodule.basis_of_pid` has been turned into an even gnarlier auxiliary lemma that does the inductive step (with the induction hypothesis broken into pieces so we can apply it part by part), followed by a re-proven `submodule.basis_of_pid` that picks out part of this inductive step. Then we feed the full induction hypothesis, along with `submodule.basis_of_pid` into the same induction again, to get `submodule.exists_smith_normal_form_of_le`, and from that we conclude our new results `submodule.exists_smith_normal_form` and `ideal.exists_smith_normal_form`.

2021-08-12 09:52:50 e245b24
feat(data/nat/prime, number_theory/padics/padic_norm): list of prime_pow_factors, valuation of prime power (#8473)

2021-08-12 08:32:26 1b96e97
feat(data/sym2): card of `sym2 α` (#8426)
Case `n = 2` of stars and bars

2021-08-12 07:04:01 c550e3a
refactor(group_theory/sylow): make new file about actions of p groups and move lemmas there (#8595)

2021-08-12 07:04:00 0cbab37
feat(group_theory/subgroup): there are finitely many subgroups of a finite group (#8593)

2021-08-12 07:03:59 cd2b549
chore(measure_theory/*): make measurable_space arguments implicit, determined by the measure argument (#8571)
In the measure theory library, most of the definitions that depend on a measure have that form:
```
def example_def {α} [measurable_space α] (μ : measure α) : some_type := sorry
```
Suppose now that we have two `measurable_space` structures on `α` : `{m m0 : measurable_space α}` and we have the measures `μ : measure α` (which is a measure on `m0`) and `μm : @measure α m`. This will be common for probability theory applications. See for example the `conditional_expectation` file.
Then we can write `example_def μ` but we cannot write `example_def μm` because the `measurable_space` inferred is `m0`, which does not match the measurable space on which `μm` is defined. We have to use `@example_def _ m μm` instead.
This PR implements a simple fix: change `[measurable_space α] (μ : measure α)` into `{m : measurable_space α} (μ : measure α)`.
Advantage: we can now use `example_def μm` since the `measurable_space` argument is deduced from the `measure` argument. This removes many `@` in all places where `measure.trim` is used.
Downsides:
- I have to write `(0 : measure α)` instead of `0` in some lemmas.
- I had to add two `apply_instance` to find `borel_space` instances.
- Whenever a lemma takes an explicit measure argument, we have to write `{m : measurable_space α} (μ : measure α)` instead of simply `(μ : measure α)`.

2021-08-12 05:23:15 9ab4d28
doc(tactic/cache): fix haveI docs (#8637)
Applies [Bhavik's suggestion](https://github.com/leanprover-community/mathlib/pull/8631#discussion_r687260852) which missed the train for #8631.

2021-08-12 03:29:23 036c96b
fix(tactic/lint): _ is not a linter (#8634)
The `#lint` parser accepts `ident_`, but as far as I can tell, `_` doesn't mean anything in particular, it just tries and fails to resolve the `linter._` linter. This simplifies the parser to only accept `ident`.

2021-08-12 02:18:22 8968739
chore(scripts): update nolints.txt (#8638)
I am happy to remove some nolints for you!

2021-08-11 23:46:50 f0ae67d
feat(analysis/normed_space/finite_dimension): asymptotic equivalence preserves summability (#8596)

2021-08-11 21:52:56 ea7e3ff
feat(tactic/cache): allow optional := in haveI (#8631)
This syntactic restriction was originally added because it was not possible to reset the instance cache only for a given goal. This limitation has since been lifted (a while ago, I think), and so the syntax can be made more like `have` now.

2021-08-11 19:55:20 565fef6
refactor(tactic/tidy): use @[user_attribute] (#8630)
This is just a minor change to use the `@[user_attribute]` attribute like all other user attrs instead of calling `attribute.register`. (This came up during the census of mathlib user attrs.)

2021-08-11 15:48:56 7b5c60d
feat(data/equiv/basic): add a small lemma for simplifying map between equivalent quotient spaces induced by equivalent relations (#8617)
Just adding a small lemma that allows us to compute the composition of the map given by `quot.congr` with `quot.mk`

2021-08-11 15:48:55 3ebf9f0
chore(group_theory/group_action/defs): add a missing is_scalar_tower instance (#8604)

2021-08-11 15:48:53 2489931
feat(group_theory/perm/cycle_type): purge trunc references (#8176)

2021-08-11 14:09:54 2db8c79
chore(group_theory/submonoid/membership): missing rfl lemmas (#8619)

2021-08-11 11:38:30 8d0ed03
feat(data/rat/basic): Add nat num and denom inv lemmas (#8581)
Add `inv_coe_nat_num`  and `inv_coe_nat_denom` lemmas.
These lemmas show that the denominator and numerator of `1/ n` given `0 < n`, are equal to `n` and `1` respectively.

2021-08-11 07:34:47 1d4400c
feat(analysis/normed_space): controlled surjectivity (#8498)
From LTE.

2021-08-11 06:39:10 9c8602b
refactor(measure_theory): add subfolder (#8594)
* This PR adds the subfolders `constructions` `function` `group` `integral` and `measure` to `measure_theory`
* File renamings:
```
group -> group.basic
prod_group -> group.prod
bochner_integration -> integral.bochner
integration -> integral.lebesgue
haar_measure -> measure.haar
lebesgue_measure -> measure.lebesgue
hausdorff_measure -> measure.hausdorff
```

2021-08-11 02:38:04 6305769
chore(scripts): update nolints.txt (#8614)
I am happy to remove some nolints for you!

2021-08-11 02:38:03 3c09987
docs(data/set/lattice): add module docstring (#8250)
This also cleans up some whitespace and replaces some `assume`s with `λ`s

2021-08-11 00:53:34 694dd11
feat(archive/imo): IMO 2001 Q6 (#8327)
Formalization of the problem Q6 of 2001.

2021-08-10 18:08:28 32735ca
feat(measure_theory/measure_space): add mutually singular measures (#8605)
This PR defines `mutually_singular` for measures. This is useful for Jordan and Lebesgue decomposition.

2021-08-10 18:08:27 3b279c1
feat(measure_theory/l2_space): generalize inner_indicator_const_Lp_one from R to is_R_or_C (#8602)

2021-08-10 18:08:26 d1b2a54
feat(analysis/normed_space/inner_product): add norm_inner_le_norm (#8601)
add this:
```
lemma norm_inner_le_norm (x y : E) : ∥⟪x, y⟫∥ ≤ ∥x∥ * ∥y∥ :=
(is_R_or_C.norm_eq_abs _).le.trans (abs_inner_le_norm x y)
```

2021-08-10 18:08:24 acab4f9
feat(algebra/pointwise): add preimage_smul and generalize a couple of assumptions (#8600)
Some lemmas about smul spun off from #2819

2021-08-10 17:22:47 9fb53f9
chore(analysis/calculus/fderiv_symmetric): Squeeze some simps in a very slow proof (#8609)
This doesn't seem to help much, but is low-hanging speedup fruit that the next person stuck on a timeout here will inevitably want solved first.

2021-08-10 17:22:46 ebe0176
feat(measure_theory/special_functions): add measurability of is_R_or_C.re and is_R_or_C.im (#8603)

2021-08-10 16:39:18 5739199
chore(linear_algebra/quadratic_form): make Sylvester's law of inertia bold in the doc string (#8610)

2021-08-10 14:03:54 e2b7f70
fix(docs/references.bib): add missing comma (#8585)
* Adds a missing comma to docs/references.bib. Without this the file cannot be parsed by bibtool.
* Normalises docs/references.bib as described in [Citing other works](https://leanprover-community.github.io/contribute/doc.html#citing-other-works).

2021-08-10 13:22:22 81a47a7
docs(topology/category/Profinite/as_limit): fix typo (#8606)

2021-08-10 10:54:11 5890afb
feat(data/list/perm): perm.permutations (#8587)
This proves the theorem from [Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/perm.20of.20permutations):
```lean
theorem perm.permutations {s t : list α} (h : s ~ t) : permutations s ~ permutations t := ...
```
It also introduces a `permutations'` function which has simpler equations (and indeed, this function is used to prove the theorem, because it is relatively easier to prove `perm.permutations'` first).

2021-08-10 10:54:10 f967cd0
refactor(group_theory/sylow): extract a lemma from Sylow proof (#8459)

2021-08-10 09:12:41 e8fc466
feat(algebra/group/pi): Add `pi.const_(monoid|add_monoid|ring|alg)_hom` (#8518)

2021-08-10 07:07:58 e729ab4
feat(analysis/specific_limits): limit of nat_floor (a * x) / x (#8549)

2021-08-10 02:16:24 e4cdecd
chore(scripts): update nolints.txt (#8599)
I am happy to remove some nolints for you!

2021-08-09 21:34:22 2ab63a0
feat(topology/algebra/infinite_sum, analysis/normed_space/basic): product of two tsums, cauchy product (#8445)

2021-08-09 15:47:29 5e59fb4
feat(algebra/ordered_pointwise): lemmas on smul of intervals (#8591)
Some lemmas about smul on different types of intervals, spun off from #2819

2021-08-09 15:47:27 847fc12
feat(algebra): `submodule.restrict_scalars p R` is `S`-isomorphic to `p` (#8567)
To be more precise, turning `p : submodule S M` into an `R`-submodule gives the same module structure as turning it into a type and adding a module structure.

2021-08-09 15:47:26 3ec899a
chore(topology/algebra): bundled homs in group and ring completion (#8497)
Also take the opportunity to remove is_Z_bilin (who was scheduled for
removal from the beginning).

2021-08-09 15:47:25 189e90e
feat(group_theory/subgroup): lemmas relating normalizer and map and comap (#8458)

2021-08-09 15:47:24 3dd8316
feat(algebra/ring/basic): mul_{left,right}_cancel_of_non_zero_divisor (#8425)
We also golf the proof that a domain is a cancel_monoid_with_zero.

2021-08-09 15:47:22 4a15edd
feat(data/polynomial/monic): monic.not_zero_divisor_iff (#8417)
We prove that a monic polynomial is not a zero divisor. A helper lemma is proven that the product of a monic polynomial is of lesser degree iff it is nontrivial and the multiplicand is zero.

2021-08-09 15:47:21 5e36848
feat(measure_theory/decomposition/signed_hahn): signed version of the Hahn decomposition theorem (#8388)
This PR defined positive and negative sets with respect to a vector measure and prove the signed version of the Hahn decomposition theorem.

2021-08-09 15:47:20 f3b70e4
feat(group_theory/subgroup): saturated subgroups (#8137)
From LTE

2021-08-09 13:47:38 77033a0
chore(algebra/associated): rename div_or_div to dvd_or_dvd (#8589)

2021-08-09 13:47:37 65e2411
feat(order/bounds): `is_lub`/`is_glb` in Pi types and product types (#8583)
* Add `monotone_fst` and `monotone_snd`.
* Add some trivial lemmas about `upper_bounds` and `lower_bounds`.
* Turn `is_lub_pi` and `is_glb_pi` into `iff` lemmas.
* Add `is_lub_prod` and `is_glb_prod`.
* Fix some header levels in module docs of `order/bounds`.

2021-08-09 13:47:36 9ce6b9a
feat(order/complete_lattice): add `sup_eq_supr` and `inf_eq_infi` (#8573)
* add `bool.injective_iff`, `bool.univ_eq`, and `bool.range_eq`;
* add `sup_eq_supr` and `inf_eq_infi`;
* golf `filter.comap_sup`.

2021-08-09 13:47:35 45aed67
chore(order/filter/basic): add `filter.sup_prod` and `filter.prod_sup` (#8572)

2021-08-09 13:47:34 fc694c5
chore(linear_algebra/special_linear_group): Cleanup and golf (#8569)
This cleans up a number things in this file:
* Many lemmas were duplicated between `↑A` and `⇑A`. This eliminates the latter spelling from all lemmas, and makes it simplify to the former. Unfortunately the elaborator fights us at every step of the way with `↑A`, so we introduce local notation to take the pain away.
* Some lemma names did not match the convention established elsewhere
* Some definitions can be bundled more heavily than they currently are. In particular, this merges together `to_lin'` and `to_linear_equiv`, as well as `to_GL` and `embedding_GL`.

2021-08-09 13:47:33 8196d4a
chore(algebra/group/units): Make coercion the simp-normal form of units (#8568)
It's already used as the output for `@[simps]`; this makes `↑u` the simp-normal form of `u.val` and `↑(u⁻¹)` the simp-normal form of `u.inv`.

2021-08-09 13:47:32 8edcf90
feat(ring_theory/noetherian): add noeth ring lemma (#8566)
I couldn't find this explicit statement in the library -- I feel like it's the way a mathematician would define a Noetherian ring though.

2021-08-09 13:47:31 5f2d954
feat(algebra/ordered_field): add `inv_le_of_inv_le` and `inv_lt_of_inv_lt` (#8565)
These lemmas need positivity of only one of two variables. Mathlib already had lemmas about ordered multiplicative groups with these names, I appended prime to their names.

2021-08-09 13:47:29 f29cc59
feat(matrix/kronecker): Add the Kronecker product (#8560)
Largely derived from #8152, avoiding the complexity of introducing `algebra_map`s.
This introduces an abstraction `kronecker_map`, which is used to support both `mul` and `tmul` without having to redo any proofs.

2021-08-09 13:47:28 7b1ce10
fix(analysis/normed_space/basic): add an alias instance to fix an inference issue (#8547)
This adds an instance from [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Typeclass.20resolution.20under.20binders/near/245176934).

2021-08-09 11:59:28 fb63cf3
chore(data/pfun): rename `roption` to `part`, split `data.part` off `data.pfun`  (#8544)

2021-08-09 10:27:32 6728201
chore(data/finsupp): add missing lemmas (#8553)
These lemmas are needed by `[simps {simp_rhs := tt}]` when composing equivs, otherwise simp doesn't make progress on `(map_range.add_equiv f).to_equiv.symm x` which should simplify to `map_range f.to_equiv.symm x`.

2021-08-09 08:17:21 3f5a348
chore(galois_connection): golf some proofs (#8582)
* golf some proofs
* add `galois_insertion.left_inverse_l_u` and `galois_coinsertion.left_inverse_u_l`;
* drop `galois_insertion.l_supr_of_ul_eq_self` and `galois_coinsertion.u_infi_of_lu_eq_self`: these lemmas are less general than `galois_connection.l_supr` and `galois_connection.u_infi`.

2021-08-09 08:17:20 24bbbdc
feat(group_theory/sylow): Generalize proof of first Sylow theorem (#8383)
Generalize the first proof. There is now a proof that every p-subgroup is contained in a Sylow subgroup.

2021-08-09 08:17:19 4813b73
feat(category_theory/adjunction): general adjoint functor theorem (#4885)
A proof of the general adjoint functor theorem. This PR also adds an API for wide equalizers (essentially copied from the equalizer API), as well as results relating adjunctions to (co)structured arrow categories and weakly initial objects. I can split this into smaller PRs if necessary?

2021-08-09 06:49:46 7bb4b27
feat(group_theory/group_action): Cayley's theorem (#8552)

2021-08-09 01:12:40 9e320a2
chore(measure_theory/special_functions): add measurability attributes (#8570)
That attribute makes the `measurability` tactic aware of those lemmas.

2021-08-08 19:18:31 ea77271
chore(analysis/calculus/{f,}deriv): fix, add missing lemmas (#8574)
* use `prod.fst` and `prod.snd` in lemmas like `has_fderiv_at_fst`;
* add `has_strict_deriv_at.prod`,
  `has_strict_fderiv_at.comp_has_strict_deriv_at`;
* use `set.maps_to` in some lemmas;
* golf some proofs.

2021-08-08 17:26:57 3788cbf
chore(algebra/*, data/polynomial/*): remove unnecessary imports (#8578)
I cleaned up all of `data.polynomial`, and the files in `algebra` it imports.

2021-08-08 11:51:48 87e9bec
chore(linear_algebra/matrix/trace): relax `comm_ring` to `comm_semiring` in `matrix.trace_mul_comm` (#8577)

2021-08-07 22:04:03 0a79eec
fix(order/bounds): remove double space (#8575)

2021-08-07 20:32:48 575fcc6
refactor(data/nat/choose): reduce assumptions on lemmas (#8508)
- rename `nat.choose_eq_factorial_div_factorial'` to `nat.cast_choose`
- change the cast from `ℚ` to any `char_zero` field
- get rid of the cast in `nat.choose_mul`. Generalization ensues.

2021-08-07 19:53:42 d757996
feat(analysis/complex): prove that complex functions are conformal if and only if the functions are holomorphic/antiholomorphic with nonvanishing differential (#8424)
Complex functions are conformal if and only if the functions are holomorphic/antiholomorphic with nonvanishing differential.

2021-08-07 00:16:50 b3c1de6
feat(analysis/complex/basic): add several trivial lemmas for differentiable functions. (#8418)
This file relates the differentiability of a function to the linearity of its `fderiv`.

2021-08-06 21:15:20 2f29e09
feat(group_action/defs): generalize faithful actions (#8555)
This generalizes the `faithful_mul_semiring_action` typeclass to a mixin typeclass `has_faithful_scalar`, and provides instances for some simple actions:
* `has_faithful_scalar α α` (on cancellative monoids and monoids with zero)
* `has_faithful_scalar (opposite α) α`
* `has_faithful_scalar α (Π i, f i)`
* `has_faithful_scalar (units A) B`
* `has_faithful_scalar (equiv.perm α) α`
* `has_faithful_scalar M (α × β)`
* `has_faithful_scalar R (α →₀ M)`
* `has_faithful_scalar S (polynomial R)` (generalized from an existing instance)
* `has_faithful_scalar R (mv_polynomial σ S₁)`
* `has_faithful_scalar R (monoid_algebra k G)`
* `has_faithful_scalar R (add_monoid_algebra k G)`
As well as retaining the one other existing instance
* `faithful_mul_semiring_action ↥H E` where `H : subgroup (E ≃ₐ[F] E)`
The lemmas taking `faithful_mul_semiring_action` as a typeclass argument have been converted to use the new typeclass, but no attempt has been made to weaken their other hypotheses.

2021-08-06 17:42:38 1b876c7
chore(algebra/ordered_group): fix/add `order_dual` instances, add lemmas (#8564)
* add `order_dual.has_inv`, `order_dual.group`, `order_dual.comm_group`;
* use new instances in `order_dual.ordered_comm_group` and
  `order_dual.linear_ordered_comm_group` (earlier we had only additive
  versions);
* add `le_of_forall_neg_add_le`, `le_of_forall_pos_sub_le`,
  `le_iff_forall_neg_add_le` and their multiplicative versions.

2021-08-06 15:53:55 88f9480
feat(logic/embedding): subtype_or_{embedding,equiv} (#8489)
Provide explicit embedding from a subtype of a disjuction into a sum type.
If the disjunction is disjoint, upgrade to an equiv.
Additionally, provide `subtype.imp_embedding`, lowering a subtype
along an implication.

2021-08-06 10:42:04 a23c47c
feat(topology/instances/ennreal): ediam of intervals (#8546)

2021-08-06 09:28:32 da32780
chore(data/polynomial/*): create file `data/polynomial/inductions` and move around lemmas (#8563)
This PR is a precursor to #8463: it performs the move, without introducing lemmas and squeezes some `simp`s to make some proofs faster.
I added add a doc-string to `lemma degree_pos_induction_on` with a reference to a lemma that will appear in #8463.
The main reason why there are more added lines than removed ones is that the creation of a new file has a copyright statement, a module documentation and a few variable declarations.

2021-08-06 09:28:31 b9e4c08
refactor(algebra/regular): split out `is_regular` (#8561)
One would like to import `is_regular` for rings. However, group powers
are too late in the algebra hierarchy,
so the proofs of powers of regular elements are factored
out to a separate file.

2021-08-06 09:28:30 59c8bef
feat (order/liminf_limsup): frequently_lt_of_lt_limsup (#8548)

2021-08-06 09:28:29 f471b89
feat(topology,geometry/manifold): continuous and smooth partition of unity (#8281)
Fixes #6392

2021-08-06 06:59:28 dc6adcc
feat(order/bounded_lattice): define the `distrib_lattice_bot` typeclass (#8507)
Typeclass for a distributive lattice with a least element.
This typeclass is used to generalize `disjoint_sup_left` and similar.
It inserts itself in the hierarchy between `semilattice_sup_bot, semilattice_inf_bot` and `generalized_boolean_algebra`, `bounded_distrib_lattice`. I am doing it through `extends`.

2021-08-06 02:17:48 e28d945
chore(scripts): update nolints.txt (#8562)
I am happy to remove some nolints for you!

2021-08-06 00:12:02 c2a0532
feat(logic/unique,data/fintype/basic): unique and fintype of subtype of one element (#8491)
Additionally, a lemma proving that the cardinality of such a subtype is 1.

2021-08-05 20:49:21 eb73c35
docs(order/complete_boolean_algebra): add module docstring, add whitespaces (#8525)

2021-08-05 19:03:04 c2ed7dc
feat(logic/basic): `ite p a b` is equal to `a` or `b` (#8557)

2021-08-05 19:03:03 52b6516
refactor(order/disjointed): generalize `disjointed` to generalized boolean algebras (#8409)
- Split `data.set.disjointed` into `data.set.pairwise` and `order.disjointed`. Change imports accordingly.
- In `order.disjointed`, change `set α` to `generalized_boolean_algebra α`. Redefine `disjointed` in terms of `partial_sups` to avoid needing completeness. Keep set notation variants of lemmas for easier unification.
- Rename some lemmas and reorder their arguments to make dot notation functional.
- Generalize some (where some = 2) `pairwise` lemmas.
- Delete lemmas which are unused and are a straightforward `rw` away from a simpler one (`Union_disjointed_of_mono`).

2021-08-05 16:28:09 8e79ea5
feat(data/matrix/basic): add `alg_(hom|equiv).map_matrix` (#8527)
This also adds a few standalone lemmas about `algebra_map`.

2021-08-05 12:24:03 a0cb45f
feat(linear_algebra/clifford_algebra): the reals and complex numbers have isomorphic real clifford algebras (#8165)

2021-08-04 21:40:15 ee8e447
chore(category_theory/whiskering): Fix docstring (#8533)

2021-08-04 19:46:09 d24faea
chore(data/real/basic): drop some lemmas (#8523)
Drop `real.Sup_le`, `real.lt_Sup`, `real.le_Sup`, `real.Sup_le_ub`, `real.le_Inf`, `real.Inf_lt`, `real.Inf_le`, `real.lb_le_Inf`. Use lemmas about `conditionally_complete_lattice`s instead.
Also drop unneeded assumptions in `real.lt_Inf_add_pos` and `real.add_neg_lt_Sup`.

2021-08-04 16:20:15 4e9b18b
chore(order/basic): rename monotone_of_monotone_nat and strict_mono.nat (#8550)
For more coherence (and easier discoverability), rename `monotone_of_monotone_nat` to `monotone_nat_of_le_succ`, and `strict_mono.nat` to `strict_mono_nat_of_lt_succ`.

2021-08-04 08:58:37 3a9b25d
fix(order/lattice): make non-instances reducible (#8541)
Some early fixes for the new linter in #8540.

2021-08-04 08:58:36 1691c6c
feat(algebra/opposites): {add,mul,ring}_equiv.op (#8535)
We had the equivalences of homs. Now we have equivalences of isos.

2021-08-04 08:58:35 096bdb7
refactor(group_theory/solvable): move subgroup commutators into new file (#8534)
The theory of nilpotent subgroups also needs a theory of general commutators (if H,K : subgroup G then so is [H,K]), but I don't really want to import solvable groups to get nilpotent groups, so I am breaking the solvable group file into two, splitting off the API for these commutators.

2021-08-04 07:05:50 292e3fa
refactor(nat/basic): Move lemma about nat (#8539)

2021-08-03 20:19:03 8502571
feat(topology/discrete_quotient): add two lemmas (#8464)
Add lemmas `proj_bot_injective` and `proj_bot_bijective`, the former needed for the latter, and the latter needed in LTE.

2021-08-03 19:43:28 d366672
feat(measure_theory/integration): add some `with_density` lemmas (#8517)

2021-08-03 17:55:51 9d129dc
feat(algebra/bounds): a few lemmas like `bdd_above (-s) ↔ bdd_below s` (#8522)

2021-08-03 16:52:11 c543ec9
feat(topology/algebra/ordered/basic): sequences tending to Inf/Sup (#8524)
We show that there exist monotone sequences tending to the Inf/Sup of a set in a conditionally complete linear order, as well as several related lemmas expressed in terms of `is_lub` and `is_glb`.

2021-08-03 15:41:09 2b3cffd
feat(algebra/floor): notation for nat_floor and nat_ceil (#8526)
We introduce the notations ` ⌊a⌋₊` for `nat_floor a` and `⌈a⌉₊` for `nat_ceil a`, mimicking the existing notations for `floor` and `ceil` (with the `+` corresponding to the recent notation for `nnnorm`).

2021-08-03 11:13:43 1700b3c
chore(ring_theory/fractional_ideal): make `coe : ideal → fractional_ideal` a `coe_t` (#8529)
This noticeably speeds up elaboration of `dedekind_domain.lean`, since it discourages the elaborator from going down a (nearly?)-looping path.
See also this Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Priority.20of.20.60coe_sort_trans.60

2021-08-03 11:13:41 5afd09a
chore(data/matrix/basic): move bundled versions of `matrix.map` beneath the algebra structure (#8528)
This will give us an obvious place to add the bundled alg_hom version in a follow-up PR.
None of the moved lines have been modified.
Note that the git diff shows that instead of `matrix.map` moving down, the `algebra` structure has moved up.

2021-08-03 11:13:40 3f4b836
feat(order/bounds): add `is_lub_pi` and `is_glb_pi` (#8521)

2021-08-03 11:13:39 ad83714
feat(fractional_ideal): `coe : ideal → fractional_ideal` as ring hom (#8511)
This PR bundles the coercion from integral ideals to fractional ideals as a ring hom, and proves the missing `simp` lemmas that show the map indeed preserves the ring structure.

2021-08-03 09:27:49 b681b6b
chore(order/bounds): add `@[simp]` attrs, add `not_bdd_*_univ` (#8520)

2021-08-03 07:45:29 1021679
feat(algebra/ordered_monoid): a few more `order_dual` instances (#8519)
* add `covariant.flip` and `contravariant.flip`;
* add `[to_additive]` to `group.covariant_iff_contravariant` and
  `covconv` (renamed to `group.covconv`);
* use `group.covconv` in
  `group.covariant_class_le.to_contravariant_class_le`;
* add some `order_dual` instances for `covariant_class` and
  `contravariant_class`;
* golf `order_dual.ordered_comm_monoid`.

2021-08-02 23:06:35 0bef4a0
feat(algebra/group_with_zero): pullback a `comm_cancel_monoid_with_zero` instance across an injective hom (#8515)
This generalizes `function.injective.cancel_monoid_with_zero` to the commutative case.
See also: https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/A.20submonoid.20of.20a.20.60cancel_monoid_with_zero.60.20also.20cancels

2021-08-02 21:14:46 2568d41
feat(data/matrix/basic): Add bundled versions of matrix.diagonal (#8510)
Also shows injectivity of `diagonal`.

2021-08-02 21:14:45 77d6c8e
feat(simps): better name for additivized simps-lemmas (#8457)
* When using `@[to_additive foo, simps]`, the additivized simp-lemmas will have name `foo` + projection suffix (or prefix)
* Also add an option for `@[to_additive]` to accept the attribute with the correct given name. This is only useful when adding the `@[to_additive]` attribute via metaprogramming, so this option cannot be set by the `to_additive` argument parser.

2021-08-02 20:14:32 17f1d28
chore(data/matrix): delete each of the `matrix.foo_hom_map_zero` (#8512)
These can already be found by `simp` since `matrix.map_zero` is a `simp` lemma, and we can manually use `foo_hom.map_matrix.map_zero` introduced by #8468 instead. They also don't seem to be used anywhere in mathlib, given that deleting them with no replacement causes no build errors.

2021-08-02 17:05:53 17b1e7c
feat(data/equiv/mul_add): add `equiv.(div,sub)_(left,right)` (#8385)

2021-08-02 14:22:13 9a251f1
refactor(data/matrix/basic): merge duplicate algebra structures (#8486)
By putting the algebra instance in the same file as `scalar`, a future patch can probably remove `matrix.scalar` entirely (it's just another spelling of `algebra_map`).
Note that we actually had two instances of `algebra R (matrix n n R)` in different files, and the second one was strictly more general than the first. This removes the less general one.
Moving the imports around like this changes the number of simp lemmas available in downstream files, which can make `simp` slow enough to push a proof into a timeout.
A lot of files were expecting a transitive import of `algebra.algebra.basic` to import `data.fintype.card`, which it no longer does; hence the need to add this import explicitly.
There are no new lemmas or generalizations in this change; the old `matrix_algebra` has been deleted, and everything else has been moved with some variables renamed.

2021-08-02 12:31:20 c8b7816
feat(algebra/ordered_monoid): add_eq_bot_iff (#8474)
bot addition is saturating on the bottom. On the way, typeclass arguments
were relaxed to just `[add_semigroup α]`, and helper simp lemmas
added for `bot`.
The iff lemma added (`add_eq_bot`) is not exactly according to the naming convention, but matches the top lemma and related ones in the naming style, so the style is kept consistent.
There is an API proof available, but the defeq proof (using the top equivalent) was used based on suggestions.

2021-08-02 12:31:19 f354c1b
feat(order/bounded_lattice): add some disjoint lemmas (#8407)
This adds `disjoint.inf_left` and `disjoint.inf_right` (and primed variants) to match the existing `disjoint.sup_left` and `disjoint.sup_right`.
This also duplicates these lemmas to use set notation with `inter` instead of `inf`, matching the existing `disjoint.union_left` and `disjoint.union_right`.

2021-08-02 11:38:23 af8e56a
docs(overview): add holder continuity (#8506)

2021-08-02 11:38:22 25a4230
chore(data/real/basic): cleanup (#8501)
* use `is_lub` etc in the statement of `real.exists_sup`, rename it to `real.exists_is_lub`;
* move parts of the proof of `real.exists_is_lub` around;

2021-08-02 10:07:38 69c6adb
chore(data/int): move some lemmas from `basic` to a new file (#8495)
Move `least_of_bdd`, `exists_least_of_bdd`, `coe_least_of_bdd_eq`,
`greatest_of_bdd`, `exists_greatest_of_bdd`, and
`coe_greatest_of_bdd_eq` from `data.int.basic` to `data.int.least_greatest`.

2021-08-02 10:07:37 4a9cbdb
feat(data/matrix/basic): provide equiv versions of `matrix.map`, `linear_map.map_matrix`, and `ring_hom.map_matrix`. (#8468)
This moves all of these definitions to be adjacent, adds the standard family of functorial simp lemmas, and relaxes some typeclass requirements.
This also renames `matrix.one_map` to `matrix.map_one` to match `matrix.map_zero`.

2021-08-02 08:51:21 1b771af
feat(group_theory/coset): card_dvd_of_injective (#8485)

2021-08-02 02:56:39 0f168d3
refactor(data/real/nnreal): use `ord_connected_subset_conditionally_complete_linear_order` (#8502)

2021-08-02 02:56:38 5994df1
feat(algebra/group_power/lemmas): is_unit_pos_pow_iff (#8420)

2021-08-02 02:15:39 db0cd4d
chore(scripts): update nolints.txt (#8505)
I am happy to remove some nolints for you!

2021-08-01 22:56:38 bfa6bbb
doc(algebra/algebra/basic): add a comment to make the similar definition discoverable (#8500)
I couldn't find this def, but was able to find lmul.

2021-08-01 21:03:45 fdb0369
feat(algebra/group/semiconj): add `semiconj_by.reflexive` and `semiconj_by.transitive` (#8493)

2021-08-01 21:03:44 60c378d
feat(algebra/ordered_group): add `order_iso.inv` (#8492)
* add `order_iso.inv` and `order_iso.neg`;
* use it to golf a few proofs;
* use `alias` to generate some `imp` lemmas from `iff` lemmas;
* generalize some lemmas about `order_iso` from `preorder` to `has_le`.

2021-08-01 21:03:43 1530d76
feat(group_theory/congruence): add `con.lift_on_units` etc (#8488)
Add a helper function that makes it easier to define a function on
`units (con.quotient c)`.

2021-08-01 21:03:42 9c4dd02
feat(group_theory/order_of_element): order_of_dvd_iff_gpow_eq_one (#8487)
Version of `order_of_dvd_iff_pow_eq_one` for integer powers

2021-08-01 21:03:41 9194f20
feat(data/nat/prime): pow_dvd_of_dvd_mul_right (#8483)

2021-08-01 21:03:40 b099103
feat(group_theory/subgroup): add `subgroup.forall_gpowers` etc (#8470)
* add `subgroup.forall_gpowers`, `subgroup.exists_gpowers`,
  `subgroup.forall_mem_gpowers`, and `subgroup.exists_mem_gpowers`;
* add their additive counterparts;
* drop some explicit lemmas about `add_subgroup.gmultiples`:
  `to_additive` can generate them now.

2021-08-01 21:03:39 52a2e8b
chore(algebra/group/hom_instances): add monoid_hom versions of linear_map lemmas (#8461)
I mainly want the additive versions, but we may as well get the multiplicative ones too.
This also adds the missing `monoid_hom.map_div` and some other division versions of subtraction lemmas.

2021-08-01 21:03:36 894fb0c
feat(data/nat/totient): totient_prime_pow (#8353)

2021-08-01 19:11:26 7249afb
feat(measure_theory/[integrable_on, set_integral]): integrals on two ae-eq sets are equal (#8440)

2021-08-01 19:11:25 d3c943b
refactor(data/set/lattice): add congr lemmas for `Prop`-indexed `Union` and `Inter` (#8260)
Thanks to new `@[congr]` lemmas `Union_congr_Prop` and `Inter_congr_Prop`, `simp` can simplify `p y` in `⋃ y (h : p y), f y`. As a result, LHS of many lemmas (e.g., `Union_image`) is no longer in `simp` normal form. E.g.,
```lean
lemma bUnion_range {f : ι → α} {g : α → set β} : (⋃x ∈ range f, g x) = (⋃y, g (f y)) :=
```
can no longer be a `@[simp]` lemma because `simp` simplifies `⋃x ∈ range f, g x` to `⋃ (x : α) (h : ∃ i, f i = x), g x`, then to `⋃ (x : α) (i : α) (h : f i = x), g x`. So, we add
```lean
@[simp] lemma Union_Union_eq' {f : ι → α} {g : α → set β} :
  (⋃ x y (h : f y = x), g x) = ⋃ y, g (f y) :=
```
Also, `Union` and `Inter` are semireducible, so one has to explicitly convert between these operations and `supr`/`infi`.

2021-08-01 17:17:28 f961b28
chore(deprecated/*): Make deprecated classes into structures (#8178)
I make the deprecated classes `is_group_hom`, `is_subgroup`, ... into structures, and delete some deprecated constructions which become inconvenient or essentially unusable after these changes. I do not completely remove all deprecated imports in undeprecated files, however I push these imports much further towards the edges of the hierarchy. 
More detailed comments about what is going on here:
In the `src/deprecated/` directory, classes such as `is_ring_hom` and `is_subring` are defined (and the same for groups, fields, monoids...). These are predicate classes on functions and sets respectively, formerly used to handle ring morphisms and subrings before both were bundled. Amongst other things, this PR changes all the relevant definitions from classes to structures and then picks up the pieces (I will say more about what this means later). Before I started on this refactor, my opinion was that these classes should be turned into structures, but should be left in mathlib. After this refactor, I am now moving towards the opinion that it would be no great loss if these structures were removed completely -- I do not see any time when we really need them.
The situation I previously had in mind where the substructures could be useful is if one is (in the middle of a long tactic proof) defining an explicit subring of a ring by first defining it as a subset, or `add_subgroup` or whatever, and then doing some mathematics to prove that this subset is closed under multiplication, and hence proving that it was a subring after all. With the old approach this just involves some `S : set R` with more and more properties being proved of it and added to the type class search as the proof progresses. With the bundled set-up, we might have `S : set R` and then later on we get `S_subring : subring R` whose underlying subset equals S, and then all our hypotheses about `S` built up during the proof can no longer be used as rewrites, we need to keep rewriting or `change`ing `x \in S_subring` to `x \in S` and back again. This issue showed up only once in the refactor, in `src/ring_theory/integral_closure.lean`, around line 230, where I refactored a proof to avoid the deprecated structures and it seemed to get a bit longer. I can definitely live with this.
One could imagine a similar situation with morphisms (define f as a map between rings, and only later on prove that it's a ring homomorphism) but actually I did not see this situation arise at all. In fact the main issue I ran into with morphism classes was the following (which showed up 10 or so times): there are many constructions in mathlib which actually turn out to be, or (even worse) turn out under some extra assumptions to be, maps which preserve some structure. For example `multiset.map (f : X -> Y) : multiset X -> multiset Y` (which was in mathlib since it was born IIRC) turns out to be an add_group_hom, once the add_group structure is defined on multisets. So here I had a big choice to make: should I actually rename `multiset.map` to be `private multiset.map_aux` and then redefine `multiset.map` to be the `add_monoid_hom`? In retrospect I think that there's a case for this. In fact `data.multiset.basic` is the biggest source of these issues -- `map` and `sum` and `countp` and `count` are all `add_monoid_hom`s. I did not feel confident about ripping out these fundamental definitions so I made four new ones, `map_add_monoid_hom`, `sum_add_monoid_hom` etc. The disadvantage with this approach is that again rewrites get a bit more painful: some lemma which involves `map` may need to be rewritten so that it involves `map_add_monoid_hom` so that one can apply `add_monoid_hom.map_add`, and then perhaps rewritten back so that one can apply other rewrites. Random example: line 43 of `linear_algebra.lagrange`, where I have to rewrite `coe_eval_ring_hom` in both directions. Let me say that I am most definitely open to the idea of renaming `multiset.map_add_monoid_hom` to `multiset.map` and just nuking our current `multiset.map` or making it private or `map_aux` or whatever but we're already at 92 files changed so it might be best to get this over with and come up with a TODO list for future tidy-ups. Another example: should the fields of `complex` be `re'` and `im'`, and `complex.re` be redefined as the R-linear map? Right now in mathlib we only use the fact that it's an `add_group_hom`, and I define `re_add_group_hom` for this. Note however one can not always get away with this renaming trick, for example there are instances when a certain fundamental construction only preserves some structure under additional conditions -- for example `has_inv.inv` on groups is only a group homomorphism when the underlying group is abelian (and the same for `pow` and `gpow`). In the past this was dealt with by a typeclass `is_group_hom` on `inv` which fired in the presence of a `comm_group` but not otherwise; now this has to be dealt with by a second definition `inv_monoid_hom` whose underlying function is `inv`. You can't just get away with applying the proof of `inv (a * b) = inv a * inv b` when you need it, because sometimes you want to apply things like `monoid_hom.map_prod` which needs a `monoid_hom` as input, so won't work with `inv`: you need to rewrite one way, apply `monoid_hom.map_prod` and then rewrite back the other way now :-/ I would say that this was ultimately the main disadvantage of this approach, but it seems minor really and only shows up a few times, and if we go ahead with the renaming plan it will happen even fewer times.
I had initially played with the idea of just completely removing all deprecated imports in non-deprecated files, but there were times near the end when I just didn't feel like it (I just wanted it to be over, I was scared to mess around in `control` or `test`), so I removed most of them but added some deprecated imports higher up the tree (or lower down the tree, I never understand which way up this tree is, I mean nearer the leaves -- am I right in that computer scientists for some reason think the root of a tree is at the top?). It will not be too hard for an expert to remove those last few deprecated imports in src outside the `deprecated` directory in subsequent PR's, indeed I could do it myself but I might I might need some Zulip help. Note: it used to be the case that `subring` imported `deprecated.subring`; this is now the other way around, which is much more sensible (and matches with submonoid). Outside the deprecated directory, there are only a few deprecated imports: `control.fold` (which I don't really want to mess with),`group_theory.free_abelian_group` (there is a bunch of `seq` stuff which I am not sure is ever used but I just couldn't be bothered, it might be the sort of refactor which someone finds interesting or fun though), `ring_theory.free_comm_ring` (this file involves some definitional abuse which either needs to be redone "mathematically" or rewritten to work with bundled morphisms) and `topology.algebra.uniform_group` (which I think Patrick is refactoring?) and a test file.
If you look at the diffs you see that various things are deleted (lots of `is_add_monoid_hom foo` proofs), but many of these deletions come with corresponding additions (e.g. a new `foo_group_hom` definition if it was not there already, plus corresponding `simp` lemma, which is randomly either a `coe` or an `apply` depending on what mood I was in; this could all be done with `@[simps]` trickery apparently but I didn't read the thread carefully yet). Once nice achievement was that I refactored a bunch of basic ring and field theory to avoid the `is_` classes completely, which I think is a step in the right direction (people were occasionally being forced to use deprecated stuff when doing stuff like Galois theory because some fundamental things used to use them; this is no longer the case -- in particular I think Abel-Ruffini might now be deprecated-free, or very nearly so). 
`finset.sum_hom` and `finset.prod_hom` are gone. It is very funny to do a search for these files in mathlib current master as I write -- 98% of the time they're used, they're used backwards (with `.symm` or `\l` with a rewrite). The bundled versions (`monoid_hom.map_prod` etc) are written the other way around. I could have just left them and not bothered, but it seemed easier just to get rid of them if we're moving to bundled morphisms. One funny observation was that unary `-` seemed to be a special case: we
seem to prefer `-\sum i, f i` to `\sum i, -(f i)` . For almost every other function, we want it to go the other way.

2021-08-01 11:40:51 9ed4380
feat(measure_theory/vector_measure): define the pullback and restriction of a vector measure (#8408)

2021-08-01 09:36:34 5b9b455
chore(order/complete_lattice): generalize `Sup_eq_supr'`, add lemmas (#8484)
* `Sup_eq_supr'` only needs `[has_Sup α]`, add `Inf_eq_infi'`;
* add `supr_range'`, `infi_range'`, `Sup_image'`, `Inf_image'`
  lemmas that use supremum/infimum over subtypes and only require
  `[has_Sup]`/`[has_Inf]`.

2021-08-01 09:36:33 de78d42
feat(order/rel_iso): add `equiv.to_order_iso` (#8482)
Sometimes it's easier to show `monotone e` and `monotone e.symm` than
`e x ≤ e y ↔ x ≤ y`.

2021-08-01 09:36:33 4f2006e
chore(order/iterate): slightly generalize 2 lemmas (#8481)

2021-08-01 08:34:12 2063a52
feat(order/partial_sups): complete lattice lemmas (#8480)

2021-08-01 03:28:41 79bc732
feat(order/galois_connection): formula for `upper_bounds (l '' s)` (#8478)
* upgrade `galois_connection.upper_bounds_l_image_subset` and
  `galois_connection.lower_bounds_u_image` to equalities;
* prove `bdd_above (l '' s) ↔ bdd_above s` and
  `bdd_below (u '' s) ↔ bdd_below s`;
* move `galois_connection.dual` to the top and use it in some proofs;
* use `order_iso.to_galois_connection` to transfer some of these
  results to `order_iso`s;
* rename `rel_iso.to_galois_insertion` to `order_iso.to_galois_insertion`.

2021-07-31 21:11:47 4c2edb0
feat(data/equiv/mul_add): add `units.coe_inv` (#8477)
* rename old `units.coe_inv` to `units.coe_inv''`;
* add new `@[simp, norm_cast, to_additive] lemma units.coe_inv` about
  coercion of units of a group;
* add missing `coe_to_units`.

2021-07-31 21:11:46 6c6dd04
feat(logic/relation): add `*.comap` for `reflexive`, `symmetric`, and `transitive` (#8469)

2021-07-31 20:17:15 0827f3a
feat(topology/metric_space/holder): add `holder_on_with` (#8454)

2021-07-31 18:55:07 b3943dc
feat(algebra/archimedean): `order_dual α` is archimedean (#8476)

2021-07-31 16:29:04 339a122
chore(data/sym): move `data.sym` and `data.sym2` to `data.sym.basic` and `data.sym.sym2` (#8471)

2021-07-31 13:15:04 0a48016
doc(analysis/calculus/conformal): fix a docstring (#8479)
Fix a grammar mistake

2021-07-30 16:11:00 6e400b9
feat(data/matrix/basic): update_{column,row}_subsingleton (#8422)

2021-07-30 12:33:57 977063f
chore(group_theory/congruence): a few `simp` lemmas (#8452)
* add `con.comap_rel`;
* add `@[simp]` to `con.ker_rel`;
* replace `con.comp_mk'_apply` with `con.coe_mk'`;
* [unrelated] add `commute.semiconj_by`.

2021-07-30 07:20:29 98b0d18
feat(analysis/normed_space/SemiNormedGroup/kernel): Fix universes + add explicit (#8467)
See associated discussion from [zulip](https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/for_mathlib/near/247575730)

2021-07-30 02:40:20 8c89a52
feat(algebra/ordered_monoid_lemmas): add one `strict_mono` lemma and a few doc-strings (#8465)
The product of strictly monotone functions is strictly monotone (and some doc-strings).
[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monotonicity.20for.20sums.20and.20products.20of.20monotone.20functions)

2021-07-29 15:02:31 a4f1653
feat(ring_theory): Dedekind domains have invertible fractional ideals  (#8396)
This PR proves the other side of the equivalence `is_dedekind_domain → is_dedekind_domain_inv`, and uses this to provide a `comm_group_with_zero (fractional_ideal A⁰ K)` instance.
Co-Authored-By: Ashvni ashvni.n@gmail.com
Co-Authored-By: Filippo A. E. Nuccio filippo.nuccio@univ-st-etienne.fr

2021-07-29 13:21:06 69e3c79
feat(logic/unique): unique_of_subsingleton (#8415)

2021-07-29 11:52:13 7a89150
doc(data/nat/pairing): fix ascii table markdown (#8460)

2021-07-29 06:51:42 cd6f272
feat(order/*): a bunch of lemmas about `order_iso` (#8451)

2021-07-28 22:58:41 6d3e936
feat(measure_theory): add @[to_additive] (#8142)
This PR adds `@[to_additive]` to `haar_measure` and everything that depends on. This will allow us to define the Lebesgue measure on `ℝ` and `ℝ ^ n` as the Haar measure (or just show that it is equal to it).

2021-07-28 21:04:18 870b9d8
ci(bors.toml): add merge-conflict to block_labels (#8455)

2021-07-28 21:04:17 92a5be8
feat(ring,group,monoid): map_equiv lemmas for different structures (#8453)
There is some inconsistency in the statements of these lemmas because there is a coercion from `ring_equiv` to `ring_hom`, but not `mul_equiv` to `monoid_hom`.

2021-07-28 19:44:39 7180d2f
feat(group_theory/coset): Show that `quotient_group.left_rel` and `left_coset_equivalence` are the same thing (#8382)

2021-07-28 17:10:49 32c8227
feat(analysis/normed_space/basic): define inclusion `locally_constant X G → C(X, G)` as various types of bundled morphism (#8448)

2021-07-28 14:08:17 b71d38c
feat(algebra/big_operators/basic): add lemmas about prod and sum of finset.erase (#8449)
This adds:
* `finset.prod_erase_mul`
* `finset.mul_prod_erase`
* `finset.sum_erase_add`
* `finset.add_sum_erase`

2021-07-28 14:08:16 0ccd2f6
feat(data/dfinsupp): add simp lemma `single_eq_zero` (#8447)
This matches `finsupp.single_eq_zero`.
Also adds `dfinsupp.ext_iff`, and changes some lemma arguments to be explicit.

2021-07-28 11:16:48 4acfa92
chore(algebra/floor): add a few trivial `simp` lemmas about `floor` (#8450)

2021-07-28 09:02:05 30ff935
feat(topology/algebra): topological fields (#8316)
Including the completion of completeable topological fields.
From the perfectoid spaces project.

2021-07-28 02:23:58 52e6e4c
chore(scripts): update nolints.txt (#8446)
I am happy to remove some nolints for you!

2021-07-28 00:40:18 7c5fa72
refactor(group_theory/sylow): Extract a lemma from the proof of Cauchy's theorem (#8376)
Also added one other consequence of card_modeq_card_fixed_points.

2021-07-28 00:40:17 37fc4cf
feat(group_theory/subgroup): equiv_map_of_injective (#8371)
Also for rings and submonoids. The version for modules, `submodule.equiv_map_of_injective`, was already there.

2021-07-27 23:02:33 cc7627a
feat(analysis/normed_space/basic): define `normed_group` structure induced by injective group homomorphism (#8443)

2021-07-27 23:02:32 1b0391a
feat(data/nat/totient): totient_mul (#8441)
Also made `data/nat/totient` import `data/zmod/basic` instead of the other way round because I think people are more likely to want `zmod` but not `totient` than `totient` but not `zmod`.
Also deleted the deprecated `gpowers` because it caused a name clash in `group_theory/subgroup` when the imports were changed.

2021-07-27 23:02:31 a445c45
feat(measure_theory/interval_integrable): a monotone function is interval integrable (#8398)

2021-07-27 19:34:42 9f75dc8
feat(measure_theory/lebesgue_measure): volume s ≤ diam s (#8437)
* for `s : set real`, `volume s ≤ diam s`;
* for `s : set (ι → real)`, `volume s ≤ ∏ i, diam (eval i '' s) ≤ diam s ^ fintype.card ι`.

2021-07-27 19:34:41 5375918
feat(topology/metric_space/antilipschitz): ediam of image/preimage (#8435)
Also review API

2021-07-27 19:34:40 d57b6f9
chore(data/dfinsupp): add yet more map_dfinsupp_sum lemmas (#8400)
As always, the one of quadratically many combinations of `FOO_hom.map_BAR_sum` is never there when you need it.

2021-07-27 19:34:39 aea21af
feat(ring_theory): `is_dedekind_domain_inv` implies `is_dedekind_domain` (#8315)
Co-Authored-By: Ashvni ashvni.n@gmail.com
Co-Authored-By: Filippo A. E. Nuccio filippo.nuccio@univ-st-etienne.fr

2021-07-27 19:34:38 a052dd6
doc(algebra/invertible): implementation notes about `invertible` instances (#8197)
In the discussion on #8195, I suggested to add these implementation notes. Creating a new PR should allow for a bit more direct discussion on the use of and plans for `invertible`.

2021-07-27 19:34:37 2ea73d1
feat(analysis/normed_space/SemiNormedGroup): has_cokernels (#7628)
# Cokernels in SemiNormedGroup₁ and SemiNormedGroup
We show that `SemiNormedGroup₁` has cokernels
(for which of course the `cokernel.π f` maps are norm non-increasing),
as well as the easier result that `SemiNormedGroup` has cokernels.
So far, I don't see a way to state nicely what we really want:
`SemiNormedGroup` has cokernels, and `cokernel.π f` is norm non-increasing.
The problem is that the limits API doesn't promise you any particular model of the cokernel,
and in `SemiNormedGroup` one can always take a cokernel and rescale its norm
(and hence making `cokernel.π f` arbitrarily large in norm), obtaining another categorical cokernel.

2021-07-27 16:37:38 768980a
feat(topology/locally_constant/basic): coercion of locally-constant function to continuous map (#8444)

2021-07-27 16:37:36 3faee06
feat(algebra/order_functions): max/min commutative and other props (#8416)
The statements of the commutivity, associativity, and left commutativity of min and max are stated only in the rewrite lemmas, and not in their "commutative" synonyms.
This prevents them from being discoverable by suggest and related tactics. We now provide the synonyms explicitly.

2021-07-27 16:37:35 6c2f80c
feat(category_theory/limits): disjoint coproducts (#8380)
Towards a more detailed hierarchy of categorical properties.

2021-07-27 16:37:34 bb44e1a
feat(category_theory/subobject): generalise bot of subobject lattice (#8232)

2021-07-27 13:18:35 b61ce02
feat(number_theory/padics/padic_norm): add p^v(n) | n (#8442)
Add some API for `padic_val_nat` (a convenient function for e.g. Sylow theory).

2021-07-27 10:18:45 7ae8da4
fix(algebra/big_operators/ring): `finset.sum_mul_sum` is true in a non-assoc non-unital semiring (#8436)

2021-07-27 10:18:44 3b590f3
feat(logic/embedding): add a coe instance from equiv to embeddings (#8323)

2021-07-27 08:42:12 23e7c84
fix(algebra/ordered_group): add missing `to_additive`, fix `simps` (#8429)
* Add `order_iso.add_left` and `order_iso.add_right`.
* Use `to_equiv :=` instead of `..` to ensure
  `rfl : (order_iso.mul_right a).to_equiv = equiv.mul_right a`.
* Simplify unapplied `(order_iso.mul_left a).symm` etc.

2021-07-27 08:42:11 391746b
feat(data/zmod/basic): chinese remainder theorem (#8356)

2021-07-27 08:42:10 65006d2
feat(linear_algebra/linear_independent): finsupp.total is not equal to a vector outside the support of the coefficients (#8338)
…

2021-07-27 08:42:09 7e37f20
feat(group_theory/perm/cycles): more lemmas (#8175)

2021-07-27 07:49:28 d99788a
feat(measure_theory/borel_space): lemmas about `is_pi_system_Ioo` and `finite_spanning_sets_in` (#8434)

2021-07-27 07:49:27 eae3ead
feat(topology/instances/ennreal): diameter of `s : set real` (#8433)

2021-07-27 06:14:26 fb815d7
feat(algebra/ring/basic): coercions of ring_hom.id (#8439)
Two basic lemmas about the identity map as a ring hom, split off from #3292 at @eric-wieser's suggestion.

2021-07-26 23:52:54 e9309e3
chore(data/equiv/list): rename `encodable.fintype.encodable` to `fintype.encodable` (#8428)

2021-07-26 22:05:39 26528b7
chore(data/set): add a couple of lemmas (#8430)

2021-07-26 15:58:30 0190177
feat(group_theory/subgroup): eq_top_of_le_card and eq_bot_of_card_le (#8414)
Slight strengthenings of the lemmas `eq_top_of_card_eq` and `eq_bot_of_card_eq`.

2021-07-26 15:58:29 d8fc081
chore(data/pnat/basic): rename `bot_eq_zero` to `bot_eq_one`, generalize from `Prop` to `Sort*` (#8412)

2021-07-26 15:58:28 1dc4bef
feat(ring_theory): shortcut lemmas for `coe : ideal R → fractional_ideal R⁰ K` (#8395)
These results were already available, but in a less convenient form that e.g. asked you to prove an inclusion of submonoids `S ≤ R⁰`. Specializing them to the common case where the fractional ideal is in the field of fractions should save a bit of headache in the common cases.

2021-07-26 15:58:27 708b25d
feat(ring_theory): (fractional) ideals are finitely generated if they are invertible (#8294)
This is one of the three steps in showing `is_dedekind_domain_inv` implies `is_dedekind_domain`.
Co-Authored-By: Ashvni ashvni.n@gmail.com
Co-Authored-By: Filippo A. E. Nuccio filippo.nuccio@univ-st-etienne.fr

2021-07-26 14:30:57 4ca0a8b
feat(data/fintype/basic): provide a `fintype` instance for `sym α n` (#8427)
This also provides `fintype (sym.sym' α n)` as an intermediate step.
Note we make `vector.perm.is_setoid` reducible as `quotient.fintype _` requires either this or `local attribute [instance] vector.perm.is_setoid` to be accepted by the elaborator.
The referenced library note suggests making it reducible is fine.

2021-07-26 07:37:51 740b41b
feat(data/fintype/basic): add `finset.(sup|inf)_univ_eq_(supr|infi)` (#8397)

2021-07-25 15:51:33 0c024a6
chore(*): standardize Prop/Type instance names (#8360)
autogenerated names for these instances mention `sort.` instead of `Prop.`

2021-07-25 15:12:53 2440330
feat(linear_algebra/matrix/determinant): det_pow (#8421)

2021-07-25 07:06:29 fff96e5
feat(measure_theory/vector_measure): add partial order instance to vector measures (#8410)

2021-07-24 22:55:28 02b37b5
feat(group_theory/subgroup): eq_bot_of_card_eq (#8413)
Companion lemma to `eq_top_of_card_eq`.

2021-07-24 15:30:35 8a0d5e0
feat(group_theory/complement): define subgroup complement, prove Schur-Zassenhaus (#8008)
Defines complements, and proves Schur-Zassenhaus for abelian normal subgroups.

2021-07-24 14:21:11 3d11f2d
refactor(data/set/disjointed): split into `data.set.pairwise` and `order.disjointed` (#8411)

2021-07-23 17:15:08 dfa95ab
feat(analysis/normed_space/linear_isometry): add an upgrade from linear isometries between finite dimensional spaces of eq finrank to linear isometry equivs (#8406)

2021-07-23 11:58:54 8062521
feat(topology/locally_constant): Adding a module structure to locally constant functions (#8384)
We add an A-module structure to locally constant functions from a topological space to a semiring A.
This also adds the lemmas `coe_zero`, `coe_add`, `coe_neg`, `coe_sub`, `coe_one`, `coe_mul`, `coe_div`, `coe_inv` to match the new `coe_smul` lemma.

2021-07-23 10:09:40 f2f6228
feat(set/basic): range_splitting f : range f → α (#8340)
We use choice to provide an arbitrary injective splitting `range f → α` for any `f : α → β`.

2021-07-23 09:02:53 6efc3e9
fix(data/polynomial): Resolve a has_scalar instance diamond (#8392)
Without this change, the following fails to close the diamond between `units.distrib_mul_action` and`polynomial.distrib_mul_action`:
```lean
example (R α : Type*) (β : α → Type*) [monoid R] [semiring α] [distrib_mul_action R α] :
  (units.distrib_mul_action : distrib_mul_action (units R) (polynomial α)) =
    polynomial.distrib_mul_action :=
rfl
```
This was because both used `polynomial.smul`, which was:
* `@[irreducible]`, which means that typeclass search is unable to unfold it to see there is no diamond
* Defined using a pattern match, which means that even if it were not reducible, it does not unfold as needed.
This adds a new test file with this diamond and some other diamonds to verify they are defeq.
Unfortunately this means `simps` now aggressively unfolds `•` on polynomials into `finsupp`s, so we need to tell `simps` precisely what lemma we actually want. This only happens in one place though.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/units.2Ehas_scalar.20and.20polynomial.2Ehas_scalar.20diamond/near/246800881)

2021-07-23 09:02:52 ced1f12
feat(analysis/calculus): strictly differentiable (or C^1) map is locally Lipschitz (#8362)

2021-07-23 09:02:51 1dafd0f
feat(measure_theory/integrable_on): a monotone function is integrable on any compact subset (#8336)

2021-07-23 08:09:01 970b17b
refactor(topology/metric_space): move lemmas about `paracompact_space` and the shrinking lemma to separate files (#8404)
Only a few files in `mathlib` actually depend on results about `paracompact_space`. With this refactor, only a few files depend on `topology/paracompact_space` and `topology/shrinking_lemma`. The main side effects are that `paracompact_of_emetric` and `normal_of_emetric` instances are not available without importing `topology.metric_space.emetric_paracompact` and the shrinking lemma for balls in a proper metric space is not available without `import topology.metric_space.shrinking_lemma`.

2021-07-23 04:48:50 0dd81c1
chore(topology/urysohns_lemma): use bundled `C(X, ℝ)` (#8402)

2021-07-23 02:11:57 88de9b5
chore(scripts): update nolints.txt (#8403)
I am happy to remove some nolints for you!

2021-07-23 00:02:46 316d69f
feat(measure_theory/measure_space): add measurable set lemma for symmetric differences (#8401)

2021-07-22 21:19:37 0cbc6f3
feat(linear_algebra/matrix/determinant): generalize det_fin_zero to det_eq_one_of_is_empty (#8387)
Also golfs a nearby proof

2021-07-22 17:40:08 468328d
chore(group_theory/subgroup): the range of a monoid/group/ring/module hom from a finite type is finite (#8293)
We have this fact for maps of types, but when changing `is_group_hom` etc from classes to structures one needs it for other bundled maps. The proofs use the power of the `copy` trick.

2021-07-22 16:15:21 0bc800c
feat(algebra/algebra/basic) new bit0/1_smul_one lemmas (#8394)
See https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Import.20impacts.20simp.3F/near/246713984, these lemmas should result in better behaviour with numerals

2021-07-22 16:15:20 7cdd702
chore(ring_theory): `set_like` instance for fractional ideals (#8275)
This PR does a bit of cleanup in `fractional_ideal.lean` by using `set_like` to define `has_mem` and the coe to set.
As a bonus, it removes the `namespace ring` at the top of the file, that has been bugging me ever after I added it in the original fractional ideal PR.

2021-07-22 14:12:58 38ac9ba
chore(algebra/module/submodule): add submodule.coe_sum (#8393)

2021-07-22 14:12:57 e2cda0b
chore(*): Prevent lemmas about the injectivity of `coe_fn` introducing un-reduced lambda terms (#8386)
This follows on from #6344, and fixes every result for `function.injective (λ` that is about coe_fn.

2021-07-22 14:12:56 54adb19
doc(algebra/to_additive): Add troubleshooting section (#8143)

2021-07-22 12:14:07 791d51c
feat(group_theory/group_action): a monoid action determines a monoid hom (#8253)
Defines the monoid hom `M -> category_theory.End X` (the latter is the monoid `X -> X`) corresponding to an action `mul_action M X` and vice versa.
Split off from #7395

2021-07-22 11:40:10 6f88eec
feat(algebra/lie/{submodule,subalgebra}): `lie_span`, `coe` form a Galois insertion (#8213)

2021-07-22 07:37:52 c9593dc
feat(algebra/lie/direct_sum): define `direct_sum.lie_of`, `direct_sum.to_lie_algebra`, `direct_sum.lie_algebra_is_internal` (#8369)
Various other minor improvements.

2021-07-22 06:50:48 df50b6c
feat(category_theory/limits): strict initial objects are initial mono (#8267)
- [x] depends on: #8094 
- [x] depends on: #8099

2021-07-22 02:19:36 bc65818
chore(scripts): update nolints.txt (#8390)
I am happy to remove some nolints for you!

2021-07-21 22:22:58 9e35530
fix(order/lattice, tactic.simps): add missing `notation_class` attributes to `has_(bot,top,inf,sup,compl)` (#8381)
From the docs for `simps`:
> `@[notation_class]` should be added to all classes that define notation, like `has_mul` and
> `has_zero`. This specifies that the projections that `@[simps]` used are the projections from
> these notation classes instead of the projections of the superclasses.
> Example: if `has_mul` is tagged with `@[notation_class]` then the projection used for `semigroup`
> will be `λ α hα, @has_mul.mul α (@semigroup.to_has_mul α hα)` instead of `@semigroup.mul`.

2021-07-21 22:22:56 f118c14
feat(order): if `f x ≤ f y → x ≤ y`, then `f` is injective (#8373)
I couldn't find this specific result, not assuming linear orders, anywhere and [the Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/If.20.60f.20x.20.E2.89.A4.20f.20y.20.E2.86.92.20x.20.E2.89.A4.20y.60.2C.20then.20.60f.60.20is.20injective) didn't get any responses, so I decided to PR the result.

2021-07-21 21:31:53 3e6c367
chore(topology/algebra/module): harmless generalization (#8389)

2021-07-21 17:32:53 ae1c7ee
docs(analysis/normed_space/bounded_linear_map): add module docstring (#8263)

2021-07-21 15:58:51 9fa82b0
feat(combinatorics/colex): order is decidable (#8378)
Show that the colex ordering is decidable.

2021-07-21 12:21:17 28b8593
feat(combinatorics/simple_graph): `boolean_algebra` for `simple_graph`s. (#8330)

2021-07-21 10:58:03 fb58e05
refactor(measure_theory/decomposition): move `decomposition` into a folder  (#8374)

2021-07-21 07:30:27 b45acc9
feat(combinatorics/colex): top of the colex ordering on finite types (#8379)

2021-07-21 04:59:20 02a5696
feat(analysis/normed_space): Define conformal maps on inner product spaces; define the groupoid of conformal maps (#8367)

2021-07-20 20:10:32 899bb5f
feat(data/multiset): `(s.erase x).map f = (s.map f).erase (f x)` (#8375)
A little lemma that I needed for Dedekind domains.

2021-07-20 18:13:44 4676b31
feat(data/sym2): add the universal property, and make `sym2.is_diag ⟦(x, y)⟧ ↔ x = y` true definitionally (#8358)

2021-07-20 16:22:25 6ac3059
feat(combinatorics/colex): golf and generalise (#8301)
Miscellaneous fixes about colex: Gives `le` versions of some `lt` lemmas, fixes a TODO, restores some names etc.

2021-07-20 11:23:09 ed8d597
fix(data/matrix/basic): remove an accidental requirement for a matrix to be square (#8372)

2021-07-20 10:51:34 fce38f1
feat(ring_theory): define `fractional_ideal.adjoin_integral` (#8296)
This PR shows if `x` is integral over `R`, then `R[x]` is a fractional ideal, and proves some of the essential properties of this fractional ideal.
This is an important step towards showing `is_dedekind_domain_inv` implies that the ring is integrally closed.
Co-Authored-By: Ashvni ashvni.n@gmail.com
Co-Authored-By: Filippo A. E. Nuccio filippo.nuccio@univ-st-etienne.fr

2021-07-20 09:52:16 c05c15f
feat(group_theory/order_of_element): pow_eq_mod_card (#8354)

2021-07-20 08:59:36 0f9b754
feat(measure_theory/borel_space): generalize `monotone.measurable` to monotone on set (#8365)

2021-07-20 08:59:35 1589318
feat(topology/continuous_function/bounded): prove `norm_eq_supr_norm` (#8288)
More precisely we prove both:
 * `bounded_continuous_function.norm_eq_supr_norm`
 * `continuous_map.norm_eq_supr_norm`
We also introduce one new definition: `bounded_continuous_function.norm_comp`.

2021-07-20 08:59:34 f5d25b4
feat(measure_theory/vector_measure): introduce vector-valued measures (#8247)
This PR introduces vector-valued measures and provides a method of creating signed measures without the summability requirement.

2021-07-20 07:56:49 0f58e13
chore(topology/continuous_function, analysis/normed_space): use `is_empty α` instead of `¬nonempty α` (#8352)
Two lemmas with their assumptions changed, and some proofs golfed using the new forms of these and other lemmas.

2021-07-20 04:14:22 b3fbcec
chore(.docker): add missing library (#8370)
Something must have changed that now needs this library. It's only installed in an intemediate build, anyway.

2021-07-20 03:37:36 e0467bd
feat(algebra.homology): homology f g w ≅ cokernel (kernel.lift g f w) (#8355)
Per [zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Challenge.20with.20homology).
I'm not certain this completely resolves the issue: perhaps we should really change the definition of `homology`. But at least this bridges the gap.

2021-07-19 22:25:50 11af02c
feat(analysis/convex): convex sets with zero (#8234)
Split off from #7288

2021-07-19 22:25:49 0821e6e
feat(category_theory/limits): strict initial objects (#8094)
- [x] depends on: #8084
[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)

2021-07-19 19:25:13 afd0f92
feat(category_theory/limits/pullbacks): generalise pullback mono lemmas (#8302)
Generalises results to use `is_limit` rather than the canonical limit.

2021-07-19 15:59:39 739b353
chore(.gitignore): ignore lock files (#8368)
Two reasons:
1. Sometimes these accidentally make it into PRs  (e.g. #8344)
2. Some editor plugins (like the git in vscode) update very frequently causing these files to appear and disappear quickly in the sidebar whenever lean compiles which is annoying

2021-07-19 14:20:44 ad7ab8d
feat(linear_algebra/finsupp): `span.repr` gives an arbitrarily representation of `x : span R w` as a linear combination over `w` (#8339)
It's convenient to be able to get hold of such a representation, even when it is not unique. We prove the only lemma about this, then mark the definition is irreducible.

2021-07-19 13:17:09 02ecb62
feat(analysis/fourier): span of monomials is dense in L^p (#8328)

2021-07-19 12:28:13 5ccf2bf
feat(topology/metric_space/basic): an order-bounded set is metric-bounded (#8335)

2021-07-19 10:21:46 3e67932
feat(topology/algebra/ordered): an `order_closed_topology` restricted to a subset is an `order_closed_topology` (#8364)

2021-07-19 07:28:12 dd9f1c3
chore(order/basic): whitespaces and caps (#8359)

2021-07-19 02:21:30 6a20dd6
chore(scripts): update nolints.txt (#8366)
I am happy to remove some nolints for you!

2021-07-18 22:22:27 ee60711
feat(data/finset/basic): product, bUnion, sdiff lemmas (#8321)

2021-07-18 17:02:30 c2d042c
chore(analysis/*): remove unnecessary imports (#8344)

2021-07-18 17:02:29 b02b919
feat(measure_theory): add lemmas of equality of measures under assumptions of null difference, in particular null frontier (#8332)
Adding lemmas in `measure_theory/measure_space` and `measure_theory/borel_space` about equality of measures of sets under the assumption that the difference of the largest to the smallest has null measure.

2021-07-18 17:02:28 048263d
feat(topology/basic): add two lemmas about frontier and two lemmas about preimages under continuous maps (#8329)
Adding four lemmas: `frontier_eq_inter_compl_interior`, `compl_frontier_eq_union_interior`, `continuous.closure_preimage_subset`, `continuous.frontier_preimage_subset` to `topology/basic`.
These were discussed on Zulip <https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Portmanteau.20theorem/near/246037950>. The formulations closely follow Patrick's suggestions.

2021-07-18 15:12:25 865e36b
chore(order/boolean_algebra) : `compl_involutive` (#8357)

2021-07-17 21:38:09 f45df47
feat(measure_theory/hausdorff_measure): `dimH_{s,b,}Union`, `dimH_union` (#8351)

2021-07-17 19:58:11 ad5afc2
feat(combinatorics/hales_jewett): Hales-Jewett and Van der Waerden (#8019)
Proves the Hales-Jewett theorem (a fundamental result in Ramsey theory on combinatorial lines) and deduces (a generalised version of) Van der Waerden's theorem on arithmetic progressions.

2021-07-17 17:47:12 398027d
feat(topology/subset_properties): add `countable_cover_nhds_within_of_sigma_compact` (#8350)
This is a version of `countable_cover_nhds_of_sigma_compact` for a
covering of a closed set instead of the whole space.

2021-07-17 17:47:11 7d754e0
chore(analysis/calculus/mean_value): use `nnnorm` in a few lemmas (#8348)
Use `nnnorm` instead of `norm` and `C : nnreal` in lemmas about `lipschitz_on_with`. This way we can use them to prove any statement of the form `lipschitz_on_with C f s`, not only something of the form `lipschitz_on_with (real.to_nnreal C) f s`.

2021-07-17 16:55:13 3782c19
feat(topology/algebra/ordered): add `nhds_top_basis_Ici` and `nhds_bot_basis_Iic` (#8349)
Also add `ennreal.nhds_zero_basis_Iic` and `ennreal.supr_div`.

2021-07-17 16:20:16 8139d7e
feat(measure_theory/hausdorff_measure): μH and dimH of a `subsingleton` (#8347)

2021-07-17 14:00:00 fcde3f0
chore(data/real/ennreal): move `x ≠ 0` case of `mul_infi` to `mul_infi_of_ne` (#8345)

2021-07-17 13:14:10 bd56531
chore(analysis/normed_space/operator_norm): use `norm_one_class` (#8346)
* turn `continuous_linear_map.norm_id` into a `simp` lemma;
* drop its particular case `continuous_linear_map.norm_id_field`;
* replace `continuous_linear_map.norm_id_field'` with a
  `norm_one_class` instance.

2021-07-17 11:26:47 93a3764
chore(algebra/ring/basic): drop commutativity assumptions from some division lemmas (#8334)
* Removes `dvd_neg_iff_dvd`, `neg_dvd_iff_dvd` which duplicated `dvd_neg`, `neg_dvd`.
* Generalizes `two_dvd_bit0` to non-commutative semirings.
* Generalizes a bunch of lemmas from `comm_ring` to `ring`.
* Adds `even_neg` for `ring` to replace `int.even_neg`.

2021-07-17 09:38:56 d4c0a11
refactor(analysis/analytic/basic): refactor `change_origin` (#8282)
Now each term of `change_origin` is defined as a sum of a formal power series, so it is clear that each term is an analytic function.

2021-07-17 04:19:35 0cb634f
feat(category_theory/subobject): subobject category equivalent to mono over category (#8304)

2021-07-17 02:01:37 e67e50f
feat(algebra/group_theory/lemmas): add int.pow_right_injective (#8278)
Suggested here: https://github.com/leanprover-community/mathlib/pull/7843#discussion_r668167163

2021-07-16 22:47:45 10975e6
docs(measure_theory/integral_eq_improper): fix lemma names in docs (#8333)

2021-07-16 17:58:03 8e3d9ce
feat(measure_theory/continuous_map_dense): continuous functions are dense in Lp (#8306)

2021-07-16 17:58:00 a895300
chore(ring_theory/fractional_ideal): prefer `(⊤ : ideal R)` over `1` (#8298)
`fractional_ideal.lean` sometimes used `1` to denote the ideal of `R` containing each element of `R`. This PR should replace all remaining usages with `⊤ : ideal R`, following the convention in the rest of mathlib.
Also a little `simp` lemma `coe_ideal_top` which was the motivation, since the proof should have been, and is now `by refl`.

2021-07-16 17:03:24 42f7ca0
chore(linear_algebra/linear_independent): use `is_empty ι` instead of `¬nonempty ι` (#8331)

2021-07-16 16:03:11 9061ecc
feat(topology/metric_space/holder): define Hölder continuity (#8309)
Add definitions and some basic facts about Hölder continuous functions.

2021-07-16 15:14:22 35a8d93
chore(topology/algebra/infinite_sum): relax the requirements on `has_sum.smul` (#8312)

2021-07-16 13:09:51 162221f
chore(set_theory/*): use `is_empty α` instead of `¬nonempty α` (#8276)
Split from #7826

2021-07-16 11:35:29 9a801ef
docs(order/rel_iso): add module docstring (#8249)

2021-07-16 09:16:30 e35d976
chore(algebra/quaternion): add `smul_mk` (#8126)
This follows the pattern set by `mk_mul_mk` and `mk_add_mk`.

2021-07-16 09:16:29 610fab7
feat(set_theory/cofinality): more infinite pigeonhole principles (#7879)

2021-07-16 07:34:18 e6ff367
feat(logic/embedding): simp lemma for injectivity for embeddings (#7881)

2021-07-16 05:22:17 728eefe
docs(data/fintype/basic): add module docstring (#8081)

2021-07-16 00:27:05 4ae9792
chore(data/matrix/basic): add lemmas about dot_product and mul_vec (#8325)
This renames:
* `mul_vec_one` to `one_mul_vec`
* `mul_vec_zero` to `zero_mul_vec`
and adds the new lemmas:
* `sub_mul_vec`
* `mul_vec_sub`
* `zero_mul_vec`
* `mul_vec_zero`
* `sub_dot_product`
* `dot_product_sub`
Some existing lemmas have had their variables extracted to sections.

2021-07-15 21:23:27 b577bb2
feat(measure_theory/conditional_expectation): define condexp_L2, conditional expectation of L2 functions (#8324)

2021-07-15 17:38:21 79fbd46
feat(ring_theory/ideal): generalize two results from finset to multiset (#8320)
Nothing exciting going on here, just copied two proofs, replaced all `finset.insert` with `multiset.cons` and `finset.prod` with `(multiset.map _).prod`, and used those to show the original results.

2021-07-15 16:32:09 a783a47
feat(data/matrix/{basic, block}): missing lemmas on conj_transpose (#8303)
This also moves some imports around to make the star operator on vectors available in matrix/basic.lean
This is a follow up to #8291

2021-07-15 16:32:08 66055dd
feat(algebra/lie/cartan_matrix): define the exceptional Lie algebras (#8299)

2021-07-15 15:05:29 bc1f145
feat(data/multiset): `<` on multisets is well-founded (#8319)
This is vaguely related to #5783, in that it tries to solve a similar goal of finding a minimal multiset with some property.

2021-07-15 13:15:59 0597b1d
feat(analysis/normed_space/normed_group_hom): add equalizer (#8228)
From LTE.
We add equalizer of `normed_group_homs`.

2021-07-15 09:20:51 7e5be02
chore(algebra/*): make non-instance typeclasses reducible. (#8322)
A follow up to #7835

2021-07-15 05:43:19 e42af8d
refactor(topology/category/Profinite): define Profinite as a subcategory of CompHaus (#8314)
This adjusts the definition of Profinite to explicitly be a subcategory of CompHaus rather than a subcategory of Top which embeds into CompHaus. Essentially this means it's easier to construct an element of Profinite from an element of CompHaus.

2021-07-14 22:10:52 e343609
feat(measure_theory/simple_func_dense): induction lemmas for Lp.simple_func and Lp (#8300)
The new lemmas, `Lp.simple_func.induction`, `Lp.induction`, allow one to prove a predicate for all elements of `Lp.simple_func` / `Lp` (here p < ∞), by proving it for characteristic functions and then checking it behaves appropriately under addition, and, in the second case, taking limits.  They are modelled on existing lemmas such as `simple_func.induction`, `mem_ℒp.induction`, `integrable.induction`.

2021-07-14 18:22:17 19a156a
refactor(algebra/ordered_ring): use `mul_le_mul'` for `canonically_ordered_comm_semiring` (#8284)
* use `canonically_ordered_comm_semiring`, not `canonically_ordered_semiring` as a namespace;
* add an instance `canonically_ordered_comm_semiring.to_covariant_mul_le`;
* drop `canonically_ordered_semiring.mul_le_mul` etc in favor of `mul_le_mul'` etc.

2021-07-14 17:41:56 e9b1fbd
feat(combinatorics/simple_graph): add maps and subgraphs (#8223)
Add graph homomorphisms, isomorphisms, and embeddings.  Define subgraphs and supporting lemmas and definitions.  Also renamed `edge_symm` to `adj_comm`.

2021-07-14 15:21:29 bcc35c7
feat(group_theory/submonoid/operations): `add_equiv.of_left_inverse` to match `linear_equiv.of_left_inverse` (#8279)

2021-07-14 13:57:59 375dd53
refactor(geometry/manifold): split `bump_function` into 3 files (#8313)
This is the a part of #8309. Both code and comments were moved with
almost no modifications: added/removed `variables`/`section`s,
slightly adjusted comments to glue them together.

2021-07-14 13:57:58 5bac21a
chore(algebra/module/pi): add `pi.smul_def` (#8311)
Sometimes it is useful to rewrite unapplied `s • x` (I need it in a branch that is not yet ready for review).
We already have `pi.zero_def`, `pi.add_def`, etc.

2021-07-14 13:57:57 7fccf40
feat(algebraic_topology/topological_simplex): This defines the natural functor from Top to sSet. (#8305)
This PR also provides the geometric realization functor and the associated adjunction.

2021-07-14 13:57:56 7d53431
feat(measure_theory/integration): if a function has bounded integral on all sets of finite measure, then it is integrable (#8297)
If the measure is sigma-finite and a function has integral bounded by some C for all measurable sets with finite measure, then its integral over the whole space is bounded by that same C. This can be used to show that a function is integrable.

2021-07-14 12:56:52 3b7e7bd
feat(normed_space): controlled_sum_of_mem_closure (#8310)
From LTE

2021-07-14 11:55:45 2e9aa83
chore(analysis/special_functions/pow): golf a few proofs (#8308)
* add `ennreal.zero_rpow_mul_self` and `ennreal.mul_rpow_eq_ite`;
* use the latter lemma to golf other proofs about `(x * y) ^ z`;
* drop unneeded argument in `ennreal.inv_rpow_of_pos`, rename it to
  `ennreal.inv_rpow`;
* add `ennreal.strict_mono_rpow_of_pos` and
  `ennreal.monotone_rpow_of_nonneg`, use themm to golf some proofs.

2021-07-14 10:14:23 743209c
chore(algebra/big_operators/basic): spaces around binders (#8307)

2021-07-14 10:14:22 e6731de
feat(algebra/pointwise): `smul_comm_class` instances for `set` (#8292)
I'm not very familiar with `smul_comm_class`, so these instances might need to be tweaked slightly.

2021-07-14 10:14:21 656722c
refactor(measure_theory/measure_space): use `covariant_class` instead of `add_le_add` (#8285)

2021-07-14 10:14:18 51cc43e
feat(measure_theory/borel_space): a monotone function is measurable (#8045)

2021-07-14 08:37:24 8e5af43
chore(algebra/big_operators/basic): rename sum_(nat/int)_cast and (nat/int).coe_prod (#8264)
The current names aren't great because
1. For `sum_nat_cast` and `sum_int_cast`, the LHS isn't a sum of casts but a cast of sums, and it doesn't follow any other naming convention (`nat.cast_...` or `....coe_sum`).
2. For `.coe_prod`, the coercion from `ℕ` or `ℤ` should be called `cast`.

2021-07-14 06:54:06 4709e61
doc(*): bold a few more named theorems (#8252)

2021-07-13 21:48:55 5021c1f
feat(data/int): conditionally complete linear order (#8149)
Prove that the integers form a conditionally complete linear order.
I do not have a specific goal in mind for this, but it would have been helpful to formulate one of the Proof Ground problems using this.

2021-07-13 20:14:44 29b63a7
feat(data/matrix/basic): add conj_transpose (#8291)
As requested by Eric Wieser, I pulled one single change of #8289 out into a new PR. As such, this PR will not block anything in #8289.

2021-07-13 20:14:43 63266ff
feat(group_theory/free_product): the free product of an indexed family of monoids (#8256)
Defines the free product (categorical coproduct) of an indexed family of monoids. Proves its universal property. The free product of groups is a group.
Split off from #7395

2021-07-13 18:51:54 905b875
chore(data/matrix/block): move block matrices into their own file (#8290)
This is a straight cut-and-paste, with no reordering or renaming.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/import.20fails/near/245802618)

2021-07-13 18:51:53 461130b
feat(category_theory/monoidal): the definition of Tor (#7512)
# Tor, the left-derived functor of tensor product
We define `tor C n : C ⥤ C ⥤ C`, by left-deriving in the second factor of `(X, Y) ↦ X ⊗ Y`.
For now we have almost nothing to say about it!
It would be good to show that this is naturally isomorphic to the functor obtained
by left-deriving in the first factor, instead.

2021-07-13 17:32:47 b091c3f
feat(algebra/direct_sum): the submodules of an internal direct sum satisfy `supr A = ⊤` (#8274)
The main results here are:
* `direct_sum.add_submonoid_is_internal.supr_eq_top`
* `direct_sum.submodule_is_internal.supr_eq_top`
Which we prove using the new lemmas
* `add_submonoid.supr_eq_mrange_dfinsupp_sum_add_hom`
* `submodule.supr_eq_range_dfinsupp_lsum`
There's no obvious way to reuse the proofs between the two, but thankfully all four proofs are quite short anyway.
These should aid in shortening #8246.

2021-07-13 16:48:04 3a0ef3c
feat(ring_theory): (strict) monotonicity of `coe_submodule` (#8273)

2021-07-13 16:48:02 8be0eda
chore(ring_theory): allow Dedekind domains to be fields (#8271)
During the Dedekind domain project, we found that the `¬ is_field R` condition is almost never needed, and it gets in the way when proving rings of integers are Dedekind domains. This PR removes this assumption from the three definitions.
Co-Authored-By: Ashvni <ashvni.n@gmail.com>
Co-Authored-By: Filippo A. E. Nuccio <filippo.nuccio@univ-st-etienne.fr>

2021-07-13 15:34:19 815e91f
chore(data/nat/prime): fix + add missing lemmas (#8066)
I fixed up some indents as well, as they were bothering me quite a bit. The only "new" content is 597 - 617.

2021-07-13 12:28:43 bf86834
chore(probability_theory/integration): style changes. Make arguments implicit, remove spaces, etc. (#8286)
- make the measurable_space arguments of indep_fun implicit again. They were made explicit to accommodate the way `lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun` was written, with explicit `(borel ennreal)` arguments. Those arguments are not needed and are removed.
- use `measurable_set T` instead of `M.measurable_set' T`.
- write the type of several `have` explicitly.
- remove some spaces
- ensure there is only one tactic per line
- use `exact` instead of `apply` when the tactic is finishing

2021-07-13 12:28:42 f1e27d2
feat(linear_algebra/finsupp): mem_supr_iff_exists_finset (#8268)
This is an `iff` version of `exists_finset_of_mem_supr`

2021-07-13 12:28:40 3e56439
chore(data/set/intervals): relax linear_order to preorder in the proofs of `Ixx_eq_empty_iff` (#8071)
The previous formulations of `Ixx_eq_empty(_iff)` are basically a chaining of this formulation plus `not_lt` or `not_le`. But `not_lt` and `not_le` require `linear_order`. Removing them allows relaxing the typeclasses assumptions on `Ixx_eq_empty_iff` and slightly generalising `Ixx_eq_empty`.

2021-07-13 11:23:36 bb53a92
chore(data/mv_polynomial/basic): use `is_empty σ` instead of `¬nonempty σ` (#8277)
Split from #7826

2021-07-13 10:08:14 dd9a0ea
feat(geometry/manifold): add `charted_space` and `model_with_corners` for pi types (#6578)
Also use `set.image2` in the `charted_space` instance for `model_prod`.

2021-07-13 09:28:15 7bed785
refactor(topology/metric/gromov_hausdorff_realized): speed up a proof (#8287)

2021-07-13 07:40:48 f1f4084
feat(topology/algebra/ordered/basic): basis for the neighbourhoods of `top`/`bot` (#8283)

2021-07-13 07:09:10 f302c97
feat(measure_theory/l2_space): the inner product of indicator_const_Lp and a function is the set_integral (#8229)

2021-07-12 22:46:15 9dfb9a6
chore(topology/topological_fiber_bundle): renaming (#8270)
In this PR I changed
- `prebundle_trivialization` to `topological_fiber_bundle.pretrivialization`
- `bundle_trivialization` to `topological_fiber_bundle.trivialization`
so to make names consistent with `vector_bundle`. I also changed the name of the file for consistency.

2021-07-12 22:46:14 cde5748
feat(measure_theory/measure_space): add `finite_measure_sub` instance (#8239)

2021-07-12 21:10:34 5ea9a07
feat(measure_theory/integration): add `lintegral_union` (#8238)

2021-07-12 21:10:33 4cd6179
refactor(measure_theory/simple_func_dense): generalize L1.simple_func.dense_embedding to Lp (#8209)
This PR generalizes all the more abstract results about approximation by simple functions, from L1 to Lp (`p ≠ ∞`).  Notably, this includes 
* the definition `Lp.simple_func`, the `add_subgroup` of `Lp` of classes containing a simple representative
* the coercion `Lp.simple_func.coe_to_Lp` from this subgroup to `Lp`, as a continuous linear map
* `Lp.simple_func.dense_embedding`, this subgroup is dense in `Lp`
* `mem_ℒp.induction`, to prove a predicate holds for `mem_ℒp` functions it suffices to prove that it behaves appropriately on `mem_ℒp` simple functions
Many lemmas get renamed from `L1.simple_func.*` to `Lp.simple_func.*`, and have hypotheses or conclusions changed from `integrable` to `mem_ℒp`.
I take the opportunity to streamline the construction by deleting some instances which typeclass inference can find, and some lemmas which are re-statements of more general results about `add_subgroup`s in normed groups.  In my opinion, this extra material obscures the structure of the construction.  Here is a list of the definitions deleted:
- `instance : has_coe (α →₁ₛ[μ] E) (α →₁[μ] E)`
- `instance : has_coe_to_fun (α →₁ₛ[μ] E)`
- `instance : inhabited (α →₁ₛ[μ] E)`
- `protected def normed_group : normed_group (α →₁ₛ[μ] E)`
and lemmas deleted (in the `L1.simple_func` namespace unless specified):
- `simple_func.tendsto_approx_on_univ_L1`
- `eq`
- `eq_iff`
- `eq_iff'`
- `coe_zero`
- `coe_add`
- `coe_neg`
- `coe_sub`
- `edist_eq`
- `dist_eq`
- `norm_eq`
- `lintegral_edist_to_simple_func_lt_top`
- `dist_to_simple_func`

2021-07-12 18:54:39 a9cb722
docs(data/rel): add module docstring (#8248)

2021-07-12 17:16:06 a2b00f3
feat(algebra/opposites): functoriality of the opposite monoid (#8254)
A hom `α →* β` can equivalently be viewed as a hom `αᵒᵖ →* βᵒᵖ`.
Split off from #7395

2021-07-12 16:03:49 6fa678f
feat(ring_theory): `coe_submodule S (⊤ : ideal R) = 1` (#8272)
A little `simp` lemma and its dependencies. As I was implementing it, I saw the definition of `has_one (submodule R A)` can be cleaned up a bit.

2021-07-12 14:22:14 0a8e3ed
feat(data/equiv/fin): fin_order_iso_subtype (#8258)
Promote a `fin n` into a larger `fin m`, as a subtype where the underlying
values are retained. This is the `order_iso` version of `fin.cast_le`.

2021-07-12 14:22:13 66cc624
feat(data/list/basic): more lemmas about permutations_aux2 (#8198)

2021-07-12 12:59:26 695cb07
feat({data,linear_algebra}/{finsupp,dfinsupp}): add `{add_submonoid,submodule}.[d]finsupp_sum_mem` (#8269)
These lemmas are trivial consequences of the finset lemmas, but having them avoids having to unfold `[d]finsupp.sum`.
`dfinsupp_sum_add_hom_mem` is particularly useful because this one has some messy decidability arguments to eliminate.

2021-07-12 10:54:32 40ffaa5
feat(linear_algebra/free_module): add module.free.resolution (#8231)
Any module is a quotient of a free module. This is stated as surjectivity of `finsupp.total M M R id : (M →₀ R) →ₗ[R] M`.

2021-07-12 07:00:28 e1c649d
feat(category_theory/abelian): the five lemma (#8265)

2021-07-12 06:15:32 92d0dd8
feat(category_theory/limits): monomorphisms from initial (#8099)
Defines a class for categories where every morphism from initial is a monomorphism. If the category has a terminal object, this is equivalent to saying the unique morphism from initial to terminal is a monomorphism, so this is essentially a "zero_le_one" for categories. I'm happy to change the name of this class!
This axiom does not appear to have a common name, though it is (equivalent to) the second of Freyd's AT axioms: specifically it is a property shared by abelian categories and pretoposes. The main advantage to this class is that it is the precise condition required for the subobject lattice to have a bottom element, resolving the discussion here: https://github.com/leanprover-community/mathlib/pull/6278#discussion_r577702542
I've also made some minor changes to later parts of this file, essentially de-duplicating arguments, and moving the `comparison` section up so that all the results about terminal objects in index categories of limits are together rather than split in two.

2021-07-12 04:01:46 e22789e
feat(algebra/big_operators/finprod): add a few lemmas (#8261)
* add `finprod_eq_single` and `finsum_eq_single`;
* add `finprod_induction` and `finsum_induction`;
* add `single_le_finprod` and `single_le_finsum`;
* add `one_le_finprod'` and `finsum_nonneg`.

2021-07-12 01:47:08 d5c6f61
feat(algebra/group/hom): monoid_hom.injective_iff in iff form (#8259)
Interpret the injectivity of a group hom as triviality of the kernel,
in iff form. This helps make explicit simp lemmas about
the application of such homs,
as in the added `extend_domain_eq_one_iff` lemma.

2021-07-11 20:46:12 24d7a8c
feat(group_theory/quotient_group): lemmas for quotients involving `subgroup_of` (#8111)

2021-07-11 20:13:23 19beb12
feat(measure_theory/{lp_space,set_integral}): extend linear map lemmas from R to is_R_or_C (#8210)

2021-07-11 19:28:27 6d200cb
feat(analysis/normed_space/inner_product): Bessel's inequality (#8251)
A proof both of Bessel's inequality and that the infinite sum defined by Bessel's inequality converges.

2021-07-11 14:37:02 bee165a
feat(category_theory/abelian/opposite): Adds some op-related isomorphism for (co)kernels. (#8255)

2021-07-11 13:10:23 1e62218
feat(data/int/gcd): norm_num extension for gcd (#8053)
Implements a `norm_num` plugin to evaluate terms like `nat.gcd 6 8 = 2`, `nat.coprime 127 128`, and so on for `{nat, int}.{gcd, lcm, coprime}`.

2021-07-11 10:44:09 14f324b
chore(data/set/basic): remove set.decidable_mem (#8240)
The only purpose of this instance was to enable the spelling `[decidable_pred s]` when what is actually needed is `decidable_pred (∈ s)`, which is a bad idea.
This is a follow-up to #8211.
Only two proofs needed this instance, and both were using completely the wrong lemmas anyway.

2021-07-11 02:16:20 850928d
chore(scripts): update nolints.txt (#8257)
I am happy to remove some nolints for you!

2021-07-11 01:40:33 e627394
feat(analysis/special_functions): limit of (1+1/x)^x (#8243)
Resolves https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/e.20as.20limit.20of.20.281.2B1.2Fn.29.5En.

2021-07-10 20:40:14 90d8d46
feat(category_theory/monad): monad forget is monadic (#8161)
cc @adamtopaz 
wip since I need to dualise

2021-07-10 18:38:10 8b4628e
feat(data/fintype/basic): induction principle for finite types (#8158)
This lets us prove things about finite types by induction, analogously to proving things about natural numbers by induction. Here `pempty` plays the role of `0` and `option` plays the role of `nat.succ`. We need an extra hypothesis that our statement is invariant under equivalence of types. Used in #8019.

2021-07-10 08:01:40 aa78feb
feat(category_theory/is_connected): constant functor is full (#8233)
Shows the constant functor on a connected category is full.
Also golfs a later proof slightly.

2021-07-10 08:01:39 b1806d1
chore(analysis/normed_space/banach): speed up the proof (#8230)
This proof has timed out in multiple refactor PRs I've made. This splits out an auxiliary definition.
The new definition takes about 3.5s to elaborate, and the two lemmas are <500ms each.
The old lemma took 45s.

2021-07-10 07:14:29 9e0462c
feat(topology/algebra/infinite_sum): summable_empty (#8241)
Every function over an empty type is summable.

2021-07-10 04:07:29 e18b3a8
feat(category_theory/limits): transfer limit creation along diagram iso (#8237)

2021-07-10 03:32:13 d0e09dd
feat(linear_algebra/matrix/nonsingular_inverse): more lemmas (#8216)
add more defs and lemmas

2021-07-10 02:13:42 b52c1f0
chore(scripts): update nolints.txt (#8245)
I am happy to remove some nolints for you!

2021-07-09 22:11:36 70320f7
feat(category_theory/category/Kleisli): Fix lint errors (#8244)
Fixes some lint errors for this file: unused arguments, module doc, inhabited instances

2021-07-09 19:00:53 a444e81
feat(measure_theory/borel_space): a preconnected set is measurable (#8044)
In a conditionally complete linear order equipped with the order topology and the corresponding borel σ-algebra, any preconnected set is measurable.

2021-07-09 15:19:06 bcd61b1
feat(algebra/category): provide right adjoint instances for forget (#8235)
Also adds some universe variables since they weren't inferred sensibly.

2021-07-09 13:36:51 ee01817
chore(data/set/basic): use `decidable_pred (∈ s)` instead of `decidable_pred s`. (#8211)
The latter exploits the fact that sets are functions to Prop, and is an annoying form as lemmas are never stated about it.
In future we should consider removing the `set.decidable_mem` instance which encourages this misuse.
Making this change reveals a collection of pointless decidable arguments requiring that finset membership be decidable; something which is always true anyway.
Two proofs in `data/pequiv` caused a crash inside the C++ portion of the `finish` tactic; it was easier to just write the simple proofs manually than to debug the C++ code.

2021-07-09 13:36:49 a312e7e
chore(topology/topological_fiber_bundle): reorganizing the code (#7938)
What I do here:
 - Get rid of `local_triv`: it is not needed.
 - Change `local_triv_ext` to `local_triv`
 - Rename `local_triv'` as `local_triv_as_local_equiv` (name suggested by @sgouezel)
 - Improve type class inference by getting rid of `dsimp` in instances
 - Move results about `bundle` that do not need the topology in an appropriate file
 - Update docs accordingly.
Nothing else.

2021-07-09 12:52:46 abde210
feat(analysis/complex/isometry): restate result more abstractly (#7908)
Define `rotation` as a group homomorphism from the circle to the isometry group of `ℂ`.  State the classification of isometries of `ℂ` more abstractly, using this construction.  Also golf some proofs.

2021-07-09 09:42:47 1134865
feat(category_theory/limits): finite products from finite limits (#8236)
Adds instances for finite products from finite limits.

2021-07-08 23:05:26 e46447b
feat(measure_theory/measure_space): prob_le_one (#7913)

2021-07-08 18:57:18 9d40a59
feat(group_theory,linear_algebra): third isomorphism theorem for groups and modules (#8203)
This PR proves the third isomorphism theorem for (additive) groups and modules, and also adds a few `simp` lemmas that I needed.

2021-07-08 17:14:02 a7b660e
feat(linear_algebra/prod): add coprod_map_prod (#8220)
This also adds `submodule.coe_sup` and `set.mem_finset_prod`. The latter was intended to be used to show `submodule.coe_supr`, but I didn't really need that and it was hard to prove.

2021-07-08 16:41:12 13486fe
chore(measure_theory/measure_space): untangle `probability_measure`, `finite_measure`, and `has_no_atoms` (#8222)
This only moves existing lemmas around. Putting all the instance together up front seems to result in lemmas being added in adhoc places - by adding `section`s, this should guide future contributions.

2021-07-08 14:46:44 b10062e
feat(data/finset/noncomm_prod): noncomm_prod_union_of_disjoint (#8169)

2021-07-08 13:06:54 a4b0b48
feat(data/nat/basic): lt_one_iff (#8224)

2021-07-08 11:22:43 fb22ae3
refactor(order/rel_iso): move statements about intervals to data/set/intervals (#8150)
This means that we can talk about `rel_iso` without needing to transitively import `ordered_group`s
This PR takes advantage of this to define `order_iso.mul_(left|right)[']` to mirror `equiv.mul_(left|right)[']`.

2021-07-08 09:27:54 03e2cbd
chore(group_theory/perm/support): support_pow_le over nat (#8225)
Previously, both `support_pow_le` and `support_gpow_le` had the
power as an `int`. Now we properly differentiate the two and avoid
slow defeq checks.

2021-07-08 02:02:10 0ee238c
chore(scripts): update nolints.txt (#8227)
I am happy to remove some nolints for you!

2021-07-07 20:50:25 70aef28
feat(group_theory/perm/list): concrete permutations from a list (#7451)

2021-07-07 17:46:10 5f2358c
fix(data/complex/basic): ensure `algebra ℝ ℂ` is computable (#8166)
Without this `complex.ring` instance, `ring ℂ` is found via `division_ring.to_ring` and `field.to_division_ring`, and `complex.field` is non-computable.
The non-computable-ness previously contaminated `distrib_mul_action R ℂ` and even some properties of `finset.sum` on complex numbers! To avoid this type of mistake again, we remove `noncomputable theory` and manually flag the parts we actually expect to be computable.

2021-07-07 15:54:45 e0ca853
feat(algebra/group/units): teach `simps` about `units` (#8204)
This also introduces `units.copy` to match `invertible.copy`, and uses it to make some lemmas in normed_space/units true by `rfl` (and generated by `simps`).

2021-07-07 15:54:44 ce3d53b
fix(data/real/basic): provide a computable `module` instance (#8164)
Without this instance, `normed_field.to_normed_space` and `normed_space.to_module` is tried first, but this results in a noncomputable instance.

2021-07-07 15:11:09 05e8ed2
chore(feat/algebra/lie/from_cartan_matrix): rename file (#8219)

2021-07-07 15:11:08 836c549
docs(category_theory/limits/shapes/products): add module docstring (#8212)
Also resolves some TODOs.

2021-07-07 14:30:42 5145261
feat(data/fintype/list): induced fintype on nodup lists (#8171)

2021-07-07 13:35:19 5796783
chore(category_theory): homogenise usage of notation for terminal objects (#8106)
I went with the option that is used more frequently, but I'm also happy to switch to the space-less option if people prefer it.

2021-07-07 12:02:07 bb5ab1e
chore(measure_theory/measure_space): add missing `finite_measure` instances (#8214)

2021-07-07 12:02:05 41ec92e
feat(algebra/lie/from_cartan_matrix): construction of a Lie algebra from a Cartan matrix (#8206)

2021-07-07 12:02:02 126a7b6
feat(data/multiset/basic): add_eq_union_iff_disjoint (#8173)

2021-07-07 10:24:57 29beb1f
feat(analysis/normed_space/int): norms of (units of) integers (#8136)
From LTE

2021-07-07 10:24:56 89e1837
fix(tactic/core): add subst' (#8129)
`tactic.subst'` gives a better error message when the substituted variable is a local definition.
It is hard to fix this in core (without touching C++ code), since `tactic.is_local_def` is in mathlib

2021-07-07 10:24:54 47c7c01
feat(measure_theory/measure_space): if `f` restricted to `s` is measurable, then `f` is `ae_measurable` wrt `μ.restrict s` (#8098)

2021-07-07 08:47:55 06f0d51
refactor(algebra/ordered_group): another step in the `order` refactor -- ordered groups (#8060)
This PR represents another wave of generalization of proofs, following from the `order` refactor.  It is another step towards #7645.

2021-07-07 02:20:39 20d8e83
chore(scripts): update nolints.txt (#8217)
I am happy to remove some nolints for you!

2021-07-06 18:26:45 d7653b8
chore(category_theory/monad/algebra): lint and golf (#8160)
Adds a module docstring and golfs some proofs, including removing `erw`.

2021-07-06 16:15:28 03c8904
doc(data/set/function): add set. prefixes for doc-gen (#8215)
This means these names will be linked.

2021-07-06 14:26:27 ec07293
doc(*): add bold in doc strings for named theorems i.e. **mean value theorem** (#8182)

2021-07-06 13:47:12 1399997
feat(category_theory/closed): Exponential ideals (#4930)
Define exponential ideals.

2021-07-06 11:32:50 98e8408
feat(geometry/manifold/algebra): `left_invariant_derivation` (#8108)
In this PR we prove that left-invariant derivations are a Lie algebra.

2021-07-06 10:58:03 23d22e4
feat(category_theory/abelian/ext): Defines Ext functors. (#8186)
See my comment from #7525

2021-07-06 08:21:53 2f72023
chore(measure_theory/decomposition): change statement to use the `finite_measure` instance (#8207)

2021-07-06 05:05:33 6365c6c
feat(algebra/invertible): construction from is_unit (#8205)

2021-07-06 02:10:44 27841bb
chore(scripts): update nolints.txt (#8208)
I am happy to remove some nolints for you!

2021-07-05 17:24:46 77e1e3b
feat(linear_algebra/nonsingular_inverse): add lemmas about `invertible` (#8201)

2021-07-05 17:24:45 9d99833
feat(category_theory/linear/yoneda): A linear version of Yoneda. (#8199)

2021-07-05 17:24:44 b6bf7a3
feat(measure_theory/lp_space): define the Lp function corresponding to the indicator of a set (#8193)
I also moved some measurability lemmas from the integrable_on file to measure_space. I needed them and lp_space is before integrable_on in the import graph.

2021-07-05 17:24:43 7eab080
feat(topology/instances/ennreal): add tsum lemmas for ennreal.to_real (#8184)

2021-07-05 15:47:16 38a6f26
feat(algebra/to_additive): map pow to smul (#7888)
* Allows `@[to_additive]` to reorder consecutive arguments of specified identifiers.
* This can be specified with the attribute `@[to_additive_reorder n m ...]` to swap arguments `n` and `n+1`, arguments `m` and `m+1` etc. (start counting from 1).
* The only two attributes currently in use are:
```lean
attribute [to_additive_reorder 1] has_pow
attribute [to_additive_reorder 1 4] has_pow.pow
```
* It will  eta-expand all expressions that have as head a declaration with attribute `to_additive_reorder` until they have the required number of arguments. This is required to correctly deal with partially applied terms.
* Hack: if the first two arguments are reordered, then the first two universe variables are also reordered (this happens to be the correct behavior for `has_pow` and `has_pow.pow`). It might be cleaner to have a separate attribute for that, but that given the low amount of times that I expect that we use `to_additive_reorder`, this seems unnecessary.
* This PR also allows the user to write `@[to_additive?]` to trace the generated declaration.

2021-07-05 14:57:50 f2edc5a
feat(category_theory/preadditive/opposite): Adds some instances and lemmas (#8202)
This PR adds some instances and lemmas related to opposites and additivity of functors.

2021-07-05 14:14:01 0b0d8e7
refactor(ring_theory): turn `localization_map` into a typeclass (#8119)
This PR replaces the previous `localization_map (M : submodule R) Rₘ` definition (a ring hom `R →+* Rₘ` that presents `Rₘ` as the localization of `R` at `M`) with a new `is_localization M Rₘ` typeclass that puts these requirements on `algebra_map R Rₘ` instead. An important benefit is that we no longer need to mess with `localization_map.codomain` to put an `R`-algebra structure on `Rₘ`, we can just work with `Rₘ` directly.
The important API changes are in commit 0de78dc, all other commits are simply fixes to the dependent files.
Main changes:
 * `localization_map` has been replaced with `is_localization`, similarly `away_map` -> `is_localization.away`, `localization_map.at_prime` -> `is_localization.at_prime` and `fraction_map` -> `is_fraction_ring`
 * many declarations taking the `localization_map` as a parameter now take `R` and/or `M` and/or `Rₘ`, depending on what can be inferred easily
 * `localization_map.to_map` has been replaced with `algebra_map R Rₘ`
 * `localization_map.codomain` and its instances have been removed (you can now directly use `Rₘ`)
 * `is_localization.alg_equiv` generalizes `fraction_map.alg_equiv_of_quotient` (which has been renamed to `is_fraction_ring.alg_equiv`)
 * `is_localization.sec` has been introduced to replace `(to_localization_map _ _).sec`
 * `localization.of` have been replaced with `algebra` and `is_localization` instances on `localization`, similarly for `localization.away.of`, `localization.at_prime.of` and `fraction_ring.of`.
 * `int.fraction_map` is now an instance `rat.is_fraction_ring`
 * All files depending on the above definitions have had fixes. These were mostly straightforward, except:
 * [Some category-theory arrows in `algebraic_geometry/structure.sheaf` are now plain `ring_hom`s. This change was suggested by @justus-springer in order to help the elaborator figure out the arguments to  `is_localization`.](https://github.com/leanprover-community/mathlib/commit/cf3acc925467cc06237a13dbe4264529f9a58850)
 * Deleted `minpoly.over_int_eq_over_rat` and `minpoly.integer_dvd`, now you can just use `gcd_domain_eq_field_fractions` or `gcd_domain_dvd` respectively. [This removes code duplication in `minpoly.lean`](https://github.com/leanprover-community/mathlib/commit/5695924d85710f98ac60a7df91d7dbf27408ca26)
 * `fractional_ideal` does not need to assume `is_localization` everywhere, only for certain specific definitions
Things that stay the same:
 * `localization`, `localization.away`, `localization.at_prime` and `fraction_ring` are still a construction of localizations (although see above for `{localization,localization.away,localization.at_prime,fraction_ring}.of`)
Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Refactoring.20.60localization_map.60

2021-07-05 13:27:54 6bad4c6
feat(ring_theory/trace): the composition of `trace`s is `trace` (#8078)
A little group of lemmas from the Dedekind domain project.

2021-07-05 11:54:51 8ba94ab
chore(algebra/invertible): units coerced to their monoid are invertible (#8195)

2021-07-05 10:29:14 63c8d33
feat(linear_algebra/matrix/reindex): generalize reindex_linear_equiv to operate on an arbitrary ring (#8159)
This changes `reindex_linear_equiv eₘ eₙ : matrix m m R ≃ₗ[R] matrix n n R` to `reindex_linear_equiv R A eₘ eₙ : matrix m m A ≃ₗ[R] matrix n n A`, which both works for a larger range of types, and eliminates the need for type ascriptions that was previously caused by the implicitness of `R`.
We cannot yet make the same generalization for `reindex_alg_equiv` as the `algebra R (matrix m m A)` structure implied by `algebra R A` is not in mathlib yet.

2021-07-05 09:56:32 a8f60eb
feat(algebra/lie/free): the universal enveloping algebra of the free Lie algebra is the free associative algebra (#8183)

2021-07-04 16:29:14 4ace3b7
feat(measure_theory/conditional_expectation): define the Lp subspace of functions measurable wrt a sigma-algebra, prove completeness (#7945)
This is the first step towards defining the conditional expectation:
- in this PR a subspace of L^p is shown to be complete, which is necessary to define an orthogonal projection on that subspace;
- the conditional expectation of functions in L^2 will be the orthogonal projection;
- the definition will be extended to L^1 through simple functions (as is done for the integral definition).

2021-07-04 15:19:05 01b062a
chore(category_theory/abelian/diagram_lemmas/four): Make the diagram into a code block (#8192)
Currently on mathlib docs, it looks like this
![image](https://user-images.githubusercontent.com/15098580/124386872-4c869d00-dcd4-11eb-9c5c-ce6a29e4e607.png)
Making it into a code block should mean that it will render correctly on mathlib docs

2021-07-04 13:54:21 d819e36
feat(data/finset/basic): sdiff_val, disjoint_to_finset_iff_disjoint (#8168)

2021-07-04 13:20:09 2ebd96c
doc(measure_theory/measurable_space): correct tiny misprints in two doc-strings (#8187)
Modifying doc-strings of `measurable_space.comap` and `measurable_space.map`: changing "measure space" to "measurable space" in both.

2021-07-04 11:49:30 7135c96
chore(data/list/perm): make `perm_nil` a simp lemma (#8191)

2021-07-04 09:30:33 a9db7ce
chore(measure_theory/{bochner_integration, simple_func_dense}): Move construction of embedding of L1 simple funcs (#8185)
At the moment, there is a low-level construction in `measure_theory/simple_func_dense` for the approximation of an element of L1 by simple functions, and this is generalized to a more abstract version (with a normed space `L1.simple_func` and a dense linear embedding of this into `L1`) in `measure_theory/bochner_integration`.  #8114 generalized the low-level construction, and I am thinking of rewriting the more abstract version to apply to `Lp`, too.
But since this will all be more generally useful than in the construction of the Bochner integral, and since the Bochner integral file is very long, I propose moving all this material into `measure_theory/simple_func_dense`.  This PR shows what it would look like.  There are no mathematical changes.

2021-07-04 09:30:32 180d004
ci(.github/workflows/*): switch to self-hosted runners (#8177)
With this PR, mathlib builds on all branches will use the self-hosted runners that have the "pr" tag. One self-hosted runner is reserved for bors staging branch builds and does not have that tag.
The `build_fork` workflow has been added for use by external forks (and other Lean projects which might want to copy mathlib's CI).

2021-07-04 07:58:33 863f007
feat(data/list/basic): map_permutations (#8188)
As [requested on Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/perm.20of.20permutations/near/244821779).

2021-07-04 02:26:45 cdb44df
chore(scripts): update nolints.txt (#8189)
I am happy to remove some nolints for you!

2021-07-03 16:33:31 531d850
feat(category_theory): left-derived functors (#7487)
# Left-derived functors
We define the left-derived functors `F.left_derived n : C ⥤ D` for any additive functor `F`
out of a category with projective resolutions.
The definition is
```
projective_resolutions C ⋙ F.map_homotopy_category _ ⋙ homotopy_category.homology_functor D _ n
```
that is, we pick a projective resolution (thought of as an object of the homotopy category),
we apply `F` objectwise, and compute `n`-th homology.
We show that these left-derived functors can be calculated
on objects using any choice of projective resolution,
and on morphisms by any choice of lift to a chain map between chosen projective resolutions.
Similarly we define natural transformations between left-derived functors coming from
natural transformations between the original additive functors,
and show how to compute the components.
## Implementation
We don't assume the categories involved are abelian
(just preadditive, and have equalizers, cokernels, and image maps),
or that the functors are right exact.
None of these assumptions are needed yet.
It is often convenient, of course, to work with `[abelian C] [enough_projectives C] [abelian D]`
which (assuming the results from `category_theory.abelian.projective`) are enough to
provide all the typeclass hypotheses assumed here.

2021-07-03 13:08:36 74a0f67
refactor(measure_theory/simple_func_dense): generalize approximation results from L^1 to L^p (#8114)
Simple functions are dense in L^p.  The argument for `1 ≤ p < ∞` is exactly the same as for `p = 1`, which was already in mathlib:  construct a suitable sequence of pointwise approximations and apply the Dominated Convergence Theorem.  This PR refactors to provide the general-`p` result.
The argument for `p = ∞` requires finite-dimensionality of `E` and a different approximating sequence, so is left for another PR.

2021-07-03 10:46:49 a022bb7
feat(algebra/invertible): add a missing lemma `inv_of_eq_left_inv` (#8179)
add "inv_of_eq_left_inv"

2021-07-03 10:46:48 111ac5c
feat(group_theory/perm/basic): of_subtype_apply_of_mem (#8174)

2021-07-03 10:46:47 25d042c
feat(algebra/periodic): a few more periodicity lemmas (#8062)
A few more lemmas about periodic functions that I realized are useful.

2021-07-03 09:58:05 915902e
feat(topology/algebra/multilinear): add a linear_equiv version of pi (#8064)
This is a weaker version of `continuous_multilinear_map.piₗᵢ` that requires weaker typeclasses.
Unfortunately I don't understand why the typeclass system continues not to cooperate here, but I suspect it's the same class of problem that plagues `dfinsupp`.

2021-07-03 03:02:44 edb72b4
docs(data/real/*): add module docstrings (#8145)

2021-07-02 22:04:07 10f6c2c
feat(data/real/nnreal): cast_nat_abs_eq_nnabs_cast (#8121)

2021-07-02 20:58:33 f8ca790
chore(group_theory/congruence): fix docstring (#8162)
This fixes a docstring which didn't match the code.

2021-07-02 20:21:24 f5a8b8a
fix(topology/continuous_function/basic): fix `continuous_map.id_coe` (#8180)

2021-07-02 19:46:00 9e9dfc2
feat(category_theory/adjunction/fully_faithful): Converses to `unit_is_iso_of_L_fully_faithful` and `counit_is_iso_of_R_fully_faithful` (#8181)
Add a converse to `unit_is_iso_of_L_fully_faithful` and to `counit_is_iso_of_R_fully_faithful`

2021-07-02 18:29:36 ea924e5
feat(data/nat/choose/bounds): exponential bounds on binomial coefficients (#8095)

2021-07-02 16:37:34 67c72b4
feat(data/list/cycle): lift next_prev to cycle (#8172)

2021-07-02 10:55:24 d6a7c3b
chore(algebra/algebra/basic): add `alg_hom.of_linear_map` and lemmas (#8151)
This lets me golf `complex.lift` a little

2021-07-02 08:19:35 dfc42f9
feat(data/equiv/basic): swap_apply_ne_self_iff (#8167)

2021-07-02 05:56:27 f5f8a20
feat(analysis/calculus/fderiv_symmetric): prove that the second derivative is symmetric (#8104)
We show that, if a function is differentiable over the reals around a point `x`, and is second-differentiable at `x`, then the second derivative is symmetric. In fact, we even prove a stronger statement for functions differentiable within a convex set, to be able to apply it for functions on the half-plane or the quadrant.

2021-07-01 21:10:28 92b64a0
feat(data/list/duplicate): prop that element is a duplicate (#7824)
As discussed in https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/nodup.20and.20decidability and #7587

2021-07-01 19:34:23 5945ca3
chore(*): update to lean 3.31.0c (#8122)

2021-07-01 18:15:23 395d871
chore(algebra/lie/free): tidy up after #8153 (#8163)
@eric-wieser had some further comments and suggestions which didn't make it into #8153

2021-07-01 16:37:06 1571290
feat(logic/is_empty): add some simp lemmas and unique instances (#7832)
There are a handful of lemmas about `(h : ¬nonempty a)` that if restated in terms of `[is_empty a]` become suitable for `simp` or as `instance`s. This adjusts some of those lemmas.

2021-07-01 14:19:24 3d2e5ac
chore(linear_algebra/matrix/determinant): golf a proof (#8157)

2021-07-01 14:19:23 ca30bd2
feat(analysis/fourier): span of monomials is dense in C^0 (#8035)
Prove that the span of the monomials `λ z, z ^ n` is dense in `C(circle, ℂ)`, i.e. that its `submodule.topological_closure` is `⊤`.  This follows from the Stone-Weierstrass theorem after checking that it is a subalgebra, closed under conjugation, and
separates points.

2021-07-01 12:58:30 3fa61ea
feat(algebra/lie/free): construction of free Lie algebras (#8153)

2021-07-01 12:58:29 4d24172
docs(order/zorn): explain how to use Zorn's lemma (#8125)

2021-07-01 12:58:27 7cbca35
feat(data/fintype/intervals): fintype instances for set.{Icc,Ioc,Ioo} (#8123)

2021-07-01 11:10:36 6e0d2d3
feat(logic/basic): add two simp lemmas (#8148)

2021-07-01 07:48:35 8986c4f
chore(linear_algebra/matrix/determinant): squeeze some simps for speed up (#8156)
I simply squeezed some simps in `linear_algebra/matrix/determinant` to obtain two much faster proofs.
[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews)

2021-07-01 07:48:34 582ee9e
feat(logic/basic): subtype.subsingleton (#8138)

2021-07-01 07:48:33 aabb900
feat(order/preorder_hom): preorder_hom_eq_id (#8135)
From LTE

2021-07-01 07:48:32 4a75876
feat(category_theory/limits/concrete_category): Some lemmas about limits in concrete categories (#8130)
Generalizes some lemmas from LTE. 
See zulip discussion [here](https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/for_mathlib.2Fwide_pullback/near/244298079).

2021-07-01 06:12:12 2df573a
feat(data/int/basic): int.eq_zero_of_div_eq_zero (#8134)

2021-07-01 02:20:40 b972280
chore(scripts): update nolints.txt (#8155)
I am happy to remove some nolints for you!

2021-06-30 21:21:07 0faf086
feat(data/int/cast): cast_nat_abs (#8120)

2021-06-30 21:21:06 ad00a02
feat(topology/vector_bundle): `topological_vector_bundle_core` (#8089)
Analogous construction to `topological_fiber_bundle_core`. This construction gives a way to construct vector bundles from a structure registering how trivialization changes act on fibers.

2021-06-30 20:39:41 e70093f
feat(algebra/free_non_unital_non_assoc_algebra): construction of the free non-unital, non-associative algebra on a type `X` with coefficients in a semiring `R` (#8141)

2021-06-30 18:53:30 e713106
docs(data/string/*): add module docstrings (#8144)

2021-06-30 18:53:29 8ee2967
feat(algebra/big_operators/basic): nat_abs_sum_le (#8132)

2021-06-30 18:03:21 3a5851f
feat(data/complex/module): add complex.lift to match zsqrtd.lift (#8107)
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/The.20unique.20.60.E2.84.82.20.E2.86.92.E2.82.90.5B.E2.84.9D.5D.20A.60.20given.20a.20square.20root.20of.20-1/near/244135262)

2021-06-30 16:49:13 36c90d5
fix(algebra/algebra/subalgebra): fix incorrect namespaces and remove duplicate instance (#8140)
We already had a `subsingleton` instance on `alg_hom`s added in #5672, but we didn't find it #8110 because
* gh-6025 means we can't ask `apply_instance` to find it
* it had an incorrect name in the wrong namespace
Code opting into this instance will need to change from
```lean
local attribute [instance] alg_hom.subsingleton
```
to
```lean
local attribute [instance] alg_hom.subsingleton subalgebra.subsingleton_of_subsingleton
```

2021-06-30 16:49:12 d420db5
chore(algebra/algebra): trivial lemmas for alg_equiv (#8139)

2021-06-30 13:51:06 9c03c03
feat(data/set/basic): range_pair_subset (#8133)
From LTE.

2021-06-30 12:06:40 1de192f
feat(algebra/ordered_ring): abs_cases lemma (#8124)
This lemma makes the following type of argument work seamlessly:
```lean
example (h : x<-1/2) : |x + 1| < |x| := by cases abs_cases (x + 1); cases abs_cases x; linarith
```

2021-06-30 11:26:31 db05900
feat(linear_algebra/clifford_algebra): two algebras are isomorphic if their quadratic forms are equivalent (#8128)

2021-06-30 08:51:20 9a8dcb9
docs(data/dlist/basic): add module docstring (#8079)

2021-06-30 04:28:24 eeeb223
feat(data/int/basic): int.nat_abs_sub_le (#8118)

2021-06-30 04:28:23 af8a38f
feat(algebra/{covariant_and_contravariant + ordered_monoid): add instance, golf, docs (#8067)
Introduce a missing instance for `comm_semigroup`s.
Also, golf a couple of proofs and add a relevant, explicit PR to a comment.

2021-06-30 03:13:34 3ee436d
docs(data/char): add module docstring (#8043)

2021-06-30 02:07:35 8cacd99
chore(scripts): update nolints.txt (#8131)
I am happy to remove some nolints for you!

2021-06-29 23:21:40 917bcd4
doc(topology/separation): module + lemma docs (#8091)

2021-06-29 23:21:39 2600baf
docs(data/list/sections): add module docstring (#8033)

2021-06-29 21:36:27 2c749b1
feat(algebra/to_additive): do not additivize operations on constant types (#7792)
* Fixes #4210
* Adds a heuristic to `@[to_additive]` that decides which multiplicative identifiers to replace with their additive counterparts. 
* See [Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/to_additive.20and.20fixed.20types) thread or documentation for the precise heuristic.
* We tag some types with `@[to_additive]`, so that they are handled correctly by the heurstic. These types `pempty`, `empty`, `unit` and `punit`.
* We make the following change to enable to above bullet point: you are allowed to translate a declaration to itself, only if you write its name again as argument of the attribute (if you don't specify an argument we want to raise an error, since that likely is a mistake).
* Because of this heuristic, all declarations with the `@[to_additive]` attribute should have a type with a multiplicative structure on it as its first argument. The first argument should not be an arbitrary indexing type. This means that in `finset.prod` and `finprod` we reorder the first two (implicit) arguments, so that the first argument is the codomain of the function.
* This will eliminate many (but not all) type mismatches generated by `@[to_additive]`.
* This heuristic doesn't catch all cases: for example, the declaration could have two type arguments with multiplicative structure, and the second one is `ℕ`, but the first one is a variable.

2021-06-29 20:21:49 e6ec901
feat(ring_theory/power_basis): extensionality for algebra homs (#8110)
This PR shows two `alg_hom`s out of an algebra with a power basis are equal if the generator has the same image for both maps. It uses this result to bundle `power_basis.lift` into an equiv.

2021-06-29 19:37:54 505c32f
feat(analysis/normed_space/inner_product): the orthogonal projection is self adjoint (#8116)

2021-06-29 17:54:59 5ecd078
feat(data/ordmap/ordset): Implement some more `ordset` functions (#8127)
Implement (with proofs) `erase`, `map`, and `mem` for `ordset` in `src/data/ordmap` along with a few useful related proofs.

2021-06-29 17:54:58 d558350
feat(algebra/ordered_group): add a few instances, prune unneeded code (#8075)
This PR aims at shortening the subsequent `order` refactor.
The removed lemmas can now by proven as follows:
```lean
@[to_additive ordered_add_comm_group.add_lt_add_left]
lemma ordered_comm_group.mul_lt_mul_left' (a b : α) (h : a < b) (c : α) : c * a < c * b :=
mul_lt_mul_left' h c
@[to_additive ordered_add_comm_group.le_of_add_le_add_left]
lemma ordered_comm_group.le_of_mul_le_mul_left (h : a * b ≤ a * c) : b ≤ c :=
le_of_mul_le_mul_left' h
@[to_additive]
lemma ordered_comm_group.lt_of_mul_lt_mul_left (h : a * b < a * c) : b < c :=
lt_of_mul_lt_mul_left' h
```
They were only used in this file and I replaced their appearances by the available proofs.

2021-06-29 17:54:57 bdf2d81
feat(topology/continuous_function/stone_weierstrass): complex Stone-Weierstrass (#8012)

2021-06-29 16:11:34 4cdfbd2
feat(data/setoid/partition): indexed partition (#7910)
from LTE
Note that data/setoid/partition.lean, which already existed before this
PR, is currently not imported anywhere in mathlib. But it is used in LTE
and will be used in the next PR, in relation to locally constant
functions.

2021-06-29 14:28:25 23ee7ea
feat(analysis/normed_space/basic): int.norm_eq_abs (#8117)

2021-06-29 14:28:24 d249e53
feat(algebra/ordered_group): add instances mixing `group` and `co(ntra)variant` (#8072)
In an attempt to break off small parts of PR #8060, I extracted some of the instances proven there to this PR.
This is part of the `order` refactor.
~~I tried to get rid of the `@`, but failed.  If you have a trick to avoid them, I would be very happy to learn it!~~  `@`s removed!

2021-06-29 14:28:23 70fcf99
feat(group_theory/free_abelian_group_finsupp): isomorphism between `free_abelian_group` and `finsupp` (#8046)
From LTE

2021-06-29 13:33:01 68d7d00
chore(analysis/special_functions/pow): versions of tendsto/continuous_at lemmas for (e)nnreal (#8113)
We have the full suite of lemmas about `tendsto` and `continuous` for real powers of `real`, but apparently not for `nnreal` or `ennreal`.  I have provided a few, rather painfully -- if there is a better way, golfing is welcome!

2021-06-29 12:50:05 54eccb0
feat(measure_theory/lp_space): add snorm_eq_lintegral_rpow_nnnorm (#8115)
Add two lemmas to go from `snorm` to integrals (through `snorm'`). The idea is that `snorm'` should then generally not be used, except in the construction of `snorm`.

2021-06-29 11:29:09 90d2046
feat(algebra/monoid_algebra): adjointness for the functor `G ↦ monoid_algebra k G` when `G` carries only `has_mul` (#7932)

2021-06-29 10:46:12 d521b2b
feat(algebraic_topology/simplex_category): epi and monos in the simplex category (#8101)
Characterize epimorphisms and monomorphisms in `simplex_category` in terms of the function they represent. Add lemmas about their behavior on length of objects.

2021-06-29 06:55:39 07f1235
chore(category_theory/opposites): make hom explicit in lemmas (#8088)

2021-06-28 20:13:06 ac156c1
chore(algebra/algebra/basic): add algebra.right_comm to match left_comm (#8109)
This also reorders the arguments to `right_comm` to match the order they appear in the LHS of the lemma.

2021-06-28 16:40:09 a79df55
chore(algebra/ordered_group): remove linear_ordered_comm_group.to_comm_group (#7861)
This instance shortcut bypassed `ordered_comm_group`, and could easily result in computability problems since many `linear_order` instances are noncomputable due to their embedded decidable instances. This would happen when:
* Lean needs an `add_comm_group A`
* We have:
  * `noncomputable instance : linear_ordered_comm_group A`
  * `instance : ordered_comm_group A`
* Lean tries `linear_ordered_comm_group.to_comm_group` before `ordered_comm_group.to_comm_group`, and hands us back a noncomputable one, even though there is a computable one available.
There're no comments explaining why things were done this way, suggesting it was accidental, or perhaps that `ordered_comm_group` came later.
This broke one proof which somehow `simponly`ed associativity the wrong way, so I just golfed that proof and the one next to it for good measure.

2021-06-28 15:38:22 1ffb5be
feat(data/complex/module): add complex.alg_hom_ext (#8105)

2021-06-28 13:54:02 b160ac8
chore(topology/topological_fiber_bundle): reorganizing the code (#7989)
Mainly redesigning the `simp` strategy.

2021-06-28 12:36:08 f7c1e5f
feat(algebra/lie/nilpotent): basic lemmas about nilpotency for Lie subalgebras of associative algebras (#8090)
The main lemma is: `lie_algebra.is_nilpotent_ad_of_is_nilpotent` which is the first step in proving Engel's theorem.

2021-06-28 11:54:29 81183ea
feat(geometry/manifold): `derivation_bundle` (#7708)
In this PR we define the `derivation_bundle`. Note that this definition is purely algebraic and that the whole geometry/analysis is contained in the algebra structure of smooth global functions on the manifold.
I believe everything runs smoothly and elegantly and that most proofs can be naturally done by `rfl`. To anticipate some discussions that already arose on Zulip about 9 months ago, note that the content of these files is purely algebraic and that there is no intention whatsoever to replace the current tangent bundle. I prefer this definition to the one given through the adjoint representation, because algebra is more easily formalized and simp can solve most proofs with this definition. However, in the future, there will be also the adjoint representation for sure.

2021-06-28 10:36:19 bfd0685
fix(algebra/module/linear_map): do not introduce `show` (#8102)
Without this change, `apply linear_map.coe_injective` on a goal of `f = g` introduces some unpleasant `show` terms, giving a goal of
```lean
(λ (f : M →ₗ[R] M₂), show M → M₂, from ⇑f) f = (λ (f : M →ₗ[R] M₂), show M → M₂, from ⇑f) g
```
which is then frustrating to `rw` at, instead of
```lean
⇑f = ⇑g
```

2021-06-28 08:51:27 3cb247c
chore(algebra/ordered_monoid_lemmas): change additive name `left.add_nonneg` to `right.add_nonneg` (#8065)
A copy-paste error in the name of a lemma that has not been used yet.
Change `pos_add` to `add_pos`.
I also added some paragraph breaks in the documentation.
Co-authored by Eric Wieser.

2021-06-28 06:13:33 80d0234
fix(algebra/group_power): put opposite lemmas in the right namespace (#8100)

2021-06-28 04:53:22 7b253dd
feat(group_theory/subgroup): lemmas for normal subgroups of subgroups (#7271)

2021-06-27 15:45:05 f8e9c17
feat(data/nat/factorial): descending factorial (#7759)
- rename `desc_fac` to `asc_factorial`
- define `desc_factorial`
- update `data.fintype.card_embedding` to use `desc_factorial`

2021-06-27 13:01:13 2dcc307
feat(category_theory/limits): morphism to terminal is split mono (#8084)
A generalisation of existing results: we already have an instance `split_mono` to `mono` so this is strictly more general.

2021-06-27 02:15:39 c5d17ae
chore(scripts): update nolints.txt (#8093)
I am happy to remove some nolints for you!

2021-06-26 22:33:31 c7a35b4
doc(topology/homeomorph): fixup glaring error (#8092)
thanks to @kbuzzard for spotting this error in #8086

2021-06-26 20:35:05 0817020
doc(topology/homeomorph): module docs (#8086)
I really wanted to write more, but there's really not much to say about something that is a stronger bijection :b

2021-06-26 18:57:08 b874abc
feat(field_theory): state primitive element theorem using `power_basis` (#8073)
This PR adds an alternative formulation to the primitive element theorem: the original formulation was `∃ α : E, F⟮α⟯ = (⊤ : intermediate_field F E)`, which means a lot of pushing things across the equality/equiv from `F⟮α⟯` to `E` itself. I claim that working with a field `E` that has a power basis over `F` is nicer since you don't need to do a lot of transporting.

2021-06-26 18:15:06 598722a
feat(algebraic_topology/simplicial_object): Add augment construction (#8085)
Adds the augmentation construction for (co)simplicial objects.
From LTE.

2021-06-26 09:25:11 4630067
chore(data/set/intervals): syntax clean up (#8087)

2021-06-25 21:10:33 68ec06c
chore(analysis/analytic/composition): remove one `have` (#8083)
A `have` in a proof is not necessary.

2021-06-25 20:31:41 92a7171
feat(measure_theory/interval_integral): generalize `add_adjacent_intervals` to n-ary sum (#8050)

2021-06-25 18:48:54 6666ba2
fix(real/sign): make `real.sign 0 = 0` to match `int.sign 0` (#8080)
Previously `sign 0 = 1` which is quite an unusual definition. This definition brings things in line with `int.sign`, and include a proof of this fact.
A future refactor could probably introduce a sign for all rings with a partial order

2021-06-25 18:48:53 a7faaf5
docs(data/list/chain): add module docstring (#8041)

2021-06-25 18:48:52 cf4a2df
docs(data/list/range): add module docstring (#8026)

2021-06-25 17:09:01 9cc44ba
feat(ring_theory/nilpotent): basic results about nilpotency in associative rings (#8055)

2021-06-25 10:35:36 1774cf9
chore(data/complex/{module, is_R_or_C}, analysis/complex/basic): rationalize the structure provided for `conj` and `of_real` (#8014)
We have many bundled versions of the four operations associated with the complex-real interaction (real & imaginary parts, real-to-complex coercion `of_real`, complex conjugation `conj`).
This PR adjusts the versions provided, according to the following principles:
- `conj` is always an equivalence, there is never a need for the map version
- Both `of_real` and `conj` are `ℝ`-algebra homomorphisms, and since this in typical applications requires no more imports than `ℝ`-linear maps, they can entirely supersede the `ℝ`-linear map versions.
- Name according to the base map name together with an acronym for the bundled map type, for example `conj_ae` for `conj` as an algebra-equivalence (this principle had been largely, but not entirely, followed previously).
The following specific changes result:
- `quaternion.conj_alg_equiv` renamed to `quaternion.conj_ae`, likewise for `quaternion_algebra.conj_alg_equiv`
- `complex.conj_li` upgraded from a map to an equivalence
- `complex.conj_clm` (continuous linear map) upgraded to `complex.conj_cle` (continuous linear equivalence)
- `complex.conj_alg_equiv` renamed to `complex.conj_ae`
- `complex.conj_lm` gone, use `complex.conj_ae` instead
- `complex.of_real_lm` (linear map) upgraded to `complex.of_real_am` (algebra homomorphism)
- all the same changes for `is_R_or_C.*` as for `complex.*`
Associated lemmas are also renamed.

2021-06-25 09:21:01 c515346
feat(ring_theory/power_basis): map a power basis through an alg_equiv (#8039)
If `A` is equivalent to `A'` as an `R`-algebra and `A` has a power basis, then `A'` also has a power basis. Included are the relevant `simp` lemmas.
This needs a bit of tweaking to `basis.map` and `alg_equiv.to_linear_equiv` for getting more useful `simp` lemmas.

2021-06-25 07:18:41 10cd252
docs(overview, undergrad): add Liouville's Theorem on existence of transcendental numbers (#8068)

2021-06-24 21:57:47 2608244
feat(data/matrix/basic): add lemma minor_map  (#8074)
Add lemma `minor_map` proving that the operations of taking a minor and applying a map to the coefficients of a matrix commute.

2021-06-24 21:15:20 e137523
chore(algebraic_topology/simplex_category): golf proof (#8076)
The "special case of the first simplicial identity" is a trivial consequence of the "generic case". This makes me wonder whether the special case should be there at all but I do not know the standard references for this stuff.

2021-06-24 19:39:06 e605b21
feat(linear_algebra/pi): add linear_equiv.Pi_congr_left (#8070)
This definition was hiding inside the proof for `is_noetherian_pi`

2021-06-24 16:50:00 25d8aac
chore(field_theory): turn `intermediate_field.subalgebra.equiv_of_eq`  into `intermediate_field.equiv_of_eq` (#8069)
I was looking for `intermediate_field.equiv_of_eq`. There was a definition of `subalgebra.equiv_of_eq` in the `intermediate_field` namespace which is equal to the original `subalgebra.equiv_of_eq` definition. Meanwhile, there was no `intermediate_field.equiv_of_eq`. So I decided to turn the duplicate into what I think was intended. (As a bonus, I added the `simp` lemmas from `subalgebra.equiv_of_eq`.)

2021-06-24 15:14:30 db84f2b
feat(data/polynomial): `aeval_alg_equiv`, like `aeval_alg_hom` (#8038)
This PR copies `polynomial.aeval_alg_hom` and `aeval_alg_hom_apply` to `aeval_alg_equiv(_apply)`.

2021-06-24 15:14:29 2a15520
chore(data/polynomial): generalize `aeval_eq_sum_range` to `comm_semiring` (#8037)
This pair of lemmas did not need any `comm_ring` assumptions, so I put them in a new section with weaker typeclass assumptions.

2021-06-24 15:14:28 3937c1b
docs(data/list/pairwise): add module docstring (#8025)

2021-06-24 15:14:27 520e79d
feat(analysis/convex/exposed): introduce exposed sets (#7928)
introduce exposed sets

2021-06-24 15:14:26 4801fa6
feat(measure_theory): the Vitali-Caratheodory theorem (#7766)
This PR proves the Vitali-Carathéodory theorem, asserting that a measurable function can be closely approximated from above by a lower semicontinuous function, and from below by an upper semicontinuous function. 
This is the main ingredient in the proof of the general version of the fundamental theorem of calculus (when `f'` is just integrable, but not continuous).

2021-06-24 13:55:29 b9bf921
chore(linear_algebra): switch to named constructors for linear_map (#8059)
This makes some ideas I have for future refactors easier, and generally makes things less fragile to changes such as additional fields or reordering of fields.
The extra verbosity is not really significant.
This conversion is not exhaustive, there may be anonymous constructors elsewhere that I've missed.

2021-06-24 12:48:16 2a1cabe
chore(data/polynomial/eval, ring_theory/polynomial_algebra): golfs (#8058)
This golfs:
* `polynomial.map_nat_cast` to use `ring_hom.map_nat_cast`
* `polynomial.map.is_semiring_hom` to use `ring_hom.is_semiring_hom`
* `poly_equiv_tensor.to_fun` and `poly_equiv_tensor.to_fun_linear_right` out of existence
And adds a new (unused) lemma `polynomial.map_smul`.
All the other changes in `polynomial/eval` are just reorderings of lemmas to allow the golfing.

2021-06-24 11:32:46 5352639
feat(data/matrix/basic.lean) : added map_scalar and linear_map.map_matrix (#8061)
Added two lemmas (`map_scalar` and `linear_map.map_matrix_apply`) and a definition (`linear_map.map_matrix`) showing that a map between coefficients induces the same type of map between matrices with those coefficients.

2021-06-24 09:57:32 5bd649f
feat(analysis/liouville/liouville_constant): transcendental Liouville numbers exist! (#8020)
The final (hopefully!) PR in the Liouville series: there are a couple of results and the proof that Liouville numbers are transcendental.

2021-06-24 09:57:31 f7f12bc
feat(data/nat/prime): norm_num plugin for factors (#8009)
Implements a `norm_num` plugin to evaluate terms like `nat.factors 231 = [3, 7, 11]`.

2021-06-24 09:57:30 d9dcf69
feat(topology/topological_fiber_bundle): a new standard construction for topological fiber bundles (#7935)
In this PR we implement a new standard construction for topological fiber bundles: namely a structure that permits to define a fiber bundle when trivializations are given as local equivalences but there is not yet a topology on the total space. The total space is hence given a topology in such a way that there is a fiber bundle structure for which the local equivalences
are also local homeomorphism and hence local trivializations.

2021-06-24 08:13:45 2f27046
refactor(algebra/ordered_monoid): use `covariant + contravariant` typeclasses in `algebra/ordered_monoid` (#7999)
Another stepping stone toward #7645.

2021-06-24 05:12:32 5653516
feat(data/fin): some lemmas about casts (#8049)
From [LTE](https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/fin.lean).

2021-06-24 04:33:52 e07a24a
chore(data/real/hyperreal): remove @ in a proof (#8063)
Remove @ in a proof.  Besides its clear aesthetic value, this prevents having to touch this file when the number typeclass arguments in the intervening lemmas changes.
See PR #7645 and #8060.

2021-06-23 23:28:11 b9ef710
chore(linear_algebra): deduplicate `linear_equiv.{Pi_congr_right,pi}` (#8056)
PRs #6415 and #7489 both added the same linear equiv between Pi types. I propose to unify them, using the name of `Pi_congr_right` (more specific, matches `equiv.Pi_congr_right`), the location of `pi` (more specific) and the implementation of `Pi_congr_right` (shorter).

2021-06-23 21:01:23 3cf8039
feat(measure_theory/set_integral): the set integral is continuous (#7931)
Most of the code is dedicated to building a continuous linear map from Lp to the Lp space corresponding to the restriction of the measure to a set. The set integral is then continuous as composition of the integral and that map.

2021-06-23 19:27:20 a31e3c3
feat(category_theory/arrow/limit): limit cones in arrow categories (#7457)

2021-06-23 17:29:28 204ca5f
docs(data/fin2): add module docstring (#8047)

2021-06-23 17:29:27 89b8e0b
docs(data/option/defs): add module and def docstrings (#8042)

2021-06-23 17:29:26 431207a
docs(data/list/bag_inter): add module docstring (#8034)

2021-06-23 17:29:25 dd5074c
feat(analysis/normed_space/basic): add has_nnnorm (#7986)
We create here classes `has_nndist` and `has_nnnorm` that are variants of `has_dist` and `has_norm` taking values in `ℝ≥0`.  Obvious instances are `pseudo_metric_space` and `semi_normed_group`.
These are not used that much in mathlib, but for example `has_nnnorm` is quite convenient for LTE.

2021-06-23 15:53:39 a7b5237
feat(category_theory/arrow): arrow.iso_mk (#8057)

2021-06-23 15:53:38 c841b09
docs(data/list/tfae): add module docstring (#8040)

2021-06-23 15:53:37 5787d64
docs(data/list/zip): add module docstring (#8036)

2021-06-23 14:11:52 97529b4
docs(data/list/forall2): add module docstring (#8029)

2021-06-23 11:50:23 d9eed42
feat(analysis/liouville/inequalities_and_series): two useful inequalities for Liouville (#8001)
This PR ~~creates a file with~~ proves two very specific inequalities.  They will be useful for the Liouville PR, showing that transcendental Liouville numbers exist.
After the initial code review, I scattered an initial segment of this PR into mathlib.  What is left might only be useful in the context of proving the transcendence of Liouville's constants.
~~Given the shortness of this file, I may move it into the main `liouville_constant`, after PR #8020  is merged.~~

2021-06-23 09:25:09 47ed97f
feat(algebra/ordered_monoid_lemmas + fixes): consistent use of `covariant` and `contravariant` in `ordered_monoid_lemmas` (#7876)
This PR breaks off a part of PR #7645.  Here, I start using more consistently `covariant_class` and `contravariant_class` in the file `algebra/ordered_monoid_lemmas`.
This PR is simply intended as a stepping stone to merging the bigger one (#7645) and receiving "personalized comments on it!
Summary of changes:
--
New lemmas
* `@[to_additive add_nonneg] lemma one_le_mul_right`
* `@[to_additive] lemma le_mul_of_le_of_le_one`
* `@[to_additive] lemma mul_lt_mul_of_lt_of_lt`
* `@[to_additive] lemma left.mul_lt_one_of_lt_of_lt_one`
* `@[to_additive] lemma right.mul_lt_one_of_lt_of_lt_one`
* `@[to_additive] lemma left.mul_lt_one_of_lt_of_lt_one`
* `@[to_additive] lemma right.mul_lt_one_of_lt_of_lt_one`
* `@[to_additive right.add_nonneg] lemma right.one_le_mul`
* `@[to_additive right.pos_add] lemma right.one_lt_mul`
--
Lemmas that have merged with their unprimed versions due to diminished typeclass assumptions
* `@[to_additive] lemma lt_mul_of_one_le_of_lt'`
* `@[to_additive] lemma lt_mul_of_one_lt_of_lt'`
* `@[to_additive] lemma mul_le_of_le_of_le_one'`
* `@[to_additive] lemma mul_le_of_le_one_of_le'`
* `@[to_additive] lemma mul_lt_of_lt_of_le_one'`
* `@[to_additive] lemma mul_lt_of_lt_of_lt_one'`
* `@[to_additive] lemma mul_lt_of_lt_one_of_lt'`
* the three lemmas
* * `@[to_additive] lemma mul_lt_of_le_one_of_lt'`,
* * `mul_lt_one_of_le_one_of_lt_one`,
* * `mul_lt_one_of_le_one_of_lt_one'`
all merged into `mul_lt_of_le_one_of_lt`
--
Lemma `@[to_additive] lemma mul_lt_one` broke into
* `@[to_additive] lemma left.mul_lt_one`
* `@[to_additive] lemma right.mul_lt_one`
depending on typeclass assumptions
--
Lemmas that became a direct application of another lemma
* `@[to_additive] lemma mul_lt_one_of_lt_one_of_le_one` and `mul_lt_one_of_lt_one_of_le_one'` are applications of `mul_lt_of_lt_of_le_one`
* `@[to_additive] lemma mul_lt_one'` is an application of `mul_lt_of_lt_of_lt_one`
--
Lemma `@[to_additive] lemma mul_eq_one_iff_eq_one_of_one_le` changed name to `mul_eq_one_iff_eq_one_of_one_le`.
The multiplicative version is never used.
The additive version, `add_eq_zero_iff_eq_zero_of_nonneg` is used: I changed the occurrences in favour of the shorter name.
--
Lemma `@[to_additive add_nonpos] lemma mul_le_one'` continues as
```lean
alias mul_le_of_le_of_le_one ← mul_le_one'
attribute [to_additive add_nonpos] mul_le_one'
```
<!--
Name changes:
* lemma `mul_le_of_le_one_of_le'` became `mul_le_of_le_one_of_le`;
* lemma `lt_mul_of_one_le_of_lt'` became `lt_mul_of_one_le_of_lt`;
* lemma `add_eq_zero_iff_eq_zero_of_nonneg` became `add_eq_zero_iff'`.
(Really, the lemmas above are the ones that were used outside of the PR: the two `mul` ones have a corresponding `to_additive` version and the `add` one is the `to_additive` version of `mul_eq_one_iff_eq_one_of_one_le`.)
-->

2021-06-23 04:58:30 168678e
feat(analysis/liouville/liouville_constant): develop some API for Liouville (#8005)
Proof of some inequalities for Liouville numbers.

2021-06-23 02:56:34 ac2142c
chore(scripts): update nolints.txt (#8051)
I am happy to remove some nolints for you!

2021-06-23 01:21:37 0bc09d9
feat(algebra/ordered_field): a few monotonicity results for powers (#8022)
This PR proves the monotonicity (strict and non-strict) of `n → 1 / a ^ n`, for a fixed `a < 1` in a linearly ordered field.  These are lemmas extracted from PR #8001: I moved them to a separate PR after the discussion there.

2021-06-22 22:06:38 949e98e
chore(topology/basic): add missing lemma (#8048)
Adds `is_closed.sdiff`. From LTE.

2021-06-22 20:35:50 de4a4ce
feat(ring_theory/adjoin/basic): lemmas relating adjoin and submodule.span (#8031)

2021-06-22 19:52:44 c594196
chore(topology/continuous_function/algebra): delete old instances, use bundled sub[monoid, group, ring]s (#8004)
We remove the `monoid`, `group`, ... instances on `{ f : α → β | continuous f }` since `C(α, β)` should be used instead, and we replacce the `sub[monoid, group, ...]` instances on `{ f : α → β | continuous f }` by definitions of bundled subobjects with carrier `{ f : α → β | continuous f }`. We keep the `set_of` for subobjects since we need a subset to be the carrier.
Zulip : https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/instances.20on.20continuous.20subtype

2021-06-22 16:26:58 83bd2e6
feat(analysis/normed_space/multilinear): add a few inequalities (#8018)
Also add a few lemmas about `tsum` and `nnnorm`.

2021-06-22 16:26:57 9c4afb1
feat(data/zmod): equivalence between the quotient type ℤ / aℤ and `zmod a` (#7976)
This PR defines the equivalence between `zmod a` and ℤ / aℤ, where `a : ℕ` or `a : ℤ`, and the quotient is a quotient group or quotient ring.
It also defines `zmod.lift n f hf : zmod n →+ A` induced by an additive hom `f : ℤ →+ A` such that `f n = 0`. (The latter map could be, but is no longer, defined as the composition of the equivalence with `quotient.lift f`.)
Zulip threads:
 - [`(ideal.span {d}).quotient` is `zmod d`](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60.28ideal.2Espan.20.7Bd.7D.29.2Equotient.60.20is.20.60zmod.20d.60)
 - [Homomorphism from the integers descends to $$\mathbb{Z}/n$$](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Homomorphism.20from.20the.20integers.20descends.20to.20.24.24.5Cmathbb.7BZ.7D.2Fn.24.24)
 - [ `∈ gmultiples` iff divides](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60.E2.88.88.20gmultiples.60.20iff.20divides)

2021-06-22 14:51:33 f477e03
docs(data/list/erasedup): add module docstring (#8030)

2021-06-22 14:51:32 7e20058
feat(topology/Profinite/cofiltered_limit): Locally constant functions from cofiltered limits (#7992)
This generalizes one of the main technical theorems from LTE about cofiltered limits of profinite sets.
This theorem should be useful for a future proof of Stone duality.

2021-06-22 13:52:01 6e5de19
feat(linear_algebra/free_module): add lemmas (#7950)
Easy results about free modules.

2021-06-22 12:45:40 cb7b6cb
docs(data/list/rotate): add module docstring (#8027)

2021-06-22 12:45:39 94a8073
feat(analysis/specific_limits): summability of `(λ i, 1 / m ^ f i)` (#8023)
This PR shows the summability of the series whose `i`th term is `1 / m ^ f i`, where `1 < m` is a fixed real number and `f : ℕ → ℕ` is a function bounded below by the identity function.  While a function eventually bounded below by a constant at least equal to 2 would have been enough, this specific shape is convenient for the Liouville application.
I extracted this lemma, following the discussion in PR #8001.

2021-06-22 12:45:38 a3699b9
refactor(topology/sheaves/stalks): Refactor proofs about stalk map (#8000)
Refactoring and speeding up some of my code on stalk maps from #7092.

2021-06-22 12:45:37 208d4fe
docs(data/pnat): add module docstrings (#7960)

2021-06-22 11:36:42 4cbe7d6
feat(group_theory/specific_groups/cyclic): A group is commutative if the quotient by the center is cyclic (#7952)

2021-06-22 11:36:40 a1a0940
chore(ring_theory/ideal): mark `ideal.quotient` as reducible (#7892)
I had an ideal and wanted to apply a theorem about submodule quotients to the ideal quotient. The API around ideals is designed to have most things defeq to the corresponding submodule definition. Marking this definition as reducible informs the typeclass system that it can use this defeq.
Test case:
````lean
import ring_theory.ideal.basic
/-- Typeclass instances on ideal quotients transfer to submodule quotients.
This is useful if you want to apply results that hold for general submodules
to ideals specifically.
The instance will not be found if `ideal.quotient` is not reducible,
e.g. after you uncomment the following line:
```
local attribute [semireducible] ideal.quotient
```
-/
example {R : Type*} [comm_ring R] (I : ideal R)
  [fintype (ideal.quotient I)] : fintype (submodule.quotient I) :=
infer_instance
````
Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Making.20.60ideal.2Equotient.60.20reducible.20.28or.20deleted.20altogether.3F.29

2021-06-22 11:36:40 96f09a6
feat(group_theory/perm/cycles): cycle_factors_finset (#7540)

2021-06-22 10:22:32 9ca8597
feat(linear_algebra/matrix/reindex): add some lemmas (#7963)
From LTE
Added lemmas `reindex_linear_equiv_trans`, `reindex_linear_equiv_comp`, `reindex_linear_equiv_comp_apply`, `reindex_linear_equiv_one` and `mul_reindex_linear_equiv_mul_one` needed in LTE.

2021-06-22 08:42:23 faaa0bc
feat(algebra/ordered_field): `(1 - 1 / a)⁻¹ ≤ 2` (#8021)
A lemma from the Liouville PR #8001.  I extracted this lemma, after the discussion there.

2021-06-22 03:06:41 3b4d1d8
chore(scripts): update nolints.txt (#8032)
I am happy to remove some nolints for you!

2021-06-22 03:06:40 6796bee
chore(algebra/char_p/basic): generalize to non_assoc_semiring (#7985)

2021-06-22 03:06:39 4416eac
feat(topology/instances/real): a continuous periodic function has compact range (and is hence bounded) (#7968)
A few more facts about periodic functions, namely:
- If a function `f` is `periodic` with positive period `p`,
  then for all `x` there exists `y` such that `y` is an element of `[0, p)` and `f x = f y`
- A continuous, periodic function has compact range
- A continuous, periodic function is bounded

2021-06-22 01:52:04 e4b9561
feat(linear_algebra/basic): weaken typeclasses (#8028)

2021-06-21 20:24:31 80daef4
chore(category_theory/limits): shorten some long lines (#8007)

2021-06-21 19:43:14 520bbe6
feat(algebra/non_unital_alg_hom): define non_unital_alg_hom (#7863)
The motivation is to be able to state the universal property for a magma algebra using bundled morphisms.

2021-06-21 19:43:13 2b80d2f
feat(geometry/euclidean/sphere): proof of Freek thm 95 - Ptolemy’s Theorem (#7329)

2021-06-21 19:03:52 2fb0842
perf(ci): use self-hosted runner for bors (#8024)
Run CI builds for the `staging` branch used by bors on a self-hosted github actions runner.  This runner has been graciously provided by Johan Commelin's DFG grant and is hosted at the Albert-Ludwigs-Universität Freiburg.
We need to use two github actions workflow files to use a separate runner for the `staging` branch: `build.yml` and `bors.yml`.  These are almost identical, except for the `runs-on:` property indicating which runner should be used.  The shell script `mk_build_yml.sh` is therefore used to generate both files from the common template `build.yml.in`.

2021-06-21 14:25:31 eb13f6b
feat(ring_theory/derivation): add missing dsimp lemmas, use old_structure_command, golf structure proofs (#8013)
This adds a pile of missing coercion lemmas proved by refl, and uses them to construct the `add_comm_monoid`, `add_comm_group`, and `module` instances.
This also changes `derivation` to be an old-style structure, which is more in line with the other bundled homomorphisms.
This also removes `derivation.commutator` to avoid having two ways to spell the same thing, as this leads to lemmas being harder to apply

2021-06-21 14:25:28 92263c0
refactor(algebraic_geometry/structure_sheaf): Enclose definitions in structure_sheaf namespace (#8010)
Moves some pretty generic names like `const` and `to_open` to the `structure_sheaf` namespace.

2021-06-21 14:25:27 5bc18a9
feat(topology/category/limits): Generalize Topological Kőnig's lemma  (#7982)
This PR generalizes the Topological Kőnig's lemma to work with limits over cofiltered categories (as opposed to just directed orders). Along the way, we also prove some more API for the category instance on `ulift C`, and provide an  `as_small C` construction for a category `C`. 
Coauthored with @kmill

2021-06-21 14:25:26 9ce032c
feat(data/matrix/basic): generalize to non_assoc_semiring (#7974)
Matrices with whose coefficients form a non-unital and/or non-associative ring themselves form a non-unital and non-associative ring.
This isn't a full generalization of the file, the main aim was to generalize the typeclass instances available.

2021-06-21 08:39:18 3ef52f3
chore(logic/basic): actually fixup `eq_or_ne` (#8015)
this lemma loves being broken...

2021-06-21 08:39:17 abdc316
feat(analysis/normed_space/normed_group_hom): add lemmas (#7875)
From LTE.

2021-06-21 03:37:41 c7d094d
chore(scripts): update nolints.txt (#8017)
I am happy to remove some nolints for you!

2021-06-21 03:37:40 3925fc0
feat(analysis/liouville/liouville_constant.lean): create a file and introduce Liouville's constant (#7996)
Introduce a new file and the definition of Liouville's number.  This is on the way to PR #4301.

2021-06-21 03:37:39 4d69b0f
chore(topology/algebra/infinite_sum): small todo (#7994)
Generalize a lemma from `f : ℕ → ℝ` to `f : β → α`, with 
```lean
[add_comm_group α] [topological_space α] [topological_add_group α] [t2_space α] [decidable_eq β] 
```
This was marked as TODO after #6017/#6096.

2021-06-21 03:37:38 5cdbb4c
feat(algebra/*/pi, topology/continuous_function/algebra): homomorphism induced by left-composition (#7984)
Given a monoid homomorphism from `α` to `β`, there is an induced monoid homomorphism from `I → α` to `I → β`, by left-composition.
Same result for semirings, modules, algebras.
Same result for topological monoids, topological semirings, etc, and the function spaces `C(I, α)`, `C(I, β)`, if the homomorphism is continuous.
Of these eight constructions, the only one I particularly want is the last one (topological algebras).  If reviewers feel it is better not to clog mathlib up with unused constructions, I am happy to cut the other seven from this PR.

2021-06-21 03:37:37 18c1c4a
fix(tactic/linarith/preprocessing): capture result of zify_proof (#7901)
this fixes the error encountered in the MWE in this Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/delayed_abstraction.20meta-variables/near/242376874
the `simplify` call inside of `zify_proof` does something bad to the tactic state when called in the scope of an `io.run_tactic`, not entirely sure why ¯\_(ツ)_/¯

2021-06-20 21:36:12 767901a
feat(algebra/ordered_ring): `a + 1 ≤ 2 * a` (#7995)
Prove one lemma, useful for the Liouville PR #4301.  The placement of the lemma will change, once the `ordered` refactor will get to  `ordered_ring`.

2021-06-20 17:21:15 fae00c7
chore(analysis/special_functions): move measurability statements to measure_theory folder (#8006)
Make sure that measure theory is not imported in basic files defining trigonometric functions and real powers. The measurability of these functions is postponed to a new file `measure_theory.special_functions`.

2021-06-20 13:40:08 547df12
chore(analysis/liouville/liouville + data/real/liouville): create folder `analysis/liouville/`, move `data/real/liouville` into new folder (#7998)
This PR simply creates a new folder `analysis/liouville` and moves `data/real/liouville` into the new folder.  In PR #7996 I create a new Liouville-related file in the same folder.

2021-06-20 12:05:49 3a0f282
feat(measure_theory/interval_integral): integral of a non-integrable function (#8011)
The `interval_integral` of a non-`interval_integrable` function is `0`.

2021-06-19 23:38:51 7d155d9
refactor(topology/metric_space/isometry): move material about isometries of normed spaces (#8003)
See https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/topology.20and.20analysis

2021-06-19 23:38:51 7d5b50a
feat(algebra/homology/homotopy): flesh out the api a bit, add some simps (#7941)

2021-06-19 18:19:08 63c3ab5
chore(data/int/basic): rationalize the arguments implicitness (mostly to_nat_sub_of_le) (#7997)

2021-06-19 15:31:15 cd8f7b5
chore(topology/metric_space/pi_Lp): move to analysis folder, import inner_product_space (#7991)
Currently, the file `pi_Lp` (on finite products of metric spaces, with the `L^p` norm) is in the topology folder, but it imports a lot of analysis (to have real powers) and it defines a normed space structure, so it makes more sense to have it in analysis. Also, it is currently imported by `inner_product_space`, to give an explicit construction of an inner product space on `pi_Lp 2`, which means that all files importing general purposes lemmas on inner product spaces also import real powers, trigonometry, and so on. We swap the imports, letting `pi_Lp` import `inner_product_space` and moving the relevant bits from the latter file to the former. This gives a more reasonable import graph.

2021-06-19 15:31:14 497b84d
chore(analysis/mean_inequalities): split integral mean inequalities to a new file (#7990)
Currently, `normed_space.dual` imports a bunch of integration theory for no reason other than the file `mean_inequalities` contains both inequalities for finite sums and integrals. Splitting the file into two (and moving the integral versions to `measure_theory`) gives a more reasonable import graph.

2021-06-19 15:31:13 1846a1f
feat(measure_theory/interval_integral): `abs_integral_le_integral_abs` (#7959)
The absolute value of the integral of an integrable function is less than or equal to the integral of the absolute value that function.

2021-06-19 08:22:50 2ca0452
feat(data/{fin,nat,zmod}): prove `zmod.coe_add_eq_ite` (#7975)
This PR adds a couple of lemmas relating addition modulo `n` (in `ℕ`, `fin n` or `zmod n`) and addition in `ℕ` or `ℤ`.
[Based on this Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Homomorphism.20from.20the.20integers.20descends.20to.20.24.24.5Cmathbb.7BZ.7D.2Fn.24.24)

2021-06-19 03:04:16 28aee95
chore(scripts): update nolints.txt (#7993)
I am happy to remove some nolints for you!

2021-06-19 03:04:15 2a48c69
feat(category_theory/yoneda): develop API for representable functors (#7962)
Dualises and extends API for representable functors which was previously pretty minimal

2021-06-18 23:32:28 42ab44c
feat(group_theory): computable 1st isomorphism theorem (#7988)
This PR defines a computable version of the first isomorphism theorem for groups and monoids that takes a right inverse of the map, `quotient_ker_equiv_of_right_inverse`.

2021-06-18 23:32:27 3ee6248
feat(measure_theory): links between an integral and its improper version (#7164)
This PR introduces ways of studying and computing `∫ x, f x ∂μ` by studying the limit of the sequence `∫ x in φ n, f x ∂μ` for an appropriate sequence `φ` of subsets of the domain of `f`.

2021-06-18 20:48:47 f2f10cc
docs(data/set/enumerate): add module and definition docstrings (#7967)

2021-06-18 20:48:46 3a0653c
feat(data/real/ennreal): add a `algebra ℝ≥0 ℝ≥0∞` instance (#7846)

2021-06-18 18:18:49 52dbff0
chore(topology/basic): rename compact_Icc to is_compact_Icc (#7979)
Also rename `compact_interval` to `is_compact_interval`. And a bunch of random additions, all minor, as prerequisistes to #7978

2021-06-18 15:33:01 29e7a8d
feat(topology/algebra/ordered, topology/algebra/infinite_sum): bounded monotone sequences converge (variant versions) (#7983)
A bounded monotone sequence converges to a value `a`, if and only if `a` is a least upper bound for its range.
Mathlib had several variants of this fact previously (phrased in terms of, eg, `csupr`), but not quite this version (phrased in terms of `has_lub`).  This version has a couple of advantages:
- it applies to more general typeclasses (eg, `linear_order`) where the existence of suprema is not in general known
- it applies to algebraic typeclasses (`linear_ordered_add_comm_monoid`, etc) where, since completeness of orders is not a mix-in, it is not possible to simultaneously assume `(conditionally_)complete_linear_order`
The latter point makes these lemmas useful when dealing with `tsum`.  We get: a nonnegative function `f` satisfies `has_sum f a`, if and only if `a` is a least upper bound for its partial sums.

2021-06-18 13:40:11 7c9a811
feat(analysis/convex/basic): missing lemmas (#7946)
- the union of a set/indexed family of convex sets is convex
- `open_segment a b` is convex
- a set is nonempty iff its convex hull is

2021-06-18 01:58:07 e168bf7
chore(scripts): update nolints.txt (#7981)
I am happy to remove some nolints for you!

2021-06-17 17:11:00 49bf1fd
chore(order/iterate): fix up the namespace (#7977)

2021-06-17 17:10:59 dc73d1b
docs(data/*/sqrt): add one module docstring and expand the other (#7973)

2021-06-17 17:10:58 3824a43
docs(data/list/intervals): add module docstring (#7972)

2021-06-17 17:10:57 93d7812
docs(data/int/range): add module docstring (#7971)

2021-06-17 17:10:56 da1a32c
docs(data/int/cast): add module docstring (#7969)

2021-06-17 17:10:50 de6d739
docs(data/nat/dist): add module docstring (#7966)

2021-06-17 17:10:49 ce23f37
feat(topology/locally_constant): Adds a few useful constructions (#7954)
This PR adds a few useful constructions around locallly constant functions:
1. A locally constant function to `fin 2` associated to a clopen set.
2. Flipping a locally constant function taking values in a function type.
3. Unflipping a finite family of locally constant function.
4. Descending locally constant functions along an injective map.

2021-06-17 17:10:48 e9f9f3f
docs(data/nat/cast): add module docstring (#7947)

2021-06-17 17:10:47 9784396
refactor(order/preorder_hom): golf and simp lemmas (#7429)
The main change here is to adjust `simps` to generate coercion lemmas rather than `.to_fun` for `preorder_hom`, which allows us to auto-generate some simp lemmas.

2021-06-17 11:31:07 cbb8f01
feat(algebra/group/basic): prove `a / 1 = a` and remove `sub_zero` (#7956)
Add a proof that, in a group, `a / 1 = a`.  As a consequence, `sub_zero` is the `to_additive version of this lemma and I removed it.
The name of the lemma is `div_one'`, since the unprimed version is taken by `group_with_zero`.
Zulip:
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60div_one'.60

2021-06-17 11:31:06 6578f1c
feat(data/setoid/basic): add a computable version of quotient_ker_equiv_of_surjective (#7930)
Perhaps more usefully, this also allows definitional control of the inverse mapping

2021-06-17 08:31:45 1e43208
refactor(ring_theory): use `x ∈ non_zero_divisors` over `x : non_zero_divisors` (#7961)
`map_ne_zero_of_mem_non_zero_divisors` and `map_mem_non_zero_divisors` used to take `x : non_zero_divisors A` as an (implicit) argument. This is awkward if you only have `hx : x ∈ non_zero_divisors A`, requiring you to write out `@map_ne_zero_of_mem_non_zero_divisors _ _ _ _ _ _ hf ⟨x, hx⟩`. By making `x ∈ non_zero_divisors A` the explicit argument, we can avoid this annoyance.
See e.g. `ring_theory/polynomial/scale_roots.lean` for the improvement.

2021-06-17 02:48:11 1a6c871
chore(scripts): update nolints.txt (#7965)
I am happy to remove some nolints for you!

2021-06-17 00:23:25 dc5d0c1
feat(data/matrix): `has_repr` instances for `fin` vectors and matrices (#7953)
This PR provides `has_repr` instances for the types `fin n → α` and `matrix (fin m) (fin n) α`, displaying in the `![...]` matrix notation. This is especially useful if you want to `#eval` a calculation involving matrices.
[Based on this Zulip post.](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Matrix.20operations/near/242766110)

2021-06-17 00:23:24 641a9d3
feat(model_theory/basic): Substructures (#7762)
Defines substructures of first-order structures

2021-06-16 18:44:26 456a6d5
docs(data/option/basic): add module docstring (#7958)

2021-06-16 18:44:25 08dfaab
docs(data/set/disjointed): add module docstring and some whitespaces (#7957)

2021-06-16 18:44:24 49aa106
docs(data/*/nat_antidiagonal): add one module docstring and harmonise others (#7919)

2021-06-16 18:44:23 366a449
doc(topology/algebra/ring): add module docs + tidy (#7893)

2021-06-16 15:31:34 a564bf1
feat(data/list/cycle): cycles as quotients of lists (#7504)
Cycles are common structures, and we define them as a quotient of lists. This is on the route to defining concrete cyclic permutations, and could also be used for encoding properties of cycles in graphs.

2021-06-16 12:25:45 0490b43
refactor(geometry/manifold/instances/circle): split out (topological) group facts (#7951)
Move the group and topological group facts about the unit circle in `ℂ` from `geometry.manifold.instances.circle` to a new file `analysis.complex.circle`.  Delete `geometry.manifold.instances.circle`, moving the remaining material to a section in `geometry.manifold.instances.sphere`.

2021-06-16 09:58:27 95a116a
chore(measure_theory/lp_space): simplify tendsto_Lp_iff_tendsto_\McLp by using tendsto_iff_dist_tendsto_zero (#7942)

2021-06-16 06:02:08 690ab17
refactor(algebra/algebra/basic): replace `algebra.comap` with `restrict_scalars` (#7949)
The constructions `algebra.comap` and `restrict_scalars` are essentially the same thing -- a type synonym to allow one to switch to a smaller scalar field.  Previously `restrict_scalars` was for modules and `algebra.comap` for algebras; I am unifying them so that `restrict_scalars` works for both.
Declaration changes:
- `algebra.comap`, `algebra.comap.inhabited`, `is_scalar_tower.comap`
Use the pre-existing (for modules) `restrict_scalars`, `restrict_scalars.inhabited`, `restrict_scalars.is_scalar_tower`
- `algebra.comap.X` for `X` in `semiring`, `ring`, `comm_semiring`, `comm_ring`, `algebra`
Replaced with `restrict_scalars.X`
- `algebra.comap.algebra'`
Replaced with `restrict_scalars.algebra_orig` (to be consistent with `restrict_scalars.module_orig`)
- `algebra.comap.to_comap` and `algebra.comap.of_comap`
Combined into an `alg_equiv` and renamed `restrict_scalars.alg_equiv` (to be consistent with `restrict_scalars.linear_equiv`)
- `subalgebra.comap`
Replaced with a generalized version, `subalgebra.restrict_scalars`, which (to be consistent with `submodule.restrict_scalars`) applies to an `is_scalar_tower`, not just to the type synonym
Deleted altogether:
- `algebra.to_comap`, `algebra.to_comap_apply`
This construction is now 
`(algebra.of_id S (restrict_scalars R S A)).restrict_scalars R`
It was only used once in mathlib, where I have replaced it by its definition
- `alg_hom.comap`, `alg_equiv.comap`
These are not currently used in mathlib but if needed one can instead use `alg_hom.restrict_scalars` and `alg_equiv.restrict_scalars`
- `is_scalar_tower.algebra_comap_eq`
The proof is now `rfl` and it was never used in mathlib.
It would then be possible, in a follow-up PR, to rename `subalgebra.comap'` to `subalgebra.comap`, although I have no immediate plans to do this.

2021-06-16 04:52:02 b865892
feat(algebraic_geometry/Spec): Make Spec a functor. (#7790)

2021-06-16 02:11:41 ba3a4b7
chore(scripts): update nolints.txt (#7955)
I am happy to remove some nolints for you!

2021-06-15 23:35:55 30314c2
fix(measure_theory/interval_integral): generalize some lemmas (#7944)
The proofs of some lemmas about the integral of a function `f : ℝ → ℝ` also hold for `f : α → ℝ` (with `α` under the usual conditions).

2021-06-15 23:35:54 45619c7
feat(order/iterate): id_le lemmas (#7943)

2021-06-15 23:35:52 e5c97e1
feat(analysis/convex/basic): a linear map is convex and concave (#7934)

2021-06-15 19:56:41 f1f4c23
feat(analysis/convex/basic): convex_on lemmas (#7933)

2021-06-15 19:56:40 5d03dcd
feat(analysis/normed_space/dual): add eq_zero_of_forall_dual_eq_zero (#7929)
The variable `𝕜` is made explicit in `norm_le_dual_bound` because lean can otherwise not guess it in the proof of `eq_zero_of_forall_dual_eq_zero`.

2021-06-15 19:56:39 e5ff5fb
feat(data/finsupp/basic): equiv_congr_left (#7755)
As [requested on Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Group.20cohomology/near/240737546).

2021-06-15 14:54:47 2f1f34a
feat(measure_theory/lp_space): add `mem_Lp.mono_measure` (#7927)
also add monotonicity lemmas wrt the measure for `snorm'`, `snorm_ess_sup` and `snorm`.

2021-06-15 14:54:46 5f8cc8e
docs(undergrad): mark convex, convex hull, and extreme points as done (#7924)

2021-06-15 14:54:44 e4ceee6
feat(group_theory/order_of_element): Raising to a coprime power is a bijection (#7923)
If `gcd(|G|,k)=1` then the `k`th power map is a bijection

2021-06-15 14:54:41 f4991b9
feat(measure_theory/bochner_integration): properties of simple functions (mem_Lp, integrable, fin_meas_supp) (#7918)

2021-06-15 14:54:40 b19c491
chore(order/lattice): rename le_sup_left_of_le (#7856)
rename `le_sup_left_of_le` to `le_sup_of_le_left`, and variants

2021-06-15 14:54:39 8e28104
feat(algebra/algebra/basic): define `restrict_scalars.linear_equiv` (#7807)
Also updating some doc-strings.

2021-06-15 14:54:38 a16650c
feat(geometry/manifold/algebra/smooth_functions): add `coe_fn_(linear_map|ring_hom|alg_hom)` (#7749)
Changed names to be consistent with the topology library and proven that some coercions are morphisms.

2021-06-15 06:03:53 bf83c30
chore(algebra/{ordered_monoid_lemmas, ordered_monoid}): move two sections close together (#7921)
This PR aims at shortening the diff between `master` and PR #7645 of the order refactor.
I moved the `mono` section of `algebra/ordered_monoid_lemmas` to the end of the file and appended the `strict_mono` section of `algebra/ordered_monoid` after that.
Note: the hypotheses are not optimal, but, with the current `instances` in this version, I did not know how to improve this.  It will get better by the time PR #7645 is merged.  In fact, the next PR in the sequence, #7876, already removes the unnecessary assumptions.

2021-06-15 06:03:52 d74a898
fix(meta/expr): fix mreplace (#7912)
Previously the function would not recurse into macros (like `have`).
Also add warning to docstring.

2021-06-15 03:22:09 d960b2d
chore(scripts): update nolints.txt (#7939)
I am happy to remove some nolints for you!

2021-06-15 03:22:08 81f29f9
chore(topology/metric_space): cleanup Gromov-Hausdorff files (#7936)
Rename greek type variables to meaningful uppercase letters. Lint the files. Add a header where needed. Add spaces after forall or exist to conform to current style guide. Absolutely no new mathematical content.

2021-06-15 03:22:07 a83f2c2
feat(group_theory/order_of_element): Power of subset is subgroup (#7915)
If `S` is a nonempty subset of `G`, then `S ^ |G|` is a subgroup of `G`.

2021-06-15 03:22:06 ba25bb8
feat(measure_theory): define `measure.trim`, restriction of a measure to a sub-sigma algebra (#7906)
It is common to see a measure `μ` on a measurable space structure `m0` as being also a measure on any `m ≤ m0`. Since measures in mathlib have to be trimmed to the measurable space, `μ` itself is not a measure on `m`. For `hm : m ≤ m0`, we define the measure `μ.trim hm` on `m`.
We add lemmas relating a measure and its trimmed version, mostly about integrals of `m`-measurable functions.

2021-06-14 21:50:17 8377a1f
feat(measure_theory/lp_space): add snorm_le_snorm_mul_rpow_measure_univ (#7926)
There were already versions of this lemma for `snorm'` and `snorm_ess_sup`. The new lemma collates these into a statement about `snorm`.

2021-06-14 21:50:16 e041dbe
chore(algebra/covariant_and_contravariant): fix typos in module doc-strings (#7925)
This PR changes slightly the doc-strings to make the autogenerated documentation more consistent.  I also removed some unstylish double spaces.

2021-06-14 21:50:15 4a8ce41
feat(analysis/special_functions/trigonometric): facts about periodic trigonometric functions  (#7841)
I use the periodicity API that I added in #7572 to write lemmas about sine (real and complex), cosine (real and complex), tangent (real and complex), and the  exponential function (complex only).

2021-06-14 21:50:14 fed7cf0
fix(tactic/induction): fix multiple cases'/induction' bugs (#7717)
* Fix generalisation in the presence of frozen local instances.
  Any time we revert a potentially frozen hypothesis, we now unfreeze local
  hypotheses during the operation. This makes sure that generalisation works
  uniformly whether or not any local instances are frozen.
* Treat local defs as fixed during auto-generalisation
  induction' gets confused if we generalise over local definitions since they
  turn into lets when reverted. Ideally, we would handle local defs
  transparently, but that would require a lot of new code. So instead, we at
  least stop auto-generalisation from generalising them (and their
  dependencies).
* Handle infinitely branching types
  induction' and cases' previously did not acknowledge the existence of
  infinitely branching types at all, leading to various internal errors.
New test cases for all these bugs, due to Patrick Massot, were added to the test
suite.

2021-06-14 21:50:13 f781c47
feat(linear_algebra/determinant): specialize `linear_equiv.is_unit_det` to automorphisms (#7667)
`linear_equiv.is_unit_det` is defined for all equivs between equal-dimensional spaces, using `det (linear_map.to_matrix _ _ _)`, but I needed this result for `linear_map.det _` (which only exists between the exact same space). So I added the specialization `linear_equiv.is_unit_det'`.

2021-06-14 21:50:12 615af75
feat(measure_theory/interval_integral): `integral_deriv_comp_mul_deriv` (#7141)
`∫ x in a..b, (g ∘ f) x * f' x`, where `f'` is derivative of `f` and `g` is the derivative of some function (the latter qualification allowing us to compute the integral directly by FTC-2)

2021-06-14 12:40:22 386962c
feat(algebra/char_zero): `neg_eq_self_iff` (#7916)
`-a = a ↔ a = 0` and `a = -a ↔ a = 0`.

2021-06-14 07:23:15 461b444
docs(data/rat/denumerable): add module docstring (#7920)

2021-06-14 07:23:14 a853a6a
feat(analysis/normed_space): nnreal.coe_nat_abs (#7911)
from LTE

2021-06-14 06:07:37 6aed9a7
feat(analysis/convex): add dual cone (#7738)
Add definition of the dual cone of a set in a real inner product space

2021-06-14 03:56:10 fec6c8a
chore(scripts): update nolints.txt (#7922)
I am happy to remove some nolints for you!

2021-06-13 22:32:12 3004513
feat(measure_theory/ess_sup): monotonicity of ess_sup/ess_inf w.r.t. the measure (#7917)

2021-06-13 22:32:11 4fe7781
chore(algebra/lie/basic + classical): golf some proofs (#7903)
Another PR with some golfing, to get acquainted with the files!  Oliver, I really like how you set this up!
Also, feel free to say that you do not like the golfing: there is a subtle tension between proving stuff fast and making it accessible!

2021-06-13 22:32:10 b324488
docs(set_theory/schroeder_bernstein): add module docstring (#7900)

2021-06-13 22:32:09 e971eae
docs(data/nat/totient): add module docstring (#7899)

2021-06-13 22:32:08 a359bd9
chore(measure_theory): measurability statements for coercions, coherent naming (#7854)
Also add a few lemmas on measure theory

2021-06-13 17:23:56 5c11458
chore(analysis/normed_space/normed_group_hom): golf proof of normed_group_hom.bounded (#7896)

2021-06-13 17:23:55 2f40f35
feat(measure_theory): continuity of primitives (#7864)
From the sphere eversion project
This proves some continuity of interval integrals with respect to parameters and continuity of primitives of measurable functions. The statements are a bit abstract, but they allow to have:
```lean
example {f : ℝ → E} (h_int : integrable f) (a : ℝ) :  
  continuous (λ b, ∫ x in a .. b, f x ∂ volume) :=
h_int.continuous_primitive a
```
under the usual assumptions on `E`: `normed_group E`, `second_countable_topology E`,  `normed_space ℝ E`
`complete_space E`, `measurable_space E`, `borel_space E`, say `E = ℝ` for instance. Of course global integrability is not needed, assuming integrability on all finite length intervals is enough:
```lean
example {f : ℝ → E} (h_int : ∀ a b : ℝ, interval_integrable f volume a b) (a : ℝ) :  
  continuous (λ b, ∫ x in a .. b, f x ∂ volume) :=
continuous_primitive h_int a
```

2021-06-13 11:45:04 6d2a051
feat(algebra/covariant_and_contravariant): API for covariant_and_contravariant (#7889)
This PR introduces more API for `covariant` and `contravariant` stuff .
Besides the API, I have not actually made further use of the typeclasses or of the API.  This happens in subsequent PRs.
This is a step towards PR #7645.

2021-06-13 06:04:53 7c9643d
chore(scripts): update nolints.txt (#7914)
I am happy to remove some nolints for you!

2021-06-13 06:04:52 e13fd48
docs(data/nat/pairing): add module docstring (#7897)

2021-06-13 06:04:51 2c919b0
chore(algebra/{ordered_group, linear_ordered_comm_group_with_zero.lean}): rename one lemma, remove more @s (#7895)
The more substantial part of this PR is changing the name of a lemma from `div_lt_div_iff'` to `mul_inv_lt_mul_inv_iff'`: the lemma proves `a * b⁻¹ ≤ c * d⁻¹ ↔ a * d ≤ c * b`.
Furthermore, in the same spirit as a couple of my recent short PRs, I am removing a few more `@`, in order to sweep under the rug, later on, a change in typeclass assumptions.  This PR only changes a name, which was used only once, and a few proofs, but no statement.
On the path towards PR #7645.

2021-06-13 06:04:50 add577d
feat(group_theory/group_action/defs): add `has_mul.to_has_scalar` and relax typeclass in `smul_mul_smul` (#7885)

2021-06-12 23:46:04 e0a3303
chore(category_theory/filtered): Adds missing instances (#7909)

2021-06-12 23:46:03 9ad8ea3
chore(linear_algebra/quadratic_form): fix typo (#7907)

2021-06-12 23:46:02 7b7cd0a
fix(tactic/lint): punctuation of messages (#7869)
Previously, the linter framework would append punctuation (`.` or `:`) to the message provided by the linter, but this was confusing and lead to some double punctuation. Now all linters specify their own punctuation.

2021-06-12 23:46:01 39073fa
feat(algebra/pointwise): Dynamics of powers of a subset (#7836)
If `S` is a subset of a group `G`, then the powers of `S` eventually stabilize in size.

2021-06-12 15:55:02 ee4fe74
feat(topology/category/Profinite/cofiltered_clopen): Theorem about clopen sets in cofiltered limits of profinite sets (#7837)
This PR proves the theorem that any clopen set in a cofiltered limit of profinite sets arises from a clopen set in one of the factors of the limit.
This generalizes a theorem used in LTE.

2021-06-12 15:55:00 06094d5
feat(linear_algebra/free_module): add class module.free (#7801)
We introduce here a new class `module.free`.

2021-06-12 15:54:59 f9935ed
feat(geometry/manifold): Some lemmas for smooth functions (#7752)

2021-06-12 11:10:11 b7d4996
chore(ring_theory/adjoin_root): speedup (#7905)
Speedup a lemma that has just timed out in bors, by removing a heavy `change`.

2021-06-12 11:10:10 15b2434
chore(data/nat/sqrt): Alternative phrasings of data.nat.sqrt lemmas (#7748)
Add versions of the `data.nat.sqrt` lemmas to talk about `n^2` where the current versions talk about `n * n`.

2021-06-12 11:10:09 841dce1
feat(data/polynomial): generalize `polynomial.has_scalar` to require only `distrib_mul_action` instead of `semimodule` (#7664)
Note that by generalizing this instance, we introduce a diamond with `polynomial.mul_semiring_action`, which has a definitionally different `smul`. To resolve this, we add a proof that the definitions are equivalent, and switch `polynomial.mul_semiring_action` to use the same implementation as `polynomial.has_scalar`. This allows us to generalize `smul_C` to apply to all types of action, and remove `coeff_smul'` which then duplicates the statement of `coeff_smul`.

2021-06-12 08:06:06 2016a93
feat(linear_algebra): use `finset`s to define `det` and `trace` (#7778)
This PR replaces `∃ (s : set M) (b : basis s R M), s.finite` with `∃ (s : finset M), nonempty (basis s R M)` in the definitions in `linear_map.det` and `linear_map.trace`. This should make it much easier to unfold those definitions without having to modify the instance cache or supply implicit params.
In particular, it should help a lot with #7667.

2021-06-12 08:06:04 dabb41f
feat(tactic/{induction,fresh_names}): improve `induction' with` (#7726)
This commit introduces two improvements to the `with` clauses of the `cases'`
and `induction'` tactics:
- Users can now write a hyphen instead of a name in the `with` clause. This
  clears the corresponding hypothesis (and any hypotheses depending on it).
- When users give an explicit name in the `with` clause, that name is now used
  verbatim, even if it shadows an existing hypothesis.

2021-06-12 02:38:03 55c9662
chore(scripts): update nolints.txt (#7902)
I am happy to remove some nolints for you!

2021-06-12 02:38:02 2974a9f
feat(ring_theory): every division_ring is_noetherian (#7661)

2021-06-12 02:38:01 5948cde
feat(ring_theory): the field trace resp. norm is the sum resp. product of the conjugates (#7640)
More precise statement of the main result: the field trace (resp. norm) of `x` in `K(x) / K`, mapped to a field `F` that contains all the conjugate roots over `K` of `x`, is equal to the sum (resp. product) of all of these conjugate roots.

2021-06-12 02:38:00 4337918
feat(analysis/special_functions/integrals): integral of `sin x ^ m * cos x ^ n` (#7418)
The simplification of integrals of the form `∫ x in a..b, sin x ^ m * cos x ^ n` where (i) `n` is odd, (ii) `m` is odd, and (iii) `m` and `n` are both even.
The computation of the integrals of the following functions are then provided outright:
- `sin x * cos x`, given both in terms of sine and cosine
- `sin x ^ 2 * cos x ^ 2`
- `sin x ^ 2 * cos x` and `sin x * cos x ^ 2`
- `sin x ^ 3` and `cos x ^ 3`

2021-06-12 02:37:59 2d175ae
feat(topology/category/Top/limits): Kőnig's lemma for fintypes (#6288)
Specializes `Top.nonempty_limit_cone_of_compact_t2_inverse_system` to an inverse system of nonempty fintypes.

2021-06-11 21:18:49 b360611
chore(src/algebra/lie/abelian): golf (#7898)
I golfed some of the proofs of the file `algebra/lie/abelian`.  My main motivation was to get familiar with the file.

2021-06-11 21:18:48 dd60035
chore(algebra/{covariant_and_contravariant + ordered_monoid_lemmas}): new file covariant_and_contravariant (#7890)
This PR creates a new file `algebra/covariant_and_contravariant` and moves the part of `algebra/ordered_monoid_lemmas` dealing exclusively with `covariant` and `contravariant` into it.
It also rearranges the documentation, with a view to the later PRs, building up to #7645.
The discrepancy between the added and removed lines is entirely due to longer documentation: no actual Lean code has changed, except, of course, for the `import` in `algebra/ordered_monoid_lemmas` that now uses `covariant_and_contravariant`.

2021-06-11 21:18:47 538f015
feat(data/finset/basic): `empty_product` and `product_empty` (#7886)
add `product_empty_<left/right>`

2021-06-11 21:18:46 97a7a24
doc(data/pequiv): add module docs (#7877)

2021-06-11 21:18:45 ff44ed5
feat({algebra/group_action_hom, data/equiv/mul_add}): add missing `inverse` defs (#7847)

2021-06-11 21:18:44 a008b33
feat(data/finsupp/to_dfinsupp): add sigma_finsupp_lequiv_dfinsupp (#7818)
Equivalences between `(Σ i, η i) →₀ N` and `Π₀ i, (η i →₀ N)`.
- [x] depends on: #7819

2021-06-11 21:18:43 64d453e
feat(ring_theory/adjoin/basic): add subalgebra.fg_prod (#7811)
We add `subalgebra.fg_prod`: the product of two finitely generated subalgebras is finitely generated.
A mathematical remark: the result is not difficult, but one needs to be careful. For example, `algebra.adjoin_eq_prod` is false without adding `(1,0)` and `(0,1)` by hand to the set of generators. Moreover, `linear_map.inl` and `linear_map.inr` are not ring homomorphisms, so it seems difficult to mimic the proof for modules. A better mathematical proof is to take surjections from two polynomial rings (in finitely many variables) and considering the tensor product of these polynomial rings, that is again a polynomial ring in finitely many variables, and build a surjection to the product of the subalgebras (using the universal property of the tensor product). The problem with this approach is that one needs to know that the tensor product of polynomial rings is again a polynomial ring, and I don't know well enough the API fort the tensor product to prove this.

2021-06-11 21:18:42 61a04c5
feat(algebraic_geometry/structure_sheaf): Define comap on structure sheaf (#7788)
Defines the comap of a ring homomorphism on the structure sheaves of the prime spectra.

2021-06-11 21:18:40 eb9bd55
feat(linear_algebra/quadratic_form): Real version of Sylvester's law of inertia (#7427)
We prove that every nondegenerate real quadratic form is equivalent to a weighted sum of squares with the weights being ±1.

2021-06-11 13:26:19 e8add82
chore(algebra/{ordered_monoid,linear_ordered_comm_group_with_zero}): remove some uses of @ (#7884)
This PR replaces a couple of uses of `@` with slightly more verbose proofs that only use the given explicit arguments.
The `by apply mul_lt_mul''' hab0 hcd0` line also works with `mul_lt_mul''' hab0 hcd0` alone (at least on my machine).  The reason for the slightly more elaborate proof is that once the typeclass assumptions will change, the direct term-mode proof will break, while the `by apply` version is more stable.
Besides its aesthetic value, this is useful in PR #7645, as the typeclass arguments of the involved lemmas will change and this will keep the diff (slightly) shorter.

2021-06-11 13:26:18 9500d95
feat(number_theory/l_series): The L-series of an arithmetic function (#7862)
Defines the L-series of an arithmetic function
Proves a few basic facts about convergence of L-series

2021-06-11 13:26:17 e35438b
feat(analysis): Cauchy sequence and series lemmas (#7858)
from LTE. Mostly relaxing assumptions from metric to
pseudo-metric and proving some obvious lemmas.
eventually_constant_prod and eventually_constant_sum are duplicated by hand because `to_additive` gets confused by the appearance of `1`.
In `norm_le_zero_iff' {G : Type*} [semi_normed_group G] [separated_space G]` and the following two lemmas the type classes assumptions look silly, but those lemmas are indeed useful in some specific situation in LTE.

2021-06-11 13:26:16 a421185
feat(algebra/periodic): more periodicity lemmas (#7853)

2021-06-11 13:26:15 9228ff9
feat(algebra/ordered_group): abs_sub (#7850)
- rename `abs_sub` to `abs_sub_comm`
- prove `abs_sub`

2021-06-11 13:26:14 4bfe8e8
feat(algebra/order_functions): lt_max_of_lt_<left/right> (#7849)

2021-06-11 13:26:12 915a0a2
feat(topology/algebra/ordered/basic): add a few subseq-related lemmas (#7828)
These are lemmas I proved while working on #7164. Some of them are actually not used anymore in that PR because I'm refactoring it, but I thought they would be useful anyway, so here there are.

2021-06-11 12:07:55 51cd821
chore(algebra/lie/classical): speed up slow proof (#7894)
Squeeze a simp in a proof that has just timed out on bors

2021-06-11 02:16:14 6eb3d97
chore(scripts): update nolints.txt (#7887)
I am happy to remove some nolints for you!

2021-06-11 02:16:13 6f6dbad
feat(set_theory/cardinal): missing lemma (#7880)

2021-06-11 02:16:12 e8aa984
doc(int/modeq): add module doc and tidy (#7878)

2021-06-11 02:16:11 1b0e5ee
chore(data/real/nnreal): avoid abusing inequalities in nnreals (#7872)
I removed the use of `@`, so that all implicit arguments stay implicit.
The main motivation is to reduce the diff in the bigger PR #7645: by only having the explicit arguments, the same proof works, without having to fiddle around with underscores.

2021-06-11 02:16:10 d570596
feat(logic/function/basic): a lemma on symmetric operations and flip (#7871)
This lemma is used to show that if multiplication is commutative, then `flip`ping the arguments returns the same function.
This is used in PR #7645 .

2021-06-11 02:16:09 9a4881d
chore(data/real/pi, analysis/special_functions/trigonometric.lean): speed up/simplify proofs (#7868)
These are mostly cosmetic changes, simplifying a couple of proofs.  I tried to remove the calls to `linarith` or `norm_num`, when the alternatives were either single lemmas or faster than automation.
The main motivation is to reduce the diff in the bigger PR #7645.

2021-06-11 02:16:08 f157a37
chore(logic/basic): fixup `eq_or_ne` (#7865)

2021-06-11 02:16:07 0a80efb
chore(analysis/normed_space/normed_group_hom): remove bound_by (#7860)
`bound_by f C` is the same as `∥f∥ ≤ C` and it is therefore useless now that we have `∥f∥`.

2021-06-10 16:03:39 0f8e79e
feat(algebra/big_operators/finsupp): relax assumptions `semiring` to `non_unital_non_assoc_semiring` (#7874)

2021-06-10 16:03:38 3b5a44b
chore(src/testing/slim_check/sampleable): simply add explicit namespace `nat.` (#7873)
This PR only introduces the explicit namespace `nat.` when calling `le_div_iff_mul_le`.  The reason for doing this is that PR #7645 introduces a lemma `le_div_iff_mul_le` in the root namespace and this one then becomes ambiguous.  Note that CI *does build* on this branch even without the explicit namespace.  The change would only become necessary once/if PR #7645 gets merged.
I isolated this change to a separate PR to reduce the diff of #7645 and also to bring attention to this issue, in case someone has some comment about it.

2021-06-10 16:03:37 2e8ef55
feat(algebra/floor): nat_floor (#7855)
introduce `nat_floor`
Related Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/nat_floor

2021-06-10 16:03:36 021c859
feat(analysis/special_functions/pow): rpow-log inequalities (#7848)
Inequalities relating rpow and log

2021-06-10 16:03:35 49f5a15
feat(algebra/ordered_ring): more granular typeclasses for `with_top α` and `with_bot α` (#7845)
`with_top α` and `with_bot α` now inherit the following typeclasses from `α` with suitable assumptions:
* `mul_zero_one_class`
* `semigroup_with_zero`
* `monoid_with_zero`
* `comm_monoid_with_zero`
These were all split out of the existing `canonically_ordered_comm_semiring`, with their proofs unchanged.
The same instances are added for `with_bot`.
It is not possible to split further, as `distrib'` requires `add_eq_zero_iff`, and `canonically_ordered_comm_semiring` is the smallest typeclass that provides both this lemma and `mul_zero_class`.
With these instances in place, we can now show `comm_monoid_with_zero ereal`.

2021-06-10 23:57:20+10:00 079b8a1
Revert "feat(set_theory/cofinality): more infinite pigeonhole principles"
This reverts commit c7ba50f41813718472478983370db66b06c2d33e.

2021-06-10 23:56:13+10:00 c7ba50f
feat(set_theory/cofinality): more infinite pigeonhole principles

2021-06-10 06:56:02 f7e93d9
chore(algebra/linear_ordered_comm_group_with_zero.lean): extend calc proofs (#7870)
These are mostly cosmetic changes, simplifying a couple of calc proofs.
The main motivation is to reduce the diff in the bigger PR #7645.

2021-06-10 06:56:01 05b7b0b
chore(scripts): update nolints.txt (#7867)
I am happy to remove some nolints for you!

2021-06-10 06:56:00 4da899c
chore(number_theory/{fermat4, sum_four_squares, zsqrtd/basic}): simplify/rearrange proofs (#7866)
These are mostly cosmetic changes, simplifying a couple of proofs.  I would have tagged it `easy`, but since there are three files changed, it may take just over 20'' to review!
The main motivation is to reduce the diff in the bigger PR #7645.

2021-06-10 01:51:29 2fc66c9
feat(algebra/group_with_zero): add units.can_lift (#7857)
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/projective.20space/near/242041169)

2021-06-10 01:51:28 0a34878
chore(topology/algebra/continuous_functions): making names consistent with the smooth library (#7844)

2021-06-10 01:51:26 06200c8
feat(ring_theory/ideal): generalize to noncommutative rings (#7654)
This is a minimalist generalization of existing material on ideals to the setting of noncommutative rings.
I have not attempted to decide how things should be named in the long run. For now `ideal` specifically means a left-ideal (i.e. I didn't change the definition). We can either in future add `two_sided_ideal` (or `biideal` or `ideal₂` or ...), or potentially rename `ideal` to `left_ideal` or `lideal`, etc. Future bikeshedding opportunities!
In this PR I've just left definitions alone, and relaxed `comm_ring` hypotheses to `ring` as far as I could see possible. No new theorems or mathematics, just rearranging to get things in the right order.
(As a side note, both `ring_theory.ideal.basic` and `ring_theory.ideal.operations` should be split into smaller files; I can try this after this PR.)

2021-06-09 20:42:50 3870896
doc(data/semiquot): reformat module doc properly, and add missing doc strings (#7773)

2021-06-09 20:42:48 abe25e9
docs(data/mllist): fix module doc, and add all doc strings (#7772)

2021-06-09 20:42:47 d9b91f3
feat(measure_theory/tactic): add measurability tactic (#7756)
Add a measurability tactic defined in the file `measure_theory/tactic.lean`, which is heavily inspired from the continuity tactic. It proves goals of the form `measurable f`, `ae_measurable f µ` and `measurable_set s`. Some tests are provided in `tests/measurability.lean` and the tactic was used to replace a few lines in `integration.lean` and `mean_inequalities.lean`.

2021-06-09 15:40:05 8e25717
chore(geometry/euclidean/circumcenter): remove two `have`s in a proof (#7852)
Zulip:
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/circumcenter

2021-06-09 15:40:04 d0ed2a4
chore(measure_theory/set_integral): put the definition of integrable_on into a new file (#7842)
The file `measure_theory.set_integral` is split into two: the `integrable_on` predicate is put into its own file, which does not import  `measure_theory.bochner_integration` (this puts the definition of that integrability property before the definition of the actual integral). The file `measure_theory.set_integral` retains all facts about `set_integral`.

2021-06-09 15:40:02 764e878
feat(algebra/ordered_group): `-abs a ≤ a` (#7839)

2021-06-09 15:40:01 a9d4f3d
fix(*): make some non-instances reducible (#7835)
* Definitions that involve in instances might need to be reducible, see added library note. 
* This involves the definitions `*order.lift` / `function.injective.*` and `function.surjective.*` 
* This came up in #7645.

2021-06-09 15:40:00 20efef7
chore(algebra/field_power, data/set/intervals/basic): simpler proofs in the first file, fewer parentheses in the second one (#7831)
This is mostly a cosmetic PR: I removed two calls to `linarith`, where a term-mode proof was very simple.
I also removed some unnecessary parentheses in a different file.

2021-06-09 15:39:59 02d5370
chore(measure_theory/outer_measure): add extend_eq_top (#7827)

2021-06-09 15:39:58 fa7c6da
docs(order/bounded_lattice): add module docstring (#7799)
add module docstring and some sectioning

2021-06-09 10:12:47 55abf1a
chore(scripts): update nolints.txt (#7851)
I am happy to remove some nolints for you!

2021-06-09 10:12:46 8676685
feat(ring_theory): every left-noetherian ring satisfies the strong rank condition (#7711)
This PR also discards the proof that every left-noetherian ring satisfies the rank condition, because we already have in #7683 that this implies that.

2021-06-09 10:12:45 47ad680
feat(measure_theory/interval_integral): integration by substitution / change of variables (#7273)
Given that `f` has a derivative at `f'` everywhere on `interval a b`,
`∫ x in a..b, (g ∘ f) x * f' x = ∫ x in f a..f b, g x`.
Co-authored by @ADedecker

2021-06-09 06:11:41 faa58e5
refactor(algebra/module/projective) make is_projective a class (#7830)
Make `is_projective` a class.

2021-06-09 06:11:39 c210d0f
feat(topology/category/limits): Topological bases in cofiltered limits (#7820)
This PR proves a theorem which provides a simple characterization of certain topological bases in a cofiltered limit of topological spaces.
Eventually I will specialize this assertion to the case where the topological spaces are profinite, and the `T i` are the topological bases given by clopen sets.
This generalizes a lemma from LTE.

2021-06-09 06:11:38 34c433d
feat(data/finsupp): generalize finsupp.has_scalar to require only distrib_mul_action instead of semimodule (#7819)
This propagates the generalization to (add_)monoid_algebra and mv_polynomial.

2021-06-09 06:11:37 393f638
feat(ring_theory/localization): Make local_ring_hom more flexible (#7787)
Make `localization.local_ring_hom` more flexible, by allowing two ideals `I` and `J` as arguments, with the assumption that `I` equals `ideal.comap f J`. Also add lemmas about identity and composition.

2021-06-08 19:13:24 5c6d3bc
feat(topology/instances/ereal): more on ereal, notably its topology (#7765)

2021-06-08 19:13:23 75c81de
feat(measure_theory/integration): a measurable function is a series of simple functions (#7764)

2021-06-08 19:13:22 39406bb
feat(model_theory/basic): First-order languages, structures, homomorphisms, embeddings, and equivs (#7754)
Defines the following notions from first-order logic:
- languages
- structures
- homomorphisms
- embeddings
- equivalences (isomorphisms)
The definitions of languages and structures take inspiration from the Flypitch project.

2021-06-08 06:35:33 42c4237
chore(mv_polynomial/equiv): speed up elaboration by adjusting priorities (#7840)
`option_equiv_left` timed out several times in bors, since the introduction of non-unital rings. We fix this by adjusting the priority to make sure that the problematic instance is found right away.
Also speed up circumcenter file (which also just timed out in bors) by squeezing simps.

2021-06-07 15:40:25 320da57
chore(data/fintype/basic): add fintype instance for `is_empty` (#7692)

2021-06-07 15:40:24 6e67536
feat(category/limits): kernel.map (#7623)
A generalization of a lemma from LTE, stated for a category with (co)kernels.

2021-06-07 15:40:23 fb72599
feat(algebra/periodic): define periodicity (#7572)
This PR introduces a general notion of periodicity. It also includes proofs of the "usual" properties of periodic (and antiperiodic) functions.

2021-06-07 15:40:22 e55d470
feat(specific_groups/alternating_group): The alternating group on 5 elements is simple (#7502)
Shows that `is_simple_group (alternating_group (fin 5))`

2021-06-07 15:40:20 fa7b5f2
feat(linear_algebra/quadratic_form): Complex version of Sylvester's law of inertia (#7416)
Every nondegenerate complex quadratic form is equivalent to a quadratic form corresponding to the sum of squares.

2021-06-07 15:40:19 ef7aa94
feat(algebra/ring/basic): define non-unital, non-associative rings (#6786)
This introduces the following typeclasses beneath `semiring`:
  * `non_unital_non_assoc_semiring`
  * `non_unital_semiring`
  * `non_assoc_semiring`
The goal is to use these to support a non-unital, non-associative
algebras.
The typeclass requirements of `subring`, `subsemiring`, and `ring_hom` are relaxed from `semiring` to `non_assoc_semiring`.
Instances of these new typeclasses are added for:
* alias types:
  * `opposite`
  * `ulift`
* convolutive types:
  * `(add_)monoid_algebra`
  * `direct_sum`
  * `set_semiring`
  * `hahn_series`
* elementwise types: 
  * `locally_constant`
  * `pi`
  * `prod`
  * `finsupp`

2021-06-07 15:40:18 1eb3ae4
feat(order/symm_diff): symmetric difference operator (#6469)

2021-06-07 07:44:02 136e0d6
feat(data/fintype/basic): The cardinality of a set is at most the cardinality of the universe (#7823)
I think that the hypothesis `[fintype ↥s]` can be avoided with the use of classical logic. E.g.,
`noncomputable instance set_fintype' {α : Type*} [fintype α] (s : set α) : fintype s :=by { classical, exact set_fintype s }`
Would it make sense to add this?

2021-06-07 07:44:01 4f38062
feat(algebra/lie/base_change): define extension and restriction of scalars for Lie algebras (#7808)

2021-06-07 07:44:00 f57f9c8
feat(ring_theory): define the field/algebra norm (#7636)
This PR defines the field norm `algebra.norm K L : L →* K`, where `L` is a finite field extension of `K`. In fact, it defines this for any `algebra R S` instance, where `R` and `S` are integral domains. (With a default value of `1` if `S` does not have a finite `R`-basis.)
The approach is to basically copy `ring_theory/trace.lean` and replace `trace` with `det` or `norm` as appropriate.

2021-06-07 04:52:49 61ca31a
chore(scripts): update nolints.txt (#7829)
I am happy to remove some nolints for you!

2021-06-07 04:52:49 7a21ae1
chore(algebra/algebra/subalgebra): make inf and top definitionally convenient (#7812)
This adjusts the galois insertion such that `lemma coe_inf (S T : subalgebra R A) : (↑(S ⊓ T) : set A) = S ∩ T := rfl`.
It also adds lots of trivial `simp` lemmas that were missing about the interactions of various coercions and lattice operations.

2021-06-07 01:12:38 685289c
feat(algebra/pointwise): pow_mem_pow (#7822)
If `a ∈ s` then `a ^ n ∈ s ^ n`.

2021-06-07 01:12:37 29d0c63
feat(measure_theory): add a few integration-related lemmas (#7821)
These are lemmas I proved while working on #7164. Some of them are actually not used anymore in that PR because I'm refactoring it, but I thought they would be useful anyway, so here there are.

2021-06-07 01:12:36 ef7c335
fix(data/mv_polynomial): add missing decidable arguments (#7817)
This:
* fixes a doubled instance name, `finsupp.finsupp.decidable_eq`. Note the linter deliberate ignores instances, as they are often autogenerated
* generalizes `finsupp.decidable_le` to all canonically_ordered_monoids
* adds missing `decidable_eq` arguments to `mv_polynomial` and `mv_power_series` lemmas whose statement contains an `if`. These might in future be lintable.
* adds some missing lemmas about `mv_polynomial` to clean up a few proofs.

2021-06-07 01:12:35 90ae36e
docs(order/order_iso_nat): add module docstring (#7804)
add module docstring

2021-06-06 19:30:18 4c8a627
docs(order/directed): add module docstring (#7779)
add module docstring

2021-06-06 03:28:07 e3f897c
feat(algebra/char_p): characteristic of fraction_ring (#7703)
Adding the characteristics of a `fraction_ring` for an integral domain.

2021-06-06 03:28:06 ba2c056
feat(data/list/nodup): nodup.pairwise_of_forall_ne (#7587)

2021-06-05 09:09:15 7021ff9
feat(linear_algebra/basis): use is_empty instead of ¬nonempty (#7815)
This removes the need for `basis.of_dim_eq_zero'` and `basis_of_finrank_zero'`, as these special cases are now covered by the unprimed versions and typeclass search.

2021-06-04 19:29:36 a4ae4ad
chore(order/(bounded,modular)_lattice): avoid classical.some in `is_complemented` instances (#7814)
There's no reason to use it here.

2021-06-04 19:29:35 8b5ff9c
feat(analysis/special_functions/integrals): `integral_log` (#7732)
The integral of the (real) logarithmic function over the interval `[a, b]`, provided that `0 ∉ interval a b`.

2021-06-04 16:08:36 0b09858
feat(linear_algebra/basic): add a unique instance for linear_equiv (#7816)

2021-06-04 13:25:42 65e3b04
feat(linear_algebra/determinant): various `basis.det` lemmas (#7669)
A selection of results that I needed for computing the value of `basis.det`.

2021-06-04 09:53:02 1a62bb4
feat(linear_algebra): strong rank condition implies rank condition (#7683)

2021-06-04 03:56:15 be183e2
chore(data/finset|multiset|finsupp): reduce algebra/ imports (#7797)

2021-06-03 23:23:09 89928bc
feat(topology): A locally compact Hausdorff space is totally disconnected if and only if it is totally separated (#7649)
We prove that a locally compact Hausdorff space is totally disconnected if and only if it is totally separated.

2021-06-03 16:15:32 685adb0
fix(tactic/lint): allow pattern def (#7785)
`Prop` sorted declarations are allowed to be `def` if they have the `@[pattern]` attribute

2021-06-03 16:15:31 fa51468
feat(tactic/lift): elaborate proof with the expected type (#7739)
* also slightly refactor the corresponding function a bit
* add some tests
* move all tests to `tests/lift.lean`

2021-06-03 16:15:30 05f7e8d
feat(linear_algebra/tensor_product): define `tensor_tensor_tensor_comm` (#7724)
The intended application is defining the bracket structure when extending the scalars of a Lie algebra.

2021-06-03 11:07:26 62655a2
chore(data/dfinsupp): add the simp lemma coe_pre_mk (#7806)

2021-06-03 11:07:25 2a93644
chore(src/linear_algebra/free_module): rename file to free_module_pid (#7805)
In preparation for #7801

2021-06-03 11:07:24 fc6f967
chore(ring_theory/hahn_series): emb_domain_add needs only add_monoid, not semiring (#7802)
This is my fault, the lemma ended up in the wrong place in #7737

2021-06-03 11:07:23 54d8b94
chore(logic/basic): add simp lemmas about exist_unique to match those about exists (#7784)
Adds:
* `exists_unique_const` to match `exists_const` (provable by simp)
* `exists_unique_prop` to match `exists_prop` (provable by simp)
* `exists_unique_prop_of_true` to match `exists_prop_of_true`

2021-06-03 11:07:21 ef13938
feat(ring_theory/tensor_product): the base change of a linear map along an algebra (#4773)

2021-06-03 07:38:39 b806fd4
chore(scripts): update nolints.txt (#7810)
I am happy to remove some nolints for you!

2021-06-03 07:38:38 36decf5
chore(topology/bases): Rename + unprotect some lemmas (#7809)
@PatrickMassot Unfortunately I saw your comments after #7753 was already merged, so here is a followup PR with the changes you requested. I also unprotected and renamed `is_topological_basis_pi` and `is_topological_basis_infi` since dot notation will also not work for those.

2021-06-03 07:38:37 8422d8c
chore(data/padics): move padics to number_theory/ (#7771)
Per [zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/move.20p-adics).

2021-06-03 07:38:36 adae1ad
feat(order/filter/archimedean): in an archimedean linear ordered ring, `at_top` and `at_bot` are countably generated (#7751)

2021-06-03 07:38:35 6d85ff2
refactor(linear_algebra/finsupp): replace mem_span_iff_total (#7735)
This PR renames the existing `mem_span_iff_total` to `mem_span_image_iff_total` and the existing `span_eq_map_total` to `span_image_eq_map_total`, and replaces them with slightly simpler lemmas about sets in the module, rather than indexed families.
As usual in the linear algebra library, there is tension between using sets and using indexed families, but as `span` is defined in terms of sets I think the new lemmas merit taking the simpler names.

2021-06-03 07:38:33 6d90d35
feat(analysis/fourier): monomials on the circle are orthonormal (#6952)
Make the circle into a measure space, using Haar measure, and prove that the monomials `z ^ n` are orthonormal when considered as elements of L^2 on the circle.

2021-06-03 04:58:21 4b31247
chore(data/*/gcd): move data/*set/gcd to algebra/gcd_monoid/ (#7800)
See discussion of migrating content from `data/` to `algebra/` at [https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/move.20p-adics](zulip).

2021-06-03 04:58:20 e591543
chore(data/zsqrtd): move to number_theory/ (#7796)
See discussion of migrating content from `data/` to `algebra/` at [https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/move.20p-adics](zulip).

2021-06-03 04:58:19 ce3ca59
chore(data/fincard): move to set_theory/ (#7795)
This is about cardinals, so probably belongs in `set_theory/` not `data/`. (It's also a leaf node for now, so easy to move.)

2021-06-02 23:53:40 d5a635b
chore(data/hash_map): remove duplicate imports (#7794)

2021-06-02 23:53:39 a36560c
chore(data/quaternion): move to algebra/ (#7793)
See discussion of migrating content from `data/` to `algebra/` at [https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/move.20p-adics](zulip).

2021-06-02 23:53:38 7e3e883
chore(data/equiv): add docstrings (#7704)
- add module docstrings
- add def docstrings
- rename `decode2` to `decode₂`
- squash some simps

2021-06-02 23:53:37 29d0a4e
feat(tactic/lint): add linter that type-checks statements  (#7694)
* Add linter that type-checks the statements of all declarations with the default reducibility settings. A statement might not type-check if locally a declaration was made not `@[irreducible]` while globally it is.
* Fix an issue where  `with_one.monoid.to_mul_one_class` did not unify with `with_one.mul_one_class`.
* Fix some proofs in `category_theory.opposites` so that they work while keeping `quiver.opposite` irreducible.

2021-06-02 18:23:20 6e5899d
feat(measure_theory/integration): add a version of the monotone convergence theorem using `tendsto` (#7791)

2021-06-02 18:23:19 82bc3ca
chore(logic/small): reduce imports (#7777)
By delaying the `fintype` and `encodable` instances for `small`, I think we can now avoid importing `algebra` at all into `logic`.
~~Since some of the `is_empty` lemmas haven't been used yet,~~ I took the liberty of making some arguments explicit, as one was painful to use as is.

2021-06-02 18:23:18 47dbdac
chore(data/support): move data/(support|indicator_function) to algebra/ (#7774)
These don't define any new structures, have not much to do with programming, and are just about basic features of algebraic gadgets, so belong better in `algebra/` than `data/`. 
See discussion of migrating content from `data/` to `algebra/` at [https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/move.20p-adics](zulip).

2021-06-02 13:27:48 173bc4c
feat(algebra/algebra/subalgebra): add subalgebra.prod (#7782)
We add a basic API for product of subalgebras.

2021-06-02 10:33:05 b231c92
doc(data/finsupp/pointwise): update old module doc (#7770)

2021-06-02 10:33:04 b91cdb9
refactor(data/nnreal): rename nnreal.of_real to real.to_nnreal (#7750)
I am in the middle of a project involving reals, nnreals, ennreals and ereals. There is a maze of coercions and maps between the 4 of them, with completely incoherent naming scheme (do you think that `measurable.nnreal_coe` is speaking of the coercion from `nnreal` to `real` or to `ennreal`, or of a coercion into `nnreal`? currently, it's for the coercion from `nnreal` to `real`, and the analogous lemma for the coercion from `nnreal` to `ennreal` is called `measurable.ennreal_coe`!). I'd like to normalize all this to have something coherent:
* maps are defined from a type to another one, to be able to use dot notation.
* when there are coercions, all lemmas should be formulated in terms of the coercion, and not of the explicit map
* when there is an ambiguity, lemmas on coercions should mention both the source and the target (like in `measurable.coe_nnreal_real`, say). 
The PR is one first step in this direction, renaming `nnreal.of_real` to `real.to_nnreal` (which makes it possible to use dot notation).

2021-06-02 04:57:08 832aff8
chore(scripts): update nolints.txt (#7798)
I am happy to remove some nolints for you!

2021-06-02 04:57:06 cdf6cf0
feat(topology/sheaves/stalks): Small lemmas about stalk pushforward and stalk map (#7789)
`Top.presheaf.stalk_pushforward` and `PresheafedSpace.stalk_map` commute with `Top.presheaf.germ`.

2021-06-02 04:57:05 2164107
refactor(algebraic_geometry/structure_sheaf): Rename Spec.Top to prime_spectrum.Top (#7786)
Renames `Spec.Top` to `prime_specturm.Top` to free up the namespace for the Spec functor.

2021-06-02 04:57:04 2fd0ff4
chore(order/omega_complete_partial_order): clean up references (#7781)
fix the references rendering by adding them to the .bib

2021-06-02 04:57:03 5a42f80
chore(logic/embedding): move some algebra content (#7776)
This moves a lemma about multiplication by an element in a left/right cancellative semigroup being an embedding out of `logic.embedding`. I didn't find a great home for it, but put it with some content about regular elements, which is at least talking about similar mathematics.
This removes the only direct import from the `logic/` directory to the `algebra/` directory. There are still indirect imports from `logic.small`, which currently brings in `fintype` and hence the whole algebra hierarchy. I'll look at that separately.

2021-06-02 04:57:02 6c912de
feat(topology/bases): Topological basis of a product. (#7753)
Given a family of topological spaces `X_i` with topological bases `T_i`, this constructs the associated basis of the product topology. 
This also includes a construction of the tautological topological basis consisting of all open sets.
This generalizes a lemma from LTE.

2021-06-02 04:57:00 4884ea5
feat(order/[conditionally_]complete_lattice): add more intro lemmas for [c][Sup, Inf] and [c][supr, infi] (#7730)

2021-06-02 04:56:59 6b2c7a7
feat(data/finset/noncomm_prod): finset products over monoid (#7567)
The regular `finset.prod` and `multiset.prod` require `[comm_monoid α]`.
Often, there are collections `s : finset α` where `[monoid α]` and we know,
in a dependent fashion, that for all the terms `∀ (x ∈ s) (y ∈ s), commute x y`.
This allows to still have a well-defined product over `s`.

2021-06-01 23:18:36 681b9c2
feat(ring_theory/adjoin/basic): add missing lemmas (#7780)
Two missing lemmas about `adjoin`.
These are the `subalgebra` versions of `submodule.span_eq_of_le` and `submodule.span_eq`.

2021-06-01 23:18:35 76f41e7
chore(data/nat): split out data/nat/pow (#7758)
Split lemmas about the power operation on natural numbers into its own file; slightly reduces imports.

2021-06-01 23:18:35 2689c51
feat(category_theory/abelian): abelian categories with enough projectives have projective resolutions (#7488)

2021-06-01 20:17:20 4e7c6b2
chore(algebra/associated): weaken some typeclass assumptions (#7760)
Also golf ne_zero_iff_of_associated a little.

2021-06-01 15:40:08 8527efd
feat(topology/connected): prod.totally_disconnected_space (#7747)
From LTE.

2021-06-01 15:40:07 abe146f
feat(linear_map): to_*_linear_map_injective (#7746)
From LTE.

2021-06-01 12:28:58 88685b0
feat(linear_algebra/tensor_product): Add is_scalar_tower instances (#6741)
If either the left- or right-hand type of a tensor product forms a scalar tower, then the tensor product forms the same tower.

2021-06-01 05:20:12 31ba155
feat(algebraic_topology/cech_nerve): The Cech nerve is a right adjoint. (#7716)
Also fixes the namespace in the file `algebraic_topology/cech_nerve.lean`.
This is needed for LTE

2021-06-01 03:25:51 272a930
chore(scripts): update nolints.txt (#7775)
I am happy to remove some nolints for you!

2021-06-01 01:52:24 4c2bfde
chore(order/pilex): add docstring (#7769)
- add module docstring
- extend `ordered_add_comm_group (pilex ι β)` using `to_additive`

2021-06-01 01:52:23 a8f5cc1
feat(algebra/homology): i-th component of a chain map as a →+ (#7743)
From LTE.

2021-05-31 21:08:06 bec3e59
feat(data/finset): provide the coercion `finset α → Type*` (#7575)
There doesn't seem to be a good reason that `finset` doesn't have a `coe_to_sort` like `set` does. Before the change in this PR, we had to suffer the inconvenience of writing `(↑s : set _)` whenever we want the subtype of all elements of `s`. Now you can just write `s`.
I removed the obvious instances of the `((↑s : set _) : Type*)` pattern, although it definitely remains in some places. I'd rather do those in separate PRs since it does not really do any harm except for being annoying to type. There are also some parts of the API (`polynomial.root_set` stands out to me) that could be designed around the use of `finset`s rather than `set`s that are later proved to be finite, which I again would like to declare out of scope.

2021-05-31 21:08:05 ca740b6
feat(data/finset/powerset): ssubsets and decidability (#7543)
A few more little additions to finset-world that I found useful.

2021-05-31 17:20:15 d272343
chore(order/lexicographic): add module docstring (#7768)
add module docstring

2021-05-31 17:20:14 033a131
chore(order/zorn): add module docstring (#7767)
add module docstring, tidy up notation a bit

2021-05-31 15:49:23 d0ebc8e
feat(ring_theory/laurent_series): Defines Laurent series and their localization map (#7604)
Defines `laurent_series` as an abbreviation of `hahn_series Z`
Defines `laurent_series.power_series_part`
Shows that the map from power series to Laurent series is a `localization_map`.

2021-05-31 14:35:07 4555798
feat(topology/semicontinuous): semicontinuity of compositions (#7763)

2021-05-31 13:18:14 2af6912
feat(linear_algebra): the determinant of an endomorphism (#7635)
 `linear_map.det` is the determinant of an endomorphism, which is defined independent of a basis. If there is no finite basis, the determinant is defined to be equal to `1`.
This approach is inspired by `linear_map.trace`.

2021-05-31 13:18:13 7fe456d
feat(algebra/homology): projective resolutions (#7486)
# Projective resolutions
A projective resolution `P : ProjectiveResolution Z` of an object `Z : C` consists of
a `ℕ`-indexed chain complex `P.complex` of projective objects,
along with a chain map `P.π` from `C` to the chain complex consisting just of `Z` in degree zero,
so that the augmented chain complex is exact.
When `C` is abelian, this exactness condition is equivalent to `π` being a quasi-isomorphism.
It turns out that this formulation allows us to set up the basic theory derived functors
without even assuming `C` is abelian.
(Typically, however, to show `has_projective_resolutions C`
one will assume `enough_projectives C` and `abelian C`.
This construction appears in `category_theory.abelian.projectives`.)
We show that give `P : ProjectiveResolution X` and `Q : ProjectiveResolution Y`,
any morphism `X ⟶ Y` admits a lift to a chain map `P.complex ⟶ Q.complex`.
(It is a lift in the sense that
the projection maps `P.π` and `Q.π` intertwine the lift and the original morphism.)
Moreover, we show that any two such lifts are homotopic.
As a consequence, if every object admits a projective resolution,
we can construct a functor `projective_resolutions C : C ⥤ homotopy_category C`.

2021-05-31 06:45:22 1a92c0d
feat(order/basic): add simp attribute on le_refl, zero_le_one and zero_lt_one (#7733)
These ones show up so often that they would have deserved a simp attribute long ago.

2021-05-30 21:09:58 fd48ac5
chore(data/list): extract sublists to a separate file (#7757)
Minor splitting in `data/list/basic`, splitting out `sublists` to its own file, thereby delaying importing `data.nat.choose` in the `list` development.

2021-05-30 21:09:57 14b597c
feat(analysis/normed_space): ∥n • a∥ ≤ n * ∥a∥ (#7745)
From LTE.

2021-05-30 19:15:46 0d842f0
fix(order/closure): unincorporated reviewer comments from #7446 (#7761)

2021-05-30 15:26:33 33d803a
refactor(convex/basic): make convex_hull into a closure operator (#7446)
Bundle convex_hull as a closure operator, simplify duplicate proofs

2021-05-30 09:54:50 25e36be
chore(data/fintype/basic): `fintype α/β` from `fintype α ⊕ β` (#7736)
Also renaming the equivalent `α × β` versions, for consistency.

2021-05-30 09:54:50 4ea253b
feat(measure_theory/integration): in a sigma finite space, there exists an integrable positive function (#7721)

2021-05-30 08:29:40 8e25bb6
feat(algebra/homology): complexes in functor categories (#7744)
From LTE.

2021-05-30 08:29:39 f4d145e
feat(algebra/homology): construct isomorphisms of complexes (#7741)
From LTE.

2021-05-30 08:29:38 08bb112
chore(ring_theory/hahn_series): extract lemmas from slow definitions (#7737)
This doesn't make them much faster, but it makes it easier to tell which bits are slow

2021-05-30 04:33:33 e2168e5
feat(src/ring_theory/derivation): merge duplicates `derivation.comp` and `linear_map.comp_der` (#7727)
I propose keeping the version introduced in #7715 since it also contains
the statement that the push forward is linear, but moving it to the `linear_map`
namespace to enable dot notation.
Thanks to @Nicknamen for alerting me to the duplication: https://github.com/leanprover-community/mathlib/pull/7715#issuecomment-849192370

2021-05-30 04:33:32 9d63c38
feat(topology/continuous_function/algebra): add `coe_fn_(linear_map|ring_hom|alg_hom)` (#7720)

2021-05-30 01:16:52 a3ba4d4
feat(algebra/homology): eval and forget functors (#7742)
From LTE.

2021-05-29 18:15:17 035aa60
feat(analysis/normed_space): SemiNormedGroup.has_zero_object (#7740)
From LTE.

2021-05-29 02:32:43 1ac49b0
chore(category_theory): dualize filtered categories to cofiltered categories (#7731)
Per request on [zulip](https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/240548989).
I have not attempted to dualize "filtered colimits commute with finite limits", as I've never heard of that being used.

2021-05-28 19:12:47 f74a375
chore(linear_algebra/finsupp): remove useless lemma (#7734)
The lemma is not used in mathlib, it's mathematically useless (you'd never have a surjective function from an indexing set to a module), and it's badly named, so I propose removing it entirely.

2021-05-28 15:21:27 13746fe
feat(group_theory/subgroup linear_algebra/prod): add ker_prod_map (#7729)
The kernel of the product of two `group_hom` is the product of the kernels (and similarly for monoids).

2021-05-28 11:55:01 5fff3b1
feat(ring_theory/mv_polynomial/basic): add polynomial.basis_monomials (#7728)
We add `polynomial.basis_monomials` : the monomials form a basis on `polynomial R`.
Because of the structure of the import, it seems to me a little complicated to do it directly, so I use `mv_polynomial.punit_alg_equiv`

2021-05-27 09:01:17 5360e47
feat(algebra/module/linear_map): `linear_(map|equiv).restrict_scalars` is injective (#7725)
So as not to repeat them for the lemmas, I moved the typeclasses into a `variables` statement.

2021-05-27 05:47:47 6109558
chore(category_theory/*): provide aliases quiver.hom.le and has_le.le.hom (#7677)

2021-05-27 00:46:29 a85fbda
feat(algebra/opposites): add units.op_equiv (#7723)

2021-05-27 00:46:28 20291d0
feat(topology/semicontinuous): basics on lower and upper semicontinuous functions (#7693)
We mimick the interface for continuity, by introducing predicates `lower_semicontinuous_within_at`, `lower_semicontinuous_at`, `lower_semicontinuous_on` and `lower_semicontinuous` (and similarly for upper semicontinuity).

2021-05-26 21:50:17 0970fda
feat(measure_theory/regular): more material on regular measures (#7680)
This PR:
* defines weakly regular measures
* shows that for weakly regular measures any finite measure set can be approximated from inside by closed sets
* shows that for regular measures any finite measure set can be approximated from inside by compact sets
* shows that any finite measure on a metric space is weakly regular
* shows that any locally finite measure on a sigma compact locally compact metric space is regular

2021-05-26 21:50:16 a2e8b3c
feat(special_functions/polynomials): Generalize some polynomial asymptotics to iff statements. (#7545)

2021-05-26 19:17:45 fd43ce0
feat(linear_algebra/matrix): generalize `basis.to_matrix_mul_to_matrix` (#7670)
Now the second family of vectors does not have to form a basis.

2021-05-26 13:34:28 fa27c0c
feat(ring_theory/derivation): define push forward of derivations (#7715)

2021-05-26 13:34:27 b059708
feat(data/nnreal): filling out some lemmas (#7710)
From LTE.

2021-05-26 13:34:26 273546e
feat(group_theory/sub{group,monoid,semiring,ring}): subobjects inherit the actions of their carrier type (#7665)
This acts as a generalization of `algebra.of_subsemiring` and `algebra.of_subring`, and transfers the weaker action structures too.

2021-05-26 13:34:25 66ec15c
feat(analysis/complex/isometry): add linear_isometry_complex (#6923)
add proof about the isometries in the complex plane

2021-05-26 08:25:18 a741f64
docs(*): spelling (#7719)

2021-05-26 08:25:17 58c57ca
fix(linear_algebra/tensor_product): relax from module to distrib_mul_action (#7709)
This was an accident in #7516 where the wrong variable was used. `R'` is the base of a distrib_mul_action, `R''`, is the base of a module.

2021-05-26 08:25:16 71dcb64
feat(order/conditionally_complete_lattice): add lemmas (#7689)
These lemmas names match the version that already exist without the `c` prefix.
This also renames `finset.sup_eq_Sup` to `finset.sup_id_eq_Sup`, and introduces a new `finset.sup_eq_Sup_image`.

2021-05-26 08:25:15 00394b7
feat(tactic/simps): implement prefix names (#7596)
* You can now write `initialize_simps_projections equiv (to_fun → coe as_prefix)` to add the projection name as a prefix to the simp lemmas: if you then write `@[simps coe] def foo ...` you get a lemma named `coe_foo`.
* Remove the `short_name` option from `simps_cfg`. This was unused and not that useful. 
* Refactor some tuples used in the functions into structures.
* Implements one item of #5489.

2021-05-26 06:48:35 1f566bc
chore(scripts): update nolints.txt (#7718)
I am happy to remove some nolints for you!

2021-05-26 06:48:34 f7f0a30
feat(scripts/lint-style.py): add linter that disables importing omega (#7646)
* Files in mathlib are not allowed to `import tactic` or `import tactic.omega`. This adds a style linter to enforce this.
* `tactic.default` is allowed to import `tactic.omega` (other files that only import other files are excluded from these checks, so a malicious user still could get around this linter, but it's hard to imagine this happening accidentally)
* Remove `import tactic` from 3 files (in `archive/` and `test/`)

2021-05-26 00:55:46 fd1c8e7
feat(data/list/forall2): add two lemmas about forall₂ and reverse (#7714)
rel_reverse shows that forall₂ is preserved across reversed lists,
forall₂_iff_reverse uses rel_reverse to show that it is preserved in
both directions.

2021-05-25 23:21:27 360ca9c
feat(analysis/special_functions/integrals): `interval_integrable_log` (#7713)

2021-05-25 23:21:26 f1425b6
feat(measure_theory/interval_integral): `integral_comp_add_left` (#7712)

2021-05-25 19:48:36 82e78ce
feat(algebra/big_operators/finprod): add lemma `finprod_mem_finset_of_product` (#7439)

2021-05-25 17:19:09 8078eca
feat(linear_algebra): `det (M ⬝ N ⬝ M') = det N`, where `M'` is an inverse of `M` (#7633)
This is an important step towards showing the determinant of `linear_map.to_matrix` does not depend on the choice of basis.
    
The main difficulty is allowing the two indexing types of `M` to be (a priori) different. They are in bijection though (using `basis.index_equiv` from #7631), so using `reindex_linear_equiv` we can turn everything into square matrices and apply the "usual" proof.

2021-05-25 15:58:58 c17c738
feat(logic/girard): move file to counterexamples (#7706)
Since the file feels like a counterexample, I suggest putting it in that folder.

2021-05-25 15:58:57 a617d0a
feat(algebra/category/Module): R-mod has enough projectives (#7113)
Another piece of @TwoFX's `projective` branch, lightly edited.

2021-05-25 11:18:58 bbf6150
feat(measure_theory/measurable_space): add instances for subtypes (#7702)

2021-05-25 11:18:57 75e07d1
feat(linear_algebra/matrix/determinant): lemmas about commutativity under det (#7685)

2021-05-25 11:18:56 4abbe10
feat(group_theory/group_action/units): group actions on and by units (#7438)
This removes all the lemmas about `(u : α) • x` and `(↑u⁻¹ : α) • x` in favor of granting `units α` its very own `has_scalar` structure, along with providing the stronger variants to make it usable elsewhere.
This means that downstream code need only reason about `[group G] [mul_action G M]` instead of needing to handle groups and `units` separately.
The (multiplicative versions of the) removed and moved lemmas are:
* `units.inv_smul_smul` &rarr; `inv_smul_smul`
* `units.smul_inv_smul` &rarr; `smul_inv_smul`
* `units.smul_perm_hom`, `mul_action.to_perm` &rarr; `mul_action.to_perm_hom`
* `units.smul_perm` &rarr; `mul_action.to_perm`
* `units.smul_left_cancel` &rarr; `smul_left_cancel`
* `units.smul_eq_iff_eq_inv_smul` &rarr; `smul_eq_iff_eq_inv_smul`
* `units.smul_eq_zero` &rarr; `smul_eq_zero_iff_eq` (to avoid clashing with `smul_eq_zero`)
* `units.smul_ne_zero` &rarr; `smul_ne_zero_iff_ne`
* `homeomorph.smul_of_unit` &rarr; `homeomorph.smul` (the latter already existed, and the former was a special case)
* `units.measurable_const_smul_iff` &rarr; `measurable_const_smul_iff`
* `units.ae_measurable_const_smul_iff` &rarr; `ae_measurable_const_smul_iff`
The new lemmas are:
* `smul_eq_zero_iff_eq'`, a `group_with_zero` version of `smul_eq_zero_iff_eq`
* `smul_ne_zero_iff_ne'`, a `group_with_zero` version of `smul_ne_zero_iff_ne`
* `units.neg_smul`, a version of `neg_smul` for units. We don't currently have typeclasses about `neg` on objects without `+`.
We also end up needing some new typeclass instances downstream
* `units.measurable_space`
* `units.has_measurable_smul`
* `units.has_continuous_smul`
This goes on to remove lots of coercions from `alternating_map`, `matrix.det`, and some lie algebra stuff.
This makes the theorem statement cleaner, but occasionally requires rewriting through `units.smul_def` to add or remove the coercion.

2021-05-25 05:41:54 d81fcda
feat(algebra/group_with_zero): add some equational lemmas (#7705)
Add some equations for `group_with_zero` that are direct analogues of lemmas for `group`.
Useful for #6923.

2021-05-25 00:46:31 a880ea4
feat(ring_theory/coprime): add some lemmas (#7650)

2021-05-25 00:46:30 c3dcb7d
feat(category_theory/limits): comma category colimit construction (#7535)
As well as the duals. Also adds some autoparams for consistency with `has_limit` and some missing instances which are basically just versions of existing things

2021-05-24 19:29:16 17f3b80
feat(100-theorems-list/16_abel_ruffini): some simplifications (#7699)

2021-05-24 19:29:15 51526ae
chore(topology): rename mem_nhds_sets and mem_of_nhds and mem_nhds_sets_iff (#7690)
Rename `mem_nhds_sets` to `is_open.mem_nhds`, and `mem_nhds_sets_iff` to `mem_nhds_iff`, and `mem_of_nhds` to `mem_of_mem_nhds`.

2021-05-24 14:07:33 91a547e
feat(algebra/opposites): `(un)op_ne_zero_iff` (#7698)

2021-05-24 14:07:32 a09ddc7
feat(measure_theory/interval_integral): `interval_integrable.mono` (#7679)
`interval_integrable f ν a b → interval c d ⊆ interval a b → μ ≤ ν → interval_integrable f μ c d`

2021-05-24 11:01:13 0b51a72
feat(linear_algebra/determinant): specialize `is_basis.iff_det` (#7668)
After the bundled basis refactor, applying `is_basis.iff_det` in the forward direction is slightly more involved (since defining the `iff` requires an unbundled basis), so I added a lemma that does the necessary translation between "unbundled basis" and "bundled basis" for you.

2021-05-24 11:01:12 8ff2783
feat(counterexamples/cyclotomic_105): add coeff_cyclotomic_105 (#7648)
We show that `coeff (cyclotomic 105 ℤ) 7 = -2`, proving that not all coefficients of cyclotomic polynomials are `0`, `-1` or `1`.

2021-05-24 05:13:08 16733c8
chore(data/nat/basic): move unique {units/add_units} instances (#7701)

2021-05-23 23:25:01 2734d91
fix(data/nat/factorial): fix factorial_zero (#7697)

2021-05-23 16:33:37 6cffc9f
chore(logic/unique): a true prop is unique (#7688)
I found myself needing to construct this instance by hand somewhere; since we already need it to construct `unique true`, we may as well make a def.

2021-05-23 13:50:13 57cd5ef
refactor(*): remove some uses of omega in the library (#7700)

2021-05-22 21:53:35 97a5276
doc(number_theory/bernoulli): write statements in math mode (#7696)
* It took me some work to see the difference between the two statements, so I added the statements in math mode.
* Change name `sum_range_pow'` -> `sum_Ico_pow`

2021-05-22 16:17:14 fb95362
fix(algebra/homology): imports (#7655)

2021-05-22 12:15:37 0e216ce
feat(order): if s is finite then Sup s ∈ s (#7682)

2021-05-22 12:15:36 418dc04
feat(100-theorems-list/16_abel_ruffini): The Abel-Ruffini Theorem (#7562)
It's done!

2021-05-22 06:50:13 b29d40c
fix(algebra): change local transparency to semireducible (#7687)
* When a type is `[irreducible]` it should locally be made `[semireducible]` and (almost) never `[reducible]`. 
* If it is made `[reducible]`, type-class inference will unfold this definition, and will apply instances that would not type-check when the definition is `[irreducible]`

2021-05-21 21:35:13 f8530d5
feat(ring_theory/ideal/operations): `ideal.span_singleton_pow` (#7660)

2021-05-21 16:38:59 f70e160
chore(order/conditionally_complete_lattice): golf proofs with `order_dual` (#7684)
Even in the places where this doesn't result in a shorter proof, it makes it obvious that the `inf` lemmas have a matching `sup` lemma.

2021-05-21 11:28:01 233eff0
feat(data/fintype/card_embedding): the birthday problem (#7363)

2021-05-21 00:33:53 1924742
feat(data/set/basic): allow dot notation for trans and antisymm (#7681)
Allow to write
```lean
example {α : Type*} {a b c : set α} (h : a ⊆ b)  (h': b ⊆ c) : a ⊆ c :=
h.trans h'
example {α : Type*} {a b : set α} (h : a ⊆ b)  (h': b ⊆ a) : 
  a = b := h.antisymm h'
example {α : Type*} {a b c : finset α} (h : a ⊆ b)  (h': b ⊆ c) : a ⊆ c :=
h.trans h'
example {α : Type*} {a b : finset α} (h : a ⊆ b)  (h': b ⊆ a) : a = b :=
h.antisymm h'
```

2021-05-21 00:33:52 53e2307
feat(ring_theory): every left-noetherian ring has invariant basis number (#7678)
This is a lovely case where we get more for less.
By directly proving that every left-noetherian ring has invariant basis number, we don't need to import `linear_algebra.finite_dimensional` in order to do the `field` case. This means that in a future PR we can instead import `ring_theory.invariant_basis_number` in `linear_algebra.finite_dimensional`, and set up the theory of bases in greater generality.

2021-05-21 00:33:51 c63c6d1
feat(order/closure): make closure operators implementable (#7608)
introduce `lower_adjoint` as a way to talk about closure operators whose input and output types do not match

2021-05-20 19:10:37 32b433d
refactor(*): remove some uses of omega in the library (#7620)
In #6129, we stopped using `omega` to avoid porting it to lean4.
Some new uses were added since then.

2021-05-20 15:24:52 d47a6e3
feat(topology): clopens form a topology basis for profinite sets (#7671)
from LTE

2021-05-20 13:34:18 d3ec77c
feat(category_theory/limits): reflecting limits of isomorphic diagram (#7674)

2021-05-20 08:06:42 c5951f3
feat(ring_theory/noetherian): a surjective endomorphism of a noetherian module is injective (#7676)

2021-05-20 08:06:41 ff51159
feat(algebra/homology/*): add hypotheses to the d_comp_d' axiom (#7673)

2021-05-20 08:06:40 2d414d0
feat(algebra/homology/homological_complex): add condition to hom.comm' (#7666)

2021-05-20 08:06:39 0cb7ecc
fix(category_theory/limits/shapes/zero): use fully qualified names in locale (#7619)

2021-05-20 02:00:39 5a67f2c
chore(topology): rename compact to is_compact in theorem names (#7672)
Some time ago, we switched from `compact` to `is_compact`, for coherence with `is_open`, `is_closed` and so on. However, several lemma names were not changed at the time. This PR fixes some of them. Plus a few minor stuff (notably, introduce `le_self_add` to replace the dozen of uses of `le_add_right (le_refl _)` in the library -- and weaken some `metric` assumptions to `pseudo_metric`, without touching the proofs).

2021-05-20 02:00:37 1016a14
refactor(linear_algebra/finite_dimensional): generalize finite_dimensional.iff_fg to division rings (#7644)
Replace `finite_dimensional.iff_fg` (working over a field) with `is_noetherian.iff_fg` (working over a division ring). Also, use the `module.finite` predicate.

2021-05-20 02:00:36 641cece
feat(algebra/homology): the homotopy category (#7484)

2021-05-19 19:28:27 116c162
feat(algebra/opposites): `opposite` of a `group_with_zero` (#7662)
Co-authored by @eric-wieser

2021-05-19 15:49:00 ed4161c
feat(data/polynomial/coeff): generalize polynomial.coeff_smul to match mv_polynomial.coeff_smul (#7663)
Notably this means these lemmas cover `nat` and `int` actions.

2021-05-19 15:48:58 599712f
feat(data/int/parity, data/nat/parity): add some lemmas (#7624)

2021-05-19 12:41:13 697c8dd
refactor(topology/basic): use dot notation in `is_open.union` and friends (#7647)
The fact that the union of two open sets is open is called `is_open_union`. We rename it to `is_open.union` to enable dot notation. Same with `is_open_inter`, `is_closed_union` and `is_closed_inter` and `is_clopen_union` and `is_clopen_inter` and `is_clopen_diff`.

2021-05-19 09:57:34 c7a5197
feat(data/polynomial/degree/definitions): `polynomial.degree_C_mul_X_le` (#7659)

2021-05-19 09:57:33 040ebea
fix(analysis/normed_space/normed_group_quotient): put lemmas inside namespace  (#7653)

2021-05-19 08:44:51 c1e9f94
docs(field_theory/polynomial_galois_group): improve existing docs (#7586)

2021-05-19 02:36:44 1d4990e
chore(scripts): update nolints.txt (#7658)
I am happy to remove some nolints for you!

2021-05-19 02:36:43 918dcc0
chore(algebra/homology): further dualization (#7657)

2021-05-19 02:36:42 aee918b
feat(algebraic_topology/simplicial_object): Some API for converting between simplicial and cosimplicial (#7656)
This adds some code which is helpful to convert back and forth between simplicial and cosimplicial object.
For augmented objects, this doesn't follow directly from the existing API in `category_theory/opposite`.

2021-05-19 01:16:47 24d2713
feat(algebraic_topology/simplicial_object): Whiskering of simplicial objects. (#7651)
This adds whiskering constructions for (truncated, augmented) (co)simplicial objects.

2021-05-18 22:27:07 0bcfff9
feat(linear_algebra/basis) remove several [nontrivial R] (#7642)
We remove some unnecessary `nontrivial R`.

2021-05-18 16:02:45 a51d1e0
feat(algebra/homology/homological_complex): Dualizes some constructions (#7643)
This PR adds `cochain_complex.of` and `cochain_complex.of_hom`. 
Still not done: `cochain_complex.mk`.

2021-05-18 16:02:44 e275604
chore(data/set/basic): add `set.compl_eq_compl` (#7641)

2021-05-18 10:47:24 c2114d4
refactor(linear_algebra/dimension): generalize definition of `module.rank` (#7634)
The main change is to generalize the definition of `module.rank`. It used to be the infimum over cardinalities of bases, and is now the supremum over cardinalities of linearly independent sets.
I have not attempted to systematically generalize  theorems about the rank; there is lots more work to be done. For now I've just made a few easy generalizations (either replacing `field` with `division_ring`, or `division_ring` with `ring`+`nontrivial`).

2021-05-18 10:47:23 e6c787f
feat(algebra/opposites): add `has_scalar (opposite α) α` instances (#7630)
The action is defined as:
```lean
lemma op_smul_eq_mul [monoid α] {a a' : α} : op a • a' = a' * a := rfl
```
We have a few of places in the library where we prove things about `r • b`, and then extract a proof of `a * b = a • b` for free. However, we have no way to do this for `b * a` right now unless multiplication is commutative.
By adding this action, we have `b * a = op a • b` so in many cases could reuse the smul lemma.
This instance does not create a diamond:
```lean
-- the two paths to `mul_action (opposite α) (opposite α)` are defeq
example [monoid α] : monoid.to_mul_action (opposite α) = opposite.mul_action α (opposite α) := rfl
```
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Right.20multiplication.20as.20a.20mul_action/near/239012917)

2021-05-18 04:50:02 1a2781a
feat(analysis/normed_space): the category of seminormed groups (#7617)
From LTE, along with adding `SemiNormedGroup₁`, the subcategory of norm non-increasing maps.

2021-05-18 04:50:01 3694945
feat(logic/is_empty): Add is_empty typeclass (#7606)
* Refactor some equivalences that use `empty` or `pempty`.
* Replace `α → false` with `is_empty α` in various places (but not everywhere, we can do that in follow-up PRs).
* `infinite` is proven equivalent to `is_empty (fintype α)`. The old `not_fintype` is renamed to `fintype.false` (to allow projection notation), and there are two useful variants `infinite.false` and `not_fintype` added with different arguments explicit.
* add instance `unique true`.
* Changed the type of `fin_one_equiv` from `fin 1 ≃ punit` to `fin 1 ≃ unit` (it was used only once, where the former formulation required giving an explicit universe level).
* renamings:
`equiv.subsingleton_iff` -> `equiv.subsingleton_congr`
`finprod_of_empty` -> `finprod_of_is_empty`

2021-05-18 04:49:59 1b864c0
feat(analysis/normed_group): quotients (#7603)
From LTE.

2021-05-18 02:58:27 f900513
feat(linear_algebra/matrix): slightly generalize `smul_left_mul_matrix` (#7632)
Two minor changes that make `smul_left_mul_matrix` slightly easier to apply:
 * the bases `b` and `c` can now be indexed by different types
 * replace `(i, k)` on the LHS with `ik.1 ik.2` on the RHS (so you don't have to introduce the constructor with `rw ← prod.mk.eta` somewhere deep in your expression)

2021-05-17 23:05:07 b8a6995
feat(data/polynomial): the `d-1`th coefficient of `polynomial.map` (#7639)
We prove `polynomial.next_coeff_map` just like `polynomial.leading_coeff_map'`.

2021-05-17 23:05:06 ccf5188
feat(ring_theory/power_basis): the dimension of a power basis is positive (#7638)
We already have `pb.dim_ne_zero : pb.dim ≠ 0` (assuming nontriviality), but it's also useful to also have it in the form `0 < pb.dim`.

2021-05-17 18:10:36 4ab0e35
feat(data/multiset): the product of inverses is the inverse of the product (#7637)
Entirely analogous to `prod_map_mul` defined above.

2021-05-17 12:38:51 818dffa
feat(linear_algebra): a finite free module has a unique findim (#7631)
I needed this easy corollary, so I PR'd it, even though it should be generalizable once we have a better theory of e.g. Gaussian elimination. (I also tried to generalize `mk_eq_mk_of_basis`, but the current proof really requires the existence of multiplicative inverses for the coefficients.)

2021-05-17 12:38:50 36e0127
feat(linear_algebra/basic): add_monoid_hom_lequiv_int (#7629)
From LTE.

2021-05-17 12:38:49 d201a18
refactor(algebra/homology/homotopy): avoid needing has_zero_object (#7621)
A refactor of the definition of `homotopy`, so we don't need `has_zero_object`.

2021-05-17 12:38:49 07fb3d7
refactor(data/finsupp/antidiagonal): Make antidiagonal a finset (#7595)
Pursuant to discussion [here](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/antidiagonals.20having.20multiplicity) 
Refactoring so that `finsupp.antidiagonal` and `multiset.antidiagonal` are finsets.
~~Still TO DO: `multiset.antidiagonal`~~

2021-05-17 08:05:30 8394e59
feat(data/finset/basic): perm_of_nodup_nodup_to_finset_eq (#7588)
Also `finset.exists_list_nodup_eq`.

2021-05-17 06:01:44 739d93c
feat(algebra/lie/weights): the zero root subalgebra is self-normalizing (#7622)

2021-05-17 03:57:28 2077c90
doc(counterexamples/canonically_ordered_comm_semiring_two_mul): fix url (#7625)

2021-05-17 02:40:40 d40e40c
chore(scripts): update nolints.txt (#7627)
I am happy to remove some nolints for you!

2021-05-17 01:22:19 72e4cca
ci(.github/workflows/build.yml): check counterexamples (#7618)
I meant to add this to #7553 but I forgot before it got merged.
This also moves the contents of `src/counterexamples` to `counterexamples/`.

2021-05-17 00:02:12 84a27d6
feat(set_theory/game): add mul_one and mul_assoc for pgames (#7610)
and several `simp` lemmas. I also simplified some of the existing proofs using `rw` and `simp` and made them easier to read.
This is the final PR for multiplication of pgames (hopefully)!
Next step:  prove `numeric_mul` and define multiplication for `surreal`.

2021-05-16 18:58:53 aedd12d
refactor(measure_theory/haar_measure): move general material to content.lean, make content a structure  (#7615)
Several facts that are proved only for the Haar measure (including for instance regularity) are true for any measure constructed from a content. We move these facts to the `content.lean` file (and make `content` a structure for easier management). Also, move the notion of regular measure to its own file, and make it a class.

2021-05-16 18:58:52 1b098c0
feat(algebra/ordered_group, algebra/ordered_ring): add some lemmas about abs (#7612)

2021-05-16 18:58:51 b98d840
feat(category_theory/category): initialize simps (#7605)
Initialize `@[simps]` so that it works better for `category`. It just makes the names of the generated lemmas shorter.
Add `@[simps]` to product categories.

2021-05-16 18:58:50 9084a3c
chore(order/fixed_point): add docstring for Knaster-Tarski theorem (#7589)
clarify that the def provided constitutes the Knaster-Tarski theorem

2021-05-16 13:18:13 c8a2fd7
feat(analysis/normed_space): normed_group punit (#7616)
Minor content from LTE.

2021-05-16 13:18:12 2bd4bb6
fix(tactic/lift): elaborate the type better (#7598)
* When writing `lift x to t` it will now elaborating `t` using that `t` must be a sort (inserting a coercion if needed).
* Generalize `Type*` to `Sort*` in the tactic

2021-05-16 13:18:11 632783d
feat(algebra/subalgebra): two equal subalgebras are equivalent (#7590)
This extends `linear_equiv.of_eq` to an `alg_equiv` between two `subalgebra`s.
[Zulip discussion starts around here](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/towers.20of.20algebras/near/238452076)

2021-05-16 13:18:10 4d909f4
feat(analysis/calculus/local_extr): A polynomial's roots are bounded by its derivative (#7571)
An application of Rolle's theorem to polynomials.

2021-05-16 13:18:09 ee6a9fa
fix(tactic/simps): fix bug (#7433)
* Custom projections that were compositions of multiple projections failed when the projection has additional arguments.
* Also adds an error when two projections are given the same simps-name

2021-05-16 13:18:08 f1bcb90
fix(tactic/simps): remove occurrence of mk_mapp (#7432)
Fixes the slowdown reported on Zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/simps.20is.20very.20slow
On my laptop, the minimized example in that topic now takes 33ms instead of ~5000ms

2021-05-15 21:20:58 65e7646
feat(algebraic_topology): cosimplicial objects (#7614)
Dualize the existing API for `simplicial_object` to provide `cosimplicial_object`, and move the contents of LTE's `for_mathlib/simplicial/augmented.lean` to mathlib.

2021-05-15 21:20:57 14802d6
chore(ring_theory/int/basic): remove duplicate lemma nat.prime_iff_prime (#7611)

2021-05-15 21:20:56 07dcff7
feat(logic/relation): reflexive.ne_iff_imp (#7579)
As suggested in #7567

2021-05-15 21:20:55 82ac80f
feat(data/set/basic): pairwise_on.imp_on (#7578)
Provide more helper lemmas for transferring `pairwise_on` between different relations. Provide a rephrase of `pairwise_on.mono'` as `pairwise_on.imp`.

2021-05-15 21:20:54 4c2567f
chore(group_theory/group_action/group): add `smul_inv` (#7568)
This renames the existing `smul_inv` to `smul_inv'`, which is consistent with the name of the other lemma about `mul_semiring_action`, `smul_mul'`.

2021-05-15 21:20:53 467d2b2
feat(data/logic/basic): `em.swap` and `eq_or_ne` (#7561)

2021-05-15 21:20:52 d338ebd
feat(counterexamples/*): add counterexamples folder (#7558)
Several times, there has been a discussion on Zulip about the appropriateness of having counterexamples in mathlib.  This PR introduces a `counterexamples` folder, together with the first couple of counterexamples.
For the most recent discussion, see
https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.237553

2021-05-15 21:20:51 56442cf
feat(data/nnreal): div and pow lemmas (#7471)
from the liquid tensor experiment

2021-05-15 21:20:50 57b0e68
chore(*/pi): rename *_hom.apply to pi.eval_*_hom (#5851)
These definitions state the fact that fixing an `i` and applying a function `(Π i, f i)` maintains the algebraic structure of the function. We already have a name for this operation, `function.eval`.
These isn't a statement about `monoid_hom` or `ring_hom` at all - that just happens to be their type.
For this reason, this commit moves all the definitions of this type into the `pi` namespace:
* `add_monoid_hom.apply` &rarr; `pi.eval_add_monoid_hom`
* `monoid_hom.apply` &rarr; `pi.eval_monoid_hom`
* `ring_hom.apply` &rarr; `pi.eval_ring_hom`
* `pi.alg_hom.apply` [sic] &rarr; `pi.eval_alg_hom`
This scales better, because we might want to say that applying a `linear_map` over a non-commutative ring is an `add_monoid_hom`. Using the naming convention established by this commit, that's easy; it's `linear_map.eval_add_monoid_hom` to mirror `pi.apply_add_monoid_hom`.
This partially addresses [this zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Naming.3A.20eval.20vs.20apply/near/223813950)

2021-05-15 16:28:06 172195b
feat(algebra/{ordered_monoid, ordered_monoid_lemmas}): split the `ordered_[...]` typeclasses (#7371)
This PR tries to split the ordering assumptions from the algebraic assumptions on the operations in the `ordered_[...]` hierarchy.
The strategy is to introduce two more flexible typeclasses, `covariant_class` and `contravariant_class`.
* `covariant_class` models the implication `a ≤ b → c * a ≤ c * b` (multiplication is monotone),
* `contravariant_class` models the implication `a * b < a * c → b < c`.
Since `co(ntra)variant_class` takes as input the operation (typically `(+)` or `(*)`) and the order relation (typically `(≤)` or `(<)`), these are the only two typeclasses that I have used.
The general approach is to formulate the lemma that you are interested in and prove it, with the `ordered_[...]` typeclass of your liking.  After that, you convert the single typeclass, say `[ordered_cancel_monoid M]`, to three typeclasses, e.g. `[partial_order M] [left_cancel_semigroup M] [covariant_class M M (function.swap (*)) (≤)]` and have a go at seeing if the proof still works!
Note that it is possible (or even expected) to combine several `co(ntra)variant_class` assumptions together.  Indeed, the usual `ordered` typeclasses arise from assuming the pair `[covariant_class M M (*) (≤)] [contravariant_class M M (*) (<)]` on top of order/algebraic assumptions.
A formal remark is that *normally* `covariant_class` uses the `(≤)`-relation, while `contravariant_class` uses the `(<)`-relation.  This need not be the case in general, but seems to be the most common usage.  In the opposite direction, the implication
`[semigroup α] [partial_order α] [contravariant_class α α (*) (≤)]  => left_cancel_semigroup α`
holds (note the `co*ntra*` assumption and the `(≤)`-relation).
Zulip:
https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/ordered.20stuff

2021-05-15 14:21:15 738c19f
refactor(linear_algebra/matrix): split matrix.lean into multiple files (#7593)
The file `linear_algebra/matrix.lean` used to be very big and contain a lot of parts that did not depend on each other, so I split each of those parts into its own little file. Most of the new files ended up in `linear_algebra/matrix/`, except for `linear_algebra/trace.lean` and `linear_algebra/determinant.lean` which did not contain anything matrix-specific.
Apart from the local improvement in `matrix.lean` itself, the import graph is now also a bit cleaner.
Renames:
 * `linear_algebra/determinant.lean` -> `linear_algebra/matrix/determinant.lean`
 * `linear_algebra/nonsingular_inverse.lean` -> `linear_algebra/matrix/nonsingular_inverse.lean`
Split off from `linear_algebra/matrix.lean`:
 * `linear_algebra/matrix/basis.lean`
 * `linear_algebra/matrix/block.lean`
 * `linear_algebra/matrix/diagonal.lean`
 * `linear_algebra/matrix/dot_product.lean`
 * `linear_algebra/matrix/dual.lean`
 * `linear_algebra/matrix/finite_dimensional.lean`
 * `linear_algebra/matrix/reindex.lean`
 * `linear_algebra/matrix/to_lin.lean`
 * `linear_algebra/matrix/to_linear_equiv.lean`
 * `linear_algebra/matrix/trace.lean`
 * `linear_algebra/determinant.lean` (Unfortunately, I could not persuade `git` to remember that I moved the original `determinant.lean` to `matrix/determinant.lean`)
  * `linear_algebra/trace.lean`

2021-05-15 14:21:14 3c27e2e
feat(algebra/lie/weights): define product of root vectors and weight vectors (#7591)
Also some related results, most notably that the zero root space is a subalgebra.

2021-05-15 14:21:13 515762a
feat(category_theory/quotient): congruence relations (#7501)
Define congruence relations and show that when you quotient a category by a congruence relation, two morphism become equal iff they are related.

2021-05-15 08:16:35 fc94b47
feat(counterexamples): a counterexample on the Pettis integral (#7553)
Phillips (1940) has exhibited under the continuum hypothesis a bounded weakly measurable function which is not Pettis-integrable. We formalize this counterexample.

2021-05-15 08:16:34 b4b38da
feat(category_theory/*/projective): refactor treatment of projective objects (#7485)

2021-05-15 08:16:32 c63caeb
feat(algebra/homology): homotopies between chain maps (#7483)

2021-05-15 08:16:31 cc47aff
feat(algebra/homology): truncation and augmentation of chain complexes (#7480)

2021-05-15 08:16:30 5da114c
feat(algebraic_topology): the Moore complex of a simplicial object (#6308)
## Moore complex
We construct the normalized Moore complex, as a functor
`simplicial_object C ⥤ chain_complex C ℕ`,
for any abelian category `C`.
The `n`-th object is intersection of
the kernels of `X.δ i : X.obj n ⟶ X.obj (n-1)`, for `i = 1, ..., n`.
The differentials are induced from `X.δ 0`,
which maps each of these intersections of kernels to the next.
This functor is one direction of the Dold-Kan equivalence, which we're still working towards.

2021-05-15 03:59:57 94aae73
feat(data/nat/factorial) : descending factorial (#7527)

2021-05-15 02:43:25 a648af4
chore(scripts): update nolints.txt (#7613)
I am happy to remove some nolints for you!

2021-05-14 22:42:57 bd923f7
chore(geometry/euclidean/triangle): minor style fixes (#7585)

2021-05-14 19:19:41 fd3d117
feat(data/mv_polynomial/basic): Add ring section (#7507)
A few lemmas about `monomial` analogous to those for the single-variate polynomials over rings.

2021-05-14 17:28:32 a52f471
feat(algebra/homology): chain complexes are an additive category (#7478)

2021-05-14 14:25:23 f8dc722
refactor(topology/algebra/ordered): reduce imports (#7601)
Renames `topology.algebra.ordered` to `topology.algebra.order`, and moves the material about `liminf/limsup` and about `extend_from` to separate files, in order to delay imports.

2021-05-14 14:25:22 2373ee6
refactor(set_theory/{surreal, game}): move `mul` from surreal to game (#7580)
The next step is to provide several `simp` lemmas for multiplication of pgames in terms of games.
None of these statements involve surreal numbers.

2021-05-14 12:02:31 87adde4
feat(category_theory/monoidal): the monoidal opposite (#7602)

2021-05-14 12:02:30 cc1690e
feat(analysis/calculus/parametric_integral): derivative of parametric integrals (#7437)
from the sphere eversion project

2021-05-14 09:48:30 1199a3d
feat(analysis/special_functions/exp_log): strengthen statement of `continuous_log'` (#7607)
The proof of `continuous (λ x : {x : ℝ // 0 < x}, log x)` also works for `continuous (λ x : {x : ℝ // x ≠ 0}, log x)`.
I keep the preexisting lemma as well since it is used in a number of places and seems generally useful.

2021-05-14 09:48:29 3c77167
feat(linear_algebra/dual): generalize from field to ring (#7599)

2021-05-14 04:49:59 840db09
chore(category_theory/groupoid): remove unnecessary imports (#7600)

2021-05-14 04:49:58 3124e1d
feat(data/finset/lattice): choice-free le_sup_iff and lt_sup_iff (#7584)
Propagate to `finset` the change to `le_sup_iff [is_total α (≤)]` and `lt_sup_iff [is_total α (≤)]` made in #7455.

2021-05-14 04:49:57 bf2750e
chore(order/atoms): ask for the correct instances (#7582)
replace bounded_lattice by order_bot/order_top where it can

2021-05-14 04:49:56 8829c0d
feat(algebra/homology): flipping double complexes (#7482)

2021-05-14 04:49:55 722b5fc
feat(algebra/homology): homological complexes are the same as differential objects (#7481)

2021-05-14 04:49:54 f5327c9
feat(algebra/homology): definition of quasi_iso (#7479)

2021-05-14 01:13:30 239908e
feat(ring_theory/ideal/operations): add apply_coe_mem_map (#7566)
This is a continuation of #7459. In this PR:
- We modify `ideal.mem_map_of_mem` in order to be consistent with `submonoid.mem_map_of_mem`.
- We modify `submonoid.apply_coe_mem_map` (and friends) to have the submonoid as an explicit variable. This was the case before #7459 (but with a different, and not consistent, name). It seems to me that this version makes the code more readable.
- We add `ideal.apply_coe_mem_map` (similar to `submonoid.apply_coe_mem_map`).
Note that `mem_map_of_mem` is used in other places, for example we have `multiset.mem_map_of_mem`, but since a multiset is not a type there is no `apply_coe_mem_map` to add there.

2021-05-13 15:18:24 090c9ac
chore(scripts): update nolints.txt (#7597)
I am happy to remove some nolints for you!

2021-05-13 15:18:24 f792356
chore(order/galois_connection): ask for the correct instances (#7594)
replace partial_order by preorder where it can and general tidy up of this old style file

2021-05-13 15:18:23 ce45594
feat(algebra/homology/single): chain complexes supported in a single degree (#7477)

2021-05-13 13:44:39 c5faead
feat(category_theory/preadditive/functor_category): preadditive instance for C \func D (#7533)

2021-05-12 16:37:46 43bd924
feat(topology/category/Profinite): iso_equiv_homeo (#7529)
From LTE

2021-05-12 15:10:58 08f4404
refactor(ring_theory/perfection): remove coercion in the definition of the type (#7583)
Defining the type `ring.perfection R p` as a plain subtype (but inheriting the semiring or ring instances from a `subsemiring` structure) removes several coercions and helps Lean a lot when elaborating or unifying.

2021-05-12 10:02:56 6b62b9f
refactor(algebra/module): rename `smul_injective hx` to `smul_left_injective M hx` (#7577)
This is a follow-up PR to #7548.
 * Now that there is also a `smul_right_injective`, we should disambiguate the previous `smul_injective` to `smul_left_injective`.
 * The `M` parameter can't be inferred from arguments before the colon, so we make it explicit in `smul_left_injective` and `smul_right_injective`.

2021-05-12 02:19:18 6ee8f0e
doc(tactic/interactive): link swap and rotate to each other (#7550)
They both do 'make a different goal the current one'.

2021-05-11 22:59:11 a7e1696
fix(tactic/derive_fintype): use correct universes (#7581)
Reported on [Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/type.20class.20error.20with.20mk_fintype_instance/near/238209823).

2021-05-11 22:59:10 0538d2c
chore(*): reducing imports (#7573)

2021-05-11 18:00:40 9cf732c
chore(logic/nontrivial): adjust priority of `nonempty` instances (#7563)
This makes `nontrivial.to_nonempty` and `nonempty_of_inhabited` higher priority so they are tried before things like `add_torsor.nonempty` which starts traversing the algebra heirarchy.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/char_zero/near/238103102)

2021-05-11 18:00:39 3048d6b
feat(ring_theory/localization): Define local ring hom on localization at prime ideal (#7522)
Defines the induced ring homomorphism on the localizations at a prime ideal and proves that it is local and uniquely determined.

2021-05-11 14:57:06 b746e82
feat(linear_algebra/finsupp): adjust apply lemma for `finsupp.dom_lcongr` (#7549)
This is a split-off dependency from #7496.

2021-05-11 10:56:56 9191a67
perf(ci): skip linting and tests on master branch (#7576)
Do not run lints and tests on the master branch.  These checks have already passed on the staging branch, so there should be no need to repeat them on master.

2021-05-11 07:41:53 b4c7654
feat(algebra/homology): redesign of homological complexes (#7473)
This is a complete redesign of our library on homological complexes and homology.
This PR replaces the current definition of `chain_complex` which had proved cumbersome to work with.
The fundamental change is that chain complexes are now indexed by a type equipped with a `complex_shape`, rather than by a monoid. A `complex_shape ι` contains a relation `r`, with the intent that we will only allow a differential `X i ⟶ X j` when `r i j`. This allows, for example, complexes indexed either by `nat` or `int`, with differentials going either up or down.
We set up the initial theory without referring to "successors" and "predecessors" in the type `ι`, to ensure we can avoid dependent type theory hell issues involving arithmetic in the index of a chain group. We achieve this by having a chain complex consist of morphisms `d i j : X i ⟶ X j` for all `i j`, but with an additional axiom saying this map is zero unless `r i j`. This means we can easily talk about, e.g., morphisms from `X (i - 1 + 1)` to `X (i + 1)` when we need to.
However after not too long we also set up `option` valued `next` and `prev` functions which make an arbitrary choice of such successors and predecessors if they exist. Using these, we define morphisms `d_to j`, which lands in `X j`, and has source either `X i` for some `r i j`, or the zero object if these isn't such an `i`. These morphisms are very convenient when working "at the edge of a complex", e.g. when indexing by `nat`.

2021-05-11 07:41:52 12c9ddf
feat(set_theory/{pgame, surreal}): add `left_distrib_equiv` and `right_distrib_equiv` for pgames (#7440)
and several other auxiliary lemmas.
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Surreal.20numbers)

2021-05-11 05:55:39 ca4024b
feat(algebraic_topology/cech_nerve): Adds a definition of the Cech nerve associated to an arrow. (#7547)
Also adds a definition of augmented simplicial objects as a comma category.

2021-05-11 04:39:37 8dc848c
feat(ring_theory/finiteness): add finite_type_iff_group_fg (#7569)
We add here a simple modification of `monoid_algebra.fg_of_finite_type`: a group algebra is of finite type if and only if the group is finitely generated (as group opposed to as monoid).

2021-05-11 01:49:43 fab4197
chore(scripts): update nolints.txt (#7570)
I am happy to remove some nolints for you!

2021-05-10 22:45:44 3fd7cc3
feat(ring_theory/hahn_series): extend the domain of a Hahn series by an `order_embedding` (#7551)
Defines `hahn_series.emb_domain`, which extends the domain of a Hahn series by embedding it into a larger domain in an order-preserving way.
Bundles `hahn_series.emb_domain` with additional properties as `emb_domain_linear_map`, `emb_domain_ring_hom`, and `emb_domain_alg_hom` under additional conditions.
Defines the ring homomorphism `hahn_series.of_power_series` and the algebra homomorphism `hahn_series.of_power_series_alg`, which map power series to Hahn series over an ordered semiring using `hahn_series.emb_domain` with `nat.cast` as the embedding.

2021-05-10 22:45:43 81c98d5
feat(ring_theory/hahn_series): Hahn series form a field (#7495)
Uses Higman's Lemma to define `summable_family.powers`, a summable family consisting of the powers of a Hahn series of positive valuation
Uses `summable_family.powers` to define inversion on Hahn series over a field and linear-ordered value group, making the type of Hahn series a field.
Shows that a Hahn series over an integral domain and linear-ordered value group  `is_unit` if and only if its lowest coefficient is.

2021-05-10 22:45:42 1cbb31d
feat(analysis/normed_space/normed_group_hom): add lemmas (#7474)
From LTE.
Written by @PatrickMassot 
- [x] depends on: #7459

2021-05-10 16:44:24 b7ab74a
feat(algebra/lie/weights): add lemma `root_space_comap_eq_weight_space` (#7565)

2021-05-10 16:44:23 ac1f3df
chore(*): remove unnecessary `import tactic` (#7560)

2021-05-10 16:44:22 17cba54
feat(data/int/basic): sign raised to an odd power (#7559)
Since sign is either -1, 0, or 1, it is unchanged when raised to an odd power.

2021-05-10 16:44:21 3417ee0
chore(deprecated/group): relax monoid to mul_one_class (#7556)
This fixes an annoyance where `monoid_hom.is_monoid_hom` didn't work on non-associative monoids.

2021-05-10 16:44:20 477af65
feat(category_theory/limits/shapes/wide_pullbacks): Adds some wrappers around the (co)limit api for wide pullbacks/pushouts (#7546)
This PR adds some wrappers (mostly abbreviations) around the (co)limit api specifically for wide pullbacks and wide pushouts.

2021-05-10 16:44:19 92395fd
feat(data/list/rotate): is_rotated (#7299)
`is_rotated l₁ l₂` or `l₁ ~r l₂` asserts that `l₁` and `l₂` are cyclic permutations
  of each other. This is defined by claiming that `∃ n, l.rotate n = l'`.

2021-05-10 13:15:31 41c7b1e
chore(category_theory/Fintype): remove redundant lemmas (#7531)
These lemmas exist for arbitrary concrete categories.
- [x] depends on: #7530

2021-05-10 13:15:30 b9f4420
feat(geometry/euclidean/triangle): add Stewart's Theorem + one similarity lemma (#7327)

2021-05-10 13:15:28 03b88c1
feat(algebra/category/Module): Free R C, the free R-linear completion of a category (#7177)
The free R-linear completion of a category.

2021-05-10 07:36:17 48104c3
feat(data/set/lattice): (b)Union and (b)Inter lemmas (#7557)
from LTE

2021-05-10 07:36:16 b577697
feat(data/matrix/basic): add missing smul instances, generalize lemmas to work on scalar towers (#7544)
This also fixes the `add_monoid_hom.map_zero` etc lemmas to not require overly strong typeclasses on `α`
This removes the `matrix.smul_apply` lemma since `pi.smul_apply` and `smul_eq_mul` together replace it.

2021-05-10 07:36:15 38bf2ab
feat(field_theory/abel_ruffini): Version of solvable_by_rad.is_solvable (#7509)
This is a version of `solvable_by_rad.is_solvable`, which will be the final step of the abel-ruffini theorem.

2021-05-10 07:36:14 ef90a7a
refactor(*): bundle `is_basis` (#7496)
This PR replaces the definition of a basis used in mathlib and fixes the usages throughout.
Rationale: Previously, `is_basis` was a predicate on a family of vectors, saying this family is linear independent and spans the whole space. We encountered many small annoyances when working with these unbundled definitions, for example complicated `is_basis` arguments being hidden in the goal view or slow elaboration when mapping a basis to a slightly different set of basis vectors. The idea to turn `basis` into a bundled structure originated in the discussion on #4949. @digama0 suggested on Zulip to identify these "bundled bases" with their map `repr : M ≃ₗ[R] (ι →₀ R)` that sends a vector to its coordinates. (In fact, that specific map used to be only a `linear_map` rather than an equiv.)
Overview of the changes:
 - The `is_basis` predicate has been replaced with the `basis` structure. 
 - Parameters of the form `{b : ι → M} (hb : is_basis R b)` become a single parameter `(b : basis ι R M)`.
 - Constructing a basis from a linear independent family spanning the whole space is now spelled `basis.mk hli hspan`, instead of `and.intro hli hspan`.
 -  You can also use `basis.of_repr` to construct a basis from an equivalence `e : M ≃ₗ[R] (ι →₀ R)`. If `ι` is a `fintype`, you can use `basis.of_equiv_fun (e : M ≃ₗ[R] (ι → R))` instead, saving you from having to work with `finsupp`s.
 - Most declaration names that used to contain `is_basis` are now spelled with `basis`, e.g. `pi.is_basis_fun` is now `pi.basis_fun`.
 - Theorems of the form `exists_is_basis K V : ∃ (s : set V) (b : s -> V), is_basis K b` and `finite_dimensional.exists_is_basis_finset K V : [finite_dimensional K V] -> ∃ (s : finset V) (b : s -> V), is_basis K b` have been replaced with (noncomputable) defs such as `basis.of_vector_space K V : basis (basis.of_vector_space_index K V) K V` and `finite_dimensional.finset_basis : basis (finite_dimensional.finset_basis_index K V) K V`; the indexing sets being a separate definition means we can declare a `fintype (basis.of_vector_space_index K V)` instance on finite dimensional spaces, rather than having to use `cases exists_is_basis_fintype K V with ...` each time.
 - Definitions of a `basis` are now, wherever practical, accompanied by `simp` lemmas giving the values of `coe_fn` and `repr` for that basis.
 - Some auxiliary results like `pi.is_basis_fun₀` have been removed since they are no longer needed.
Basic API overview:
* `basis ι R M` is the type of `ι`-indexed `R`-bases for a module `M`, represented by a linear equiv `M ≃ₗ[R] ι →₀ R`.
* the basis vectors of a basis `b` are given by `b i` for `i : ι`
* `basis.repr` is the isomorphism sending `x : M` to its coordinates `basis.repr b x : ι →₀ R`. The inverse of `b.repr` is `finsupp.total _ _ _ b`. The converse, turning this isomorphism into a basis, is called `basis.of_repr`.
* If `ι` is finite, there is a variant of `repr` called `basis.equiv_fun b : M ≃ₗ[R] ι → R`. The converse, turning this isomorphism into a basis, is called `basis.of_equiv_fun`.
* `basis.constr hv f` constructs a linear map `M₁ →ₗ[R] M₂` given the values `f : ι → M₂` at the
  basis elements `⇑b : ι → M₁`.
* `basis.mk`: a linear independent set of vectors spanning the whole module determines a basis (the converse consists of `basis.linear_independent` and `basis.span_eq`
* `basis.ext` states that two linear maps are equal if they coincide on a basis; similar results are available for linear equivs (if they coincide on the basis vectors), elements (if their coordinates coincide) and the functions `b.repr` and `⇑b`.
* `basis.of_vector_space` states that every vector space has a basis.
* `basis.reindex` uses an equiv to map a basis to a different indexing set, `basis.map` uses a linear equiv to map a basis to a different module
Zulip discussions:
 * https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Bundled.20basis
 * https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.234949

2021-05-10 07:36:13 f985e36
feat(group_theory/subgroup): add mem_map_of_mem (#7459)
From LTE.
Written by @PatrickMassot

2021-05-10 07:36:12 4a8467a
feat(data/equiv/basic): equiv.curry (#7458)
This renames `equiv.arrow_arrow_equiv_prod_arrow` to `(equiv.curry _ _ _).symm` to make it easier to find and match `function.curry`.
* `cardinal.power_mul` is swapped, so that its name makes sense.
* renames `linear_equiv.uncurry` to `linear_equiv.curry` and swaps sides
Also add `@[simps]` to two equivs.

2021-05-10 06:01:59 7150c90
refactor(ring_theory/localization): Golf two proofs (#7520)
Golfing two proofs and changing their order.

2021-05-09 22:18:48 ea0043c
feat(topology): tiny new lemmas (#7554)
from LTE

2021-05-09 12:20:12 735a26e
chore(group_theory): some new convenience lemmas (#7555)
from LTE

2021-05-09 12:20:10 581064f
feat(uniform_space/cauchy): cauchy_seq lemmas (#7528)
from the Liquid Tensor Experiment

2021-05-09 10:00:57 bf229dd
feat(topology/metric_space/basic): dist_ne_zero (#7552)

2021-05-08 13:26:29 132328c
feat(algebra/lie/weights): define weight spaces of Lie modules (#7537)

2021-05-08 08:13:59 4a8a595
feat(topology/subset_properties, homeomorph): lemmata about embeddings (#7431)
Two lemmata: (i) embedding to homeomorphism (ii) a closed embedding is proper
Coauthored with @hrmacbeth

2021-05-08 05:52:42 583ad82
feat(algebraic_geometry/structure_sheaf): Structure sheaf on basic opens (#7405)
Proves that `to_basic_open` is an isomorphism of commutative rings. Also adds Hartshorne as a reference.

2021-05-07 22:54:26 dbcd454
feat(topology/category/*): Add alternative explicit limit cones for `Top`, etc. and shows `X : Profinite` is a limit of finite sets. (#7448)
This PR redefines `Top.limit_cone`, and defines similar explicit limit cones for `CompHaus` and `Profinite`.
Using the definition with the subspace topology makes the proofs that the limit is compact, t2 and/or totally disconnected much easier.
This also expresses any `X : Profinite` as a limit of its discrete quotients, which are all finite.

2021-05-07 22:54:25 515fb2f
feat(group_theory/perm/*): lemmas about `extend_domain`, `fin_rotate`, and `fin.cycle_type` (#7447)
Shows how `disjoint`, `support`, `is_cycle`, and `cycle_type` behave under `extend_domain`
Calculates `support` and `cycle_type` for `fin_rotate` and `fin.cycle_type`
Shows that the normal closure of `fin_rotate 5` in `alternating_group (fin 5)` is the whole alternating group.

2021-05-07 20:26:33 5cfcb6a
feat(ring_theory/hahn_series): order of a nonzero Hahn series, reindexing summable families (#7444)
Defines `hahn_series.order`, the order of a nonzero Hahn series
Restates `add_val` in terms of `hahn_series.order`
Defines `hahn_series.summable_family.emb_domain`, reindexing a summable family using an embedding

2021-05-07 09:30:47 72e151d
feat(topology/uniform_space): is_closed_of_spread_out (#7538)
See [Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/integers.20are.20closed.20in.20reals)

2021-05-07 09:30:46 301542a
feat(group_theory.quotient_group): add eq_iff_div_mem (#7523)
From LTE.
Written by @PatrickMassot

2021-05-07 09:30:45 63a1782
feat(field_theory/polynomial_galois_group): More flexible version of gal_action_hom_bijective_of_prime_degree (#7508)
Since the number of non-real roots is even, we can make a more flexible version of `gal_action_hom_bijective_of_prime_degree`. This flexibility will be helpful when working with a specific polynomial.

2021-05-07 09:30:44 565310f
feat(data/nat/cast): pi.coe_nat and pi.nat_apply (#7492)

2021-05-07 09:30:43 190d4e2
feat(algebra/module/basic): smul_add_hom_one (#7461)

2021-05-07 09:30:42 91d5aa6
feat(category_theory/arrow): arrow.mk_inj (#7456)
From LTE

2021-05-07 09:30:40 6fc8b2a
refactor(*): more choice-free proofs (#7455)
Now that lean v3.30 has landed (and specifically leanprover-community/lean#560), we can finally make some progress on making a significant fraction of mathlib foundations choice-free. This PR does the following:
* No existing theorem statements have changed (except `linear_nonneg_ring` as noted below).
* A number of new theorems have been added to the `decidable` namespace, proving choice-free versions of lemmas under the assumption that something is decidable. These are primarily concentrated in partial orders and ordered rings, because total orders are already decidable, but there are some interesting lemmas about partial orders that require decidability of `le`.
* `linear_nonneg_ring` was changed to include decidability of `nonneg`, for consistency with linear ordered rings. No one is using this anyway so there shouldn't be any fallout.
* A lot of the `ordered_semiring` lemmas need `decidable` versions now because one of the core axioms, `mul_le_mul_of_nonneg_left`, is derived by LEM from an equivalent statement about lt instead of being an actual axiom. If this is refactored, these theorems can be removed again.
* The main files which were scoured of choicy proofs are: `algebra.ordered_group`,  `algebra.ordered_ring`, `data.nat.basic`, `data.int.basic`, `data.list.basic`, and `computability.halting`.
* The end goal of this was to prove `computable_pred.halting_problem` without assuming choice, finally validating a claim I made more than two years ago in my [paper](https://arxiv.org/abs/1810.08380) on the formalization.
I have not yet investigated a linter for making sure that these proofs stay choice-free; this can be done in a follow-up PR.

2021-05-07 09:30:39 dec29aa
feat(group_theory/solvable): S_5 is not solvable (#7453)
This is a rather hacky proof that S_5 is not solvable. The proper proof via the simplicity of A_5 will eventually replace this. But until then, this result is needed for abel-ruffini.
Most of the work done by Jordan Brown

2021-05-07 09:30:38 95b91b3
refactor(group_theory/perm/*): disjoint and support in own file (#7450)
The group_theory/perm/sign file was getting large and too broad in scope. This refactor pulls out `perm.support`, `perm.is_swap`, and `perm.disjoint` into a separate file.
A simpler version of #7118.

2021-05-07 09:30:37 251a42b
feat(ring_theory/finiteness): add monoid_algebra.ft_iff_fg (#7445)
We prove here `add monoid_algebra.ft_iff_fg`: the monoid algebra is of finite type if and only if the monoid is finitely generated.
- [x] depends on: #7409

2021-05-07 09:30:36 be1af7c
feat(linear_algebra/quadratic_form): provide `distrib_mul_action S (quadratic_form M R)` when `S` has no addition. (#7443)
The end goal here is to provide `has_scalar (units R) (quadratic_form M R)` for possible use in #7427

2021-05-07 09:30:35 5d873a6
feat(algebra/monoid_algebra): add add_monoid_algebra_ring_equiv_direct_sum (#7422)
The only interesting result here is:
    add_monoid_algebra_ring_equiv_direct_sum : add_monoid_algebra M ι ≃+* ⨁ i : ι, M
The rest of the new file is just boilerplate to translate `dfinsupp.single` into `direct_sum.of`.

2021-05-07 09:30:34 3a5c871
refactor(polynomial/*): make polynomials irreducible (#7421)
Polynomials are the most basic objects in field theory. Making them irreducible helps Lean, because it can not try to unfold things too far, and it helps the user because it forces him to use a sane API instead of mixing randomly stuff from finsupp and from polynomials, as used to be the case in mathlib before this PR.

2021-05-07 09:30:33 322ccc5
feat(finset/basic): downward induction for finsets (#7379)

2021-05-07 09:30:31 11a06de
feat(order/closure): closure of unions and bUnions (#7361)
prove closure_closure_union and similar

2021-05-07 09:30:30 b20e664
feat(order/well_founded_set): Higman's Lemma (#7212)
Proves Higman's Lemma: if `r` is partially well-ordered on `s`, then `list.sublist_forall2` is partially well-ordered on the set of lists whose elements are in `s`.

2021-05-07 05:00:03 cd5864f
chore(scripts): update nolints.txt (#7541)
I am happy to remove some nolints for you!

2021-05-07 05:00:02 6a7ddcc
ci(.github/workflows/{build,dependent-issues}.yml): auto-cancel workflows on previous commits (#7536)
After this is merged, pushing a new commit to a branch in this repo should cancel the "continuous integration" and "dependent issues" workflows running on any older commits on that branch.

2021-05-07 05:00:01 93f9b3d
ci(.github/workflows/build.yml): switch to trepplein (#7532)
Reduces the leanchecker time from 6+57 minutes to 6+16 minutes.

2021-05-07 04:59:59 f44a5eb
feat(category_theory/concrete_category): id_apply, comp_apply (#7530)
This PR renames
* `category_theory.coe_id` to `category_theory.id_apply`
* `category_theory.coe_comp` to `category_theory.comp_apply`
The names that are hence free up
are then redefined for "unapplied" versions of the same lemmas.
The `elementwise` tactic uses the old lemmas (with their new names).
We need minor fixes in the rest of the library because of the name changes.

2021-05-07 04:59:59 0ead8ee
feat(ring_theory/localization): Characterize units in localization at prime ideal (#7519)
Adds a few lemmas characterizing units and nonunits (elements of the maximal ideal) in the localization at a prime ideal.

2021-05-07 04:59:57 755cb75
feat(data/list/basic): non-meta to_chunks (#7517)
A non-meta definition of the `list.to_chunks` method, plus some basic theorems about it.

2021-05-07 04:59:56 930485c
feat(linear_algebra/tensor_product): distrib_mul_actions are inherited (#7516)
It turns out that `tensor_product.has_scalar` requires only `distrib_mul_action` and not `semimodule` on its components.
As a result, a tensor product can inherit the `distrib_mul_action` structure of its components too.
Notably, this would enable `has_scalar (units R) (M ⊗[R] N)` in future.

2021-05-07 04:59:55 b903ea2
chore(algebra/module/linear_map): add missing rfl lemmas (#7515)
I've found these most useful for writing along in reverse so that I can use `linear_map.map_smul_of_tower`.

2021-05-07 04:59:54 6d25f3a
feat(category_theory/opposites): Adds equivalences for functor categories. (#7505)
This PR adds the following equivalences for categories `C` and `D`:
1. `(C ⥤ D)ᵒᵖ ≌ Cᵒᵖ ⥤ Dᵒᵖ` induced by `op` and `unop`.
2.  `(Cᵒᵖ ⥤ D)ᵒᵖ ≌ (C ⥤ Dᵒᵖ)` induced by `left_op` and `right_op`.

2021-05-07 04:59:53 efb283c
feat(data/dfinsupp): add `finset_sum_apply` and `coe_finset_sum` (#7499)
The names of the new`add_monoid_hom`s parallel the names in my recent `quadratic_form` PR, #7417.

2021-05-07 04:59:51 9acbe58
feat(normed_space/normed_group_hom): add lemmas (#7468)
From LTE.
Written by @PatrickMassot

2021-05-07 04:59:50 154fda2
feat(category_theory/subobjects): more about kernel and image subobjects (#7467)
Lemmas about factoring through kernel subobjects, and functoriality of kernel subobjects.

2021-05-06 22:46:23 bb1fb89
feat(data/real/basic): add real.Inf_le_iff (#7524)
From LTE.

2021-05-06 22:46:22 e00d6e0
feat(data/polynomial/*): Specific root sets (#7510)
Adds lemmas for the root sets of a couple specific polynomials.

2021-05-06 22:46:21 6f27ef7
chore(data/equiv/basic): Show that `Pi_curry` is really just `sigma.curry` (#7497)
Extracts some proofs to their own lemmas, and replaces definitions with existing ones.

2021-05-06 22:46:20 9aed6c9
feat(data/finsupp,linear_algebra): `finsupp.split` is an equivalence (#7490)
This PR shows that for finite types `η`, `finsupp.split` is an equivalence between `(Σ (j : η), ιs j) →₀ α` and `Π j, (ιs j →₀ α)`.
To be used in the `bundled-basis` refactor

2021-05-06 22:46:19 48bdd1e
feat(data/equiv,linear_algebra): `Pi_congr_right` for `mul_equiv` and `linear_equiv` (#7489)
This PR generalizes `equiv.Pi_congr_right` to linear equivs, adding the `mul_equiv`/`add_equiv` version as well.
To be used in the `bundled-basis` refactor

2021-05-06 22:46:18 652357a
feat(data/nat/choose/sum): alternate forms of the binomial theorem (#7415)

2021-05-06 10:56:24 9c86e38
refactor(ring_theory/ideal/operations.lean): make is_prime.comap an instance (#7518)

2021-05-06 10:56:23 13c41e1
feat(category_theory/linear): linear functors (#7369)

2021-05-06 06:18:21 7040c50
feat(category_theory): the opposite of an abelian category is abelian (#7514)

2021-05-06 06:18:20 c4c6cd8
feat(linear_algebra/finsupp): linear equivalence between `α × β →₀ M` and `α →₀ β →₀ M` (#7472)
This PR extends the equivalence `finsupp.finsupp_prod_equiv` to a linear equivalence (to be used in the `bundled-basis` refactor).

2021-05-06 06:18:19 9154a83
feat(algebra/*, ring_theory/valuation/basic): `linear_ordered_add_comm_group_with_top`, `add_valuation.map_sub` (#7452)
Defines `linear_ordered_add_comm_group_with_top`
Uses that to port a few more facts about `valuation`s to `add_valuation`s.

2021-05-06 04:31:52 6af5fbd
feat(category_theory/.../zero): if a zero morphism is a mono, the source is zero (#7462)
Some simple lemmas about zero morphisms.

2021-05-05 23:47:55 009be86
feat(measure_theory/set_integral): continuous_on.measurable_at_filter (#7511)

2021-05-05 23:47:54 709c73b
feat(category_theory/Fintype): some lemmas and `Fintype_to_Profinite`.  (#7491)
Adding some lemmas for morphisms on `Fintype` as functions, as well as `Fintype_to_Profinite`.
Part of the LTE.

2021-05-05 23:47:53 1ef04bd
feat(data/finsupp): prove `f.curry x y = f (x, y)` (#7475)
This was surprisingly hard to prove actually!
To be used in the `bundled-basis` refactor

2021-05-05 23:47:52 d3a46a7
feat(algebra/big_operators): telescopic sums (#7470)
This is restating things we already have in a form which is
slightly more convenient for the liquid tensor experiment

2021-05-05 23:47:51 18ada66
feat(order/filter_at_top_bot): extraction lemmas (#7469)
from the liquid tensor experiment

2021-05-05 23:47:50 7cc367b
feat(category_theory/subobject): minor tweaks (#7466)
A few minor tweaks to the `subobject` API that I wanted while working on homology.

2021-05-05 23:47:49 e25cbe0
feat(category_theory/quotient): the quotient functor is full and essentially surjective (#7465)

2021-05-05 23:47:48 19b752c
feat(category_theory/preadditive): reformulation of mono_of_kernel_zero (#7464)

2021-05-05 23:47:47 7794969
feat(category_theory/.../additive_functor): additive functors preserve zero objects (#7463)

2021-05-05 23:47:46 25387b6
docs(overview): Add Stone-Weierstrass (#7449)

2021-05-05 23:47:45 f6f810c
doc(algebraic_hierarchy): advice for adding new typeclasses (#6854)
This is not intended as document describing all the design decisions behind our algebraic hierarchy, but rather some advice for contributors adding new typeclasses.
It can hopefully serve as a checklist for instances and definitions that should be made for any new algebraic structure being added to mathlib.
Please edit as you see fit, contribute new sections, etc. I haven't written anything yet about interactions with topology or order structures. Please consider this an invitation, or otherwise we can delete those headings later.
Thanks to @eric-wieser for providing the list of instances needed for each typeclass!

2021-05-05 18:50:21 6d2869c
feat(category_theory/.../images): image.pre_comp_epi_of_epi (#7460)
The induced map from `image (f ≫ g)` to `image g` is an epimorphism when `f` is an epimorphism.

2021-05-05 18:50:20 79edde2
feat(topology/discrete_quotient): Add a few lemmas about discrete quotients (#7454)
This PR adds the `discrete_quotient.map` construction and generally improves on the `discrete_quotient` API.

2021-05-05 18:50:19 84d27b4
refactor(group_theory/group_action/defs): generalize smul_mul_assoc and mul_smul_comm (#7441)
These lemmas did not need a full algebra structure; written this way, it permits usage on `has_scalar (units R) A` given `algebra R A` (in some future PR).
For now, the old algebra lemmas are left behind, to minimize the scope of this patch.

2021-05-05 18:50:18 140e17b
feat(algebra/direct_sum_graded): a direct_sum of copies of a ring is itself a ring (#7420)
Once this is in, it's straightforward to show `add_monoid_algebra R ι ≃+* ⨁ i : ι, R`

2021-05-05 18:50:17 51bc1ca
feat(algebra/direct_sum_graded): add direct_sum.to_semiring (#7380)
This provides a convenient way to construct ring_homs out of `direct_sum`, and is a stronger version of `direct_sum.to_add_monoid` which applies in the presence of a `direct_sum.gmonoid` typeclass.
The new `direct_sum.lift_ring_hom` can be thought of as a universal property akin to `finsupp.lift_add_hom`.

2021-05-05 18:50:16 93bc7e0
feat(order): add some missing `pi` and `Prop` instances (#7268)

2021-05-05 18:50:15 52268b8
feat(linear_algebra): Vandermonde matrices and their determinant (#7116)
This PR defines the `vandermonde` matrix and gives a formula for its determinant.
@paulvanwamelen: if you would like to have `det_vandermonde` in a different form (e.g. swap the order of the variables that are being summed), please let me know!

2021-05-05 13:56:53 a4d5ccb
chore(order/complete_boolean_algebra): speed up Inf_sup_Inf (#7506)
On my machine, avoiding `finish` takes the proof from 13s to 0.3s.

2021-05-05 13:56:52 94150f3
chore(group_theory/nielsen_schreier): typos in module doc-string (#7500)
This fixes a discrepancy between the doc-string and the rest of the file.

2021-05-05 13:56:51 3a8796d
feat(category_theory/path_category): extensionality for functors out of path category (#7494)
This adds an extensionality lemma for functors out of a path category, which simplifies some proofs in the free-forgetful adjunction.

2021-05-05 13:56:50 18af6b5
feat(algebra/module): `linear_equiv.refl.symm = refl` (#7493)
To be part of the `bundled_basis` refactor

2021-05-05 13:56:49 1823aee
feat(algebra/module): `S`-linear equivs are also `R`-linear equivs (#7476)
This PR extends `linear_map.restrict_scalars` to `linear_equiv`s.
To be used in the `bundled-basis` refactor.

2021-05-05 13:56:48 9b1b854
feat(data/fintype/basic): add set.to_finset_range (#7426)

2021-05-05 13:56:47 bb9216c
feat(category_theory/opposites): iso.unop (#7400)

2021-05-05 13:56:45 78e36a7
feat(analysis/convex/extreme): extreme sets (#7357)
define extreme sets

2021-05-05 12:20:10 b765d4e
Change the bors timeout to 8 hours (#7513)
We've hit a 6 hour timeout repeatedly in the last few days, resulting in nothing getting built.

2021-05-04 02:29:18 5a91d05
feat(data/finset/lattice): add sup_image (#7428)
This also renames `finset.map_sup` to `finset.sup_map` to match `finset.sup_insert` and `finset.sup_singleton`.
The `inf` versions are added too.

2021-05-03 21:31:42 3773525
feat(ring_theory/finiteness): add lemmas (#7409)
I add here some preliminary lemmas to prove that a monoid is finitely generated iff the monoid algebra is.

2021-05-03 21:31:41 67dad97
chore(data/fintype): rework `fintype.equiv_fin` and dependencies (#7136)
These changes should make the declarations `fintype.equiv_fin`, `fintype.card_eq`
and `fintype.equiv_of_card_eq` more convenient to use.
Renamed:
 * `fintype.equiv_fin` -> `fintype.trunc_equiv_fin`
Deleted:
 * `fintype.nonempty_equiv_of_card_eq` (use `fintype.equiv_of_card_eq` instead)
 * `fintype.exists_equiv_fin` (use `fintype.card` and `fintype.(trunc_)equiv_fin` instead)
Added:
 * `fintype.equiv_fin`: noncomputable, non-`trunc` version of `fintype.equiv_fin`
 * `fintype.equiv_of_card_eq`: noncomputable, non-`trunc` version of `fintype.trunc_equiv_of_card_eq`
 * `fintype.(trunc_)equiv_fin_of_card_eq` (intermediate result/specialization of `fintype.(trunc_)equiv_of_card_eq`
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60fintype.2Eequiv_fin.60.20.2B.20.60fin.2Ecast.60)

2021-05-03 17:06:15 048240e
chore(*): update to lean 3.30.0c (#7264)
There's quite a bit of breakage from no longer reducing `acc.rec` so aggressively.  That is, a well-founded definition like `nat.factors` will no longer reduce definitionally.  Where you could write `rfl` before, you might now need to write `by rw nat.factors` or `by simp [nat.factors]`.
A more inconvenient side-effect of this change is that `dec_trivial` becomes less powerful, since it also relies on the definitional reduction.  For example `nat.factors 1 = []` is no longer true by `dec_trivial` (or `rfl`).  Often you can replace `dec_trivial` by `simp` or `norm_num`.
For extremely simple definitions that only use well-founded relations of rank ω, you could consider rewriting them to use structural recursion on a fuel parameter instead.  The functions `nat.mod` and `nat.div` in core have been rewritten in this way, please consult the [corresponding Lean PR](https://github.com/leanprover-community/lean/pull/570/files) for details on the implementation.

2021-05-03 14:11:12 7da8303
feat(category_theory/preadditive): Schur's lemma (#7366)
We prove Schur's lemma for `𝕜`-linear categories with finite dimensional hom spaces,
over an algebraically closed field `𝕜`:
the hom space `X ⟶ Y` between simple objects `X` and `Y` is at most one dimensional,
and is 1-dimensional iff `X` and `Y` are isomorphic.

2021-05-03 07:41:58 62c06a5
feat(data/finset/basic): a finset has card at most one iff it is contained in a singleton (#7404)

2021-05-02 18:59:48 0cc3cd5
feat(topology/category): Profinite has colimits (#7434)
Show that a reflective subcategory of a cocomplete category is cocomplete, and derive that `CompHaus` and `Profinite` have colimits.

2021-05-02 14:19:06 c7ba3dd
refactor(linear_algebra/eigenspace): refactor exists_eigenvalue (#7345)
We replace the proof of `exists_eigenvalue` with the more general fact:
```
/--
Every element `f` in a nontrivial finite-dimensional algebra `A`
over an algebraically closed field `K`
has non-empty spectrum:
that is, there is some `c : K` so `f - c • 1` is not invertible.
-/
lemma exists_spectrum_of_is_alg_closed_of_finite_dimensional (𝕜 : Type*) [field 𝕜] [is_alg_closed 𝕜]
  {A : Type*} [nontrivial A] [ring A] [algebra 𝕜 A] [I : finite_dimensional 𝕜 A] (f : A) :
  ∃ c : 𝕜, ¬ is_unit (f - algebra_map 𝕜 A c) := ...
```
We can then use this fact to prove Schur's lemma.

2021-05-02 10:42:35 58e990d
chore(dynamics/periodic_pts): remove duplicate of nat.dvd_right_iff_eq (#7435)

2021-05-02 09:28:57 4bd1c83
feat(topology/category/Profinite): Any continuous bijection of profinite spaces is an isomorphism. (#7430)

2021-05-02 04:27:19 30f3788
feat(topology/discrete_quotient): Discrete quotients of topological spaces (#7425)
This PR defines the type of discrete quotients of a topological space and provides a basic API.
In a subsequent PR, this will be used to show that a profinite space is the limit of its finite quotients, which will be needed for the liquid tensor experiment.

2021-05-02 04:27:18 6d7e756
feat(linear_algebra/char_poly): charpoly of `left_mul_matrix`  (#7397)
This is an important ingredient for showing the field norm resp. trace of `x` is the product resp. sum of `x`'s conjugates.

2021-05-02 04:27:17 cfc7415
feat(field_theory/polynomial_galois_group): Galois group is S_p (#7352)
Proves that a Galois group is isomorphic to S_p, under certain conditions.

2021-05-02 00:17:41 6624bbe
feat(category_theory/limits): dualizing some results (#7391)
Requested on [zulip](https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/LocallyConstant.20preserves.20colimits/near/236442281).

2021-05-02 00:17:39 6e836c4
feat(group_theory/perm/{cycles, cycle_type}): permutations are conjugate iff they have the same cycle type (#7335)
Slightly strengthens the induction principle `equiv.perm.cycle_induction_on`
Proves that two permutations are conjugate iff they have the same cycle type: `equiv.perm.is_conj_iff_cycle_type_eq`

2021-05-02 00:17:38 106ac8e
feat(category_theory): definition of R-linear category (#7321)

2021-05-02 00:17:37 decb556
feat(geometry/euclidean/basic): lemmas about angles and distances (#7140)

2021-05-01 20:07:58 ea379b0
feat(topology/continuous_function): the Stone-Weierstrass theorem (#7305)
# The Stone-Weierstrass theorem
If a subalgebra `A` of `C(X, ℝ)`, where `X` is a compact Hausdorff space,
separates points, then it is dense.
We argue as follows.
* In any subalgebra `A` of `C(X, ℝ)`, if `f ∈ A`, then `abs f ∈ A.topological_closure`.
  This follows from the Weierstrass approximation theorem on `[-∥f∥, ∥f∥]` by
  approximating `abs` uniformly thereon by polynomials.
* This ensures that `A.topological_closure` is actually a sublattice:
  if it contains `f` and `g`, then it contains the pointwise supremum `f ⊔ g`
  and the pointwise infimum `f ⊓ g`.
* Any nonempty sublattice `L` of `C(X, ℝ)` which separates points is dense,
  by a nice argument approximating a given `f` above and below using separating functions.
  For each `x y : X`, we pick a function `g x y ∈ L` so `g x y x = f x` and `g x y y = f y`.
  By continuity these functions remain close to `f` on small patches around `x` and `y`.
  We use compactness to identify a certain finitely indexed infimum of finitely indexed supremums
  which is then close to `f` everywhere, obtaining the desired approximation.
* Finally we put these pieces together. `L = A.topological_closure` is a nonempty sublattice
  which separates points since `A` does, and so is dense (in fact equal to `⊤`).
## Future work
Prove the complex version for self-adjoint subalgebras `A`, by separately approximating
the real and imaginary parts using the real subalgebra of real-valued functions in `A`
(which still separates points, by taking the norm-square of a separating function).
Extend to cover the case of subalgebras of the continuous functions vanishing at infinity,
on non-compact Hausdorff spaces.

2021-05-01 18:03:22 d3c565d
feat(category_theory/monoidal): the monoidal coherence theorem (#7324)
This PR contains a proof of the monoidal coherence theorem, stated in the following way: if `C` is any type, then the free monoidal category over `C` is a preorder.
This should immediately imply the statement needed in the `coherence` branch.

2021-05-01 15:16:03 790ec6b
feat(algebra/archimedean): rat.cast_round for non-archimedean fields (#7424)
The theorem still applies to the non-canonical archimedean instance (at least if you use simp).  I've also added `rat.cast_ceil` because it seems to fit here.

2021-05-01 15:16:02 92b9048
chore(topology/continuous_function/algebra): put `coe_fn_monoid_hom `into the `continuous_map` namespace (#7423)
Rather than adding `continuous_map.` to the definition, this wraps everything in a namespace to make this type of mistake unlikely to happen again.
This also adds `comp_monoid_hom'` to golf a proof.

2021-05-01 09:09:54 5511275
chore(measure_theory/ae_eq_fun_metric): remove useless file (#7419)
The file `measure_theory/ae_eq_fun_metric.lean` used to contain an edistance on the space of equivalence classes of functions. It has been replaced by the use of the `L^1` space in #5510, so this file is now useless and should be removed.

2021-05-01 09:09:53 d04af20
feat(linear_algebra/quadratic_form): add lemmas about sums of quadratic forms (#7417)

2021-05-01 09:09:52 bf0f15a
chore(algebra/algebra/basic): add missing lemmas (#7412)

2021-05-01 06:41:10 e3de4e3
fix(algebra/direct_sum_graded): replace badly-stated and slow `simps` lemmas with manual ones  (#7403)
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/simps.20is.20very.20slow/near/236636962). The `simps mul` attribute on `direct_sum.ghas_mul.of_add_subgroups` was taking 44s, only to produce a lemma that wasn't very useful anyway.

2021-05-01 06:41:09 aa37eee
feat(analysis/special_functions/integrals): integral of `cos x ^ n` (#7402)
The reduction of `∫ x in a..b, cos x ^ n`, ∀ n ∈ ℕ, 2 ≤ n, as well as the integral of `cos x ^ 2` as a special case.

2021-05-01 06:41:08 2cc8128
feat(algebra/polynomial): generalize to `multiset` products (#7399)
This PR generalizes the results in `algebra.polynomial.big_operators` to sums and products of multisets.
The new multiset results are stated for `multiset.prod t`, not `(multiset.map t f).prod`. To get the latter, you can simply rewrite with `multiset.map_map`.

2021-05-01 00:19:22 d5d22c5
feat(algebra/squarefree): add sq_mul_squarefree lemmas (#7282)
Every positive natural number can be expressed as m^2 * n where n is square free. Used in #7274

2021-05-01 00:19:21 b51cee2
feat(data/polynomial/coeff): Add smul_eq_C_mul (#7240)
Adding a lemma `polynomial.smul_eq_C_mul` for single variate polynomials analogous to `mv_polynomial.smul_eq_C_mul` for multivariate.

2021-05-01 00:19:20 b88a9d1
feat(category_theory/enriched): abstract enriched categories (#7175)
# Enriched categories
We set up the basic theory of `V`-enriched categories,
for `V` an arbitrary monoidal category.
We do not assume here that `V` is a concrete category,
so there does not need to be a "honest" underlying category!
Use `X ⟶[V] Y` to obtain the `V` object of morphisms from `X` to `Y`.
This file contains the definitions of `V`-enriched categories and
`V`-functors.
We don't yet define the `V`-object of natural transformations
between a pair of `V`-functors (this requires limits in `V`),
but we do provide a presheaf isomorphic to the Yoneda embedding of this object.
We verify that when `V = Type v`, all these notion reduce to the usual ones.

2021-05-01 00:19:19 802c5b5
feat(linear_algebra/determinant): various operations preserve the determinant (#7115)
These are a couple of helper lemmas for computing the determinant of a Vandermonde matrix.

2021-05-01 00:19:18 6c61779
refactor(group_theory/order_of_element): use minimal_period for the definition (#7082)
This PR redefines `order_of_element` in terms of `function.minimal_period`. It furthermore introduces a predicate on elements of a finite group to be of finite order.
Co-authored by: Damiano Testa adomani@gmail.com

2021-04-30 20:11:22 16c8f7f
feat(algebraic_geometry/prime_spectrum): Basic opens are compact (#7411)
This proves that basic opens are compact in the zariski topology. Compactness of the whole space is then realized as a special case. Also adds a few lemmas about zero loci.

2021-04-30 20:11:21 aebe755
refactor(algebra/group_power): put lemmas about order and power in their own file (#7398)
This means `group_power/basic` has fewer dependencies, making it accessible earlier in the import graph.
The first two lemmas in this `basic` were moved to the end of `order`, but otherwise lemmas have been moved without modification and kept in the same order.
The new imports added in other files are the ones needed to make this build.

2021-04-30 20:11:19 6d5a120
refactor(linear_algebra/eigenspace): cleanup proof (#7337)
At some point we changed the proof of `exists_eigenvalue` so that it used the fact that any endomorphism of a vector space is integral. This means we don't actually need to pick a nonzero vector at any point, but the proof had been left in a hybrid state, which I've now cleaned up.
In a later PR I'll generalise this proof so it proves Schur's lemma.

2021-04-30 20:11:18 5800f69
feat(category_theory/Quiv): the free/forgetful adjunction between Cat and Quiv (#7158)

2021-04-30 14:55:00 64fdfc7
feat(category_theory/sites): construct a presieve from an indexed family of arrows (#7413)
For the LTE: alternate constructors for presieves which can be more convenient.

2021-04-30 10:14:07 4722dd4
feat(ring_theory/finiteness): add add_monoid_algebra.ft_of_fg (#7265)
This is from `lean_liquid`. We prove `add_monoid_algebra.ft_of_fg`: if `M` is a finitely generated monoid then `add_monoid_algebra R M` if finitely generated as `R-alg`.
The converse is also true, but the proof is longer and I wanted to keep the PR small.
- [x] depends on: #7279

2021-04-30 10:14:06 4a94b28
feat(category_theory/sites): Sheaves of structures (#5927)
Define sheaves on a site taking values in an arbitrary category.
Joint with @kbuzzard. cc: @jcommelin, this is a step towards condensed abelian groups.
I don't love the names here, design advice (particularly from those who'll use this) more than appreciated.
The main points are:
- An `A`-valued presheaf `P : C^op => A` is defined to be a sheaf (for the topology J) iff for every `X : A`, the type-valued presheaves of sets given by sending `U : C^op` to `Hom_{A}(X, P U)` are all sheaves of sets.
- When `A = Type`, this recovers the basic definition of sheaves of sets.
- An alternate definition when `C` is small, has pullbacks and `A` has products is given by an equalizer condition `is_sheaf'`.
- This is equivalent to the earlier definition.
- When `A = Type`, this is definitionally equal to the equalizer condition for presieves in sheaf_of_types.lean
- When `A` has limits and there is a functor `s : A => Type` which is faithful, reflects isomorphisms and preserves limits, then `P : C^op => A` is a sheaf iff the underlying presheaf of types `P >>> s : C^op => Type` is a sheaf. (cf https://stacks.math.columbia.edu/tag/0073, which is a weaker version of this statement (it's only over spaces, not sites) and https://stacks.math.columbia.edu/tag/00YR (a), which additionally assumes filtered colimits).
A couple of questions for reviewers:
- We've now got a ton of equivalent ways of showing something's a sheaf, and it's not the easiest to navigate between them. Is there a nice way around this? I think it's still valuable to have all the ways, since each can be helpful in different contexts but it makes the API a bit opaque. There's also a bit of inconsistency - there's a definition `yoneda_sheaf_condition` which is the same as `is_sheaf_for` but the equalizer conditions at the bottom of sheaf_of_types aren't named, they're just some `nonempty (is_limit (fork.of_ι _ (w P R)))` even though they're also equivalent.
- The name `presieve.is_sheaf` is stupid, I think I was just lazy with namespaces. I think `presieve.family_of_elements` and `presieve.is_sheaf_for` are still sensible, since they are relative to a presieve, but `is_sheaf` doesn't have any reference to presieves in its type. 
- The equalizer condition of sheaves of types is definitionally the same as the equalizer condition for sheaves of structures, so is there any point in having the former version in the library - the latter is just more general (the same doesn't apply to the actual def of sheaves of structures since that's defined in terms of sheaves of types). The main downside I can see is that it might make the proofs of `equalizer_sheaf_condition` a bit trickier, but that's about it

2021-04-30 05:44:03 f36cc16
chore(topology/category): some lemmas for Profinite functions (#7414)
Adds `concrete_category`  and `has_forget₂` instances for Profinite, and `id_app` and `comp_app` lemmas.

2021-04-30 05:44:02 c914e8f
refactor(data/fin): define neg like sub (#7408)
Define negation on fin in the same way as subtraction, i.e., using nat.mod (instead of computing it in the integers).

2021-04-30 05:44:01 39a1cf0
feat(group/hom_instances): add composition operators (#7407)
This adds the analogous definitions to those we have for `linear_map`, namely:
* `monoid_hom.comp_hom'` (c.f. `linear_map.lcomp`, `l` = `linear`)
* `monoid_hom.compl₂` (c.f. `linear_map.compl₂`, `l` = `left`)
* `monoid_hom.compr₂` (c.f. `linear_map.compr₂`, `r` = `right`)
We already have `monoid_hom.comp_hom` (c.f. `linear_map.llcomp`, `ll` = `linear linear`)
It also adds an `ext_iff₂` lemma, which is occasionally useful (but not present for any other time at the moment).
The order of definitions in the file has been shuffled slightly to permit addition of a subheading to group things in doc-gen

2021-04-30 00:14:20 413b426
feat(finset/basic): fill in holes in the finset API (#7386)
add basic lemmas about finsets

2021-04-29 23:00:13 6a796d0
refactor(algebraic_geometry/structure_sheaf): Remove redundant isomorphism (#7410)
Removes `stalk_iso_Type`, which is redundant since we also have `structure_sheaf.stalk_iso`, which is the same isomorphism in `CommRing`

2021-04-29 14:43:39 ca5176c
feat(linear_algebra/tensor_product): add definition `tensor_product.map_incl` and `simp` lemmas related to powers of `tensor_product.map` (#7406)

2021-04-29 14:43:38 966b3b1
feat(set_theory/{surreal, pgame}): `mul_comm` for surreal numbers  (#7376)
This PR adds a proof of commutativity of multiplication for surreal numbers. 
We also add `mul_zero` and `zero_mul` along with several useful lemmas.
Finally, this renames a handful of lemmas about `relabelling` in order to enable dot notation.
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Surreal.20numbers)

2021-04-29 12:50:46 c956353
chore(.docker): remove alpine build, too fragile (#7401)
If this is approved I'll remove the automatic builds of the `alpine` based images over on `hub.docker.com`.

2021-04-29 12:50:45 91604cb
feat(data/finsupp/to_dfinsupp): add equivalences between finsupp and dfinsupp (#7311)
A rework of #7217, that adds a more elementary equivalence.

2021-04-29 08:23:27 fda4d3d
feat(data/rat): add `@[simp]` to `rat.num_div_denom` (#7393)
I have an equation in rational numbers that I want to turn into an equation in integers, and everything `simp`s away nicely except the equation `x.num / x.denom = x`. Marking `rat.num_div_denom` as `simp` should fix that, and I don't expect it will break anything. (`rat.num_denom : rat.mk x.num x.denom = x` is already a `simp` lemma.)
Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60x.2Enum.20.2F.20x.2Edenom.20.3D.20x.60

2021-04-28 19:37:48 c50cb7a
feat(data/fintype/basic): add decidable_eq_(bundled-hom)_fintype (#7394)
Using the proof of `decidable_eq_equiv_fintype` for guidance, this adds equivalent statements about:
* `function.embedding`
* `zero_hom`
* `one_hom`
* `add_hom`
* `mul_hom`
* `add_monoid_hom`
* `monoid_hom`
* `monoid_with_zero_hom`
* `ring_hom`
It also fixes a typo that swaps `left` and `right` between two definition names.

2021-04-28 19:37:47 abf1c20
feat(linear_algebra/free_module): free of finite torsion free (#7381)
This is a reformulation of module.free_of_finite_type_torsion_free in terms of `ring_theory.finiteness` (combining my recent algebra PRs). Note this adds an import but it seems ok to me.

2021-04-28 19:37:46 b9c80c9
chore(*): use `sq` as convention for "squared" (#7368)
This PR establishes `sq x` as the notation for `x ^ 2`. See [this Zulip conversation](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/sqr.20vs.20sq.20vs.20pow_two/near/224972795).
A breakdown of the refactor:
- All instances of `square` and `sqr` are changed to `sq` (except where `square` means something other than "to the second power")
- All instances of `pow_two` are changed to `sq`, though many are kept are aliases
- All instances of `sum_of_two_squares` are changed to `sq_add_sq`
n.b. I did NOT alter any instances of:
- `squarefree`
- `sum_of_four_squares`
- `fpow_two` or `rpow_two`
<!-- The text above the `

2021-04-28 19:37:44 2401d99
feat(group_theory/finiteness): add group.fg (#7338)
Basic facts about finitely generated groups.
- [x] depends on: #7279

2021-04-28 19:37:43 4328cc3
feat(topology/continuous_function): abstract statement of Weierstrass approximation (#7303)

2021-04-28 14:47:13 e6a4c81
chore(algebra/module/submodule): mem_to_add_subgroup (#7392)

2021-04-28 14:47:12 052447d
feat(algebra/group/hom_instance): add add_monoid_hom.mul (#7382)

2021-04-28 13:06:40 a1b695a
feat(algbera/lie/submodule): add `simp` lemmas `lie_submodule.map_sup`, `lie_ideal.map_sup` (#7384)

2021-04-28 09:40:47 105935c
feat(linear_algebra/finite_dimensional): characterizations of finrank = 1 and ≤ 1 (#7354)

2021-04-28 06:27:58 f952dd1
refactor(algebra/big_operators/finprod, ring_theory/hahn_series): summable families now use `finsum` (#7388)
Adds a few `finprod/finsum` lemmas
Uses them to refactor `hahn_series.summable_family` to use `finsum`

2021-04-28 01:28:28 db89082
chore(.): remove stray file (#7390)
I accidentally committed a stray pdf file generated by `leanproject import-graph` during #7250, and it accidentally got merged into master!

2021-04-28 01:28:27 97118b4
fix(algebra/group/commute): use the right typeclass (#7389)
This section is called `mul_one_class`, but I forgot to actually make it use `mul_one_class` instead of `monoid` in a previous PR...

2021-04-28 01:28:26 d40a60c
feat(logic/embedding): add function.embedding.coe_injective (#7383)
Prior art for this lemma name: `linear_map.coe_injective`

2021-04-27 20:07:51 c562caf
fix(tactic/itauto): reset after or split (#7387)
Fixes a bug [reported on zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/.60ring.60.20tactic.20for.20types/near/236368947)

2021-04-27 20:07:50 a24d480
chore(.docker): fix alpine docker build (#7374)
A dependency for building mathlibtools had gained a requirement of having `make` available, so we install that.
This doesn't affect the produced image, and we only install `make` in an intermediate image.

2021-04-27 20:07:49 1ff56a0
feat(analysis/analytic): a few lemmas about summability and radius (#7365)
This PR adds a few lemmas relating the radius of a formal multilinear series `p` to the summability of `Σ ∥pₙ∥ ∥y∥ⁿ` (in both ways). There isn't anything incredibly new as these are mostly special cases of existing lemmas, but I think they could be simpler to find and use. I also modified the docstring of `formal_multilinear_series.radius` to emphasize the difference between "`Σ pₙ yⁿ`converges" and "`Σ ∥pₙ∥ ∥y∥ⁿ` converges".

2021-04-27 15:04:08 5247d00
feat(algebra/group_with_zero): add semigroup_with_zero (#7346)
Split from #6786. By putting the new typeclass _before_ `mul_zero_one_class`, it doesn't need any annotations on `zero_ne_one` as the original PR did.

2021-04-27 15:04:06 78a20ff
feat(data/buffer/parser/basic): nat_eq_done (#6340)
The `nat` parser gives the maximal possible numeral.

2021-04-27 11:31:38 5263ea3
chore(algebra/lie/{abelian,tensor_product}): rename `maximal_trivial_submodule` → `max_triv_submodule` (#7385)
cf https://github.com/leanprover-community/mathlib/pull/7313#discussion_r619995552

2021-04-27 11:31:37 e7bd3ca
docs(overview): Add some recent work by Yury (#7378)
Hausdorff measure and Urysohn's lemma

2021-04-27 11:31:36 efeeaca
feat(analysis/special_functions/integrals): integral of `sin x ^ n` (#7372)
The reduction of `∫ x in a..b, sin x ^ n`, ∀ n ∈ ℕ, 2 ≤ n.
We had this for the integral over [0, π] but I don't see any reason not to generalize it to any [a, b].
This also allows for the derivation of the integral of `sin x ^ 2` as a special case.

2021-04-27 11:31:35 18403ac
feat(topology/separation): change regular_space definition, added t1_characterisation and definition of Urysohn space (#7367)
This PR changes the definition of regular_space becouse the previous definition requests t1_space and it's posible to only require t0_space as a condition. Due to that change, we had to reformulate the prove of the lemma separed_regular in src/topology/uniform_space/separation.lean adding the t0 condition.
We've also define the Uryson space , with his respectives lemmas about the relation with `T_2` and `T_3`, and prove the relation between the definition of t1_space from mathlib and the common definition with open sets.

2021-04-27 07:21:32 287492c
refactor(ring_theory/hahn_series): non-linearly-ordered Hahn series (#7377)
Refactors Hahn series to use `set.is_pwo` instead of `set.is_wf`, allowing them to be defined on non-linearly-ordered monomial types

2021-04-27 07:21:31 57cc384
chore(integration): missing lemmas (#7364)
These are still preliminaries for derivation of parametric integrals.
From the sphere eversion project

2021-04-27 07:21:30 241400f
feat(analysis/seminorm): lemmas on balanced sets (#7358)
Adds lemmas about operations on balanced sets and golfs a proof.

2021-04-27 07:21:29 20c520a
feat(algebra/opposite): inversion is a mul_equiv to the opposite group (#7330)
This also splits out `monoid_hom.to_opposite` from `ring_hom.to_opposite`, and adds `add_equiv.neg` and `mul_equiv.inv` for the case when the `(add_)group` is commutative.

2021-04-27 07:21:28 465cf5a
feat(category_theory/abelian): biproducts of projective objects are projective (#7319)
Also all objects of `Type` are projective.

2021-04-27 07:21:26 874780f
feat(data/quot): rec_on_subsingleton2' (#7294)

2021-04-27 07:21:25 a3f589c
feat(analysis/calculus/deriv): `has_deriv_at.continuous_on` (#7260)
See [Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/has_deriv_at.2Econtinuous_on/near/235034547).

2021-04-27 07:21:24 4f9543b
feat(data/polynomial): lemma about aeval on functions, and on subalgebras (#7252)

2021-04-27 07:21:23 89c27cc
feat(category/subobjects): more API on limit subobjects (#7203)

2021-04-27 07:21:22 40b15f2
feat(algebra/direct_sum): state what it means for a direct sum to be internal (#7190)
The goal here is primarily to tick off the item in undergrad.yml.
We'll want some theorems relating this statement to independence / spanning of the submodules, but I'll leave those for someone else to follow-up with.
We end up needing three variants of this - one for each of add_submonoids, add_subgroups, and submodules.

2021-04-27 05:47:11 2d8ed1f
chore(group_theory/eckmann_hilton): use `mul_one_class` and `is_(left|right)_id` (#7370)
This ties these theorems slightly more to the rest of mathlib.
The changes are:
* `eckmann_hilton.comm_monoid` now promotes a `mul_one_class` to a `comm_monoid` rather than taking two `is_unital` objects. This makes it consistent with `eckmann_hilton.comm_group`.
* `is_unital` is no longer a `class`, since it never had any instances and was never used as a typeclass argument.
* `is_unital` is now defined in terms of `is_left_id` and `is_right_id`.
* `add_group.is_unital` has been renamed to `eckmann_hilton.add_zero_class.is_unital` - the missing namespace was an accident, and the definition works much more generally than it was originally stated for.

2021-04-27 04:33:28 1742443
refactor(archive/imo) shorten imo1013_q5 using pow_unbounded_of_one_lt (#7373)
Replaces a usage of `one_add_mul_sub_le_pow` with the more direct `pow_unbounded_of_one_lt`.

2021-04-26 22:18:45 3093fd8
chore(algebra/category/*): use by apply to speed up elaboration (#7360)
A few more speed ups.

2021-04-26 18:22:46 a5cb13a
feat(order/zorn): upward inclusion variant of Zorn's lemma (#7362)
add zorn_superset
This also add various missing bits of whitespace throughout the file.

2021-04-26 13:34:11 5ac79a6
feat(algebra/lie/tensor_product): prove `lie_submodule.lie_ideal_oper_eq_tensor_map_range` (#7313)
The lemma `coe_lift_lie_eq_lift_coe` also introduced here is an unrelated change but is a stronger form of `lift_lie_apply` that is worth having.
See also this [Zulip remark](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60linear_map.2Erange_eq_map.60.20vs.20.60submodule.2Emap_top.60/near/235845192) concerning the proposed library note.

2021-04-26 13:34:10 35b9d9c
feat(group_theory/finiteness): add submonoid.fg (#7279)
I introduce here the notion of a finitely generated monoid (not necessarily commutative) and I prove that the notion is preserved by `additive`/`multiplicative`.
A natural continuation is of course to introduce the same notion for groups.

2021-04-26 09:22:21 5258669
feat(topology/unit_interval): affine homeomorphisms of intervals (#7250)

2021-04-26 06:03:18 c22de3f
chore(algebra/lie/nilpotent): make proof of `module.derived_series_le_lower_central_series` less refl-heavy (#7359)
According to the list in [this Zulip remark](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20repo.20GitHub.20actions.20queue/near/235996204)
this lemma was the slowest task for Leanchecker.
The changes here should help. Using `set_option profiler true`, I see
about a ten-fold speedup in elaboration time for Lean, from approximately
2.4s to 0.24s

2021-04-25 19:05:15 9526061
feat(data/nat/fib): add a strict monotonicity lemma. (#7317)
Prove strict monotonicity of `fib (n + 2)`.
With thanks to @b-mehta and @dwarn.

2021-04-25 15:13:07 4e0c460
chore(analysis/special_functions/integrals): reorganize file (#7351)

2021-04-25 15:13:06 dbc9cf9
feat(data/matrix/basic): transform vec_mul to mul_vec (#7348)

2021-04-25 15:13:05 d5cb403
chore(ring_theory/ideal/operations): golf and remove @ (#7347)
Instead of passing all these arguments explicitly, it's sufficient to just use `(... : _)` to get the elaborator to do the right thing.
This makes this proof less fragile to argument changes to `pi.ring_hom`, such as the planned generalization to non-associative rings

2021-04-25 15:13:04 3821d31
feat(ring_theory): fg_iff_exists_fin_generating_fam (#7343)

2021-04-25 15:13:03 9cc3d80
feat(linear_algebra): free_of_finite_type_torsion_free (#7341)
A finite type torsion free module over a PID is free.
There are also some tiny preliminaries, and I moved `submodule.map_span` to `linear_map.map_span` to allow using the dot notation more often.

2021-04-25 10:09:22 8e4ef23
refactor(*): kill int multiplication diamonds (#7255)
Insert a data field `gsmul` in `add_comm_group` containing a Z-action, and use it to make sure that all diamonds related to `Z` -actions disappear.
Followup to #7084

2021-04-25 05:29:14 d052c52
feat(order/extension): extend partial order to linear order (#7142)
Adds a construction to extend a partial order to a linear order. Also fills in a missing Zorn variant.

2021-04-25 03:55:19 d5330fe
chore(algebra/category): remove duplicated proofs (#7349)
The results added in #7100 already exist. I moved them to the place where Scott added the duplicates. Hopefully that will make them more discoverable.

2021-04-24 22:17:12 6b2bb8a
feat(data/finsupp): to_multiset symm apply (#7356)
Adds a lemma and golfs a proof.

2021-04-24 22:17:11 beb694b
feat(data/list/basic): assorted list lemmas (#7296)

2021-04-24 22:17:10 7716870
feat(data/list/forall2): defines sublist_forall2 relation (#7165)
Defines the `sublist_forall₂` relation, indicating that one list is related by `forall₂` to a sublist of another.
Provides two lemmas, `head_mem_self` and `mem_of_mem_tail`, which will be useful when proving Higman's Lemma about the `sublist_forall₂` relation.

2021-04-24 19:36:55 2ecd65e
feat(archive/imo): IMO 2001 Q2 (#7238)
Formalization of IMO 2001/2

2021-04-24 19:36:54 8f8b194
feat(linear_algebra): Lagrange formulas for expanding `det` along a row or column (#6897)
This PR proves the full Lagrange formulas for writing the determinant of a `n+1 × n+1` matrix as an alternating sum of minors. @pechersky and @eric-wieser already put together enough of the pieces so that `simp` could apply this formula to matrices of a known size. In the end I still had to apply a couple of permutations (`fin.cycle_range` defined in #6815) to the entries to get to the "official" formula.

2021-04-24 19:36:54 f83ae59
feat(group_theory/nielsen_schreier): subgroup of free group is free (#6840)
Prove that a subgroup of a free group is itself free

2021-04-24 15:20:39 46ceb36
refactor(*): rename `semimodule` to `module`, delete typeclasses `module` and `vector_space` (#7322)
Splitting typeclasses between `semimodule`, `module` and `vector_space` was causing many (small) issues, so why don't we just get rid of this duplication?
This PR contains the following changes:
 * delete the old `module` and `vector_space` synonyms for `semimodule`
 * find and replace all instances of `semimodule` and `vector_space` to `module`
 * (thereby renaming the previous `semimodule` typeclass to `module`)
 * rename `vector_space.dim` to `module.rank` (in preparation for generalizing this definition to all modules)
 * delete a couple `module` instances that have now become redundant
This find-and-replace has been done extremely naïvely, but it seems there were almost no name clashes and no "clbuttic mistakes". I have gone through the full set of changes, finding nothing weird, and I'm fixing any build issues as they come up (I expect less than 10 declarations will cause conflicts).
Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/module.20from.20semimodule.20over.20a.20ring
A good example of a workaround required by the `module` abbreviation is the [`triv_sq_zero_ext.module` instance](https://github.com/leanprover-community/mathlib/blob/3b8cfdc905c663f3d99acac325c7dff1a0ce744c/src/algebra/triv_sq_zero_ext.lean#L164).

2021-04-24 10:16:02 f15887a
chore(docs/100.yaml): mention "Erdős–Szekeres" by name (#7353)

2021-04-24 10:16:00 767c8c5
feat(data/int/basic): add nat_abs_ne_zero (#7350)

2021-04-24 02:33:48 27cd5c1
feat(group_theory/{perm/cycle_type, specific_groups/alternating_group}): the alternating group is generated by 3-cycles (#6949)
Moves the alternating group to a new file, renames `alternating_subgroup` to `alternating_group`
Proves that any permutation whose support has cardinality 3 is a cycle
Defines `equiv.perm.is_three_cycle`
Shows that the alternating group is generated by 3-cycles

2021-04-23 20:45:18 bbd9362
feat(topology/algebra): uniform continuity from 0 (#7318)
From https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Linear.20map.20is.20continuous.20if.20it's.20continuous.20at.20zero/near/234714207, thanks to @PatrickMassot.

2021-04-23 15:54:59 d89f93a
refactor(field_theory/algebraic_closure): move complex.is_alg_closed (#7344)
This avoids having to import half of analysis in order to talk about eigenspaces.

2021-04-23 15:54:58 bb2e7f9
feat(algebra/star/pi): star operates elementwise on pi types (#7342)

2021-04-23 15:54:57 a5b5f6c
chore(algebra/opposite): add missing `monoid_with_zero` instance (#7339)
Along with the `mul_zero_one_class` and `mul_zero_class` instances needed to build it

2021-04-23 15:54:56 6c09295
feat(analysis/specific_limits): basic ratio test for summability of a nat-indexed family (#7277)

2021-04-23 11:02:02 33ea698
feat(linear_algebra/tensor_product): characterise range of tensor product of two linear maps (#7340)

2021-04-23 11:02:00 227c42d
doc(field_theory/minpoly): improve some doc-strings (#7336)

2021-04-23 11:01:59 3a8f9db
feat(logic/function/basic): function.involutive.eq_iff (#7332)
The lemma name matches the brevity of `function.injective.eq_iff`.
The fact the definitions differ isn't important, as both are accessible from `hf : involutive f` as `hf.eq_iff` and `hf.injective.eq_iff`.

2021-04-23 11:01:58 15b4fe6
chore(algebra/iterate_hom): generalize `iterate_map_one` and `iterate_map_mul` to mul_one_class (#7331)

2021-04-23 11:01:57 4b065bf
feat(data/matrix/basic): add lemma for assoc of mul_vec w.r.t. smul (#7310)
Add a new lemma for the other direction of smul_mul_vec_assoc, which works on commutative rings.

2021-04-23 07:17:04 6f3d905
refactor(ring_theory/polynomial/content): Define is_primitive more generally (#7316)
The lemma `is_primitive_iff_is_unit_of_C_dvd` shows that `polynomial.is_primitive` can be defined without the `gcd_monoid` assumption.

2021-04-23 07:17:03 5bd96ce
feat(algebra/group/pi): pow_apply (#7302)

2021-04-23 07:17:02 85df3a3
refactor(group_theory/submonoid/basic): merge together similar lemmas and definitions (#7280)
This uses `simps` to generate lots of uninteresting coe lemmas, and removes the less-bundled versions of definitions.
The main changes are:
* `add_submonoid.to_submonoid_equiv` is now just called `add_submonoid.to_submonoid`. This means we can remove the `add_submonoid.to_submonoid_mono` lemma, as that's available as `add_submonoid.to_submonoid.monotone`. Ditto for the multiplicative version.
* `simps` now knows how to handled `(add_)submonoid` objects. Unfortunately it uses `coe` as a suffix rather than a prefix, so we can't use it everywhere yet. For now we restrict its use to just these additive / multiplicative lemmas which already had `coe` as a suffix.
* `submonoid.of_add_submonoid` has been renamed to `add_submonoid.to_submonoid'` to enable dot notation.
* `add_submonoid.of_submonoid` has been renamed to `submonoid.to_add_submonoid'` to enable dot notation.
* The above points, but applied to `(add_)subgroup`
* Two new variants of the closure lemmas about `add_submonoid` (`add_submonoid.to_submonoid'_closure` and `submonoid.to_add_submonoid'_closure`), taken from #7279

2021-04-23 07:17:01 0070d22
feat(algebra/category/Module): mono_iff_injective (#7100)
We should also prove `epi_iff_surjective` at some point. In the `Module` case this doesn't fall out of an adjunction, but it's still true.

2021-04-23 06:00:43 b77916d
feat(algebraic_geometry/Scheme): improve cosmetics of definition (#7325)
Purely cosmetic, but the definition is going on a poster, so ...

2021-04-23 04:34:57 40bb51e
chore(scripts): update nolints.txt (#7334)
I am happy to remove some nolints for you!

2021-04-23 00:41:31 2bd09f0
chore(geometry/manifold/instances/circle): provide instance (#7333)
Assist typeclass inference when proving the circle is a Lie group, by providing an instance.
(Mostly cosmetic, but as this proof is going on a poster I wanted to streamline.)

2021-04-23 00:41:30 1e1e93a
feat(data/list/zip): distributive lemmas (#7312)

2021-04-22 20:22:25 b401f07
feat(src/group_theory/subgroup): add closure.submonoid.closure (#7328)
`subgroup.closure S` equals `submonoid.closure (S ∪ S⁻¹)`.

2021-04-22 20:22:24 aff758e
feat(data/nat/gcd, ring_theory/int/basic): add some basic lemmas (#7314)
This also reduces the dependency on definitional equalities a but

2021-04-22 20:22:23 f8464e3
chore(computability/language): golf some proofs (#7301)

2021-04-22 20:22:22 0521e2b
feat(data/list/nodup): nodup.ne_singleton_iff (#7298)

2021-04-22 20:22:21 1c07dc0
feat(algebra/big_operators): `prod_ite_of_{true, false}`. (#7291)

2021-04-22 20:22:20 a104211
feat(data/list): suffix_cons_iff (#7287)

2021-04-22 20:22:19 98ccc66
feat(algebra/lie/tensor_product): define (binary) tensor product of Lie modules (#7266)

2021-04-22 20:22:18 fa49a63
feat(set/lattice): nonempty_of_union_eq_top_of_nonempty (#7254)
I have no idea where these lemmas belong. This is the earliest possible point. But perhaps they are too specific, and only belong at the point of use? I'm not certain here.

2021-04-22 20:22:16 1585b14
feat(group_theory/perm/*): Generating S_n (#7211)
This PR proves several lemmas about generating S_n, culminating in the following result:
If H is a subgroup of S_p, and if H has cardinality divisible by p, and if H contains a transposition, then H is all of S_p.

2021-04-22 20:22:15 6929740
refactor(algebra/big_operators/finprod) move finiteness assumptions to be final parameters (#7196)
This PR takes all the finiteness hypotheses in `finprod.lean` and moves them back to be the last parameters of their lemmas. this only affects a handful of them because the API is small, and nothing else relies on it yet. This change is to allow for easier rewriting in cases where finiteness goals can be easily discharged, such as where a `fintype` instance is present. 
I also added `t` as an explicit parameter in `finprod_mem_inter_mul_diff` and the primed version, since it may be useful to invoke the lemma in cases where it can't be inferred, such as when rewriting in reverse.

2021-04-22 20:22:14 a1f3ff8
feat(algebra/lie/nilpotent): basic lemmas about nilpotency (#7181)

2021-04-22 14:56:29 a28012c
feat(algebra/monoid_algebra): add mem.span_support (#7323)
A (very) easy lemma about `monoid_algebra`.

2021-04-22 14:56:28 3d2fec5
feat(algebra/group_power/basic): `pow_ne_zero_iff` and `pow_pos_iff` (#7307)
For natural `n > 0`, 
- `a ^ n ≠ 0 ↔ a ≠ 0`
- `0 < a ^ n ↔ 0 < a` where `a` is a member of a `linear_ordered_comm_monoid_with_zero`

2021-04-22 14:56:27 1f65e42
feat(category_theory/adjunction): reflective adjunction induces partial bijection (#7286)

2021-04-22 14:56:26 e5e0ae7
chore(data/set/intervals/image_preimage): remove unnecessary add_comm in lemmas (#7276)
These lemmas introduce an unexpected flip of the addition, whereas without these lemmas the simplification occurs as you might expect. Since these lemmas aren't otherwise used in mathlib, it seems simplest to just remove them.
Let me know if I'm missing something, or some reason to prefer flipping the addition.

2021-04-22 14:56:25 56bedb4
feat(analysis/special_functions/exp_log): `continuous_on_exp`/`pow` (#7243)

2021-04-22 14:56:24 918aea7
refactor(algebra/ring_quot.lean): make ring_quot irreducible (#7120)
The quotient of a ring by an equivalence relation which is compatible with the operations is still a ring. This is used to define several objects such as tensor algebras, exterior algebras, and so on, but the details of the construction are irrelevant. This PR makes `ring_quot` irreducible to keep the complexity down.

2021-04-22 10:34:46 5ac093c
fix(.github/workflows): missing closing parentheses in add_label_from_*.yml (#7320)

2021-04-22 10:34:45 2deda90
feat(data/fin): help `simp` reduce expressions containing `fin.succ_above` (#7308)
With these `simp` lemmas, in combination with #6897, `simp; ring` can almost automatically compute the determinant of matrices like `![![a, b], ![c, d]]`.

2021-04-22 10:34:43 8b7014b
fix(data/finset/lattice): sup'/inf' docstring (#7281)
Made proper reference to `f` in the doc string.

2021-04-22 10:34:41 8c05ff8
feat(set_theory/surreal): add ordered_add_comm_group instance for surreal numbers (#7270)
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Surreal.20numbers/near/235213851)
Add ordered_add_comm_group instance for surreal numbers.

2021-04-22 10:34:39 96d5730
feat(topology/continuous_function): lemmas about pointwise sup/inf (#7249)

2021-04-22 10:34:37 4591eb5
chore(category_theory): replace has_hom with quiver (#7151)

2021-04-22 10:34:36 8830a20
refactor(geometry/manifold): redefine some instances (#7124)
* Turn `unique_diff_within_at` into a `structure`.
* Generalize `tangent_cone_at`, `unique_diff_within_at`, and `unique_diff_on` to a `semimodule` that is a `topological_space`.
* Redefine `model_with_corners_euclidean_half_space` and `model_with_corners_euclidean_quadrant` to reuse more generic lemmas, including `unique_diff_on.pi` and `unique_diff_on.univ_pi`.
* Make `model_with_corners.unique_diff'` use `target` instead of `range I`; usually it has better defeq.

2021-04-22 06:38:11 767d248
doc(data/finset/basic): fix confusing typo (#7315)

2021-04-22 06:38:10 3fb9823
feat(topology/subset_properties): variant of elim_nhds_subcover for compact_space (#7304)
I put this in the `compact_space` namespace, although dot notation won't work so if preferred I can move it back to `_root_`.

2021-04-22 06:38:09 b3b74f8
feat(data/finset/basic): list.to_finset on list ops (#7297)

2021-04-22 06:38:08 55a1e65
feat(category_theory/adjunction): construct an adjunction on the over category (#7290)
Pretty small PR in preparation for later things.

2021-04-22 06:38:07 d9df8fb
chore(category_theory/subterminal): update docstring (#7289)

2021-04-22 06:38:05 07e9dd4
feat(data/nat/prime): nat.factors_eq_nil and other trivial simp lemmas (#7284)

2021-04-22 01:02:34 6deafc2
chore(.github/workflows): add delegated tag on comment (#7251)
This automation should hopefully add the "delegated" tag if a maintainer types `bors d+` or `bors d=`. (In fact, it will apply the label if it sees any line starting with `bors d`, since `bors delegate+`, etc. are also allowed).

2021-04-22 01:02:33 f68645f
feat(topology/continuous_function): change formulation of separates points strongly (#7248)

2021-04-22 01:02:32 22f96fc
chore(topology/algebra/affine): add @continuity to line_map_continuous (#7246)

2021-04-22 01:02:31 afa6b72
feat(geometry/euclidean): proof of Freek thm 55 - product of chords (#7139)
proof of thm 55

2021-04-22 01:02:29 dac1da3
feat(analysis/special_functions/bernstein): Weierstrass' theorem: polynomials are dense in C([0,1]) (#6497)
# Bernstein approximations and Weierstrass' theorem
We prove that the Bernstein approximations
```
∑ k : fin (n+1), f (k/n : ℝ) * n.choose k * x^k * (1-x)^(n-k)
```
for a continuous function `f : C([0,1], ℝ)` converge uniformly to `f` as `n` tends to infinity.
Our proof follows Richard Beals' *Analysis, an introduction*, §7D.
The original proof, due to Bernstein in 1912, is probabilistic,
and relies on Bernoulli's theorem,
which gives bounds for how quickly the observed frequencies in a
Bernoulli trial approach the underlying probability.
The proof here does not directly rely on Bernoulli's theorem,
but can also be given a probabilistic account.
* Consider a weighted coin which with probability `x` produces heads,
  and with probability `1-x` produces tails.
* The value of `bernstein n k x` is the probability that
  such a coin gives exactly `k` heads in a sequence of `n` tosses.
* If such an appearance of `k` heads results in a payoff of `f(k / n)`,
  the `n`-th Bernstein approximation for `f` evaluated at `x` is the expected payoff.
* The main estimate in the proof bounds the probability that
  the observed frequency of heads differs from `x` by more than some `δ`,
  obtaining a bound of `(4 * n * δ^2)⁻¹`, irrespective of `x`.
* This ensures that for `n` large, the Bernstein approximation is (uniformly) close to the
  payoff function `f`.
(You don't need to think in these terms to follow the proof below: it's a giant `calc` block!)
This result proves Weierstrass' theorem that polynomials are dense in `C([0,1], ℝ)`,
although we defer an abstract statement of this until later.

2021-04-21 19:58:09 f2984d5
fix(data/{finsupp,polynomial,mv_polynomial}/basic): add missing decidable arguments (#7309)
Lemmas with an `ite` in their conclusion should not use `classical.dec` or similar, instead inferring an appropriate decidability instance from their context. This eliminates a handful of converts elsewhere.
The linter in #6485 should eventually find these automatically.

2021-04-21 19:58:08 120be3d
feat(data/list/zip): map_zip_with (#7295)

2021-04-21 19:58:07 253d4f5
feat(analysis/normed_space/dual): generalize to seminormed space (#7262)
We generalize here the Hahn-Banach theorem and the notion of dual space to `semi_normed_space`.

2021-04-21 19:58:06 700d477
feat(analysis/special_functions/integrals): integral_comp for `f : ℝ → ℝ` (#7216)
In #7103 I added lemmas to deal with integrals of the form `c • ∫ x in a..b, f (c * x + d)`. However, it came to my attention that, with those lemmas, `simp` can only handle such integrals if they use `•`, not `*`. To solve this problem and enable computation of these integrals by `simp`, I add versions of the aforementioned `integral_comp` lemmas specialized with `f : ℝ → ℝ` and label them with `simp`.

2021-04-21 19:58:05 721e0b9
feat(order/complete_lattice): independence of an indexed family (#7199)
This PR reclaims the concept of `independent` for elements of a complete lattice. 
Right now it's defined on subsets -- a subset of a complete lattice L is independent if every
element of it is disjoint from (i.e. bot is the meet of it with) the Sup of all the other elements. 
The problem with this is that if you have an indexed family f:I->L of elements of L then
duplications get lost if you ask for the image of f to be independent (rather like the issue
with a basis of a vector space being a subset rather than an indexed family). This is
an issue when defining gradings on rings, for example: if M is a monoid and R is
a ring, then I don't want the map which sends every m to (top : subgroup R) to
be independent. 
I have renamed the set-theoretic version of `independent` to `set_independent`

2021-04-21 19:58:03 66220ac
chore(tactic/elementwise): fixes (#7188)
These fixes, while an improvement, still don't fix the problem @justus-springer observed in #7092.
Really we should generate a second copy of the `_apply` lemma, with the category specialized to `Type u`, and in that one remove all the coercions. Maybe later.

2021-04-21 09:38:17 f08fe5f
doc(data/quot): promote a comment to a docstring (#7306)

2021-04-21 09:38:16 7db1181
feat(data/dfinsupp): copy map_range defs from finsupp (#7293)
This adds the bundled homs:
* `dfinsupp.map_range.add_monoid_hom`
* `dfinsupp.map_range.add_equiv`
* `dfinsupp.map_range.linear_map`
* `dfinsupp.map_range.linear_equiv`
and lemmas
* `dfinsupp.map_range_zero`
* `dfinsupp.map_range_add`
* `dfinsupp.map_range_smul`
For which we already have identical lemmas for `finsupp`.
Split from #7217, since `map_range.add_equiv` can be used in conjunction with `submonoid.mrange_restrict`

2021-04-21 09:38:15 80028f3
feat(data/finset/lattice): add `comp_sup'_eq_sup'_comp`, golf some proofs (#7275)
The proof is just a very marginally generalized version of the previous proof for `sup'_apply`.

2021-04-21 04:20:35 9b8d6e4
feat(category_theory/monoidal): Drinfeld center (#7186)
# Half braidings and the Drinfeld center of a monoidal category
We define `center C` to be pairs `⟨X, b⟩`, where `X : C` and `b` is a half-braiding on `X`.
We show that `center C` is braided monoidal,
and provide the monoidal functor `center.forget` from `center C` back to `C`.
## Future work
Verifying the various axioms here is done by tedious rewriting.
Using the `slice` tactic may make the proofs marginally more readable.
More exciting, however, would be to make possible one of the following options:
1. Integration with homotopy.io / globular to give "picture proofs".
2. The monoidal coherence theorem, so we can ignore associators
   (after which most of these proofs are trivial;
   I'm unsure if the monoidal coherence theorem is even usable in dependent type theory).
3. Automating these proofs using `rewrite_search` or some relative.

2021-04-21 04:20:34 923314f
refactor(order/well_founded_set): partially well ordered sets using relations other than `has_le.le` (#7131)
Introduces `set.partially_well_ordered_on` to generalize `set.is_partially_well_ordered` to relations that do not necessarily come from a `has_le` instance
Renames `set.is_partially_well_ordered` to `set.is_pwo` in analogy with `set.is_wf`
Prepares to refactor Hahn series to use `set.is_pwo` and avoid the assumption of a linear order

2021-04-21 04:20:32 02a3133
feat(group_theory/{order_of_element, perm/cycles}): two cycles are conjugate iff their supports have the same size (#7024)
Separates out the `equiv`s from several proofs in `group_theory/order_of_element`.
The equivs defined: `fin_equiv_powers`, `fin_equiv_gpowers`, `powers_equiv_powers`, `gpowers_equiv_gpowers`.
Shows that two cyclic permutations are conjugate if and only if their supports have the same `finset.card`.

2021-04-21 00:48:48 8481bf4
feat(algebra/algebra/basic): add alg_hom.apply (#7278)
This also renames some variables from α to R for readability

2021-04-21 00:48:47 4abf961
feat(algebra/big_operators): product over coerced fintype (#7236)

2021-04-21 00:48:46 ad58861
refactor(group_theory/submonoid): adjust definitional unfolding of add_monoid_hom.mrange to match set.range (#7227)
This changes the following to unfold to `set.range`:
* `monoid_hom.mrange`
* `add_monoid_hom.mrange`
* `linear_map.range`
* `lie_hom.range`
* `ring_hom.range`
* `ring_hom.srange`
* `ring_hom.field_range`
* `alg_hom.range`
For example:
```lean
import ring_theory.subring
variables (R : Type*) [ring R] (f : R →+* R)
-- before this PR, these required `f '' univ` on the RHS
example : (f.range : set R) = set.range f := rfl
example : (f.srange : set R) = set.range f := rfl
example : (f.to_monoid_hom.mrange : set R) = set.range f := rfl
-- this one is unchanged by this PR
example : (f.to_add_monoid_hom.range : set R) = set.range f := rfl
```
The motivations behind this change are that
* It eliminates a lot of `∈ set.univ` hypotheses and goals that are just annoying
* it means that an equivalence like `A ≃ set.range f` is defeq to `A ≃ f.range`, with no need to insert awkward `equiv.cast`-like terms to translate between different approaches
* `monoid_hom.range` (as opposed to `mrange`) already used this pattern.
The number of lines has gone up a bit, but most of those are comments explaining the design choice.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60set.2Erange.20f.60.20vs.20.60f.20''.20univ.60/near/234893679)

2021-04-20 11:17:03 9bdc555
feat(algebraic_geometry/prime_spectrum): More lemmas (#7244)
Adding and refactoring some lemmas about zero loci and basic opens. Also adds three lemmas in `ideal/basic.lean`.

2021-04-20 11:17:02 39d23b8
feat(logic/basic): exists_or_eq_{left,right} (#7224)

2021-04-20 09:55:49 bf22ab3
feat(linear_algebra/bilinear_form): Unique adjoints with respect to a nondegenerate bilinear form (#7071)

2021-04-20 07:56:28 a4f59bd
feat(category_theory/subobject): easy facts about the top subobject (#7267)

2021-04-20 07:56:27 0c721d5
feat(algebra/lie/abelian): expand API for `lie_module.maximal_trivial_submodule` (#7235)

2021-04-20 07:56:26 944ffff
chore(combinatorics/quiver): make quiver a class (#7150)

2021-04-20 07:56:25 5e188d2
feat(category_theory/abelian): definition of projective object (#7108)
This is extracted from @TwoFX's `projective` branch, with some slight tweaks (make things `Prop` valued classes), and documentation.
This is just the definition of `projective` and `enough_projectives`, with no attempt to construct projective resolutions. I want this in place because constructing projective resolutions will hopefully be a good test of experiments with chain complexes.

2021-04-20 03:28:21 013a84e
chore(scripts): update nolints.txt (#7272)
I am happy to remove some nolints for you!

2021-04-20 03:28:20 8bf9fd5
chore(data/list): drop `list.is_nil` (#7269)
We have `list.empty` in Lean core.

2021-04-20 00:10:36 3ad4dab
chore(algebra/*): add back nat_algebra_subsingleton and add_comm_monoid.nat_semimodule.subsingleton (#7263)
As suggested in https://github.com/leanprover-community/mathlib/pull/7084#discussion_r613195167.
Even if we now have a design solution that makes this unnecessary, it still feels like a result worth stating.

2021-04-19 14:03:21 0dfac6e
chore(*): speed up slow proofs (#7253)
Proofs that are too slow for the forthcoming `gsmul` refactor. I learnt that `by convert ...` is extremely useful even to close a goal, when elaboration using the expected type is a bad idea.

2021-04-19 14:03:20 829d773
feat(algebra/module/submodule_lattice): add lemmas for nat submodules (#7221)
This has been suggested by @eric-wieser (who also wrote everything) in #7200.
This also:
* Merges `span_nat_eq_add_group_closure` and `submodule.span_eq_add_submonoid.closure` which are the same statement into `submodule.span_nat_eq_add_submonoid_closure`, which generalizes the former from `semiring` to `add_comm_monoid`.
* Renames `span_int_eq_add_group_closure` to `submodule.span_nat_eq_add_subgroup_closure`, and generalizes it from `ring` to `add_comm_group`.

2021-04-19 09:07:23 6f0c4fb
feat(data/{int, nat}/parity): rename `ne_of_odd_sum` (#7261)
`ne_of_odd_sum` becomes `ne_of_odd_add`.

2021-04-19 09:07:22 fc5e8cb
chore(algebra/group): missed generalizations to mul_one_class (#7259)
This adds a missing `ulift` instance, relaxes some lemmas about `semiconj` and `commute` to apply more generally, and broadens the scope of the definitions `monoid_hom.apply` and `ulift.mul_equiv`.

2021-04-19 09:07:20 184e0fe
fix(equiv/ring): fix bad typeclasses on ring_equiv.trans_apply (#7258)
`ring_equiv.trans` had weaker typeclasses than the lemma which unfolds it.

2021-04-19 09:07:19 77f5fb3
feat(linear_algebra/eigenspace): `mem_maximal_generalized_eigenspace` (#7162)

2021-04-19 09:07:16 15a64f5
feat(algebra/module/projective): add projective module (#6813)
Definition and universal property of projective modules; free modules are projective.

2021-04-19 09:07:14 272e2d2
feat(data/{int, nat, rat}/cast): extensionality lemmas (#6788)
Extensionality lemmas

2021-04-19 06:54:49 43f63d9
feat(topology/algebra/ordered): IVT for the unordered interval (#7237)
A version of the Intermediate Value Theorem for `interval`.
Co-authored by @ADedecker

2021-04-19 02:29:20 5993b90
feat(tactic/simps): use new options in library (#7095)

2021-04-18 22:03:44 dbc6574
chore(data/set/basic): add `set.subsingleton.pairwise_on` (#7257)
Also add `set.pairwise_on_singleton`.

2021-04-18 22:03:43 f6132e4
feat(data/nat/parity): update to match int/parity (#7156)
A couple of lemmas existed for `int` but not for `nat`, so I add them. I also tidy some lemmas I added in prior PRs and add a file-level docstring.

2021-04-18 22:03:41 969c6a3
feat(data/int/parity): update to match nat/parity (where applicable) (#7155)
We had a number of lemmas for `nat` but not for `int`, so I add them. I also globalize variables in the file and add a module docstring.

2021-04-18 18:41:38 30ee691
feat(group_theory/submonoid/operations): add lemmas (#7219)
Some lemmas about the interaction between additive and multiplicative submonoids.
I provided the two version (from additive to multiplicative and the other way), I am not sure if `@[to_additive]` can automatize this.

2021-04-18 18:41:37 d107d82
feat(data/complex): numerical bounds on log 2 (#7146)
Upper and lower bounds on log 2. Presumably these could be made faster but I don't know the tricks - the proof of `log_two_near_10` (for me) doesn't take longer than `exp_one_near_20` to compile.
I also strengthened the existing bounds slightly.

2021-04-18 14:42:50 7f541b4
feat(topology/continuous_function): on a subsingleton X, there is only one subalgebra R C(X,R) (#7247)

2021-04-18 14:42:49 cab0481
feat(data/finset/lattice): mem_sup, mem_sup' (#7245)
Sets with `bot` and closed under `sup` are closed under `finset.sup`, and variations for `inf`, `sup'`, and `inf'`.

2021-04-18 14:42:48 3953378
feat(set_theory/surreal): add add_monoid instance (#7228)
This PR is a part of a project for putting ordered abelian group structure on surreal numbers.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Surreal.20numbers/near/234694758)
We construct add_monoid instance for surreal numbers.
The "term_type" proofs suggested on the above Zulip thread are not working nicely as Lean is unable to infer the type of the setoid.

2021-04-18 10:59:52 a6f62a7
feat(topology/algebra/mul_action.lean): add smul_const (#7242)
add filter.tendsto.smul_const

2021-04-18 10:59:52 4d4b501
chore(data/set/finite): rename some lemmas (#7241)
### Revert some name changes from #5813
* `set.fintype_set_bUnion` → `set.fintype_bUnion`;
* `set.fintype_set_bUnion'` → `set.fintype_bUnion'`;
* `set.fintype_bUnion` → `set.fintype_bind`;
* `set.fintype_bUnion'` → `set.fintype_bind'`;
* `set.finite_bUnion` → `set.finite.bind`;
### Add a few lemmas
* `set.finite_Union_Prop`;
* add `set.seq` versions of lemmas/defs about `<*>` (they work for `α`, `β` in different universes).

2021-04-17 23:26:52 043d046
feat(algebra/lie/basic): define the `module` and `lie_module` structures on morphisms of Lie modules (#7225)
Also sundry `simp` lemmas

2021-04-17 23:26:51 aa44de5
feat(data/real): Inf is nonneg (#7223)

2021-04-17 23:26:50 c68e718
feat(linear_algebra): maximal linear independent (#7160)
Co-authored by Anne Baanen and Kevin Buzzard

2021-04-17 20:12:47 ce667c4
chore(.github/workflows/build.yml): update elan script URL (#7234)
`elan` moved to the `leanprover` organization: http://github.com/leanprover/elan

2021-04-17 20:12:46 20db2fb
refactor(topology/algebra/module): `map_smul` argument swap (#7233)
swap the arguments of map_smul to make dot notation work

2021-04-17 20:12:45 b2e7f40
feat(analysis/convex/basic): convex hull and empty set (#7232)
added convex_hull_empty

2021-04-17 20:12:44 2292463
doc(group_theory): fix `normalizer` docstring (#7231)
The _smallest_ subgroup of `G` inside which `H` is normal is `H` itself.
The _largest_ subgroup of `G` inside which `H` is normal is the normalizer.
Also confirmed by Wikipedia (see the 5th bullet point under "Groups" at [the list of properties of the centralizer and normalizer](https://en.wikipedia.org/wiki/Centralizer_and_normalizer#Properties)), because it's good to have independent confirmation for something so easy to confuse.

2021-04-17 14:18:38 21d74c7
feat(data/equiv/mul_add): use `@[simps]` (#7213)
Add some `@[simps]` for some algebra maps. This came up in #6795.

2021-04-17 09:45:21 9363a64
feat(data/nat/choose/sum): Add lower bound lemma for central binomial coefficient (#7214)
This lemma complements the one above it, and will be useful in proving Bertrand's postulate from the 100 theorems list.

2021-04-17 09:45:20 e9a11f6
feat(analysis/normed_space/operator_norm): generalize to seminormed space (#7202)
This PR is part of a series of PRs to have seminormed stuff in mathlib.
We generalize here `operator_norm` to `semi_normed_space`. I didn't do anything complicated, essentially I only generalized what works out of the box, without trying to modify the proofs that don't work.

2021-04-17 05:06:55 206ecce
chore(category_theory/subobject): different proof of le_of_comm (#7229)
This is certainly a shorter proof of `le_of_comm`; whether it is "cleaner" like the comment asked for is perhaps a matter of taste.

2021-04-17 05:06:54 0f6c1f1
feat(order/conditionally_complete_lattice): conditional Inf of intervals (#7226)
Some new simp lemmas for cInf/cSup of intervals. I tried to use the minimal possible assumptions that I could - some lemmas are therefore in the linear order section and others are just for lattices.

2021-04-17 05:06:53 560a009
feat(category_theory): formally adjoined initial objects are strict (#7222)

2021-04-17 02:40:11 89c16a7
chore(ring_theory/adjoin.basic): use submodule.closure in algebra.adjoin_eq_span (#7194)
`algebra.adjoin_eq_span` uses `monoid.closure` that is deprecated. We modify it to use `submonoid.closure`.

2021-04-17 02:40:10 b7a3d4e
feat(test/integration): improve an example (#7169)
With #7103, I am able to improve one of my examples.

2021-04-16 22:20:07 6b182fc
feat(category_theory/triangulated/pretriangulated): add definition of pretriangulated categories and triangulated functors between them  (#7153)
Adds a definition of pretriangulated categories and triangulated functors between them.

2021-04-16 22:20:06 110541d
feat(data/list/basic): fold[rl] recursion principles (#7079)

2021-04-16 17:35:16 49040e5
feat(data/set): sep true/false simp lemmas (#7215)

2021-04-16 17:35:15 24013e2
feat(data/finsupp/basic): add finsupp.single_left_injective and docstrings (#7207)

2021-04-16 17:35:14 0688612
feat(order/rel_iso): constructors for rel embeddings (#7046)
Alternate constructors for relation and order embeddings which require slightly less to prove.

2021-04-16 17:35:13 ea4dce0
feat(category_theory): the additive envelope, Mat_ C (#6845)
# Matrices over a category.
When `C` is a preadditive category, `Mat_ C` is the preadditive categoriy
whose objects are finite tuples of objects in `C`, and
whose morphisms are matrices of morphisms from `C`.
There is a functor `Mat_.embedding : C ⥤ Mat_ C` sending morphisms to one-by-one matrices.
`Mat_ C` has finite biproducts.
## The additive envelope
We show that this construction is the "additive envelope" of `C`,
in the sense that any additive functor `F : C ⥤ D` to a category `D` with biproducts
lifts to a functor `Mat_.lift F : Mat_ C ⥤ D`,
Moreover, this functor is unique (up to natural isomorphisms) amongst functors `L : Mat_ C ⥤ D`
such that `embedding C ⋙ L ≅ F`.
(As we don't have 2-category theory, we can't explicitly state that `Mat_ C` is
the initial object in the 2-category of categories under `C` which have biproducts.)
As a consequence, when `C` already has finite biproducts we have `Mat_ C ≌ C`.

2021-04-16 14:09:23 108b923
chore(algebra): add `sub{_mul_action,module,semiring,ring,field,algebra}.copy` (#7220)
We already have this for sub{monoid,group}. With this in place, we can make `coe subalgebra.range` defeq to `set.range` and similar (left for a follow-up).

2021-04-16 14:09:22 e00d688
chore(group_theory/subgroup): rename `monoid_hom.to_range` to `monoid_hom.range_restrict` (#7218)
This makes it match:
* `monoid_hom.mrange_restrict`
* `linear_map.range_restrict`
* `ring_hom.range_restrict`
* `ring_hom.srange_restrict`
* `alg_hom.range_restrict`
This also adds a missing simp lemma.

2021-04-16 11:48:29 b1acb58
chore(data/mv_polynomial/basic): golf some proofs (#7209)

2021-04-16 05:10:03 bb9b850
feat(data/multiset/basic): some multiset lemmas, featuring sum inequalities (#7090)
Proves some lemmas about `rel` and about inequalities between sums of multisets.

2021-04-16 03:40:55 148760e
feat(category_theory/kernels): missing instances (#7204)

2021-04-16 03:40:54 9d1ab69
refactor(category_theory/images): improvements (#7198)
Some improvements to the images API, from `homology2`.

2021-04-16 01:12:09 81b8873
doc(topology/bases): add module + theorem docstrings (#7193)

2021-04-15 20:50:28 8742be7
fix(.github/PULL_REQUEST_TEMPLATE.md): revert gitpod button URL (#7210)
Reverts #7096 since the URL was changed back.

2021-04-15 20:50:27 37ab34e
doc(tactic/congr): example where congr fails, but exact works (#7208)
As requested on zulip:
https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.237084/near/234652967

2021-04-15 20:50:26 b4201e7
chore(group/ring_hom): fix a nat nsmul diamond (#7201)
The space of additive monoid should be given a proper `nat`-action, by the pointwise action, to avoid diamonds.

2021-04-15 15:46:19 50a843e
chore(algebra/module/submodule): add missing coe lemmas (#7205)

2021-04-15 15:46:18 14c625e
feat(linear_algebra/basic): add span_eq_add_submonoid.closure (#7200)
The `ℕ` span equals `add_submonoid.closure`.

2021-04-15 15:46:16 0f3ca67
feat(number_theory/bernoulli): golf (#7197)
I golf the file to improve scannability and stylistic uniformity.

2021-04-15 15:46:15 6a4d298
chore(topology/vector_bundle): generalize to topological semimodules (#7183)

2021-04-15 15:46:13 f92dc6c
feat(algebra/group_with_zero): non-associative monoid_with_zero (#7176)
This introduces a new `mul_zero_one_class` which is `monoid_with_zero` without associativity, just as `mul_one_class` is `monoid` without associativity.
This would help expand the scope of #6786 to include ring_homs, something that was previously blocked by `monoid_with_zero` and the `non_assoc_semiring` having no common ancestor with `0`, `1`, and `*`.
Using #6865 as a template for what to cover, this PR includes;
* Generalizing `monoid_with_zero_hom` to require the weaker `mul_zero_one_class`. This has a slight downside, in that `some_mwzh.to_monoid_hom` now holds as its typeclass argument `mul_zero_one_class.to_mul_one_class` instead of `monoid_with_zero.to_monoid`. This means that lemmas about `monoid_hom`s with associate multiplication no longer always elaborate correctly without type annotations, as the `monoid` instance has to be found by typeclass search instead of unification.
* `function.(in|sur)jective.mul_zero_one_class`
* `equiv.mul_zero_one_class`
* Adding instances for:
  * `prod`
  * `pi`
  * `set_semiring`
  * `with_zero`
  * `locally_constant`
  * `monoid_algebra`
  * `add_monoid_algebra`

2021-04-15 15:46:12 adfeb24
refactor(algebra/big_operators/order): use `to_additive` (#7173)
* Replace many lemmas about `finset.sum` with lemmas about `finset.prod` + `@[to_additive]`;
* Avoid `s \ t` in `finset.sum_lt_sum_of_subset`.
* Use `M`, `N` instead of `α`, `β` for types with algebraic structures.

2021-04-15 15:46:11 5806a94
feat(data/nat/basic, data/nat/prime): add various lemmas (#7171)

2021-04-15 08:26:50 4b835cc
feat(category_theory/subobject): proof golf and some API (#7170)

2021-04-15 08:26:48 dbd468d
feat(analysis/special_functions/trigonometric): periodicity of sine, cosine (#7107)
Previously we only had `sin (x + 2 * π) = sin x` and `cos (x + 2 * π) = cos x`. I extend those results to cover shifts by any integer multiple of `2 * π`, not just `2 * π`. I also provide corresponding `sub` lemmas.

2021-04-15 04:42:22 3a64d11
chore(scripts): update nolints.txt (#7195)
I am happy to remove some nolints for you!

2021-04-15 04:42:20 c73b165
chore(data/fin,data/finset): a few lemmas (#7168)
* `fin.heq_fun_iff`: use `Sort*` instead of `Type*`;
* `fin.cast_refl`: take `h : n = n := rfl` as an argument;
* `fin.cast_to_equiv`, `fin.cast_eq_cast`: relate `fin.cast` to `_root_.cast`;
* `finset.map_cast_heq`: new lemma;
* `finset.subset_univ`: add `@[simp]`;
* `card_finset_fin_le`, `fintype.card_finset_len`, `fin.prod_const` : new lemmas;
* `order_iso.refl`: new definition.

2021-04-14 23:14:49 f74213b
feat(algebra/ordered_group): proof of le without density (#7191)

2021-04-14 23:14:48 60060c3
feat(field_theory/algebraic_closure): define `is_alg_closed.splits_codomain` (#7187)
Let `p : polynomial K` and `k` be an algebraically closed extension of `K`. Showing that `p` splits in `k` used to be a bit awkward because `is_alg_closed.splits` only gives `splits (p.map (f : k →+* K)) id`, which you still have to `simp` to `splits p f`.
This PR defines `is_alg_closed.splits_codomain`, showing `splits p f` directly by doing the `simp`ing for you. It also renames `polynomial.splits'` to `is_alg_closed.splits_domain`, for symmetry.
Zulip discussion starts [here](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Complex.20numbers.20sums/near/234481576)

2021-04-14 23:14:47 3d67b69
chore(algebra/group_power/basic): `pow_abs` does not need commutativity (#7178)

2021-04-14 23:14:46 e4843ea
chore(category_theory/subobject): split off specific subobjects (#7167)

2021-04-14 23:14:44 74e1e83
feat(topological/homeomorph): the image of a set (#7147)

2021-04-14 23:14:43 5052ad9
feat(data/nat/basic): (∀ a : ℕ, m ∣ a ↔ n ∣ a) ↔ m = n (#7132)
... and the dual statement
`(∀ a : ℕ, a ∣ m ↔ a ∣ n) ↔ m = n`
Zulip discussion:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/semilattice.2C.20dvd.2C.20associated

2021-04-14 23:14:42 4605b55
feat(algebra/big_operators/finprod): add a few lemmas (#7130)
* add `finprod_nonneg`, `finprod_cond_nonneg`, and `finprod_eq_zero`;
* use `α → Prop` instead of `set α` in
`finprod_mem_eq_prod_of_mem_iff`, rename to `finprod_cond_eq_prod_of_cond_iff`.

2021-04-14 23:14:41 49fd719
feat(topology/algebra,geometry/manifold): continuity and smoothness of locally finite products of functions (#7128)

2021-04-14 23:14:40 d820a9d
feat(algebra/big_operators): some lemmas on big operators and `fin` (#7119)
A couple of lemmas that I needed for `det_vandermonde` (#7116).
I put them in a new file because I didn't see any obvious point that they fit in the import hierarchy. `big_operators/basic.lean` would be the alternative, but that file is big enough as it is.

2021-04-14 23:14:39 8d3e8b5
feat(archive/imo): IMO 1977 Q6 (#7097)
Formalization of IMO 1977/6

2021-04-14 23:14:38 456e5af
feat(order/filter/*, topology/subset_properties): Filter Coprod (#7073)
Define the "coproduct" of many filters (not just two) as
`protected def Coprod (f : Π d, filter (κ d)) : filter (Π d, κ d) :=
⨆ d : δ, (f d).comap (λ k, k d)`
and prove the three lemmas which motivated this construction: (finite!) coproduct of cofinite filters is the cofinite filter, coproduct of cocompact filters is the cocompact filter, and monotonicity; see also #6372
Co-authored by: Heather Macbeth @hrmacbeth

2021-04-14 23:14:37 89196b2
feat(group_theory/perm/cycle_type): Cycle type of a permutation (#6999)
This PR defines the cycle type of a permutation.
At some point we should prove the bijection between partitions and conjugacy classes.

2021-04-14 23:14:36 5775ef7
feat(order/ideal, order/pfilter, order/prime_ideal): added `ideal_inter_nonempty`, proved that a maximal ideal is prime (#6924)
- `ideal_inter_nonempty`: the intersection of any two ideals is nonempty. A preorder with joins and this property satisfies that its ideal poset is a lattice.
- An ideal is prime iff `x \inf y \in I` implies `x \in I` or `y \in I`.
- A maximal ideal in a distributive lattice is prime.

2021-04-14 18:40:20 3df0f77
feat(topology/sheaves): Induced map on stalks (#7092)
This PR defines stalk maps for morphisms of presheaves. We prove that a morphism of type-valued sheaves is an isomorphism if and only if all the stalk maps are isomorphisms.
A few more lemmas about unique gluing are also added, as well as docstrings.

2021-04-14 18:40:15 98c483b
feat(ring_theory/hahn_series): a `finsupp` of Hahn series is a `summable_family` (#7091)
Defines `summable_family.of_finsupp`

2021-04-14 18:40:13 f444128
chore(algebra/direct_sum_graded): golf proofs (#7029)
Simplify the proofs of mul_assoc and mul_comm, and speed up all the
proofs that were slow.
Total elaboration time for this file is reduced from 12.9s to 1.7s
(on my machine), and total CPU time is reduced from 19.8s to 6.8s.
All the remaining elaboration times are under 200ms.
The main idea is to explicitly construct bundled homomorphisms
corresponding to `λ a b c, a * b * c` and `λ a b c, a * (b * c)`
respectively.  Then in proving the equality between those, we can
unpack all the arguments immediately, and the remaining rewrites
needed become simpler.

2021-04-14 18:40:11 3379f3e
feat(archive/100-theorems-list): add proof of Heron's formula (#6989)
This proves Heron's Formula for triangles, which happens to be Theorem 57 on Freek's 100 Theorems.

2021-04-14 18:40:10 2715769
feat(geometry/manifold/instances/units_of_normed_algebra): the units of a normed algebra are a topological group and a smooth manifold (#6981)
I decided to make a small PR now with only a partial result because Heather suggested proving GL^n is a Lie group on Zulip, and I wanted to share the work I did so that whoever wants to take over the task does not have to start from scratch.
Most of the ideas in this PR are by @hrmacbeth, as I was planning on doing a different proof, but I agreed Heather's one was better.
What remains to do in a future PR to prove GLn is a Lie group is to add and prove the following instance to the file `geometry/manifold/instances/units_of_normed_algebra.lean`:
```
instance units_of_normed_algebra.lie_group
  {𝕜 : Type*} [nondiscrete_normed_field 𝕜]
  {R : Type*} [normed_ring R] [normed_algebra 𝕜 R] [complete_space R] :
  lie_group (model_with_corners_self 𝕜 R) (units R) :=
{
  smooth_mul := begin
    sorry,
  end,
  smooth_inv := begin
    sorry,
  end,
  ..units_of_normed_algebra.smooth_manifold_with_corners, /- Why does it not find the instance alone? -/
}
```

2021-04-14 18:40:08 e4edf46
feat(algebra/direct_sum_graded): `A 0` is a ring, `A i` is an `A 0`-module, and `direct_sum.of A 0` is a ring_hom (#6851)
In a graded ring, grade 0 is itself a ring, and grade `i` (and therefore, the overall direct_sum) is a module over elements of grade 0.
This stops just short of the structure necessary to make a graded ring a graded algebra over elements of grade 0; this requires some extra assumptions and probably a new typeclass, so is best left to its own PR.
The main results here are `direct_sum.grade_zero.comm_ring`, `direct_sum.grade_zero.semimodule`, and `direct_sum.of_zero_ring_hom`.
Note that we have no way to let the user provide their own ring structure on `A 0`, as `[Π i, add_comm_monoid (A i)] [semiring (A 0)]` provides `add_comm_monoid (A 0)` twice.

2021-04-14 18:40:07 24dc410
feat(field_theory/separable_degree): introduce the separable degree (#6743)
We introduce the definition of the separable degree of a polynomial. We prove that every irreducible polynomial can be contracted to a separable polynomial. We show that the separable degree divides the degree of the polynomial.
This formalizes a lemma in the Stacks Project, cf. https://stacks.math.columbia.edu/tag/09H0 
We also show that the separable degree is unique.

2021-04-14 18:40:05 f12575e
feat(topology/topological_fiber_bundle): topological fiber bundle over `[a, b]` is trivial (#6555)

2021-04-14 16:58:05 b3eabc1
hack(ci): run lean make twice (#7192)
At the moment running `lean --make src` after `leanproject up` will recompile some files.  Merging this PR should have the effect of uploading these newly compiled olean files.
This also makes github actions call `lean --make src` twice to prevent this problem from happening in the first place.

2021-04-14 08:29:46 6380155
refactor(*): kill nat multiplication diamonds (#7084)
An `add_monoid` has a natural `ℕ`-action, defined by `n • a = a + ... + a`, that we want to declare
as an instance as it makes it possible to use the language of linear algebra. However, there are
often other natural `ℕ`-actions. For instance, for any semiring `R`, the space of polynomials
`polynomial R` has a natural `R`-action defined by multiplication on the coefficients. This means
that `polynomial ℕ` has two natural `ℕ`-actions, which are equal but not defeq. The same
goes for linear maps, tensor products, and so on (and even for `ℕ` itself). This is the case on current
mathlib, with such non-defeq diamonds all over the place.
To solve this issue, we embed an `ℕ`-action in the definition of an `add_monoid` (which is by
default the naive action `a + ... + a`, but can be adjusted when needed -- it should always be equal 
to this one, but not necessarily definitionally), and declare
a `has_scalar ℕ α` instance using this action. This is yet another example of the forgetful inheritance
pattern that we use in metric spaces, embedding a topology and a uniform structure in it (except that
here the functor from additive monoids to nat-modules is faithful instead of forgetful, but it doesn't 
make a difference).
More precisely, we define
```lean
def nsmul_rec [has_add M] [has_zero M] : ℕ → M → M
| 0     a := 0
| (n+1) a := nsmul_rec n a + a
class add_monoid (M : Type u) extends add_semigroup M, add_zero_class M :=
(nsmul : ℕ → M → M := nsmul_rec)
(nsmul_zero' : ∀ x, nsmul 0 x = 0 . try_refl_tac)
(nsmul_succ' : ∀ (n : ℕ) x, nsmul n.succ x = nsmul n x + x . try_refl_tac)
```
For example, when we define `polynomial R`, then we declare the `ℕ`-action to be by multiplication
on each coefficient (using the `ℕ`-action on `R` that comes from the fact that `R` is
an `add_monoid`). In this way, the two natural `has_scalar ℕ (polynomial ℕ)` instances are defeq.
The tactic `to_additive` transfers definitions and results from multiplicative monoids to additive
monoids. To work, it has to map fields to fields. This means that we should also add corresponding
fields to the multiplicative structure `monoid`, which could solve defeq problems for powers if
needed. These problems do not come up in practice, so most of the time we will not need to adjust
the `npow` field when defining multiplicative objects.
With this refactor, all the diamonds are gone. Or rather, all the diamonds I noticed are gone, but if
there are still some diamonds then they can be fixed, contrary to before.
Also, the notation `•ℕ` is gone, just use `•`.

2021-04-14 03:47:14 3ec54df
feat(data/finset/lattice): le_sup_iff and lt_sup_iff (#7182)
A few changes and additions to finset/lattice in response to this Zulip thread https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/finset.2Esup'

2021-04-14 03:47:13 500301e
feat(algebra/group/hom): `monoid_with_zero_hom.to_monoid_hom_injective` and co. (#7174)
This came up in #6788.

2021-04-14 03:47:12 4d19f5f
feat(algebraic_geometry): Basic opens form basis of zariski topology (#7152)
Fills in a few lemmas in `prime_spectrum.lean`, in particular that basic opens form a basis

2021-04-13 23:14:15 724f804
refactor(src/analysis/normed_space/linear_isometry): generalize to semi_normed_group (#7122)
This is part of a series of PR to include the theory of seminormed things in mathlib.

2021-04-13 19:58:08 06f7d3f
feat(src/set_theory/surreal): add numeric_add and numeric_omega lemmas (#7179)
Adds a couple of lemmas about surreal numbers: proving that natural numbers and omega are numeric.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Surreal.20numbers/near/234243582)

2021-04-12 23:25:53 46302c7
refactor(algebra/group/defs): remove left-right_cancel_comm_monoids (#7134)
There were 6 distinct classes
* `(add_)left_cancel_comm_monoid`,
* `(add_)right_cancel_comm_monoid`,
* `(add_)cancel_comm_monoid`.
I removed them all, except for the last 2:
* `(add_)cancel_comm_monoid`.
The new typeclass `cancel_comm_monoid` requires only `a * b = a * c → b = c`, and deduces the other version from commutativity.

2021-04-12 19:13:54 92d5cab
feat(logic/function/iterate): `f^[n]^[m] = f^[m]^[n]` (#7121)
Prove `f^[n]^[m]=f^[m]^[n]` and improve some docs.

2021-04-12 15:23:30 2af0147
chore(data/equiv/basic): add simps attribute to some defs (#7137)

2021-04-12 12:44:29 a1c2bb7
feat(data/zsqrtd/basic): add coe_int_dvd_iff lemma (#7161)

2021-04-12 12:44:28 16e2c6c
chore(data/matrix/basic): lemmas for `minor` about `diagonal`, `one`, and `mul` (#7133)
The `minor_mul` lemma here has weaker hypotheses than the previous `reindex_mul`, as it only requires one mapping to be bijective.

2021-04-12 08:44:54 f9c787d
refactor(algebra/big_operators, *): specialize `finset.prod_bij` to `fintype.prod_equiv` (#7109)
Often we want to apply `finset.prod_bij` to the case where the product is taken over `finset.univ` and the bijection is already a bundled `equiv`. This PR adds `fintype.prod_equiv` as a specialization for exactly these cases, filling in most of the arguments already.

2021-04-12 08:44:53 001628b
feat(category_theory/subobject/factor_thru): lemmas in a preadditive category (#7104)
More side effects of recent reworking of homology.

2021-04-12 08:44:51 68e894d
feat(finset/lattice): sup' is to sup as max' is to max (#7087)
Introducing `finset.sup'`, modelled on `finset.max'` but having no need for a `linear_order`. I wanted this for functions so also provide `sup_apply` and `sup'_apply`. By using `cons` instead of `insert` the axiom of choice is avoided throughout and I have replaced the proofs of three existing lemmas (`sup_lt_iff`, `comp_sup_eq_sup_comp`, `sup_closed_of_sup_closed`) that didn't need it. I have removed `sup_subset` entirely as it was surely introduced in ignorance of `sup_mono`.

2021-04-12 05:36:40 193dd5b
feat(algebra/{algebra, module}/basic): make 3 smultiplication by 1 `simp` lemmas (#7166)
The three lemmas in the merged PR #7094 could be simp lemmas.  This PR makes this suggestion.
While I was at it,
* I moved one of the lemmas outside of the `alg_hom` namespace,
* I fixed a typo in a doc string of a tutorial.
Zulip:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/trying.20out.20a.20.60simp.60.20lemma

2021-04-11 12:32:54 5694309
feat(algebra/algebra/basic algebra/module/basic): add 3 lemmas m • (1 : R) = ↑m (#7094)
Three lemmas asserting `m • (1 : R) = ↑m`, where `m` is a natural number, an integer or a rational number.
Zulip:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.60smul_one_eq_coe.60

2021-04-11 11:08:53 fbf6219
feat(analysis/special_functions/exp_log): add `continuity` attribute to `continuous_exp` (#7157)

2021-04-11 10:03:43 1442f70
feat(measure_theory/interval_integral): variants of integral_comp lemmas (#7103)
Alternate versions of some of our `integral_comp` lemmas which work even when `c = 0`.

2021-04-11 05:39:27 fc8e18c
feat(topology/continuous_function): comp_right_* (#7145)
We setup variations on `comp_right_* f`, where `f : C(X, Y)`
(that is, precomposition by a continuous map),
as a morphism `C(Y, T) → C(X, T)`, respecting various types of structure.
In particular:
* `comp_right_continuous_map`, the bundled continuous map (for this we need `X Y` compact).
* `comp_right_homeomorph`, when we precompose by a homeomorphism.
* `comp_right_alg_hom`, when `T = R` is a topological ring.

2021-04-11 04:38:14 383f591
chore(scripts): update nolints.txt (#7154)
I am happy to remove some nolints for you!

2021-04-11 01:51:24 c6e62cf
feat(analysis/normed_space/finite_dimension): set of `f : E →L[𝕜] F` of rank `≥n` is open (#7022)

2021-04-10 14:43:35 a83230e
feat(linear_algebra/eigenspace): define the maximal generalized eigenspace (#7125)
And prove that it is of the form kernel of `(f - μ • id) ^ k` for some finite `k` for endomorphisms of Noetherian modules.

2021-04-10 14:43:34 026150f
feat(geometry/manifold): a manifold with σ-countable topology has second countable topology (#6948)

2021-04-10 12:50:55 6b3803d
chore(analysis/normed_space/inner_product): simplify two proofs (#7149)

2021-04-10 12:50:54 363a286
chore(*): speedup slow proofs (#7148)
Some proofs using heavy `rfl` or heavy `obviously` can be sped up considerably. Done in this PR for some outstanding examples.

2021-04-10 08:01:57 7e93367
feat(analysis/normed_space/banach): a range with closed complement is itself closed (#6972)
If the range of a continuous linear map has a closed complement, then it is itself closed. For instance, the range can not be a dense hyperplane. We prove it when, additionally, the map has trivial kernel. The general case will follow from this particular case once we have quotients of normed spaces, which are currently only in Lean Liquid.
Along the way, we fill several small gaps in the API of continuous linear maps.

2021-04-10 06:53:21 d39c3a2
feat(data/zsqrtd/basic): add some lemmas about norm (#7114)

2021-04-10 06:53:20 7ae2af6
feat(group_theory/is_free_group): promote `is_free_group.lift'` to an equiv (#7110)
While non-computable, this makes the API of `is_free_group` align more closely with `free_group`.
Based on discussion in the original PR, this doesn't go as far as changing the definition of `is_free_group` to take the equiv directly.
This additionally:
* adds the definition `lift`, a universe polymorphic version of `lift'`
* adds the lemmas:
  * `lift'_eq_free_group_lift`
  * `lift_eq_free_group_lift`
  * `of_eq_free_group_of`
  * `ext_hom'`
  * `ext_hom`
* renames `is_free_group.iso_free_group_of_is_free_group` to the shorter `is_free_group.to_free_group`
* removes lemmas absent from the `free_group` API that are no longer needed for the proofs here:
  * `end_is_id`
  * `eq_lift`

2021-04-10 03:46:26 575b791
chore(scripts): update nolints.txt (#7144)
I am happy to remove some nolints for you!

2021-04-10 03:46:25 7138d35
feat(category_theory/action): currying (#7085)
A functor from an action category can be 'curried' to an ordinary group homomorphism. Also defines transitive group actions.

2021-04-10 00:01:44 e269dbc
feat(tactic/itauto): Complete intuitionistic prover (#7057)
[As requested on Zulip.](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/tauto.20is.20a.20decision.20procedure.3F/near/233222469)

2021-04-10 00:01:43 8efb93b
feat(combinatorics/simple_graph/strongly_regular): add definition of strongly regular graph and proof that complete graph is SRG (#7044)
Add definition of strongly regular graph and proof that complete graphs are strongly regular. Part of #5698 to prove facts about strongly regular graphs.

2021-04-09 22:57:37 309e3b0
feat(category_theory/subobjects): improvements to API (#6932)
These additions have been useful while setting up homology.

2021-04-09 18:56:37 763c5c3
chore(data/list/basic): avoid the axiom of choice (#7135)

2021-04-09 12:24:51 fe5d660
feat(algebra/category/Module): arbitrary colimits (#7099)
This is just the "semi-automated" construction of arbitrary colimits in the category or `R`-modules, following the same model as for `Mon`, `AddCommGroup`, etc.
We already have finite colimits from the `abelian` instance. One could also give definitionally nicer colimits as quotients of finitely supported functions. But this is better than nothing!

2021-04-09 12:24:50 0ec9cd8
chore(data/fin): add simp lemmas about 1 and cast_{pred, succ} (#7067)

2021-04-09 12:24:49 dd2466c
chore(data/set_like): Add coe_strict_mono and coe_mono (#7004)
This adds the following monotonicity lemmas:
* `set_like.coe_mono`, `set_like.coe_strict_mono`
* `submodule.to_add_submonoid_mono`, `submodule.to_add_submonoid_strict_mono`
* `submodule.to_add_subgroup_mono`, `submodule.to_add_subgroup_strict_mono`
* `subsemiring.to_submonoid_mono`, `submodule.to_submonoid_strict_mono`
* `subsemiring.to_add_submonoid_mono`, `submodule.to_add_submonoid_strict_mono`
* `subring.to_subsemiring_mono`, `subring.to_subsemiring_strict_mono`
* `subring.to_add_subgroup_mono`, `subring.to_add_subgroup_strict_mono`
* `subring.to_submonoid_mono`, `subring.to_submonoid_strict_mono`
This also makes `tactic.monotonicity.basic` a lighter-weight import, so that the `@[mono]` attribute is accessible in more places.

2021-04-09 12:24:48 362844d
feat(category_theory/preadditive): a category induced from a preadditive category is preadditive (#6883)

2021-04-09 08:28:56 aa1fa0b
feat(data/option/basic): option valued choice operator (#7101)

2021-04-09 04:34:52 6610e8f
feat(data/fintype): golf, move and dualise proof (#7126)
This PR moves `fintype.exists_max` higher up in the import tree, and golfs it, and adds the dual version, `fintype.exists_min`. The name and statement are unchanged.

2021-04-09 04:34:51 991dc26
chore(linear_algebra/multilinear): relax requirements on `multilinear_map.pi_ring_equiv` (#7117)

2021-04-09 04:34:50 0b52522
feat(test/integration): update with new examples (#7105)
Add examples made possible by #6787, #6795, #7010.

2021-04-09 04:34:49 6dd9a54
feat(tactic/simps): allow composite projections  (#7074)
* Allows custom simps-projections that are compositions of multiple projections. This is useful when extending structures without the `old_structure_cmd`.
* Coercions that are compositions of multiple projections are *not* automatically recognized, and should be declared manually (coercions that are definitionally equal to a single projection are still automatically recognized).
* Custom simps projections should now be declared using the name used by `simps`. E.g. `equiv.simps.symm_apply` instead of `equiv.simps.inv_fun`.
* You can disable a projection `proj` being generated by default by `simps` using `initialize_simps_projections (-proj)`

2021-04-09 03:28:24 29b834d
feat(category_theory, algebra/category): AddCommGroup is well-powered (#7006)

2021-04-09 02:29:48 4e607eb
chore(scripts): update nolints.txt (#7129)
I am happy to remove some nolints for you!

2021-04-09 02:29:47 505ffa9
feat(analysis/special_functions/integrals): integral of `cos x ^ 2 - sin x ^ 2` (#7012)
An example of a direct application of integration by parts.

2021-04-08 22:31:17 92ec949
feat(data/equiv/basic): swap_apply_eq_iff (#7102)

2021-04-08 15:56:48 379dd7d
chore(algebra/ring_quot): Provide `sub` explicitly to `ring_quot` (#7112)
This means that using `ring_quot.mk (A - B) = ring_quot.mk A - ring_quot.mk B` is true by definition, even if `A - B = A + -B` is not true by definition.

2021-04-08 15:56:47 54ac48a
chore(data/matrix/basic): add simp lemmas about `minor`, move `reindex` to `matrix.basic` since it knows nothing about linear algebra (#7083)

2021-04-08 15:56:46 fb74f98
chore(data/set/finite): set.finite.sup (#7080)

2021-04-08 15:56:45 bcf5b1a
feat(data/fintype/basic): to_finset lattice lemmas (#7077)
While we do not have lattice homomorphisms, we can still provide some similar API.

2021-04-08 15:56:44 56e5248
feat(order/order_iso_nat): add another flavour of well-foundedness for partial orders (#5434)

2021-04-08 14:49:49 f474756
chore(category_theory/abelian): enable instances (#7106)
This PR is extracted from Markus' `projective` branch. It just turns on, as global instances, various instances provided by an `abelian` category. In the past these weren't instances, because `has_limit` carried data which could conflict.

2021-04-08 06:49:07 8e7028c
feat(topology/unit_interval): abstract out material about [0,1] (#7056)
Separates out some material about `[0,1]` from `topology/path_connected.lean`, and adds a very simple tactic.

2021-04-08 06:49:06 c6b0636
feat(archive/imo): formalize IMO 2008 Q3 (#7025)

2021-04-08 06:49:05 9c2a3e7
refactor(analysis/normed_space/add_torsor): generalize to semi_normed_space (#7016)
This part of a series of PR to include the theory of `semi_normed_space` in mathlib.

2021-04-08 06:49:04 c5ea4cd
feat(group_theory/perm): define the permutation `(0 1 ... (i : fin n))` (#6815)
I tried a number of definitions and it looks like this is the least awkward one to prove with. In any case, using the API should allow you to avoid unfolding the definition.

2021-04-08 05:45:01 def9671
feat(group_theory/is_free_group): the property of being a free group (#7086)

2021-04-08 03:58:52 e8b217b
chore(scripts): update nolints.txt (#7098)
I am happy to remove some nolints for you!

2021-04-08 03:58:51 b9d9bf0
fix(.github/PULL_REQUEST_TEMPLATE.md): Fix the gitpod button link, looks like it moved with an update (#7096)
I'll hold off for a couple of days on this as I'm not sure if the breakage was intentional or temporary on the gitpod side.

2021-04-08 00:15:24 99c7d22
chore(*): fixup docs that don't parse/cause linting errors (#7088)
A couple docs had errors in the way that they were written, leading to them not displaying properly, or causing linting errors. This aims to make the [style_exceptions.txt](https://github.com/leanprover-community/mathlib/blob/master/scripts/style-exceptions.txt) file smaller, and also make the webdocs display them properly, c.f. [here](https://leanprover-community.github.io/mathlib_docs/topology/metric_space/basic.html).

2021-04-07 22:32:23 c356c1f
chore(ring_theory/tensor_product): golf proofs (#7089)
Cherry-picked from #4773, entirely written by @jcommelin

2021-04-07 22:32:22 f4214de
feat(measure_theory/group, measure_theory/bochner_integration): left translate of an integral (#6936)
Translating a function on a topological group by left- (right-) multiplication by a constant does not change its integral with respect to a left- (right-) invariant measure.

2021-04-07 19:05:13 68bd325
feat(topology/category/Profinite): Profinite_to_Top creates limits. (#7070)
This PR adds a proof that `Profinite` has limits by showing that the forgetful functor to `Top` creates limits.

2021-04-07 19:05:12 08aff2c
feat(algebra/big_operators/basic): edit `finset.sum/prod_range_succ` (#6676)
- Change the RHS of the statement of `sum_range_succ` from `f n + ∑ x in range n, f x` to `∑ x in range n, f x + f n`
-  Change the RHS of the statement of `prod_range_succ` from `f n * ∑ x in range n, f x` to `∑ x in range n, f x * f n`
The old versions of those lemmas are now called `sum_range_succ_comm` and `prod_range_succ_comm`, respectively.
See [this conversation](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/break.20off.20last.20term.20of.20summation/near/229634503) on Zulip.

2021-04-07 15:23:49 d76b649
feat(dynamics/fixed_points/basic): fixed_points_id simp lemma (#7078)

2021-04-07 15:23:48 4a37c28
feat(data/fintype/basic): set.to_finset_eq_empty_iff (#7075)

2021-04-07 15:23:46 c3c7c34
feat(data/matrix/basic): dependently-typed block diagonal (#7068)
This allows constructing block diagonal matrices whose blocks are different sizes. A notable example of such a matrix is the one from the Jordan Normal Form.
This duplicates all of the API for `block_diagonal` from this file. Most of the proofs copy across cleanly, but the proof for `block_diagonal_mul'` required lots of hand-holding that `simp` could solve by itself for the non-dependent case.

2021-04-07 15:23:45 8459d0a
feat(continuous_function/compact): lemmas characterising norm and dist (#7054)
Transport lemmas charactering the norm and distance on bounded continuous functions, to continuous maps with compact domain.

2021-04-07 15:23:44 919b4e3
feat(algebra/category/Module): free module functor is lax monoidal (#6906)

2021-04-07 15:23:43 893173d
feat(category/subobject): complete_lattice instance (#6809)

2021-04-07 10:30:59 9157b57
refactor(topology/algebra/normed_group): generalize to semi_normed_group (#7066)
The completion of a `semi_normed_group` is a `normed_group` (and similarly for `pseudo_metric_space`).

2021-04-07 10:30:58 d89bfc4
feat(field_theory/minpoly): remove `is_integral` requirement from `unique'` (#7064)
`unique'` had an extraneous requirement on `is_integral`, which could be inferred from the other arguments.
This is a small step towards #5258, but is a breaking change; `unique'` now needs one less argument, which will break all current code using `unique'`.

2021-04-07 10:30:56 36649f8
chore(linear_algebra/basic): add linear_map.one_eq_id (#7063)
Cherry-picked from #4773

2021-04-07 10:30:55 104fb22
chore(logic/basic): generalize eq_iff_true_of_subsingleton to Sort (#7061)

2021-04-07 10:30:54 b8414e7
feat(logic/function/basic): add injectivity/surjectivity of functions from/to subsingletons (#7060)
In the surjective lemma (`function.surjective.to_subsingleton`), ~~I had to assume `Type*`, instead of `Sort*`, since I was not able to make the proof work in the more general case.~~ [Edit: Eric fixed the proof so that now they work in full generality.] 🎉
Zulip:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/lemmas.20on.20int.20and.20subsingleton

2021-04-07 10:30:53 df8ef37
feat(data/int/basic algebra/associated): is_unit (a : ℤ) iff a = ±1 (#7058)
Besides the title lemma, this PR also moves lemma `is_unit_int` from `algebra/associated` to `data/int/basic`.

2021-04-07 10:30:52 a6024f1
feat(archive/imo): formalize IMO 2008 Q4 (#7039)
feat(archive/imo): formalize IMO 2008 Q4

2021-04-07 10:30:50 7e71849
feat(to_additive): copy _refl_lemma attribute (#7011)
also warn user if if `simps` and `to_additive` are provided out of order.

2021-04-07 10:30:49 c488997
feat(analysis/special_functions/polynomial): polynomials are big O of polynomials of higher degree (#6714)

2021-04-07 06:34:06 05c491c
feat(big_operators): single out one term from prod (#7040)

2021-04-07 06:34:05 ec6f5d1
feat(data/*set): some finite sets lemmas (#7037)

2021-04-07 06:34:04 6048b6f
feat(tactic/monotonicity): Allow `@[mono]` on `strict_mono` lemmas (#7017)
A follow-up to #3310

2021-04-07 06:34:02 21a96ef
feat(ring_theory/hahn_series): summable families of Hahn series (#6997)
Defines `hahn_series.summable_family`
Defines the formal sum `hahn_series.summable_family.hsum` and its linear map version, `hahn_series.summable_family.lsum`

2021-04-07 06:34:01 6161a1f
feat(category_theory/types): add explicit pullbacks in `Type u` (#6973)
Add an explicit construction of binary pullbacks in the
category of types.
Zulip discussion:
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/pullbacks.20in.20Type.20u

2021-04-07 02:18:23 77e90da
chore(scripts): update nolints.txt (#7072)
I am happy to remove some nolints for you!

2021-04-07 02:18:22 d904c8d
chore(algebra/ring/prod): add missing `prod.distrib` instance (#7069)

2021-04-07 02:18:21 8b33d74
chore(group_theory/specific_groups/*): new folder specific_groups (#7018)
This creates a new folder `specific_groups` analogous to `analysis.special_functions`. So far, I have put `cyclic` (split from `order_of_element`), `dihedral`, and `quaternion` there.
Related Zulip discussion: 
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/group_theory.2Especific_groups

2021-04-07 02:18:20 758d322
feat(measure_theory/interval_integral): make integral_comp lemmas computable by simp (#7010)
A follow-up to #6795,  enabling the computation of integrals of the form `∫ x in a..b, f (c * x + d)` by `simp`, where `f` is a function whose integral is already in mathlib and `c` and `d` are any real constants such that `c ≠ 0`.

2021-04-07 02:18:19 97832da
chore(logic/function/basic): remove classical decidable instance from a lemma statement (#6488)
Found using #6485
This means that this lemma can be use in reverse against any `ite`, not just one that uses `classical.decidable`.

2021-04-07 02:18:17 a1057a3
feat(data/finsum): sums over sets and types with no finiteness hypotheses (#6355)
This rather large PR is mostly work of Jason KY. It is all an API for `finsum` and `finsum_in`, sums over sets with no finiteness assumption, and which return zero if the sum is infinite.

2021-04-06 18:32:51 6ea4e9b
feat(linear_algebra/eigenspace): generalized eigenvalues are just eigenvalues (#7059)

2021-04-06 18:32:50 9b4f0cf
feat(data/basic/lean): add lemmas finset.subset_iff_inter_eq_{left, right} (#7053)
These lemmas are the analogues of `set.subset_iff_inter_eq_{left, right}`, except stated for `finset`s.
Zulip:
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/finset.2Esubset_iff_inter_eq_left.20.2F.20right

2021-04-06 18:32:49 6a9bf98
doc(undergrad.yaml): add equiv.perm.trunc_swap_factors (#7021)
This looks to me like the definition being asked for
```lean
def equiv.perm.trunc_swap_factors {α : Type u} [decidable_eq α] [fintype α] (f : equiv.perm α) :
trunc {l // l.prod = f ∧ ∀ (g : equiv.perm α), g ∈ l → g.is_swap}
```
I suppose the trunc could be considered a problem, but sorting the list is an easy way out, as is `trunc.out` for undergrads who don't care about computability.

2021-04-06 18:32:48 aa5ec52
feat(group_theory/perm/cycles): Applying cycle_of to an is_cycle (#7000)
Applying cycle_of to an is_cycle gives you either the original cycle or 1.

2021-04-06 18:32:47 ae6d77b
feat(linear_algebra/free_module): a set of linearly independent vectors over a ring S is also linearly independent over a subring R of S (#6993)
Zulip:
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60algebra_map.2Einjective.2Elinear_independent.60

2021-04-06 18:32:46 5f0dbf6
feat(algebra/group/conj): `is_conj` for `monoid`s, `is_conj.setoid`, and `conj_classes` (#6896)
Refactors `is_conj` to work in a `monoid`
Defines `is_conj.setoid` and its quotient type, `conj_classes`

2021-04-06 18:32:45 41137fe
feat(algebra/add_submonoid_closure): the additive closure of a multiplicative submonoid is a subsemiring (#6860)
This file is extracted from PR #6705

2021-04-06 13:27:27 5254ef1
feat(topology/continuous_function): lemmas about coe (#7055)

2021-04-06 13:27:25 43aee09
feat(algebra/pointwise): improve instances on `set_semiring` (#7050)
If `α` is weaker than a semiring, then `set_semiring α` inherits an appropriate weaker typeclass.

2021-04-06 13:27:23 7928ca0
feat(algebra/lie/subalgebra): define the restriction of a Lie module to a Lie subalgebra (#7036)

2021-04-06 13:27:20 2b7b1e7
refactor(algebra/group/inj_surj): eliminate the versions of the definitions without `has_div` / `has_sub`. (#7035)
The variables without the `_sub` / `_div` suffix were vestigial definitions that existed in order to prevent the already-large `div_inv_monoid` refactor becoming larger. This change removes all their remaining usages, allowing the `_sub` / `_div` versions to lose their suffix.
This changes the division operation on `α →ₘ[μ] γ` and the subtraction operator on `truncated_witt_vector p n R` to definitionally match the division operation on their components. In practice, this just shuffles some uses of `sub_eq_add_neg` around.

2021-04-06 13:27:19 0007c4a
feat(topology/constructions): `function.update` is continuous in both arguments (#7023)

2021-04-06 09:41:40 d7f6bd6
feat(data/finsupp,linear_algebra/finsupp): `finsupp`s and sum types (#6992)
This PR contains a few definitions relating sum types and `finsupp`. The main result is `finsupp.sum_arrow_equiv_prod_arrow`, a `finsupp` version of `equiv.sum_arrow_equiv_prod_arrow`. This is turned into a `linear_equiv` by `finsupp.sum_arrow_lequiv_prod_arrow`.

2021-04-06 09:41:39 82b0b30
refactor(analysis/normed_space/normed_group_hom): generalize to semi_normed_group (#6977)
This is part of a series of PR to have the theory of `semi_normed_group` (and related concepts) in mathlib.
We generalize here `normed_group_hom` to `semi_normed_group` (keeping the old name to avoid too long names).
- [x] depends on: #6910

2021-04-06 09:41:37 02058ed
feat(group_theory/perm/*): facts about the cardinality of the support of a permutation (#6951)
Proves lemmas about the cardinality of the support of a permutation

2021-04-06 09:41:36 07aa34e
feat(algebra/category/Module): compare concrete and abstract kernels (#6938)

2021-04-06 09:41:35 3a99001
feat(category_theory): Type u is well-powered (#6812)
A minor test of the `well_powered` API: we can verify that `Type u` is well-powered, and show `subobject α ≃o set α`.

2021-04-06 05:50:28 2daf2ff
chore(scripts): update nolints.txt (#7052)
I am happy to remove some nolints for you!

2021-04-06 05:50:27 6f38c14
chore(data/finsupp/pointwise): add missing `finsupp.mul_zero_class` (#7049)

2021-04-06 05:50:26 aa665b1
feat(linear_algebra/finsupp): add refl/trans/symm lemmas for dom_lcongr (#7048)
These are just copies of the lemmas for `dom_congr`

2021-04-06 05:50:24 8b34e00
feat(order/complete_lattice): le_Sup and Inf_le iff lemmas (#7047)

2021-04-06 05:50:21 ba264c4
chore(group_theory/group_action):  cleanup (#7045)
Clean up stabilizers and add a missing simp lemma.

2021-04-06 05:50:21 5312895
chore(group_theory/order_of_element): move some lemmas (#7031)
I moved a few lemmas to `group_theory.subgroup` and to `group_theory.coset` and to `data.finset.basic`. Feel free to suggest different locations if they don't quite fit. This resolves #1563.
Renamed `card_trivial` to `subgroup.card_bot`

2021-04-06 05:50:20 dbb2b55
feat(measure_theory/interval_integral): more on integral_comp (#7030)
I replace `integral_comp_mul_right_of_pos`, `integral_comp_mul_right_of_neg`, and `integral_comp_mul_right` with a single lemma.

2021-04-06 05:50:19 82fd6e1
feat(logic/girard): Girard's paradox  (#7026)
A proof of Girard's paradox in lean, based on the LF proof: http://www.cs.cmu.edu/~kw/research/hurkens95tlca.elf

2021-04-06 05:50:18 415b369
feat(linear_algebra): `c ≤ dim K E` iff there exists a linear independent `s : set E`, `card s = c` (#7014)

2021-04-06 05:50:17 4192612
chore(data/fintype/basic): add `card_unique` and a warning note to `card_of_subsingleton` (#7008)

2021-04-06 05:50:16 975f533
chore(topology/continuous_function/algebra): add simp lemmas for smul coercion, move names out of global namespace (#7007)
The two new lemmas proposed are:
- `continuous_map.smul_coe`
- `continuous_functions.smul_coe`

2021-04-06 05:50:15 90e265e
feat(algebra/category): the category of R-modules is well-powered (#7002)

2021-04-06 05:50:13 030a704
feat(group_theory/perm/sign): Order of product of disjoint permutations (#6998)
The order of the product of disjoint permutations is the lcm of the orders.

2021-04-06 05:50:12 fe16235
feat(category_theory): equivalences preserve epis and monos (#6994)
Note that these don't follow from the results in `limits/constructions/epi_mono.lean`, since the results in that file are less universe polymorphic.

2021-04-06 05:50:11 89ea423
feat(archive/imo): formalize IMO 2005 Q3 (#6984)
feat(archive/imo): formalize IMO 2005 Q3

2021-04-06 05:50:10 b05affb
chore(group_theory/subgroup): translate map comap lemmas from linear_map (#6979)
Introduce the analogues of `linear_map.map_comap_eq` and `linear_map.comap_map_eq` to subgroups.
Also add `subgroup.map_eq_comap_of_inverse` which is a translation of `set.image_eq_preimage_of_inverse`.

2021-04-06 05:50:09 6aa0e30
feat(category_theory/preadditive): additive functors preserve biproducts (#6882)
An additive functor between preadditive categories creates and preserves biproducts.
Also, renames `src/category_theory/abelian/additive_functor.lean` to `src/category_theory/preadditive/additive_functor.lean` as it so far doesn't actually rely on anything being abelian. 
Also, moves the `.map_X` lemmas about additive functors into the `functor` namespace, so we can use dot notation `F.map_add` etc, when `[functor.additive F]` is available.

2021-04-06 01:49:51 4ddbdc1
refactor(topology/sheaves): Refactor sheaf condition proofs (#6962)
This PR adds two convenience Lemmas for working with the sheaf condition in terms of unique gluing and then uses them to greatly simplify the proofs of the sheaf condition for sheaves of functions (with and without a local predicate). Basically, all the categorical jargon gets outsourced and the actual proofs of the sheaf condition can now work in a very concrete setting. This drastically reduced the size of the proofs and eliminated any uses of `simp`.
Note that I'm effectively translating the sheaf condition from `Type` into a `Prop`, i.e. using `∃!` instead of using an instance of `unique`. I guess this diverts slightly from the original design in which the sheaf condition was always a `Type`. I found this to work quite well but maybe there is a way to phrase it differently.

2021-04-06 01:49:50 1e1eaae
feat(archive/imo): formalize IMO 2008 Q2 (#6958)

2021-04-06 01:49:48 0cc1fee
feat(linear_algebra/finsupp): lemmas for finsupp_tensor_finsupp (#6905)

2021-04-06 01:49:47 108fa6f
feat(order/bounded_lattice): min/max commute with coe (#6900)
to with_bot and with_top

2021-04-06 01:49:46 13f7910
feat(category_theory/limits/kan_extension): Right and Left Kan extensions of a functor (#6820)
This PR adds the left and right Kan extensions of a functor, and constructs the associated adjunction.
coauthored by @b-mehta 
A followup PR should prove that the adjunctions in this file are (co)reflective when \iota is fully faithful.
The current PR proves certain objects are initial/terminal, which will be useful for this.

2021-04-06 01:49:45 8e2db7f
refactor(order/boolean_algebra): generalized Boolean algebras (#6775)
We add ["generalized Boolean algebras"](https://en.wikipedia.org/wiki/Boolean_algebra_(structure)#Generalizations), following a [suggestion](https://github.com/leanprover-community/mathlib/pull/6469#issuecomment-787521935) of @jsm28. Now `boolean_algebra` extends `generalized_boolean_algebra` and `boolean_algebra.core`:
```lean
class generalized_boolean_algebra (α : Type u) extends semilattice_sup_bot α, semilattice_inf_bot α,
  distrib_lattice α, has_sdiff α :=
(sup_inf_sdiff : ∀a b:α, (a ⊓ b) ⊔ (a \ b) = a)
(inf_inf_sdiff : ∀a b:α, (a ⊓ b) ⊓ (a \ b) = ⊥)
class boolean_algebra.core (α : Type u) extends bounded_distrib_lattice α, has_compl α :=
(inf_compl_le_bot : ∀x:α, x ⊓ xᶜ ≤ ⊥)
(top_le_sup_compl : ∀x:α, ⊤ ≤ x ⊔ xᶜ)
class boolean_algebra (α : Type u) extends generalized_boolean_algebra α, boolean_algebra.core α :=
(sdiff_eq : ∀x y:α, x \ y = x ⊓ yᶜ)
```
I also added a module doc for `order/boolean_algebra`.
Many lemmas about set difference both for `finset`s and `set`s now follow from their `generalized_boolean_algebra` counterparts and I've removed the (fin)set-specific proofs.
`finset.sdiff_subset_self` was removed in favor of the near-duplicate `finset.sdiff_subset` (the latter has more explicit arguments).

2021-04-06 01:49:44 61d2ad0
chore(algebra/char_p/basic): uniformise notation and weaken some assumptions (#6765)
I had looked at this file in an earlier PR and decided to come back to uniformise the notation, using always `R` and never `α` for the generic type of the file.
While I was at it, I started also changing
* some `semiring` assumptions to `add_monoid + has_one`,
* some `ring` assumptions to `add_group + has_one`.
In the long run, I think that the characteristic of a ring should be defined as the order of `1` in the additive submonoid, but this is not what I am doing at the moment!
Here is a related Zulip discussion:
https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/char_zero

2021-04-05 20:54:32 1a45a56
feat(logic/basic): subsingleton_of_not_nonempty (#7043)
Also generalize `not_nonempty_iff_imp_false` to `Sort *`.

2021-04-05 15:31:11 04af8ba
feat(logic/small): instances for Pi and sigma types (#7042)
Add some instances to prove basic type formers preserve smallness.

2021-04-05 15:31:10 e0e56ee
feat(tactic/simps): trace with @[simps?] (#6995)
also trace with initialize_simps_projections?
trace when to_additive is applied to generated lemmas
with @[simps?] projection information is not printed (since that is often not as useful)

2021-04-05 12:18:25 5be4463
fix(fintype/basic): typo in docstring (#7041)

2021-04-05 05:18:28 d36d766
chore(scripts): update nolints.txt (#7038)
I am happy to remove some nolints for you!

2021-04-05 01:27:16 530e7e3
chore(data/quot): rename `nonempty_of_trunc` to enable dot notation (#7034)

2021-04-04 21:07:11 c7d7d83
chore(data/nat): use notation `n!`, minor golf (#7032)

2021-04-04 21:07:10 92869e2
chore(data/real/nnreal): use `function.injective.*` constructors (#7028)

2021-04-04 14:00:36 338331e
feat(topology/urysohns_lemma): Urysohn's lemma (#6967)

2021-04-04 11:19:18 ee58d66
feat(topology): variations on the intermediate value theorem (#6789)

2021-04-04 06:41:15 155b315
chore(data/set/function): minor style fixes (#7027)

2021-04-03 22:50:59 44f34ee
feat(group_theory/perm/sign): the alternating group (#6913)
Defines `alternating_subgroup` to be `sign.ker`
Proves a few basic lemmas about its cardinality

2021-04-03 16:38:16 a5b7de0
chore(linear_algebra): fix/add `coe_fn` simp lemmas (#7015)
* move `@[simp]` from `linear_map.comp_apply` to new
  `linear_map.coe_comp`;
* rename `linear_map.comp_coe` to `linear_map.coe_comp`, swap LHS&RHS;
* add `linear_map.coe_proj`, move `@[simp]` from `linear_map.proj_apply`.

2021-04-03 14:32:04 fc87598
chore(data/polynomial/eval): add `map_ring_hom_{id,comp}` lemmas (#7019)

2021-04-03 11:15:54 76a3b82
feat(topology/sheaves/sheaf_condition): Sheaf condition in terms of unique gluing (#6940)
As in
https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Sheaf.20condition.20for.20type-valued.20sheaf
This PR adds an equivalent sheaf condition for type-valued presheaves, which is hopefully more "hands-on" and easier to work
with for concrete type-valued presheaves. I tried to roughly follow the design of the other sheaf conditions.

2021-04-03 11:15:53 0041898
feat(category_theory/preadditive): single_obj α is preadditive when α is a ring (#6884)

2021-04-03 07:42:13 51c9b60
feat(category_theory/biproducts): additional lemmas (#6881)

2021-04-03 03:51:07 6c59845
doc(algebra/module/basic): update module doc (#7009)

2021-04-03 03:51:06 eedc9da
chore(linear_algebra/basic, algebra/lie/basic): fix erroneous doc string, add notation comment (#7005)

2021-04-03 03:51:05 b00d9be
chore(data/finset/basic, ring_theory/hahn_series): mostly namespace changes (#6996)
Added the line `open finset` and removed unneccesary `finset.`s from `ring_theory/hahn_series`
Added a small lemma to `data.finset.basic` that will be useful for an upcoming Hahn series PR

2021-04-03 03:51:03 b630c51
feat(category_theory/kernels): mild generalization of lemma (#6930)
Relaxes some `is_iso` assumptions to `mono` or `epi`.
I've also added some TODOs about related generalizations and instances which could be provided. I don't intend to get to them immediately.

2021-04-03 03:51:02 9c6fe3c
feat(linear_algebra/bilinear_form): Bilinear form restricted on a subspace is nondegenerate under some condition (#6855)
The main result is `restrict_nondegenerate_iff_is_compl_orthogonal` which states that: a subspace is complement to its orthogonal complement with respect to some bilinear form if and only if that bilinear form restricted on to the subspace is nondegenerate.
To prove this, I also introduced `dual_annihilator_comap`. This is a definition that allows us to treat the dual annihilator of a dual annihilator as a subspace in the original space.

2021-04-03 03:51:01 2a9c21c
feat(measure_theory/interval_integral): improve integral_comp lemmas (#6795)
I expand our collection of `integral_comp` lemmas so that they can handle all interval integrals of the form
`∫ x in a..b, f (c * x + d)`, for any function `f : ℝ → E`  and any real constants `c` and `d` such that `c ≠ 0`.
This PR now also removes the `ae_measurable` assumptions from the preexisting `interval_comp` lemmas (thank you @sgouezel!).

2021-04-02 21:56:53 36e5ff4
feat(category_theory/with_term): formally adjoin terminal / initial objects. (#6966)
Adds the construction which formally adjoins a terminal resp. initial object to a category.

2021-04-02 21:56:51 267e660
refactor(algebra/add_torsor): use `to_additive` for `add_action` (#6914)

2021-04-02 21:56:50 278ad33
refactor(topology/metric_space/isometry): generalize to pseudo_metric (#6910)
This is part of a series of PR to have the theory of `semi_normed_group` (and related concepts) in mathlib.
We generalize here `isometry` to `pseudo_emetric_space` and `pseudo_metric_space`.

2021-04-02 21:56:49 cb1e888
feat(category_theory/limits): is_iso_π_of_is_initial (#6908)
From [zulip](https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/Simplicial.20stuff/near/231346653)

2021-04-02 21:56:48 fe4ea3d
chore(docs/undergrad.yaml): a few updates to the undergrad list (#6904)
Adds entries for Schur's Lemma and several infinite series concepts

2021-04-02 21:56:47 7b52617
feat(data/nat/multiplicity): weaken hypothesis on set bounds (#6903)

2021-04-02 16:17:31 fead60f
chore(data/finsupp/basic): add a lemma for `map_domain` applied to equivs (#7001)

2021-04-02 09:16:15 394719f
chore(data/finsupp): lemmas about map_range and map_domain (#6976)
This proves some functorial properties:
* `finsupp.map_range_id`
* `finsupp.map_range_comp`
Adds the new definitions to match `finsupp.map_range.add_monoid_hom`, and uses them to golf some proofs:
* `finsupp.map_range.zero_hom`, which is `map_domain` as a `zero_hom`
* `finsupp.map_range.add_equiv`, which is `map_range` as an `add_equiv`
* `finsupp.map_range.linear_map`, which is `map_range` as a `linear_map`
* `finsupp.map_range.linear_equiv`, which is `map_range` as a `linear_equiv`
* `finsupp.map_domain.add_monoid_hom`, which is `map_domain` as an `add_monoid_hom`
Shows the functorial properties of these bundled definitions:
* `finsupp.map_range.zero_hom_id`, `finsupp.map_range.zero_hom_comp`
* `finsupp.map_range.add_monoid_hom_id`, `finsupp.map_range.add_monoid_hom_comp`
* `finsupp.map_range.add_equiv_refl`, `finsupp.map_range.add_equiv_trans`
* `finsupp.map_range.linear_map_id`, `finsupp.map_range.linear_map_comp`
* `finsupp.map_range.linear_equiv_refl`, `finsupp.map_range.linear_equiv_trans`
* `finsupp.map_domain.add_monoid_hom_id`, `finsupp.map_domain.add_monoid_hom_comp`
And shows that `map_range` and `map_domain` commute when the range-map preserves addition:
* `finsupp.map_domain_map_range`

2021-04-02 08:15:10 6e5c07b
feat(category_theory/subobject): well-powered categories (#6802)

2021-04-02 04:59:38 19483ae
feat(data/finset): inj on of image card eq (#6785)

2021-04-02 01:20:16 7337702
feat(data/equiv/fintype): computable bijections and perms from/to fintype (#6959)
Using exhaustive search, we can upgrade embeddings from fintypes into
equivs, and transport perms across embeddings. The computational
performance is poor, so the docstring suggests alternatives when an
explicit inverse is known.

2021-04-01 18:49:17 d8de567
feat(group_theory/order_of_element): generalised to add_order_of (#6770)
This PR defines `add_order_of` for an additive monoid. If someone sees how to do this with more automation, let me know. 
This gets one step towards closing issue #1563.
Coauthored by: Yakov Pechersky @pechersky

2021-04-01 17:47:25 1e27fba
admin(README.md): add @adamtopaz to the maintainers list (#6987)

2021-04-01 17:47:24 c35e9f6
admin(README.md): add @b-mehta to the maintainers list (#6986)

2021-04-01 17:47:23 cea8c65
feat(algebra/char_p/exp_char): basics about the exponential characteristic (#6671)
This file contains the definition and a few basic facts pertaining to the exponential characteristic of an integral domain.

2021-04-01 15:06:29 396602b
feat(algebra/module/hom): Add missing smul instances on add_monoid_hom (#6891)
These are defeq to the smul instances on `linear_map`, in `linear_algebra/basic.lean`.

2021-04-01 13:55:22 a690ce7
admin(README.md): add @TwoFX to the maintainers list (#6985)

2021-04-01 12:44:31 132ae2b
fix(algebraic_topology): fix a typo (#6991)

2021-04-01 09:03:10 a9b6230
feat(combinatorics/quiver): weakly connected components (#6847)
Define composition of paths and the weakly connected components of a directed graph. Two vertices are in the same weakly connected component if there is a zigzag of arrows from one to the other.

2021-04-01 05:03:20 21cc806
feat(data/equiv/basic): `perm_congr` group lemmas (#6982)

2021-04-01 01:24:57 3365c44
feat(data/equiv/basic): `equiv.swap_eq_refl_iff` (#6983)

2021-04-01 01:24:56 64abe48
refactor(topology/metric_space/pi_Lp): generalize to pseudo_metric (#6978)
We generalize here the Lp distance to `pseudo_emetric` and similar concepts.

2021-04-01 01:24:55 b7fbc17
chore(data/equiv/add_equiv): missing simp lemmas (#6975)
These lemmas already exist for `equiv`, this just copies them to `add_equiv`.

2021-04-01 01:24:54 e540c2f
feat(data/set/basic): default_coe_singleton (#6971)

2021-04-01 01:24:53 ec9476f
chore(data/fintype/basic): add card_le_of_surjective and card_quotient_le (#6964)
Add two natural lemmas that were missing from `fintype.basic`.

2021-04-01 01:24:52 71c3e71
refactor(topology/bases): use `structure` for `is_topological_basis (#6947)
* turn `topological_space.is_topological_basis` into a `structure`;
* rename `mem_nhds_of_is_topological_basis` to `is_topological_basis.mem_nhds_iff`;
* rename `is_open_of_is_topological_basis` to `is_topological_basis.is_open`;
* rename `mem_basis_subset_of_mem_open` to `is_topological_basis.exists_subset_of_mem_open`;
* rename `sUnion_basis_of_is_open` to `is_topological_basis.open_eq_sUnion`, add prime version;
* add `is_topological_basis.prod`;
* add convenience lemma `is_topological_basis.second_countable_topology`;
* rename `is_open_generated_countable_inter` to `exists_countable_basis`;
* add `topological_space.countable_basis` and API around it;
* add `@[simp]` to `opens.mem_supr`, add `opens.mem_Sup`;
* golf

2021-03-31 21:24:16 5f1b450
refactor(algebra/*): add new `mul_one_class` and `add_zero_class` for non-associative monoids (#6865)
This extracts a base class from `monoid M`, `mul_one_class M`, that drops the associativity assumption.
It goes on to weaken `monoid_hom` and `submonoid` to require `mul_one_class M` instead of `monoid M`, along with weakening the typeclass requirements for other primitive constructions like `monoid_hom.fst`.
Instances of the new classes are provided on `pi`, `prod`, `finsupp`, `(add_)submonoid`, and `(add_)monoid_algebra`.
This is by no means an exhaustive relaxation across mathlib, but it aims to broadly cover the foundations.

2021-03-31 17:53:07 cc99152
feat(data/list/zip): `nth_zip_with` univ polymorphic, `zip_with_eq_nil_iff` (#6974)

2021-03-31 14:28:55 23dbb4c
feat(tactic/elementwise): autogenerate lemmas in concrete categories (#6941)
# The `elementwise` attribute
The `elementwise` attribute can be applied to a lemma
```lean
@[elementwise]
lemma some_lemma {C : Type*} [category C] {X Y : C} (f g : X ⟶ Y) : f = g := ...
```
and produce
```lean
lemma some_lemma_apply {C : Type*} [category C] [concrete_category C]
  {X Y : C} (f g : X ⟶ Y) (x : X) : f x = g x := ...
```
(Here `X` is being coerced to a type via `concrete_category.has_coe_to_sort` and
`f` and `g` are being coerced to functions via `concrete_category.has_coe_to_fun`.)
The name of the produced lemma can be specified with `@[elementwise other_lemma_name]`.
If `simp` is added first, the generated lemma will also have the `simp` attribute.

2021-03-31 13:16:42 f29b0b4
feat(category_theory/lifting_properties): create a new file about lifting properties (#6852)
This file introduces lifting properties, establishes a few basic properties, and constructs a subcategory spanned by morphisms having a right lifting property.

2021-03-31 11:08:19 09110f1
feat(geometry/manifold/bump_function): define smooth bump functions, baby version of the Whitney embedding thm (#6839)
* refactor some functions in `analysis/calculus/specific_functions` to use bundled structures;
* define `to_euclidean`, `euclidean.dist`, `euclidean.ball`, and `euclidean.closed_ball`;
* define smooth bump functions on manifolds;
* prove a baby version of the Whitney embedding theorem.

2021-03-31 09:30:06 1fdce2f
refactor(analysis/normed_space/basic): add semi_normed_ring (#6889)
This is the natural continuation of #6888 . We add here semi_normed_ring, semi_normed_comm_ring, semi_normed_space and semi_normed_algebra.
I didn't add `semi_normed_field`: the most important result for normed_field is `∥1∥ = 1`, that is false for `semi_normed_field`, making it a more or less useless notion. In particular a `semi_normed_space` is by definition a vector space over a `normed_field`.

2021-03-31 03:01:59 85c8961
chore(scripts): update nolints.txt (#6970)
I am happy to remove some nolints for you!

2021-03-31 00:41:44 8ed5c3c
chore(topology/algebra/group_with_zero): continuity attributes (#6965)
Some `@[continuity]` tags, requested at https://github.com/leanprover-community/mathlib/pull/6937#discussion_r604139611

2021-03-31 00:41:43 6f6ee00
chore(data/finsupp): add simp lemmas about dom_congr (#6963)
Inspired by #6905

2021-03-30 20:36:57 f2b433f
refactor(data/equiv/basic): remove `equiv.set.range` (#6960)
We already had `equiv.of_injective`, which duplicated the API. `of_injective` is the preferred naming, so we change all occurrences accordingly.
This also renames `equiv.set.range_of_left_inverse` to `equiv.of_left_inverse`, to match names like `linear_equiv.of_left_inverse`.
Note that the `congr` and `powerset` definitions which appear in the diff have just been reordered, and are otherwise unchanged.

2021-03-30 20:36:56 cf377e2
chore(algebra/category/*): fix some names (#6846)

2021-03-30 17:12:57 33f443f
feat(archive/imo): add 2011 Q5 (#6927)
proof of IMO 2011 Q5

2021-03-30 17:12:56 0c0fb53
feat(group_theory/perm/cycles): Order of is_cycle (#6873)
The order of a cycle equals the cardinality of its support.

2021-03-30 14:01:24 a192783
chore(algebra/direct_sum_graded): relax typeclass assumptions (#6961)

2021-03-30 14:01:23 ed6d94a
chore(group_theory/group_action/defs): combine duplicated `comp_hom` and rename derivative definitions (#6942)
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Duplicate.20mul_action.20defs/near/232246589)

2021-03-30 14:01:22 e1f66f1
feat(topology/algebra/group_with_zero): continuity of exponentiation to an integer power (`fpow`) (#6937)
In a topological group-with-zero (more precisely, in a space with `has_continuous_inv'` and `has_continuous_mul`), the `k`-th power function is continuous for integer `k`, with the possible exception of at 0.

2021-03-30 14:01:21 bcfaabf
feat(data/set_like): remove repeated boilerplate from subobjects (#6768)
This just scratches the surface, and removes all of the boilerplate that is just a consequence of the injective map to a `set`.
Already this trims more than 150 lines.
For every lemma of the form `set_like.*` added in this PR, the corresponding `submonoid.*`, `add_submonoid.*`, `sub_mul_action.*`, `submodule.*`, `subsemiring.*`, `subring.*`, `subfield.*`, `subalgebra.*`, and `intermediate_field.*` lemmas have been removed.
Often these lemmas only existed for one or two of these subtypes, so this means that we have lemmas for more things not fewer.
Note that while the `ext_iff`, `ext'`, and `ext'_iff` lemmas have been removed, we still need the `ext` lemma as `set_like.ext` cannot directly be tagged `@[ext]`.

2021-03-30 10:02:55 b0ece6f
chore(data/set/{basic,countable}): add, rename, golf (#6935)
* add `set.range_prod_map` and `set.countable.image2`;
* rename `set.countable_prod` to `set.countable.prod`.

2021-03-30 10:02:54 7e109c4
feat(measure_theory/lp_space): continuous functions on compact space are in Lp (#6919)
Continuous functions on a compact space equipped with a finite Borel measure are in Lp, and the inclusion is a bounded linear map.  This follows directly by transferring the construction in #6878 for bounded continuous functions, using the fact that continuous function on a compact space are bounded.

2021-03-30 10:02:53 3e67f50
feat(analysis/normed_space/inner_product): isometry of ℂ with Euclidean space (#6877)
`ℂ` is isometric to `fin 2 → ℝ` with the Euclidean inner product.  The isometry given here is that defined by the ordered basis {1, i} for `ℂ`.

2021-03-30 07:31:27 877af10
chore(algebra/big_operators/order): generalize some lemmas to `ordered_comm_semiring` (#6950)

2021-03-30 07:31:27 fe00980
feat(topology/compact_open): β ≃ₜ C(α, β) if α has a single element (#6946)

2021-03-30 03:44:59 8d398a8
chore(scripts): update nolints.txt (#6957)
I am happy to remove some nolints for you!

2021-03-30 03:44:58 b4ce9b7
feat(group_theory/order_of_element): exists_pow_eq_self_of_coprime (#6875)
If `n` is coprime to the order of `g`, then there exists an `m` such that `(g ^ n) ^ m = g`.

2021-03-30 03:44:57 b449a3c
feat(order/ideal, order/pfilter, order/prime_ideal): added `is_ideal`, `is_pfilter`, `is_prime`, `is_maximal`, `prime_pair` (#6656)
Proved basic lemmas about them. Also extended the is_proper API.
Made the `pfilter`arguments of some lemmas explicit:
- `pfilter.nonempty`
- `pfilter.directed`

2021-03-29 23:43:35 e5c112d
feat(category_theory/arrow): simp lemmas for lifts involving arrow.mk (#6953)
These came up during review of #6852.

2021-03-29 23:43:35 87bc893
feat(group_theory/{subgroup, order_of_element}): refactors simple groups, classifies finite simple abelian/solvable groups (#6926)
Refactors the deprecated `simple_group` to a new `is_simple_group`
Shows that all cyclic groups of prime order are simple
Shows that all simple `comm_group`s are cyclic
Shows that all simple finite `comm_group`s have prime order
Shows that a simple group is solvable iff it is commutative

2021-03-29 23:43:33 ad4aca0
feat(topology/local_homeomorph): add `is_image`, `piecewise`, and `disjoint_union` (#6804)
Also add `local_equiv.copy` and `local_homeomorph.replace_equiv` and use them for `local_equiv.disjoint_union` and `local_homeomorph.disjoint_union.

2021-03-29 20:11:52 50225da
feat(data/fin): fin n.succ is an add_comm_group (#6898)
This just moves the proof out of `data.zmod` basic.
Moving the full ring instance is left for future work, as `modeq`, used to prove left_distrib, is not available to import in `data/fin/basic`.
Note this adds an import of `data.int.basic` to `data.fin.basic`. I think this is probably acceptable?

2021-03-29 18:22:24 8b7c8a4
chore(topology/instances/real): golf (#6945)

2021-03-29 18:22:23 3fdf529
chore(topology/instances/ennreal): golf (#6944)

2021-03-29 13:12:21 1677653
chore(*): long lines (#6939)
Except for URLs, references to books, and `src/tactic/*`, this should be very close to the last of our long lines.

2021-03-29 13:12:19 f1fe129
feat(category_theory/images): instance for precomposition by iso (#6931)

2021-03-29 13:12:17 d2e5976
feat(category_theory/limits/terminal): constructor for is_terminal (#6929)

2021-03-29 13:12:15 cf56f88
feat(category_theory/limits/zero): functor categories have zero morphisms (#6928)

2021-03-29 13:12:14 407ad21
feat(algebra.smul_with_zero): add mul_zero_class.to_smul_with_zero (#6911)

2021-03-29 13:12:12 fe29f88
feat(data/nat/basic):  (n+1) / 2 ≤ n (#6863)
Zulip:
https://leanprover.zulipchat.com/#narrow/stream/116395-maths

2021-03-29 13:12:11 66ee65c
feat(category): structured arrows (#6830)
Factored out from #6820.

2021-03-29 13:12:10 318cb4b
feat(category_theory): essentially_small categories (#6801)
Preparation for `well_powered`, then for `complete_semilattice_Inf|Sup` on `subobject X`, then for work on chain complexes.

2021-03-29 13:12:08 8d8b64e
feat(data/equiv/mul_add_aut): adding conjugation in an additive group (#6774)
assuming `[add_group G]` this defines `G ->+ additive (add_aut G)`

2021-03-29 08:42:19 2ad4a4c
chore(group_theory/subgroup,logic/nontrivial): golf (#6934)

2021-03-29 05:18:50 5ab177a
chore(topology/instances/real): remove instance `real_maps_algebra` (#6920)
Remove 
```lean
instance reals_semimodule : has_continuous_smul ℝ ℝ
instance real_maps_algebra {α : Type*} [topological_space α] : algebra ℝ C(α, ℝ)
```
These are not used explicitly anywhere in the library, I suspect because if needed they can be found by typeclass inference.  Deleting them cleans up the import hierarchy by requiring many fewer files to import `topology.continuous_function.algebra`.

2021-03-29 03:17:36 cb1d1c6
chore(scripts): update nolints.txt (#6933)
I am happy to remove some nolints for you!

2021-03-29 03:17:36 f290000
feat(data/equiv/fin): rename sum_fin_sum_equiv to fin_sum_fin_equiv (#6857)
Renames `sum_fin_sum_equiv` to `fin_sum_fin_equiv` (as discussed 
[on Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/sum_fin_add_comm_equiv))
Introduces a version with `fin(n + m)` instead of `fin(m + n)` 
Adds a bunch of simp lemmas for applying these (and their inverses)

2021-03-28 19:54:49 8e275a3
fix(order/complete_lattice): fix typo in docstring (#6925)

2021-03-28 19:54:48 a17f38f
feat(measure_theory/lp_space): bounded continuous functions are in Lp (#6878)
Under appropriate conditions (finite Borel measure, second-countable), a bounded continuous function is in L^p.  The main result of this PR is `bounded_continuous_function.to_Lp`, which provides this operation as a bounded linear map.  There are also several variations.

2021-03-28 16:13:09 4487e73
feat(order/bounded_lattice): is_total, coe_sup and unique_maximal lemmas (#6922)
A few little additions for with_top and with_bot.

2021-03-28 16:13:08 7285fb6
feat(data/complex/circle): circle is a Lie group (#6907)
Define `circle` to be the unit circle in `ℂ` and give it the structure of a Lie group.  Also define `exp_map_circle` to be the natural map `λ t, exp (t * I)` from `ℝ` to `circle`, and give it (separately) the structures of a group homomorphism and a smooth map (we seem not to have the definition of a Lie group homomorphism).

2021-03-28 14:22:34 accb9d2
fix(topology/algebra/mul_action): fix typo in instance name (#6921)

2021-03-28 12:00:37 0e4760b
refactor(measure_theory): add typeclasses for measurability of operations (#6832)
With these typeclasses and lemmas we can use, e.g., `measurable.mul` for any type with measurable `uncurry (*)`, not only those with `has_continuous_mul`.
New typeclasses:
* `has_measurable_add`, `has_measurable_add₂`: measurable left/right addition and measurable `uncurry (+)`;
* `has_measurable_mul`, `has_measurable_mul₂`: measurable left/right multiplication and measurable `uncurry (*)`;
* `has_measurable_pow`: measurable `uncurry (^)`
* `has_measurable_sub`, `has_measurable_sub₂`: measurable left/right subtraction and measurable `λ (a, b), a - b`
* `has_measurable_div`, `has_measurable_div₂` : measurability of division as a function of numerator/denominator and measurability of `λ (a, b), a / b`;
* `has_measurable_neg`, `has_measurable_inv`: measurable negation/inverse;
* `has_measurable_const_smul`, `has_measurable_smul`: measurable `λ x, c • x` and measurable `λ (c, x), c • x`

2021-03-28 04:55:34 dc34b21
lint(*): split long lines (#6918)

2021-03-28 01:36:58 e129117
chore(scripts): update nolints.txt (#6917)
I am happy to remove some nolints for you!

2021-03-27 23:51:09 879cb47
feat(test/integration): add examples of computing integrals by simp (#6859)
As suggested in [#6216 (comment)](https://github.com/leanprover-community/mathlib/pull/6216#discussion_r580389848).
The examples added here were made possible by #6216, #6334, #6357, #6597.

2021-03-27 21:49:34 06b21d0
chore(category_theory/monads): remove empty file (#6915)
In #5889 I moved the contents of this file into monad/basic but I forgot to delete this file.

2021-03-27 18:47:28 27c8676
refactor(geometry/manifold/algebra/smooth_functions): make `smooth_map_group` division defeq to `pi.has_div` (#6912)
The motivation was the fact that this allows `smooth_map.coe_div` to be `rfl` but this should be more generally useful.

2021-03-27 15:21:25 d104413
chore(topology/metric_space): golf, generalize, rename (#6849)
### Second countable topology
* generalize `metric.second_countable_of_almost_dense_set` to a pseudo
  emetric space, see
  `emetric.subset_countable_closure_of_almost_dense_set` (for sets)
  and `emetric.second_countable_of_almost_dense_set` (for the whole space);
* use it to generalize `emetric.countable_closure_of_compact` to a
  pseudo emetric space (replacing `closure t = s` with
  `s ⊆ closure t`) and prove that a sigma compact pseudo emetric space has
  second countable topology;
* generalize `second_countable_of_proper` to a pseudo metric space;
### `emetric.diam`
* rename `emetric.diam_le_iff_forall_edist_le` to `emetric.diam_le_iff`;
* rename `emetric.diam_le_of_forall_edist_le` to `emetric.diam_le`.

2021-03-27 06:35:11 cc7e722
refactor(representation_theory/maschke): replaces `¬(ring_char k ∣ fintype.card G)` with `invertible (fintype.card G : k)` instance (#6901)
Refactors Maschke's theorem to take an instance of `invertible (fintype.card G : k)` instead of an explicit `not_dvd : ¬(ring_char k ∣ fintype.card G)`.
Provides that instance in the context `char_zero k`.
Allows `monoid_algebra.submodule.is_complemented` to be an instance.

2021-03-27 06:35:10 d32f9c7
feat(data/nat/log): add some lemmas and monotonicity (#6899)

2021-03-27 06:35:09 5ecb1f7
feat(group_theory/order_of_element): order_of is the same in a submonoid (#6876)
The first lemma shows that `order_of` is the same in a submonoid, but it seems like you also need a lemma for subgroups.

2021-03-27 03:05:14 5c95d48
chore(scripts): update nolints.txt (#6902)
I am happy to remove some nolints for you!

2021-03-27 03:05:12 3fe67c8
feat(algebra/module): pull-back module structures along homomorphisms (#6895)

2021-03-27 03:05:11 4b261a8
chore(algebra/smul_with_zero): add missing injective / surjective transferring functions (#6892)

2021-03-27 03:05:10 832a2eb
refactor(topology/continuous_functions): change file layout (#6890)
Moves `topology/bounded_continuous_function.lean` to `topology/continuous_functions/bounded.lean`, splitting out the content about continuous functions on a compact space to `topology/continuous_functions/compact.lean`.
Renames `topology/continuous_map.lean` to `topology/continuous_functions/basic.lean`.
Renames `topology/algebra/continuous_functions.lean` to `topology/continuous_functions/algebra.lean`.
Also changes the direction of the equivalences, replacing `bounded_continuous_function.equiv_continuous_map_of_compact` with `continuous_map.equiv_bounded_of_compact` (and also the more structured version).
There's definitely more work to be done here, particularly giving at least some lemmas characterising the norm on `C(α, β)`, but I wanted to do a minimal PR changing the layout first.

2021-03-27 03:05:09 99c23ea
refactor(analysis/normed_space/basic): add semi_normed_group (#6888)
This is part of a series of PR to have semi_normed_group (and related concepts) in mathlib.
 
To keep the PR as small as possibile I just added the new class `semi_normed_group`. I didn't introduce anything like `semi_normed_ring` and I didn't do anything about morphisms.

2021-03-27 03:05:08 bc33f1a
feat(group_theory/perm/cycles): is_cycle_of_is_cycle_pow (#6871)
If `g ^ n` is a cycle, and if `g ^ n` doesn't have smaller support, then `g` is a cycle.

2021-03-27 03:05:07 5eead09
feat(algebra/big_operators/basic): add lemmas for a product with two non one factors (#6826)
Add another version of `prod_eq_one` and 3 versions of `prod_eq_double`, a lemma that says a product with only 2 non one factors is equal to the product of the 2 factors.

2021-03-27 03:05:06 cfd1a4c
feat(linear_algebra/bilinear_form): generalize some constructions to the noncomm case (#6824)
Introduce an operation `flip` on a bilinear form, which swaps the arguments.  Generalize the construction `bilin_form.to_lin` (which currently exists for commutative rings) to a weaker construction `bilin_form.to_lin'` for arbitrary rings.
Rename lemmas
`sesq_form.map_sum_right` -> `sesq_form.sum_right`
`sesq_form.map_sum_left` -> `sesq_form.sum_left`
`bilin_form.map_sum_right` -> `bilin_form.sum_right`
`bilin_form.map_sum_left` -> `bilin_form.sum_left`
`to_linear_map_apply` (sic, no namespace) -> `bilin_form.to_lin_apply`

2021-03-27 03:05:05 ec26d96
feat(order/lattice): add complete_semilattice_Sup/Inf (#6797)
This adds `complete_semilattice_Sup` and `complete_semilattice_Inf` above `complete_lattice`.
This has not much effect, as in fact either implies `complete_lattice`. However it's useful at times to have these, when you can naturally define just one half of the structure at a time (e.g. the subobject lattice in a general category, where for `Sup` we need coproducts and images, while for the `Inf` we need wide pullbacks).
There are many places in mathlib that currently use `complete_lattice_of_Inf`. It might be slightly nicer to instead construct a `complete_semilattice_Inf`, and then use the new `complete_lattice_of_complete_semilattice_Inf`, but I haven't done that here.

2021-03-26 23:52:29 e36656e
chore(category_theory/monoidal): golf some proofs (#6894)
Golfs proofs of `tensor_left_iff`, `tensor_right_iff`, `left_unitor_tensor'`, `right_unitor_tensor` and `unitors_equal` - in particular removes the file `monoidal/unitors` as all it contained was a proof of `unitors_equal` which is a two line proof.

2021-03-26 23:52:28 e21b4bc
chore(data/equiv/transfer_instance): reuse existing proofs (#6868)
This makes all the proofs in this file identical. It's unfortunate that the `letI`s have to be written out in each case,

2021-03-26 23:52:27 9e00c2b
feat(ring_theory/int/basic): Induction, nat_abs and units (#6733)
Proves : 
 * Induction on primes (special case for nat)
 * In `int`, a number and its `nat_abs` are associated
 * An integer is prime iff its `nat_abs` is prime
 * Two integers are associated iff they are equal or opposites
 * Classification of the units in `int` (trivial but handy lemma)

2021-03-26 22:21:04 ca7dca3
feat(geometry/manifold/algebra/smooth_functions): simp lemmas for coercions to functions (#6893)
These came up while working on the branch `replace_algebra_def` but seem worth adding
in their own right.

2021-03-26 18:26:23 902b01d
chore(algebra/group): rename `is_unit_unit` to `units.is_unit` (#6886)

2021-03-26 18:26:22 e43d964
chore(data/pi,algebra/group/pi): reorganize proofs (#6869)
Add `pi.single_op` and `pi.single_binop` and use them in the proofs.

2021-03-26 18:26:20 3566cbb
feat(*): add more lemmas about `set.piecewise` (#6862)

2021-03-26 18:26:19 ef7fe6f
feat(dynamics/ergodic/conservative): define conservative systems, formalize Poincaré recurrence thm (#2311)

2021-03-26 14:24:21 f0bfb25
feat(geometry/manifold/mfderiv): differentiability of `f : E ≃L[𝕜] E'` (#6850)

2021-03-26 14:24:20 2b71c80
feat(linear_algebra/dual): add the dual map (#6807)

2021-03-26 14:24:19 8addf9a
feat(topology/bcf): better dist_lt_of_* lemmas (#6781)

2021-03-26 14:24:17 6ae9f00
feat(ring_theory/polynomial/symmetric): degrees_esymm (#6718)
A lot of API also added for finset, finsupp, multiset, powerset_len

2021-03-26 11:55:37 34a3317
feat(group_theory/perm/sign): power has smaller support (#6872)
The support of `g ^ n` is contained in the support of `g`.

2021-03-26 11:55:36 adc5f9d
feat(ring_theory/ideal/operations): add an instance (#6717)
This instance has been suggested by @eric-wieser in #6640.
On my machine I get a deterministic timeout in `ring_theory/finiteness` at line 325, but in principle it seems a useful instance to have.

2021-03-26 08:06:47 fb49529
chore(topology/sheaves): speed up a slow proof (#6879)
In another branch this proof mysteriously becomes slightly too slow, so I'm offering a pre-emptive speed up, just replacing `simp` with `rw`.

2021-03-26 08:06:45 c658f5c
refactor(algebra/field): allow custom `div` (#6874)

2021-03-26 08:06:44 c07c310
feat(group_theory/perm_basic): Lemma swap_apply_apply (#6870)
A useful rw lemma.

2021-03-26 08:06:42 0977b20
feat(measure_theory/interval_integral): weaken assumption in `integral_non_ae_measurable` (#6858)
I don't see any reason for having a strict inequality here.

2021-03-26 08:06:41 03f0bb1
refactor(topology/algebra): define `has_continuous_smul`, use for topological semirings and algebras (#6823)

2021-03-26 08:06:39 5c93c2d
feat(category_theory/triangulated/rotate): add definition of rotation and inverse rotation of triangles and their morphisms (#6803)
This PR adds the definition of rotation and inverse rotation of triangles and triangle morphisms.
It also shows that rotation is an equivalence on the category of triangles in an additive category.

2021-03-26 08:06:38 5c856c3
feat(topology/vector_bundle): definition of topological vector bundle (#4658)
# Topological vector bundles
In this file we define topological vector bundles.
Let `B` be the base space. In our formalism, a topological vector bundle is by definition the type
`bundle.total_space E` where `E : B → Type*` is a function associating to
`x : B` the fiber over `x`. This type `bundle.total_space E` is just a type synonym for
`Σ (x : B), E x`, with the interest that one can put another topology than on `Σ (x : B), E x`
which has the disjoint union topology.
To have a topological vector bundle structure on `bundle.total_space E`,
one should addtionally have the following data:
* `F` should be a topological vector space over a field `𝕜`;
* There should be a topology on `bundle.total_space E`, for which the projection to `E` is
a topological fiber bundle with fiber `F` (in particular, each fiber `E x` is homeomorphic to `F`);
* For each `x`, the fiber `E x` should be a topological vector space over `𝕜`, and the injection
from `E x` to `bundle.total_space F E` should be an embedding;
* The most important condition: around each point, there should be a bundle trivialization which
is a continuous linear equiv in the fibers.
If all these conditions are satisfied, we register the typeclass
`topological_vector_bundle 𝕜 F E`. We emphasize that the data is provided by other classes, and
that the `topological_vector_bundle` class is `Prop`-valued.
The point of this formalism is that it is unbundled in the sense that the total space of the bundle
is a type with a topology, with which one can work or put further structure, and still one can
perform operations on topological vector bundles (which are yet to be formalized). For instance,
assume that `E₁ : B → Type*` and `E₂ : B → Type*` define two topological vector bundles over `𝕜`
with fiber models `F₁` and `F₂` which are normed spaces. Then one can construct the vector bundle of
continuous linear maps from `E₁ x` to `E₂ x` with fiber `E x := (E₁ x →L[𝕜] E₂ x)` (and with the
topology inherited from the norm-topology on `F₁ →L[𝕜] F₂`, without the need to define the strong
topology on continuous linear maps between general topological vector spaces). Let
`vector_bundle_continuous_linear_map 𝕜 F₁ E₁ F₂ E₂ (x : B)` be a type synonym for `E₁ x →L[𝕜] E₂ x`.
Then one can endow
`bundle.total_space (vector_bundle_continuous_linear_map 𝕜 F₁ E₁ F₂ E₂)`
with a topology and a topological vector bundle structure.
Similar constructions can be done for tensor products of topological vector bundles, exterior
algebras, and so on, where the topology can be defined using a norm on the fiber model if this
helps.
Coauthored-by: Sebastien Gouezel  <sebastien.gouezel@univ-rennes1.fr>

2021-03-26 03:02:05 b797d51
chore(scripts): update nolints.txt (#6885)
I am happy to remove some nolints for you!

2021-03-25 21:40:33 e6d01b8
feat(topology/bounded_continuous_function): add `coe_mul`, `mul_apply` (#6867)
Partners of the extant `coe_smul`, `smul_apply` lemmas (see line 630).
These came up while working on the `replace_algebra_def` branch but
seem worth adding independently.

2021-03-25 21:40:32 b670391
chore(algebra/group/{pi,prod}): add missing instances (#6866)

2021-03-25 21:40:31 6e14e8f
feat(data/equiv/mul_add): define `mul_hom.inverse` (#6864)

2021-03-25 19:35:08 e054705
refactor(topology/metric_space/antilipschitz): generalize to pseudo_metric_space (#6841)
This is part of a series of PR to introduce semi_normed_group in mathlib.
We introduce here anti Lipschitz maps for `pseudo_emetric_space`.

2021-03-25 19:35:07 b299d14
feat(algebra/geom_sum): rename geom_series to geom_sum, adds a lemma for the geometric sum (#6828)
Declarations with names including `geom_series` have been renamed to use `geom_sum`, instead.
Also adds the lemma `geom_sum₂_succ_eq`: `geom_sum₂ x y (n + 1) = x ^ n + y * (geom_sum₂ x y n)`

2021-03-25 15:21:05 1be91a1
chore(order/filter/lift,topology/algebra/ordered): drop `[nonempty ι]` (#6861)
* add `set.powerset_univ`, `filter.lift_top`, `filter.lift'_top`;
* remove `[nonempty ι]` from `filter.lift'_infi_powerset` and `tendsto_Icc_class_nhds_pi`.

2021-03-25 10:59:25 879273e
feat(logic/basic, logic/function/basic): make `cast` the simp-normal form of `eq.mp` and `eq.mpr`, add lemmas (#6834)
This adds the fact that `eq.rec`, `eq.mp`, `eq.mpr`, and `cast` are bijective, as well as some simp lemmas that follow from their injectivity.

2021-03-25 03:23:45 81e8a13
chore(scripts): update nolints.txt (#6856)
I am happy to remove some nolints for you!

2021-03-25 03:23:44 ec77f22
chore(measure_theory/measure): add `exists_measurable_superset_forall_eq` (#6853)

2021-03-25 03:23:43 5a72daf
feat(data/equiv/basic): add a computable version of equiv.set.range (#6821)
If a left-inverse of `f` is known, it can be used to construct the equiv both computably and with control over definitional reduction.
This adds the definition `equiv.set.range_of_left_inverse` to mirror `linear_equiv.of_left_inverse` and `ring_equiv.of_left_inverse`.

2021-03-25 03:23:42 c3034c2
feat(data/indicator_function): add multiplicative version (#6794)
We need it for `finprod`

2021-03-24 23:20:35 19e214e
feat(algebra/normed_space/basic,algebra/group_with_zero/power): real.(f)?pow_{even,bit0}_norm and field fpow lemmas (#6757)
Simplifcation of `norm` when to an even numeral power.
Additionally, add `fpow` lemmas to match `pow` lemmas, and change `fpow_nonneg_to_nonneg` to `fpow_nonneg` to match `pow` naming.

2021-03-24 23:20:34 039dfd2
refactor(data/finsupp): add decidable_eq (#6333)
... when the statement (not the proof) of the theorem depends on a
decidability assumption. This prevents instance mismatch issues in
downstream theorems.

2021-03-24 19:57:27 77c3bfe
chore(data/zmod/basic): make `fin.comm_ring.sub` defeq to `fin.sub` (#6848)
This is only possible now that `fin.sub` is not saturating, and we allow `sub` and `neg` to be defined separately.

2021-03-24 19:57:24 ab2c44c
feat(algebra/big_operators/ring): add finset.prod_[one_]sub_ordered (#6811)
Add 2 lemmas useful for partition of unity, `finset.prod_sub_ordered` and `finset.prod_one_sub_ordered`.
Also add an explicit `[decidable_eq]` assumption to `finset.induction_on_max` (without it some `rw`s failed).

2021-03-24 16:04:14 b4373e5
feat(tactic/lint): linter for @[class] def (#6061)
Also cleaning up some uses of `@[class] def` that were missed in #6028.

2021-03-24 13:49:38 a756333
chore(algebra/algebra/subalgebra): Add missing coe_sort for subalgebra (#6800)
Unlike all the other subobject types, `subalgebra` does not implement `has_coe_to_sort` directly, instead going via a coercion to one of `submodule` and `subsemiring`.
This removes the `has_coe (subalgebra R A) (subsemiring A)` and `has_coe (subalgebra R A) (submodule R A)` instances; we don't have these for any other subobjects, and they cause the elaborator more difficulty than the corresponding `to_subsemiring` and `to_submodule` projections.
This changes the definition of `le` to not involve coercions, which matches `submodule` but requires a few proofs to change.
This speeds up the `lift_of_splits` proof by adding `finite_dimensional.of_subalgebra_to_submodule`.

2021-03-24 09:40:12 144e9c4
chore(*): removing some completed TODOs (#6844)

2021-03-24 09:40:11 6773016
chore(category_theory/triangulated): cleanup (#6827)

2021-03-24 05:49:35 beb2cc9
feat(algebra/category): subobjects in the category of R-modules (#6842)

2021-03-24 05:49:34 935003e
chore(data/nat/basic): add @[simp] to some lemmas about numerals (#6652)
Allows the simplifier to make more progress in equalities of numerals (both in nat, and in `[(semi)ring R] [no_zero_divisors R] [char_zero R]`). Also adds `@[simp]` to `nat.succ_ne_zero` and `nat.succ_ne_self`.

2021-03-24 02:11:42 e0a7918
chore(scripts): update nolints.txt (#6843)
I am happy to remove some nolints for you!

2021-03-24 02:11:41 94a4a95
feat(logic/basic): `is_trans Prop iff` instance (#6836)
If you've ever wondered why `trans h1 h2` works for `≤` but not for `↔`, this is the reason.

2021-03-24 02:11:40 a008609
doc(topology/sheaves/presheaf_of_functions): fix some documentation t… (#6835)
makes variable names in the documentation match up with the names in the code

2021-03-24 02:11:39 36fc1ca
feat(algebraic_geometry/prime_spectrum): prime spectrum analogue of Hilberts Nullstellensatz (#6805)
Referring to a TODO comment in `algebraic_geometry/prime_spectrum.lean`, which I presume is outdated.

2021-03-24 02:11:38 12170e2
feat(topology/algebra/continuous_functions): separates points (#6783)

2021-03-23 23:08:24 fd5f433
fix(algebraic_topology): added FQNs to simplicial locale (#6838)
This fix, which fully qualifies some notation, makes it so that
```
import algebraic_topology.simplicial_set
open_locale simplicial
```
works without errors.

2021-03-23 23:08:23 ee5e9fb
feat(data/indicator_function): eq_self_of_superset (#6829)

2021-03-23 23:08:21 aadd853
feat(algebra/category): add more variants of Module.as_hom (#6822)

2021-03-23 23:08:19 b6e4d0b
feat(combinatorics/quiver): every connected graph has a spanning tree (#6806)
Prove a directed version of the fact that a connected graph has a
spanning tree. The subtree we use is what you would get from 'running a
DFS from the root'. This proof avoids any use of Zorn's lemma. Currently
we have no notion of undirected tree, but once that is in place, this
proof should also give undirected spanning trees.

2021-03-23 19:49:37 315faac
feat(data/multiset/basic): generalize rel.mono, rel_map (#6771)

2021-03-23 19:49:36 9cda1ff
fix(data/complex/module): kill a non-defeq diamond  (#6760)
`restrict_scalars.semimodule ℝ ℂ ℂ  = complex.semimodule` is currently not definitionally true. The PR tweaks the smul definition to make sure that this becomes true. This solves a diamond that appears naturally in https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/.60inner_product_space.20.E2.84.9D.20%28euclidean_space.20.F0.9D.95.9C.20n%29.60.3F/near/230780186

2021-03-23 19:49:35 9893a26
chore(field_theory/splitting_field): module doc and generalise one lemma (#6739)
This PR provides a module doc for `field_theory.splitting_field`, which is the last file without module doc in `field_theory`. Furthermore, I took the opportunity of renaming the fields in that file from `\alpha`, `\beta`, `\gamma` to `K`, `L`, `F` to make it more readable for newcomers.
Moved `nat_degree_multiset_prod`, to `algebra.polynomial.big_operators`). In order to get the `no_zero_divisors` instance on `polynomial R`, I had to include `data.polynomial.ring_division` in that file. Furthermore, with the help of Damiano, generalised this lemma to `no_zero_divisors R`.
Coauthored by: Damiano Testa adomani@gmail.com

2021-03-23 19:49:34 c521336
feat(data/polynomial/bernstein): identities (#6470)

2021-03-23 19:49:32 edfe7e1
feat(combinatorics/simple_graph): degree lemmas (#5966)
Proves some lemmas about the minimum/maximum degree of vertices in a graph - also weakens the assumptions for the definitions, following the usual mathlib pattern of defining total functions.

2021-03-23 15:29:30 61ed14e
lint(*): split long lines (#6833)

2021-03-23 15:29:29 7803435
refactor(topology/metric_space/lipschitz): generalize to pseudo_emetric_space (#6831)
This is part of a series of PR to introduce `semi_normed_group` in mathlib.
We introduce here Lipschitz maps for `pseudo_emetric_space` (I also improve some theorem name in `topology/metric_space/emetric_space`).

2021-03-23 15:29:28 489f522
feat(category_theory/subobject): API for working with inequalities (#6818)
This PR adds two types of declarations:
* Helper functions for showing that two subobjects are equal by giving a compatible isomorphism, and
* functions `of_le`/`of_le_mk`/`of_mk_le`/`of_mk_le_mk` that produce a morphism between the underlying objects from a proof of `X ≤ Y`. These are in essence just thin wrappers around `underlying.map`.

2021-03-23 15:29:25 736b1e8
feat(data/fintype/basic): add decidable_mem_range_fintype (#6817)

2021-03-23 15:29:24 c2e9ec0
feat(group_theory/subgroup): add {monoid,add_monoid,ring}_hom.lift_of_right_inverse (#6814)
This provides a computable alternative to `lift_of_surjective`.

2021-03-23 15:29:23 5cafdff
chore(algebra/group/basic): dedup, add a lemma (#6810)
* drop `sub_eq_zero_iff_eq`, was a duplicate of `sub_eq_zero`;
* add a `simp` lemma `sub_eq_self : a - b = a ↔ b = 0`.

2021-03-23 06:50:41 94f59d8
feat(ring_theory/polynomial/homogenous): add a `direct_sum.gcomm_monoid` instance (#6825)
This also corrects a stupid typo I made in `direct_sum.comm_ring` which was previously declared a `ring`!

2021-03-22 23:38:18 9f56a0b
refactor(tactic/ring): split off `ring_nf` tactic (#6792)
[As requested on Zulip.](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/ring.20not.20idempotent/near/231178246) This splits the current behavior of `ring` into two tactics:
* `ring1`: closing tactic which solves equations in the goal only
* `ring_nf mode? (at h)?`: simplification tactic which puts ring expressions into normal form
The `ring` tactic will still call `ring1` with `ring_nf` as fallback, as it does currently, but in the latter case it will print a message telling the user to use `ring_nf` instead. The form `ring at h` is removed, because this never uses `ring1` so you should just call `ring_nf` directly.

2021-03-22 19:59:29 a0a2177
feat(data/support): add `function.mul_support` (#6791)
This will help us add `finprod` in #6355

2021-03-22 16:18:52 ffca31a
feat(linear_algebra): composing with a linear equivalence does not change the image (#6816)
I also did some minor reorganisation in order to relax some typeclass arguments.

2021-03-22 16:18:51 e54f633
feat(data/finsupp/basic): add `can_lift (α → M₀) (α →₀ M₀)` (#6777)
Also add a few missing `simp`/`norm_cast` lemmas.

2021-03-22 16:18:49 480b00c
feat(algebra/group/type_tags): adding function coercion for `additive` and `multiplicative` (#6657)
[As on zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/to_additive.20mismatch/near/230042978)

2021-03-22 10:12:29 0b543c3
feat(linear_algebra/dual): add dual_annihilator_sup_eq_inf_dual_annihilator (#6808)

2021-03-22 10:12:28 f3a4c48
feat(algebra/subalgebra): missing norm_cast lemmas about operations (#6790)

2021-03-22 07:20:26 e7d74ba
feat(algebra/smul_regular): add `M`-regular elements (#6659)
This PR extends PR #6590, that is now merged.  The current PR contains the actual API to work with `M`-regular elements `r : R`, called `is_smul_regular M r`.
Zulip:
https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews
From the doc-string:
### Action of regular elements on a module
We introduce `M`-regular elements, in the context of an `R`-module `M`.  The corresponding
predicate is called `is_smul_regular`.
There are very limited typeclass assumptions on `R` and `M`, but the "mathematical" case of interest
is a commutative ring `R` acting an a module `M`. Since the properties are "multiplicative", there
is no actual requirement of having an addition, but there is a zero in both `R` and `M`.
Smultiplications involving `0` are, of course, all trivial.
The defining property is that an element `a ∈ R` is `M`-regular if the smultiplication map
`M → M`, defined by `m ↦ a • m`, is injective.
This property is the direct generalization to modules of the property `is_left_regular` defined in
`algebra/regular`.  Lemma `is_smul_regular.is_left_regular_iff` shows that indeed the two notions
coincide.

2021-03-22 01:19:20 5be0b0c
feat(data/finset/basic): add strong_induction and strong_induction_eq (#6682)
An alternative to `finset.strong_induction_on` that has an associated equation lemma.

2021-03-21 20:45:07 3f74b10
chore(order/filter/bases): a few more constructors (#6798)

2021-03-21 15:58:36 852064a
refactor(category_theory/subobject): split into smaller files (#6796)
No change in content, just splitting into four files.

2021-03-21 11:05:45 5d67033
feat(topology/algebra/continuous_functions): missing lemmas (#6782)

2021-03-21 03:36:01 a22df99
chore(scripts): update nolints.txt (#6793)
I am happy to remove some nolints for you!

2021-03-21 03:36:00 f331648
feat(analysis/normed_space): normed_algebra.to_topological_algebra (#6779)

2021-03-21 03:35:59 abfddbf
feat(ring_theory): define `left_mul_matrix` and `algebra.trace` (#6653)
This PR defines the algebra trace, and the bilinear trace form, for an algebra `S` over a ring `R`, for example a field extension `L / K`.
Follow-up PRs will prove that `algebra.trace K L x` is the sum of the conjugate roots of `x` in `L`, that `trace_form` is nondegenerate and that `trace K L x` is integral over `K`. Then we'll use this to find an integral basis for field extensions, and then we can prove that the integral closure of a Dedekind domain is again a Dedekind domain.

2021-03-21 03:35:58 b75ec5c
feat(data/polynomial): Bernstein polynomials (#6465)
The definition of the Bernstein polynomials
`bernstein_polynomial (R : Type*) [ring R] (n ν : ℕ) : polynomial R := (choose n ν) * X^ν * (1 - X)^(n - ν)`
and the fact that for `ν : fin (n+1)` these are linearly independent over `ℚ`.
(Future work: use these to prove Weierstrass' theorem that polynomials are dense in `C([0,1], ℝ)`.

2021-03-21 03:35:57 4cc4207
feat(algebra/module/linear_map): Add linear_map.iterate (#6377)

2021-03-20 23:19:57 e20c730
feat(topology/continuous_map): formulas for sup and inf in terms of abs (#6720)

2021-03-20 21:36:26 3153153
feat(measure_theory/interval_integral): add `integral_comp_mul_left` (#6787)
I need this lemma for my work toward making integrals computable by `norm_num`.

2021-03-20 19:58:20 240836a
feat(analysis/normed_space/basic): generalize submodule.normed_space (#6766)
This means that a ℂ-submodule of an ℝ-normed space is still an ℝ-normed space.
There's too much randomness in the profiling for me to tell if this speeds up or slows down `exists_extension_norm_eq`; but it does at least save a line there.

2021-03-20 17:42:10 d650674
feat(category_theory/subterminal): subterminal category equiv subobjects of terminal (#6755)

2021-03-20 16:28:06 86b8f39
doc(docs/overview): Update overview (#6772)
Update the overview to mention Abel-Ruffini.

2021-03-20 16:28:05 5d7efa0
feat(combinatorics/quiver): define quivers (#6680)
Define quivers (a very permissive notion of graph), subquivers, paths
and arborescences, which are like rooted trees.
This PR comes from https://github.com/dwarn/nielsen-schreier-2 .

2021-03-20 15:04:09 df4c9c9
chore(ring_theory/adjoin/basic): golf some proofs about algebra.adjoin (#6784)

2021-03-20 13:24:55 9f77db2
chore(topology/metric_space): add '@[continuity]' attributes (#6780)

2021-03-20 10:08:03 695d7f4
refactor(algebraic_topology/simplex_category): Make simplex_category universe polymorphic. (#6761)
This PR changes the definition of `simplex_category` so that it becomes universe polymorphic.
This is useful when we want to take (co)limits of simplicial objects indexed by categories constructed out of `simplex_category`.
This PR also makes a small wrapper around morphisms in `simplex_category` for hygiene purposes, and introduces a notation `X _[n]` for the n-th term of a simplicial object X.
Note: this PR makes `simplex_category` and `simplex_category.hom` irreducible.

2021-03-20 10:08:02 4db82a4
refactor(category_theory/cones): golf and cleanup cones (#6756)
No mathematical content here, basically just golfing and tidying in preparation for future PRs.

2021-03-20 10:08:00 56e5aa7
feat(category_theory/closed): currying rfl lemmas (#6754)
Add `rfl` lemmas for currying

2021-03-20 09:08:36 b0150a5
fix(analysis/special_functions/integrals): move lemmas out of namespace (#6778)
Some lemmas should not have been moved into a namespace, so I fix that here.

2021-03-20 03:08:13 26fcfbc
feat(topology): continuous_pi_iff pi.has_continuous_mul pi.topological_group (#6689)

2021-03-20 01:57:36 07282da
chore(scripts): update nolints.txt (#6776)
I am happy to remove some nolints for you!

2021-03-19 22:17:14 b4a2991
feat(dynamics/ergodic): define measure preserving maps (#6764)
Also prove some missing lemmas about measures.

2021-03-19 22:17:13 eba4829
feat(data/real/pi): Wallis product for pi (#6568)

2021-03-19 19:07:52 c65146d
chore(data/finset/basic): erase_inj_on (#6769)
Quick follow-up to #6737

2021-03-19 19:07:51 2d2929f
feat(measure_theory): define Hausdorff measure and Hausdorff dimension (#6710)

2021-03-19 17:15:52 152412f
feat(analysis/special_functions/exp_log): log_nonzero_of_ne_one and log_inj_pos (#6734)
log_nonzero_of_ne_one and log_inj_pos
Proves : 
 * When `x > 0`, `log(x)` is `0` iff `x = 1`
 * The real logarithm is injective (when restraining the domain to the positive reals)

2021-03-19 17:15:51 6f3e0ad
feat(ring_theory/multiplicity): Multiplicity with units (#6729)
Renames `multiplicity.multiplicity_unit` into `multiplicity.is_unit_left`.
Adds : 
 * `multiplicity.is_unit_right`
 * `multiplicity.unit_left`
 * `multiplicity.unit_right`

2021-03-19 14:35:20 591c34b
refactor(linear_algebra/basic): move the lattice structure to its own file (#6767)
The entire lattice structure is thoroughly uninteresting.
By moving it to its own shorter file, it should be easier to unify with the lattice of `submonoid`
I'd hope in future we can generate this automatically for any `subobject A` with an injection into `set A`.

2021-03-19 12:51:59 ce107da
feat(analysis/special_functions/integrals): integrating linear combinations of functions (#6597)
Together with #6357, this PR makes it possible to compute integrals of the form `∫ x in a..b, c * f x + d * g x` by `simp` (where `c` and `d` are constants and `f` and `g` are functions that are `interval_integrable` on `interval a b`.
Notably, this allows us to compute the integrals of polynomials by `norm_num`. Here's an example, followed by an example of a more random linear combination of `interval_integrable` functions:
```
import analysis.special_functions.integrals
open interval_integral real
open_locale real
example : ∫ x:ℝ in 0..2, 6*x^5 + 3*x^4 + x^3 - 2*x^2 + x - 7 = 1048 / 15 := by norm_num
example : ∫ x:ℝ in 0..1, exp x + 9 * x^8 + x^3 - x/2 + (1 + x^2)⁻¹ = exp 1 + π/4 := by norm_num
```

2021-03-19 09:01:18 590f43d
docs(category_theory): missing module docs (#6752)
Module docs for a number of files under `category_theory/`.
This is largely a "low hanging fruit" selection; none of the files are particularly complicated.

2021-03-19 09:01:17 c170128
feat(number_theory/bernoulli): faulhaber' (#6684)
This deduces an alternative form `faulhaber'` of Faulhaber's theorem from `faulhaber`. In this version, we 
1. sum over `1` to `n` instead of `0` to `n - 1` and
2. use `bernoulli'` instead of `bernoulli`.
Arguably, this is the more common form one finds Faulhaber's theorem in the literature.

2021-03-19 09:01:16 86e1b17
feat(field_theory/abel_ruffini): solvable by radicals implies solvable Galois group (#6631)
Proves the theoretical part of insolvability of the quintic. We still need to exhibit a specific polynomial with non-solvable Galois group

2021-03-19 06:00:11 62d532a
feat(data/finset): erase is partially injective (#6737)
Show that erase is partially injective, ie that if `s.erase x = s.erase y` and `x` is in `s`, then `x = y`.

2021-03-19 03:43:24 a1305be
chore(scripts): update nolints.txt (#6763)
I am happy to remove some nolints for you!

2021-03-18 23:42:19 cc11e44
ci(*): lint 'Authors: ' line (#6750)

2021-03-18 23:42:17 c3e40be
feat(data/equiv/local_equiv): define `piecewise` and `disjoint_union` (#6700)
Also change some lemmas to use `set.ite`.

2021-03-18 19:27:39 02f77ab
doc(field_theory/normal): Add authors (#6759)
Adds Patrick Lutz and I as authors to normal.lean. The last three-quarters of the file are from our work on Abel-Ruffini.
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Author.20on.20normal.2Elean.3F

2021-03-18 19:27:37 aea7dfb
chore(algebra/char_p/basic): weaken assumptions integral_domain --> semiring+ (#6753)
Taking advantage of the `no_zero_divisors` typeclass, the assumptions on some of the results can be weakened.

2021-03-18 19:27:36 a10bc3d
feat(normed_space/inner_product): euclidean_space.norm_eq (#6744)

2021-03-18 19:27:35 e1ff2df
chore(*): update `injective` lemma names to match the naming guide (#6740)
In `src/algebra/group_ring_action.lean`:
- `injective_to_semiring_hom` -> `to_semiring_hom_injective`
In `src/algebra/module/linear_map.lean`:
- `linear_equiv.injective_to_equiv` -> `linear_equiv.to_equiv_injective`
- `linear_equiv.injective_to_linear_map` -> `linear_equiv.to_linear_map_injective`
In `src/analysis/normed_space/enorm.lean`:
- `enorm.injective_coe_fn` -> `enorm.coe_fn_injective`
In `src/data/equiv/basic.lean`:
- `equiv.injective_coe_fn` -> `equiv.coe_fn_injective`
In `src/data/real/nnreal.lean`:
- `nnreal.injective_coe` -> `nnreal.coe_injective`
In `src/data/sum.lean`:
- `sum.injective_inl` -> `sum.inl_injective`
- `sum.injective_inr` -> `sum.inr_injective`
In `src/linear_algebra/affine_space/affine_equiv.lean`:
- `affine_equiv.injective_to_affine_map` -> `affine_equiv.to_affine_map_injective`
- `affine_equiv.injective_coe_fn` -> `affine_equiv.coe_fn_injective`
- `affine_equiv.injective_to_equiv` -> `affine_equiv.to_equiv_injective`
In `src/linear_algebra/affine_space/affine_map.lean`:
- `affine_map.injective_coe_fn` -> `affine_map.coe_fn_injective`
In `src/measure_theory/outer_measure.lean`:
- `measure_theory.outer_measure.injective_coe_fn` -> `measure_theory.outer_measure.coe_fn_injective`
In `src/order/rel_iso.lean`:
- `rel_iso.injective_to_equiv` -> `rel_iso.to_equiv_injective`
- `rel_iso.injective_coe_fn` -> `rel_iso.coe_fn_injective`
In `src/topology/algebra/module.lean`:
- `continuous_linear_map.injective_coe_fn` -> `continuous_linear_map.coe_fn_injective`

2021-03-18 19:27:33 83b0981
feat(ring_theory/polynomial): the symmetric and homogenous polynomials form a subalgebra and submodules, respectively (#6666)
This adds:
* the new definitions:
  * `mv_polynomial.homogeneous_submodule σ R n`, defined as the `{ x | x.is_homogeneous n }`
  * `mv_polynomial.symmetric_subalgebra σ R`, defined as the `{ x | x.is_symmetric }`
* simp lemmas to reduce membership of the above to the `.is_*` form
* `mv_polynomial.homogenous_submodule_mul` a statement about the product of homogenous submodules
* `mv_polynomial.homogenous_submodule_eq_finsupp_supported` a statement that we already have a different definition of homogenous submodules elsewhere
All the other proofs have just been moved around the files.

2021-03-18 13:48:35 744d59a
refactor(category_theory/limits): split file (#6751)
This splits `category_theory.limits.limits` into
`category_theory.limits.is_limit` and `category_theory.limits.has_limits`.
It doesn't meaningfully reduce imports, as everything imports `has_limits`, but in principle it could, and hopefully it makes the content slightly easier to understand when separated.
In any case, the file was certainly too large.

2021-03-18 13:48:34 58581d0
chore(*): normalize Authors: line (#6749)

2021-03-18 13:48:33 542ff6a
refactor(algebra/algebra/basic): change submodule.restrict_scalars to use is_scalar_tower (#6745)

2021-03-18 13:48:32 59cda3b
feat(algebra/associated): Primes that divide each other are associated (#6732)
Primes that divide each other are associated

2021-03-18 13:48:31 db2a972
feat(ring_theory/principal_ideal_domain): The generator of a principal prime ideal is a prime (#6731)
The generator of a principal prime ideal is a prime

2021-03-18 13:48:30 b4afd64
feat(data/padics/padic_norm): p-adic norm of primes other than p (#6730)
The p-adic norm of `q` is `1` if `q` is another prime than `p`.

2021-03-18 09:41:26 216aecd
feat(group_theory/quaternion_group): define the (generalised) quaternion groups (#6683)
This PR introduces the generalised quaternion groups and determines the orders of its elements.

2021-03-18 06:07:05 8116851
doc(category_theory): convert comments about universes to library note (#6748)

2021-03-18 04:45:13 e955a6b
chore(scripts): update nolints.txt (#6747)
I am happy to remove some nolints for you!

2021-03-18 03:01:54 9b8d41a
feat(ring_theory/finiteness): add transitivity of finite presentation (#6640)
This adds transitivity of finite presentation (for rings). I think we now have a basic API for finitely presented algebras.

2021-03-17 23:52:47 804b0ed
chore(data/mv_polynomial/basic): add coeff_smul to match coeff_add etc (#6742)

2021-03-17 22:49:08 30b3455
feat(ring_theory/roots_of_unity): Restrict ring homomorphism to roots of unity (#6646)
Restrict a ring homomorphism to roots of unity.

2021-03-17 19:18:34 9507a34
chore(category_theory/limits/creates): fix typo in docstring (#6738)

2021-03-17 19:18:33 6e1143a
chore(combinatorics/simple_graph): remove bad simp attribute (#6736)
As in https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/symmetry.20fails.20if.20simple.20graph.20is.20imported.

2021-03-17 19:18:32 ce8a6ca
refactor(data/multiset/basic): consistently use 'nsmul' in names (#6735)

2021-03-17 19:18:31 7e82bba
feat(algebra/module/submodule): add `smul_of_tower_mem` (#6712)
This adds the lemmas:
* `sub_mul_action.smul_of_tower_mem`
* `submodule.smul_of_tower_mem`
And uses them to construct the new scalar actions:
* `sub_mul_action.mul_action'`
* `sub_mul_action.is_scalar_tower`
* `submodule.semimodule'`
* `submodule.is_scalar_tower`
With associated lemmas
* `sub_mul_action.coe_smul_of_tower`
* `submodule.coe_smul_of_tower`
The unprimed instance continue to hold their old values, and exist to speed up typeclass search; the same pattern we use for `tensor_product.semimodule` vs `tensor_product.semimodule`.

2021-03-17 19:18:29 4ae81c2
feat(bounded_continuous_function): transport structure to C(α, β) when α compact (#6701)

2021-03-17 19:18:25 0b0fd52
chore(analysis/normed_space/extend): provide a version without restrict_scalars (#6693)
This is some pre-work to try and speed up the proof in `hahn_banach`, which as I understand it is super slow because it has to work very hard to unify typeclass which keep switching back and forth between `F` and `restrict_scalars ℝ 𝕜 F`. 
This PR is unlikely to have changed the speed of that proof, but I suspect these definitions might help in a future PR - and it pushes `restrict_scalars` out of the interesting bit of the proof.

2021-03-17 19:18:22 6db70c9
refactor(linear_algebra/determinant): refactor proof of upper_two_block_triangular_det (#6690)
Refactored the proof of upper_two_block_triangular_det (to use sum_congr_hom.range) following a suggestion from Eric Wieser (during PR review of #6050).

2021-03-17 19:18:19 4119181
feat(measure_theory/l2_space): L2 is an inner product space (#6596)
If `E` is an inner product space, then so is `Lp E 2 µ`, with inner product being the integral of the inner products between function values.

2021-03-17 19:18:17 fb28eac
feat(number_theory/bernoulli): Faulhaber's theorem (#6409)
Co-authored-by Fabian Kruse

2021-03-17 16:20:31 83a4b8b
chore(group_theory/subgroup): fix typo in docstring (#6722)

2021-03-17 16:20:30 73922b5
feat(data/zsqrtd/basic): add some lemmas about conj, norm (#6715)

2021-03-17 12:41:30 1f50530
feat(data/set/intervals/image_preimage, algebra/ordered_monoid): new typeclass for interval bijection lemmas (#6629)
This commit introduces a ``has_exists_add_of_le`` typeclass extending ``ordered_add_comm_monoid``; is the assumption needed so that additively translating an interval gives a bijection. We then prove this fact for all flavours of interval. 
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Correct.20setting.20for.20positive.20shifts.20of.20intervals

2021-03-17 10:17:23 1345319
feat(ring_theory/algebraic data/real/irrational): add a proof that a transcendental real number is irrational (#6721)
Zulip:
https://leanprover.zulipchat.com/#narrow/stream/263328-triage

2021-03-17 10:17:22 4b1d588
chore(linear_algebra/determinant): redefine det using multilinear_map.alternatization (#6708)
This slightly changes the definitional unfolding of `matrix.det` (moving a function application outside a sum and adjusting the version of int-multiplication used).
By doing this, a large number of proofs become a trivial application of a more general statement about alternating maps.
`det_row_multilinear` already existed prior to this commit, but now `det` is defined in terms of it instead of the other way around.
We still need both, as otherwise we would break `M.det` dot notation, as `det_row_multilinear` does not have its argument expressed as a matrix.

2021-03-17 10:17:21 84933f1
feat(ring_theory/polynomial): Pochhammer polynomials (#6598)
# The Pochhammer polynomials
We define and prove some basic relations about
`pochhammer S n : polynomial S = X * (X+1) * ... * (X + n - 1)`
which is also known as the rising factorial.

2021-03-17 08:30:54 861f594
feat(field_theory/normal): Tower of solvable extensions is solvable (#6643)
This is the key lemma that makes Abel-Ruffini work.

2021-03-17 08:30:53 6f6b548
refactor(group_theory/order_of_element): now makes sense for infinite monoids (#6587)
This PR generalises `order_of` from finite groups to (potentially infinite) monoids. By convention, the value of `order_of` for an element of infinite order is `0`. This is non-standard for the order of an element, but agrees with the convention that the characteristic of a field is `0` if `1` has infinite additive order. It also enables to remove the assumption `0<n` for some lemmas about orders of elements of the dihedral group, which by convention is also the infinite dihedral group for `n=0`.
The whole file has been restructured to take into account that `order_of` now makes sense for monoids. There is still an open issue about adding [to_additive], but this should be done in a seperate PR. Also, some results could be generalised with assumption `0 < order_of a` instead of finiteness of the whole group.

2021-03-17 05:36:54 3e7a56e
feat(tactic/norm_num): support for nat.cast + int constructors (#6235)
This adds support for the functions `nat.cast`, `int.cast`, `rat.cast`
as well as `int.to_nat`, `int.nat_abs` and the constructors of int
 `int.of_nat` and `int.neg_succ_of_nat`, at least in their simp-normal
 forms.

2021-03-17 03:47:21 d292fd7
refactor(topology/metric_space/basic): add pseudo_metric (#6716)
This is the natural continuation of #6694: we introduce here `pseudo_metric_space`.
Note that I didn't do anything fancy, I only generalize the results that work out of the box for pseudometric spaces (quite a lot indeed).
It's possible that there is some duplicate code, especially in the section about products.

2021-03-17 02:56:43 3936f5f
chore(scripts): update nolints.txt (#6719)
I am happy to remove some nolints for you!

2021-03-17 01:14:27 b9ccb8f
feat(algebraic_topology/simplicial_objects + ...): Truncated simplicial objects + skeleton (#6711)
This PR adds truncated simplicial objects and the skeleton functor (aka the truncation functor).

2021-03-17 01:14:26 87c12ab
feat(topology/continuous_map): lattice structures (#6706)

2021-03-16 21:43:26 40a0ac7
chore(linear_algebra/finite_dimensional): change instance (#6713)
With the new instance `finite_dimensional K K` Lean can deduce the old instance automatically. I don not completely understand why it needs the new instance (`apply_instance` proves it), probably this is related to the order of unfolding `finite_dimensional` and applying `is_noetherian` instances.

2021-03-16 21:43:25 177020e
feat(topology/separation): `(closure s).subsingleton ↔ s.subsingleton` (#6707)
Also migrate `set.subsingleton_of_image` to `set.subsingleton`.

2021-03-16 21:43:23 890066a
feat(measure_theory/measure_space): define `quasi_measure_preserving` (#6699)
* add `measurable.iterate`
* move section about `measure_space` up to make `volume_tac` available
  much earlier;
* add `map_of_not_measurable`;
* drop assumption `measurable f` in `map_mono`;
* add `tendsto_ae_map`;
* more API about `absolutely_continuous`;
* define `quasi_measure_preserving` and prove some properties.

2021-03-16 21:43:22 f5f42bc
chore(*): update to Lean 3.28.0c (#6691)

2021-03-16 21:43:21 a116025
feat(geometry/manifold/mfderiv): more lemmas (#6679)
* move section `mfderiv_fderiv` up, add aliases;
* rename old `unique_mdiff_on.unique_diff_on` to `unique_mdiff_on.unique_diff_on_target_inter`;
* add a section about `continuous_linear_map`;
* more lemmas about `model_with_corners`;
* add lemmas about `ext_chart_at`.

2021-03-16 21:43:20 214b8e8
feat(topology/algebra): more on closure (#6675)

2021-03-16 19:18:11 8d8c356
chore(ring_theory/noetherian): add `fg_span` and `fg_span_singleton` (#6709)

2021-03-16 19:18:09 f221bfd
feat(data/polynomial/degree/definitions): leading_coeff_X_pow_sub_C (#6633)
Lemma for the leading coefficient of `X ^ n - C r`.

2021-03-16 19:18:08 81dabda
feat(data/buffer/parser/*): expand parser properties (#6339)
Add several new properties to parsers:
`static`
`err_static`
`step`
`prog`
`bounded`
`unfailing`
`conditionally_unfailing`.
Most of these properties hold cleanly for existing core parsers, and are provided as classes. This allows nice derivation for any parsers that are made using parser combinators.
This PR is towards proving that the `nat` parser provides the maximal possible natural.
Other API lemmas are introduced for `string`, `buffer`, `char`, and `array`.

2021-03-16 16:06:27 03a6c95
chore(ring_theory/ideal): use `ideal.mul_mem_left` instead of `ideal.smul_mem` (#6704)
Lots of proofs are relying on the fact that mul and smul are defeq, but this makes them hard to follow, as the goal state never contains the smul referenced by these lemmas.

2021-03-16 16:06:26 d9fbe9d
chore(geometry/manifold/times_cont_mdiff_map): add `times_cont_mdiff_map.mdifferentiable` (#6703)

2021-03-16 16:06:25 ffacd12
feat(algebra/iterate_hom): add `equiv.perm.coe_pow` (#6698)
Also rewrite `equiv.perm.perm_group` in a more explicit manner.

2021-03-16 16:06:23 900963c
refactor(topology/metric_space/emetric_space): add pseudo_emetric (#6694)
Working on the Liquid Tensor Experiment, we realize we need seminorms ~~pseudonorms~~ (meaning we don't require `∥x∥ = 0 → x = 0`). For this reason I would like to include seminorms, pseudometric and pseudoemetric to mathlib. (We currently have `premetric_space`, my plan is to change the name to `pseudometric_space`, that seems to be the standard terminology.)
I started modifying `emetric_space` since it seems the more fundamental (looking at the structure of the imports). What I did here is to define a new class `pseudo_emetric_space`, generalize almost all the results about `emetric_space` to this case (I mean, all the results that are actually true) and at the end of the file I defined `emetric_space` and prove the remaining results. It is the first time I did a refactor like this, so I probably did something wrong, but at least it compiles on my computer.
I don't know why one proof in `measure_theory/ae_eq_fun_metric.lean` stopped working, the same proof in tactic mode works.

2021-03-16 10:12:38 22eba86
feat(*): add some missing `coe_*` lemmas (#6697)
* add `submonoid.coe_pow`, `submonoid.coe_list_prod`,
  `submonoid.coe_multiset_prod`, `submonoid.coe_finset_prod`,
  `subring.coe_pow`, `subring.coe_nat_cast`, `subring.coe_int_cast`;
* add `rat.num_div_denom`;
* add `inv_of_pow`.

2021-03-16 10:12:37 57de126
refactor(category_theory/limits): use auto_param (#6696)
Add an `auto_param`, making it slightly more convenient when build limits of particular shapes first, then all limits.

2021-03-16 10:12:36 c0036af
feat(category/is_iso): make is_iso a Prop (#6662)
Perhaps long overdue, this makes `is_iso` into a Prop.
It hasn't been a big deal, as it was always a subsingleton. Nevertheless this is probably safer than carrying data around in the typeclass inference system. 
As a side effect `simple` is now a Prop as well.

2021-03-16 06:30:41 6669a28
feat(algebraic_topology/simplicial_object + ...): Add has_limits + has_colimits instances (#6695)
This PR adds `has_limits` and `has_colimits` instances for the category of simplicial objects (assuming the existence of such an instance for the base category). The category of simplicial sets now has both limits and colimits, and we include a small example of a simplicial set (the circle) constructed as a colimit.
This PR also includes the following two components, which were required for the above:
1. A basic API for working with `ulift C` where `C` is a category. This was required to avoid some annoying universe issues in the definitions of `has_colimits` and `has_limits`.
2. A small shim that transports a `has_(co)limit` instance along an equivalence of categories.

2021-03-16 06:30:40 6d7d169
feat(topology): More lemmas from LTE, refactor `is_totally_disconnected` to use `set.subsingleton` (#6673)
From the liquid tensor experiment

2021-03-16 04:37:30 0176b42
feat(ring_theory/finiteness): add `mv_polynomial_of_finite_presentation` (#6512)
Add `mv_polynomial_of_finite_presentation`: the polynomial ring over a finitely presented algebra is finitely presented.

2021-03-16 03:41:52 afe38ca
chore(scripts): update nolints.txt (#6702)
I am happy to remove some nolints for you!

2021-03-15 22:29:25 f1b69a1
feat(linear_algebra/quadratic_form): add nondegenerate_of_anisotropic (#6692)

2021-03-15 22:29:23 ddb4617
refactor(topology/metric_space/isometry): move Kuratowski embedding to another file (#6678)
This reduces the import dependencies of `topology.metric_space.isometry`.

2021-03-15 22:29:22 cc48a5a
feat(geometry/manifold/diffeomorph): expand API (#6668)

2021-03-15 22:29:21 bd386a8
feat(measure_theory/outer_measure): golf, add lemmas (#6664)
* `Union_of_tendsto_zero`, `Union_nat_of_monotone_of_tsum_ne_top`, `of_function_union_of_separated`:
  supporting lemmas for the upcoming definition of the Hausdorff
  measure (and more generally metric outer measures).
* `ext_nonempty`, `smul_supr`, `map_sup`, `map_supr`, `comap_supr`,
  `restrict_univ`, `restrict_empty`, `restrict_supr`, `map_comap`,
  `map_comap_le`, `map_comap_of_surjective`, `restrict_le_self`,
  `map_le_restrict_range`, `le_comap_map`, `comap_map`, `comap_top`,
  `top_apply'`, `map_top`, `map_top_of_surjective`: new API lemmas
  about `map`/`comap`/`restrict` and `sup`/`supr`/`top`;
* `is_greatest_of_function`, `of_function_eq_Sup`,
`comap_of_function`, `map_of_function_le`, `map_of_function`,
restrict_of_function`, `smul_of_function`: new lemmas about
`of_function`;
* `Inf_apply'`: a version of `Inf_apply` that assumes that another set
is nonempty;
* `infi_apply`, `infi_apply'`, `binfi_apply`, `binfi_apply'`,
`map_infi_le`, `comap_infi`, `map_infi`, `map_infi_comap`,
`map_binfi_comap`, `restrict_infi_restrict`, `restrict_infi`,
`restrict_binfi`: new lemmas about `map`/`comap`/`restrict` and
`Inf`/`infi`;
* `extend_congr`: `infi_congr_Prop` specialized for `extend`; why this
is not a `congr` lemma?
* `le_induced_outer_measure`: `le_of_function` for
`induced_outer_measure`;
* `trim_le_trim` → `trim_mono`: rename, use `monotone`;
* `exists_measurable_superset_forall_eq_trim`: a version of
`exists_measurable_superset_eq_trim` that works for countable families
of measures;
* `trim_binop`, `trim_op`: new helper lemmas to golf `trim_add` etc;
* `trim_sup`, `trim_supr`: new lemmas about `trim`.
* `map_mono`, `comap_mono`, `mono''`, `restrict_mono`, `trim_mono`:
`@[mono]` lemmas.

2021-03-15 18:15:30 c358676
feat(meta/expr): monadic analogue of expr.replace (#6661)

2021-03-15 18:15:29 3ec8c1d
feat(algebra/direct_sum_graded): a direct_sum formed of powers of a submodule of an algebra inherits a ring structure (#6550)
This also fixes some incorrect universe parameters to the `of_submodules` constructors.

2021-03-15 17:06:11 d9dc30e
feat(algebra/free): turn `free_magma.lift` into an equivalence (#6672)
This will be convenient for some work I have in mind and is more consistent with the pattern used elsewhere, such as:
- [`free_algebra.lift`](https://leanprover-community.github.io/mathlib_docs/algebra/free_algebra.html#free_algebra.lift)
- [`monoid_algebra.lift`](https://leanprover-community.github.io/mathlib_docs/algebra/monoid_algebra.html#monoid_algebra.lift)
- [`universal_enveloping.lift`](https://leanprover-community.github.io/mathlib_docs/algebra/lie/universal_enveloping.html#universal_enveloping_algebra.lift)
- ...

2021-03-15 15:39:13 ae77628
chore(geometry/manifold/times_cont_mdiff): add `prod_mk_space` versions of `prod_mk` lemmas (#6681)
These lemmas are useful when dealing with maps `f : M → E' × F'` where
`E'` and `F'` are normed spaces. This means some code duplication with
`prod_mk` lemmas but I see no way to avoid this without making proofs
about `M → E' × F'` longer/harder.

2021-03-15 12:40:53 e16ae24
doc(readme): add Eric Wieser to maintainer list (#6688)

2021-03-15 12:40:52 b5f3832
feat(topology/metric_space): introduce `is_metric_separated` (#6685)

2021-03-15 12:40:51 90db6fc
feat(analysis/calculus/times_cont_diff): smoothness of `f : E → Π i, F i` (#6674)
Also add helper lemmas/definitions about multilinear maps.

2021-03-15 09:03:13 1f47833
feat(algebra/*, * : [regular, smul_with_zero, module/basic]): introduce `mul_action_with_zero` and `M`-regular elements (#6590)
This PR has been split and there are now two separate PRs.
* #6590, this one, introducing `smul_with_zero` and `mul_action_with_zero`: two typeclasses to deal with multiplicative actions of `monoid_with_zero`, without the need to assume the presence of an addition!
* #6659, introducing `M`-regular elements, called `smul_regular`: the analogue of `is_left_regular`, but defined for an action of `monoid_with_zero` on a module `M`.
This PR is a preparation for introducing `M`-regular elements.
From the doc-string:
### Introduce `smul_with_zero`
In analogy with the usual monoid action on a Type `M`, we introduce an action of a `monoid_with_zero` on a Type with `0`.
In particular, for Types `R` and `M`, both containing `0`, we define `smul_with_zero R M` to be the typeclass where the products `r • 0` and `0 • m` vanish for all `r ∈ R` and all `m ∈ M`.
Moreover, in the case in which `R` is a `monoid_with_zero`, we introduce the typeclass `mul_action_with_zero R M`, mimicking group actions and having an absorbing `0` in `R`.  Thus, the action is required to be compatible with
* the unit of the monoid, acting as the identity;
* the zero of the monoid_with_zero, acting as zero;
* associativity of the monoid.
Next, in a separate file, I introduce `M`-regular elements for a `monoid_with_zero R` with a `mul_action_with_zero` on a module `M`.  The definition is simply to require that an element `a : R` is `M`-regular if the smultiplication `M → M`, given by `m ↦ a • m` is injective.
We also prove some basic facts about `M`-regular elements.
The PR further changes three further the files
* `data/polynomial/coeffs`;
* `topology/algebra/module.lean`;
* `analysis/normed_space/bounded_linear_maps`.
The changes are prompted by a failure in CI.  In each case, the change was tiny, mostly having to do with an exchange of a multiplication by a smultiplication or vice-versa.

2021-03-15 09:03:12 abf2ab4
feat(linear_algebra/quadratic_form): associated bilinear form over noncommutative rings (#6585)
The `associated` bilinear form to a quadratic form is currently constructed for commutative rings, but nearly the same construction works without a commutativity hypothesis (the only part that fails is that the operation of performing the construction is now an `add_monoid_hom` rather than a `linear_map`.  I provide this construction, naming it `associated'`.
Needed for #5814 (not exactly a dependency since we can merge a non-optimal version of that PR before this one is merged).

2021-03-15 07:04:07 249fd4f
refactor(data/polynomial,ring_theory): use big operators for polynomials (#6616)
This untangles some more definitions on polynomials from finsupp.  This uses the same approach as in #6605.

2021-03-15 01:08:57 c5796c7
chore(scripts): update nolints.txt (#6686)
I am happy to remove some nolints for you!

2021-03-14 15:45:18 0a16148
feat(measure_theory/lp_space): add snorm_norm_rpow (#6619)
The lemma `snorm_norm_rpow` states `snorm (λ x, ∥f x∥ ^ q) p μ = (snorm f (p * ennreal.of_real q) μ) ^ q`.
Also add measurability lemmas about pow/rpow.

2021-03-14 12:22:07 feab14b
fix(algebra/continued_fractions): fix import (#6677)
Just fix an import

2021-03-14 10:50:39 b48cf17
feat(linear_algebra/alternating): Add dom_coprod (#5269)
This implements a variant of the multiplication defined in the second half of [Proposition 22.24 of "Notes on Differential Geometry and Lie Groups" (Jean Gallier)](https://www.cis.upenn.edu/~cis610/diffgeom-n.pdf):
![image](https://user-images.githubusercontent.com/425260/104042315-3dfe7380-51d2-11eb-9b3a-bbbb52d180f0.png)

2021-03-14 06:52:22 b52337a
feat(topology/algebra/group): Add two easy lemmas (#6669)
A topological group is discrete as soon as {1} is open.
The closure of a subgroup is a subgroup.
From the liquid tensor experiment.

2021-03-14 03:22:20 464d04a
feat(data/nat/fincard): introduce `nat.card`, `enat.card` (#6670)
Defines `nat`- and `enat`-valued cardinality functions.

2021-03-14 03:22:18 70662e1
chore(data/rat/basic): a few trivial lemmas about `rat.denom` (#6667)

2021-03-14 03:22:18 69d7134
feat(topology/basic): `f =ᶠ[𝓝 a] 0` iff `a ∉ closure (support f)` (#6665)
Also add `equiv.image_symm_image` and `function.compl_support`.

2021-03-14 03:22:17 c928e34
feat(data/real/ennreal,topology/*): assorted lemmas (#6663)
* add `@[simp]` to `ennreal.coe_nat_lt_coe_nat` and `ennreal.coe_nat_le_coe_nat`;
* add `ennreal.le_of_add_le_add_right`;
* add `set.nonempty.preimage`;
* add `ennreal.infi_mul_left'` and `ennreal.infi_mul_right'`;
* add `ennreal.tsum_top`;
* add `emetric.diam_closure`;
* add `edist_pos`;
* add `isometric.bijective`, `isometric.injective`, and `isometric.surjective`.

2021-03-14 03:22:15 1e9f664
refactor(ring_theory/discrete_valuation_ring): `discrete_valuation_ring.add_val` as an `add_valuation` (#6660)
Refactors `discrete_valuation_ring.add_val` to be an `enat`-valued `add_valuation`.

2021-03-14 03:22:14 d61d8bf
feat(measure_theory/bochner_integration): extend the integral_smul lemmas (#6654)
Extend the `integral_smul` lemmas to multiplication of a function `f : α → E` with scalars in `𝕜` with `[nondiscrete_normed_field 𝕜] [normed_space 𝕜 E] [smul_comm_class ℝ 𝕜 E]` instead of only `ℝ`.

2021-03-14 03:22:13 a8af8e8
feat(polynomial/algebra_map): aeval_algebra_map_apply (#6649)

2021-03-14 03:22:12 3e011d6
chore(equiv/*): add missing lemmas to traverse coercion diamonds (#6648)
These don't have a preferred direction, but there are cases when they are definitely needed.
The conversion paths commute as squares:
```
`→+` <-- `→+*` <-- `→ₐ[R]`
 ^         ^          ^
 |         |          |
`≃+` <-- `≃+*` <-- `≃ₐ[R]`
```
so we only need lemmas to swap within each square.

2021-03-14 03:22:11 a3050f4
feat(group_theory/order_of_element): Endomorphisms of cyclic groups (#6645)
If G is cyclic then every group homomorphism G -> G is a power map.

2021-03-14 03:22:10 b23e14d
feat(data/polynomial/eval): prod_comp (#6644)
Extend `mul_comp` to `multiset.prod`

2021-03-14 03:22:09 d5563ae
feat(group_theory/solvable): Solvability preserved by short exact sequences (#6632)
Proves that if 0 -> A -> B -> C -> 0 is a short exact sequence of groups, and if A and C are both solvable, then so is B.

2021-03-14 03:22:08 ade8889
feat(algebra/algebra/basic): An algebra isomorphism induces a group isomorphism between automorphism groups (#6622)
Constructs the group isomorphism induced from an algebra isomorphism.

2021-03-14 00:42:57 552ebeb
feat(algebra/continued_fractions): add convergence theorem  (#6607)
1. Add convergence theorem for continued fractions, i.e. `(gcf.of v).convergents` converges to `v`. 
2. Add some simple corollaries following from the already existing approximation lemmas for continued fractions, e.g. the equivalence of the convergent computations for continued fractions computed by `gcf.of` (`(gcf.of v).convergents` and `(gcf.of v).convergents'`).

2021-03-14 00:42:55 a7410df
feat(analysis/calculus/tangent_cone): add `unique_diff_on.pi` (#6577)

2021-03-14 00:42:54 1b0db8e
feat(order/well_founded_set, ring_theory/hahn_series): `hahn_series.add_val` (#6564)
Defines `set.is_wf.min` in terms of `well_founded.min`
Places an `add_valuation`, `hahn_series.add_val`, on `hahn_series`

2021-03-14 00:42:53 0c26cea
feat(order/filter/cofinite): a growing function has a minimum (#6556)
If `tendsto f cofinite at_top`, then `f` has a minimal element.

2021-03-14 00:42:52 19ecff8
feat(topology/algebra/nonarchimedean): added nonarchimedean groups and rings (#6551)
Adding nonarchimedean topological groups and rings.

2021-03-14 00:42:51 ae33fb0
feat(group_theory/submonoid/operations): add eq_top_iff' (#6536)

2021-03-14 00:42:50 f4c4d10
feat(probability_theory/independence): prove equivalences for indep_set (#6242)
Prove the following equivalences on `indep_set`, for measurable sets `s,t` and a probability measure `µ` :
* `indep_set s t μ ↔ μ (s ∩ t) = μ s * μ t`,
* `indep_set s t μ ↔ indep_sets {s} {t} μ`.
In `indep_sets.indep_set_of_mem`, we use those equivalences to obtain `indep_set s t µ` from `indep_sets S T µ` and `s ∈ S`, `t ∈ T`.

2021-03-13 21:18:31 c277752
feat(algebra/group/defs, data/nat/basic): some `ne` lemmas (#6637)
`≠` versions of `mul_left_inj`, `mul_right_inj`, and `succ_inj`, as well as the lemma `succ_succ_ne_one`.

2021-03-13 21:18:30 468b8ff
feat(field_theory/polynomial_galois_group): instances of trivial Galois group (#6634)
This PR adds a bunch of instances where the Galois group of a polynomial is trivial.

2021-03-13 21:18:29 ba6b689
feat(field_theory/intermediate_field): coe_pow (#6626)

2021-03-13 15:08:17 e6819d3
feat(algebra/group_power/lemmas): add invertible_of_pow_eq_one (#6658)

2021-03-13 01:18:53 ff8c8f5
fix(tactic/norm_num): perform cleanup even if norm_num fails (#6655)
[As reported on Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/norm_num.20fails.20when.20simp.20is.20too.20effective/near/230004826).

2021-03-12 14:44:38 f54f81c
refactor(algebra/invertible): push deeper into the import graph (#6650)
I want to be able to import this in files where we use `is_unit`, to remove a few unecessary non-computables.
This moves all the lemmas about `char_p` and `char_zero` from `algebra.invertible` to `algebra.char_p.invertible`. This means that we can talk about `invertible` elements without having to build up the theory in `order_of_element` first.
This doesn't change any lemma statements or proofs, but it does move some type arguments into `variables` statements.

2021-03-12 08:19:11 85c6a79
feat(measure_theory/lp_space): Lp is complete (#6563)
Prove the completeness of `Lp` by showing that Cauchy sequences of `ℒp` have a limit.

2021-03-12 04:45:09 dae047e
feat(data/polynomial/*): more lemmas, especially for noncommutative rings (#6599)

2021-03-12 01:21:10 b852648
chore(scripts): update nolints.txt (#6651)
I am happy to remove some nolints for you!

2021-03-12 00:18:01 2dabe5a
feat(.docker): Docker containers for debian, alpine, and gitpod (#6515)
# Docker containers
The `.docker` directory contains instructions for building Docker containers
with Lean and mathlib.
## Build
You can build these containers using `scripts/docker_build.sh`.
This will result in the creation of two containers:
* `leanprovercommunity/lean` - contains elan, lean, and leanproject
* `leanprovercommunity/mathlib` - additionally contains a copy of mathlib, with oleans
In fact, for each container you'll get three different tags, `:debian`, `:alpine` and `:latest`.
`:debian` and `:alpine` use those respective distributions, and `:latest` just points at `:debian`.
Finally, there is also a `leanprovercommunity/mathlib:gitpod` for use at
[https://gitpod.io/](https://gitpod.io/).
## Usage
### gitpod.io
There is a container based on `gitpod/workspace-base`
enabling [https://gitpod.io/](https://gitpod.io/) to create in-browser VSCode sessions
with elan/lean/leanproject/mathlib already set up.
Either prepend `https://gitpod.io/#` to basically any URL at github, e.g.
[https://gitpod.io/#https://github.com/leanprover-community/mathlib/tree/docker](https://gitpod.io/#https://github.com/leanprover-community/mathlib/tree/docker),
or install a [gitpod browser extension](https://www.gitpod.io/docs/browser-extension/)
which will add buttons directly on github.
### Command line
You can use these containers as virtual machines:
```sh
docker run -it leanprovercommunity/mathlib
```
### Docker registry
These containers are deployed to the Docker registry, so anyone can just
`docker run -it leanprovercommunity/mathlib` to get a local lean+mathlib environment.
There is a local script in `scripts/docker_push.sh` for deployment,
but I have also set up `hub.docker.com` to watch the `docker` branch for updates
and automatically rebuild.
If this PR is merged to master we should change that to watch `master`.
### Remote containers for VSCode
Installing the `Remote - Containers` VSCode extension
will allow you to open a project inside the `leanprovercommunity/mathlib` container
(meaning you don't even need a local copy of lean installed).
The file `/.devcontainer/devcontainer.json` sets this up:
if you have the extension installed, you'll be prompted to ask if you'd like to run inside the
container, no configuration necessary.

2021-03-11 22:32:31 b1aafb2
fix (topology/algebra/basic): fix universe issue with of_nhds_one (#6647)
Everything had type max{u v} before.

2021-03-11 17:09:38 4d8d344
feat(data/multiset/basic): Multiset induction lemma (#6623)
This is the multiset analog of `finset.induction_on'`

2021-03-11 17:09:36 bd3695a
feat(data/complex/is_R_or_C): add linear maps for is_R_or_C.re, im, conj and of_real (#6621)
Add continuous linear maps and linear isometries (when applicable) for the following `is_R_or_C` functions: `re`, `im`, `conj` and `of_real`.
Rename the existing continuous linear maps defined in complex.basic to adopt the naming convention of is_R_or_C.

2021-03-11 17:09:35 998a382
feat(topology/algebra/infinite_sum): add `tsum_even_add_odd` (#6620)
Prove `∑' i, f (2 * i) + ∑' i, f (2 * i + 1) = ∑' i, f i` and some
supporting lemmas.

2021-03-11 17:09:34 95a8e95
refactor(data/{,mv_}polynomial): support function (#6615)
With polynomials, we try to avoid the function coercion in favor of the `coeff` functions.  However the coercion easily leaks through the abstraction because of the `finsupp.mem_support_iff` lemma.
This PR adds the `polynomial.support` and `mv_polynomial.support` functions.  This allows us to define the `polynomial.mem_support_iff` and `mv_polynomial.mem_support_iff` lemmas that are stated in terms of `coeff`.

2021-03-11 17:09:33 f5c9d0f
feat(topology/algebra/ordered): generalize `real.compact_Icc` (#6602)

2021-03-11 13:28:38 3b3a8b5
fix(normed_space/multilinear): speed up slow proof (#6639)
This proof seems to be right on the edge of timing out and has been causing CI issues.
I'm not sure if this is the only culprit. This whole file is very slow. Is this because of recent changes, or has it always been like this?

2021-03-11 13:28:36 3d451c7
chore(tactic/interactive): propagate tags in `substs` (#6638)
Before this change, the `case left` tactic here did not work:
```lean
example {α : Type*} (a b c : α) (h : a = b) : (a = b ∨ a = c) ∧ true :=
begin
  with_cases {apply and.intro},
  substs' h,
  case left : { exact or.inl rfl },
  case right : { trivial }
end
```

2021-03-11 13:28:35 9beec03
feat(group_theory/subgroup): le_ker_iff (#6630)
A subgroup is contained in the kernel iff it is mapped to the trivial subgroup.

2021-03-11 13:28:33 57fda28
refactor(data/polynomial/degree/definitions): Remove hypothesis of nat_degree_X_pow_sub_C (#6628)
The lemma `nat_degree_X_pow_sub_C ` had an unnecessary hypothesis.

2021-03-11 13:28:32 41f1196
feat(field_theory/polynomial_galois_group): ext lemma (#6627)
Two elements of `gal p` are equal if they agree on all roots of `p`

2021-03-11 13:28:31 3dd1257
feat(group_theory/solvable): Commutative groups are solvable (#6625)
In practice, `is_solvable_of_comm` is hard to use, since you often aren't working with a `comm_group`. Instead, it is much nicer to be able to write:
`apply is_solvable_of_comm'`
`intros g h`

2021-03-11 13:28:30 2c4a985
feat(field_theory/splitting_field): splits_pow (#6624)
If a polynomial splits then so do its powers.

2021-03-11 13:28:29 653fd29
refactor(topology): make is_closed a class (#6552)
In `lean-liquid`, it would be useful that `is_closed` would be a class, to be able to infer a normed space structure on `E/F` when `F` is a closed subspace of a normed space `E`. This is implemented in this PR. This is mostly straightforward: the only proofs that need fixing are those abusing defeqness, so the new version makes them clearer IMHO.

2021-03-11 11:19:18 56065f7
feat(measure_theory/pi_system) lemmas for pi_system, useful for independence. (#6353)
The goal here is to prove that the expectation of a product of an finite number of independent random variables equals the production of the expectations.
See https://github.com/leanprover-community/mathlib/tree/mzinkevi_independent_finite_alt

2021-03-11 06:05:43 925ea07
feat(linear_algebra/basic): add missing lemma finsupp.sum_smul_index_linear_map' (#6565)
See also [this Zulip conversation](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Sum.20is.20linear/near/229021943). cc @eric-wieser

2021-03-11 05:06:41 b7c5709
chore(geometry/manifold): use notation `𝓘(𝕜, E)` (#6636)

2021-03-11 02:48:51 514973a
chore(scripts): update nolints.txt (#6635)
I am happy to remove some nolints for you!

2021-03-11 02:48:49 0e32116
feat(data/dfinsupp): add is_scalar_tower and smul_comm_class (#6614)
This also weakens the requirements for the `has_scalar` instance

2021-03-11 02:48:47 a814e18
ci(.github/workflows/build.yml): do not install azcopy, change upload logic (#6613)
The "install azcopy" step has been [failing](https://github.com/leanprover-community/mathlib/runs/2070026978) from time to time, probably due to failed downloads. As it turns out, the GitHub-hosted actions runner [comes with it installed](https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#tools), so I've removed that step entirely.
I also made two other changes:
- The "push release to azure" step now only runs if the build actually started. The idea is that if the build never even starts due to e.g. `elan` temporarily failing to install, then we should be able to restart the build on GitHub and get `.olean`s for that commit without having to push another dummy commit. Currently we can't do this because we push an empty archive to Azure no matter what.
- We now upload artifacts if the build fails. This gives us an alternative way to get `.olean`s in case something goes wrong with Azure, and might make working with forks of mathlib slightly easier.

2021-03-11 00:47:49 c5c97f2
chore(ring_theory/polynomial/basic): remove a use of comap (#6612)
This merges together `quotient_equiv_quotient_mv_polynomial` and `quotient_alg_equiv_quotient_mv_polynomial`, since the two now have the same domain and codomain.
`comap` was previously needed here to provide a wrapper type with an R-algebra structure on `mv_polynomial σ (I.quotient)`.
The updated `mv_polynomial.algebra` in #6533 transfers the `algebra R I.quotient` structure directly to `mv_polynomial σ I.quotient`, eliminating the need for this wrapper type.

2021-03-11 00:47:48 590444c
chore(topology/metric/hausdorff_distance): use `infi`/`supr` (#6611)

2021-03-10 20:43:06 5be9cea
chore(linear_algebra/quadratic_form): clean up universe collisions, generalize smul lemmas (#6609)

2021-03-10 20:43:05 547bf55
feat(data/complex/module): transfer all `has_scalar ℝ` structures to `ℂ` (#6562)
This provides (for an `R` with the same instance on `ℝ`) the instances:
* `has_scalar R ℂ`
* `is_scalar_tower R S ℂ`
* `smul_comm_class R S ℂ`
* `mul_action R ℂ`
* `distrib_mul_action R ℂ`
* `semimodule R ℂ`
* `algebra R ℂ`
* `normed_algebra R ℂ`
This has the downside that `smul_coe` is no longer a `rfl` lemma, but means that `ℂ` is automatically an algebra over `ℝ≥0`.
It renames `smul_re` and `smul_im` to `of_real_mul_re` and `of_real_mul_im`, since the previous statements did not use `smul` at all, and renaming frees up these names for lemmas which _do_ use `smul`.
This removes `normed_space.restrict_scalars_real E` (implemented as `normed_space.restrict_scalars ℝ ℂ E`) as:
* As an instance, it now causes unwanted diamonds
* After downgrading to a def, it is never used
* The docs for `normed_space.restrict_scalars` suggest judicious use, and that if you want this instance you should use the type synonym `semimodule.restrict_scalars ℝ ℂ E` which will have this instance for free.

2021-03-10 20:43:04 60e2579
feat(ring_theory/valuation/basic): additive valuations (#6559)
Introduces `add_valuation`, a version of `valuation` that takes values in a `linear_ordered_add_comm_monoid_with_top`.
As an example, defines `multiplicity.add_valuation`

2021-03-10 20:43:02 e62a406
feat(linear_algebra/determinant): determinant of a block triangular matrix (#6050)
Add lemmas for determinants of block triangular matrices.

2021-03-10 17:05:28 664feed
chore(topology/algebra/ordered): add some `at_bot` versions of lemmas (#6618)

2021-03-10 17:05:27 f675a86
feat(data/real/{nnreal,ennreal}): add (e)nnreal.of_real_bit0/bit1 (#6617)
Add bit0/bit1 lemmas for `nnreal.of_real`, `ennreal.of_real` and `ennreal.to_nnreal`.
With these additions, it is for example possible to prove `h : ennreal.of_real (2 : ℝ) = 2 := by simp`.

2021-03-10 17:05:26 df1337e
feat(data/local_equiv,topology/local_homeomorph): add `local_equiv.pi` and `local_homeomorph.pi` (#6574)

2021-03-10 11:57:13 e221dc9
feat(ring_theory/hahn_series): algebra structure, equivalences with power series (#6540)
Places an `algebra` structure on `hahn_series`
Defines a `ring_equiv` and when relevant an `alg_equiv` between `hahn_series nat R` and `power_series R`.

2021-03-10 11:57:12 eaa0218
feat(category_theory/triangulated/basic): add definitions of additive category and triangle (#6539)
This PR adds the definition of an additive category and the definition of a triangle in an additive category with an additive shift.

2021-03-10 11:57:10 a7f1e3c
feat(normed_group): tendsto_at_top (#6525)

2021-03-10 11:57:09 ccd35db
feat(linear_algebra/matrix): to_matrix and to_lin as alg_equiv (#6496)
The existing `linear_map.to_matrix` and `matrix.to_lin` can be upgraded to an `alg_equiv` if working on linear endomorphisms or square matrices. The API is copied over in rote fashion.

2021-03-10 08:51:55 b1ecc98
feat(nat/digits): natural basis representation using list sum and map (#5975)

2021-03-10 02:23:34 fad44b9
feat(ring_theory/ideal/operations): add quotient_equiv (#6492)
The ring equiv `R/I ≃+* S/J` induced by a ring equiv `f : R ≃+* S`,  where `J = f(I)`, and similarly for algebras.

2021-03-10 02:23:33 4e370b5
feat(topology): shrinking lemma (#6478)
### Add a few versions of the shrinking lemma:
* `exists_subset_Union_closure_subset` and `exists_Union_eq_closure_subset`: shrinking lemma for general normal spaces;
* `exists_subset_Union_ball_radius_lt`, `exists_Union_ball_eq_radius_lt`, `exists_subset_Union_ball_radius_pos_lt`, `exists_Union_ball_eq_radius_pos_lt`: shrinking lemma for coverings by open balls in a proper metric space;
* `exists_locally_finite_subset_Union_ball_radius_lt`, `exists_locally_finite_Union_eq_ball_radius_lt`: given a positive function `R : X → ℝ`, finds a locally finite covering by open balls `ball (c i) (r' i)`, `r' i < R` and a subcovering by balls of strictly smaller radius `ball (c i) (r i)`, `0 < r i < r' i`.
### Other API changes
* add `@[simp]` to `set.compl_subset_compl`;
* add `is_closed_bInter` and `locally_finite.point_finite`;
* add `metric.closed_ball_subset_closed_ball`, `metric.uniformity_basis_dist_lt`, `exists_pos_lt_subset_ball`, and `exists_lt_subset_ball`;
* generalize `refinement_of_locally_compact_sigma_compact_of_nhds_basis` to `refinement_of_locally_compact_sigma_compact_of_nhds_basis_set`, replace arguments `(s : X → set X) (hs : ∀ x, s x ∈ 𝓝 x)` with a hint to use `filter.has_basis.restrict_subset` if needed.
* make `s` and `t` arguments of `normal_separation` implicit;
* add `normal_exists_closure_subset`;
* turn `sigma_compact_space_of_locally_compact_second_countable` into an `instance`.

2021-03-10 02:23:32 05d3955
feat(number_theory/bernoulli): bernoulli_power_series (#6456)
Co-authored-by Ashvni Narayanan

2021-03-10 02:23:31 c962871
feat(linear_algebra): linear_independent_fin_snoc (#6455)
A slight variation on the existing `linear_independent_fin_cons`.

2021-03-09 21:43:56 b697e52
refactor(ring_theory/power_series/basic): simplify truncation (#6605)
I'm trying to reduce how much finsupp leaks through the polynomial API, in this case it works quite nicely.

2021-03-09 21:43:55 09a505a
feat(ring_theory/witt_vector): use structure instead of irreducible (#6604)

2021-03-09 21:43:53 18d4e51
chore(algebra/ring/basic): weaken ring.inverse to only require monoid_with_zero (#6603)
Split from #5539 because I actually want to use this, and the PR is large and stalled.

2021-03-09 21:43:52 fb674e1
feat(data/finset/lattice): map_sup, map_inf (#6601)

2021-03-09 21:43:51 be6753c
feat(data/{list,multiset,finset}): map_filter (#6600)
This renames `list.filter_of_map` to `list.map_filter`, which unifies the name of the `map_filter` lemmas for lists and finsets, and adds a corresponding lemma for multisets.
Unfortunately, the name `list.filter_map` is already used for a definition.

2021-03-09 21:43:50 366a23f
feat(topology/constructions): frontier/interior/closure in `X × Y` (#6594)

2021-03-09 21:43:49 9ff7458
feat(algebra/group_power/basic): add abs_add_eq_add_abs_iff (#6593)
I've added
```
lemma abs_add_eq_add_abs_iff {α : Type*} [linear_ordered_add_comm_group α]  (a b : α) :
  abs (a + b) = abs a + abs b ↔ (0 ≤ a ∧ 0 ≤ b ∨ a ≤ 0 ∧ b ≤ 0)
```
from `lean-liquid`. For some reasons I am not able to use `wlog hle : a ≤ b using [a b, b a]` at the beginning of the proof, Lean says `unknown identifier 'wlog'` and if I try to import `tactic.wlog` I have tons of errors.

2021-03-09 21:43:47 8e246cb
refactor(data/mv_polynomial): cleanup equivs (#6589)
This:
* Replaces `alg_equiv_congr_left` with `rename_equiv` (to match `rename`)
* Removes `ring_equiv_congr_left` (it's now `rename_equiv.to_ring_equiv`)
* Renames `alg_equiv_congr_right` to `map_alg_equiv` (to match `map`) and removes the `comap` from the definition
* Renames `ring_equiv_congr_right` to `map_equiv` (to match `map`)
* Removes `alg_equiv_congr` (it's now `(map_alg_equiv R e).trans $ (rename_equiv e_var).restrict_scalars _`, which while longer is never used anyway)
* Removes `ring_equiv_congr` (it's now `(map_equiv R e).trans $ (rename_equiv e_var).to_ring_equiv`, which while longer is never used anyway)
* Replaces `punit_ring_equiv` with `punit_alg_equiv`
* Removes `comap` from the definition of `sum_alg_equiv`
* Promotes `option_equiv_left`, `option_equiv_right`, and `fin_succ_equiv` to `alg_equiv`s
This is a follow-up to #6420

2021-03-09 21:43:46 5d82d1d
feat(algebra,linear_algebra): `{smul,lmul,lsmul}_injective` (#6588)
This PR proves a few injectivity results for (scalar) multiplication in the setting of modules and algebras over a ring.

2021-03-09 21:43:45 3d75242
chore(data/equiv/local_equiv,topology/local_homeomorph): put `source`/`target` to the left in `∩` (#6583)

2021-03-09 21:43:44 78af5b1
feat(topology): closure in a `pi` space (#6575)
Also add `can_lift` instances that lift `f : subtype p → β` to `f : α → β` and a version of `filter.mem_infi_iff` that uses a globally defined function.

2021-03-09 21:43:43 792e492
feat(topology/separation): add API for interaction between discrete topology and subsets (#6570)
The final result:
Let `s, t ⊆ X` be two subsets of a topological space `X`.  If `t ⊆ s` and the topology induced
by `X`on `s` is discrete, then also the topology induces on `t` is discrete.
The proofs are by Patrick Massot.

2021-03-09 16:22:20 8713c0b
feat(measure/pi): prove extensionality for `measure.pi` (#6304)
* If two measures in a finitary product are equal on cubes with measurable sides (or with sides in a set generating the corresponding sigma-algebra), then the measures are equal.
* Add `sigma_finite` instance for `measure.pi`
* Some basic lemmas about sets (more specifically `Union` and `set.pi`)
* rename `measurable_set.pi_univ` -> `measurable_set.univ_pi` (`pi univ t` is called `univ_pi` consistently in `set/basic`, but it's not always consistent elsewhere)
* rename `[bs]?Union_prod` -> `[bs]?Union_prod_const`

2021-03-09 11:19:52 c1a7c19
chore(data/polynomial/basic): add missing is_scalar_tower and smul_comm_class instances (#6592)
These already exist for `mv_polynomial`, but the PR that I added them in forgot to add them for `polynomial`.
Notably, this provides the instance `is_scalar_tower R (mv_polynomial S₁ R) (polynomial (mv_polynomial S₁ R))`.

2021-03-09 11:19:51 fa28a8c
feat(data/nat/parity): even/odd.mul_even/odd (#6584)
Lemmas pertaining to the multiplication of even and odd natural numbers.

2021-03-09 11:19:50 49afae5
feat(number_theory/bernoulli): bernoulli_poly_eval_one (#6581)

2021-03-09 11:19:49 9889502
feat(linear_algebra/pi): add `submodule.pi` (#6576)

2021-03-09 11:19:47 a331113
feat(analysis/normed_space/normed_group_hom): bounded homs between normed groups (#6375)
From `lean-liquid`

2021-03-09 08:12:31 6dec23b
chore(topology/algebra/ordered): use dot notation, golf some proofs (#6595)
Use more precise typeclass arguments here and there, golf some proofs, use dot notation.
### Renamed lemmas
* `is_lub_of_is_lub_of_tendsto` → `is_lub.is_lub_of_tendsto`;
* `is_glb_of_is_glb_of_tendsto` → `is_glb.is_glb_of_tendsto`;
* `is_glb_of_is_lub_of_tendsto` → `is_lub.is_glb_of_tendsto`;
* `is_lub_of_is_glb_of_tendsto` → `is_glb.is_lub_of_tendsto`;
* `mem_closure_of_is_lub` → `is_lub.mem_closure`;
* `mem_of_is_lub_of_is_closed` → `is_lub.mem_of_is_closed`, `is_closed.is_lub_mem`;
* `mem_closure_of_is_glb` → `is_glb.mem_closure`;
* `mem_of_is_glb_of_is_closed` → `is_glb.mem_of_is_closed`, `is_closed.is_glb_mem`;
### New lemmas
* `is_lub.inter_Ici_of_mem`
* `is_glb.inter_Iic_of_mem`
* `frequently.filter_mono`
* `is_lub.frequently_mem`
* `is_lub.frequently_nhds_mem`
* `is_glb.frequently_mem`
* `is_glb.frequently_nhds_mem`
* `is_lub.mem_upper_bounds_of_tendsto`
* `is_glb.mem_lower_bounds_of_tendsto`
* `is_lub.mem_lower_bounds_of_tendsto`
* `is_glb.mem_upper_bounds_of_tendsto`
* `diff_subset_closure_iff`

2021-03-09 02:15:11 32bd00f
refactor(topology/bounded_continuous_function): structure extending continuous_map (#6521)
Convert `bounded_continuous_function` from a subtype to a structure extending `continuous_map`, and some minor improvements to `@[simp]` lemmas.

2021-03-08 19:42:23 3e5d90d
feat(algebra/continued_fractions) add determinant formula and approximations for error term (#6461)

2021-03-08 19:42:22 0afdaab
feat(linear_algebra): submodules of f.g. free modules are free (#6178)
This PR proves the first half of the structure theorem for modules over a PID: if `R` is a principal ideal domain and `M` an `R`-module which is free and finitely generated (expressed by `is_basis R (b : ι → M)`, for a `[fintype ι]`), then all submodules of `M` are also free and finitely generated.
This result requires some lemmas about the rank of (free) modules (which in that case is basically the same as `fintype.card ι`). If `M` were a vector space, this could just be expressed as `findim R M`, but it isn't necessarily, so it can't be.

2021-03-08 17:02:28 cdc222d
chore(topology): add a few simple lemmas (#6580)

2021-03-08 17:02:27 87eec0b
feat(linear_algebra/bilinear_form): Existence of orthogonal basis with respect to a bilinear form (#5814)
We state and prove the result that there exists an orthogonal basis with respect to a symmetric nondegenerate.

2021-03-08 14:38:24 6791ed9
chore(algebra/module/linear_map): add linear_map.to_distrib_mul_action_hom (#6573)
My aim in adding this is primarily to give the reader a hint that `distrib_mul_action_hom` exists.
The only difference between the two is that `linear_map` can infer `map_zero'` from its typeclass arguments.

2021-03-08 14:38:23 13d86df
chore(algebra/monoid_algebra): provide finer-grained levels of structure for less-structured `G`. (#6572)
This provides `distrib` and `mul_zero_class` for when `G` is just `has_mul`, and `semigroup` for when `G` is just `semigroup`.
It also weakens the typeclass assumptions on some correspondings lemmas.

2021-03-08 12:32:37 7058fa6
feat(linear_algebra/{bilinear,quadratic}_form): inherit scalar actions from algebras (#6586)
For example, this means a quadratic form over the quaternions inherits an `ℝ` action.

2021-03-08 12:32:35 5d0a40f
feat(algebra/algebra/{basic,tower}): add alg_equiv.comap and alg_equiv.restrict_scalars (#6548)
This also renames `is_scalar_tower.restrict_base` to `alg_hom.restrict_scalars`, to enable dot notation and match `linear_map.restrict_scalars`.

2021-03-08 11:35:06 b6ed62c
feat(algebraic_topology): simplicial objects and simplicial types (#6195)

2021-03-08 10:21:12 f3dbe9f
feat(bounded_continuous_function): coe_sum (#6522)

2021-03-08 02:11:14 98c6bbc
feat(data/set/function): three lemmas about maps_to (#6518)

2021-03-08 01:18:53 5b61f07
chore(scripts): update nolints.txt (#6582)
I am happy to remove some nolints for you!

2021-03-07 22:03:50 2d3c522
feat(order/ideal): added proper ideal typeclass and lemmas to order_top (#6566)
Defined `proper` and proved basic lemmas about proper ideals.
Also turned `order_top` into a section.

2021-03-07 21:14:26 79be90a
feat(algebra/regular): add lemmas about regularity of non-zero elements (#6579)
More API, to deal with cases in which a regular element is non-zero.

2021-03-07 17:19:18 b25994d
feat(number_theory/bernoulli): definition and properties of Bernoulli polynomials (#6309)
The Bernoulli polynomials and its properties are defined.

2021-03-07 14:37:15 d9370e0
fead(data/support): add `support_smul` (#6569)
* add `smul_ne_zero`;
* rename `support_smul_subset` to `support_smul_subset_right`;
* add `support_smul_subset_left` and `support_smul`.

2021-03-07 10:18:36 02251b1
refactor(geometry/manifold): drop some unused arguments (#6545)
API changes:
* add lemmas about `map (ext_chart_at I x) (𝓝[s] x')`;
* prove `times_cont_mdiff_within_at.comp` directly without using other charts; the new proof does not need a `smooth_manifold_with_corners` instance;
* add aliases `times_cont_mdiff.times_cont_diff` etc;
* `times_cont_mdiff_map` no longer needs a `smooth_manifold_with_corners` instance;
* `has_smooth_mul` no longer extends `smooth_manifold_with_corners` and no longer takes `has_continuous_mul` as an argument;
* `has_smooth_mul_core` is gone in favor of `has_continuous_mul_of_smooth`;
* `smooth_monoid_morphism` now works with any model space (needed, e.g., to define `smooth_monoid_morphism.prod`);
* `lie_group_morphism` is gone: we use `M →* N` both for monoids and groups, no reason to have two structures in this case;
* `lie_group` no longer extends `smooth_manifold_with_corners` and no longer takes `topological_group` as an argument;
* `lie_group_core` is gone in favor of `topological_group_of_lie_group`;
* the `I : model_with_corners 𝕜 E H` argument of `smooth_mul` and `smooth_inv` is now explicit.

2021-03-07 04:25:18 ebe2c61
feat(analysis/normed_space/multilinear): a few more bundled (bi)linear maps (#6546)

2021-03-07 03:26:19 9f17db5
feat(analysis/special_functions/integrals): mul/div by a const (#6357)
This PR, together with #6216, makes the following possible:
```
import analysis.special_functions.integrals
open real interval_integral
open_locale real
example : ∫ x in 0..π, 2 * sin x = 4 := by norm_num
example : ∫ x:ℝ in 4..5, x * 2 = 9 := by norm_num
example : ∫ x in 0..π/2, cos x / 2 = 1 / 2 := by simp
```

2021-03-07 01:15:46 07fc982
chore(scripts): update nolints.txt (#6567)
I am happy to remove some nolints for you!

2021-03-06 21:16:19 df1e6f9
refactor(data/{finset,multiset}): move inductions proofs on sum/prod from finset to multiset, add more induction lemmas (#6561)
The starting point is `finset.le_sum_of_subadditive`, which is extended in several ways:
* It is written in multiplicative form, and a `[to_additive]` attribute generates the additive version,
* It is proven for multiset, which is then used for the proof of the finset case.
* For multiset, some lemmas are written for foldr/foldl (and prod is a foldr).
* Versions of these lemmas specialized to nonempty sets are provided. These don't need the initial hypothesis `f 1 = 1`/`f 0 = 0`.
* The new `..._on_pred` lemmas like `finset.le_sum_of_subadditive_on_pred` apply to functions that are only sub-additive for arguments that verify some property. I included an application of this with `snorm_sum_le`, which uses that the Lp seminorm is subadditive on a.e.-measurable functions. Those `on_pred` lemmas could be avoided by constructing the submonoid given by the predicate, then using the standard subadditive result, but I find convenient to be able to use them directly.

2021-03-06 21:16:18 b280b00
feat(data/set/basic): add `set.set_ite` (#6557)
I'm going to use it as `source` and `target` in
`local_equiv.piecewise` and `local_homeomorph.piecewise`. There are
many non-defeq ways to define this set and I think that it's better to
have a name than to ensure that we always use the same formula.

2021-03-06 19:15:21 ac8a119
chore(geometry/manifold): use `namespace`, rename `image` to `image_eq` (#6517)
* use `namespace` command in
  `geometry/manifold/smooth_manifold_with_corners`;
* rename `model_with_corners.image` to `model_with_corners.image_eq`
  to match `source_eq` etc;
* replace `homeomorph.coe_eq_to_equiv` with
  `@[simp] lemma coe_to_equiv`;
* add `continuous_linear_map.symm_image_image` and
  `continuous_linear_map.image_symm_image`;
* add `unique_diff_on.image`,
  `continuous_linear_equiv.unique_diff_on_image_iff`.

2021-03-06 17:06:17 16ef291
feat(order/filter/*, topology/subset_properties): define "coproduct" of two filters (#6372)
Define the "coproduct" of two filters (unclear if this is really a categorical coproduct) as
```lean
protected def coprod (f : filter α) (g : filter β) : filter (α × β) :=
f.comap prod.fst ⊔ g.comap prod.snd
```
and prove the three lemmas which motivated this construction ([Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Filter.20golf)):  coproduct of cofinite filters is the cofinite filter, coproduct of cocompact filters is the cocompact filter, and
```lean
(tendsto f a c) → (tendsto g b d) → (tendsto (prod.map f g) (a.coprod b) (c.coprod d))
```
Co-authored by: Kevin Buzzard <k.buzzard@imperial.ac.uk>
Co-authored by: Patrick Massot <patrickmassot@free.fr>

2021-03-06 11:31:49 0fa0d61
feat(topology/paracompact): define paracompact spaces (#6395)
Fixes #6391

2021-03-06 07:42:55 126cebc
feat(data/real/nnreal): ℝ is an ℝ≥0-algebra (#6560)
Zulip discussion:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/rings.20from.20subtype

2021-03-06 07:42:54 a05b35c
doc(*): wrap raw URLs containing parentheses with angle brackets (#6554)
Raw URLs with parentheses in them are tricky for `doc-gen` to parse, so this commit wraps them in angle brackets.

2021-03-06 07:42:53 3e5643e
feat(category_theory/opposites): use simps everywhere (#6553)
This is possible after leanprover-community/lean#538

2021-03-06 07:42:52 5962c76
feat(algebra/ring/boolean_ring): Boolean rings (#6464)
`boolean_ring.to_boolean_algebra` is the Boolean algebra structure on a Boolean ring.

2021-03-06 02:14:45 32547fc
chore(scripts): update nolints.txt (#6558)
I am happy to remove some nolints for you!

2021-03-06 01:08:46 4428243
chore(polynomial/chebyshev): changes names of chebyshev₁ to chebyshev.T and chebyshev₂ to chebyshev.U (#6519)
Still have to write here what was changed (will be a long list). More or less this is just search and replace `chebyshev₁` for `chebyshev.T` and `chebyshev₂` for `chebyshev.U`.
* `polynomial.chebyshev₁` is now `polynomial.chebyshev.T`
* `polynomial.chebyshev₁_zero` is now `polynomial.chebyshev.T_zero`
* `polynomial.chebyshev₁_one` is now `polynomial.chebyshev.T_one`
* `polynomial.chebyshev₁_two` is now `polynomial.chebyshev.T_two`
* `polynomial.chebyshev₁_add_two` is now `polynomial.chebyshev.T_add_two`
* `polynomial.chebyshev₁_of_two_le` is now `polynomial.chebyshev.T_of_two_le`
* `polynomial.map_chebyshev₁` is now `polynomial.chebyshev.map_T`
* `polynomial.chebyshev₂` is now `polynomial.chebyshev.U`
* `polynomial.chebyshev₂_zero` is now `polynomial.chebyshev.U_zero`
* `polynomial.chebyshev₂_one` is now `polynomial.chebyshev.U_one`
* `polynomial.chebyshev₂_two` is now `polynomial.chebyshev.U_two`
* `polynomial.chebyshev₂_add_two` is now `polynomial.chebyshev.U_add_two`
* `polynomial.chebyshev₂_of_two_le` is now `polynomial.chebyshev.U_of_two_le`
* `polynomial.chebyshev₂_eq_X_mul_chebyshev₂_add_chebyshev₁` is now `polynomial.chebyshev.U_eq_X_mul_U_add_T`
* `polynomial.chebyshev₁_eq_chebyshev₂_sub_X_mul_chebyshev₂` is now `polynomial.chebyshev.T_eq_U_sub_X_mul_U`
* `polynomial.chebyshev₁_eq_X_mul_chebyshev₁_sub_pol_chebyshev₂` is now `polynomial.chebyshev.T_eq_X_mul_T_sub_pol_U`
* `polynomial.one_sub_X_pow_two_mul_chebyshev₂_eq_pol_in_chebyshev₁` is now `polynomial.chebyshev.one_sub_X_pow_two_mul_U_eq_pol_in_T`
* `polynomial.map_chebyshev₂` is now `polynomial.chebyshev.map_U`
* `polynomial.chebyshev₁_derivative_eq_chebyshev₂` is now `polynomial.chebyshev.T_derivative_eq_U`
* `polynomial.one_sub_X_pow_two_mul_derivative_chebyshev₁_eq_poly_in_chebyshev₁` is now `polynomial.chebyshev.one_sub_X_pow_two_mul_derivative_T_eq_poly_in_T`
* `polynomial.add_one_mul_chebyshev₁_eq_poly_in_chebyshev₂` is now `polynomial.chebyshev.add_one_mul_T_eq_poly_in_U`
* `polynomial.mul_chebyshev₁` is now `polynomial.chebyshev.mul_T`
* `polynomial.chebyshev₁_mul` is now `polynomial.chebyshev.T_mul`
* `polynomial.dickson_one_one_eq_chebyshev₁` is now `polynomial.dickson_one_one_eq_chebyshev_T`
* `polynomial.chebyshev₁_eq_dickson_one_one` is now `polynomial.chebyshev_T_eq_dickson_one_one`
* `chebyshev₁_complex_cos` is now `polynomial.chebyshev.T_complex_cos`
* `cos_nat_mul` is now `polynomial.chebyshev.cos_nat_mul`
* `chebyshev₂_complex_cos` is now `polynomial.chebyshev.U_complex_cos`
* `sin_nat_succ_mul` is now `polynomial.chebyshev.sin_nat_succ_mul`

2021-03-05 21:45:36 4bc6707
feat(topology/local_homeomorph): preimage of `closure` and `frontier` (#6547)

2021-03-05 21:45:35 cbcbe24
feat(algebra/ordered_monoid): linear_ordered_add_comm_monoid(_with_top) (#6520)
Separates out classes for `linear_ordered_(add_)comm_monoid`
Creates `linear_ordered_add_comm_monoid_with_top`, an additive and order-reversed version of `linear_ordered_comm_monoid_with_zero`.
Puts an instance of `linear_ordered_add_comm_monoid_with_top` on `with_top` of any `linear_ordered_add_comm_monoid` and also on `enat`

2021-03-05 20:52:35 626cb42
feat(data/polynomial/mirror): new file (#6426)
This files defines an alternate version of `polynomial.reverse`. This version is often nicer to work with since it preserves `nat_degree` and `nat_trailing_degree` and is always an involution.
(this PR is part of the irreducibility saga)

2021-03-05 16:16:24 913950e
feat(group_theory/subgroup): add monoid_hom.restrict (#6537)

2021-03-05 15:05:25 d40487b
feat(measure_theory/[set_integral, interval_integral]): mono and nonneg lemmas (#6292)
See https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.60integral_restrict.60/near/226274072

2021-03-05 13:04:47 97d13d7
feat(algebra/lie/subalgebra): define the Lie subalgebra generated by a subset (#6549)
The work here is a lightly-edited copy-paste of the corresponding results for Lie submodules

2021-03-05 11:27:59 d90448c
chore(linear_algebra/*): changes to finsupp_vectorspaces and move module doc dual (#6516)
This PR does the following:
- move the module doc of `linear_algebra.dual` so that it is recognised by the linter.
- add `ker_eq_bot_iff_range_eq_top_of_findim_eq_findim` to `linear_algebra.finite_dimensional`, this replaces `injective_of_surjective` in `linear_algebra.finsupp_vectorspaces`
- remove `eq_bot_iff_dim_eq_zero` from `linear_algebra.finsupp_vectorspaces`, this already exists as `dim_eq_zero` in `linear_algebra.finite_dimensional`
- changed `cardinal_mk_eq_cardinal_mk_field_pow_dim` and `cardinal_lt_omega_of_dim_lt_omega` to assume `finite_dimensional K V` instead of `dim < omega`.
- renamed `cardinal_lt_omega_of_dim_lt_omega` to `cardinal_lt_omega_of_finite_dimensional` since the assumption changed.
- provided a module doc for `linear_algebra.finsupp_vectorspaces` which should remove `linear_algebra.*` from the style exceptions file.
This file should probably be looked at again by someone more experienced in the linear_algebra part of the library. It seems to me that most of the statements in this file in fact would better fit in other files.

2021-03-05 08:42:35 c782e28
chore(analysis/normed_space/units): add `protected`, minor review (#6544)

2021-03-05 08:42:34 f158f25
feat(data/mv_polynomial/basic): add is_scalar_tower and smul_comm_class instances (#6542)
This also fixes the `semimodule` instance to not require `comm_semiring R`

2021-03-05 05:37:32 340dd69
fix(*): remove some simp lemmas (#6541)
All of these simp lemmas are also declared in core. 
Maybe one of the copies can be removed in a future PR, but this PR is just to remove the duplicate simp attributes.
This is part of fixing linting problems in core, done in leanprover-community/lean#545. 
Most of the duplicate simp lemmas are fixed in `core`, but I prefer to remove the simp attribute here in mathlib if the simp lemmas were already used in core.

2021-03-05 04:34:20 990a5bb
chore(analysis/normed_space/extend): remove unnecessary imports (#6538)
Remove two imports.  `import analysis.complex.basic` is actually unnecessary, `import analysis.normed_space.operator_norm` is indirectly imported via `data.complex.is_R_or_C`.

2021-03-05 02:26:15 10aaddd
chore(scripts): update nolints.txt (#6543)
I am happy to remove some nolints for you!

2021-03-05 00:23:57 d2cc044
chore(algebra/algebra/basic): add a missing coe lemma (#6535)
This is just to stop the terrible pain of having to work with `⇑(e.to_ring_equiv) x` in goals.
In the long run, we should sort out the simp normal form, but for now I just want to stop the pain.

2021-03-04 21:18:05 ef1a00b
feat(data/finsupp, algebra/monoid_algebra): add is_scalar_tower and smul_comm_class (#6534)
This stops just short of transferring these instances to `polynomial` and `mv_polynomial`.

2021-03-04 21:18:04 0dfba50
feat(algebra/algebra/basic): alg_equiv.of_linear_equiv (#6495)

2021-03-04 21:18:02 744e79c
feat(algebra/ordered_*, */sub{monoid,group,ring,semiring,field,algebra}): pullback of ordered algebraic structures under an injective map (#6489)
Prove that the following 14 order typeclasses can be pulled back via an injective map (`function.injective.*`), and use them to attach 30 new instances to sub-objects:
* `ordered_comm_monoid` (and the implied `ordered_add_comm_monoid`)
  * `submonoid.to_ordered_comm_monoid`
  * `submodule.to_ordered_add_comm_monoid`
* `ordered_comm_group` (and the implied `ordered_add_comm_group`)
  * `subgroup.to_ordered_comm_group`
  * `submodule.to_ordered_add_comm_group`
* `ordered_cancel_comm_monoid` (and the implied `ordered_cancel_add_comm_monoid`)
  * `submonoid.to_ordered_cancel_comm_monoid`
  * `submodule.to_ordered_cancel_add_comm_monoid`
* `linear_ordered_cancel_comm_monoid` (and the implied `linear_ordered_cancel_add_comm_monoid`)
  * `submonoid.to_linear_ordered_cancel_comm_monoid`
  *  `submodule.to_linear_ordered_cancel_add_comm_monoid`
* `linear_ordered_comm_monoid_with_zero`
  * (no suitable subobject exists for monoid_with_zero)
* `linear_ordered_comm_group` (and the implied `linear_ordered_add_comm_group`)
  * `subgroup.to_linear_ordered_comm_group`
  * `submodule.to_linear_ordered_add_comm_group`
* `ordered_semiring`
  * `subsemiring.to_ordered_semiring`
  * `subalgebra.to_ordered_semiring`
* `ordered_comm_semiring`
  * `subsemiring.to_ordered_comm_semiring`
  * `subalgebra.to_ordered_comm_semiring`
* `ordered_ring`
  * `subring.to_ordered_ring`
  * `subalgebra.to_ordered_ring`
* `ordered_comm_ring`
  * `subring.to_ordered_comm_ring`
  * `subalgebra.to_ordered_comm_ring`
* `linear_ordered_semiring`
  * `subring.to_linear_ordered_semiring`
  * `subalgebra.to_linear_ordered_semiring`
* `linear_ordered_ring`
  * `subring.to_linear_ordered_ring`
  * `subalgebra.to_linear_ordered_ring`
* `linear_ordered_comm_ring`
  * `subring.to_linear_ordered_comm_ring`
  * `subalgebra.to_linear_ordered_comm_ring`
* `linear_ordered_field`
  * `subfield.to_linear_ordered_field`
Zulip:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/rings.20from.20subtype

2021-03-04 21:18:00 09273ae
feat(measure_theory/probability_mass_function): Generalize bind on pmfs to binding on the support (#6210)

2021-03-04 17:49:12 8c72ca3
feat(data/mv_polynomial/basic): a polynomial ring over an R-algebra is also an R-algebra (#6533)

2021-03-04 17:49:11 84f4d5c
feat(order/zorn): nonempty formulation of Zorn's lemma (#6532)
In practice it's often helpful to have this alternate formulation of Zorn's lemma

2021-03-04 17:49:10 dbddee6
feat(topology/continuous_on): add `set.left_inv_on.map_nhds_within_eq` (#6529)
Also add some trivial lemmas to `data/set/function` and
`order/filter/basic`.

2021-03-04 17:49:09 0690d97
feat(bounded_continuous_function): norm_lt_of_compact (#6524)

2021-03-04 17:49:08 10d2e70
feat(order/lattice): "algebraic" constructors for (semi-)lattices (#6460)
I also added a module doc string for `order/lattice.lean`.

2021-03-04 16:01:55 1cc59b9
feat(set_theory/cardinal, data/nat/fincard): Define `nat`- and `enat`-valued cardinalities (#6494)
Defines `cardinal.to_nat` and `cardinal.to_enat`
Uses those to define `nat.card` and `enat.card`

2021-03-04 14:43:48 9607dbd
feat(analysis/convex): linear image of segment (#6531)

2021-03-04 14:43:47 a8d285c
feat(algebra/direct_sum_graded): endow `direct_sum` with a ring structure (#6053)
To quote the module docstring
> This module provides a set of heterogenous typeclasses for defining a multiplicative structure
> over `⨁ i, A i` such that `(*) : A i → A j → A (i + j)`; that is to say, `A` forms an
> additively-graded ring. The typeclasses are:
> 
> * `direct_sum.ghas_one A`
> * `direct_sum.ghas_mul A`
> * `direct_sum.gmonoid A`
> * `direct_sum.gcomm_monoid A`
> 
> Respectively, these imbue the direct sum `⨁ i, A i` with:
> 
> * `has_one`
> * `mul_zero_class`, `distrib`
> * `semiring`, `ring`
> * `comm_semiring`, `comm_ring`
>
> Additionally, this module provides helper functions to construct `gmonoid` and `gcomm_monoid`
> instances for:
> 
> * `A : ι → submonoid S`: `direct_sum.ghas_one.of_submonoids`, `direct_sum.ghas_mul.of_submonoids`,
>   `direct_sum.gmonoid.of_submonoids`, `direct_sum.gcomm_monoid.of_submonoids`
> * `A : ι → submonoid S`: `direct_sum.ghas_one.of_subgroups`, `direct_sum.ghas_mul.of_subgroups`,
>   `direct_sum.gmonoid.of_subgroups`, `direct_sum.gcomm_monoid.of_subgroups`
> 
> If the `A i` are disjoint, these provide a gradation of `⨆ i, A i`, and the mapping
> `⨁ i, A i →+ ⨆ i, A i` can be obtained as
> `direct_sum.to_monoid (λ i, add_submonoid.inclusion $ le_supr A i)`.

2021-03-04 13:58:56 edbbecb
doc(group_theory/sylow): module doc (#6477)
This PR provides the last module doc which was missing from `group_theory`, namely that for `sylow`.

2021-03-04 11:33:23 d32bb6e
feat(data/finsupp/basic): add support_nonempty_iff and nonzero_iff_exists (#6530)
Add two lemmas to work with `finsupp`s with non-empty support.
Zulip:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/finsupp.2Enonzero_iff_exists

2021-03-04 11:33:22 ca96bfb
feat(linear_algebra/clifford_algebra): add definitions of the conjugation operators and some API (#6491)
This also replaces the file with a directory, to avoid monstrous files from developing.

2021-03-04 11:33:21 deb3d45
feat(data/mv_polynomial/equiv): generalize ring_equiv_congr (#6420)
Following the discussion in #6324, I have modified `mv_polynomial.ring_equiv_of_equiv` and `mv_polynomial.ring_equiv_congr`, that are now called `ring_equiv_congr_left` and `ring_equiv_congr_left`: both are proved as special cases of `ring_equiv_congr` (the situation for algebras is exactly the same).
This has the side effect that the lemmas automatically generated by `@[simps]` are not in a good form (see for example the lemma `mv_polynomial.alg_equiv_congr_left_apply ` in the current mathlib, where there is an unwanted `alg_equiv.refl.to_ring_equiv`). To avoid this I deleted the `@[simps]` and I wrote the lemmas by hand (also correcting the problem with `mv_polynomial.alg_equiv_congr_left_apply`). I probably don't understand completely `@[simps]`, since I had to manually modified some other proofs that no longer worked (I mean, I had to do something more that just using the new names).
If there is some `simp` lemma I forgot I would be happy to write it.

2021-03-04 08:43:30 3329ec4
chore(topology/algebra/*): tendsto namespacing (#6528)
Correct a few lemmas which I noticed were namespaced as `tendsto.***` rather than `filter.tendsto.***`, and thus couldn't be used with projection notation.
Also use the projection notation, where now permitted.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Search.20for.20all.20declarations.20in.20a.20namespace)

2021-03-04 08:43:29 76aee25
refactor(big_operators/basic): move prod_mul_prod_compl (#6526)
Several lemmas were unnecessarily in `src/data/fintype/card.lean`, and I've relocated them to `src/algebra/big_operators/basic.lean`.

2021-03-04 08:43:28 d7fa1bc
feat(topology/instances/real): generalize 'compact_space I' to 'compact_space (Icc a b)' (#6523)

2021-03-04 08:43:27 2f35779
chore(*/sub*): tidy up inherited algebraic structures from parent objects (#6509)
This changes `subfield.to_field` to ensure that division is defeq.
It also removes `subring.subset_comm_ring` which was identical to `subring.to_comm_ring`, renames some `subalgebra` instances to match those of `subring`s, and cleans up a few related proofs that relied on the old names.
These are cleanups split from #6489, which failed CI but was otherwise approved

2021-03-04 07:49:34 f4db322
feat(category_theory/subobject): factoring morphisms through subobjects (#6302)
The predicate `h : P.factors f`, for `P : subobject Y` and `f : X ⟶ Y`
asserts the existence of some `P.factor_thru f : X ⟶ (P : C)` making the obvious diagram commute.
We provide conditions for `P.factors f`, when `P` is a kernel/equalizer/image/inf/sup subobject.

2021-03-04 02:11:25 8289518
feat(algebra/star): the Bell/CHSH/Tsirelson inequalities (#4687)

2021-03-04 01:15:55 2837807
chore(scripts): update nolints.txt (#6527)
I am happy to remove some nolints for you!

2021-03-03 13:41:37 3c9399d
chore(algebra/ordered_group): put to_additive on lemmas about linear_ordered_comm_group (#6506)
No lemmas are added or renamed for the additive version, this just adds lemmas (and more importantly instances) for the multiplicative version.
This:
* Adds missing `ancestor` attributes to `linear_ordered_add_comm_group` and `linear_ordered_comm_group`, which are needed to make `to_additive` work correctly on `to_add_comm_group` and `to_comm_group`
* Adds multiplicative versions of:
  * `sub_le_self_iff` (`div_le_self_iff`)
  * `sub_lt_self_iff` (`div_lt_self_iff `)
  * `linear_ordered_add_comm_group.to_linear_ordered_cancel_add_comm_monoid` (`linear_ordered_comm_group.to_linear_ordered_cancel_comm_monoid`)
  * `linear_ordered_add_comm_group.add_lt_add_left` (`linear_ordered_comm_group.mul_lt_mul_left'`)
  * `min_neg_neg` (`min_inv_inv'`)
  * `max_neg_neg` (`max_inv_inv'`)
  * `min_sub_sub_right` (`min_div_div_right'`)
  * `min_sub_sub_left` (`min_div_div_left'`)
  * `max_sub_sub_right` (`max_div_div_right'`)
  * `max_sub_sub_left` (`max_div_div_left'`)
  * `max_zero_sub_eq_self` (`max_one_div_eq_self'`)
  * `eq_zero_of_neg_eq` (`eq_one_of_inv_eq'`)
  * `exists_zero_lt` (`exists_one_lt'`)

2021-03-03 13:41:37 d4ac4c3
feat(data/list/basic): add `list.prod_eq_zero(_iff)` (#6504)
API changes:
* add `list.prod_eq_zero`, `list.prod_eq_zero_iff`, ;
* lemmas `list.prod_ne_zero`, `multiset.prod_ne_zero`, `polynomial.root_list_prod`, `polynomial.roots_multiset_prod`, `polynomial.nat_degree_multiset_prod`,  now assume `0 ∉ L` (or `0 ∉ m`/`0 ∉ s`) instead of `∀ x ∈ L, x ≠ 0`

2021-03-03 13:41:36 a852bf4
feat(data/equiv/fin): fin_add_flip and fin_rotate (#6454)
Add
* `fin_add_flip : fin (m + n) ≃ fin (n + m)`
* `fin_rotate : Π n, fin n ≃ fin n` (acts by +1 mod n)
and simp lemmas, and shows `fin.snoc` is a rotation of `fin.cons`.

2021-03-03 10:36:54 9c48eb1
chore(ring_theory/{subring,integral_closure}): simplify a proof, remove redundant instances (#6513)

2021-03-03 10:36:53 eec54d0
feat(algebra/field): add function.injective.field (#6511)
We already have defs of this style for all sorts of algebraic constructions, why not one more.

2021-03-03 10:36:52 3309ce2
refactor(ring_theory/polynomial/chebyshev): move lemmas around (#6510)
As discussed in #6501, split up the old file `ring_theory.polynomial.chebyshev.basic`, moving half its contents to `ring_theory.polynomial.chebyshev.defs` and the other half to `ring_theory.polynomial.chebyshev.dickson`.

2021-03-03 07:35:46 383dd2b
chore(data/equiv): add missing simp lemmas about mk (#6505)
This adds missing `mk_coe` lemmas, and new `symm_mk`, `symm_bijective`, and `mk_coe'` lemmas.

2021-03-02 23:24:10 22e3437
feat(algebra/big_operators/basic): lemmas prod_range_add, sum_range_add (#6484)

2021-03-02 22:25:31 19ed0f8
refactor(ring_theory/valuation): valuations in `linear_ordered_comm_monoid_with_zero` (#6500)
Generalizes the value group in a `valuation` to a `linear_ordered_comm_monoid_with_zero`

2021-03-02 19:27:12 0c5b517
feat(ring_theory/polynomial/chebyshev/basic): multiplication of Chebyshev polynomials (#6501)
Add the identity for multiplication of Chebyshev polynomials,
```lean
2 * chebyshev₁ R m * chebyshev₁ R (m + k) = chebyshev₁ R (2 * m + k) + chebyshev₁ R k
```
Use this to give a direct proof of the identity `chebyshev₁_mul` for composition of Chebyshev polynomials, replacing the current proof using trig functions.  This means that the import `import analysis.special_functions.trigonometric` to the Chebyshev file can be removed.

2021-03-02 19:27:11 0c863e9
refactor(data/set/finite): change type of `set.finite.dependent_image` (#6475)
The old lemma combined a statement similar to `set.finite.image` with
`set.finite.subset`. The new statement is a direct generalization of
`set.finite.image`.

2021-03-02 16:36:18 c087011
refactor(data/set/finite): make `finite` argument of `set.finite.mem_to_finset` explicit (#6508)
This way we can use dot notation.

2021-03-02 15:26:34 9f0f05e
feat(data/{nat,int}/parity): even_mul_succ_self (#6507)

2021-03-02 08:23:47 6b5e48d
feat(data/finset/lattice): +2 induction principles for `finset`s (#6502)

2021-03-02 06:06:52 572f727
chore(algebra/big_operators): use weaker typeclass assumptions (#6503)

2021-03-02 04:20:01 c69c8a9
chore(scripts): update nolints.txt (#6499)
I am happy to remove some nolints for you!

2021-03-02 02:22:47 f63069f
feat(linear_algebra/basic): simp lemmas about endomorphisms (#6452)
Also renames some lemmas:
* `linear_map.one_app` has been renamed to `linear_map.one_apply`
* `linear_map.mul_app` has been removed in favour of the existing `linear_map.mul_app`.

2021-03-02 02:22:45 5c01613
feat(analysis/special_functions/integrals): some simple integration lemmas (#6216)
Integration of some simple functions, including `sin`, `cos`, `pow`, and `inv`. @ADedecker and I are working on the integrals of some more intricate functions, which we hope to add in a subsequent (series of) PR(s).
With this PR, simple integrals are now computable by `norm_num`. Here are some examples:
```
import analysis.special_functions.integrals
open real interval_integral
open_locale real
example : ∫ x in 0..π, sin x = 2 := by norm_num
example : ∫ x in 0..π/4, cos x = sqrt 2 / 2 := by simp
example : ∫ x:ℝ in 2..4, x^(3:ℕ) = 60 := by norm_num
example : ∫ x in 0..2, -exp x = 1 - exp 2 := by simp
example : ∫ x:ℝ in (-1)..4, x = 15/2 := by norm_num
example : ∫ x:ℝ in 8..11, (1:ℝ) = 3 := by norm_num
example : ∫ x:ℝ in 2..3, x⁻¹ = log (3/2) := by norm_num
example : ∫ x:ℝ in 0..1, 1 / (1 + x^2) = π/4 := by simp
```
`integral_deriv_eq_sub'` courtesy of @gebner.

2021-03-02 00:24:51 5eb7ebb
feat(data/polynomial): lemmas about polynomial derivative (#6433)

2021-03-01 21:31:43 0334475
ci(scripts/detect_errors): try to show info messages in a way github understands (#6493)
I don't actually know if this works, but I know that the previous code was not working:
https://github.com/leanprover-community/mathlib/pull/6485/checks?check_run_id=2006396264#step:7:7

2021-03-01 21:31:42 0a5f69c
feat(src/order/basic): show injectivity of order conversions, and tag lemmas with ext (#6490)
Stating these as `function.injective` provides slightly more API, especially since before only the composition was proven as injective.
For convenience, this leaves behind `preorder.ext`, `partial_order.ext`, and `linear_order.ext`, although these are now provable with trivial applications of `ext`.

2021-03-01 21:31:41 cc57915
chore(data/equiv/basic): add simp lemmas about subtype_equiv (#6479)

2021-03-01 21:31:40 354fda0
feat(linear_algebra/finsupp): add mem_span_set (#6457)
From the doc-string:
If `m ∈ M` is contained in the `R`-submodule spanned by a set `s ⊆ M`, then we can write
`m` as a finite `R`-linear combination of elements of `s`.
The implementation uses `finsupp.sum`.
The initial proof was a substantial simplification of mine, due to Kevin Buzzard.  The final one is due to Eric Wieser.
Zulip discussion for the proof:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/submodule.2Espan.20as_sum
Zulip discussion for the universe issue:
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/universe.20issue.20with.20.60Type*.60

2021-03-01 21:31:39 e0a4dd8
feat(ring_theory/finiteness): improve API for finite presentation (#6382)
Improve the API for finitely presented morphism. I changed the name from `algebra.finitely_presented` to `algebra.finite_presentation` that seems more coherent with the other names.
Coming soon: transitivity of finite presentation.

2021-03-01 18:58:11 0faa788
feat(ring_theory/hahn_series): introduce ring of Hahn series (#6237)
Defines Hahn series
Provides basic algebraic structure on Hahn series, up to `comm_ring`.

2021-03-01 15:40:36 e77f071
feat(linear_algebra/{clifford,exterior,tensor}_algebra): add induction principles (#6416)
These are closely derived from the induction principle for the free algebra.
I can't think of a good way to deduplicate them, so for now I've added comments making it clear to the reader that the code is largely copied.

2021-03-01 10:35:11 aff6bd1
fix(group_action/defs): make mul_action.regular an instance (#6241)
This is essentially already an instance via `semiring.to_semimodule.to_distrib_mul_action.to_mul_action`, but with an unecessary `semiring R` constraint.
I can't remember the details, but I've run into multiple instance resolution issues in the past that were resolved with `local attribute [instance] mul_action.regular`.
This also renames the instance to `monoid.to_mul_action` for consistency with `semiring.to_semimodule`.

2021-03-01 04:31:52 6ac19b4
doc(algebra/ring/basic): change pullback and injective to pushforward and surjective (#6487)
Zulip reference:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/pullback.20vs.20pushforward

2021-03-01 01:14:26 9ad469d
chore(scripts): update nolints.txt (#6486)
I am happy to remove some nolints for you!

2021-02-28 22:54:58 13f30e5
feat(geometry/manifold): `ext_chart_at` is smooth on its source (#6473)

2021-02-28 22:54:57 83bc663
feat(category_theory/monoidal): skeleton of a monoidal category is a monoid (#6444)

2021-02-28 22:54:56 1e45472
feat(analysis/calculus): Lagrange multipliers (#6431)

2021-02-28 20:56:20 18804b2
chore(category/equivalence): remove functor.fun_inv_id (#6450)
`F.fun_inv_id` was just a confusing alternative way to write `F.as_equivalence.unit_iso.symm`, and meant that many lemmas couldn't fire.
Deletes the definitions `functor.fun_inv_id` and `functor.inv_hom_id`, and the lemmas `is_equivalence.functor_unit_comp` and `is_equivalence.inv_fun_id_inv_comp`.

2021-02-28 20:56:19 ac3c478
feat(archive/100-theorems-list/9_area_of_a_circle): area of a disc (#6374)
Freek № 9: The area of a disc with radius _r_ is _πr²_.
Also included are an `of_le` version of [FTC-2 for the open set](https://leanprover-community.github.io/mathlib_docs/find/interval_integral.integral_eq_sub_of_has_deriv_at') and the definition `nnreal.pi`.
Co-authored by @asouther4  and @jamesa9283.

2021-02-28 17:40:43 b181866
feat(data/set): more lemmas (#6474)

2021-02-28 10:49:48 ef5c1d5
feat(analysis/special_functions/pow): smoothness of `complex.cpow` (#6447)
* `x ^ y` is smooth in both variables at `(x, y)`, if `0 < re x` or
  `im x ≠ 0`;
* `x ^ y` is smooth in `y` if `x ≠ 0` or `y ≠ 0`.

2021-02-28 07:50:15 abb3121
chore(*): more line lengths (#6472)

2021-02-28 04:58:12 f153a85
chore(category_theory/*): fix long lines (#6471)

2021-02-28 04:58:11 c7a2d67
refactor(analysis/calculus/specific_functions): add params to `smooth_bump_function` (#6467)
In the construction of a partition of unity we need a smooth bump
function that vanishes outside of `ball x R` and equals one on
`closed_ball x r` with arbitrary `0 < r < R`.

2021-02-28 04:58:10 cc3e2c7
feat(linear_algebra/basic): f x ∈ submodule.span R (f '' s) (#6453)

2021-02-28 01:58:42 ee1947d
chore(scripts): update nolints.txt (#6468)
I am happy to remove some nolints for you!

2021-02-28 01:58:42 5b18369
feat(ring_theory/power_series): coeff multiplication lemmas (#6462)
Some lemmas used in combinatorics, from #4259.

2021-02-28 01:58:41 11f1801
feat(linear_algebra/quadratic_form): add associated_eq_self_apply (#6458)

2021-02-28 01:58:40 9668bdd
feat(algebra/category/Mon/adjunctions): adjoin_unit adjunction from Semigroup (#6440)
This PR provides the adjoin_unit-forgetful adjunction between `Semigroup` and `Mon` and additionally the second to last module doc in algebra, namely `algebra.group.with_one`.

2021-02-27 23:21:06 09d572d
feat(algebra/big_operators): additive versions of multiset lemmas (#6463)

2021-02-27 19:21:16 aa0b274
chore(*): split lines and move module doc `measure_theory/category/Meas` (#6459)

2021-02-27 19:21:15 d1b7a67
feat(ring_theory/power_series/basic): coeff_zero_X_mul (#6445)

2021-02-27 16:06:18 a19af60
feat(data/option): add `option.forall` and `option.exists` (#6419)

2021-02-27 12:58:12 4b02853
feat(tactic/apply_fun): work on the goal as well (#6439)
Extend the functionality of `apply_fun`, to "apply" functions to inequalities in the goal, as well.
```
Apply a function to an equality or inequality in either a local hypothesis or the goal.
* If we have `h : a = b`, then `apply_fun f at h` will replace this with `h : f a = f b`.
* If we have `h : a ≤ b`, then `apply_fun f at h` will replace this with `h : f a ≤ f b`,
  and create a subsidiary goal `monotone f`.
  `apply_fun` will automatically attempt to discharge this subsidiary goal using `mono`,
  or an explicit solution can be provided with `apply_fun f at h using P`, where `P : monotone f`.
* If the goal is `a ≠ b`, `apply_fun f` will replace this with `f a ≠ f b`.
* If the goal is `a = b`, `apply_fun f` will replace this with `f a = f b`,
  and create a subsidiary goal `injective f`.
  `apply_fun` will automatically attempt to discharge this subsidiary goal using local hypotheses,
  or if `f` is actually an `equiv`,
  or an explicit solution can be provided with `apply_fun f using P`, where `P : injective f`.
* If the goal is `a ≤ b` (or similarly for `a < b`), and `f` is actually an `order_iso`,
  `apply_fun f` will replace the goal with `f a ≤ f b`.
  If `f` is anything else (e.g. just a function, or an `equiv`), `apply_fun` will fail.
```

2021-02-27 09:13:13 7256361
chore(data/nat/choose): fix namespace of theorems (#6451)

2021-02-27 09:13:12 5f68d0e
feat(ring_theory/power_series/basic): rescale_inj (#6446)
Authored-by Ashvni Narayanan

2021-02-27 09:13:11 f33418a
feat(algebra/homology/chain_complex): pushforward of complex w.r.t. additive functor (#6403)
This PR adds a definition for the pushforward of a homological complex with respect to an additive functor.

2021-02-27 06:20:12 7ce01bb
feat(category_theory/skeletal): skeleton of a general category (#6443)
Construct the skeleton of a category using choice.

2021-02-27 01:15:38 1af882b
chore(scripts): update nolints.txt (#6449)
I am happy to remove some nolints for you!

2021-02-26 23:38:23 d38b5a5
feat(category_theory/monoidal): construct the monoidal inverse to a functor (#6442)
I worked out what was mentioned here: https://github.com/leanprover-community/mathlib/blob/20b49fbd453fc42c91c36ee30ecb512d70f48172/src/category_theory/monoidal/transport.lean#L283-L287
except for uniqueness, not sure how important that is

2021-02-26 21:29:04 a225e12
feat(linear_algebra/basic): add is_scalar_tower instance for hom type (#6331)
This instance tells Lean that if R is an S-algebra with R and S both commutative semirings, then the R-action on Hom_R(M,N) is compatible with the S-action.
`linear_map.is_scalar_tower_extend_scalars` is just a special case of this new instance with the `smul_comm_class` arguments populated with `is_scalar_tower.to_smul_comm_class` and `smul_comm_class_self`, so has been removed.

2021-02-26 20:32:43 407615e
feat(algebra/lie/solvable): images of solvable Lie algebras are solvable (#6413)
Summary of changes:
New definition:
 - `lie_hom.range_restrict`
New lemmas:
 - `lie_ideal.derived_series_map_eq`
 - `function.surjective.lie_algebra_is_solvable`
 - `lie_algebra.solvable_iff_equiv_solvable`
 - `lie_hom.is_solvable_range`
 - `lie_hom.mem_range_self`
 - `lie_hom.range_restrict_apply`
 - `lie_hom.surjective_range_restrict`
Renamed lemmas:
 - `lie_algebra.is_solvable_of_injective` → `function.injective.lie_algebra_is_solvable`
 - `lie_ideal.derived_series_map_le_derived_series` → `lie_ideal.derived_series_map_le`

2021-02-26 19:47:44 ddefd96
feat(category_theory/subobject): kernels and images as subobjects (#6301)
Further work on subobjects,  building on the initial definition in #6278.
* Add noncomputable functions to obtain representatives of subobjects.
* Realise kernel/equalizer/image as subobjects.

2021-02-26 15:56:35 11e1cc3
feat(data/equiv/basic): Add `fin_succ_above_equiv` (#5145)

2021-02-26 13:13:36 20b49fb
feat(linear_algebra/tensor_product): allow different semirings in linear_map.flip (#6414)
This also means the `map_*₂` lemmas are more generally applicable to linear_maps over different rings, such as `linear_map.prod_equiv.to_linear_map`.
To avoid breakage, this leaves `mk₂ R` for when R is commutative, and introduces `mk₂' R S` for when two different rings are wanted.

2021-02-26 13:13:35 47b62ea
feat(algebra/big_operators): add lemmas about `sum` and `pi.single` (#6390)

2021-02-26 10:06:30 aeda3fb
feat(topology/instances/real, topology/metric_space/basic, algebra/floor): integers are a proper space (#6437)
The metric space `ℤ` is a proper space.  Also, under the coercion from `ℤ` to `ℝ`, inverse images of compact sets are finite.
The key point for both facts is to express the inverse image of an `ℝ`-interval under the coercion as an appropriate `ℤ`-interval, using floor or ceiling of the endpoints -- I provide these facts as simp-lemmas.
Indirectly related discussion:
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Finiteness.20of.20balls.20in.20the.20integers

2021-02-26 10:06:29 ff5fa52
chore(data/finsupp/basic): add coe_{neg,sub,smul} lemmas to match coe_{zero,add,fn_sum} (#6350)
This also:
* merges together `smul_apply'` and `smul_apply`, since the latter is just a special case of the former.
* changes the implicitness of arguments to all of the `finsupp.*_apply` lemmas so that all the variables and none of the types are explicit
The whitespace style here matches how `coe_add` is spaced.

2021-02-26 10:06:28 dd5363b
feat(algebraic_topology): introduce the simplex category (#6173)
* introduce `simplex_category`, with objects `nat` and morphisms `n ⟶ m` order-preserving maps from `fin (n+1)` to `fin (m+1)`.
* prove the simplicial identities
* show the category is equivalent to `NonemptyFinLinOrd`
This is the start of simplicial sets, moving and completing some of the material from @jcommelin's `sset` branch. Dold-Kan is the obvious objective; apparently we're going to need it for `lean-liquid` at some point.
The proofs of the simplicial identities are bad and slow. They involve extravagant use of nonterminal simp (`simp?` doesn't seem to give good answers) and lots of `linarith` bashing. Help welcome, especially if you love playing with inequalities in `nat` involving lots of `-1`s.

2021-02-26 07:13:25 2f1de3f
feat(polynomial/eval): lemmas relating eval/map on numerals (#6438)

2021-02-26 07:13:24 300e81d
feat(analysis/complex/basic): complex conjugation is a linear isometry (#6436)
Complex conjugation is a linear isometry (and various corollaries, eg it is a continuous linear map).
Also rewrite the results that `re` and `im` are continuous linear maps, to deduce from explicit bounds rather than passing through `linear_map.continuous_of_finite_dimensional`.

2021-02-26 07:13:23 274042d
feat(data/polynomial): basic lemmas (#6434)

2021-02-26 07:13:22 cca22d7
feat(data/polynomial/degree/trailing_degree): Trailing degree of multiplication by X^n (#6425)
A lemma about the trailing degree of a shifted polynomial.
(this PR is part of the irreducibility saga)

2021-02-26 07:13:21 24ed74a
feat(algebra/category/Semigroup/basic): categories of magmas and semigroups (#6387)
This PR introduces the category of magmas and the category of semigroups, together with their additive versions.

2021-02-26 07:13:20 aafa5fe
feat(ring_theory/flat): definition of flat module (#6284)

2021-02-26 07:13:19 d451876
doc(data/finset/basic): rewrite finset module doc (#5893)

2021-02-26 04:07:32 07d6d3f
feat(algebra/algebra/basic): smul_mul_smul (#6423)
An identity for algebras.
(this PR is part of the irreducibility saga)

2021-02-26 04:07:31 0035e2d
chore(*): upgrade to Lean 3.27.0c (#6411)

2021-02-26 04:07:31 5fbebf6
fix(logic/{function}/basic): remove simp lemmas `function.injective.eq_iff` and `imp_iff_right` (#6402)
* `imp_iff_right` is a conditional simp lemma that matches a lot and should never successfully rewrite.
* `function.injective.eq_iff` is a conditional simp lemma that matches a lot and is rarely used. Since you almost always need to give the proof `hf : function.injective f` as an argument to `simp`, you can replace it with `hf.eq_iff`.

2021-02-26 03:21:37 0938880
chore(scripts): update nolints.txt (#6432)
I am happy to remove some nolints for you!

2021-02-26 00:42:52 521b821
feat(data/polynomial/basic): monomial_left_inj (#6430)
A version of `finsupp.single_left_inj` for monomials, so that it works with `rw.`
(this PR is part of the irreducibility saga)

2021-02-26 00:42:51 84ca016
feat(data/polynomial/coeff): Alternate form of coeff_mul_X_pow (#6424)
An `ite`-version of `coeff_mul_X_pow` that sometimes works better with `rw`.
(this PR is part of the irreducibility saga)

2021-02-26 00:42:50 49d2191
feat(data/polynomial/basic): monomial_neg (#6422)
The monomial of a negation is the negation of the monomial.
(this PR is part of the irreducibility saga)

2021-02-26 00:42:49 f34fa5f
feat(algebra/algebra/subalgebra): use opt_param for redundant axioms (#6417)

2021-02-26 00:42:48 9d5088a
feat(linear_algebra/pi): add `linear_equiv.pi` (#6415)

2021-02-26 00:42:47 61028ed
chore(number_theory/bernoulli): use factorial notation (#6412)

2021-02-26 00:42:46 2755939
feat(data/pnat/basic): add induction principle (#6410)
An induction principle for `pnat`.  The proof is by Mario Carneiro.  If there are mistakes, I introduced them!
Zulip discussion:
https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/torsion.20free/near/227748865

2021-02-26 00:42:45 6ed8b4b
feat(linear_algebra/finite_dimensional): lemmas for zero dimensional vector spaces (#6397)

2021-02-25 21:38:34 d496676
feat(geometry/manifold): manifold modelled on locally compact vector space is locally compact (#6394)
Also connect `locally_compact_space` to `filter.has_basis`.

2021-02-25 21:38:33 8770f5c
refactor(topology/subset_properties): more properties of `compact_covering` (#6328)
Modify the definition of `compact_covering α n` to ensure that it is monotone in `n`.
Also, in a locally compact space, prove the existence of a compact exhaustion, i.e. a sequence which satisfies the properties for `compact_covering` and in which, moreover, the interior of the next set includes the previous set.

2021-02-25 15:43:34 85b5d5c
refactor(logic/basic): turn *_prop_of_* into congr lemma (#6406)
Alternative solution to the exists part of #6404.

2021-02-25 09:50:19 e3ae6cd
feat(data/equiv/basic): lemmas about images and preimages (#6398)

2021-02-25 07:29:30 56f2c05
chore(algebra/regular): rename lemma is_regular_of_cancel_monoid_with_zero to is_regular_of_ne_zero (#6408)
Change the name of lemma is_regular_of_cancel_monoid_with_zero to the shorter is_regular_of_ne_zero.
Zulip reference:
https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics

2021-02-25 04:10:42 4b6680a
chore(scripts): update nolints.txt (#6407)
I am happy to remove some nolints for you!

2021-02-25 04:10:41 caed841
feat(order/complete_lattice): add complete_lattice.independent.disjoint{_Sup,} (#6405)

2021-02-25 04:10:40 9d748f0
feat(data/finset/basic): mem_map_equiv (#6399)
This adds a version of `mem_map` specialized to equivs, which has a better simp-nf.

2021-02-25 04:10:39 eba9be5
feat(ring_theory/power_series/basic): remove const coeff (#6383)
This shows that we can factor out X when the constant coefficient is removed from a power series.

2021-02-25 04:10:38 a31d06a
feat(data/zmod/basic): Explicitly state computable right_inverses instead of just surjectivity (#5797)

2021-02-25 00:30:10 a518fb8
feat(data/list/basic): take_init, take_eq_nil (#6380)

2021-02-24 22:06:41 e66e136
feat(data/mv_polynomial/basic): add two equivs (#6324)
Two small lemma about `mv_polynomial` as `R`-algebra.

2021-02-24 21:08:03 ead4731
feat(geometry/manifold): `model_with_corners` is a `closed_embedding` (#6393)

2021-02-24 21:08:02 27b6110
feat(algebra/lie/cartan_subalgebra): define Cartan subalgebras (#6385)
We do this via the normalizer of a Lie subalgebra, which is also defined here.

2021-02-24 17:52:02 25ea499
feat(data/multiset/basic): subsingleton_equiv_apply' (#6400)

2021-02-24 17:52:00 6271fe5
fix(tactic/delta_instance): beta reduce type of instance (#6396)
The delta derive handler was creating instances that weren't beta reduced, which isn't a problem for type class inference but can be unexpected. @gebner fixed the line in doc-gen that assumed beta reduction, but we should also produce the expected instance in the first place.
Zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/doc-gen.20is.20failing

2021-02-24 15:23:35 3d9e790
fix(topology/metric_space/cau_seq_filter): remove non-terminal simp (#6401)

2021-02-24 11:31:20 12afc98
chore(data/matrix/basic): instances for unique, subsing, nontriv, coe (#6296)
This adds a coercion to the underlying scalar if the matrix is 1 x 1.

2021-02-24 09:53:02 85636f9
feat(data/complex|matrix): instances of star_ordered_ring and star_ordered_algebra (#4686)

2021-02-24 06:44:15 196c2a8
feat(topology/separation): a cont. function with a cont. left inverse is a closed embedding (#6329)

2021-02-24 03:38:57 9bad59c
chore(scripts): update nolints.txt (#6389)
I am happy to remove some nolints for you!

2021-02-24 03:38:56 4a391c9
fix(data/int/basic,category_theory/equivalence): use neg not minus in lemma names (#6384)

2021-02-24 03:38:55 358fdf2
feat(category_theory/abelian/additive_functor): Adds definition of additive functors (#6367)
This PR adds the basic definition of an additive functor.
See associated [zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Additive.20functors/near/227295322).

2021-02-24 00:38:48 b4d2ce4
chore(data/equiv/local_equiv,topology/local_homeomorph,data/set/function): review (#6306)
## `data/equiv/local_equiv`:
* move `local_equiv.inj_on` lemmas closer to each other, add missing lemmas;
* rename `local_equiv.bij_on_source` to `local_equiv.bij_on`;
* rename `local_equiv.inv_image_target_eq_souce` to `local_equiv.symm_image_target_eq_souce`;
## `data/set/function`
* add `set.inj_on.mem_of_mem_image`, `set.inj_on.mem_image_iff`, `set.inj_on.preimage_image_inter`;
* add `set.left_inv_on.image_image'` and `set.left_inv_on.image_image`;
* add `function.left_inverse.right_inv_on_range`;
* move `set.inj_on.inv_fun_on_image` to golf the proof;
## `topology/local_homeomorph`
* add lemmas like `local_homeomorph.inj_on`;
* golf the definition of `open_embedding.to_local_homeomorph`, make `f` explicit.

2021-02-23 21:11:54 387db0d
feat(data/real/sqrt): add continuity attributes (#6388)
I add continuity attributes to `continuous_sqrt` and `continuous.sqrt`.

2021-02-23 21:11:53 8cfada1
doc(measure_theory/interval_integral): move comment (#6386)

2021-02-23 21:11:52 2d51a44
feat(data/list/basic): nth_drop (#6381)

2021-02-23 21:11:50 63e7535
chore(group_theory/coset): right_coset additions and module doc (#6371)
This PR dualises two results from left_coset to right_coset and adds a module doc.

2021-02-23 17:14:41 750d117
feat(logic/basic): subsingleton_iff_forall_eq (#6379)

2021-02-23 17:14:40 59bf982
feat(algebra/lie/nilpotent): basic facts about nilpotent Lie algebras (#6378)

2021-02-23 17:14:39 4b22c39
feat(ring_theory/power_series/well_known): sum of power of exponentials (#6368)

2021-02-23 17:14:38 e3d6cf8
feat(measure_theory/integration): add theorems about the product of independent random variables (#6106)
Consider the integral of the product of two random variables. Two random variables are independent if the preimage of all measurable sets are independent variables. Alternatively, if there is a pair of independent measurable spaces (as sigma algebras are independent), then two random variables are independent if they are measurable with respect to them.

2021-02-23 14:09:45 f84f5b2
feat(category_theory/subobject): the semilattice_inf/sup of subobjects (#6278)
# The lattice of subobjects
We define `subobject X` as the quotient (by isomorphisms) of
`mono_over X := {f : over X // mono f.hom}`.
Here `mono_over X` is a thin category (a pair of objects has at most one morphism between them),
so we can think of it as a preorder. However as it is not skeletal, it is not a partial order.
We provide
* `def pullback [has_pullbacks C] (f : X ⟶ Y) : subobject Y ⥤ subobject X`
* `def map (f : X ⟶ Y) [mono f] : subobject X ⥤ subobject Y`
* `def «exists» [has_images C] (f : X ⟶ Y) : subobject X ⥤ subobject Y`
(each first at the level of `mono_over`), and prove their basic properties and relationships.
We also provide the `semilattice_inf_top (subobject X)` instance when `[has_pullback C]`,
and the `semilattice_inf (subobject X)` instance when `[has_images C] [has_finite_coproducts C]`.
## Notes
This development originally appeared in Bhavik Mehta's "Topos theory for Lean" repository,
and was ported to mathlib by Scott Morrison.

2021-02-23 14:09:44 7f46c81
feat(chain_complex): lemmas about eq_to_hom (#6250)
Adds two lemmas relating `eq_to_hom` to differentials and chain maps. Useful in the ubiquitous circumstance of having to apply identities in the index of a chain complex.
Also add some `@[reassoc]` tags for convenience.

2021-02-23 14:09:43 8d3efb7
feat(data/buffer/basic): read and to_buffer lemmas (#6048)

2021-02-23 10:52:40 391c90a
feat(logic/basic): subsingleton_of_forall_eq (#6376)

2021-02-23 10:52:39 e6d23d2
feat(ring_theory/power_series/basic): coeff_succ_X_mul (#6370)

2021-02-23 09:46:58 3ff9248
feat({group,ring}_theory/free_*): make free_ring.lift and free_comm_ring.lift equivs (#6364)
This also adds `free_ring.hom_ext` and `free_comm_ring.hom_ext`, and deduplicates the definitions of the two lifts by introducing `abelian_group.lift_monoid`.

2021-02-23 06:48:15 b7a7b3d
feat(algebra/regular): lemmas for powers of regular elements (#6356)
Prove that an element is (left/right-)regular iff a power of it is (left/right-)regular.

2021-02-23 06:48:15 ec36fc0
fix(data/set/finite): add decidable assumptions (#6264)
Yury's rule of thumb https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/classicalize/near/224871122 says that we should have decidable instances here, because the statements of the lemmas need them (rather than the proofs). I'm making this PR to see if anything breaks.

2021-02-23 06:48:14 680e8ed
feat(order/well_founded_set): defining `is_partially_well_ordered` to prove `is_wf.add` (#6226)
Defines `set.is_partially_well_ordered s`, equivalent to any infinite sequence to `s` contains an infinite monotone subsequence
Provides a basic API for `set.is_partially_well_ordered`
Proves `is_wf.add` and `is_wf.mul`

2021-02-23 05:21:51 5931c5c
lint(set_theory/ordinal): fix def/lemma (#6369)

2021-02-23 01:14:10 3c66fd1
chore(scripts): update nolints.txt (#6373)
I am happy to remove some nolints for you!

2021-02-22 21:32:01 7a91822
feat(data/fintype/intervals): Add set.finite lemmas for integer intervals (#6365)

2021-02-22 21:32:00 c038984
chore(data/equiv/*): add missing coercion lemmas for equivs (#6268)
This does not affect the simp-normal form.
This tries to make a lot of lemma names and statements more consistent:
* restates `linear_map.mk_apply` to be `linear_map.coe_mk` to match `monoid_hom.coe_mk`
* adds `linear_map.to_linear_map_eq_coe`
* adds the simp lemma `linear_map.coe_to_equiv`
* adds the simp lemma `linear_map.linear_map.coe_to_linear_map`
* adds the simp lemma `linear_map.to_fun_eq_coe`
* adds the missing `ancestor` attributes required to make `to_additive` work for things like `add_equiv.to_add_hom`
* restates `add_equiv.to_fun_apply` to be `add_equiv.to_fun_eq_coe`
* restates `add_equiv.to_equiv_apply` to be `add_equiv.coe_to_equiv`
* adds the simp lemma `add_equiv.coe_to_mul_hom`
* removes `add_equiv.to_add_monoid_hom_apply` since `add_equiv.coe_to_add_monoid_hom` is a shorter and more general statement
* restates `ring_equiv.to_fun_apply` to be `ring_equiv.to_fun_eq_coe`
* restates `ring_equiv.coe_mul_equiv` to be `ring_equiv.coe_to_mul_equiv`
* restates `ring_equiv.coe_add_equiv` to be `ring_equiv.coe_to_add_equiv`
* restates `ring_equiv.coe_ring_hom` to be `ring_equiv.coe_to_ring_hom`
* adds `ring_equiv.to_ring_hom_eq_coe`
* adds `ring_equiv.to_add_equiv_eq_coe`
* adds `ring_equiv.to_mul_equiv_eq_coe`

2021-02-22 18:48:55 283aaff
feat(ring_theory/power_series/well_known): power of exponential (#6330)
Co-authored by Fabian Kruse

2021-02-22 18:48:54 0fb6ada
chore(topology): move `exists_compact_superset`, drop assumption `t2_space` (#6327)
Also golf the proof of `is_compact.elim_finite_subcover_image`

2021-02-22 18:48:53 db00ee4
feat(ring_theory/polynomial/basic): add quotient_equiv_quotient_mv_polynomial (#6287)
I've added `quotient_equiv_quotient_mv_polynomial` that says that `(R/I)[x_i] ≃+* (R[x_i])/I` where `I` is an ideal of `R`. I've included also a version for `R`-algebras. The proof is very similar to the case of (one variable) polynomials.

2021-02-22 18:48:52 cc9d3ab
feat(algebra/module,linear_algebra): generalize `smul_eq_zero` (#6199)
Moves the theorem on division rings `smul_eq_zero` to a typeclass `no_zero_smul_divisors` with instances for the previously existing cases. The motivation for this change is that #6178 added another `smul_eq_zero`, which could be captured neatly as an instance of the typeclass.
I didn't spend a lot of time yet on figuring out all the necessary instances, first let's see whether this compiles.

2021-02-22 17:14:14 7abfbc9
doc(references.bib): add witt vector references and normalize (#6366)
Now that we're actually displaying these bib links we should pay more attention to them.
Two commits: one adds references for the Witt vector files, the other normalizes the bib file. We can drop the second if people don't care.

2021-02-22 17:14:13 70d7114
feat(nat/choose): lemmas regarding binomial coefficients (#6362)

2021-02-22 17:14:10 4daac66
chore(field_theory/mv_polynomial): generalised to comm_ring and module doc (#6341)
This PR generalises most of `field_theory/mv_polynomial` from polynomial rings over fields to polynomial rings over commutative rings. This is put into a separate file. 
Also renamed the field to K and did one tiny golf.

2021-02-22 14:12:42 6d2726c
feat(number_theory/bernoulli): definition and properties of Bernoulli numbers (#6363)

2021-02-22 14:12:41 46fb0d8
feat(big_operators/intervals): lemma on dependent double sum (#6361)

2021-02-22 14:12:40 12bb9ae
chore(linear_algebra/*): split lines and doc `direct_sum/tensor_product` (#6360)
This PR provides a short module doc to `direct_sum/tensor_product` (the file contains only one result). Furthermore, it splits lines in the `linear_algebra` folder.

2021-02-22 14:12:39 a10c19d
doc(group_theory/*): module docs for `quotient_group` and `presented_group` (#6358)

2021-02-22 14:12:38 590442a
feat(topology/subset_properties): locally finite family on a compact space is finite (#6352)

2021-02-22 14:12:37 120feb1
refactor(order/filter,topology): review API (#6347)
### Filters
* move old `filter.map_comap` to `filter.map_comap_of_mem`;
* add a new `filter.map_comap` that doesn't assume `range m ∈ f` but
  gives `map m (comap m f) = f ⊓ 𝓟 (range m)` instead of
  `map m (comap m f) = f`;
* add `filter.comap_le_comap_iff`, use it to golf a couple of proofs;
* move some lemmas using `filter.map_comap`/`filter.map_comap_of_mem`
  closure to these lemmas;
* use `function.injective m` instead of `∀ x y, m x = m y → x = y` in
  some lemmas;
* drop `filter.le_map_comap_of_surjective'`,
  `filter.map_comap_of_surjective'`, and
  `filter.le_map_comap_of_surjective`: the inequalities easily follow
  from equalities, and `filter.map_comap_of_surjective'` is just
  `filter.map_comap_of_mem`+`filter.mem_sets_of_superset`;
### Topology
* add `closed_embedding_subtype_coe`, `ennreal.open_embedding_coe`;
* drop `inducing_open`, `inducing_is_closed`, `embedding_open`, and
  `embedding_is_closed` replace them with `inducing.is_open_map` and
  `inducing.is_closed_map`;
* move old `inducing.map_nhds_eq` to `inducing.map_nhds_of_mem`, the
  new `inducing.map_nhds_eq` says `map f (𝓝 a) = 𝓝[range f] (f a)`;
* add `inducing.is_closed_iff`;
* move old `embedding.map_nhds_eq` to `embedding.map_nhds_of_mem`, the
  new `embedding.map_nhds_eq` says `map f (𝓝 a) = 𝓝[range f] (f a)`;
* add `open_embedding.map_nhds_eq`;
* change signature of `is_closed_induced_iff` to match other similar
  lemmas;
* move old `map_nhds_induced_eq` to `map_nhds_induced_of_mem`, the new
  `map_nhds_induced_eq` give `𝓝[range f] (f a)` instead of `𝓝 (f a)`.

2021-02-22 14:12:36 26e6d4c
feat(algebra/lie/{subalgebra,submodule}): grab bag of new lemmas (#6342)
I'm splitting these off from other work to simplify subsequent reviews.
Cosmetic changes aside, the following summarises what I am proposing:
New definitions:
 - `lie_subalgebra.of_le`
Definition tweaks:
 - `lie_hom.range` [use coercion instead of `lie_hom.to_linear_map`]
 - `lie_ideal.map` [factor through `submodule.map` to avoid dropping all the way down to `set.image`]
New lemmas:
 - `lie_ideal.coe_to_lie_subalgebra_to_submodule`
 - `lie_ideal.incl_range`
 - `lie_hom.ideal_range_eq_lie_span_range`
 - `lie_hom.is_ideal_morphism_iff`
 - `lie_subalgebra.mem_range`
 - `lie_subalgebra.mem_map`
 - `lie_subalgebra.mem_of_le`
 - `lie_subalgebra.of_le_eq_comap_incl`
 - `lie_subalgebra.exists_lie_ideal_coe_eq_iff`
 - `lie_subalgebra.exists_nested_lie_ideal_coe_eq_iff`
 - `submodule.exists_lie_submodule_coe_eq_iff`
 - `lie_submodule.coe_lie_span_submodule_eq_iff`
Deleted lemma:
 - `lie_hom.range_bracket`
New simp attributes:
 - `lie_subalgebra.mem_top`
 - `lie_submodule.mem_top`

2021-02-22 14:12:35 78eb83a
feat(linear_algebra/pi): add `pi.lsum` (#6335)

2021-02-22 14:12:34 aa730c6
feat(linear_algebra): a module has a unique submodule iff it has a unique element (#6281)
Also strengthens the related lemmas about subgroup and submonoid

2021-02-22 14:12:33 ffb6a58
feat(data/sigma/basic): add a more convenient ext lemma for equality of sigma types over subtypes (#6257)

2021-02-22 14:12:32 9d54837
feat(data/polynomial/degree): lemmas on nat_degree and behaviour under multiplication by constants (#6224)
These lemmas extend the API for nat_degree
I intend to use them to work with integrality statements

2021-02-22 10:42:24 87a021c
feat(data/quot): `quotient.rec_on_subsingleton` with implicit setoid (#6346)

2021-02-22 10:42:23 69b93fc
fix(data/finsupp/basic): delta-reduce the definition of coe_fn_injective (#6344)
Without this, `apply coe_fn_injective` leaves a messy goal that usually has to be `dsimp`ed in order to make progress with `rw`.
With this change, `dsimp` now fails as the goal is already fully delta-reduced.

2021-02-22 08:31:25 0e51976
feat(data/polynomial/reverse): Trailing degree is multiplicative (#6351)
Uses `polynomial.reverse` to prove that `nat_trailing_degree` behaves well under multiplication.

2021-02-22 06:58:33 a3d951b
feat(data/nat/digits): digits injective at fixed base (#6338)

2021-02-22 06:58:32 2b6dec0
feat(algebraic_geometry/prime_spectrum): specialization order (#6286)

2021-02-22 03:13:35 dc78177
chore(scripts): update nolints.txt (#6354)
I am happy to remove some nolints for you!

2021-02-22 03:13:34 2134d0c
feat(algebra/group_power/basic): `abs_lt_abs_of_sqr_lt_sqr` (#6277)
These lemmas are (almost) the converses of some of the lemmas I added in #5933.

2021-02-22 00:01:15 b8b8755
feat(data/list/basic): repeat injectivity (#6337)

2021-02-21 21:41:23 87f8db2
feat(data/dfinsupp): add coe lemmas (#6343)
These lemmas already exist for `finsupp`, let's add them for `dfinsupp` too.

2021-02-21 21:41:22 96ae2ad
docs(undergrad.yaml): recent changes (#6313)

2021-02-21 18:45:11 4355d17
chore(topology/order): drop an unneeded argument (#6345)
`closure_induced` doesn't need `f` to be injective.

2021-02-21 18:45:10 ab03ebe
feat(data/list/basic): drop_eq_nil_iff_le (#6336)
The iff version of a recently added lemma.

2021-02-21 15:22:22 473bb7d
feat(topology/locally_constant): basics on locally constant functions (#6192)
From `lean-liquid`

2021-02-21 06:06:38 f470cc6
feat(measure_theory/interval_integral): add simp attribute to `integral_const` (#6334)
By adding a `simp` attribute to `interval_integral.integral_const`, the likes of the following become possible:
```
import measure_theory.interval_integral
example : ∫ x:ℝ in 5..19, (12:ℝ) = 168 := by norm_num
```

2021-02-21 01:15:37 4d4c7bb
chore(scripts): update nolints.txt (#6332)
I am happy to remove some nolints for you!

2021-02-20 21:10:00 93d1760
chore(topology/bases): golf a proof (#6326)
Also add some supporting lemmas

2021-02-20 21:09:59 08ea23b
refactor(group_theory/free_*): remove API duplicated by lift, promote lift functions to equivs (#6311)
This removes:
* `free_group.to_group.to_fun` and `free_group.to_group`, as these are both subsumed by the stronger `lift`.
* `abelianization.hom_equiv` as this is now `abelianization.lift.symm`
* `free_abelian_group.hom_equiv` as this is now `free_abelian_group.lift.symm`

2021-02-20 17:42:12 dccc542
fix(algebra/group/pi): remove unnecessary add_monoid requirement from pi.single_zero (#6325)
Follows on from #6317

2021-02-20 17:42:11 f0aad50
feat(data/equiv/basic): injective iff injective after composing with equiv (#6283)

2021-02-20 17:42:10 ee8708e
feat(algebra/regular): define regular elements (#6282)
The goal of this PR is to start the API for regular elements.  The final goal is to talk about non-zero-divisors.
Zulip discussion:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/is_regular

2021-02-20 15:00:59 1855bd5
chore(*): split lines (#6323)

2021-02-20 11:52:21 ed55502
doc(algebraic_geometry/is_open_comap_C): add reference to Stacks project (#6322)
Updated the doc-strings to reference the Stacks project.
Zulip chat:
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/stacks.20tags

2021-02-20 11:52:20 52e2937
feat(topology): the currying homeomorphism (#6319)

2021-02-20 11:52:19 26d287c
doc(ring_theory/*): two module docs (#6318)
This PR provides module docs for `ring_theory.polynomial.scale_roots` as well as `ring_theory.multiplicity`. Furthermore, some lines are split in those two files.

2021-02-20 11:52:19 c7c40a7
feat(*/pi): add lemmas about how `single` interacts with operators (#6317)
This also adds a missing pi instances for `monoid_with_zero`.

2021-02-20 09:02:14 4d2dcdb
chore(*): fix broken Zulip archive links (#6321)

2021-02-20 01:44:35 3e381ad
chore(ring_theory/*): split lines (#6316)

2021-02-20 01:44:34 32b9b21
refactor(linear_algebra/pi): add `linear_map.single` to match `add_monoid_hom.single` (#6315)
This changes the definition of `std_basis` to be exactly `linear_map.single`, but proves equality with the old definition.
In future, it might make sense to remove `std_basis` entirely.

2021-02-20 01:44:33 d483bc2
chore(data/indicator_function): add a formula for the support of `indicator` (#6314)
* rename `set.support_indicator` to `set.support_indicator_subset`;
* add a new `set.support_indicator`;
* add `function.support_comp_eq_preimage`.

2021-02-20 01:01:26 3ab9818
chore(scripts): update nolints.txt (#6320)
I am happy to remove some nolints for you!

2021-02-19 14:14:19 845654a
feat(analysis/calculus): define a smooth bump function (#4458)
Define an infinitely smooth function which is `1` on the closed ball of radius `1` and is `0` outside of the open ball of radius `2`.

2021-02-19 12:23:04 f6eef43
doc(ring_theory): move some module docstring to correct place (#6312)

2021-02-19 12:23:03 aaab837
doc(ring_theory/witt_vector/witt_polynomial): move module docstring up (#6310)

2021-02-19 12:23:02 0df1998
doc(set_theory/*): more documentation about cardinals and ordinals (#6247)

2021-02-19 12:23:01 114f8ef
chore(data/buffer/parser/numeral): derive mono for numeral (#5463)
Thanks to Rob Lewis, using classes, instances, and the `delta_instance_handler`, transferring over instances becomes very easy.

2021-02-19 09:04:38 e5c7789
fix(lint/type_classes): fix instance_priority bug (#6305)
The linter now doesn't fail if the type is a beta redex

2021-02-19 07:04:09 a0e2b3c
chore(topology/Profinite): reduce universe variables (#6300)
See https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/universe.20issue

2021-02-19 07:04:08 64d86f7
feat(topology/{subset_properties,separation}): closed subsets of compact t0 spaces contain a closed point (#6273)
This adds two statements.  The first is that nonempty closed subsets of a compact space have a minimal nonempty closed subset, and the second is that when the space is additionally T0 then that minimal subset is a singleton.
(This PR does not do this, but one can go on to show that there is functor from compact T0 spaces to T1 spaces by taking the set of closed points, and it preserves nonemptiness.)

2021-02-19 04:14:30 626a4b5
chore(scripts): update nolints.txt (#6303)
I am happy to remove some nolints for you!

2021-02-19 04:14:29 75149c3
feat(data/list/basic): tail_drop, cons_nth_le_drop_succ (#6265)

2021-02-19 00:43:42 1fecd52
fix(tactic/push_neg): fully simplify expressions not named `h` (#6297)
A final pass of `push_neg` is intended to turn `¬ a = b` into `a ≠ b`.
Unfortunately, when you use `push_neg at ...`, this is applied to the hypothesis literally named `h`.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60push_neg.60.20behaviour.20depends.20on.20variable.20name)

2021-02-18 23:50:16 3a8d976
fix(archive/100/82): remove nonterminal simps (#6299)

2021-02-18 23:50:15 8696990
feat(category_theory/adjunction/reflective): show compositions of reflective are reflective (#6298)
Show compositions of reflective are reflective.

2021-02-18 20:23:11 96f8933
perf(tactic/lint/frontend): run linters in parallel (#6293)
With this change it takes 5 minutes instead of 33 minutes to lint mathlib (on my machine...).
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/linting.20time

2021-02-18 16:34:50 619c1b0
chore({algebra, algebraic_geometry}/*): move 1 module doc and split lines (#6294)
This moves the module doc for `algebra/ordered_group` so that it gets recognised by the linter. Furthermore, several lines are split in the algebra and algebraic_geometry folder.

2021-02-18 11:09:39 5b579a2
feat(topology/category/profinite): show Profinite is reflective in CompHaus (#6219)
Show Profinite is reflective in CompHaus.

2021-02-18 09:36:21 5a59781
fix(doc/references.bib): fix syntax (#6290)

2021-02-18 08:05:51 2a7eafa
feat(order/pfilter): add preorder filters, dual to preorder ideals (#5928)
Named `pfilter` to not conflict with the existing `order/filter`,
which is a much more developed theory of a special case of this.

2021-02-18 05:31:27 017acae
feat(linear_algebra/dual): adds dual annihilators (#6078)

2021-02-18 02:18:27 7c267df
chore(scripts): update nolints.txt (#6289)
I am happy to remove some nolints for you!

2021-02-17 23:53:33 7592a8f
chore(analysis/normed_space/finite_dimension,topology/metric_space): golf (#6285)
* golf two proofs about `finite_dimension`;
* move `proper_image_of_proper` to `antilipschitz`, rename to
  `antilipschitz_with.proper_space`, golf.

2021-02-17 23:53:32 bc1c4f2
feat(data/zmod/basic): add simp lemmas about coercions, tidy lemma names (#6280)
Split from #5797. This takes the new proofs without introducing the objectionable names.
This also renames a bunch of lemmas from `zmod.cast_*` to `zmod.nat_cast_*` and `zmod.int_cast_*`, in order to distinguish lemmas about `zmod.cast` from lemmas about `nat.cast` and `int.cast` applied with a zmod argument.
As an example, `zmod.cast_val` has been renamed to `zmod.nat_cast_zmod_val`, as the lemma statement is defeq to `(nat.cast : ℕ → zmod n) (zmod.val x) = x`, and `zmod.nat_cast_val` is already taken by `nat.cast (zmod.val x) = (x : R)`.
The full list of renames:
* `zmod.cast_val` → `zmod.nat_cast_zmod_val`
* `zmod.cast_self` → `zmod.nat_cast_self`
* `zmod.cast_self'` → `zmod.nat_cast_self'`
* `zmod.cast_mod_nat` → `zmod.nat_cast_mod`
* `zmod.cast_mod_int` → `zmod.int_cast_mod`
* `zmod.val_cast_nat` → `zmod.val_nat_cast`
* `zmod.coe_to_nat` → `zmod.nat_cast_to_nat`
* `zmod.cast_unit_of_coprime` → `coe_unit_of_coprime`
* `zmod.cast_nat_abs_val_min_abs` → `zmod.nat_cast_nat_abs_val_min_abs`

2021-02-17 20:29:45 75f3346
feat(analysis/normed_space/multilinear): generalized `curry` (#6270)

2021-02-17 20:29:44 152bf15
feat(data/fin): pred_above_monotone (#6170)

2021-02-17 15:49:57 4bae1c4
doc(tactic/algebra): document @[ancestor] (#6272)

2021-02-17 15:49:55 07a1b8d
feat(ring_theory/simple_module): introduce `is_semisimple_module` (#6215)
Defines `is_semisimple_module` to mean that the lattice of submodules is complemented
Shows that this is equivalent to the module being the `Sup` of its simple submodules

2021-02-17 11:38:42 f066eb1
feat(algebra/lie/subalgebra): define lattice structure for Lie subalgebras (#6279)
We already have the lattice structure for Lie submodules but not for subalgebras.
This is mostly a lightly-edited copy-paste of the corresponding subset of results
for Lie submodules that remain true for subalgebras.
The results which hold for Lie submodules but not for Lie subalgebras are:
  - `sup_coe_to_submodule` and `mem_sup`
  - `is_modular_lattice`
I have also made a few tweaks to bring the structure and naming of Lie
subalgebras a little closer to that of Lie submodules.

2021-02-17 11:38:41 d43a3ba
feat(analysis/normed_space/inner_product): norm is smooth at `x ≠ 0` (#6275)

2021-02-17 11:38:40 b190131
feat(data/int/basic): lemmas about int and int.to_nat (#6253)
Golfing welcome.
This adds a `@[simp]` lemma `int.add_minus_one : i + -1 = i - 1`, which I think is mostly helpful, but needs to be turned off in `data/num/lemmas.lean`, which is perhaps an argument against it.
I've also added a lemma
```
@[simp] lemma lt_self_iff_false [preorder α] (a : α) : a < a ↔ false :=
```
(not just for `int`), which I've often found useful (e.g. `simpa` works well when it can reduce a hypothesis to `false`). This lemma seems harmless, but I'm happy to hear objections if it is too general.

2021-02-17 11:38:39 8b8a5a2
feat(category/eq_to_hom): lemmas to replace rewriting in objects with eq_to_hom (#6252)
This adds two lemmas which replace expressions in which we've used `eq.mpr` to rewrite the source or target of a morphism, replacing the `eq.mpr` by composition with an `eq_to_hom`.
Possibly we just shouldn't add these

2021-02-17 11:38:38 ea1cff4
feat(linear_algebra/pi): ext lemma for `f : (Π i, M i) →ₗ[R] N` (#6233)

2021-02-17 11:38:37 0c61fc4
feat(group_theory): prove the 2nd isomorphism theorem for groups (#6187)
Define an `inclusion` homomorphism from a subgroup `H` contained in `K` to `K`. Add instance of `subgroup.normal` to `H ∩ N` in `H` whenever `N` is normal and use it to prove the 2nd isomorphism theorem for groups.

2021-02-17 11:38:36 9b3008e
feat(algebra/ordered_monoid): inequalities involving mul/add (#6171)
I couldn't find some statements about inequalities, so I'm adding them. I included all the useful variants I could think of.

2021-02-17 11:38:35 3c15751
feat(ring_theory/ideal/operations) : add lemma prod_eq_bot (#5795)
Add lemma `prod_eq_bot` showing that a product of ideals in an integral domain is zero if and only if one of the terms
is zero.

2021-02-17 07:54:59 11f054b
chore(topology/sheaves): speed up slow proofs by tidy (#6274)
No changes, just making some proofs by tidy explicit, so the file is not quite as slow as previously. Now compiles with `-T40000`.

2021-02-17 07:54:58 5258de0
feat(data/fin): refactor `pred_above` (#6125)
Currently the signature of `pred_above` is
```lean
def pred_above (p : fin (n+1)) (i : fin (n+1)) (hi : i ≠ p) : fin n := ...
```
and its behaviour is "subtract one from `i` if it is greater than `p`".
There are two reasons I don't like this much:
1. It's not a total function.
2. Since `succ_above` is exactly a simplicial face map, I'd like `pred_above` to be a simplicial degeneracy map.
In this PR I propose replacing this with
```lean
def pred_above (p : fin n) (i : fin (n+1)) : fin n :=
```
again with the behaviour "subtract one from `i` if it is greater than `p`".
~~Unfortunately, it seems the current `pred_above` really is needed for the sake of `fin.insert_nth`, so this PR has ended up as a half-hearted attempt to replace `pred_above`

2021-02-17 03:54:44 b2dbfd6
chore(scripts): update nolints.txt (#6276)
I am happy to remove some nolints for you!

2021-02-17 03:54:43 d4ef2e8
feat(topology/category/Top): nonempty inverse limit of compact Hausdorff spaces (#6271)
The limit of an inverse system of nonempty compact Hausdorff spaces is nonempty, and this can be seen as a generalization of Kőnig's lemma.  A future PR will address the weaker generalization that the limit of an inverse system of nonempty finite types is nonempty.
This result could be generalized more, to the inverse limit of nonempty compact T0 spaces where all the maps are closed, but I think it involves an essentially different method.

2021-02-17 03:54:42 bf9ca8b
feat(data/set/finite): complement of finite set is infinite (#6266)
Add two missing lemmas. One-line proofs due to Yakov Pechersky.

2021-02-16 23:59:06 7a7a559
feat(option/basic): add join_eq_none (#6269)

2021-02-16 23:59:05 781cc63
feat(data/real/liouville, ring_theory/algebraic): a Liouville number is transcendental! (#6204)
This is an annotated proof.  It finishes the first half of the Liouville PR.
A taste of what is to come in a future PR: a proof that Liouville numbers actually exist!

2021-02-16 23:59:04 efa6877
feat(algebra/category/Module): the free/forgetful adjunction for R-modules (#6168)

2021-02-16 23:59:03 3bf7241
feat(algebra/algebra,linear_algebra): add *_equiv.of_left_inverse (#6167)
The main purpose of this change is to add equivalences onto the range of a function with a left-inverse:
* `algebra_equiv.of_left_inverse`
* `linear_equiv.of_left_inverse`
* `ring_equiv.of_left_inverse`
* `ring_equiv.sof_left_inverse` (the sub***S***emiring version)
This also:
* Renames `alg_hom.alg_equiv.of_injective` to `alg_equiv.of_injective`
* Adds `subalgebra.mem_range_self` and `subsemiring.mem_srange_self` for consistency with `subring.mem_range_self`
* Replaces `subring.surjective_onto_range` with `subring.range_restrict_surjective`, which have defeq statements
These are computable versions of `*_equiv.of_injective`, with the benefit of having a known inverse, and in the case of `linear_equiv` working for `semiring` and not just `ring`.

2021-02-16 21:22:44 2289b18
chore(topology/basic): add `continuous_at_congr` and `continuous_at.congr` (#6267)

2021-02-16 18:36:50 0b4823c
doc(*): remove `\\` hack for latex backslashes in markdown (#6263)
With leanprover-community/doc-gen#110, these should no longer be needed.

2021-02-16 18:36:49 16eb4af
doc(algebraic_geometry/structure_sheaf): fix latex (#6262)
This is broken regardless of the markdown processor: <https://leanprover-community.github.io/mathlib_docs/algebraic_geometry/structure_sheaf.html#algebraic_geometry.structure_sheaf.is_locally_fraction>

2021-02-16 18:36:48 7459c21
feat(analysis/special_functions): strict differentiability of `real.exp` and `real.log` (#6256)

2021-02-16 18:36:47 b0071f3
feat(analysis/special_functions): `sqrt` is infinitely smooth at `x ≠ 0` (#6255)
Also move lemmas about differentiability of `sqrt` out from `special_functions/pow` to a new file.

2021-02-16 18:36:46 8a43163
feat(topology/algebra/normed_group): completion of normed groups (#6189)
From `lean-liquid`

2021-02-16 18:36:45 35c070f
chore(linear_algebra/dfinsupp): make lsum a linear_equiv (#6185)
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Typeclass.20inference.20can't.20fill.20in.20parameters/near/226019081) with a summary of the problem which required the nasty `semimodule_of_linear_map` present here.

2021-02-16 15:40:57 2411d68
doc(algebra/big_operators): fix formatting of library note (#6261)
The name of a library note is already used as its title: <https://leanprover-community.github.io/mathlib_docs_demo/notes.html#operator%20precedence%20of%20big%20operators>

2021-02-16 12:05:22 362619e
chore(data/equiv/basic): add lemmas about `equiv.cast` (#6246)

2021-02-16 12:05:21 841b007
doc(control/fold): fix bad markdown (#6245)

2021-02-16 12:05:20 beee5d8
doc(topology/category/*): 5 module docs (#6240)
This PR provides module docs to `Top.basic`, `Top.limits`, `Top.adjuntions`, `Top.epi_mono` , `TopCommRing`.
Furthermore, a few lines are split to please the line length linter.

2021-02-16 12:05:19 0716fa4
feat(data/set/intervals/basic): not_mem of various intervals (#6238)
`c` is not in a given open/closed/unordered interval if it is outside the bounds of that interval (or if it is not in a superset of that interval).

2021-02-16 12:05:17 914517b
feat(order/well_founded_set): finite antidiagonal of well-founded sets (#6208)
Defines `set.add_antidiagonal s t a`, the set of pairs of an element from `s` and an element from `t` that add to `a`
If `s` and `t` are well-founded, then constructs a finset version, `finset.add_antidiagonal_of_is_wf`

2021-02-16 12:05:16 1a43888
feat(analysis/normed_space/operator_norm): bundle more arguments (#6207)
* Drop `lmul_left` in favor of a partially applied `lmul`.
* Use `lmul_left_right` in `has_fderiv_at_ring_inverse` and related lemmas.
* Add bundled `compL`, `lmulₗᵢ`, `lsmul`.
* Make `𝕜` argument in `of_homothety` implicit.
* Add `deriv₂` and `bilinear_comp`.

2021-02-16 12:05:15 8d9eb26
chore(linear_algebra/finsupp): make lsum a linear_equiv (#6183)

2021-02-16 12:05:14 314f5ad
feat(ring_theory/finiteness): add quotient of finitely presented (#6098)
I've added `algebra.finitely_presented.quotient`: the quotient of a finitely presented algebra by a finitely generated ideal is finitely presented. To do so I had to prove some preliminary results about finitely generated modules.

2021-02-16 12:05:12 3cec1cf
feat(apply_fun): handle implicit arguments (#6091)
I've modified the way `apply_fun` handles inequalities, by building an intermediate expression before calling `mono` to discharge the `monotone f` subgoal. This has the effect of sometimes filling in implicit arguments successfully, so that `mono` works.
In `tests/apply_fun.lean` I've added an example showing this in action

2021-02-16 12:05:11 d3c5667
feat(number_theory/bernoulli): the odd Bernoulli numbers (greater than 1) are zero (#6056)
The proof requires a ring homomorphism between power series to be defined, `eval_mul_hom` . This PR defines it and states some of its properties, along with the result that `e^(ax) * e^(bx) = e^((a + b) x)`, which is needed for the final result, `bernoulli_odd_eq_zero`.

2021-02-16 12:05:10 2da1ab4
feat(data/equiv): Add lemmas to reduce `@finset.univ (perm (fin n.succ)) _` (#5593)
The culmination of these lemmas is that `matrix.det` can now be reduced by a minimally steered simp:
```lean
import data.matrix.notation
import group_theory.perm.fin
import linear_algebra.determinant
open finset
example {α : Type} [comm_ring α] {a b c d : α} :
  matrix.det ![![a, b], ![c, d]] = a * d - b * c :=
begin
  simp [matrix.det, univ_perm_fin_succ, ←univ_product_univ, sum_product, fin.sum_univ_succ, fin.prod_univ_succ],
  ring
end
```

2021-02-16 09:30:21 dc917df
feat(category/limits/shapes/zero): lemmas about is_isomorphic 0 (#6251)

2021-02-16 09:30:20 d7003c1
feat(algebra/category/Module): allow writing (0 : Module R) (#6249)

2021-02-16 09:30:19 2961e79
feat(topology/connected.lean): define pi_0 and prove basic properties (#6188)
Define and prove basic properties of pi_0, the functor quotienting a space by its connected components. 
For dot notation convenience, this PR renames `subset_connected_component` to `is_preconnected.subset_connected_component` and also defines the weaker version `is_connected.subset_connected_component`.

2021-02-16 08:09:48 acf2b6d
docs(algebraic_geometry/Scheme): fix typo in module docstring (#6254)

2021-02-16 06:42:40 dbe586c
chore(scripts): update nolints.txt (#6248)
I am happy to remove some nolints for you!

2021-02-16 00:20:31 97f7b52
chore(data/logic/unique): there is a unique function with domain pempty (#6243)

2021-02-15 21:04:25 65fe78a
feat(analysis/special_functions/trigonometric): add missing continuity attributes (#6236)
I added continuity attributes to lemmas about the continuity of trigonometric functions, e.g. `continuous_sin`, `continuous_cos`, `continuous_tan`, etc. This came up in [this Zulip conversation](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/What's.20new.20in.20Lean.20maths.3F/near/221511451)
I also added `real.continuous_tan`.

2021-02-15 17:15:21 0ed6f7c
feat(data/real/liouville, topology/metric_space/basic): further preparations for Liouville (#6201)
These lemmas are used to show that a Liouville number is transcendental.
The statement that Liouville numbers are transcendental is the next PR in this sequence!

2021-02-15 13:26:17 26c6fb5
chore(data/set/basic): set.union_univ and set.univ_union (#6239)

2021-02-15 13:26:16 d6db038
refactor(analysis/normed_space/multilinear): use `≃ₗᵢ` for `curry` equivs (#6232)
Also copy some `continuous_linear_equiv` API to `linear_isometry_equiv` (e.g., all API in `analysis.calculus.fderiv`).

2021-02-15 13:26:15 f5c55ae
feat(analysis/normed_space/basic): uniform_continuous_norm (#6162)
From `lean-liquid`

2021-02-15 13:26:14 0fa1312
feat(linear_algebra/unitary_group): add unitary/orthogonal groups (#5702)

2021-02-15 10:01:44 9f0687c
feat(order/liminf_limsup): liminf_nat_add and liminf_le_of_frequently_le' (#6220)
Add `liminf_nat_add (f : ℕ → α) (k : ℕ) : at_top.liminf f = at_top.liminf (λ i, f (i + k))`. Same for `limsup`.
Add `liminf_le_of_frequently_le'`, variant of `liminf_le_of_frequently_le` in which the lattice is complete but there is no linear order. Same for `limsup`.

2021-02-15 03:01:16 1f0bf33
chore(scripts): update nolints.txt (#6234)
I am happy to remove some nolints for you!

2021-02-15 03:01:15 0469268
doc(topology/subset_properties): minor change to docstring of `is_compact` (#6231)
I'm learning (for the first time) about how to do topology with filters, and this docstring confused me for a second. If there are linguistic reasons for leaving it as it is then fair enough, but it wasn't clear to me on first reading that `a` was independent of the set in the filter.

2021-02-15 03:01:14 5a6c893
feat(topology/algebra/module): 2 new ext lemmas (#6211)
Add ext lemmas for maps `f : M × M₂ →L[R] M₃` and `f : R →L[R] M`.

2021-02-15 03:01:13 c94577a
feat(group_theory/free_abelian_group): add module doc and some equivs (#6062)
Also add some API for `free_abelian_group.map`.

2021-02-14 23:17:58 6f99407
feat(analysis/calculus/inverse): a function with onto strict derivative is locally onto (#6229)
Removes a useless assumption in `map_nhds_eq_of_complemented` (no need to have a completemented subspace).
The proof of the local inverse theorem breaks into two parts, local injectivity and local surjectivity. We refactor the local surjectivity part, assuming in the proof only that the derivative is onto. The result is stronger, but the proof is less streamlined since there is no contracting map any more: we give a naive proof from first principles instead of reducing to the fixed point theorem for contracting maps.

2021-02-14 19:41:17 22b26d3
chore(algebra/group/basic): remove three redundant lemmas (#6197)
The following lemmas are changed in this PR (long list because of the additive versions:
* `mul_eq_left_iff` for `left_cancel_monoid` is renamed to `mul_right_eq_self` which previously was stated for `group`
* `add_eq_left_iff` the additive version is automatically renamed to `add_right_eq_self`
* `mul_eq_right_iff` for `right_cancel_monoid` is renamed to `mul_left_eq_self` which previously was stated for `group`
* `add_eq_right_iff` the additive version is automatically renamed to `add_left_eq_self`
* `left_eq_mul_iff` is renamed to `self_eq_mul_right` to fit the convention above
* `left_eq_add_iff` is renamed to `self_eq_add_right` to fit the convention above
* `right_eq_mul_iff` is renamed to `self_eq_mul_left` to fit the convention above
* `right_eq_add_iff` is renamed to `self_eq_add_left` to fit the convention above
* the duplicate `mul_left_eq_self` and `add_left_eq_self` for groups are removed
* the duplicate `mul_right_eq_self` and `add_right_eq_self` for groups are removed
* `mul_self_iff_eq_one` and `add_self_iff_eq_zero` deal only with the special case `a=b` of the other lemmas. It is therefore removed and the few instances in the library are replaced by one of the above. 
While I was at it, I provided a module doc for this file.

2021-02-14 16:06:00 c35672b
feat(analysis/special_functions): strict differentiability of some functions (#6228)

2021-02-14 16:05:59 713432f
chore(.github/PULL_REQUEST_TEMPLATE.md): clarify instructions (#6222)

2021-02-14 14:16:51 b9af22d
fix(*): arsinh and complex.basic had module docs at the wrong position (#6230)
This is fixed and the module doc for `complex.basic` is expanded slightly.

2021-02-14 03:41:08 c54a8d0
chore(scripts): update nolints.txt (#6227)
I am happy to remove some nolints for you!

2021-02-14 01:28:45 86e8a5d
fix(data/real/basic): remove `decidable_le` field in `real.conditionally_complete_linear_order` (#6223)
Because of this field, `@conditionally_complete_linear_order.to_linear_order ℝ real.conditionally_complete_linear_order` and `real.linear_order` were not defeq
See : https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Different.20linear.20orders.20on.20reals/near/226257434
Co-authored by @urkud

2021-02-13 22:35:47 b0aae27
feat(algebra/category/Group/adjunctions): free_group-forgetful adjunction (#6190)
Furthermore, a module doc for `group_theory/free_group` is provided and a few lines in this file are split.

2021-02-13 22:35:46 07600ee
feat(computability/epsilon_nfa): epsilon-NFA definition (#6108)

2021-02-13 19:32:58 ac19b4a
refactor(measure_theory/l1_space): remove one of the two definitions of L1 space (#6058)
Currently, we have two independent versions of the `L^1` space in mathlib: one coming from the general family of `L^p` spaces, the other one is an ad hoc construction based on the `integrable` predicate used in the construction of the Bochner integral.
We remove the second construction, and use instead the `L^1` space coming from the family of `L^p` spaces to construct the Bochner integral. Still, we keep the `integrable` predicate as it is generally useful, and show that it coincides with the `mem_Lp 1` predicate.

2021-02-13 17:23:27 ad5a81d
chore(measure_theory/measure_space): add some `simp`/`mono` tags (#6221)

2021-02-13 14:34:16 3cfaa0b
feat(measure_theory/measure_space): add ae_imp_iff (#6218)
This is `filter.eventually_imp_distrib_left` specialized to the measure.ae filter.

2021-02-13 12:18:12 d0456d3
feat(measure_theory/borel_space): add ae_measurable versions of finset.measurable_prod and measurable.ennreal_tsum (#6217)
Also add an ae_measurable version of `ae_lt_top`.

2021-02-13 12:18:11 42bb0c4
feat(ring_theory/ideal/operations): add first isomorphism theorem for rings and algebras (#6166)
The first isomorphism theorem for commutative rings `quotient_ker_equiv_of_surjective` and algebras `quotient_ker_alg_equiv_of_surjective`.

2021-02-13 12:18:10 8b59d97
feat(linear_algebra/pi_tensor_product): tmul distributes over tprod (#6126)
This adds the equivalence `(⨂[R] i : ι, M) ⊗[R] (⨂[R] i : ι₂, M) ≃ₗ[R] ⨂[R] i : ι ⊕ ι₂, M`.
Working with dependently-typed `M` here is more trouble than it's worth, as we don't have any typeclass structures on `sum.elim M N` right now,
This is one of the pieces needed to provide a ring structure on `⨁ n, ⨂[R] i : fin n, M`, but that's left for another time.

2021-02-13 09:47:57 445e6fc
refactor(topology/{basic,continuous_on}): review `continuous_if` etc (#6182)
* move `continuous_if` to `topology/continuous_on`, use weaker assumptions;
* add `piecewise` versions of various `if` lemmas;
* add a specialized `continuous_if_le` version;
* use dot notation for `continuous_on.if` and `continuous_on.if'`;
* minor golfing here and there.

2021-02-13 09:47:56 5c22531
doc(data/polynomial/denoms_clearable): fix typo in the doc-string (#6174)

2021-02-13 07:17:57 5bee826
feat(data/int/gcd): some missing lemmas about int.gcd (#6212)
As requested [on zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/different.20gcd's.3F/near/226203698).

2021-02-13 07:17:56 0544641
chore(analysis/special_functions/pow): review lemmas about measurability of `cpow`/`rpow` (#6209)
* prove that `complex.cpow` is measurable;
* deduce measurability of `real.rpow` from definition, not continuity.

2021-02-13 07:17:55 ee9197a
chore(topology/algebra/module): review `coe` lemmas (#6206)
* add `@[simp]` to `continuous_linear_equiv.coe_coe`, remove from `continuous_linear_equiv.coe_apply`;
* golf `continuous_linear_equiv.ext`;
* given `(e e' : M ≃L[R] M₂)`, simplify `(e : M →L[R] M₂) = e'` to `e = e'`;
* add `@[simp]` to `continuous_linear_equiv.symm_comp_self` and `continuous_linear_equiv.self_comp_symm`;
* drop `symm_comp_self'` and `self_comp_symm'`: now `coe_coe` simplifies LHS to `symm_comp_self`/`self_comp_symm`;
* `continuous_linear_equiv.coord` is no longer an `abbreviation`: without this change `coe_coe` prevents us from using lemmas about `coord`;

2021-02-13 07:17:54 43bfd90
chore(group_theory/free_group): clean up unnecessary lemmas (#6200)
This removes:
* `free_abelian_group.lift.{add,sub,neg,zero}` as these exist already as `(free_abelian_group.lift _).map_{add,sub,neg,zero}` 
* `free_group.to_group.{mul,one,inv}` as these exist already as `(free_group.to_group _).map_{mul,one,inv}`
* `free_group.map.{mul,one,inv}` as these exist already as `(free_group.map _).map_{mul,one,inv}`
* `free_group.prod.{mul,one,inv}` as these exist already as `free_group.prod.map_{mul,one,inv}`
* `to_group.is_group_hom` as this is provided automatically for `monoid_hom`s
and renames
* `free_group.sum.{mul,one,inv}` to `free_group.sum.map_{mul,one,inv}`
These lemmas are already simp lemmas thanks to the functions they relate to being bundled homs.
While the new spelling is slightly longer, it makes it clear that the entire set of `monoid_hom` lemmas apply, not just the three that were copied across.
This also wraps some lines to make the linter happier about these files.

2021-02-13 05:21:53 759ebc0
chore(analysis/calculus/local_extr): minor golfing (#6214)

2021-02-13 03:56:07 5869039
chore(scripts): update nolints.txt (#6213)
I am happy to remove some nolints for you!

2021-02-13 00:49:42 37459ee
doc(docs/overview.yaml): Added Hall's theorem (#6205)
Also fixed module documentation to use inline math mode (and removed the dreaded "any").

2021-02-13 00:49:41 06fdc08
chore(algebra/group/pi): replace a lemma with @[simps] (#6203)

2021-02-13 00:49:40 e79bf05
feat(number_theory/ADE_inequality): the inequality 1/p + 1/q + 1/r > 1 (#6156)

2021-02-13 00:49:38 30c2c5b
feat(data/fin): cast_succ_mk and other lemmas (#6094)
* add lemmas for all the `fin.cast_*` functions which describe what happens to an "explicitly presented" term of `fin n`, built from the constructor
* fixes some errors in doc-strings

2021-02-13 00:49:36 152ad1f
feat(measure_theory/measure_space): add theorems about restrict and subtraction (#5000)
This is the next tranche of theorems toward Lebesgue-Radon-Nikodym.

2021-02-12 21:14:37 dd13f00
feat(data/set/intervals/basic): 24 lemmas about membership of arithmetic operations (#6202)

2021-02-12 14:15:57 254c3ee
feat(analysis/special_functions/exp_log): added `log_div` (#6196)
`∀ x y : ℝ, x ≠ 0 → y ≠ 0 → log (x / y) = log x - log y`

2021-02-12 14:15:56 a5ccba6
feat(analysis/calculus): generalize `has_strict_fderiv_at.map_nhds_eq` (#6193)
Generalize `has_strict_fderiv_at.map_nhds_eq` to a function that satisfies assumptions of the implicit function theorem.

2021-02-12 12:44:07 74d3270
fix(topology/topological_fiber_bundle): fix definition, review (#6184)
* fix definition of `is_topological_fiber_bundle`;
* add `is_trivial_topological_fiber_bundle`;
* more lemmas, golf here and there;
* define induced fiber bundle.

2021-02-12 10:09:14 2d70880
feat(topology/subset_properties): compact discrete spaces are finite (#6191)
From `lean-liquid`

2021-02-12 02:51:33 159e807
chore(scripts): update nolints.txt (#6194)
I am happy to remove some nolints for you!

2021-02-12 02:51:32 72141fd
feat(combinatorics/hall): Hall's marriage theorem (#5695)
We state and prove Hall's marriage theorem with respect to fintypes and relations. 
Coauthor: @b-mehta @kmill

2021-02-11 23:33:03 db305fb
feat(data/set/finite): fintype_of_univ_finite (#6164)
From `lean-liquid`

2021-02-11 23:33:02 2f56620
feat(data/real/irrational): define Liouville numbers (#6158)
Prove that a Liouville number is irrational

2021-02-11 20:21:07 64914d3
chore(group_theory/perm, linear_algebra/alternating): add some helper lemmas for gh-5269 (#6186)

2021-02-11 20:21:06 cee5ddf
chore(topology/homeomorph): review, add `prod_punit`/`punit_prod` (#6180)
* use `to_equiv := e` instead of `.. e` to have definitional equality
  `h.to_equiv = e`;
* add some `@[simp]` lemmas;
* add `homeomorph.prod_punit` and `homeomorph.punit_prod`;
* generalize `unit.topological_space` to `punit.topological_space`.

2021-02-11 20:21:05 6c602c7
feat(data/nat/bitwise): test bits of powers of two (#6070)

2021-02-11 16:21:09 1ad29d6
refactor(algebra/lie/of_associative): remove `ring_commutator` namespace; use `ring` instead (#6181)
The `old_structure_cmd` change to `lie_algebra.is_simple` is unrelated and is
included here only for convenience.
`ring_commutator.commutator` -> `ring.lie_def`

2021-02-11 16:21:06 abf72e6
refactor(algebra/lie/*): rename `lie_algebra.morphism` --> `lie_hom`, `lie_algebra.equiv` --> `lie_equiv` (#6179)
Also renaming the field `map_lie` to `map_lie'` in both `lie_algebra.morphism` and `lie_module_hom`
for consistency with the pattern elsewhere in Mathlib.

2021-02-11 16:21:04 b3347e5
doc(algebra/field): added module doc (#6177)

2021-02-11 16:21:00 af8b60b
feat(algebra/lie/submodule): Lie submodules form a modular lattice (#6176)

2021-02-11 16:20:58 b9354dd
feat(algebra/ordered_ring): a product is at least one if both factors are (#6172)
Add single lemma one_le_mul_of_one_le_of_one_le
The lemma is stated for an `ordered_semiring`, but only multiplication is used.  There does not seem to be an `ordered_monoid` class where this lemma would fit.
Relevant Zulip chat:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/ordered_monoid.3F

2021-02-11 16:20:56 194ec66
feat(group_theory/subgroup): prove relation between pointwise product of submonoids/subgroups and their join (#6165)
If `H` and `K` are subgroups/submonoids then `H ⊔ K = closure (H * K)`, where `H * K` is the pointwise set product. When `H` or `K` is a normal subgroup, it is proved that `(↑(H ⊔ K) : set G) = H * K`.
<!--
put comments you want to keep out of the PR commit here.
If this PR depends on other PRs, please list them below this comment,
using the following format:
- [ ] depends on: #abc [optional extra text]
- [ ] depends on: #xyz [optional extra text]
-->

2021-02-11 16:20:55 f151da2
feat(field_theory/polynomial_galois_group): Restriction from splitting field of composition (#6148)
Defines the surjective restriction map from the splitting field of a composition

2021-02-11 16:20:52 7b4a9e5
feat(order/well_founded_set) : Define when a set is well-founded with `set.is_wf` (#6113)
Defines a predicate for when a set within an ordered type is well-founded (`set.is_wf`)
Proves basic lemmas about well-founded sets

2021-02-11 16:20:48 a557f8b
feat(data/complex): order structure (#4684)

2021-02-11 14:27:06 39090c8
doc(analysis/analytic/inverse): fix mathjax output (#6175)
`\\` in source code is converted to `\` in the generated html file, so one should have `\\\\` to generate proper line break for mathjax.

2021-02-11 11:51:02 58632ac
feat(topology/order): discrete_topology_bot (#6163)
From `lean-liquid`

2021-02-11 11:50:59 fdace95
feat(linear_algebra/matrix): generalize some `is_basis.to_matrix` results (#6127)
This PR contains some changes to the lemmas involving `is_basis.to_matrix`, allowing the bases involved to differ in their index type. Although you can prove there exists an `equiv` between those types, it's easier to not have to transport along that equiv.
The PR also generalizes `linear_map.to_matrix_id` to a form with two different bases, `linear_map.to_matrix_id_eq_basis_to_matrix`. Marking the second as `simp` means the first can be proved automatically, hence the removal of `simp` on that one.

2021-02-11 09:21:58 d405c5e
chore(scripts): update nolints.txt (#6169)
I am happy to remove some nolints for you!

2021-02-11 09:21:57 59daf53
refactor(topology/subset_properties.lean): split the subset_properties.lean file (#6161)
split the file subset_properties.lean into another file called connected.lean which contains the properties that relate to connectivity. This is in preparation for a future PR proving properties about the quotient of a space by its connected components and it would add roughly 300 lines.

2021-02-11 09:21:55 97a56e6
refactor(algebra/lie/basic): split giant file into pieces (#6141)

2021-02-11 06:02:45 97f89af
doc(algebra/euclidean_domain): module doc (#6107)

2021-02-11 06:02:43 906e03d
chore(field_theory,ring_theory): reduce dependencies of `power_basis.lean` (#6104)
I was having trouble with circular imports related to `power_basis.lean`, so I decided to reshuffle some definitions to make `power_basis.lean` have less dependencies. That way, something depending on `power_basis` doesn't also need to depend on `intermediate_field.adjoin`.
The following (main) declarations are moved:
 - `algebra.adjoin`: from `ring_theory/adjoin.lean` to `ring_theory/adjoin/basic.lean` (renamed file)
 - `algebra.adjoin.power_basis`: from `ring_theory/power_basis.lean` to `ring_theory/adjoin/power_basis.lean` (new file)
 - `adjoin_root.power_basis`: from `ring_theory/power_basis.lean` to `ring_theory/adjoin_root.lean`
 - `intermediate_field.adjoin.power_basis`: from `ring_theory/power_basis.lean` to `field_theory/adjoin.lean`
 - `is_scalar_tower.polynomial`: from `ring_theory/algebra_tower.lean` to `ring_theory/polynomial/tower.lean` (new file)
The following results are new:
 - `is_integral.linear_independent_pow` and `is_integral.mem_span_pow`: generalize `algebra.adjoin.linear_independent_power_basis` and `algebra.adjoin.mem_span_power_basis`.

2021-02-11 06:02:41 330129d
feat(data/finset/lattice): `inf` and `sup` on complete_linear_orders produce an element of the set (#6103)

2021-02-11 06:02:39 3959a8b
perf(ring_theory/{noetherian,ideal/basic}): Simplify proofs of Krull's theorem and related theorems (#6082)
Move `submodule.singleton_span_is_compact_element` and `submodule.is_compactly_generated` to more appropriate locations. Add trivial order isomorphisms and order-iso lemmas. Show that `is_atomic` and `is_coatomic` are respected by order isomorphisms. Greatly simplify `is_noetherian_iff_well_founded`. Provide an `is_coatomic` instance on the ideal lattice of a ring and simplify `ideal.exists_le_maximal`.

2021-02-11 00:37:06 030107f
feat(order/compactly_generated): A compactly-generated modular lattice is complemented iff atomistic (#6071)
Shows that a compactly-generated modular lattice is complemented iff it is atomistic
Proves extra lemmas about atomistic or compactly-generated lattices
Proves extra lemmas about `complete_lattice.independent`
Fix the name of `is_modular_lattice.sup_inf_sup_assoc`

2021-02-11 00:37:04 7fb7fb3
feat(ring_theory/polynomial/chebyshev/dickson): Introduce generalised Dickson polynomials (#5869)
and replace lambdashev with dickson 1 1.

2021-02-11 00:37:02 c70feeb
feat(analysis/analytic/inverse): convergence of the inverse of a power series (#5854)
If a formal multilinear series has a positive radius of convergence, then its inverse also does.

2021-02-11 00:37:00 19f24ce
feat(algebra/subalgebra): Trivial subalgebra has trivial automorphism group (#5672)
Adds a lemma stating that if top=bot in the subalgebra type then top=bot in the subgroup type.

2021-02-11 00:36:58 983cb90
feat(archive/imo): formalize 1987Q1 (#4731)

2021-02-10 21:01:42 13c9ed3
refactor(data/finset/basic): simplify proof (#6160)
... of `bUnion_filter_eq_of_maps_to`
looks nicer, slightly faster elaboration, 13% smaller proof term
Co-authors: `lean-gptf`, Stanislas Polu

2021-02-10 21:01:40 0bc7fc1
refactor(ring_theory/perfection): faster proof of `coeff_frobenius` (#6159)
4X smaller proof term, elaboration 800ms -> 50ms
Co-authors: `lean-gptf`, Stanislas Polu
Note: supplying `coeff_pow_p f n` also works but takes 500ms to
elaborate

2021-02-10 21:01:38 6e52dfe
feat(algebra/category/Group/adjunctions): adjunction of abelianization and forgetful functor (#6154)
Abelianization has been defined in `group_theory/abelianization` without realising it in category theory. This PR adds this feature. Furthermore, a module doc for abelianization is added and the one for adjunctions is expanded.

2021-02-10 21:01:36 bce1cb3
feat(linear_algebra/matrix): lemmas for `reindex({_linear,_alg}_equiv)?` (#6153)
This PR contains a couple of `simp` lemmas for `reindex` and its bundled equivs. Namely, it adds `reindex_refl` (reindexing along the identity map is the identity), and `reindex_apply` (the same as `coe_reindex`, but no `λ i j` on the RHS, which makes it more useful for `rw`'ing.) The previous `reindex_apply` is renamed `coe_reindex` for disambiguation.

2021-02-10 21:01:35 eca4f38
feat(data/int/basic): an integer of absolute value less than one is zero (#6151)
lemma eq_zero_iff_abs_lt_one

2021-02-10 21:01:33 14a1fd7
feat(data/nat/basic): le_of_add_le_* (#6145)

2021-02-10 21:01:31 dbbac3b
chore(algebra/module/pi): add missing smul_comm_class instances (#6139)
There are three families of these for consistency with how we have three families of `is_scalar_tower` instances.

2021-02-10 21:01:30 56fde49
feat(data/polynomial/denoms_clearable): add lemma about clearing denominators in evaluating a polynomial (#6122)
Evaluating a polynomial with integer coefficients at a rational number and clearing denominators, yields a number greater than or equal to one.  The target can be any `linear_ordered_field K`.
The assumption on `K` could be weakened to `linear_ordered_comm_ring` assuming that the
image of the denominator is invertible in `K`.
Reference: Liouville PR #4301.

2021-02-10 21:01:28 db0fa61
feat(category_theory/differential_object): the shift functor (#6111)
Requested by @jcommelin.

2021-02-10 17:50:05 f0413da
refactor(combinatorics/simple_graph/basic): change statement of mem_decidable to more general version (#6157)
Change statement of `mem_decidable` to more general version.

2021-02-10 17:50:03 83118da
feat(data/nat/basic): prove an inequality of natural numbers (#6155)
Add lemma mul_lt_mul_pow_succ, proving the inequality `n * q < a * q ^ (n + 1)`.
Reference: Liouville PR #4301.

2021-02-10 17:50:01 ca8e009
feat(data/polynomial/ring_division): comp_eq_zero_iff (#6147)
Condition for a composition of polynomials to be zero (assuming that the ring is an integral domain).

2021-02-10 17:49:59 41530ae
feat(field_theory/splitting_field): splits_of_nat_degree_le_one (#6146)
Adds the analogs of `splits_of_degree_eq_one` and `splits_of_degree_le_one` for `nat_degree`

2021-02-10 17:49:57 3fae96c
feat(algebra/ordered_monoid): min_*_distrib (#6144)
Also provide a `canonically_linear_ordered_add_monoid` instances for `nat`, `nnreal`, `cardinal` and `with_top`.

2021-02-10 17:49:55 3cc398b
feat(linear_algebra/prod): add an ext lemma that recurses into products (#6124)
Combined with #6105, this means that applying `ext` when faced with an equality between `A × (B ⊗[R] C) →ₗ[R] D`s now expands to two goals, the first taking `a : A` and the second taking `b : B` and `c : C`.
Again, this comes at the expense of sometimes needing to `simp [prod.mk_fst, linear_map.inr_apply]` after using `ext`, but those are all covered by `dsimp` anyway.

2021-02-10 15:17:41 0854536
feat(topology/constructions): add `map_fst_nhds` and `map_snd_nhds` (#6142)
* Move the definition of `nhds_within` to `topology/basic`. The theory is still in `continuous_on`.
* Add `filter.map_inf_principal_preimage`.
* Add `map_fst_nhds_within`, `map_fst_nhds`, `map_snd_nhds_within`, and `map_snd_nhds`.

2021-02-10 15:17:39 7fd4dcf
feat(analysis/normed_space/operator_norm): bundle more arguments (#6140)
* bundle the first argument of `continuous_linear_map.smul_rightL`;
* add `continuous_linear_map.flip` and `continuous_linear_map.flipₗᵢ`;
* use `flip` to redefine `apply`.

2021-02-10 15:17:37 d5e2029
refactor(linear_algebra/basic): extract definitions about pi types to a new file (#6130)
This makes it consistent with how the `prod` definitions are in their own file.
With each in its own file, it should be easier to unify the APIs between them.
This does not do anything other than copy across the definitions.

2021-02-10 11:14:03 7a51c0f
refactor(data/set/intervals/basic): simpler proof of `Iio_union_Ioo'` (#6132)
proof term 2577 -> 1587 chars
elaboration time 130ms -> 75ms
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-10 05:02:51 5a2eac6
refactor(order/closure): golf `closure_inter_le` (#6138)
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-10 03:37:24 0731a70
chore(scripts): update nolints.txt (#6143)
I am happy to remove some nolints for you!

2021-02-10 00:03:36 922ecb0
chore(group_theory/perm/sign): speed up sign_aux_swap_zero_one proof (#6128)

2021-02-10 00:03:34 18b378d
chore(data/fin): reorder file to group declarations (#6109)
The `data/fin` file has a lot of definitions and lemmas. This reordering groups declarations and places ones that do not rely on `fin` operations first, like order. No definitions or lemma statements have been changed. A minimal amount of proofs have been rephrased. No reformatting of style has been done. Section titles have been added.
This is useful in preparation for redefining `fin` operations (lean#527). Additionally, it allows for better organization for other refactors like making `pred` and `pred_above` total.

2021-02-10 00:03:32 4c1c11c
feat(data/equiv/mul_add): monoids/rings with one element are isomorphic (#6079)
Monoids (resp. add_monoids, semirings) with one element are isomorphic.

2021-02-10 00:03:30 b34da00
feat(algebra/geom_sum): adds further variants (#6077)
This adds further variants for the value of `geom_series\2`. Additionally, a docstring is provided.
Thanks to Patrick Massot for help with the reindexing of sums.

2021-02-10 00:03:28 49e50ee
feat(measure_theory/lp_space): add more API on Lp spaces (#6042)
Flesh out the file on `L^p` spaces, notably adding facts on the composition with Lipschitz functions. This makes it possible to define in one go the positive part of an `L^p` function, and its image under a continuous linear map.
The file `ae_eq_fun.lean` is split into two, to solve a temporary issue: this file defines a global emetric space instance (of `L^1` type) on the space of function classes. This passes to subtypes, and clashes with the topology on `L^p` coming from the distance. This did not show up before as there were not enough topological statements on `L^p`, but I have been bitten by this when adding new results. For now, we move this part of `ae_eq_fun.lean` to another file which is not imported by `lp_space.lean`, to avoid the clash. This will be solved in a subsequent PR in which I will remove the global instance, and construct the integral based on the specialization of `L^p` to `p = 1` instead of the ad hoc construction we have now (note that, currently, we have two different `L^1` spaces in mathlib, denoted `Lp E 1 μ` and `α →₁[μ] E` -- I will remove the second one in a later PR).

2021-02-10 00:03:26 7c77279
feat(category_theory/monad): use bundled monads everywhere (#5889)
This PR makes bundled monads the default (adapting definitions by @adamtopaz). The main motivation for this is that the category of algebras for a monad is currently not "hygienic" in that isomorphic monads don't have equivalent Eilenberg-Moore categories, but further that the notion of monad isomorphism is tricky to express, in particular this makes the definition of a monadic functor not preserved by isos either despite not explicitly having monads or algebras in the type.
We can now say:
```
@[simps]
def algebra_equiv_of_iso_monads {T₁ T₂ : monad C} (h : T₁ ≅ T₂) :
  algebra T₁ ≌ algebra T₂ :=
```
Other than this new data, virtually everything in this PR is just refactoring - in particular there's quite a bit of golfing and generalisation possible, but to keep the diff here minimal I'll do those in later PRs

2021-02-09 20:17:00 ba9e06e
refactor(algebra/lie/basic): rm extraneous rewrite hypothesis (#6137)
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-09 20:16:58 456bdb7
refactor(measure_theory/measure_space): simplify proof (#6136)
2X smaller proof term
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-09 20:16:56 c377e68
refactor(ring_theory/polynomial/symmetric): simplify proof (#6135)
... of `mv_polynomial.is_symmetric.sub`
2X smaller proof term
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-09 20:16:55 eb2dcba
refactor(*): remove uses of omega in the library (#6129)
The transition to Lean 4 will be easier if we don't have to port omega.

2021-02-09 20:16:52 296899e
refactor(data/string/basic): simplify proof of `to_list_nonempty` (#6117)
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-09 20:16:49 d9d56eb
feat(analysis/special_functions/trigonometric): `complex.log` is smooth away from `(-∞, 0]` (#6041)

2021-02-09 16:47:39 e8f383c
refactor(analysis/special_functions/trigonometric): simpler proof (#6133)
... of `complex.tan_int_mul_pi`
3X faster elaboration, 2X smaller proof term
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-09 16:47:37 bf1465c
refactor(data/fintype/basic): golf `card_eq_one_of_forall_eq` (#6131)
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-09 16:47:34 fdbd4bf
feat(archive/imo): formalize solution to IMO 2013 problem Q1 (#6110)

2021-02-09 14:41:24 aa9e2b8
feat(analysis/normed_space/operator_norm): lemmas about `E →L[𝕜] F →L[𝕜] G` (#6102)

2021-02-09 14:41:22 766146b
fix(topology/algebra/infinite_sum): remove hard-coding of ℕ and ℝ (#6096)
It may be possible to make these assumptions stricter, but they're weak enough to still cover the original use case.
Hopefully that can be handled by @alexjbest's upcoming linter to relax assumptions.

2021-02-09 11:14:56 2d50cce
refactor(geometry/euclidean): shorten proof (#6121)
... of `eq_reflection_of_eq_subspace`
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-09 11:14:54 aaab113
refactor(linear_algebra/prod): split out prod and coprod defs and lemmas  (#6059)
Lemmas are moved without modification.
I expect this will take a few builds of adding missing imports.

2021-02-09 11:14:52 17448c6
feat(group_theory/perm/sign): induced permutation on a subtype that is a fintype (#5706)
If a permutation on a type maps a subtype into itself and the subtype is a fintype, then we get a permutation on the subtype. Similar to the subtype_perm definition in the same file.

2021-02-09 07:26:19 342bccf
refactor(group_theory/solvable): `simp` -> assumption (#6120)
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-09 07:26:17 ec8f2ac
refactor(data/ordmap/ordset): simpler proof of `not_le_delta` (#6119)
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-09 07:26:15 7e5ff2f
refactor(computability/partrec): simpler proof of `subtype_mk` (#6118)
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-09 07:26:13 183f4fc
refactor(category_theory/adjunction/mates): faster proof (#6116)
Co-authors: `lean-gptf`, Stanislas Polu
elaboration 750ms -> 350ms
5X smaller proof term
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-09 07:26:11 1611b30
refactor(combinatorics/simple_graph): simplify proofs (#6115)
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-09 07:26:10 d06b11a
refactor(algebra/lie/basic): golf `lie_algebra.morphism.map_bot_iff` (#6114)
Co-authors: `lean-gptf`, Stanislas Polu
This was found by `formal-lean-wm-to-tt-m1-m2-v4-c4` when we evaluated it on theorems added to `mathlib` after we last extracted training data.

2021-02-09 07:26:06 6b65c37
refactor(linear_algebra/tensor_product): Use a more powerful lemma for ext (#6105)
This means that the `ext` tactic can recurse into both the left and the right of the tensor product.
The downside is that `compr₂_apply, mk_apply` needs to be added to some `simp only`s.
Notably this makes `ext` able to prove `tensor_product.ext_fourfold` (which is still needed to cut down elaboration time for the `pentagon` proof), and enables `ext` to be used on things like tensor products of a tensor_algebra and a free_algebra.

2021-02-09 07:26:04 7b1945e
feat(logic/basic): dite_eq_ite (#6095)
Simplify `dite` to `ite` when possible.

2021-02-09 05:58:46 8fd8636
feat(field_theory/minpoly): add `minpoly.nat_degree_pos` (#6100)
I needed this lemma and noticed that `minpoly.lean` actually uses this result more than `minpoly.degree_pos` (including in the proof of `degree_pos` itself). So I took the opportunity to golf a couple of proofs.

2021-02-09 03:30:54 69bf484
chore(scripts): update nolints.txt (#6112)
I am happy to remove some nolints for you!

2021-02-09 00:54:24 117e729
chore(linear_algebra/basic, analysis/normed_space/operator_norm): bundle another argument into the homs (#5899)

2021-02-08 21:41:41 7f11d72
feat(analysis/normed_space): `continuous_linear_map.prod` as a `linear_isometry_equiv` (#6099)
* add lemma `continuous_linear_map.op_norm_prod`;
* add `continuous_linear_map.prodₗ` and `continuous_linear_map.prodₗᵢ`;
* add `prod.topological_semimodule`;
* drop unused `is_bounded_linear_map_prod_iso`.

2021-02-08 21:41:39 03074b1
doc(algebra/{field_power, punit_instances}): module docs (#6097)
Additionally `ordered_field` is aligned with the style guidelines.

2021-02-08 19:30:23 d62d793
feat(differential_object/iso_app): extract the isomorphism of underlying objects (#6083)
From `lean-liquid`.

2021-02-08 19:30:20 0c6fa28
feat(linear_algebra/basis): if `(p : submodule K V) < ⊤`, then there exists `f : V →ₗ[K] K`, `p ≤ ker f` (#6074)

2021-02-08 19:30:18 4e9fbb9
feat(measure_theory/probability_mass_function): Add definitions for filtering pmfs on a predicate (#6033)

2021-02-08 19:30:16 f6504f1
feat(computability/DFA): the pumping lemma (#5925)

2021-02-08 16:17:44 1d49f87
chore(data/finset): golf some proofs (#6101)
* prove that `finset.min'` and `finset.max'` are `is_least` and
  `is_greatest` elements of the corresponding sets;
* use this fact to golf some proofs;
  generalize `min'_lt_max'` to `is_glb_lt_is_lub_of_ne`;
* add `finset.card_le_one` and `finset.one_lt_card`.

2021-02-08 16:17:43 1a0f84c
feat(linear_algebra/basic): bundle prod and coprod into linear_equivs (#5992)
In order to do this, this has to reorder some definitions to make the semimodule structure on linear maps available earlier.

2021-02-08 14:15:50 8a23aa3
feat(topology/instances/{nnreal,ennreal}): add tendsto_cofinite_zero_of_summable (#6093)
For `f : a -> nnreal`, `summable f` implies `tendsto f cofinite (nhds 0)`.
For `f : a -> ennreal`, `tsum f < \top` implies `tendsto f cofinite (nhds 0)`.
Add versions of these lemmas with `at_top` instead of `cofinite` when `a = N`.
Also add `ennreal.tendsto_at_top_zero`, a simpler statement for a particular case of `ennreal.tendsto_at_top`.

2021-02-08 14:15:49 8e3e79a
feat(category_theory/pi): extract components of isomorphisms of indexed objects (#6086)
From `lean-liquid`.

2021-02-08 14:15:47 f075a69
feat(category_theory/differential_object): lifting a functor (#6084)
From `lean-liquid`.

2021-02-08 14:15:44 6561639
feat(topology/local_extr): not locally surjective at a local extr (#6076)

2021-02-08 14:15:42 054b467
feat(analysis/calculus): derivatives of `f : E → Π i, F i` (#6075)

2021-02-08 14:15:40 dc48a84
feat(linear_algebra/pi_tensor_product): add reindex and pempty_equiv (#6069)

2021-02-08 10:21:58 d7a4f72
feat(norm_cast): dite_cast to match ite_cast (#6092)
There's already an `ite_cast` lemma, for pushing a cast inside an `ite`. This adds the analogous `dite_cast`.

2021-02-08 10:21:56 b338240
feat(topology/constructions): a finite product of discrete spaces is discrete (#6088)
From `lean-liquid`.

2021-02-08 10:21:55 e4369fe
chore(algebra/module/prod): add missing instances (#6055)
This adds the following instances for `prod`:
* `is_scalar_tower`
* `smul_comm_class`
* `mul_action`
* `distrib_mul_action`
It also renames the type variables to match the usual convention for modules

2021-02-08 08:08:37 90702a0
feat(topology/continuous_map): missing coe_mk lemma (#6087)

2021-02-08 05:08:19 a6fc6bd
feat(finset/lattice): max'_insert (#6089)
From `lean-liquid`.

2021-02-08 02:16:50 6b83e72
chore(scripts): update nolints.txt (#6090)
I am happy to remove some nolints for you!

2021-02-08 02:16:48 5bf92e1
chore(analysis/calculus/local_extr): review (#6085)
* golf 2 proofs;
* don't use explicit section `variables`;
* add 2 docstrings.

2021-02-07 23:41:53 45f9544
feat(topology/separation): an injective map on a compact space is an embedding (#6057)

2021-02-07 23:41:49 9411b00
feat(algebra/lie/basic): define the center of a Lie algebra and prove some related results (#6013)

2021-02-07 23:41:48 d989ff4
feat(measure_theory/lebesgue_measure): integral as volume between graphs (#5932)
I show that the integral can compute the volume between two real-valued functions. I start with the definition `region_between`, I prove that the region between two functions is a `measurable_set`, and then I prove two integral theorems. 
Help from @hrmacbeth and @benjamindavidson.

2021-02-07 21:13:03 f3b0295
chore(measure_theory): use `∞` notation for `(⊤ : ℝ≥0∞)` (#6080)

2021-02-07 21:13:00 5d4d815
feat(analysis): prove that a polynomial function is equivalent to its leading term along at_top, and consequences (#5354)
The main result is `eval_is_equivalent_at_top_eval_lead`, which states that for
any polynomial `P` of degree `n` with leading coeff `a`, the corresponding polynomial
function is equivalent to `a * x^n` as `x` goes to +∞.
We can then use this result to prove various limits for polynomial and rational
functions, depending on the degrees and leading coeffs of the considered polynomials.

2021-02-07 19:35:43 99fe12a
refactor(measure_theory/ae_eq_fun): move emetric to `ae_eq_fun_metric` (#6081)
Cherry-picked from #6042

2021-02-07 19:35:41 5a25827
chore(measure_theory/measure_space): move definition of `measure.ae` up (#6051)

2021-02-07 19:35:39 132b0fe
fix(scripts): make lint-style.* work on macos and windows (#6047)
Make lint-style.sh use a POSIX-portable way of checking for executable bits, and make it always open files as UTF-8.
Also makes CI run the sanity checks across all 3 OSes to ensure this stays working.

2021-02-07 15:56:24 288cc2e
feat(logic/function/basic): add lemma stating that dite of two injective functions is injective if images are disjoint (#5866)
Add lemma stating that dite of two injective functions is injective if their images are disjoint. Part of #5695 in order to prove Hall's Marriage Theorem.

2021-02-07 13:33:58 c25dad9
refactor(analysis/calculus/mean_value): use `is_R_or_C` in more lemmas (#6022)
* use `is_R_or_C` in `convex.norm_image_sub_le*` lemmas;
* replace `strict_fderiv_of_cont_diff` with
  `has_strict_fderiv_at_of_has_fderiv_at_of_continuous_at` and
  `has_strict_deriv_at_of_has_deriv_at_of_continuous_at`, slightly change assumptions;
* add `has_ftaylor_series_up_to_on.has_fderiv_at`,
  `has_ftaylor_series_up_to_on.eventually_has_fderiv_at`,
  `has_ftaylor_series_up_to_on.differentiable_at`;
* add `times_cont_diff_at.has_strict_deriv_at` and
  `times_cont_diff_at.has_strict_deriv_at'`;
* prove that `complex.exp` is strictly differentiable and is an open map;
* add `simp` lemma `interior_mem_nhds`.

2021-02-07 06:54:51 8b1f323
feat(ring_theory/polynomial): Almost Vieta's formula on products of (X + r) (#5696)
The main result is `prod_X_add_C_eq_sum_esymm`, which proves that a product of linear terms is equal to a linear combination of symmetric polynomials. Evaluating the variables of the symmetric polynomials gives Vieta's Formula.

2021-02-07 04:02:36 4b035fc
refactor(analysis/normed_space): upgrade `linear_map.to_continuous_linear_map` to `linear_equiv` (#6072)
This way Lean will simplify, e.g., `f.to_continuous_linear_map = 0` to
`f = 0`.

2021-02-07 02:14:17 736929e
chore(scripts): update nolints.txt (#6073)
I am happy to remove some nolints for you!

2021-02-06 22:54:57 7f467fa
feat(algebra/group/hom): add inv_comp and comp_inv (#6046)
Two missing lemmas. Used in the Liquid Tensor Experiment.
Inversion for monoid hom is (correctly) only defined when the target is a comm_group; this explains the choice of typeclasses. I follow `inv_apply` and use `{}` rather than `[]`, but this is certainly not my area of expertise.

2021-02-06 22:54:56 7c53a16
feat(algebra/ordered_ring): add lemma (#6031)
Add a lemma in algebra.ordered_ring proving the inequality `a + (2 + b) ≤ a * (2 + b)`.
This is again part of the Liouville PR.

2021-02-06 21:31:25 7ec4fcc
feat(category_theory): connected components of a category (#5425)

2021-02-06 20:09:52 a1ebf54
refactor(data/buffer/parser/basic): make valid a class and rename to mono (#6015)

2021-02-06 15:06:18 dbf038d
feat(topology/category): constructor for compact hausdorff spaces (#6068)
`CompHaus.of` constructor. From the lean-liquid project.

2021-02-06 12:13:41 767e6ae
refactor(topology): make two definitions irreducible from the start (#6060)

2021-02-06 08:37:26 2bdeda9
doc(number_theory/*): provide docstrings for basic and dioph (#6063)
The main purpose of this PR is to provide docstrings for the two remaining files without docstring in number_theory, basic and dioph. Furthermore, lines are split in other files, so that there should be no number_theory entries in the style_exceptions file.

2021-02-06 05:00:08 d951b2b
feat(data/nat): division of powers (#6067)
A small missing lemma.

2021-02-06 01:48:21 b8a6f81
chore(scripts): update nolints.txt (#6066)
I am happy to remove some nolints for you!

2021-02-06 01:48:19 b6b90e2
fix(ring_theory/power_series/basic): fix algebra arguments (#6065)
`power_series` is just an alias for `mv_power_series` over `unit`, yet it did not correctly inherit the algebra instance

2021-02-06 01:48:17 94033d8
feat(data/list/basic): simp iffs about *fix nil (#6064)

2021-02-05 22:20:21 0926e67
feat(algebra/star): star_ordered_ring (#4685)

2021-02-05 15:46:37 bd38c5f
chore(linear_algebra): move `is_basis_std_basis` to `std_basis.lean` (#6054)
This is a follow-up to #6020 which moved `std_basis` to a new file: now move results from `basis.lean` to that same file.
CC @eric-wieser

2021-02-05 15:46:35 b5c23ce
feat(data/nat/factorial): non-strict inequality on factorial (#6052)
Add lemmas add_factorial_le_factorial_add and  add_factorial_le_factorial_add'.  These are still used in the Liouville PR.
I should have added them to the previous PR on factorials, but they got lost on the way!

2021-02-05 15:46:33 1ab7cf6
feat(algebra/ordered_ring): proof that `a + b ≤ a * b` (#6043)
This is Johan's proof of the fact above.  If you are curious about the assumptions, there is an extensive discussion on
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology

2021-02-05 15:46:31 fa9bf62
feat(algebra/char_zero): add char_zero lemma for ordered_semirings (#6038)
Relevant Zulip chat:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members

2021-02-05 15:46:28 c2c686e
feat(linear_algebra/multilinear): add more `curry` equivs (#6012)
* `multilinear_map (λ i : ι ⊕ ι', E) F` is equivalent to
  `multilinear_map (λ i : ι, E) (multilinear_map (λ i : ι', E) F)`;
* given `s : finset (fin n)`, `s.card = k`, and `sᶜ.card = l`,
  `multilinear_map (λ i : fin n, E) F` is equivalent to
  `multilinear_map (λ i : fin k, E) (multilinear_map (λ i : fin l, E) F)`.

2021-02-05 15:46:26 dc98547
feat(linear_algebra/projection): Extending maps from complement submodules to the entire module (#5981)
Given two linear maps from complement submodules, `of_is_comp` is the linear map extended to the entire module. 
This is useful whenever we would like to extend a linear map from a submodule to a map on the entire module.

2021-02-05 12:11:35 34e366c
refactor(*): remove uses of @[class] def  (#6028)
Preparation for lean 4, which does not support this idiom.

2021-02-05 12:11:33 c6c7eaf
refactor(topology/algebra/module,analysis/*): merge some `smul` lemmas and defs (#5987)
Generalize some definitions and lemmas about `smul`  and `f : E →L[k] F` so that now they allow scalars from an algebra over `k`. This way we can get rid of `smul_algebra` definitions and lemmas.
In particular, now `continuous_linear_map.smul_right` accepts functions with values in an algebra over `k`, so `smul_right 1 f` now needs a type annotation on `1`.

2021-02-05 12:11:32 392ebec
chore(algebra/algebra/basic): show that the ℚ-algebra structure is unique (#5980)
Note that we already have similar lemmas showing that ℕ and ℤ modules are unique.
The name is based on `rat.algebra_rat`, which provides a canonical instance.

2021-02-05 12:11:29 915bff4
feat(field_theory/polynomial_galois_group): Restriction is surjective (#5961)
Proves surjectivity of `restrict` and `restrict_dvd`.

2021-02-05 12:11:27 e1db909
feat(order/filter): add lattice instance to order.ideal (#5937)
Add lattice instance to `order.ideal P` when the preorder `P` is
actually a `semilattice_sup_bot` (that is, when `P` is a partial
order with all finite suprema).

2021-02-05 12:11:25 70269f3
feat(order/*): introduces complemented lattices (#5747)
Defines `is_complemented` on bounded lattices
Proves facts about complemented modular lattices
Provides two instances of `is_complemented` on submodule lattices

2021-02-05 08:47:31 5391433
feat(algebra/group_power/basic): `pow_add_pow_le` (#6037)
For natural `n ≠ 0` and nonnegative `x, y` in an `ordered_semiring`, `x ^ n + y ^ n ≤ (x + y) ^ n`.

2021-02-05 04:22:35 5cb2865
chore(scripts): update nolints.txt (#6049)
I am happy to remove some nolints for you!

2021-02-05 00:51:27 80c7ac1
feat(algebra/big_operators/order): add fintype.sum_mono and fintype.sum_strict_mono (#6040)

2021-02-05 00:51:25 a101788
fix(tactic/congr): fix trivial congr/convert (#6011)
Now `convert` will prove reflexivity goals even at the top level, before
applying any congruence rules. Under the interpretation of the depth
argument as the number of nested congruence rules applied, we allow
proofs by assumption or reflexivity to work even at depth 0.
Also fixes a bug where
```lean
example {α} (a b : α) : a = b := by congr'
```
would succeed, because `apply proof_irrel` will unify the universe
metavariable in the type of `α` to `Prop`, causing surprising behavior.

2021-02-05 00:51:23 59cfa02
chore(data/quot): rename `lift_on_beta` to `lift_on_mk` (#5921)
This also renames some other `lift_*_beta` lemmas to match their statement.
The [Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/quotient.20.22on_beta.22.20vs.20.22on_mk.22) was unanimously in favor of this rename.

2021-02-04 21:33:38 b9e559b
feat(data/real/ennreal): use notation for ennreal (#6044)
The notation for `ennreal` is `ℝ≥0∞` and it is localized to `ennreal` (though I guess it doesn't have to be?).
Zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Notation.20for.20ennreal

2021-02-04 21:33:36 7734d38
refactor(data/real/basic): make ℝ a structure (#6024)
Preparation for :four_leaf_clover:, which doesn't have irreducible.

2021-02-04 21:33:34 d293822
feat(topology/algebra/infinite_sum, topology/instances/ennreal): extend tsum API (#6017)
Lemma `tsum_lt_of_nonneg` shows that if a sequence `f` with non-negative terms is dominated by a sequence `g` with summable series and at least one term of `f` is strictly smaller than the corresponding term in `g`, then the series of `f` is strictly smaller than the series of `g`.
Besides this lemma, I also added the relevant API in topology.algebra.infinite_sum.

2021-02-04 21:33:32 1ee00c8
feat(number_theory/bernoulli): Results regarding Bernoulli numbers as a generating function (#5957)
We prove that the Bernoulli numbers are generating functions for t/(e^t - 1). Most of the results are proved by @kbuzzard.

2021-02-04 18:03:59 49cf0be
refactor(real): protect real.pi (#6039)
Currently, `real.pi` is not protected. This can conflict with `set.pi`. Since it is most often used as `π` through the `real` locale, let's protect it.

2021-02-04 18:03:58 1a7fb7e
feat(data/list/sort): add sorted.rel_of_mem_take_of_mem_drop (#6027)
Also renames the existing lemmas to enable dot notation

2021-02-04 18:03:56 b98b5f6
chore(data/dfinsupp): add simp lemmas about sum_add_hom, remove commutativity requirement (#5939)
Note that `dfinsupp.sum_add_hom` and `dfinsupp.sum` are not defeq, so its valuable to repeat these lemmas.
The former is often easier to work with because there are no decidability requirements to juggle on equality with zero.
`dfinsupp.single_eq_of_sigma_eq` was a handy lemma for constructing a term-mode proof of `dfinsupp.single` equality.
A lot of the lemmas about `lift_add_hom` have to be repeated for `sum_add_hom` because the former simplifies to the latter before its lemmas get a chance to apply. At least the proofs can be reused.

2021-02-04 18:03:54 6d153f1
feat(data/equiv/basic): perm.subtype_congr (#5875)

2021-02-04 18:03:51 bbf9774
feat(data/fintype/basic): inv of inj on deceq (#5872)

2021-02-04 18:03:49 9993a50
feat(tactic/norm_swap): simplify numeral swaps (#5637)
Explicitly applied swap equalities over `nat` can be proven to be true using `dec_trivial`. However, if occurring in the middle of a larger expression, a separate specialized hypothesis would be necessary to reduce them down. This is an initial attempt at a `norm_num` extension which seeks to reduce down expressions of the `swap X Y Z` form. Handles `nat`, `int`, `rat`, and `fin` swaps.

2021-02-04 14:28:12 4d26028
chore(order/basic): add a lemma expanding `le` on pi types (#6023)

2021-02-04 14:28:10 e61db52
chore(linear_algebra/quadratic_form): add polar_self, polar_zero_left, and polar_zero_right simp lemmas (#6003)
This also reorders the existing lemmas to keep the polar ones separate from the non-polar ones

2021-02-04 12:05:37 1a2eb0b
feat(analysis/special_functions/trigonometric): add mistakenly omitted lemma (#6036)

2021-02-04 12:05:35 16be8e3
refactor(analysis/normed_space): simpler proof of `norm_sub_pow_two` (#6035)
Co-authors: `lean-gptf`, Stanislas Polu

2021-02-04 12:05:34 894ff7a
doc(number_theory/{pell, sum_of_four_squares}): docstring to pell  (#6030)
and additionally fixing the syntax for the docstring of sum_of_four_squares.

2021-02-04 12:05:32 0aed8b1
refactor(analysis/asymptotics): make definitions immediately irreducible (#6021)

2021-02-04 12:05:30 97781b9
chore(linear_algebra/std_basis): move std_basis to a new file (#6020)
linear_algebra/basic is _very_ long. This reduces its length by about 5%.
Authorship of the std_basis stuff seems to come almost entirely from 10a586b1d82098af32e13c8d8448696022132f17.
None of the lemmas have changed, and the variables are kept in exactly the same order as before.

2021-02-04 07:48:51 6df1501
feat(algebra/ordered_ring): weaken hypotheses for one_le_two (#6034)
Adjust `one_le_two` to not require nontriviality.

2021-02-04 03:30:09 3309490
chore(scripts): update nolints.txt (#6032)
I am happy to remove some nolints for you!

2021-02-04 03:30:08 7812afa
feat(data/list/basic): drop_eq_nil_of_le (#6029)

2021-02-04 03:30:06 cbd67cf
feat(order/(complete_lattice, compactly_generated)): independent sets in a complete lattice (#5971)
Defines `complete_lattice.independent`
Shows that this notion of independence is finitary in compactly generated lattices

2021-02-04 03:30:04 5f328b6
feat(linear_algebra/free_algebra): Show that free_monoid forms a basis over free_algebra (#5868)

2021-02-03 23:29:31 36b3510
feat(data/nat/factorial): additional inequalities (#6026)
I added two lemmas about factorials.  I use them in the Liouville PR #4301.

2021-02-03 17:44:44 360fa07
feat(data/real/sqrt): added some missing sqrt lemmas (#5933)
I noticed that some facts about `sqrt` and `abs` are missing, so I am adding them.

2021-02-03 16:02:37 bb15b1c
chore(analysis/calculus): rename `has_f?deriv_at_unique` to `has_f?deriv_at.unique` (#6019)
Also make some lemmas `protected`.

2021-02-03 12:26:39 235a7c4
doc(lint/simp): typesetting issues in simp_nf library note (#6018)

2021-02-03 12:26:38 9a0d2b2
chore(data/nat/parity): rename type variable (#6016)

2021-02-03 12:26:36 fa8df59
feat(algebra/polynomial/big_operators): add degree_prod lemma (#5979)
This PR adds a degree_prod lemma next to the nat_degree_prod lemma. This version of the lemma works for the interpretation of 'degree' which says the degree of the zero polynomial is \bot

2021-02-03 12:26:34 5a9ca8d
feat(linear_algebra/sesquilinear_form): add composition between sesquilinear forms and linear maps (#5729)
Add composition lemmas for sesquilinear forms, that is, given a sesquilinear form and linear maps, a new sesquilinear form is induced by applying the arguments with the linear map.

2021-02-03 09:45:38 e1ca806
doc(algebra/{archimedean, char_zero}): provide docstrings (#6010)

2021-02-03 04:39:23 e66ad5f
chore(scripts): update nolints.txt (#6014)
I am happy to remove some nolints for you!

2021-02-03 04:39:21 79ca6e2
feat(order/compactly_generated): Show that the sublattice below a compact element is coatomic (#5942)
Show that the sublattice below a compact element is coatomic. Introduce a lemma stating that any set lying strictly below a compact element has Sup strictly below that element.
<!--
put comments you want to keep out of the PR commit here.
If this PR depends on other PRs, please list them below this comment,
using the following format:
- [ ] depends on: #abc [optional extra text]
- [ ] depends on: #xyz [optional extra text]
-->

2021-02-03 01:05:51 fcad25f
feat(algebra/ring): add mk_mul_self_of_two_ne_zero (#5862)
Which allows us to make a ring homomorphism from an additive hom which maps squares to squares assuming a couple of  things, this is especially useful in ordered fields where it allows us to think only of positive elements.

2021-02-02 23:11:29 2153dc3
feat(data/fintype/sort): add `fin_sum_equiv_of_finset` (#6008)

2021-02-02 21:38:31 1b1ad15
refactor(measure_theory/*): rename `is_(null_)?measurable` to `(null_)?measurable_set` (#6001)
Search & replace:
* `is_null_measurable` → `null_measurable`;
* `is_measurable` → `measurable_set'`;
* `measurable_set_set` → `measurable_set`;
* `measurable_set_spanning_sets` → `measurable_spanning_sets`;
* `measurable_set_superset` → `measurable_superset`.

2021-02-02 18:29:12 2b2edc9
chore(analysis/normed_space/basic): use explicit arg `𝕜'` in lemmas about `normed_algebra` (#6009)

2021-02-02 18:29:10 4e78654
fix(tactic/delta_instance): improve naming of instances with multiple arguments (#6007)

2021-02-02 18:29:08 fe9c021
feat(geometry/manifold/instances): sphere is a smooth manifold (#5607)
Put a smooth manifold structure on the sphere, and provide tools for constructing smooth maps to and from the sphere.

2021-02-02 14:44:00 dbb5ca1
refactor(group_theory/perm): move perm.subtype_perm to basic (#6005)
Both `perm.subtype_perm` and `perm.of_subtype` can be moved up the import hierarchy out of `group_theory/perm/sign` since they do not rely on any finiteness assumption.

2021-02-02 14:43:58 9b3dc41
feat(nat/basic): more nat.find lemmas (#6002)
also merge two sections on nat.find

2021-02-02 14:43:56 6633a70
feat(analysis/normed_space/inner_product): remove unnecessary `nonneg_im` field (#5999)
The `nonneg_im` property already follows from `conj_sym`.

2021-02-02 14:43:54 508c265
feat(logic/function/basic): add bijective.iff_exists_unique and projections (#5995)

2021-02-02 14:43:51 3732fb9
refactor(data/polynomial/eval): change eval_smul lemmas to use * instead of 2nd smul (#5991)

2021-02-02 14:43:49 ff05d3a
feat(algebra/group_power/lemmas): sign of even/odd powers (#5990)
Added theorems about the sign of even and odd natural powers.

2021-02-02 14:43:46 25c34e0
refactor(linear_algebra,algebra/algebra): generalize `linear_map.smul_right` (#5967)
* the new `linear_map.smul_right` generalizes both the old
  `linear_map.smul_right` and the old `linear_map.smul_algebra_right`;
* add `smul_comm_class` for `linear_map`s.

2021-02-02 14:43:44 fc7daa3
feat(data/nat/parity): addition/subtraction of even/odd nats (#5934)
 Added various theorems pertaining to the addition and subtraction of even and odd natural numbers.

2021-02-02 14:43:42 893ce8b
feat(tactic/norm_fin): tactic for normalizing `fin n` expressions (#5820)
This is based on #5791, with a new implementation using the
`normalize_fin` function.

2021-02-02 11:46:18 75a7ce9
refactor(*): rename subtype_congr to subtype_equiv (#6004)
This definition is closely related to `perm.subtype_perm`, so renaming will bring them closer in use. Also releavnt is #5875 which defines a separate `perm.subtype_congr`.

2021-02-02 07:14:15 fec8ee4
chore(topology/bases): rewrite 2 proofs using tactic mode (#5996)
IMHO they're more readable that way

2021-02-02 04:14:06 0c26bb0
feat(data/finset/basic): add lemmas about bUnion and images of functions on finsets (#5887)
Add lemmas about bUnion and images of functions on finsets. Part of #5695 in order to prove Hall's marriage theorem.
Coauthors: @kmill @b-mehta

2021-02-02 02:06:24 2c62c0b
chore(scripts): update nolints.txt (#6006)
I am happy to remove some nolints for you!

2021-02-02 02:06:21 a301ef7
feat(order/compactly_generated, ring_theory/noetherian): the lattice of submodules is compactly generated (#5944)
Redefines `is_compactly_generated` as a class
Provides an instance of `is_compactly_generated` on `submodule R M`

2021-02-01 22:55:52 4d3b26f
feat(combinatorics/simple_graph/basic): add decidable instance for adjacency of complement (#6000)
Add instance that states that, if the adjacency relation for a simple graph is decidable, the adjacency relation for its complement is also decidable.

2021-02-01 22:55:50 1706e55
feat(data/list/basic) add update_nth_comm (#5989)
As requested on Zulip at https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/list.2Eupdate_nth_comm/near/223007424

2021-02-01 22:55:48 9b779f4
refactor(ring_theory/ideal/*, ring_theory/jacobson): use `comm_semiring` instead of `comm_ring` for ideals (#5954)
This is the second pass at refactoring the definition of `ideal`.  I have changed a `comm_ring` assumption to a `comm_semiring` assumption on many of the lemmas in `ring_theory/ideal/basic`.  Most implied changes were very simple, with the usual exception of `jacobson`.
I also moved out of `jacobson` the lemmas that were left-over from the previous refactor in this sequence.
Besides changing such assumptions on other files, many of the lemmas in `ring_theory/ideal/basic` still using `comm_ring` and without explicit subtractions, deal with quotients.

2021-02-01 19:15:19 829c1a5
chore(group_theory/coset): rename lemmas to follow naming conventions (#5998)
Rename `normal_of_eq_cosets` and `eq_cosets_of_normal` to follow naming conventions. Conclusion should be stated before the `of`.

2021-02-01 19:15:16 684f4f5
chore(*): split some long lines (#5997)

2021-02-01 19:15:14 acabfa6
fix(archive/imo/*): fixed syntax for docstrings (#5994)

2021-02-01 19:15:11 a84a80d
fix(topology/algebra/infinite_sum): add missing decidable arguments (#5993)
These decidable instances were being inferred as classical instances, which meant these lemmas would not match other instances.

2021-02-01 19:15:09 64283ce
feat(list/{zip,indexes}): Add `zip_with` and `map_with_index` lemmas (#5974)
All proofs are due to @pechersky.

2021-02-01 15:46:19 cbd88d6
chore(*) add mod_add_div' and div_add_mod' and golf proofs (#5962)
Resolves issue #1534.
Name of nat.mod_add_div shouldn't be changed as this is in core. Better name suggestions for mod_add_div' and div_add_mod' welcome.

2021-02-01 12:31:43 866e4fd
chore(linear_algebra/quadratic_form): add two missing simp lemmas about subtraction (#5985)
This also reorders the instance definitions to keep the lemmas about subtraction near the ones about negation, and uses the `add := (+)` pattern to make definitions unfold more nicely, even though it probably doesn't make any difference.

2021-02-01 12:31:41 f2c84aa
doc(algebra/category/*): provide two short docstrings and shorten lines (#5984)
also fixed one minor typo.

2021-02-01 12:31:39 b1ab310
chore(analysis/normed_space/inner_product): add {bilin,sesq}_form_of_inner_apply simp lemmas (#5982)

2021-02-01 12:31:37 398e7ad
feat(data/pnat/basic) pnat can_lift instances (#5977)
Add can_lift instances for pnat from nat and int

2021-02-01 12:31:35 89c7963
feat(category_theory/nat_iso): dsimp lemma for natural isomorphisms (#5973)
a little simp lemma

2021-02-01 12:31:33 8273588
chore(category_theory/monad): generate simp lemmas (#5972)
Adds a missing simps command to generate simp lemmas for the functor.

2021-02-01 12:31:31 3f9b035
chore(category_theory/adjunction): reflective lemmas (#5968)
Improves the docstring and changes the name to be more appropriate (the lemma has nothing to do with essential images).

2021-02-01 09:10:42 c5e0d10
chore(*): split some long lines (#5988)

2021-02-01 03:11:45 f060e09
chore(*): golf some proofs (#5983)
API changes:
* new lemmas `finset.card_filter_le`, `finset.compl_filter`, `finset.card_lt_univ_of_not_mem`, `fintype.card_le_of_embedding`, `fintype.card_lt_of_injective_not_surjective`;
* rename `finset.card_le_of_inj_on` → `finset.le_card_of_inj_on_range`;
* rename `card_lt_of_injective_of_not_mem` to `fintype.card_lt_of_injective_of_not_mem`;
* generalize `card_units_lt` to a `monoid_with_zero`.

2021-02-01 01:50:40 609f5f7
chore(scripts): update nolints.txt (#5986)
I am happy to remove some nolints for you!

2021-01-31 18:12:02 a15e64a
refactor(data/polynomial/degree/definitions): rw -> exact, use term mode proof (#5946)
Co-authors: `lean-gptf`, Stanislas Polu

2021-01-31 06:59:28 4f4a9b5
feat(analysis/analytic/inverse): inverse of a formal multilinear series (#5852)
We construct the left inverse and a right inverse of a formal multilinear series with invertible first term, and we show that they coincide.

2021-01-31 01:46:38 1ea538b
chore(scripts): update nolints.txt (#5976)
I am happy to remove some nolints for you!

2021-01-30 22:44:52 ae1b530
chore(algebra/algebra/basic): add simp lemma about `algebra_map ℚ` (#5970)
Since there is a subsingleton instance over ring_homs, we may as well let the simplifier replace `algebra_map` with `id`.

2021-01-30 22:44:50 f596077
feat(geometry/manifold/instances): sphere is a topological manifold (#5591)
Construct stereographic projection, as a local homeomorphism from the unit sphere in an inner product space `E` to a hyperplane in `E`.  Make a charted space instance for the sphere, with these stereographic projections as the atlas.

2021-01-30 20:09:59 a6c0442
feat(field_theory/normal): Restriction is surjective (#5960)
Proves surjectivity of `alg_equiv.restrict_normal_hom`.
Also proves a bijectivity lemma which gives a cleaner construction of `alg_equiv.restrict_normal`.

2021-01-30 20:09:57 48d0592
feat(algebra/lie/basic): define derived length and semisimple Lie algebras (#5930)
We also provide proofs of some basic characterisations

2021-01-30 18:21:17 539550d
feat(topology/instances/nnreal): add has_sum_nat_add_iff and module docstring (#5716)

2021-01-30 14:50:34 d6fe605
chore(*): split some long lines (#5959)

2021-01-30 10:07:38 8069521
feat(measure_theory): Absolute continuity (#5948)
* Define absolute continuity between measures (@mzinkevi)
* State monotonicity of `ae_measurable` w.r.t. absolute continuity
* Weaken some `measurable` assumptions in `prod.lean` to `ae_measurable`
* Some docstring fixes
* Some cleanup

2021-01-30 08:05:04 cf21863
doc(group_theory/order_of_element): Adding doc string (#5936)

2021-01-30 06:47:28 cbcbaa0
feat(topology/category): compact hausdorff spaces are reflective in Top (#5955)
Show explicitly that `CompHaus_to_Top` is a reflective functor via the Stone-Cech compactification.

2021-01-30 01:48:52 b44e9dd
chore(scripts): update nolints.txt (#5965)
I am happy to remove some nolints for you!

2021-01-29 21:16:04 686d005
chore(*): fix some "line too long" lint errors by rewriting proofs/statements (#5958)

2021-01-29 19:10:11 e8e0526
feat(field_theory/polynomial_galois_group): New file (#5861)
This PR adds the file `polynomial_galois_group`. It contains some of the groundwork needed for proving the Abel-Ruffini theorem.

2021-01-29 17:21:20 62cf420
ci(lint-style): adjust output to integrate with github (#5952)

2021-01-29 17:21:18 657cfeb
doc(algebra/polynomial/big_operators): add / fix docstrings and lint (#5950)

2021-01-29 17:21:16 aabb843
feat(analysis/normed_space/inner_product): existence of isometry to Euclidean space (#5949)
A finite-dimensional inner product space admits an isometry (expressed using the new `linear_isometry_equiv` structure of #5867, cc @urkud) to Euclidean space.

2021-01-29 17:21:14 0d18179
chore(analysis/normed_space/multilinear): rename variables (#5929)
Use `E` and `E'` for indexed types and `G` and `G'` for `Type*`s.

2021-01-29 15:28:07 9c5064c
chore(linear_algebra/linear_independent): relax requirements to semiring and division_ring (#5953)
No lemma names or proofs were changed, this just reordered some lemmas so that they could be put into sections with weaker requirements.

2021-01-29 14:19:09 783e11a
fix(scripts): fix mixing absolute and relative paths to the linter (#5810)
Fix providing either relative or absolute paths to the linter.
Make the linter emit outputted paths corresponding to the ones passed on the command line -- relative if relative, absolute if absolute.
Also adds a short set of tests.
Reported in: https://leanprover.zulipchat.com/#narrow/stream/208328-IMO-grand-challenge/topic/2013.20Q5 (and introduced in #5721).

2021-01-29 11:30:18 41decdb
chore(combinatorics/simple_graph/basic): remove classical locale (#5951)
This completes the simple graph part of the refactor that removed classical fintype instances.

2021-01-29 11:30:16 15217c2
refactor(topology/local_homeomorph): simplify `prod_trans` (#5915)
10X faster elaboration
(pretty-printed) proof term length 14637 -> 2046
Co-authors: `lean-gptf`, Stanislas Polu

2021-01-29 09:42:09 bbec099
refactor(data/real/nnreal): shorter proof of `div_lt_iff` (#5945)
Co-authors: `lean-gptf`, Stanislas Polu

2021-01-29 06:49:21 145f127
feat(ring_theory/polynomial/chebyshev/defs): Chebyshev polynomials of the second kind (#5793)
This will define Chebyshev polynomials of the second kind and introduce some basic properties:
- [x] Define Chebyshev polynomials of the second kind.
- [x] Relate Chebyshev polynomials of the first and second kind through recursive formulae
- [x] Prove trigonometric identity regarding Chebyshev polynomials of the second kind
- [x] Compute the derivative of the Chebyshev polynomials of the first kind in terms of the Chebyshev polynomials of the second kind. 
- [x] Compute the derivative of the Chebyshev polynomials of the second kind in terms of the Chebyshev polynomials of the first kind.

2021-01-29 04:36:40 1edd85c
chore(scripts): update nolints.txt (#5947)
I am happy to remove some nolints for you!

2021-01-29 01:34:13 4dca6e1
chore(data/fintype/basic): Remove duplicate instance (#5943)
We already have `subtype.fintype`, there is no need for `fintype.subtype_of_fintype` which does the same thing

2021-01-28 23:59:53 69e7f14
chore(combinatorics/simple_graph): generalise decidability proofs (#5938)
This generalises the decidable instances so they're more applicable, and also golfs the proofs.

2021-01-28 20:36:43 2cbaa9c
feat(data/list/basic): add diff_erase (#5941)

2021-01-28 19:15:38 2870212
chore(data/sym2): golf decidability proofs (#5940)
This golfs the decidable instances, and removes a redundant one (`from_rel.decidable_as_set` is automatically inferred from `from_rel.decidable_pred`)

2021-01-28 16:36:05 645dc60
refactor(analysis/calculus/inverse): inverse of C^k functions over R or C (#5926)
Some results on the local inverse of smooth functions are currently formulated only for real functions, but they work as well for complex functions. We formulate them uniformly, assuming `is_R_or_C`.

2021-01-28 13:17:00 c43c709
fix(data/dfinsupp): fix overly strict type-class arguments (#5935)

2021-01-28 08:12:08 82481e3
feat(analysis/normed_space/inner_product): existence of orthonormal basis (#5734)
Define `orthonormal` sets (indexed) of vectors in an inner product space `E`.  Show that a finite-dimensional inner product space has an orthonormal basis.
Co-authored by: Busiso Chisala

2021-01-28 01:39:54 9545445
chore(scripts): update nolints.txt (#5931)
I am happy to remove some nolints for you!

2021-01-27 23:19:08 6585eff
feat(archive/imo): formalize IMO 2013 problem Q5 (#5787)

2021-01-27 21:59:34 3e59960
feat(ring_theory/nullstellensatz): Classical Nullstellensatz (#5760)
This file states and proves Hilbert's classical nullstellensatz for multi-variate polynomials over an algebraically closed field.

2021-01-27 18:19:45 4cc0d52
refactor(data/set/basic): simpler proofs (#5920)
This replaces many uses of `simp` and `finish` with direct term proofs
to speed up the overall compilation of the file.
This PR is WIP in the sense that not all of `set.basic` is converted,
but there are no dependencies between the changes so this can be merged
at any point.

2021-01-27 18:19:43 8af7e08
feat(data/fintype/basic): make subtype_of_fintype computable (#5919)
This smokes out a few places downstream that are missing decidability hypotheses needed for the fintype instance to exist.

2021-01-27 18:19:41 f45dee4
feat(algebra/*,linear_algebra/basic,ring_theory/ideal): lemmas about span of finite subsets and nontrivial maximal ideals (#5641)

2021-01-27 18:19:40 32fdb81
feat(data/zsqrtd/to_real): Add `to_real` (#5640)
Also adds `norm_eq_zero`, and replaces some calls to simp with direct lemma applications

2021-01-27 16:19:52 1011601
feat(algebra/continued_fractions): add termination iff rat lemmas (#4867)
### What
Show that the computation of a continued fraction terminates if and only if we compute the continued fraction of a rational number.
### How
1. Show that every intermediate operation involved in the computation of a continued fraction returns a value that has a rational counterpart. This then shows that a terminating continued fraction corresponds to a rational value.
2. Show that the operations involved in the computation of a continued fraction for rational numbers only return results that can be lifted to the result of the same operations done on an equal value in a suitable linear ordered, archimedean field with a floor function.
3. Show that the continued fraction of a rational number terminates.
4. Set up the needed coercions to express the results above starting from [here](https://github.com/leanprover-community/mathlib/compare/kappelmann_termination_iff_rat?expand=1#diff-1dbcf8473152b2d8fca024352bd899af37669b8af18792262c2d5d6f31148971R129). I did not know where to put these lemmas. Please let me know your opinion.
4. Extract 4 auxiliary lemmas that are not specific to continued fraction but more generally about rational numbers, integers, and natural numbers starting from [here](https://github.com/leanprover-community/mathlib/compare/kappelmann_termination_iff_rat?expand=1#diff-1dbcf8473152b2d8fca024352bd899af37669b8af18792262c2d5d6f31148971R28). Again, I did not know where to put these. Please let me know your opinion.

2021-01-27 12:14:38 9adf9bb
feat(order/ideal): add partial_order instance to order.ideal (#5909)
Add some instances for `order.ideal`, some of them conditional on
having extra structure on the carrier preorder `P`:
* In all cases, `ideal P` is a partial order.
* If `P` has a bottom element, so does `ideal P`.
* If `P` has a top element, so does `ideal P`.
  (Although this could be weekened to `P` being directed.)
Also, add some `@[ext]`, `@[simp]`, `@[trans]` lemmas.

2021-01-27 12:14:36 7244b43
refactor(topology/local_homeomorph): simpler proof of `prod_symm` (#5906)
17X smaller proof
co-authors: `lean-gptf`, Stanislas Polu

2021-01-27 12:14:34 a859f10
refactor(computability/primrec): simpler proof of `primrec.of_equiv` (#5905)
12X smaller proof term
co-authors: `lean-gptf`, Stanislas Polu

2021-01-27 12:14:32 35638ed
refactor(data/set/basic): simpler proof of `union_subset_iff` (#5904)
12X smaller proof term
co-authors: `lean-gptf`, Stanislas Polu

2021-01-27 12:14:30 c64aa13
chore(*): bump to lean-3.26.0 (#5895)

2021-01-27 12:14:28 78a518a
feat(measure_theory/independence): define independence of sets of sets, measurable spaces, sets, functions (#5848)
This first PR about independence contains definitions, a few lemmas about independence of unions/intersections of sets of sets, and a proof that two measurable spaces are independent iff generating pi-systems are independent (included in this PR to demonstrate usability of the definitions).

2021-01-27 08:42:04 e5f9409
refactor(category_theory/abelian): golf `mono_of_kernel_ι_eq_zero` (#5914)
Co-authors: `lean-gptf`, Stanislas Polu

2021-01-27 08:41:59 1688b3e
refactor(data/complex/exponential): simplify proof of `tan_eq_sin_div_cos` (#5913)
Co-authors: `lean-gptf`, Stanislas Polu

2021-01-27 08:41:57 e927930
refactor(data/holor): simp -> refl (#5912)
Co-authors: `lean-gptf`, Stanislas Polu

2021-01-27 08:41:55 38f6e05
refactor(algebra/category/Group/limits): simp -> refl (#5911)
Co-authors: `lean-gptf`, Stanislas Polu

2021-01-27 08:41:53 6eae630
refactor(data/real/golden_ratio): simpler proof of `gold_pos` (#5910)
13X smaller (pretty-printed) proof term
Co-authors: `lean-gptf`, Stanislas Polu

2021-01-27 08:41:51 e9a1e2b
refactor(data/pequiv): simpler proof of `pequiv.of_set_univ` (#5907)
17X smaller proof
co-authors: `lean-gptf`, Stanislas Polu

2021-01-27 08:41:50 fd55e57
refactor(algebra/group/basic): simp -> rw in `sub_eq_sub_iff_sub_eq_sub` (#5903)
co-authors: `lean-gptf`, Yuhuai Wu

2021-01-27 08:41:48 1cd2286
chore(data/finset/preimage): add missing simp lemmas (#5902)

2021-01-27 08:41:46 20d6b6a
chore(*): add more simp lemmas, refactor theorems about `fintype.sum` (#5888)
* `finset.prod_sum_elim`, `finset.sum_sum_elim`: use `finset.map`
  instead of `finset.image`;
* add `multilinear_map.coe_mk_continuous`,
  `finset.order_emb_of_fin_mem`, `fintype.univ_sum_type`,
  `fintype.prod_sum_elim`, `sum.update_elim_inl`,
  `sum.update_elim_inr`, `sum.update_inl_comp_inl`,
  `sum.update_inl_comp_inr`, `sum.update_inr_comp_inl`,
  `sum.update_inr_comp_inr` and `apply` versions of `sum.*_comp_*` lemmas,
* move some lemmas about `function.update` from `data.set.function` to `logic.function.basic`;
* rename `sum.elim_injective` to `function.injective.sum_elim`
* `simps` lemmas for `function.embedding.inl` and
  `function.embedding.inr`;
* for `e : α ≃o β`, simplify `e.to_equiv.symm` to `e.symm_to_equiv`;
* add `continuous_multilinear_map.to_multilinear_map_add`,
  `continuous_multilinear_map.to_multilinear_map_smul`, and `simps`
  for `continuous_multilinear_map.to_multilinear_map_linear`.

2021-01-27 08:41:44 21e9d42
feat(algebra/euclidean_domain): Unify occurences of div_add_mod and mod_add_div (#5884)
Adding the corresponding commutative version at several places (euclidean domain, nat, pnat, int) whenever there is the other version. 
In subsequent PRs other proofs in the library which now use some version of `add_comm, exact div_add_mod` or `add_comm, exact mod_add_div` should be golfed.
Trying to address issue #1534

2021-01-27 08:41:42 688772e
refactor(ring_theory/ideal ring_theory/jacobson): allow `ideal` in a `comm_semiring` (#5879)
At the moment, `ideal` requires the underlying ring to be a `comm_ring`.  This changes in this PR and the underlying ring can now be a `comm_semiring`.  There is a discussion about merits and issues in this Zulip chat:
https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/(comm_)semiring.3A.20examples.3F
At the moment, this PR changes the definition and adapts, mostly `ring_theory/jacobson`, to avoid deterministic timeouts.  In future PRs, I will start changing hypotheses on lemmas involving `ideal` to use the more general framework.
A note: the file `ring_theory/jacobson` might require further improvements.  If possible, I would like this change to push through without cluttering it with changes to that file.  If there is a way of accepting this change and then proceeding to the changes in `jacobson`, that would be ideal!  If it needs to be done at the same time, then so be it!

2021-01-27 08:41:40 b2c5d9b
feat(ring_theory/noetherian, linear_algebra/basic): Show that finitely generated submodules are the compact elements in the submodule lattice (#5871)
Show that a submodule is finitely generated if and only if it is a compact lattice element. Add lemma showing that any submodule is the supremum of the spans of its elements.

2021-01-27 08:41:39 7f04253
feat(field_theory/adjoin): Generalize alg_hom_mk_adjoin_splits to infinite sets (#5860)
This PR uses Zorn's lemma to generalize `alg_hom_mk_adjoin_splits` to infinite sets.
The proof is rather long, but I think that the result is worth it. It should allow me to prove that if E/F is any normal extension then any automorphism of F lifts to an automorphism of E.

2021-01-27 08:41:36 e95928c
feat(field_theory/normal): Restrict to normal subfield (#5845)
Now that we know that splitting fields are normal, it makes sense to move the results of #5562 to `normal.lean`.

2021-01-27 08:41:35 61491ca
feat(linear_algebra/matrix): A vector is zero iff its dot product with every vector is zero (#5837)

2021-01-27 08:41:33 31edca8
chore(data/finsupp,data/dfinsupp,algebra/big_operators): add missing lemmas about sums of bundled functions (#5834)
This adds missing lemmas about how `{finset,finsupp,dfinsupp}.{prod,sum}` acts on {coercion,application,evaluation} of `{add_monoid_hom,monoid_hom,linear_map}`. Specifically, it:
* adds the lemmas:
  * `monoid_hom.coe_prod`
  * `monoid_hom.map_dfinsupp_prod`
  * `monoid_hom.dfinsupp_prod_apply`
  * `monoid_hom.finsupp_prod_apply`
  * `monoid_hom.coe_dfinsupp_prod`
  * `monoid_hom.coe_finsupp_prod`
  * that are the additive versions of the above for `add_monoid_hom`.
  * `linear_map.map_dfinsupp_sum`
  * `linear_map.dfinsupp_sum_apply`
  * `linear_map.finsupp_sum_apply`
  * `linear_map.coe_dfinsupp_sum`
  * `linear_map.coe_finsupp_sum`
* Renames `linear_map.finsupp_sum` to `linear_map.map_finsupp_sum` for consistency with `linear_map.map_sum`.
* Adds a new `monoid_hom.coe_fn` definition

2021-01-27 08:41:30 aa8980d
chore(category_theory/monad): comonadic adjunction (#5770)
Defines comonadic adjunctions dual to what's already there

2021-01-27 08:41:28 3b6d6d7
chore(data/fintype/basic): Add simp lemma about finset.univ (#5708)

2021-01-27 08:41:26 00b88eb
feat(data/polynomial/denominators): add file denominators (#5587)
The main goal of this PR is to establish that `b^deg(f)*f(a/b)` is an expression not involving denominators.
The first lemma, `induction_with_nat_degree_le` is an induction principle for polynomials, where the inductive hypothesis has a bound on the degree of the polynomial.  This allows to build the proof by tearing apart a polynomial into its monomials, while remembering the overall degree of the polynomial itself.  This lemma might be a better fit for the file `data.polynomial.induction`.

2021-01-27 05:12:41 394d357
refactor(data/nat/factorial): simpler proof of `mul_factorial_pred` (#5917)
Co-authors: `lean-gptf`, Stanislas Polu

2021-01-27 05:12:39 d41781c
refactor(topology/metric_space): simplify `dist_triangle` proofs (#5916)
Co-authors: `lean-gptf`, Stanislas Polu

2021-01-27 05:12:37 4e4298e
chore(*): split long lines (#5908)

2021-01-27 05:12:35 47e2f80
chore(*): Replace integral_domain assumptions with no_zero_divisors (#5877)
This removes unnecessary `nontrivial` assumptions, and reduces some `comm_ring` requirements to `comm_semiring`.
This also adds some missing `nontrivial` and `no_zero_divisors` instances.

2021-01-27 01:48:38 19bb470
chore(scripts): update nolints.txt (#5918)
I am happy to remove some nolints for you!

2021-01-27 01:48:34 9173005
chore(tactic/finish): Remove broken ifinish (#5897)
See https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/intuitionistic.20logic/near/224013270

2021-01-27 01:48:32 1ddb93a
feat(analysis/normed_space): define linear isometries (#5867)
* define `linear_isometry` and `linear_isometry_equiv`;
* add `linear_map.ker_eq_bot_of_inverse`;
* replace `inv_fun_apply` lemmas with `inv_fun_eq_symm`;
* golf some proofs in `linear_algebra/finite_dimensional`.

2021-01-27 01:48:30 1eb1293
feat(archive/imo): formalize IMO 2011 problem Q3 (#5842)

2021-01-26 22:43:47 531bcd8
feat(data/real/{nnreal,ennreal}, topology/instances/ennreal): add of_real_(sum/prod/tsum) for nnreal and ennreal (#5896)
We remark that if all terms of a real sum are nonnegative, `nnreal.of_real` of the sum is equal to the sum of the `nnreal.of_real`. Idem for `ennreal.of_real`, for products and `tsum`.

2021-01-26 22:43:45 8c732b2
feat(data/finset/basic): card_subtype simp lemma (#5894)

2021-01-26 16:37:25 547d67f
feat(analysis/{analytic,calculus}): an analytic function is strictly differentiable (#5878)

2021-01-26 04:21:27 44fd23d
chore(data/finset): Rename bind to bUnion (#5813)
This commit renames `finset.bind` to `finset.bUnion`.  While this is the monadic bind operation, conceptually it's doing a bounded union of an indexed family of finite sets.  This will help with discoverability of this function.
There was a name conflict in `data.finset.lattice` due to this, since there are a number of theorems about the `set` version of `bUnion`, and for these I prefixed the lemmas with `set_`.

2021-01-26 01:48:59 01a7cde
chore(scripts): update nolints.txt (#5892)
I am happy to remove some nolints for you!

2021-01-25 17:49:34 5491c59
feat(data/fintype/basic): add lemmas about finsets and cardinality (#5886)
Add lemmas about finsets and cardinality. Part of #5695 in order to prove Hall's marriage theorem.
Coauthors: @kmill @b-mehta

2021-01-25 17:49:32 7f25aa7
chore(algebra/group_with_zero): correct instance name (#5885)
The argument for this definition is `cancel_monoid_with_zero`, not `comm_cancel_monoid_with_zero`.

2021-01-25 17:49:30 3a16e9f
feat(data/set/finite): add to_finset lemma (#5883)
Add lemma stating that taking to_finset of the union of two sets is the same as taking the union of to_finset of the sets.

2021-01-25 17:49:28 ba87647
feat(data/set/finite): add lemma about to_finset of complement of set (#5881)
Add lemma stating that taking to_finset of the complement of a set is the same thing as taking the complement of to_finset of the set.

2021-01-25 17:49:25 7188d80
chore(algebra/pi_tensor_product): Replace use of classical with decidable_eq (#5880)
This makes it consistent with `multilinear_map`, which also uses explicit decidability assumptions

2021-01-25 17:49:23 1dfa81a
feat(analysis/normed_space/inner_product): double orthogonal complement is closure (#5876)
Put a submodule structure on the closure (as a set in a topological space) of a submodule of a topological module.  Show that in a complete inner product space, the double orthogonal complement of a submodule is its closure.

2021-01-25 17:49:21 ee750e3
chore(algebra): a few more `@[mono]` tags (#5874)

2021-01-25 16:06:54 6d80634
feat(measure_theory/{measure_space, borel_space, integration}): prove ae_measurable for various limits (#5849)
For a sequence of `ae_measurable` functions verifying some pointwise property almost everywhere, introduce a sequence of measurable functions verifying the same property and use it to prove ae-measurability of `is_lub`, `is_glb`, `supr`, `infi`, and almost everywhere pointwise limit.

2021-01-25 14:56:46 d6d4435
chore(archive/sensitivity): split long lines (#5882)

2021-01-25 05:26:45 9117ad7
feat(order/atoms): define (co)atomic, (co)atomistic lattices (#5588)
Define (co)atomic, (co)atomistic lattices
Relate these lattice definitions
Provide basic subtype instances

2021-01-25 04:13:48 87202fe
chore(scripts): update nolints.txt (#5873)
I am happy to remove some nolints for you!

2021-01-25 01:08:37 507c7ff
feat(analysis/specific_limits): formula for `∑' n, n * r ^ n` (#5835)
Also prove that `∑' n, n ^ k * r ^ n` is summable for any `k : ℕ`,
`∥r∥ < 1`.

2021-01-24 23:21:23 5222db0
chore(linear_algebra/multilinear): Relax ring to semiring, add_comm_group to add_comm_monoid (#5870)

2021-01-24 20:25:01 fbabe42
feat(order/complete_well_founded, data/finset/lattice): introduce compact elements of a complete lattice and characterize compact lattices as those with all elements compact (#5825)
Provide a definition of compact elements. Prove the equivalence of two characterizations of compact elements. Add "all elements are compact" to the equivalent characterizations of compact lattices. Introduce an auxiliary lemma about finite sups and directed sets.
<!--
A reference for the two equivalent definitions of compact element can be found [here](https://ncatlab.org/nlab/show/compact+element+in+a+lattice)
-->

2021-01-24 13:41:30 5db7a18
feat(data/nat/basic): add decidable_exists_lt deciding existence of a natural below a bound satisfying a predicate (#5864)
Given a decidable predicate `P` on naturals it is decidable if there is a natural below any bound satisying the `P`.
closes #5755

2021-01-24 10:50:05 49c53d4
feat(measure_theory/lp_space): define Lp, subtype of ae_eq_fun with finite norm (#5853)

2021-01-24 06:50:40 aa744db
feat(topology/subset_properties): a locally compact space with second countable topology is sigma compact (#5689)
* add `set.subsingleton.induction_on`, `set.Union_eq_univ_iff`, and `set.bUnion_eq_univ_iff`;
* make `tactic.interactive.nontrivial` try `apply_instance` before
  `simp`;
* add `dense.inter_nhds_nonempty`;
* a subsingleton is compact (lemma for sets, instance for spaces);
* in a locally compact space, every point has a compact neighborhood;
* a compact space is sigma compact;
* a locally compact space with second countable topology is sigma
  compact;
* add `dense.bUnion_uniformity_ball`: the uniform neighborhoods of all
  points of a dense set cover the whole space
Some of these changes are leftovers from a failed attempt to prove a
wrong statement.

2021-01-24 03:45:38 f414fca
feat(analysis/analytic/composition): filling small holes in existing API (#5822)
This PR expands the existing API around the composition of formal multilinear series.
Also makes the `finset` argument to `finset.prod_subtype` and `finset.add_subtype` explicit instead of implicit.

2021-01-24 02:20:04 160d243
chore(scripts): update nolints.txt (#5865)
I am happy to remove some nolints for you!

2021-01-23 13:02:18 8da574f
feat(algebra/pointwise): a lemma about pointwise addition/multiplication of bdd_above sets (#5859)

2021-01-23 13:02:16 3a136f8
refactor(analysis/analytic/composition): extend definition, extract a lemma from a proof (#5850)
Extract a standalone lemma of the proof that the composition of two analytic functions is well-behaved, and extend a little bit the definition of the sets which are involved in the corresponding change of variables.

2021-01-23 11:06:24 74760f2
chore(set_theory/ordinal): use rel_iso notation in ordinal (#5857)

2021-01-23 07:40:00 013b902
feat(order/rel_iso): generalise several lemmas to assume only has_le not preorder (#5858)

2021-01-23 02:17:47 b0e874e
chore(scripts): update nolints.txt (#5856)
I am happy to remove some nolints for you!

2021-01-22 21:50:00 04972f6
docs(undergrad.yaml): update with #5724 and #5788 (#5855)
Add results from a couple of recent PRs.  Also correct an apparent oversight from the translation of the file.

2021-01-22 17:20:38 3250fc3
feat(analysis/mean_inequalities, measure_theory/lp_space): extend mem_Lp.add to all p in ennreal (#5828)
Show `(a ^ q + b ^ q) ^ (1/q) ≤ (a ^ p + b ^ p) ^ (1/p)` for `a,b : ennreal` and `0 < p <= q`.
Use it to show that for `p <= 1`, if measurable functions `f` and `g` are in Lp, `f+g` is also in Lp (the case `1 <= p` is already done).

2021-01-22 16:01:54 f48ce7e
feat(algebra/lie/basic): define the radical of a Lie algebra and prove it is solvable (#5833)

2021-01-22 12:52:31 cb618e0
feat(analysis/analytic): a continuous linear map defines an analytic function (#5840)
Also add convenience lemmas with conclusion `radius = ⊤`.

2021-01-22 12:52:30 faba9ce
chore(algebra/group_power): generalize `semiring` version of Bernoulli's inequality (#5831)
Now `one_add_mul_le_pow'` assumes `0 ≤ a * a`, `0 ≤ (1 + a) * (1 +
a)`, and `0 ≤ 2 + a`.
Also add a couple of convenience lemmas.

2021-01-22 12:52:28 0feb1d2
feat(measure_theory/interval_integral) : add integration by parts (#5724)
A direct application of FTC-2 for interval_integral.

2021-01-22 12:52:26 de10203
feat(order/modular_lattice): define modular lattices (#5564)
Defines modular lattices
Defines the diamond isomorphisms in a modular lattice
Places `is_modular_lattice` instances on a `distrib_lattice`, the lattice of `subgroup`s of a `comm_group`, and the lattice of `submodule`s of a `module`.

2021-01-22 09:40:49 38ae9b3
chore(data/nat/basic): reuse a proof, drop a duplicate (#5836)
Drop `nat.div_mul_le_self'`, use `nat.div_mul_le_self` instead.

2021-01-22 07:39:51 8b4c455
feat(data/polynomial/algebra_map): aeval_map (#5843)
Proves `aeval_map`, which relates `aeval` within an `is_scalar_tower`.

2021-01-22 06:16:16 bef50a4
feat(field_theory/minpoly): Minimal polynomials of degree one (#5844)
If the minimal polynomial has degree one then the element in question lies in the base ring.

2021-01-22 04:19:57 6958d8c
feat(topology/metric_space/{basic,emetric_space}): product of balls of the same size (#5846)

2021-01-22 02:55:27 244b3ed
chore(scripts): update nolints.txt (#5841)
I am happy to remove some nolints for you!

2021-01-21 23:47:37 c681f48
chore(analysis/analytic/composition): minor golfing (#5839)

2021-01-21 23:47:32 228c00b
feat(computability/language): le on languages (#5704)

2021-01-21 20:47:04 b2ca761
chore(algebra/group_power): add `(a+b)^2=a^2+2ab+b^2` (#5838)
Also generalize 2 lemmas from `comm_semiring` to `semiring`.

2021-01-21 18:59:17 fac0f25
fix(tactic/default): make field_simp work with import tactic (#5832)

2021-01-21 14:01:20 b52b304
feat(algebra/lie/basic): show `I + J` is solvable if Lie ideals `I`, `J` are solvable (#5819)
The key result is `lie_algebra.is_solvable_add`

2021-01-21 11:18:02 3ef8281
fix(group_theory/group_action/defs): fix minor typo (#5827)
heirarchy -> hierarchy

2021-01-21 11:17:59 b3a2112
chore(algebra/group/conj): move `conj_injective` and use existing proofs (#5798)

2021-01-21 11:17:58 d66d563
feat(measure_theory/interval_integral): FTC-2 for the open set (#5733)
A follow-up to #4945. I replaced `integral_eq_sub_of_has_deriv_at'` with a stronger version that holds for functions that have a derivative on an `Ioo` (as opposed to an `Ico`). Inspired by [this](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/FTC-2.20on.20open.20set/near/222177308) conversation on Zulip.
I also emended docstrings to reflect changes made in #5647.

2021-01-21 08:15:25 ce9bc68
feat(ring_theory/polynomial): symmetric polynomials and elementary symmetric polynomials (#5788)
Define symmetric polynomials and elementary symmetric polynomials, and prove some basic facts about them.

2021-01-21 02:18:43 a19e48b
chore(scripts): update nolints.txt (#5826)
I am happy to remove some nolints for you!

2021-01-20 22:33:10 b2d95c0
feat(data/nat/modeq): Generalised version of the Chinese remainder theorem (#5683)
That allows the moduli to not be coprime, assuming the necessary condition. Old crt is now in terms of this one

2021-01-20 19:25:37 8b6f541
feat(field_theory/normal): Splitting field is normal (#5768)
Proves that splitting fields are normal.

2021-01-20 16:12:42 7c89265
chore(data/list/range): Add range_zero and rename range_concat to range_succ (#5821)
The name `range_concat` was derived from `range'_concat`, where there are multiple possible expansions for `range' s n.succ`.
For `range` there is only one choice, and naming the lemma after the result rather than the statement makes it harder to find.

2021-01-20 14:40:22 2ec396a
chore(data/dfinsupp): add `dfinsupp.prod_comm` (#5817)
This is the same lemma as `finsupp.prod_comm` but for dfinsupp

2021-01-20 11:51:00 9cdffe9
refactor(data/fin): shorter proof of `mk.inj_iff` (#5811)
Co-authors: `lean-gptf`, Yuhuai Wu

2021-01-20 11:50:58 c700791
feat(data/list/range): nth_le_fin_range (#5456)

2021-01-20 11:50:56 9ae3317
feat(data/fin): add_comm_monoid and simp lemmas (#5010)
Provide `add_comm_monoid` for `fin (n + 1)`, which makes proofs that have to do with `bit0`, `bit1`, and `nat.cast` and related happy. Provide the specialized lemmas as simp lemmas. Also provide various simp lemmas about multiplication, but without the associated `comm_monoid`.

2021-01-20 09:51:08 a7a4f34
feat(algebraic_geometry/is_open_comap_C): add file is_open_comap_C, prove that Spec R[x] \to Spec R is an open map (#5693)
This file is the first part of a proof of Chevalley's Theorem.  It contains a proof that the morphism Spec R[x] \to Spec R is open.  In a later PR, I hope to prove that, under the same morphism, the image of a closed set is constructible.

2021-01-20 08:32:57 0c57d1e
feat(category_theory/monad): algebras for the coproduct monad (#5679)
WIP, I'll fix it up when the dependent PRs merge
<!--
put comments you want to keep out of the PR commit here.
If this PR depends on other PRs, please list them below this comment,
using the following format:
- [ ] depends on: #abc [optional extra text]
- [ ] depends on: #xyz [optional extra text]
-->
- [x] depends on: #5674
- [x] depends on: #5677 
- [x] depends on: #5678

2021-01-20 06:40:59 e41b917
feat(char_p/quotient): Add a lemma to inherit char_p from the underlying ring (#5809)

2021-01-20 06:40:57 385173d
feat(ring_theory/ideal/operations): generalize quotient of algebras (#5802)
I generalize #5703 (that was merged earlier today... sorry for that, I should have thought more carefully about it) to be able to work with `S/I` as an `R`-algebra, where `S` is an `R`-algebra.  (In #5703 only `R/I` was considered.) The proofs are the same.

2021-01-20 06:40:55 31fd5b5
feat(category_theory/limits): preserve monomorphisms (#5801)
A functor which preserves pullbacks also preserves monomorphisms.

2021-01-20 04:42:11 a3ef65d
feat(algebra/lie/basic): additional lemmas concerning `lie_algebra.derived_series_of_ideal` (#5815)

2021-01-20 03:20:26 b1d5673
chore(scripts): update nolints.txt (#5816)
I am happy to remove some nolints for you!

2021-01-20 00:07:09 d7a8709
chore(algebra/group/hom): Add `mk_coe` lemmas (#5812)
These are the counterparts to the `coe_mk` lemmas.

2021-01-19 21:59:16 b121429
feat(measure_theory/lp_space): extend the definition of Lp seminorm to p ennreal (#5808)
Rename the seminorm with real exponent to `snorm'`, introduce `snorm_ess_sup` for `L\infty`, equal to the essential supremum of the norm.

2021-01-19 18:42:43 9d14a5f
chore(order/filter/basic): add `eventually_eq.rfl` and `eventually_le.rfl` (#5805)

2021-01-19 18:42:41 21b0b01
feat(analysis/normed_space,topology/metric_space): distance between diagonal vectors (#5803)
Add formulas for (e|nn|)dist between `λ _, a` and `λ _, b` as well
as `∥(λ _, a)∥` and `nnnorm (λ _, a)`.

2021-01-19 17:22:05 da6e3c3
feat(data/buffer/parser/numeral): numeral parser defs (#5462)

2021-01-19 13:11:48 8b47563
chore(category_theory/adjunction): move reflective functor lemmas (#5800)
Moves a lemma and describes a generalisation.

2021-01-19 13:11:46 90763c4
feat(algebra/lie/basic): generalise the definition of `lie_algebra.derived_series` (#5794)
This generalisation will make it easier to relate properties of the derived
series of a Lie algebra and the derived series of its ideals (regarded as Lie
algebras in their own right).
The key definition is `lie_algebra.derived_series_of_ideal` and the key result is `lie_ideal.derived_series_eq_bot_iff`.

2021-01-19 13:11:44 18841a9
feat(data/list/basic): nth and nth_le for pmap (#5451)

2021-01-19 13:11:42 9777d1e
feat(data/option/basic): map_bind and join_pmap lemmas (#5445)

2021-01-19 11:40:25 c37c64f
chore(data/matrix/notation): Add some missing simp lemmas for sub, head, and tail (#5807)

2021-01-19 03:39:22 190dd10
chore(analysis/normed_space): golf some proofs (#5804)
* add `pi_norm_lt_iff`;
* add `has_sum.norm_le_of_bounded`;
* add `multilinear_map.bound_of_shell`;
* rename `continuous_multilinear_map.norm_image_sub_le_of_bound` to
  `continuous_multilinear_map.norm_image_sub_le`, same with prime
  version;
* golf some proofs.

2021-01-19 02:19:31 c9c3b6f
chore(scripts): update nolints.txt (#5806)
I am happy to remove some nolints for you!

2021-01-18 23:02:32 541688b
feat(combinatorics/simple_graph/basic): add lemmas about cardinality of common neighbor set (#5789)
Add lemmas about the cardinality of the set of common neighbors between two vertices. Add note in module docstring about naming convention. Part of #5698 in order to prove facts about strongly regular graphs.

2021-01-18 23:02:30 77003ce
refactor(field_theory|ring_theory|linear_algebra): minpoly A x (#5774)
This PR refactors the definition of `minpoly` to
```
noncomputable def minpoly (x : B) : polynomial A := if hx : is_integral
A x then well_founded.min degree_lt_wf _ hx else 0
```
The benefit is that we can write `minpoly A x` instead of
`minpoly hx` for `hx : is_integral A x`. The resulting code is more
readable, and some lemmas are true without the `hx` assumption.

2021-01-18 19:33:02 725efb1
doc(tactic/rewrite): Add an example for assoc_rw (#5799)

2021-01-18 17:54:03 b5e832e
refactor(algebraic_geometry/prime_spectrum): simplify `comap_id`, `comap_comp` (#5796)
faster proofs and smaller proof terms
Co-authors: `lean-gptf`, Yuhuai Wu

2021-01-18 15:57:43 57bc1da
feat(order/limsup_liminf, order/filter/ennreal): add properties of limsup for ennreal-valued functions (#5746)

2021-01-18 10:20:56 66e955e
feat(algebra/lie/basic): results relating Lie algebra morphisms and ideal operations (#5778)
The key results are `lie_ideal.comap_bracket_eq` and its corollary `lie_ideal.comap_bracket_incl`

2021-01-18 08:58:39 9381e37
doc(data/buffer/parser/basic): fix typo (#5792)

2021-01-18 07:03:48 8ab1a39
chore(field_theory/minpoly): meaningful variable names (#5773)

2021-01-18 07:03:45 db617b3
feat(ring_theory/ideal/operations): add algebra structure on quotient (#5703)
I added very basic stuff about `R/I` as an `R`-algebra that are missing in mathlib.

2021-01-18 05:44:26 f3d3d04
chore(category_theory/monad): golf and lint monadic adjunctions (#5769)
Some lintfixes and proof golfing using newer API

2021-01-18 03:26:01 3089b16
chore(scripts): update nolints.txt (#5790)
I am happy to remove some nolints for you!

2021-01-18 00:03:46 2f824aa
feat(data/option/*): pmap and pbind defs and lemmas (#5442)

2021-01-17 21:46:49 c3639e9
refactor(algebra/monoid_algebra) generalize from group to monoid algebras (#5785)
There was a TODO in the monoid algebra file to generalize three statements from group to monoid algebras. It seemed to be solvable by just changing the assumptions, not the proofs.

2021-01-17 14:43:58 f29d1c3
refactor(analysis/calculus/deriv): simpler proof of `differentiable_at.div_const` (#5782)
Co-authors: `lean-gptf`, Yuhuai Wu

2021-01-17 14:43:56 83d44a3
hack(manifold): disable subsingleton instances to speed up simp (#5779)
Simp takes an enormous amount of time in manifold code looking for subsingleton instances (and in fact probably in the whole library, but manifolds are particularly simp-heavy). We disable two such instances in the `manifold` locale, to get serious speedups (for instance, `times_cont_mdiff_on.times_cont_mdiff_on_tangent_map_within` goes down from 27s to 10s on my computer).
This is *not* a proper fix. But it already makes a serious difference in this part of the library..
Zulip discussion at https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.235672.20breaks.20timeout/near/223001979

2021-01-17 11:37:27 bf46986
doc(tactic/auto_cases): fix typo (#5784)

2021-01-17 08:33:51 289df3a
feat(data/set/lattice): add lemmas set.Union_subtype and set.Union_of_singleton_coe (#5691)
Add one simp lemma, following a suggestion on the Zulip chat:
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/image_bUnion

2021-01-17 03:47:19 2c4a516
chore(topology/metric_space/isometry): a few more lemmas (#5780)
Also reuse more proofs about `inducing` and `quotient_map` in
`topology/homeomorph`.
Non-bc change: rename `isometric.range_coe` to
`isometric.range_eq_univ` to match `equiv.range_eq_univ`.

2021-01-17 02:21:15 00e1f4c
chore(scripts): update nolints.txt (#5781)
I am happy to remove some nolints for you!

2021-01-17 00:33:57 dec44fe
chore(group_theory/perm/{sign,cycles}): renaming for dot notation, linting, formatting (#5777)
Declarations renamed in `group_theory/perm/sign.lean` (all of these are under `equiv.perm`):
- `disjoint_mul_comm` -> `disjoint.mul_comm`
- `disjoint_mul_left` -> `disjoint.mul_left`
- `disjoint_mul_right` -> `disjoint.mul_right`
- `is_swap_of_subtype` -> `is_swap.of_subtype_is_swap`
- `sign_eq_of_is_swap` -> `is_swap.sign_eq`
Declarations renamed in `group_theory/perm/cycles.lean` (all of these are under `equiv.perm`):
- `is_cycle_swap` -> `is_cycle.swap`
- `is_cycle_inv` -> `is_cycle.inv`
- `exists_gpow_eq_of_is_cycle` -> `is_cycle.exists_gpow_eq`
- `exists_pow_eq_of_is_cycle` -> `is_cycle.exists_pow_eq`
- `eq_swap_of_is_cycle_of_apply_apply_eq_self` -> `eq_swap_of_apply_apply_eq_self`
- `is_cycle_swap_mul` -> `is_cycle.swap_mul`
- `sign_cycle` -> `is_cycle.sign`
- `apply_eq_self_iff_of_same_cycle` -> `same_cycle.apply_eq_self_iff`
- `same_cycle_of_is_cycle` -> `is_cycle.same_cycle`
- `cycle_of_apply_of_same_cycle` -> `same_cycle.cycle_of_apply`
- `cycle_of_cycle` -> `is_cycle.cycle_of_eq`
I also added a basic module doc string to `group_theory/perm/cycles.lean`.

2021-01-17 00:33:55 a2630fc
chore(field_theory|ring_theory|linear_algebra): rename minimal_polynomial to minpoly (#5771)
This PR renames:
* `minimal_polynomial` -> `minpoly`
* a similar substitution throughout the library for all names containing the substring `minimal_polynomial`
* `fixed_points.minpoly.minimal_polynomial` -> `fixed_points.minpoly_eq_minpoly`
This PR moves a file:
  src/field_theory/minimal_polynomial.lean -> src/field_theory/minpoly.lean

2021-01-16 23:11:28 0cc93a1
feat(category_theory/is_filtered): is_filtered_of_equiv (#5485)
If `C` is filtered and there is a right adjoint functor `C => D`, then `D` is filtered. Also a category equivalent to a filtered category is filtered.

2021-01-16 21:37:58 787e6b3
feat(measure_theory/haar_measure): Prove uniqueness (#5663)
Prove the uniqueness of Haar measure (up to a scalar) following  *Measure Theory* by Paul Halmos. This proof seems to contain an omission which we fix by adding an extra hypothesis to an intermediate lemma.
Add some lemmas about left invariant regular measures.
We add the file `measure_theory.prod_group` which contain various measure-theoretic properties of products of topological groups, needed for the uniqueness.
We add `@[to_additive]` to some declarations in `measure_theory`, but leave it out for many because of #4210. This causes some renamings in concepts, like `is_left_invariant` -> `is_mul_left_invariant` and `measure.conj` -> `measure.inv` (though a better naming suggestion for this one is welcome).

2021-01-16 19:32:30 23373d1
chore(category_theory/limits): coproduct functor (#5677)
Dualises a def already there.

2021-01-16 17:42:15 e0f4142
refactor(data/nat/fib): explicitly state fibonacci sequence is monotone (#5776)
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/fib_mono

2021-01-16 17:42:12 4155665
refactor(linear_algebra/dual): replace dim<omega by finite_dimensional (#5775)

2021-01-16 17:42:09 d23dbfb
feat(category_theory/adjunction): reflective functors (#5680)
Extract reflective functors from monads, and show some properties of them

2021-01-16 17:42:07 64abe5a
feat(category_theory/sites): closed sieves (#5282)
- closed sieves
- closure of a sieve
- subobject classifier in Sheaf (without proof of universal property)
- equivalent sheaf condition iff same topology
- closure operator induces topology

2021-01-16 15:21:08 e076a9c
chore(topology/metric_space/gluing): use `⨅` notation (#5772)
Also use `exists_lt_of_cinfi_lt` to golf one proof.

2021-01-16 15:21:06 ba5d1f6
feat(linear_algebra/basic): add comap span lemmas (#5744)
We already had `map_span` but nothing for `comap`.

2021-01-16 15:21:04 bd57804
feat(algebraic_geometry/prime_spectrum): add lemma zero_locus_bUnion (#5692)
Add a simple extension of a lemma, to be able to work with `bUnion`, instead of only `Union`.

2021-01-16 11:02:21 55d5564
feat(ring_theory/jacobson): Generalize proofs about Jacobson rings and polynomials (#5520)
These changes are meant to make deriving the classical nullstellensatz from the generalized version about Jacobson rings much easier and much more direct.
`is_integral_localization_map_polynomial_quotient` already exists in the proof of a previous theorem, and this just pulls it out into an independent lemma.
`polynomial.quotient_mk_comp_C_is_integral_of_jacobson` and `mv_polynomial.quotient_mk_comp_C_is_integral_of_jacobson` are the two main new statements, most of the rest of the changes are just generalizations and reorganizations of the existing theorems.

2021-01-16 11:02:18 05e7be9
feat(algebra/category/Module): direct limit is a colimit (#4756)

2021-01-16 09:11:40 f03f5a9
feat(ring_theory/algebra_tower): Restriction of adjoin (#5767)
Two technical lemmas about restricting `algebra.adjoin` within an `is_scalar_tower`.

2021-01-16 09:11:38 e95988a
feat(field_theory/adjoin): Inductively construct algebra homomorphism (#5765)
The lemma `alg_hom_mk_adjoin_splits` can be viewed as lifting an embedding F -> K to an embedding F(S) -> K.

2021-01-16 09:11:36 9acd349
feat(order/closure): closure operator from galois connection (#5764)
Construct a closure operator from a galois connection

2021-01-16 09:11:34 51ffdd0
refactor(ring_theory): change field instance on adjoin_root (#5759)
This makes some things faster.
[Discussion](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Slow.20instance/near/222839607)

2021-01-16 09:11:32 dffb09a
feat(linear_algebra/{clifford,exterior,tensor,free}_algebra): provide canonical images from larger algebras into smaller ones (#5745)
This adds:
* `free_algebra.to_tensor`
* `tensor_algebra.to_exterior`
* `tensor_algebra.to_clifford`
Providing the injection in the other direction is more challenging, so is left as future work.

2021-01-16 09:11:30 bea7651
feat(category_theory/monad): construct isomorphisms of algebras (#5678)

2021-01-16 03:57:08 592edb6
chore(scripts): update nolints.txt (#5763)
I am happy to remove some nolints for you!

2021-01-16 03:57:02 6351f01
chore(algebra/group_with_zero): cleanup (#5762)
* remove `classical,` from proofs: we have `open_locale classical` anyway;
* add a lemma `a / (a * a) = a⁻¹`, use it to golf some proofs in other files.

2021-01-16 03:57:00 798024a
chore(data/real/*): rename `le_of_forall_epsilon_le` to `le_of_forall_pos_le_add` (#5761)
* generalize the `real` version to a `linear_ordered_add_comm_group`;
* rename `nnreal` and `ennreal` versions.

2021-01-16 00:47:54 78493c9
feat(data/nat/modeq): add missing lemmas for int and nat regarding dvd (#5752)
Adding lemmas `(a+b)/c=a/c+b/c` if `c` divides `a` for `a b c : nat` and `a b c : int` after discussion on Zulip https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/nat_add_div

2021-01-16 00:47:52 e4da493
feat(group_theory/perm/sign): exists_pow_eq_of_is_cycle (#5665)
Slight generalization of `exists_gpow_eq_of_is_cycle` in the case of a cycle on a finite set.
Also move the following from `group_theory/perm/sign.lean` to `group_theory/perm/cycles.lean`:
- is_cycle
- is_cycle_swap
- is_cycle_inv
- exists_gpow_eq_of_is_cycle
- is_cycle_swap_mul_aux₁
- is_cycle_swap_mul_aux₂
- eq_swap_of_is_cycle_of_apply_apply_eq_self
- is_cycle_swap_mul
- sign_cycle

2021-01-15 21:05:36 d43f202
feat(analysis/analytic/basic): `f (x + y) - p.partial_sum n y = O(∥y∥ⁿ)` (#5756)
### Lemmas about analytic functions
* add `has_fpower_series_on_ball.uniform_geometric_approx'`, a more
  precise version of `has_fpower_series_on_ball.uniform_geometric_approx`;
* add `has_fpower_series_at.is_O_sub_partial_sum_pow`, a version of
  the Taylor formula for an analytic function;
### Lemmas about `homeomorph` and topological groups
* add `simp` lemmas `homeomorph.coe_mul_left` and
  `homeomorph.mul_left_symm`;
* add `map_mul_left_nhds` and `map_mul_left_nhds_one`;
* add `homeomorph.to_equiv_injective` and `homeomorph.ext`;
### Lemmas about `is_O`/`is_o`
* add `simp` lemmas `asymptotics.is_O_with_map`,
  `asymptotics.is_O_map`, and `asymptotics.is_o_map`;
* add `asymptotics.is_o_norm_pow_norm_pow` and
  `asymptotics.is_o_norm_pow_id`;
### Misc changes
* rename `div_le_iff_of_nonneg_of_le` to `div_le_of_nonneg_of_le_mul`;
* add `continuous_linear_map.op_norm_le_of_nhds_zero`;
* golf some proofs.

2021-01-15 21:05:34 bc5d5c9
feat(data/matrix/notation,data/fin): head and append simp (#5741)

2021-01-15 21:05:30 0104948
feat(order/atoms): further facts about atoms, coatoms, and simple lattices (#5493)
Provides possible instances of `bounded_distrib_lattice`, `boolean_algebra`, `complete_lattice`, and `complete_boolean_algebra` on a simple lattice
Relates the `is_atom` and `is_coatom` conditions to `is_simple_lattice` structures on intervals
Shows that all three conditions are preserved by `order_iso`s
Adds more instances on `bool`, including `is_simple_lattice`

2021-01-15 17:48:45 bc94d05
fix(algebra/ordered_monoid): Ensure that `ordered_cancel_comm_monoid` can provide a `cancel_comm_monoid` instance (#5713)

2021-01-15 16:03:27 8b4b941
feat(data/mv_polynomial): stronger `degrees_X` for `nontrivial R` (#5758)
Also rename `degrees_X` to `degrees_X'` and mark `degrees_{zero,one}` with `simp`.

2021-01-15 14:40:09 c347c75
feat(algebra/lie/basic): add a few `simp` lemmas (#5757)

2021-01-15 10:58:03 ed0ae3e
feat(analysis/calculus/inverse): a map that has an invertible strict derivative at every point is an open map (#5753)
More generally, the same is true for a map that is a local homeomorphism near every point.

2021-01-15 10:58:01 4c1d12f
feat(data/complex/basic): Adding `im_eq_sub_conj` (#5750)
Adds `im_eq_sub_conj`, which I couldn't find in the library.

2021-01-15 09:57:54 94f45c7
chore(linear_algebra/quadratic_form): Add missing simp lemmas about quadratic_form.polar (#5748)

2021-01-15 08:35:59 09c2345
feat(category_theory/over): epis and monos in the over category (#5684)

2021-01-15 08:35:56 395eb2b
feat(category_theory): subterminal objects (#5669)

2021-01-15 08:35:54 f8db86a
feat(category_theory/limits): finite products from binary products (#5516)
Adds constructions for finite products from binary products and terminal object, and a preserves version

2021-01-15 05:41:26 faf106a
refactor(data/real/{e,}nnreal): reuse generic lemmas (#5751)
* reuse `div_eq_mul_inv` and `one_div` from `div_inv_monoid`;
* reuse lemmas about `group_with_zero` instead of repeating them in the `nnreal` namespace;
* add `has_sum.div_const`.

2021-01-15 05:41:24 931182e
chore(algebra/ordered_ring): add a few simp lemmas (#5749)
* fix misleading names `neg_lt_iff_add_nonneg` → `neg_lt_iff_pos_add`,
  `neg_lt_iff_add_nonneg'` → `neg_lt_iff_pos_add'`;
* add `@[simp]` to `abs_mul_abs_self` and `abs_mul_self`;
* add lemmas `neg_le_self_iff`, `neg_lt_self_iff`, `le_neg_self_iff`,
  `lt_neg_self_iff`, `abs_eq_self`, `abs_eq_neg_self`.

2021-01-15 02:19:33 5d003d8
chore(scripts): update nolints.txt (#5754)
I am happy to remove some nolints for you!

2021-01-15 02:19:31 7151fb7
chore(data/equiv/basic): equiv/perm_congr simp lemmas (#5737)

2021-01-14 22:10:57 64a1b19
feat(data/equiv/basic): subsingleton equiv and perm (#5736)

2021-01-14 22:10:54 975f41a
feat(order): closure operators (#5524)
Adds closure operators on a partial order, as in [wikipedia](https://en.wikipedia.org/wiki/Closure_operator#Closure_operators_on_partially_ordered_sets). I made them bundled for no particular reason, I don't mind unbundling.

2021-01-14 19:06:18 0817e7f
feat(measure_theory): absolute continuity of the integral (#5743)
### API changes:
#### `ennreal`s and `nnreal`s:
* `ennreal.mul_le_mul` and `ennreal.mul_lt_mul` are now `mono` lemmas;
* rename `ennreal.sub_lt_sub_self` to `ennreal.sub_lt_self`: there is no `-` in the RHS;
* new lemmas `enrneal.mul_div_le`, `nnreal.sub_add_eq_max`, and `nnreal.add_sub_eq_max`;
* add new lemma `ennreal.bsupr_add`, use in in the proof of `ennreal.Sup_add`;
#### Complete lattice
* new lemma `supr_lt_iff`;
#### Simple functions
* new lemmas `simple_func.exists_forall_le`, `simple_func.map_add`,
  `simple_func.sub_apply`;
* weaker typeclass assumptions in `simple_func.coe_sub`;
* `monotone_eapprox` is now a `mono` lemma;
#### Integration
* new lemmas `exists_simple_func_forall_lintegral_sub_lt_of_pos`,
  `exists_pos_set_lintegral_lt_of_measure_lt`,
  `tendsto_set_lintegral_zero`, and
  `has_finite_integral.tendsto_set_integral_nhds_zero`.

2021-01-14 19:06:16 3b8cfdc
feat(linear_algebra/{exterior,tensor,free}_algebra): provide left-inverses for `algebra_map` and `ι` (#5722)
The strategy used for `algebra_map` here can't be used on `clifford_algebra` as the zero map does not satisfy `f m * f m = Q m`.

2021-01-14 15:25:47 91b099e
chore(data/equiv/fin): simp definitional lemmas (#5740)

2021-01-14 15:25:44 7e9094b
feat(control/equiv_functor): simp defn lemmas and injectivity (#5739)

2021-01-14 15:25:42 e3cc92e
chore(data/equiv/basic): swap symm and trans simp lemmas (#5738)

2021-01-14 15:25:40 de8b88f
chore(group_theory/perm/sign): trans and symm simp (#5735)

2021-01-14 15:25:37 82532c1
chore(data/set/basic): reuse some proofs about `boolean_algebra` (#5728)
API changes:
* merge `set.compl_compl` with `compl_compl'`;
* add `is_compl.compl_eq_iff`, `compl_eq_top`, and `compl_eq_bot`;
* add `simp` attribute to `compl_le_compl_iff_le`;
* fix misleading name in `compl_le_iff_compl_le`, add a missing
  variant;
* add `simp` attribute to `compl_empty_iff` and `compl_univ_iff`;
* add `set.subset.eventually_le`.

2021-01-14 11:59:28 3b3f9a2
refactor(measure_theory): review def&API of the `dirac` measure (#5732)
* use `set.indicator` instead of `⨆ a ∈ s, 1` in the definition.
* rename some theorems to `thm'`, add a version assuming
  `[measurable_singleton_class α]` but not
  `is_measurable s`/`measurable f` under the old name.
* rename some lemmas from `eventually` to `ae`.

2021-01-14 11:59:26 8bc26d1
feat(algebra/order): ne_iff_lt_iff_le
 
 (#5731)

2021-01-14 08:39:13 159542a
chore(*): split some long lines (#5742)

2021-01-14 07:15:46 1509c29
chore(archive/100-theorems-list): 83_friendship_graphs (#5727)
Cleaned up some lint and put it in terms of the new `simple_graph.common_neighbors`.

2021-01-14 03:38:41 c8c6d2e
feat(ci): Emit error messages in a way understood by github (#5726)
This uses the commands described [here](https://github.com/actions/toolkit/blob/master/docs/commands.md#log-level), for which [the implementation](https://github.com/actions/toolkit/blob/af821474235d3c5e1f49cee7c6cf636abb0874c4/packages/core/src/command.ts#L36-L94) provides a slightly clearer spec.
This means github now annotates broken lines, and highlights the error in red.
Originally I tried to implement this using "problem matchers", but these do not support multi-line error messages.
Supporting this in the linter is something that I'll leave for a follow-up PR.

2021-01-14 03:38:39 d11d83a
feat(measure_theory/lebesgue_measure): volume of a box in `ℝⁿ` (#5635)

2021-01-14 02:21:22 c050452
chore(scripts): update nolints.txt (#5730)
I am happy to remove some nolints for you!

2021-01-13 21:36:30 71a3261
feat(logic/basic): exists_eq simp lemmas without and.comm (#5694)

2021-01-13 21:36:28 6397e14
feat(data/nat/cast): add nat.bin_cast for faster casting (#5664)
[As suggested](https://github.com/leanprover-community/mathlib/pull/5462#discussion_r553226279) by @gebner.

2021-01-13 18:52:53 69e9344
feat(data/set/finite): add lemma with iff statement about when finite sets can be subsets (#5725)
Part of #5698 in order to prove statements about strongly regular graphs.
Co-author: @shingtaklam1324

2021-01-13 18:52:51 0b9fbc4
feat(combinatorics/simple_graph/basic): add definition of common neighbors and lemmas (#5718)
Part of #5698 in order to prove facts about strongly regular graphs

2021-01-13 18:52:49 7ce4717
refactor(computability/reduce): define many-one degrees without parameter (#2630)
The file `reduce.lean` defines many-one degrees for computable reductions.  At the moment every primcodable type `α` has a separate type of degrees `many_one_degree α`.  This is completely antithetical to the notion of degrees, which are introduced to classify problems up to many-one equivalence.
This PR defines a single `many_one_degree` type that lives in `Type 0`.  We use the `ulower` infrastructure from #2574 which shows that every type is computably equivalent to a subset of natural numbers.  The function `many_one_degree.of` which assigns to every set of a primcodable type a degree is still universe polymorphic.  In particular, we show that `of p = of q ↔ many_one_equiv p q`, etc. in maximal generality, where `p` and `q` are subsets of different types in different universes.
See previous discussion at #1203.

2021-01-13 16:08:10 d533fbb
fix(finsupp/pointwise): Relax the ring requirement to semiring (#5723)

2021-01-13 16:08:07 340ddf8
chore(scripts): don't assume cwd when running lint-style. (#5721)
Allows running the linter from any ol' directory.

2021-01-13 16:08:04 d351cfe
feat(data/finset): sup_eq_bind (#5717)
`finset.sup s f` is equal to `finset.bind s f` when `f : α → finset β` is an indexed family of finite sets.  This is a proof of that with a couple supporting lemmas.  (There might be a more direct proof through the definitions of `sup` and `bind`, which are eventually in terms of `multiset.foldr`.)
I also moved `finset.mem_sup` to `multiset.mem_sup` and gave a new `finset.mem_sup` for indexed families of `finset`, where the old one was for indexed families of `multiset`.

2021-01-13 16:08:02 3ac4bb2
feat(combinatorics/simple_graph/basic): add definition of complement of simple graph (#5697)
Add definition of the complement of a simple graph. Part of branch [strongly_regular_graph](https://github.com/leanprover-community/mathlib/tree/strongly_regular_graph), with the goal of proving facts about strongly regular graphs.

2021-01-13 14:54:29 c8574c8
feat(analysis/special_functions/pow): add various lemmas about ennreal.rpow (#5701)

2021-01-13 10:19:12 b6cca97
feat(linear_algebra/{exterior,tensor}_algebra): Prove that `ι` is injective (#5712)
This strategy can't be used on `clifford_algebra`, and the obvious guess of trying to define a `less_triv_sq_quadratic_form_ext` leads to a non-associative multiplication; so for now, we just handle these two cases.

2021-01-13 02:51:51 b9b6b16
chore(scripts): update nolints.txt (#5720)
I am happy to remove some nolints for you!

2021-01-13 02:51:48 5a532ca
fix(tactic/ring): fix loop in ring (#5711)
This occurs because when we name the atoms in `A * B = 2`, `A` is the
first and `B` is the second, and once we put it in horner form it ends up
as `B * A = 2`; but then when we go to rewrite it again `B` is named atom
number 1 and `A` is atom number 2, so we write it the other way around
and end up back at `A * B = 2`. The solution implemented here is to
retain the atom map across calls to `ring.eval` while simp is driving
it, so we end up rewriting it to `B * A = 2` in the first place but in the
second pass we still think `B` is the second atom so we stick with the
`B * A` order.
Fixes #2672

2021-01-12 22:49:15 fe5ec00
doc(tactic/generalize_proofs): docs and test for generalize_proofs (#5715)
As requested on Zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Extracting.20un-named.20proofs.20from.20the.20goal.20state/near/222472426

2021-01-12 22:49:13 a7b800e
doc(overview): small reorganization of algebra/number theory (#5707)
- adds Witt vectors
- adds perfection of a ring
- deduplicates Zariski topology
- moves some items to a new subsection "Number theory"

2021-01-12 19:31:47 c1894c8
chore(analysis|measure_theory|topology): give tsum notation precedence 67 (#5709)
This saves us a lot of `()`
In particular, lean no longer thinks that `∑' i, f i = 37` is a tsum of propositions.

2021-01-12 19:31:44 0e7a921
feat(data/buffer/parser/basic): lemmas describing parsers (#5460)

2021-01-12 16:10:51 1025908
chore(topology/algebra/infinite_sum): speedup has_sum_sum (#5710)
this lemma was pretty slow, now it is pretty fast

2021-01-12 16:10:48 73ba460
feat(submonoid/basic): subsingleton and nontrivial instances for {add_,}submonoid (#5690)

2021-01-12 16:10:46 e76fdb9
docs(undergrad.yaml): analysis updates (#5675)
Updates to `undergrad.yaml` (including reverting some changes from #5638, after further discussion), and fix a docstring typo in `measure_theory.interval_integral`.

2021-01-12 16:10:44 ce6a7eb
feat(linear_algebra/multilinear_map): Add `range` and `map` (#5658)
Note that unlike `linear_map`, `range` cannot return a submodule, only a `sub_mul_action`.
We also can't guarantee closure under `smul` unless the map has at least one argument, as there is nothing requiring the multilinear map of no arguments to be zero.

2021-01-12 13:08:45 3a3ec6c
feat(measure_theory): each set has a measurable superset of the same measure (#5688)
* generalize `outer_measure.exists_is_measurable_superset_of_trim_eq_zero`
  to `outer_measure.exists_is_measurable_superset_eq_trim`;
* generalize `exists_is_measurable_superset_of_null` to
  `exists_is_measurable_superset`;
* define `to_measurable mu s` to be a measurable superset `t ⊇ s`
	with `μ t = μ s`;
* prove `countable_cover_nhds`: in a `second_countable_topology`, if
  `f` sends each point `x` to a neighborhood of `x`, then some
  countable subfamily of neighborhoods `f x` cover the whole space.
* `sigma_finite_of_countable` no longer assumes that all sets `s ∈ S`
  are measurable.

2021-01-12 13:08:41 2671068
feat(data/set/intervals): add 2 Icc ssubset lemmas (#5617)
Add two strict subset lemmas for Icc, discussed in https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Icc_ssubset_Icc.

2021-01-12 08:26:45 cd7a8a1
chore(category_theory/limits): move constructions folder (#5681)
As mentioned here: https://github.com/leanprover-community/mathlib/pull/5516#issuecomment-753450199
The linter is giving new errors, so I might as well fix them in this PR.

2021-01-12 08:26:43 be75005
fix(linear_algebra/tensor_product): Remove the priorities from the module structure (#5667)
These were added originally so that `semimodule'` was lower priority than `semimodule`, as the `semimodule'` instance took too long to resolve.
However, this happens automatically anyway, since the former appears before the latter - the simple existence of the `semimodule` shortcut instances was enough to solve the long typeclass-resolution paths, their priority was a red herring.
The only effect of these attributes was to cause these instances to not take priority over `add_comm_monoid.nat_semimodule`, which was neither intended nor desirable.

2021-01-12 07:23:33 cd0d8c0
chore(category_theory/limits/over): generalise, golf and document over limits (#5674)
- Show that the forgetful functor `over X => C` creates colimits, generalising what was already there
- Golf the proofs using this new instance
- Add module doc
and duals of the above

2021-01-12 02:03:22 9f9f85e
chore(scripts): update nolints.txt (#5705)
I am happy to remove some nolints for you!

2021-01-11 21:22:16 049f16a
feat(measure_theory/pi): `ae_eq` lemmas about intervals in `Π i, α i` (#5633)

2021-01-11 10:10:45 b537cc0
feat(algebra/splitting_field): Restrict to splitting field (#5562)
Restrict an alg_hom or alg_equiv to an is_splitting_field.

2021-01-11 01:59:51 c112ad0
chore(scripts): update nolints.txt (#5699)
I am happy to remove some nolints for you!

2021-01-10 22:38:07 08800bb
feat(analysis/special/functions/trigonometric): complex trig and some even/odd lemmas (#5404)
Complex (and some real) trigonometry lemmas, parity propositions, and some field algebra.

2021-01-10 19:12:03 cc6f039
feat(equiv|set|topology): various additions (#5656)
define sigma_compact_space
update module doc for topology/subset_properties
define shearing
some lemmas in set.basic, equiv.mul_add and topology.instances.ennreal

2021-01-10 19:12:01 62c1912
chore(measure_theory/set_integral): use weaker assumptions here and there (#5647)
* use `ae_measurable f (μ.restrict s)` in more lemmas;
* introduce `measurable_at_filter` and use it.

2021-01-10 17:59:16 3e7efd4
feat(field_theory/separable): Remove hypothesis in irreducible.separable (#5687)
An irreducible polynomial is nonzero, so this hypothesis is unnecessary.

2021-01-10 17:59:14 b72811f
feat(order/complete_well_founded): characterise well-foundedness for complete lattices (#5575)

2021-01-10 14:47:11 0d9cb85
chore(order/filter): a few more lemmas about `eventually` and set operations (#5686)

2021-01-10 14:47:09 b0c35d1
chore(order/filter/basic): a few `simp` lemmas (#5685)
### Changes in `order/filter/basic`
* add `filter.inter_mem_sets_iff`;
* rename `filter.Inter_mem_sets` to `filter.bInter_mem_sets`, make it
  an `iff` `[simp]` lemma;
* add a version `filter.bInter_finset_mem_sets` with a protected alias
  `finset.Inter_mem_sets`;
* rename `filter.sInter_mem_sets_of_finite` to
  `filter.sInter_mem_sets`, make it an `iff` `[simp]` lemma;
* rename `filter.Inter_mem_sets_of_fintype` to
  `filter.Inter_mem_sets`, make it an `iff` `[simp]` lemma
* add `eventually` versions of the `*Inter_mem_sets` lemmas.
### New `@[mono]` attributes
* `set.union_subset_union` and `set.inter_subset_inter` instead of
  `monotone_union` and `monotone_inter`; `mono*` failed to make a
  progress with `s ∩ t ⊆ s' ∩ t'` goal.
* `set.image2_subset`
* `closure_mono`

2021-01-10 09:02:16 1c4f2ae
feat(data/equiv/basic, logic/embedding): swap commutes with injective functions (#5636)

2021-01-10 01:57:53 a28602a
chore(scripts): update nolints.txt (#5682)
I am happy to remove some nolints for you!

2021-01-09 16:50:50 f60c184
feat(algebra/lie/basic): Lie ideal operations are linear spans (#5676)

2021-01-09 15:06:06 5faf34c
feat(measure_theory/lp_space): add more lemmas about snorm (#5644)

2021-01-09 12:23:44 fdec90a
chore(data/set/lattice): add a few simp lemmas (#5671)

2021-01-09 12:23:42 3166f4e
feat(topology/separation, topology/metric_space/basic): add lemmas on discrete subsets of a topological space (#5523)
These lemmas form part of a simplification of the proofs of #5361.

2021-01-09 10:41:15 a161256
feat(topology/algebra/ordered): prove `tendsto.Icc` for pi-types (#5639)

2021-01-09 03:54:42 faf1a98
chore(scripts): update nolints.txt (#5673)
I am happy to remove some nolints for you!

2021-01-09 00:41:04 1294500
feat(category_theory/limits): preserving pullbacks (#5668)
This touches multiple files but it's essentially the same thing as all my other PRs for preserving limits of special shapes - I can split it up if you'd like but hopefully this is alright?

2021-01-09 00:41:01 ce34ae6
chore(linear_algebra/alternating): golf a proof (#5666)
`sign_mul` seems to have been marked `simp` recently, making it not necessary to include in `simp` calls.

2021-01-09 00:40:59 0cd70d0
chore(algebra/group/hom): fix additive version of docstring (#5660)

2021-01-08 21:30:46 2b5344f
chore(analysis/special_functions/trigonometric): adding `@[pp_nodot]` to complex.log (#5670)
Added `@[pp_nodot]` to complex.log

2021-01-08 21:30:44 aab5994
feat(data/finset/intervals, data/set/intervals/basic): intersection of finset.Ico, union of intervals for sets and finsets (#5410)

2021-01-08 17:23:08 d935760
feat(algebra/linear_ordered_comm_group_with_zero): Add linear_ordered_comm_monoid_with_zero and an instance for nat (#5645)
This generalizes a lot of statements about `linear_ordered_comm_group_with_zero` to `linear_ordered_comm_monoid_with_zero`.

2021-01-08 17:23:06 2bde21d
feat(geometry/manifold/times_cont_mdiff): API for checking `times_cont_mdiff` (#5631)
Two families of lemmas:
- to be `times_cont_mdiff`, it suffices to be `times_cont_mdiff` after postcomposition with any chart of the target
- projection notation to go from `times_cont_diff` (in a vector space) to `times_cont_mdiff`

2021-01-08 17:23:03 bd9b03f
feat(category_theory/closed): Frobenius reciprocity of cartesian closed categories (#5624)
A re-do of #4929. 
Re-defines the exponential comparison morphism (now as a natural transformation rather than a morphism with a naturality prop), and defines the Frobenius reciprocity morphism for an adjoint. In the case where the functor has a left adjoint, gives a sufficient condition for it to be cartesian closed, and a sufficient condition for a functor whose left adjoint preserves binary products to be cartesian closed (but doesn't show the necessity of this).
- [x] depends on: #5623

2021-01-08 16:06:43 0d7ca98
feat(measure_theory/measure_space): ae_measurable and measurable are equivalent for complete measures (#5643)

2021-01-08 14:20:37 9f066f1
refactor(linear_algebra/alternating): Use unapplied maps when possible (#5648)
Notably, this removes the need for a proof of `map_add` and `map_smul` in `def alternatization`, as the result is now already bundled with these proofs.
This also:
* Replaces `equiv.perm.sign p` with `p.sign` for brevity
* Makes `linear_map.comp_alternating_map` an `add_monoid_hom`

2021-01-08 09:47:21 795d5ab
chore(algebra/ordered_monoid): rename lemmas (#5657)
I wanted to add the alias `pos_iff_ne_zero` for `zero_lt_iff_ne_zero`, but then I saw a note already in the library to do this renaming. So I went ahead.
`le_zero_iff_eq` -> `nonpos_iff_eq_zero`
`zero_lt_iff_ne_zero` -> `pos_iff_ne_zero`
`le_one_iff_eq` -> `le_one_iff_eq_one`
`measure.le_zero_iff_eq_zero'` -> `measure.nonpos_iff_eq_zero'`
There were various specific types that had their own custom `pos_iff_ne_zero`-lemma, which caused nameclashes. Therefore:
* remove `nat.pos_iff_ne_zero`
* Prove that `cardinal` forms a `canonically_ordered_semiring`, remove various special case lemmas
* There were lemmas `cardinal.le_add_[left|right]`. Generalized them to arbitrary canonically_ordered_monoids and renamed them to `self_le_add_[left|right]` (to avoid name clashes)
* I did not provide a canonically_ordered_monoid class for ordinal, since that requires quite some work (it's true, right?)
* `protect` various lemmas in `cardinal` and `ordinal` to avoid name clashes.

2021-01-08 07:46:54 611bc86
feat(measure_theory/borel_space): locally finite measure is sigma finite (#5634)
I forgot to add this to #5604

2021-01-08 05:13:37 efdcab1
refactor(algebra/module/basic): Clean up all the nat/int semimodule definitions (#5654)
These were named inconsistently, and lots of proof was duplicated.
The name changes are largely making the API for `nsmul` consistent with the one for `gsmul`:
* For `ℕ`:
  * Replaces `nat.smul_def : n • x = n •ℕ x` with `nsmul_def : n •ℕ x = n • x`
  * Renames `semimodule.nsmul_eq_smul : n •ℕ b = (n : R) • b` to `nsmul_eq_smul_cast`
  * Removes `semimodule.smul_eq_smul : n • b = (n : R) • b`
  * Adds `nsmul_eq_smul : n •ℕ b = n • b` (this is different from `nsmul_def` as described in the docstring)
  * Renames the instances to be named more consistently and all live under `add_comm_monoid.nat_*`
* For `ℤ`:
  * Renames `gsmul_eq_smul : n •ℤ x = n • x` to `gsmul_def`
  * Renames `module.gsmul_eq_smul : n •ℤ x = n • x` to `gsmul_eq_smul`
  * Renames `module.gsmul_eq_smul_cast` to `gsmul_eq_smul_cast`
  * Renames the instances to be named more consistently and all live under `add_comm_group.int_*`

2021-01-08 03:36:08 d89464d
feat(topology/algebra): add additive/multiplicative instances (#5662)

2021-01-08 02:05:16 7500b24
chore(scripts): update nolints.txt (#5661)
I am happy to remove some nolints for you!

2021-01-08 02:05:14 4c3c8d7
feat(measure_theory): some additions (#5653)
rename `exists_is_measurable_superset_of_measure_eq_zero` -> `exists_is_measurable_superset_of_null`
make `measure.prod` and `measure.pi` irreducible

2021-01-07 23:12:07 33a86cf
chore(data/list/basic): tag mmap(') with simp (#5443)

2021-01-07 21:43:48 18ba69b
feat(category_theory/sites): category of sheaves on the trivial topology  (#5651)
Shows that the category of sheaves on the trivial topology is just the category of presheaves.

2021-01-07 21:43:46 3c5d5c5
feat(category_theory/monad): reflector preserves terminal object (#5649)

2021-01-07 21:43:44 a30c39e
feat(measure_theory/borel_space): a compact set has finite measure (#5628)

2021-01-07 21:43:41 4da8313
feat(category_theory/closed): golf definition and proofs (#5623)
Using the new mates framework, simplify the definition of `pre` and shorten proofs about it. 
To be more specific,
- `pre` is now explicitly a natural transformation, rather than indexed morphisms with a naturality property
- The new definition of `pre` means things like `pre_map` which I complained about before are easier to prove, and `pre_post_comm` is automatic
- There are now more lemmas relating `pre` to `coev`, `ev` and `uncurry`: `uncurry_pre` in particular was a hole in the API.
- `internal_hom` has a shorter construction. In particular I changed the type to `Cᵒᵖ ⥤ C ⥤ C`, which I think is better since the usual external hom functor is given as `Cᵒᵖ ⥤ C ⥤ Type*`, so this is consistent with that. 
In a subsequent PR I'll do the same for `exp_comparison`, but that's a bigger change with improved API so they're separate for now.

2021-01-07 21:43:39 fdbcab6
feat(category_theory/limits): the product comparison natural transformation (#5621)

2021-01-07 19:12:12 2894260
feat(group_theory): add lemmas on solvability (#5646)
Proves some basic lemmas about solvable groups: the subgroup of a solvable group is solvable, a quotient of a solvable group is solvable.

2021-01-07 13:09:27 66e02b3
feat(docs/100): Add Masdeu's formalisation of Euler's Summation to 100.yaml (#5655)

2021-01-07 13:09:25 7bc2e9e
feat(ring_theory/polynomial/cyclotomic): add cyclotomic.irreducible (#5642)
I proved irreducibility of cyclotomic polynomials, showing that `cyclotomic n Z` is the minimal polynomial of any primitive root of unity.

2021-01-07 13:09:23 b9da50a
feat(ring_theory/*): Various lemmas used to prove classical nullstellensatz (#5632)

2021-01-07 13:09:21 3aea284
feat(analysis/normed_space): affine map with findim domain is continuous (#5627)

2021-01-07 13:09:18 833e9a0
chore(analysis/calculus): add `of_mem_nhds` versions of 2 lemmas (#5626)

2021-01-07 13:09:16 e14d5eb
feat(category_theory/limits): prod map is iso if components are (#5620)
Show that if `f` and `g` are iso, then `prod.map f g` is an iso, and the dual.

2021-01-07 13:09:14 87ef7af
feat(linear_algebra/pi_tensor_product): define the tensor product of an indexed family of semimodules (#5311)
This PR defines the tensor product of an indexed family `s : ι → Type*` of semimodules over commutative semirings. We denote this space by `⨂[R] i, s i` and define it as `free_add_monoid (R × Π i, s i)` quotiented by the appropriate equivalence relation. The treatment follows very closely that of the binary tensor product in `linear_algebra/tensor_product.lean`.

2021-01-07 10:05:38 47c6081
chore(group_theory/perm/sign): remove classical for sign congr simp lemmas (#5622)
Previously, some lemmas about how `perm.sign` simplifies across various congrs of permutations assumed `classical`, which prevented them from being applied by the simplifier. This makes the `decidable_eq` assumptions explicit.

2021-01-07 10:05:35 9dd1496
chore(group_theory/perm/basic): Add some missing simp lemmas (#5614)
`simp` can't find the appropriate `equiv` lemmas as they are about `refl` not `1`, even though those are defeq.

2021-01-07 10:05:33 2457287
feat(algebra/subalgebra): Restrict injective algebra homomorphism to algebra isomorphism (#5560)
The domain of an injective algebra homomorphism is isomorphic to its range.

2021-01-07 10:05:31 2c8175f
feat(algebra/algebra/ordered): ordered algebras (#4683)
An ordered algebra is an ordered semiring, which is an algebra over an ordered commutative semiring,
for which scalar multiplication is "compatible" with the two orders.

2021-01-07 08:51:54 95c7087
chore(docs/100.yaml): Freek No. 15 (#5638)
I've updated docs/100.yaml to reflect the fact that both FTC-1 and FTC-2 have been added to mathlib.

2021-01-07 05:47:19 a32e223
refactor(analysis/special_functions/trigonometric): redefine arcsin and arctan (#5300)
Redefine `arcsin` and `arctan` using `order_iso`, and prove that both of them are infinitely smooth.

2021-01-07 02:28:43 3f35961
chore(scripts): update nolints.txt (#5652)
I am happy to remove some nolints for you!

2021-01-06 23:23:44 f668be0
feat(data/list/zip): parameterize zip_append more generally (#5650)
zip_append should only require that each pair of lists is of the same type

2021-01-06 16:21:02 f4128dc
chore(ring_theory/ideal/basic): Make an argument to mul_mem_{left,right} explicit (#5611)
Before this change, the lemmas with result `a * b ∈ I` did not have enough explicit arguments to determine both `a` and `b`, such as `I.mul_mem_left hb`.
This resulted in callers using `show`, `@`, or sometimes ignoring the API and using `smul_mem` which does have appropriate argument explicitness. These callers have been cleaned up accordingly.

2021-01-06 16:21:00 91fcb48
feat(linear_algebra/tensor_product,algebra/module/linear_map): Made tmul_smul and map_smul_of_tower work for int over semirings (#5430)
With this change, ` ∀ (f : M →ₗ[S] M₂) (z : int) (x : M), f (z • x) = z • f x` can be proved with `linear_map.map_smul_of_tower` even when `S` is a semiring, and `z • (m ⊗ₜ n : M ⊗[S] N) = (r • m) ⊗ₜ n` can be proved with `tmul_smul`.

2021-01-06 13:54:26 eeb194d
feat(analysis/normed_space/inner_product): facts about the span of a single vector, mostly in inner product spaces (#5589)

2021-01-06 11:04:14 186ad76
feat(ring_theory/finiteness): add finitely presented algebra (#5407)
This PR contains the definition of a finitely presented algebra and some very basic results. A lot of other fundamental results are missing (stability under composition, equivalence with finite type for noetherian rings ecc): I am ready to work on them, but I wanted some feedback. Feel free to convert to WIP if you think it's better to wait.

2021-01-06 11:04:12 35ff043
feat(ring_theory/fractional_ideal): move inv to dedekind_domain (#5053)
Remove all instances of `inv` and I^{-1}. The notation (1 / I) is the one used for the old I^{-1}.

2021-01-06 11:04:08 1db70a8
feat(computability/regular_expressions): define regular expressions (#5036)
Very basic definitions for regular expressions

2021-01-06 11:04:04 137a6e0
feat(tactic/rewrite_search): Automatically searching for chains of rewrites (#4841)
This pull request is based on a branch originally developed by @semorrison , @khoek , and @jcommelin . The idea of rewrite_search is a tactic that will search through chains of potential rewrites to prove the goal, when the goal is an equality or iff statement. There are three key components: `discovery.lean` finds a bunch of rules that can be used to generate rewrites, `search.lean` runs a breadth-first-search algorithm on the two sides of the quality to find a path that connects them, and `explain.lean` generates Lean code from the resulting proof, so that you can replace the call to `rewrite_search` with the explicit steps for it.
I removed some functionality from the rewrite_search branch and simplified the data structures somewhat in order to get this pull request small enough to be reviewed. If there is functionality from that branch that people particularly wanted, let me know and I can either include it in this PR or in a subsequent one. In particular, most of the configuration options are omitted.
For data structures, the whole `table` data structure is gone, replaced by a `buffer` and `rb_map` for efficient lookup. Write access to the buffer is also append-only for efficiency. This seems to be a lot faster, although I haven't created specific performance benchmarks.

2021-01-06 08:30:32 062f244
feat(category_theory/monad): generalise limits lemma (#5630)
A slight generalisation of a lemma already there.

2021-01-06 08:30:30 56ed5d7
feat(category_theory/adjunction): mates (#5599)
Adds some results on the calculus of mates.

2021-01-06 08:30:28 5f98a96
feat(group_theory): add definition of solvable group (#5565)
Defines solvable groups using the definition that a group is solvable if its nth commutator is eventually trivial. Defines the nth commutator of a group and provides some lemmas for working with it. More facts about solvable groups will come in future PRs.

2021-01-06 08:30:25 648ff21
feat(algebra/lie/basic): the lattice of Lie submodules of a Noetherian Lie module is well-founded (#5557)
The key result is: `well_founded_of_noetherian`

2021-01-06 05:36:16 3892155
fix(algebra/group/pi): use correct `div`/`sub` (#5625)
Without an explicit `div := has_div.div`, `rw [pi.sub_apply]` fails sometimes.

2021-01-06 05:36:13 3d6ba9a
feat(data/list/chain): chain pmap (#5438)
Two chain pmap lemmas

2021-01-06 02:30:13 de73912
chore(scripts): update nolints.txt (#5629)
I am happy to remove some nolints for you!

2021-01-06 02:30:10 19d2ea7
feat(order/atoms): Pairwise coprime (#5596)
Don't really know what to call it, but it's the atom-level version of the statement that maximal ideals are pairwise coprime.

2021-01-06 02:30:08 9fdd703
feat(linear_algebra/affine_space/midpoint): a few more lemmas (#5571)
* simplify expressions like `midpoint R p₁ p₂ -ᵥ p₁` and
  `p₂ - midpoint R p₁ p₂`;
* fix a typo in `data/set/intervals/surj_on`.

2021-01-06 02:30:06 731c26f
refactor(*): swap sides of `iff` in `{rel_embedding,order_embedding}.map_rel_iff` (#5556)
This way RHS is "simpler" than LHS.
Other API changes (in `rel_embedding` and/or `ord_embedding` and/or `rel_iso` and/or `ord_iso` namespaces):
* drop `map_le_iff`, rename `apply_le_apply` to `le_iff_le`;
* drop `map_lt_iff`, rename `apply_lt_apply` to `lt_iff_lt`;
* rename `apply_eq_apply` to `eq_iff_eq`.

2021-01-06 00:02:09 8f424fc
chore(measure_theory/pi): a few more lemmas (#5604)
Also prove that a locally finite measure in a `second_countable_topology` is `sigma_finite`.

2021-01-05 20:33:53 00d8617
feat(analysis/normed_space/inner_product): inner product is continuous, norm squared is smooth (#5600)

2021-01-05 20:33:51 0c8fffe
fix(algebra/group/prod): fixes for #5563 (#5577)
* rename `prod.units` to `mul_equiv.prod_units`;
* rewrite it with better definitional equalities;
* now `@[to_additive]` works: fixes #5566;
* make `M` and `N` implicit in `mul_equiv.prod_comm`

2021-01-05 20:33:49 7cf0a29
feat(analysis/normed_space/inner_product): consequences of characterization of orthogonal projection (#5558)
Reverse order of equality in the lemma `eq_orthogonal_projection_of_mem_of_inner_eq_zero`.  Add some variants.  Also add three consequences:
- the orthogonal projection onto `K` of an element of `K` is itself
- the orthogonal projection onto `K` of an element of `Kᗮ` is zero
- for a submodule `K` of an inner product space, the sum of the orthogonal projections onto `K` and `Kᗮ` is the identity.
Reverse order of `iff` in the lemma `submodule.eq_top_iff_orthogonal_eq_bot`, and rename to `submodule.orthogonal_eq_bot_iff`.

2021-01-05 20:33:46 82ec0cc
feat(ring_theory/roots_of_unity): degree of minimal polynomial (#5475)
This is the penultimate PR about roots of unity and cyclotomic polynomials: I prove that the degree of the minimal polynomial of a primitive `n`th root of unity is at least `nat.totient n`.
It's easy to prove now that it is actually `nat.totient n`, and indeed that the minimal polynomial is the cyclotomic polynomial (that it is hence irreducible). I decided to split the PR like this because I feel that it's better to put the remaining results in `ring_theory/polynomials/cyclotomic`.

2021-01-05 18:04:53 d1b2d6e
fix(linear_algebra/tensor_algebra): Correct the precedence of `⊗ₜ[R]` (#5619)
Previously, `a ⊗ₜ[R] b = c` was interpreted as `a ⊗ₜ[R] (b = c)` which was nonsense because `eq` is not in `Type`.
I'm not sure whether `:0` is necessary, but it seems harmless.
The `:100` is the crucial bugfix here.

2021-01-05 18:04:51 01e17a9
feat(scripts/lint-style.sh): check that Lean files don't have executable bit (#5606)

2021-01-05 16:18:37 a6633e5
feat(analysis/normed_space/inner_product): new versions of Cauchy-Schwarz equality case (#5586)
The existing version of the Cauchy-Schwarz equality case characterizes the pairs `x`, `y` with `abs ⟪x, y⟫ = ∥x∥ * ∥y∥`.  This PR provides a characterization, with converse, of pairs satisfying `⟪x, y⟫ = ∥x∥ * ∥y∥`, and some consequences.

2021-01-05 14:50:35 1de608d
refactor(measure_theory): integrate almost everywhere measurable functions (#5510)
Currently, the Bochner integral is only defined for measurable functions. This means that, if `f` is continuous on an interval `[a, b]`, to be able to make sense of `∫ x in a..b, f`, one has to add a global measurability assumption, which is very much unnatural.
This PR redefines the Bochner integral so that it makes sense for functions that are almost everywhere measurable, i.e., they coincide almost everywhere with a measurable function (This is equivalent to measurability for the completed measure, but we don't state or prove this as it is not needed to develop the theory).

2021-01-05 10:34:59 8f9f5ca
chore(linear_algebra/alternating): Use `have` instead of `simp only` (#5618)
This makes the proof easier to read and less fragile to lemma changes.

2021-01-05 06:08:53 78dc23f
chore(scripts/*): rename files of the style linter (#5605)
The style linter has been doing a bit more than just checking for
copyright headers, module docstrings, or line lengths.
So I thought it made sense to reflect that in the filenames.

2021-01-05 03:19:32 6dcfa5c
chore(scripts): update nolints.txt (#5615)
I am happy to remove some nolints for you!

2021-01-04 23:56:31 12921e9
feat(tactic/simps): some improvements (#5541)
* `@[simps]` would previously fail if the definition is not a constructor application (with the suggestion to add option `{rhs_md := semireducible}` and maybe `simp_rhs := tt`). Now it automatically adds `{rhs_md := semireducible, simp_rhs := tt}` whenever it reaches this situation. 
* Remove all (now) unnecessary occurrences of `{rhs_md := semireducible}` from the library. There are still a couple left where the `simp_rhs := tt` is undesirable.
* `@[simps {simp_rhs := tt}]` now also applies `dsimp, simp` to the right-hand side of the lemmas it generates.
* Add some `@[simps]` in `category_theory/limits/cones.lean`
* `@[simps]` would not recursively apply projections of `prod` or `pprod`. This is now customizable with the `not_recursive` option.
* Add an option `trace.simps.debug` with some debugging information.

2021-01-04 22:10:37 78d5bd3
feat(analysis/normed_space/{finite_dimension, inner_product}): assorted finite-dimensionality lemmas (#5580)
Two groups of lemmas about finite-dimensional normed spaces:
- normed spaces of the same finite dimension are continuously linearly equivalent (this is a continuation of #5559)
- variations on the existing lemma `submodule.findim_add_inf_findim_orthogonal`, that the dimensions of a subspace and its orthogonal complement sum to the dimension of the full space.

2021-01-04 20:20:02 7b825f2
feat(linear_algebra/alternating): Add comp_alternating_map and lemmas (#5476)
This is just `comp_multilinear_map` with the extra bundled proof

2021-01-04 16:47:45 2300b47
chore(computability/*FA): remove unnecessary type variables (#5613)

2021-01-04 16:47:44 9535f91
feat(*): switch to lean 3.24 (#5612)

2021-01-04 16:47:42 7d0b988
chore(data/equiv/basic): Add refl / symm / trans lemmas for equiv_congr (#5609)
We already have this triplet of lemmas for `sum_congr` and `sigma_congr`.

2021-01-04 16:47:40 50beef2
feat(data/set/basic): more lemmas about `set.pi` (#5603)

2021-01-04 12:04:36 3669cb3
feat(data/real/ennreal): add `ennreal.prod_lt_top` (#5602)
Also add `with_top.can_lift`, `with_top.mul_lt_top`, and `with_top.prod_lt_top`.

2021-01-04 08:50:41 4150136
chore(logic/function): generalize `rel_update_iff` to `forall_update_iff` (#5601)

2021-01-04 08:50:39 6acf99e
fix(data/nat/basic): fix typos in docstrings (#5592)

2021-01-04 05:36:22 afbf47d
feat(data/*, order/*) supporting lemmas for characterising well-founded complete lattices (#5446)

2021-01-04 02:31:40 2434023
chore(scripts): update nolints.txt (#5598)
I am happy to remove some nolints for you!

2021-01-03 23:19:01 1503cf8
doc(overview): add dynamics and `measure.pi` (#5597)

2021-01-03 23:18:59 4fcf65c
fix(tactic/rcases): fix rcases? goal alignment (#5576)
This fixes a bug in which `rcases?` will not align the goals correctly
in the same manner as `rcases`, leading to a situation where the hint
produced by `rcases?` does not work in `rcases`.
Also fixes a bug where missing names will be printed as `[anonymous]`
instead of `_`.
Fixes #2794

2021-01-03 23:18:57 96948e4
feat(measure_theory): almost everywhere measurable functions (#5568)
This PR introduces a notion of almost everywhere measurable function, i.e., a function which coincides almost everywhere with a measurable function, and builds a basic API around the notion. It will then be used in #5510 to extend the Bochner integral. The main new definition in the PR is `h : ae_measurable f μ`. It comes with `h.mk f` building a measurable function that coincides almost everywhere with `f` (these assertions are respectively `h.measurable_mk` and `h.ae_eq_mk`).

2021-01-03 23:18:53 2967793
feat(data/option/basic): join and associated lemmas (#5426)

2021-01-03 23:18:51 d04e034
feat(measure_theory/interval_integral): FTC-2 (#4945)
The second fundamental theorem of calculus and supporting lemmas

2021-01-03 20:40:21 46c35cc
fix(algebra/module/basic): Do not attach the ℕ and ℤ `is_scalar_tower` and `smul_comm_class` instances to a specific definition of smul (#5509)
These instances are in `Prop`, so the more the merrier.
Without this change, these instances are not available for alternative ℤ-module definitions.
An example of one of these alternate definitions is `linear_map.semimodule`, which provide a second non-defeq ℤ-module structure alongside `add_comm_group.int_module`.
With this PR, both semimodule structures are shown to satisfy `smul_comm_class` and `is_scalar_tower`; while before it, only `add_comm_group.int_module` was shown to satisfy these.
This PR makes the following work:
```lean
example {R : Type*} {M₁ M₂ M₃ : Type*}
  [comm_semiring R]
  [add_comm_monoid M₁] [semimodule R M₁]
  [add_comm_monoid M₂] [semimodule R M₂]
  [add_comm_monoid M₃] [semimodule R M₃]
(f : M₁ →ₗ[R] M₂ →ₗ[R] M₃) (x : M₁) (n : ℕ) : f (n • x) = n • f x :=
by simp
```

2021-01-03 18:36:11 e1138b0
feat(measure_theory/lp_space): snorm is zero iff the function is zero ae (#5595)
Adds three lemmas, one for both directions of the iff, `snorm_zero_ae` and `snorm_eq_zero`, and the iff lemma `snorm_eq_zero_iff`.

2021-01-03 16:58:07 ae2c857
feat(measure_theory/lp_space): add triangle inequality for the Lp seminorm (#5594)

2021-01-03 16:58:05 384ba88
feat(computability/*FA): Deterministic and Nondeterministic Finite Automata (#5038)
Definition and equivalence of NFA's and DFA's

2021-01-03 14:06:47 eb6d5f1
feat(analysis/normed_space/basic): basic facts about the sphere (#5590)
Basic lemmas about the sphere in a normed group or normed space.

2021-01-03 11:59:40 0837fc3
feat(measure_theory/pi): finite products of measures (#5414)
See module doc of `measure_theory/pi.lean`

2021-01-03 08:56:55 e350114
feat(data/equiv/basic): rfl lemma for equiv_congr (#5585)

2021-01-03 05:59:33 57c6d19
feat(combinatorics/simple_graph): finitely many simple graphs on a finite type (#5584)
Adds an `ext` lemma for simple graphs and an instance that there are finitely many if the vertex set is finite.

2021-01-03 05:59:31 9fc7aa5
feat(data/finset/basic): add `finset.piecewise_le_piecewise` (#5572)
* add `finset.piecewise_le_piecewise` and `finset.piecewise_le_piecewise'`;
* add `finset.piecewise_compl`.

2021-01-03 02:24:46 0a4fbd8
chore(data/prod): add `prod.forall'` and `prod.exists'` (#5570)
They work a bit better with curried functions.

2021-01-03 02:24:43 0dc7a27
feat(data/nat/fib): fib n is a strong divisibility sequence (#5555)

2021-01-03 02:24:41 9f25244
chore(data/finset/sort): upgrade `finset.mono_of_fin` to an `order_iso` (#5495)
* Upgrade `finset.mono_of_fin` to an `order_embedding`.
* Drop some lemmas that now immediately follow from `order_embedding.*`.
* Upgrade `finset.mono_equiv_of_fin` to `order_iso`.
* Define `list.nodup.nth_le_equiv` and `list.sorted.nth_le_iso`.
* Upgrade `mono_equiv_of_fin` to an `order_iso`, make it `computable`.

2021-01-03 02:24:39 9ea7e46
feat(linear_algebra/alternating): Show the link to linear_independent (#5477)

2021-01-03 02:24:36 04f8fd7
feat(group_theory/dihedral): add dihedral groups (#5171)
Contains a subset of the content of #1076 , but implemented slightly differently.
In #1076, finite and infinite dihedral groups are implemented separately, but a side effect of what I did was that `dihedral 0` corresponds to the infinite dihedral group.

2021-01-03 00:36:14 ee2c963
doc(overview): pluralization convention (#5583)
Normalized pluralizations, according to the convention @PatrickMassot described

2021-01-03 00:36:12 e698290
doc(overview): Add alternating_map (#5582)

2021-01-03 00:36:10 1a39825
doc(overview): combinatorics section (#5581)
Added overview entries for simple graphs and some pigeonhole principles

2021-01-03 00:36:08 5bff887
doc(overview): add missing algebras to overview (#5579)

2021-01-03 00:36:06 e094606
chore(topology/algebra/ordered,analysis/specific_limits): two more limits (#5573)

2021-01-02 20:59:51 aa88bb8
feat(measure_theory/borel_space): the inverse of a closed embedding is measurable (#5567)

2021-01-02 20:59:49 a7d05c4
chore(number_theory/bernoulli): refactor definition of bernoulli (#5534)
A minor refactor of the definition of Bernoulli number, and I expanded the docstring.

2021-01-02 20:59:48 12b5024
feat(data/polynomial/erase_lead): add lemma erase_lead_card_support_eq (#5529)
One further lemma to increase the API of `erase_lead`.  I use it to simplify the proof of the Liouville PR.  In particular, it is used in a step of the proof that you can "clear denominators" when evaluating a polynomial with integer coefficients at a rational number.

2021-01-02 17:53:35 fceb7c1
chore(algebra/group,algebra/group_with_zero): a few more injective/surjective constructors (#5547)

2021-01-02 15:05:58 e142c82
feat(algebra/group/prod) Units of a product monoid (#5563)
Just a simple seemingly missing def

2021-01-02 10:18:26 e35a703
feat(algebra/ordered_{group,field}): more lemmas relating inv and mul inequalities (#5561)
I also renamed `inv_le_iff_one_le_mul` to `inv_le_iff_one_le_mul'` for consistency with `div_le_iff` and `div_le_iff'` (unprimed lemmas involve multiplication on the right and primed lemmas involve multiplication on the left).

2021-01-02 10:18:25 f5f879e
feat(linear_algebra/dimension): linear equiv iff eq dim (#5559)
See related zulip discussion
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Classification.20of.20finite-dimensional.20vector.20spaces/near/221357275

2021-01-02 10:18:22 9f6300e
chore(data/complex/basic): upgrade `complex.norm_sq` to a `monoid_with_zero_hom` (#5553)

2021-01-02 10:18:20 9d3c05a
feat(ring_theory/simple_module): simple modules and Schur's Lemma (#5473)
Defines `is_simple_module` in terms of `is_simple_lattice`
Proves Schur's Lemma
Defines `division ring` structure on the endomorphism ring of a simple module

2021-01-02 10:18:18 afc3f03
feat(algebra/ordered_group): add linear_ordered_comm_group and linear_ordered_cancel_comm_monoid (#5286)
We have `linear_ordered_add_comm_group` but we didn't have `linear_ordered_comm_group`. This PR adds it, as well as multiplicative versions of `canonically_ordered_add_monoid`, `canonically_linear_ordered_add_monoid` and `linear_ordered_cancel_add_comm_monoid`. I added multiplicative versions of the lemmas about these structures too. The motivation is that I want to slightly generalise the notion of a valuation.
[ also random other bits of tidying which I noticed along the way (docstring fixes, adding `norm_cast` attributes) ].

2021-01-02 07:10:53 d94f0a2
chore(data/list): a list sorted w.r.t. `(<)` has no duplicates (#5550)

2021-01-02 00:36:58 409ea42
chore(algebra/*): move some lemmas to `div_inv_monoid` (#5552)

2021-01-02 00:36:56 06a11fd
chore(data/fintype/card): generalize `equiv.prod_comp` to `function.bijective.prod_comp` (#5551)
This way we can apply it to `add_equiv`, `mul_equiv`, `order_iso`, etc
without using `to_equiv`.

2021-01-02 00:36:54 ea3815f
feat(analysis/normed_space/inner_product): upgrade orthogonal projection to a continuous linear map (#5543)
Upgrade the orthogonal projection, from a linear map `E →ₗ[𝕜] K` to a continuous linear map `E →L[𝕜] K`.

2021-01-02 00:36:53 b57d562
feat(algebra/big_operators/nat_antidiagonal): add prod_antidiagonal_eq_prod_range_succ (#5528)
Sometimes summing over nat.antidiagonal is nicer than summing over range(n+1).

2021-01-02 00:36:49 c32efea
feat(data/fin): there is at most one `order_iso` from `fin n` to `α` (#5499)
* Define a `bounded_lattice` instance on `fin (n + 1)`.
* Prove that there is at most one `order_iso` from `fin n` to `α`.

2021-01-01 21:26:00 8aa2332
chore(*): golf some proofs (#5548)
Parts of #5539

2021-01-01 21:25:58 e0030ff
chore(data/real/cau_seq): golf some proofs (#5545)

2021-01-01 19:02:10 b542cfb
chore(linear_algebra/basic): notation for span of a singleton (#5538)
Notation `∙` (`\.`) for the span of a single element of a module, so one can write `R ∙ x` instead of `span R {x}`.  This in itself does not save so many keystrokes, but it also seems to be a bit more robust: it works in settings where previously one had to type `span R ({x} : set M)` because the type of the singleton was not recognised.
[Zulip 1](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/New.20linear.20algebra.20notation), [Zulip 2](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Notation.20for.20span)

2021-01-01 15:24:16 fcbaf62
doc(lint/type_classes): add has_coe_to_fun linter (#5546)

2021-01-01 01:33:29 d2bde11
chore(scripts): update nolints.txt (#5554)
I am happy to remove some nolints for you!

2020-12-31 19:17:29 54bf708
feat(logic/basic): exists_unique_false simp lemma (#5544)

2020-12-31 16:30:28 0830bfd
refactor(analysis/analytic/basic): redefine `formal_multilinear_series.radius` (#5349)
With the new definition, (a) some proofs get much shorter; (b) we
don't need `rpow` in `analytic/basic`.

2020-12-31 10:07:03 10f6c15
chore(analysis/normed_space/inner_product): notation for orthogonal complement (#5536)
Notation for `submodule.orthogonal`, so that one can write `Kᗮ` instead of `K.orthogonal`.
Simultaneous PR
https://github.com/leanprover/vscode-lean/pull/246
adds `\perp` as vscode shorthand for this symbol.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/New.20linear.20algebra.20notation)

2020-12-31 08:49:08 cca6365
feat(field_theory/galois): is_galois.tfae (#5542)
This is a TFAE theorem for is_galois

2020-12-31 06:04:17 b04aeb5
chore(algebra): move lemmas from ring_theory.algebra_tower to algebra.algebra.tower (#5506)
Moved some basic lemmas from `ring_theory.algebra_tower` to `algebra.algebra.tower`.

2020-12-31 02:53:26 a40f31f
feat(data/tprod): finite products of types (#5385)
This PR defined `list.tprod` as a finite product of types to transfer results from binary products to finitary products.
See module doc for more info.

2020-12-31 01:37:37 611b73e
chore(scripts): update nolints.txt (#5540)
I am happy to remove some nolints for you!

2020-12-30 23:15:52 9c46cad
feat(field_theory/algebraic_closure): algebraically closed fields have no nontrivial algebraic extensions (#5537)

2020-12-30 20:43:17 6e0d0fa
chore(algebra/field): use `K` as a type variable (#5535)

2020-12-30 20:43:15 9988193
feat(measure_theory): various additions (#5389)
Some computations of measures on non-measurable sets
Some more measurability lemmas for pi-types
Cleanup in `measure_space`

2020-12-30 19:29:20 f1d2bc6
feat(order/lattice_intervals): lattice structures on intervals in lattices (#5496)
Defines (semi-)lattice structures on intervals in lattices

2020-12-30 17:33:54 16320e2
chore(topology/algebra/infinite_sum): refactor `tsum_mul_left/right` (#5533)
* move old lemmas to `summable` namespace;
* add new `tsum_mul_left` and `tsum_mul_right` that work in a `division_ring` without a `summable` assumption.

2020-12-30 17:33:52 958c407
chore(analysis/normed_space/basic): a few lemmas about `nnnorm` (#5532)

2020-12-30 15:51:17 b15bb06
feat(topology/instances/ennreal): a sufficient condition for `f : (Σ i, β i) → ℝ` to be summable (#5531)

2020-12-30 15:51:13 38ba6ba
chore(data/real/{e,}nnreal): a few lemmas (#5530)
* Rename `nnreal.le_of_forall_lt_one_mul_lt` to
  `nnreal.le_of_forall_lt_one_mul_le`, and similarly for `ennreal`.
* Move the proof of the latter lemma to `topology/instances/ennreal`,
  prove it using continuity of multiplication.
* Add `ennreal.le_of_forall_nnreal_lt`, `nnreal.lt_div_iff`, and
  `nnreal.mul_lt_of_lt_div`.

2020-12-30 15:51:11 c82be35
feat(analysis/normed_space/inner_product): orthogonal complement lemmas (#5474)
The orthogonal complement of a subspace is closed.  The orthogonal complement of the orthogonal complement of a complete subspace is itself.

2020-12-30 13:05:48 7a03171
chore(order/rel_iso): add some missing lemmas (#5492)
Also define `order_iso.trans`.

2020-12-30 13:05:46 8545aa6
chore(topology/algebra/ordered): move code, add missing lemmas (#5481)
* merge two sections about `linear_ordered_add_comm_group`;
* add missing lemmas about limits of `f * g` when one of `f`, `g` tends to `-∞`, and another tends to a positive or negative constant;
* drop `neg_preimage_closure` in favor of the new `neg_closure` in `topology/algebra/group`.

2020-12-30 10:07:47 5e86589
chore(data/nat/enat): some useful lemmas (#5517)

2020-12-30 08:01:01 1c110ad
fix(tactic/linarith): elaborate and insert arguments before destructing hypotheses (#5501)
closes #5480
Arguments to `linarith` can depend on hypotheses (e.g. conjunctions) that get destructed during preprocessing, after which the arguments will no longer elaborate or typecheck. This just moves the elaboration earlier and adds these arguments as hypotheses themselves.

2020-12-30 01:38:14 7c6020f
chore(scripts): update nolints.txt (#5526)
I am happy to remove some nolints for you!

2020-12-29 19:06:07 abffbaa
feat(analysis/convex/specific_functions): log is concave (#5508)
This PR proves that the real log is concave on `Ioi 0` and `Iio 0`, and adds lemmas about concavity of functions along the way.

2020-12-29 07:47:35 8e413eb
feat(order/bounded_lattice): define atoms, coatoms, and simple lattices (#5471)
Defines `is_atom`, `is_coatom`, and `is_simple_lattice`
Refactors `ideal.is_maximal` to use `is_coatom`, the new definition is definitionally equal to the old one

2020-12-29 03:00:40 15ff865
doc(localized): update documentation (#5519)
remove old warning
remove duplicated documentation
rename notation namespace to locale

2020-12-29 01:33:07 297d97e
chore(scripts): update nolints.txt (#5522)
I am happy to remove some nolints for you!

2020-12-28 17:36:18 41bad63
feat(polynomial/degree/definitions): nat_degree_X_pow (#5512)
Companion to degree_X_pow

2020-12-28 15:03:21 d245c4e
feat(polynomial/algebra_map): aeval_comp (#5511)
Basic lemma about aeval

2020-12-28 13:55:13 f1f2ca6
feat(category_theory/limits): preserves limits of equivalent shape (#5515)

2020-12-28 03:40:12 6d1d4c1
chore(scripts): update nolints.txt (#5514)
I am happy to remove some nolints for you!

2020-12-28 00:38:46 6d0b415
feat(data/list/basic): nth_zero (#5513)

2020-12-27 16:40:59 5c8c122
chore(analysis/analytic/basic): speed up slow lemmas (#5507)
Removes slow `tidy`s from `formal_multilinear_series.change_origin_radius` and `formal_multilinear_series.change_origin_has_sum`

2020-12-27 04:21:55 1e75453
feat(data/list/basic): filter_map retains prefix (#5453)

2020-12-26 22:54:39 f7e728a
feat(data/list/range): enum is a zip (#5457)

2020-12-26 20:38:16 ae60bb9
chore(topology/algebra/order): add `continuous_on.surj_on_of_tendsto` (#5502)
* rename `surjective_of_continuous` to `continuous.surjective` and `surjective_of_continuous'` to `continuous.surjective'`;
* add `continuous_on.surj_on_of_tendsto` and `continuous_on.surj_on_of_tendsto'`

2020-12-26 09:47:44 add100a
feat(ring_theory/perfection): perfection.map (#5503)

2020-12-26 01:31:06 768497c
chore(scripts): update nolints.txt (#5505)
I am happy to remove some nolints for you!

2020-12-25 21:29:27 666035f
fix(algebra/big_operators/basic): add docstrings for `sum_bij` and `sum_bij'` (#5497)
They don't seem to be there.

2020-12-25 21:29:26 1a526b3
chore(topology/homeomorph): a few more lemmas, golf (#5467)

2020-12-25 18:38:51 726b7bf
feat(analysis/specific_limits): a `tfae` about "`f` grows exponentially slower than `R ^ n`" (#5488)
Also add supporting lemmas here and there.

2020-12-25 17:10:05 d968a61
feat(category_theory/limits): yoneda reflects limits (#5447)
yoneda and coyoneda jointly reflect limits

2020-12-25 13:57:08 f60fd08
chore(logic/basic): +2 simp lemmas (#5500)
* simplify `a ∨ b ↔ a` to `b → a`;
* simplify `a ∨ b ↔ b` to `a → b`.

2020-12-25 01:42:05 1f0231d
chore(scripts): update nolints.txt (#5498)
I am happy to remove some nolints for you!

2020-12-24 19:51:27 feced76
feat(algebra/*): Noncomputable `group` structures from `is_unit` (#5427)
Noncomputably defines the following group structures given that all (nonzero) elements are units:
- `monoid` -> `group`
- `comm_monoid` -> `comm_group`
- `monoid_with_zero` -> `comm_group_with_zero`
- `comm_monoid_with_zero` -> `comm_group_with_zero`
- `ring` -> `division_ring`
- `comm_ring` -> `field`

2020-12-24 16:50:39 f300c75
feat(data/list/basic): lemmas about reduce_option (#5450)

2020-12-24 14:52:22 3046436
chore(linear_algebra/linear_independent): make a binding explicit in ne_zero (#5494)
Resubmitting #5479 from within the mathlib repo.

2020-12-24 08:35:35 46614b0
chore(ring_theory/power_series/well_known): generalize (#5491)
* generalize `power_series.exp`, `power_series.cos`, and `power_series.sin` to a `ℚ`-algebra;
* define `alg_hom.mk'`;
* rename `alg_hom_nat` to `ring_hom.to_nat_alg_hom`;
* drop `alg_hom_int` (was equal to `ring_hom.to_int_alg_hom`);
* add `ring_hom.to_rat_alg_hom`.

2020-12-24 08:35:33 8a03839
chore(scripts): update nolints.txt (#5490)
I am happy to remove some nolints for you!

2020-12-24 07:17:34 2ae61be
feat(field_theory/galois): is_galois.self (#5486)
Some basic lemmas about is_separable, normal, and is_galois.

2020-12-23 22:08:09 63070ed
feat(data/list/chain): relate chain to refl trans gen (#5437)
Some golf and a new lemma to convert a list chain to a refl trans gen

2020-12-23 22:08:07 ceae529
chore(group_theory/coset): Make `quotient_group.mk` an abbreviation (#5377)
This allows simp lemmas about `quotient.mk'` to apply here, which currently do not apply.
The definition doesn't seem interesting enough to be semireducible.

2020-12-23 18:58:44 2a5a0b0
feat(group_theory/*): mark some lemmas as ext (about homs out of free constructions) (#5484)

2020-12-23 18:58:42 e2edba5
chore(order/filter/basic): make `filter.univ_mem_sets` a `simp` lemma (#5464)

2020-12-23 18:58:38 d3a5e06
feat(data/dlist/basic): dlist singleton and of_list simp lemmas (#5461)

2020-12-23 16:10:29 fd9268c
feat(data/list/basic): lemmas about scanl (#5454)

2020-12-23 12:11:42 eb5cf25
chore(analysis/asymptotics): a few more lemmas (#5482)
* golf some proofs;
* `x ^ n = o (y ^ n)` as `n → ∞` provided that `0 ≤ x < y`;
* lemmas about `is_O _ _ ⊤` etc;
* if `is_O f g cofinite`, then for some `C>0` and any `x` such that `g x ≠ 0` we have `∥f x∥≤C*∥g x∥`.

2020-12-23 09:41:22 435b97a
feat(ring_theory/witt_vector): the comparison between W(F_p) and Z_p (#5164)
This PR is the culmination of the Witt vector project. We prove that the
ring of Witt vectors over `zmod p` is isomorphic to the ring of `p`-adic
numbers.
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-12-23 04:12:18 d5adbde
feat(data/list/basic): prefix simplifying iff lemmas (#5452)

2020-12-23 01:30:34 24f71d7
chore(scripts): update nolints.txt (#5483)
I am happy to remove some nolints for you!

2020-12-22 20:56:38 eba2a79
feat(data/list/zip): length of zip_with, nth_le of zip (#5455)

2020-12-22 17:05:18 3fc60fc
fix(number_theory/bernoulli): fix docstring (#5478)

2020-12-22 17:05:16 0f1362e
chore(analysis/calculus/mean_value): use `𝓝[Ici x] x` instead of `𝓝[Ioi x] x` (#5472)
In many parts of the library we prefer `𝓝[Ici x] x` to `𝓝[Ioi x]
x` (e.g., in assumptions line `continuous_within_at`). Fix MVT and
Gronwall's inequality to use it if possible.
Motivated by #4945

2020-12-22 17:05:14 fb99440
feat(data/complex/is_R_or_C): register some instances (#5466)
Register a couple of facts which were previously known for `ℝ` and `ℂ` individually, but not for the typeclass `[is_R_or_C K]`:
- such a field `K` is finite-dimensional as a vector space over `ℝ`
- finite-dimensional normed spaces over `K` are proper.
https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Instances.20for.20is_R_or_C

2020-12-22 17:05:12 7c2f166
chore(analysis/special_functions/trigonometric): review continuity of `tan` (#5429)
* prove that `tan` is discontinuous at `x` whenever `cos x = 0`;
* turn `continuous_at_tan` and `differentiable_at_tan` into `iff` lemmas;
* reformulate various lemmas in terms of `cos x = 0` instead of `∃ k, x = ...`;

2020-12-22 17:05:09 d569d63
refactor(analysis/inner_product_space, geometry/euclidean) range of orthogonal projection (#5408)
Previously, the orthogonal projection was defined for all subspaces of an inner product space, with the junk value `id` if the space was not complete; then all nontrivial lemmas required a hypothesis of completeness (and nonemptiness for the affine orthogonal projection).  Change this to a definition only for subspaces `K` satisfying `[complete_space K]` (and `[nonempty K]` for the affine orthogonal projection).
Previously, the orthogonal projection was a linear map from `E` to `E`.  Redefine it to be a linear map from `E` to `K`.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Orthogonal.20projection)

2020-12-22 17:05:07 0ff9068
feat(data/finset/basic, topology/separation): add induction_on_union, separate, and separate_finset_of_t2 (#5332)
prove lemma disjoint_finsets_opens_of_t2 showing that in a t2_space disjoint finsets have disjoint open neighbourhoods, using auxiliary lemma not_mem_finset_opens_of_t2.

2020-12-22 13:47:43 02ab90c
chore(*): split some long lines (#5470)

2020-12-22 07:50:26 4ddae3d
feat(ring_theory/power_series): define power series for `exp`, `sin`, `cos`, and `1 / (u - x)`. (#5432)
This PR defines `power_series.exp` etc to be formal power series for the corresponding functions. Once we have a bridge to `is_analytic`, we should redefine `complex.exp` etc using these power series.

2020-12-22 03:10:44 92dfdbc
chore(scripts): update nolints.txt (#5469)
I am happy to remove some nolints for you!

2020-12-22 03:10:42 3c7394f
fix(group_theory/*, algebra/group): [to_additive, simp] doesn't work (#5468)
As explained in `algebra/group/to_additive`, `@[to_additive, simp]` doesn't work (it doesn't attach a `simp` attribute to the additive lemma), but conversely `@[simps, to_additive]` is also wrong.
Along the way I also noticed that some `right_inv` (as in an inverse function) lemmas were being changed to `right_neg` by to_additive :D

2020-12-21 23:51:24 9ec2778
chore(data/{equiv,set}/basic): image_preimage (#5465)
* `equiv.symm_image_image`: add `@[simp]`;
* `equiv.image_preimage`, `equiv.preimage_image`: new `simp` lemmas;
* `set.image_preimage_eq`, `set.preimage_image_eq`: make `s : set _` an explicit argument;
* `function.injective.preimage_image`, `function.surjective.image_preimage`: new aliases for `set.preimage_image_eq`
  and `set.image_preimage_eq` with arguments reversed
Also golf a proof about `separated`.

2020-12-21 20:56:39 d2ae43f
feat(data/list/basic): lemmas about nth of take and append (#5449)

2020-12-21 20:56:37 3b9cbdf
feat(data/ordmap): Ordered maps (like rb_map but better) (#5353)
This cleans up an old mathlib branch from 2 years ago, so it probably isn't in very modern style, but it would be best to get it merged and kept up to date rather than leaving it to rot.
It is an implementation of size balanced ordered maps based on Haskell's `Data.Map.Strict`. The `ordnode` structure can be used directly if one is only interested in using it for programming purposes, and the `ordset` structure bundles the proofs so that you can prove theorems about inserting and deleting doing what you expect.

2020-12-21 17:48:50 bc3ad25
feat(linear_algebra/tensor_algebra): Add missing lemmas about subtraction (#5428)

2020-12-21 17:48:49 34d5750
feat(data/option/basic): lemmas on map of none and congr (#5424)

2020-12-21 16:45:47 0ed425f
feat(ring_theory/perfection): define characteristic predicate of perfection (#5386)
Name changes:
- `perfect_field` --> `perfect_ring` (generalization)
- `semiring.perfection` --> `ring.perfection`
- Original `ring.perfection` deleted.

2020-12-21 15:29:49 96a2aa1
feat(ring_theory/roots_of_unity): add minimal_polynomial_eq_pow (#5444)
This is the main result about minimal polynomial of primitive roots of unity: `μ` and `μ ^ p` have the same minimal polynomial.
The proof is a little long, but I don't see how I can split it: it is entirely by contradiction, so any lemma extracted from it would start with a false assumption and at the end it would be used only in this proof.

2020-12-21 14:00:44 c5c02ec
feat(category_theory/yoneda): add iso_comp_punit (#5448)
A presheaf P : C^{op} -> Type v is isomorphic to the composition of P with the coyoneda functor Type v -> Type v associated to `punit`.
[This is useful for developing the theory of sheaves taking values in a general category]

2020-12-21 09:07:54 c98d5bb
feat(category_theory/limits): yoneda preserves limits (#5439)
yoneda and coyoneda preserve limits

2020-12-21 07:48:53 4778e16
chore(category_theory/sites/sheaf): rename sheaf to sheaf_of_types (#5458)
I wanted to add sheaves with values in general categories, so I moved sheaf.lean to sheaf_of_types.lean and then added a new file sheaf.lean. Github then produced an incomprehensible diff file because sheaf.lean had completely changed. Hence I propose first moving `sheaf.lean` to `sheaf_of_types.lean` and then adding a new `sheaf.lean` later. As well as moving the file, I also slightly change it.

2020-12-21 01:32:14 ca2e536
chore(scripts): update nolints.txt (#5459)
I am happy to remove some nolints for you!

2020-12-20 11:33:02 d79105e
feat(tactic/field_simp): let field_simp use norm_num to prove numerals are nonzero (#5418)
As suggested by @robertylewis in https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Solving.20simple.20%28in%29equalities.20gets.20frustrating/near/220278546, change the discharger in `field_simp` to try `assumption` on  goals `x ≠ 0` and `norm_num1` on these goals when `x` is a numeral.

2020-12-20 09:21:32 5010738
feat(topology/algebra/ordered): continuity of `abs` (#5412)

2020-12-20 01:39:55 a9fb069
chore(scripts): update nolints.txt (#5441)
I am happy to remove some nolints for you!

2020-12-19 20:45:22 1cb9727
feat(field_theory/galois): Separable splitting field is Galois (#5347)
Proves that a splitting field of a separable polynomial is Galois by showing that it has lots of automorphisms.

2020-12-19 17:55:35 e22fb94
chore(data/nat/cast,algebra/ordered_group): 2 trivial lemmas (#5436)

2020-12-19 17:55:33 5de6757
chore(algebra/ordered_group): deduplicate (#5403)
I deleted many `a_of_b` lemmas for which `a_iff_b` existed, then restored (most? all?) of them using `alias` command.

2020-12-19 17:55:30 63e7fc9
feat(topology/algebra/ordered): a linear ordered additive group with order topology is a topological group (#5402)

2020-12-19 17:55:28 154a024
feat(measure_theory/lp_space): add lemmas about the monotonicity of the Lp seminorm (#5395)
Also add a lemma mem_Lp.const_smul for a normed space.

2020-12-19 17:55:27 ce385a0
feat(ring_theory/roots_of_unity): lemmas about minimal polynomial (#5393)
Three results about the minimal polynomial of `μ` and `μ ^ p`, where `μ` is a primitive root of unity. These are preparatory lemmas to prove that the two minimal polynomials are equal.

2020-12-19 16:17:17 c55721d
chore(analysis/calculus/{fderiv,deriv}): `f x ≠ f a` for `x ≈ a`, `x ≠ a` if `∥z∥ ≤ C * ∥f' z∥` (#5420)

2020-12-19 14:59:26 ff830d7
feat(ring_theory/witt_vector): redefine subtraction using witt_sub polynomial (#5405)

2020-12-19 11:05:52 656b1bb
feat(category_theory): essential image of a functor (#5352)
Define essential image of a functor as a predicate and use it to re-express essential surjectivity.
Construct the essential image as a subcategory of the target and use it to factorise an arbitrary functor into a fully faithful functor and an essentially surjective functor.
Also shuffles the import hierarchy a little so that essential image can import full subcategories.

2020-12-19 08:21:41 0bb665c
chore(ring_theory/power_series): review, golf (#5431)

2020-12-19 02:24:58 53354e7
chore(scripts): update nolints.txt (#5433)
I am happy to remove some nolints for you!

2020-12-19 02:24:56 ec1b70e
chore(linear_algebra/multilinear): Add map_update_zero (#5417)
`map_coord_zero` isn't in a form that can be used by simp, so this introduces a form which can.

2020-12-19 02:24:54 5e057c9
feat(data/fin): trans and id lemmas for fin.cast (#5415)

2020-12-18 23:34:58 0e9a77c
feat(data/nat/basic): succ_lt_succ_iff (#5422)

2020-12-18 20:57:15 33483a3
chore(analysis/special_functions/trigonometric): golf a few more proofs (#5423)

2020-12-18 17:40:37 0d140b1
feat(data/set/basic): nonempty instances for subtypes (#5409)
In #5408, it is useful to be able to track the nonemptiness of a subset by typeclass inference.  These constructions allow one to do this.

2020-12-18 15:15:14 775edc6
feat(linear_algebra/tensor_product): Inherit smul through is_scalar_tower (#5317)
Most notably, this now means that the lemmas about `smul` and `tmul` can be used to prove `∀ z : Z, (z • a) ⊗ₜ[R] b = z • (a ⊗ₜ[R] b)`.
Hopefully these instances aren't dangerous - in particular, there's now a risk of a non-defeq-but-eq diamond for the `ℤ`- and `ℕ`-module structure.
However:
* this diamond already exists in other places anyway
* the diamond if it comes up can be solved with `subsingleton.elim`, since we have a proof that all Z-module and N-module structures must be equivalent.

2020-12-18 12:03:56 74b5839
chore(topology/algebra/ordered): generalize `tendsto_at_top_add_left` etc (#5398)
* generalize some lemmas from `linear_ordered_ring` to
  `linear_ordered_add_comm_group`;
* rename them to allow dot notation; the new names are
  `filter.tendsto.add_at_*` and `filter.tendsto.at_*_add`, where `*` is
  `top` or `bot`;
* generalize `infi_unit` and `supr_unit` to
  `conditionally_complete_lattice`, add `[unique α]` versions;
* in a `subsingleton`, both `at_top` and `at_bot` are equal to `⊤`;
  these lemmas are useful for the `nontriviality` tactic.

2020-12-18 09:12:03 c4f673c
chore(analysis/normed_space/basic): `continuous_at.norm` etc (#5411)
Add variants of the lemma that the norm is continuous.  Also rewrite a few proofs, and rename three lemmas:
* `lim_norm` -> `tendsto_norm_sub_self`
* `lim_norm_zero` -> `tendsto_norm_zero`
* `lim_norm_zero'` -> `tendsto_norm_zero'`

2020-12-18 01:44:51 a4dd9e1
chore(scripts): update nolints.txt (#5413)
I am happy to remove some nolints for you!

2020-12-18 01:44:49 b1218f8
chore(analysis/special_functions/trigonometric): review, golf (#5392)

2020-12-17 16:32:00 35f2789
chore(algebra/module/basic): add `subsingleton (semimodule ℕ M)` (#5396)
This can be used to resolve diamonds between different `semimodule ℕ` instances.
The implementation is copied from the `subsingleton (module ℤ M)` instance.

2020-12-17 13:27:40 6f1351f
chore(algebra/{group,ring}): more on pushing/pulling groups/rings along morphisms (#5406)

2020-12-17 13:27:39 ff716d2
chore(order/bounds): golf (#5401)

2020-12-17 13:27:36 3685146
chore(topology/algebra/ordered): deduplicate (#5399)
* Drop `mem_nhds_unbounded` in favor of
  `mem_nhds_iff_exists_Ioo_subset'`.
* Use `(h : ∃ l, l < a)` instead of `{l} (hl : l < a)` in
  `mem_nhds_iff_exists_Ioo_subset'`. This way we can `apply` the
  theorem without generating non-`Prop` goals and we can get the
  arguments directly from `no_bot` / `no_top`.
* add `nhds_basis_Ioo'` and `nhds_basis_Ioo`.

2020-12-17 13:27:34 35a16a9
feat(algebra/module/basic): Add symmetric smul_comm_class instances for int and nat (#5369)
These can't be added globally for all types as they cause instance resolution loops, but are safe here as these definitions do not depend on an existing `smul_comm_class`.
Note that these instances already exist via `is_scalar_tower.to_smul_comm_class'` for algebras - this just makes sure the instances are still available in the presence of weaker typeclasses. There's no diamond concern here, as `smul_comm_class` is in `Prop`.

2020-12-17 10:49:30 ee6969c
chore(linear_algebra/{alternating,multilinear}): Add a handful of trivial lemmas (#5380)
Some of these are needed for a WIP PR, and some seem like generally nice things to have.

2020-12-17 08:03:51 6a99e9e
chore(analysis/calculus/deriv): add `iff` versions of `differentiable_const_add` etc (#5390)
Also drop some unneeded `differentiable` assumptions in lemmas like `deriv_const_add`.

2020-12-17 01:31:27 e8fc373
chore(scripts): update nolints.txt (#5400)
I am happy to remove some nolints for you!

2020-12-16 21:52:40 01a77ad
chore(analysis/analytic/basic.lean): fix latex in doc (#5397)
Doc in the file `analytic/basic.lean` is broken, since I used a latex command `\choose` which doesn't exist. Replace it with `\binom`.

2020-12-16 21:52:38 8fa10af
feat(ring_theory/algebra_tower): alg_hom_equiv_sigma (#5345)
Proves that algebra homomorphisms from the top of an is_scalar_tower are the same as a pair of algebra homomorphisms.
This is useful for counting algebra homomorphisms.

2020-12-16 18:35:22 c5a2ff4
chore(script/copy-mod-doc) Specify an encoding for files when opening (#5394)
This was necessary for the script to run locally on windows.

2020-12-16 18:35:20 9282f6c
feat(finset): two simple lemmas (#5387)
also open function namespace

2020-12-16 15:31:36 39ecd1a
chore(group_theory/group_action/basic): Add a simp lemma about smul on quotient groups (#5374)
By pushing `mk` to the outside, this increases the chance they can cancel with an outer `lift`

2020-12-16 15:31:34 1221ab6
chore(*): add a `div`/`sub` field to (`add_`)`group`(`_with_zero`) (#5303)
This PR is intended to fix the following kind of diamonds:
Let `foo X` be a type with a `∀ X, has_div (foo X)` instance but no `∀ X, has_inv (foo X)`, e.g. when `foo X` is a `euclidean_domain`. Suppose we also have an instance `∀ X [cromulent X], group_with_zero (foo X)`. Then the `(/)` coming from `group_with_zero_has_div` cannot be defeq to the `(/)` coming from `foo.has_div`.
As a consequence of making the `has_div` instances defeq, we can no longer assume that `(div_eq_mul_inv a b : a / b = a * b⁻¹) = rfl` for all groups. The previous preparation PR #5302 should have changed all places in mathlib that assumed defeqness, to rewrite explicitly instead.

2020-12-16 13:55:21 461865b
refactor(data/real): move `real.sqrt` to `data.real.sqrt`, more dependencies (#5359)
* define `nnreal.sqrt`;
* use general theory to prove that the inverse exists, and is an `order_iso`;
* deduce continuity of `sqrt` from continuity of `order_iso`.

2020-12-16 13:55:19 1b01068
feat(ring_theory/witt_vector): Witt vectors are proj. limit of truncated Witt vectors (#5163)
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-12-16 10:00:13 6548be4
chore(data/quot): Add missing simp lemmas (#5372)
These are called `lift_on'_beta` for consistency with `lift_on_beta`; even though we also have `map_mk'` etc in the same file.

2020-12-16 07:31:15 78940f4
chore(*): use notation `ℝ≥0`  (#5391)

2020-12-16 07:31:13 47b3c4b
feat(algebra/lie/basic): nilpotent and solvable Lie algebras (#5382)

2020-12-16 04:20:19 79e9aee
feat(equiv/basic): add true_arrow_equiv (#5388)

2020-12-16 01:15:14 26f8b28
chore(scripts): update nolints.txt (#5384)
I am happy to remove some nolints for you!

2020-12-16 01:15:12 e264e5f
feat(tactic/ext): `ext?` displays applied lemmas (#5375)
refactor using `state_t` instead of state passing style

2020-12-15 22:23:52 2ee0f1e
feat(category_theory/isomorphism): is_iso versions (#5355)
add `is_iso` versions of some existing `iso` lemmas

2020-12-15 22:23:50 dbb6b04
feat(topology/separation): add lemma connected_component_eq_clopen_Inter (#5335)
Prove the lemma that in a t2 and compact space, the connected component of a point equals the intersection of all its clopen neighbourhoods. Will be useful for work on Profinite sets. The proof that a Profinite set is a limit of finite discrete spaces found at: https://stacks.math.columbia.edu/tag/08ZY uses this lemma. Also some proofs that the category Profinite is reflective in CompactHausdorff uses this lemma.

2020-12-15 21:09:34 66eddd8
chore(algebra/category/Module/monoidal): Speed up the elaboration (#5383)
This takes the elaboration time from ~5s to ~2.5s for associator_naturality, from ~90s to 5s for pentagon, and from ~14s to ~8s for `triangle`.

2020-12-15 21:09:32 b702408
feat(ring_theory/roots_of_unity): add squarefreeness mod p of minimal polynomial (#5381)
Two easy results about the reduction `mod p` of the minimal polynomial over `ℤ` of a primitive root of unity: it is separable and hence squarefree.

2020-12-15 17:57:30 78e48c0
ci(lint-copy-mod-doc.py): add reserved notation and set_option linters, enable small_alpha_vrachy_check linter (#5330)
[As requested on Zulip](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/the.20word.20.22to.22/near/219370843), the reserved notation linter checks for `reserve` or `precedence` at the start of a non-comment, non-string literal line in any file other than `tactic.core`.
The new set_option linter disallows `set_option pp`, `set_option profiler` and `set_option trace` at the start of a non-comment, non-string literal line.
I also noticed that the `small_alpha_vrachy_check` linter added in #4802 wasn't actually called, so I added it to the main `lint` function.

2020-12-15 16:43:44 c208a65
feat(analysis/mean_inequalities): add Minkowski's inequality for the Lebesgue integral of ennreal functions (#5379)

2020-12-15 13:31:21 3a997b1
fix(group_theory/subgroup): Fix doubly-namespaced instance (#5378)
Not sure why the linter missed this.

2020-12-15 13:31:19 75130b3
feat(data/set/basic): nonempty set of nonempty subtype (#5373)

2020-12-15 13:31:17 d21d17b
feat(ring_theory/roots_of_unity): minimal polynomial of primitive roots (#5322)
I've added some simple results about the minimal polynomial of a primitive root of unity. The next step will be to prove that any two primitive roots have the same minimal polynomial.

2020-12-15 10:30:21 0f4ac1b
feat(category_theory/limits): product comparison simp lemmas (#5351)
This adds two new simp lemmas to reduce the prod comparison morphism and uses them to golf some proofs

2020-12-15 10:30:19 9ba9a98
chore(category_theory/sites): improve naming (#5350)
- Improve naming of some lemmas to be more descriptive
- Golf some proofs
- Add some convenience deconstructors which are useful in practice

2020-12-15 10:30:17 dd72a98
feat(group_theory/perm/basic): Bundle sigma_congr_right and sum_congr into monoid_homs (#5301)
This makes the corresponding subgroups available as `monoid_hom.range`.
As a result, the old subgroup definitions can be removed.
This also adds injectivity and cardinality lemmas.

2020-12-15 10:30:14 8041945
feat(category_theory/monad): monadicity theorems (#5137)
This is a proof of the reflexive (or crude) monadicity theorem along with a complete proof of Beck's monadicity theorem.
Also renames the prefix for special monad coequalizers to `free_coequalizer` rather than `coequalizer`, to avoid name-clashes when both `monad` and `limits` are imported.

2020-12-15 10:30:11 407d138
chore(category_theory/equivalence): weaken essential surjectivity (#3821)
Weaken essential surjectivity to be a Prop, rather than the data of the inverse.

2020-12-15 07:29:57 a1aa511
feat(simps): interaction between simps and to_additive (#5331)
If a definition is both marked `to_additive` and `simps` (in that order), `simps` will from also apply the `to_additive` attribute to its generated lemmas (which creates the additive counterparts of the simp-lemmas).
This also generalizes `set_attribute` to use the default parameter if possible.
This implements half of #1639.

2020-12-15 03:52:57 a959718
chore(algebra/quadratic_discriminant): golf proofs using limits (#5339)

2020-12-15 01:31:40 ff13cde
chore(scripts): update nolints.txt (#5376)
I am happy to remove some nolints for you!

2020-12-15 01:31:38 cadaa44
feat(group_theory/subgroup): Add decidable_mem_range (#5371)
This means that `fintype (quotient_group.quotient f.range)` can be found by type-class resolution.

2020-12-15 01:31:36 b2ab94f
fix(group_theory): Remove a duplicate fintype instance on quotient_group.quotient (#5368)
This noncomputable instance was annoying, and can easy be recovered by passing in a classical decidable_pred instance instead.

2020-12-15 01:31:34 b364d33
chore(topology/instances/ennreal): remove summability assumption in tendsto_sum_nat_add (#5366)
We have currently
```lean
lemma tendsto_sum_nat_add (f : ℕ → ℝ≥0) (hf : summable f) : tendsto (λ i, ∑' k, f (k + i)) at_top (𝓝 0)
```
However, the summability assumption is not necessary as otherwise all sums are zero, and the statement still holds. The PR removes the assumption.

2020-12-15 01:31:32 4dbb3e2
chore(data/finsupp/basic): more lemmas about `α →₀ ℕ` (#5362)
* define `canonically_ordered_add_monoid` instance;
* add a few simp lemmas;
* more lemmas about product over `finsupp.antidiagonal n`;
* define `finsupp.Iic_finset`, use it for `finite_le_nat`.

2020-12-15 01:31:30 8de08f7
chore(order/iterate): generalize lemmas about inequalities and iterations (#5357)
If `f : α → α` is a monotone function and `x y : ℕ → α` are two
sequences such that `x 0 ≤ y 0`, `x (n + 1) ≤ f (x n)`, and
`f (y n) ≤ y (n + 1)`, then `x n ≤ y n`. This lemma (and its versions
for `<`) generalize `geom_le` as well as `iterate_le_of_map_le`.

2020-12-14 23:07:26 d1904fc
refactor(measure_theory/lp_space): move most of the proof of mem_Lp.add to a new lemma in analysis/mean_inequalities (#5370)

2020-12-14 23:07:24 dc719a9
feat(algebra/lie/basic): define ideal operations for Lie modules (#5337)

2020-12-14 21:52:23 a649c59
feat(field_theory/intermediate_field): lift2_alg_equiv (#5344)
Proves that lift2 is isomorphic as an algebra over the base field

2020-12-14 19:54:21 4415dc0
feat(algebra/algebra/basic): arrow_congr for alg_equiv (#5346)
This is a copy of equiv.arrow_congr

2020-12-14 16:39:30 07b5618
chore(linear_algebra/{multilinear,alternating}): Generalize smul and neg instance (#5364)
This brings the generality in line with that of `linear_map`. Notably:
* `has_neg` now exists when only the codomain has negation
* `has_scalar` now exists for the weaker condition of `smul_comm_class` rather than `has_scalar_tower`

2020-12-14 16:39:28 b1c56b1
feat(field_theory.minimal_polynomial): add results for GCD domains (#5336)
I have added `gcd_domain_dvd`: for GCD domains, the minimal polynomial divides any primitive polynomial that has the integral
element as root.
For `gcd_domain_eq_field_fractions` and `gcd_domain_dvd` I have also added explicit versions for `ℤ`. Unfortunately, it seems impossible (to me at least) to apply the general lemmas and I had to redo the proofs, see [Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Minimal.20polynomial.20over.20.E2.84.9A.20vs.20over.20.E2.84.A4) for more details. (The basic reason seems to be that it's hard to convince lean that `is_scalar_tower ℤ ℚ α` holds using the localization map).

2020-12-14 16:39:26 f443792
feat(topology/subset_properties): add instances for totally_disconnected_spaces (#5334)
Add the instances subtype.totally_disconnected_space and pi.totally_disconnected_space.

2020-12-14 16:39:24 d36af18
feat(tactic/induction): add induction'/cases'/eliminate_hyp/eliminate_expr tactics (#5027)
This PR adds interactive tactics `induction'` and `cases'` as well as
non-interactive variants `eliminate_hyp` and `eliminate_expr`. The tactics are
similar to standard `induction` and `cases`, but they feature several
improvements:
- `induction'` performs 'dependent induction', which means it takes the indices
  of indexed inductive types fully into account. This is convenient, for example,
  for programming language or logic formalisations, which tend to rely heavily on
  indexed types.
- `induction'` by default generalises everything that can be generalised. This
  is to support beginners, who often struggle to identify that a proof requires
  a generalised induction hypothesis. In cases where this feature hinders more
  than it helps, it can easily be turned off.
- `induction'` and `cases'` generate much more human-friendly names than their
  standard counterparts. This is, again, mostly to support beginners. Experts
  should usually supply explicit names to make proof scripts more robust.
- `cases'` works for some rare goals which `cases` does not support, but should
  otherwise be mostly a drop-in replacement (except for the generated names).

2020-12-14 13:16:21 a65de99
feat(data/equiv): Add `congr_arg`, `congr_fun`, and `ext_iff` lemmas to equivs (#5367)
These members already exist on the corresponding homs

2020-12-14 13:16:18 dad88d8
feat(field_theory/splitting_field): add splits_X theorem (#5343)
This is a handy result and isn't definitionally a special case of splits_X_sub_C

2020-12-14 13:16:15 cf7377a
chore(field_theory/adjoin): move dim/findim lemmas (#5342)
adjoin.lean has some dim/findim lemmas, some of which could be moved to intermediate_field.lean

2020-12-14 13:16:14 0d7ddf1
chore(order/filter/at_top_bot): add/rename lemmas about limits like `±∞*c` (#5333)
### New lemmas
* `filter.tendsto.nsmul_at_top` and `filter.tendsto.nsmul_at_bot`;
* `filter.tendsto_mul_self_at_top`;
* `filter.tendsto.at_top_mul_at_bot`, `filter.tendsto.at_bot_mul_at_top`,
  `filter.tendsto.at_bot_mul_at_bot`;
* `filter.tendsto.at_top_of_const_mul`, `filter.tendsto.at_top_of_mul_const`;
* `filter.tendsto.at_top_div_const`, `filter.tendsto.neg_const_mul_at_top`,
  `filter.tendsto.at_top_mul_neg_const`, `filter.tendsto.const_mul_at_bot`,
  `filter.tendsto.at_bot_mul_const`, `filer.tendsto.at_bot_div_const`,
  `filter.tendsto.neg_const_mul_at_bot`, `filter.tendsto.at_bot_mul_neg_const`.
### Renamed lemmas
* `tendsto_pow_at_top` → `filter.tendsto_pow_at_top`;
* `tendsto_at_top_mul_left` → `filter.tendsto.const_mul_at_top'`;
* `tendsto_at_top_mul_right` → `filter.tendsto.at_top_mul_const'`;
* `tendsto_at_top_mul_left'` → `filter.tendsto.const_mul_at_top`;
* `tendsto_at_top_mul_right'` → `filer.tendsto.at_top_mul_const`;
* `tendsto_mul_at_top` → `filter.tendsto.at_top_mul`;
* `tendsto_mul_at_bot` → `filter.tendsto.at_top_mul_neg`;
* `tendsto_at_top_mul_at_top` → `filter.tendsto.at_top_mul_at_top`.

2020-12-14 13:16:12 1d37ff1
feat(analysis/mean_inequalities): add weighted generalized mean inequality for ennreal (#5316)

2020-12-14 13:16:10 cecab59
feat(group_theory/congruence): Add inv and neg (#5304)

2020-12-14 13:16:08 6dc5000
feat(computability/language): define formal languages (#5291)
Lifted from #5036 in order to include in #5038 as well.

2020-12-14 13:16:05 67b5ff6
feat(algebra/direct_sum): constructor for morphisms into direct sums (#5204)

2020-12-14 11:45:59 c722b96
feat (topology/instances/ennreal): summability from finite sum control (#5363)

2020-12-14 10:02:51 91e5b8a
chore(analysis/normed_space/ordered): minor golfing (#5356)

2020-12-14 10:02:48 2245cfb
feat(measurable_space): infix notation for measurable_equiv (#5329)
We use `≃ᵐ` as notation. Note: `≃ₘ` is already used for diffeomorphisms.

2020-12-14 08:35:30 6f69741
chore(analysis/calculus/*): rename `*.of_local_homeomorph` to `local_homeomorph.*_symm` (#5358)
Rename some lemmas, and make `(f : local_homeomorph _ _)` an explicit argument:
* `has_fderiv_at.of_local_homeomorph` → `local_homeomorph.has_fderiv_at_symm`;
* `times_cont_diff_at.of_local_homeomorph` → `local_homeomorph.times_cont_diff_at_symm`.
If we want to apply one of these lemmas to prove smoothness of, e.g., `arctan`, `log`, or `arcsin`, then the goal
has no `local_homeomorph.symm`, and we need to explicitly supply a `local_homeomorph` with an appropriate `inv_fun`.
Also add some lemmas that help to prove that the inverse function is **not** differentiable at a point.

2020-12-14 02:41:32 714bc15
feat(category_theory/adjunction): adjoint lifting theorems (#5118)
Proves the [adjoint lifting theorem](https://ncatlab.org/nlab/show/adjoint+lifting+theorem) and the [adjoint triangle theorem](https://ncatlab.org/nlab/show/adjoint+triangle+theorem).
The intent here is for all but the last four statements in the file to be implementation.

2020-12-14 01:26:51 b7a9615
chore(scripts): update nolints.txt (#5360)
I am happy to remove some nolints for you!

2020-12-13 09:58:12 88fb7ca
chore(analysis/calculus): move the definition of `formal_multilinear_series` to a new file (#5348)

2020-12-13 01:29:56 36eec1a
chore(scripts): update nolints.txt (#5341)
I am happy to remove some nolints for you!

2020-12-12 23:59:14 eb9164b
feat(category_theory/sites): naming and attributes (#5340)
Adds simps projections for sieve arrows and makes the names consistent (some used `mem_` and others used `_apply`, now they only use the latter).

2020-12-12 22:41:29 68818b3
feat(field_theory/galois): Is_galois iff is_galois top (#5285)
Proves that E/F is Galois iff top/F is Galois.

2020-12-12 17:17:36 5ced4dd
feat(ring_theory/finiteness): add iff_quotient_mv_polynomial (#5321)
Add characterizations of finite type algebra as quotient of polynomials rings. There are three version of the same lemma, using a `finset`, a `fintype` and `fin n`.

2020-12-12 09:03:27 3afdf41
chore(*): generalize some lemmas from `linear_ordered_semiring` to `ordered_semiring` (#5327)
API changes:
* Many lemmas now have weaker typeclass assumptions. Sometimes this means that `@myname _ _ _` needs one more `_`.
* Drop `eq_one_of_mul_self_left_cancel` etc in favor of the new `mul_eq_left_iff` etc.
* A few new lemmas that state `monotone` or `strict_mono_incr_on`.

2020-12-12 07:17:02 dad5aab
refactor(ring_theory/polynomial/homogeneous): redefine `mv_polynomial.homogeneous_component` (#5294)
* redefine `homogeneous_component` using `finsupp.restrict_dom`,
  “upgrade” it to a `linear_map`;
* add `coeff_homogeneous_component` and use it to golf some proofs.

2020-12-12 07:17:00 9cc8835
feat(group_theory/perm/subgroup): Add some simple subgroups of permutations (#5279)

2020-12-12 07:16:58 84f9938
feat(category_theory/sites): sheaves on types (#5259)

2020-12-12 07:16:56 0344aee
feat(ring_theory/*): various lemmas about quotients, localizations, and polynomials (#5249)

2020-12-12 07:16:53 d032380
feat(field_theory/normal): normal_of_alg_equiv (#5225)
Proves that normal is preserved by an alg_equiv

2020-12-12 04:38:13 f51fe7b
chore(data/fin): Improve docstrings, rename `coe_sub_nat`, add `nat_add_zero` (#5290)
These are cherry-picked from the tuple PR, #4406.
`coe_sub_nat` was previously named `sub_nat_coe`, but this didn't match `coe_nat_add` and `coe_add_nat`.

2020-12-12 01:48:20 2609428
chore(scripts): update nolints.txt (#5328)
I am happy to remove some nolints for you!

2020-12-12 01:48:18 b02c529
feat(category_theory/limits): strengthen simp lemma (#5326)
Makes a simp lemma slightly stronger

2020-12-12 01:48:17 e7ca801
feat(data/list/chain): induction up the chain (#5325)
Slightly strengthen statements that were there before

2020-12-12 01:48:13 f0c8a15
chore(algebra/ordered_ring): golf some proofs using `strict_mono_incr_on` (#5323)

2020-12-12 01:48:10 01746f8
feat(outer_measure): define bounded_by (#5314)
`bounded_by` wrapper around `of_function` that drops the condition that `m ∅ = 0`. 
Refactor `Inf_gen` to use `bounded_by`.
I am also planning to use `bounded_by` for finitary products of measures.
Also add some complete lattice lemmas

2020-12-12 01:48:08 3782acf
feat(topology/algebra/*): Criterion to ensure topological monoids and groups (#5284)
This is old stuff from the perfectoid project that was never PRed and is useful for the liquid tensor experiment.

2020-12-11 22:54:52 846ee3f
feat(data/equiv): symm_symm_apply (#5324)
A little dsimp lemma that's often helpful

2020-12-11 20:26:08 63e1ad4
chore(group_theory/perm/basic): Add missing lemmas (#5320)
These lemmas existed for left multiplication but not right multiplication

2020-12-11 20:26:06 90aa66b
chore(algebra/big_operators/basic): Rename hypotheses for clarity (#5318)
This makes them somewhat more consistent with `prod_bij`

2020-12-11 16:44:08 3a88a9e
chore(data/subtype): Add coind_bijective and map_involutive (#5319)

2020-12-11 16:44:06 029b258
chore(linear_algebra/tensor_product): Actually relax the requirements for add_comm_group (#5315)
A previous commit (#5305) changed the definition to not need these, but forgot to actually change these.

2020-12-11 16:44:04 db712d5
chore(*): simp lemmas for `tendsto`, `Ixx`, and `coe` (#5296)
* For `(f : α → β) (l : filter β)`, simplify `tendsto (λ a : Ixx*, f x) at_top l`
  to `tendsto f _ l`, and similarly for `at_bot`.
* For `(f : α → Ixx*) (l : filter α)`, simplify
  `tendsto f l at_top` to `tendsto (λ x, (f x : β)) l _`, and
  similarly for `at_bot`.
Here `Ixx*` is one of the intervals `Ici a`, `Ioi a`, `Ioo a b` etc,
and `_` is a filter that depends on the choice of `Ixx` and
`at_top`/`at_bot`.
* Drop some “nontriviality” assumptions like `no_top_order` for lemmas
about `Ioi a`.

2020-12-11 13:45:51 a372dfc
chore(*): don't assume `sub_eq_add_neg` and `div_eq_mul_inv` are defeq (#5302)
This PR prepares for a follow-up PR (#5303) that adds `div` and `sub` fields to (`add_`)`group`(`_with_zero`). That follow-up PR is intended to fix the following kind of diamonds:
Let `foo X` be a type with a `∀ X, has_div (foo X)` instance but no `∀ X, has_inv (foo X)`, e.g. when `foo X` is a `euclidean_domain`. Suppose we also have an instance `∀ X [cromulent X], group_with_zero (foo X)`. Then the `(/)` coming from `group_with_zero_has_div` cannot be defeq to the `(/)` coming from `foo.has_div`.
As a consequence of making the `has_div` instances defeq, we can no longer assume that `(div_eq_mul_inv a b : a / b = a * b⁻¹) = rfl` for all groups. This preparation PR should have changed all places in mathlib that assumed defeqness, to rewrite explicitly instead.
Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60div.60.20as.20a.20field.20in.20.60group(_with_zero).60

2020-12-11 12:35:50 d2ae4e2
feat(ring_theory/witt_vector): truncated Witt vectors, definition and ring structure (#5162)
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-12-11 10:57:57 6288eed
feat(linear_algebra/alternating): Add alternatization of multilinear_map (#5187)
This adds:
* `def multilinear_map.alternatize`
* `lemma alternating_map.to_multilinear_map_alternize`

2020-12-11 01:46:47 dbdba55
chore(scripts): update nolints.txt (#5313)
I am happy to remove some nolints for you!

2020-12-11 01:46:45 8817c3e
chore(linear_algebra/tensor_product): Relax the ring requirement to semiring for the group instance (#5305)

2020-12-11 01:46:44 9e550f2
feat(topology/separation): finite t1 spaces are discrete (#5298)
These lemmas should simplify the arguments of #4301
Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/discrete_topology/near/218932564 
<!--
put comments you want to keep out of the PR commit here.
If this PR depends on other PRs, please list them below this comment,
using the following format:
- [ ] depends on: #abc [optional extra text]
- [ ] depends on: #xyz [optional extra text]
-->

2020-12-11 01:46:41 2c0b43d
feat(combinatorics/simple_graph/degree_sum): degree-sum formula and handshake lemma (#5263)
Adds the theorem that the sum of the degrees of the vertices of a simple graph is twice the number of edges.  Also adds corollaries like the handshake lemma, which is that the number of odd-degree vertices is even.
The corollary `exists_ne_odd_degree_if_exists_odd` is in anticipation of Sperner's lemma.

2020-12-10 23:19:05 918d5a9
chore(data/finsupp/basic): redefine `finsupp.filter` (#5310)
Also use lemmas about `indicator_function` and `function.update` to
golf some proofs about `finsupp.single`.

2020-12-10 23:19:03 c295873
feat(algebra/module/basic): {nat,int}_smul_apply (#5308)

2020-12-10 21:44:19 c9793b5
chore(data/mv_polynomial): delete stray comments (#5312)

2020-12-10 21:44:16 f72734a
chore(data/complex/exponential): add `inv_one_add_tan_sq` etc (#5299)
* mark `cos_sq_add_sin_sq` and `sin_sq_add_cos_sq` as `@[simp]`;
* add lemmas representing `sin x` and `cos x` as functions of `tan x`.

2020-12-10 21:44:14 32b2e30
feat(category_theory/monad): special coequalizers for a monad (#5239)
Two important coequalizer diagrams related to a monad

2020-12-10 18:39:41 4e8486b
feat(algebra/group/hom): add_monoid_hom.sub_apply (#5307)

2020-12-10 18:39:39 be6c37c
feat(algebra/big_operators/finsupp): rename variables, and move to top of file (#5306)

2020-12-10 17:02:36 f3c9d20
chore(linear_algebra/determinant): Golf a proof (#5309)

2020-12-10 17:02:33 cdb1398
feat(category_theory/limits): any functor preserves split coequalizers (#5246)
Once #5230 merges, the only diff in this PR should be in `src/category_theory/limits/preserves/shapes/equalizers.lean`

2020-12-10 13:59:01 12d097e
feat(category_theory/sites/sieves): change presieve operation defs (#5295)
change the definitions of operations on presieves to avoid `eq_to_hom` and use inductive types instead, which makes proofs a lot nicer

2020-12-10 13:58:58 3f42fb4
feat(group_theory/perm/sign): Add sign_sum_congr (#5266)

2020-12-10 13:58:56 90755c3
refactor(order/filter/ultrafilter): drop `filter.is_ultrafilter` (#5264)
Use bundled `ultrafilter`s instead.

2020-12-10 13:58:54 2bf0c2e
feat(group_theory/group_action/sub_mul_action): add a has_zero instance (#5216)

2020-12-10 10:51:03 702b1e8
refactor(data/finsupp/basic): merge `finsupp.of_multiset` and `multiset.to_finsupp` (#5237)
* redefine `finsupp.to_multiset` as an `add_equiv`;
* drop `finsupp.equiv_multiset` and `finsupp.of_multiset`;
* define `multiset.to_finsupp` as `finsupp.to_multiset.symm`.

2020-12-10 08:44:55 ac669c7
chore(category_theory/limits/preserves): cleanup (#4163)
(edited to update).
This PR entirely re-does the construction of limits from products and equalizers in a shorter way. With the new preserves limits machinery this new construction also shows that a functor which preserves products and equalizers preserves all limits, which previously was *really* annoying to do

2020-12-10 07:39:19 e68d2d7
feat(category_theory/sites): category of sheaves (#5255)
Category of sheaves on a grothendieck topology
(cc: @kckennylau)

2020-12-10 01:25:50 ba568a6
chore(scripts): update nolints.txt (#5297)
I am happy to remove some nolints for you!

2020-12-09 19:09:52 84c0132
chore(data/indicator_function): a few more `simp` lemmas (#5293)
* drop `indicator_of_support_subset` in favor of the new `indicator_eq_self`;
* add a few more lemmas: `indicator_apply_eq_self`,
 `indicator_apply_eq_zero`, `indicator_eq_zero`, `indicator_eq_zero'`

2020-12-09 17:36:09 bf25d26
chore(data/set/intervals/proj_Icc): add `strict_mono_incr_on` (#5292)
* rename `set.Icc_extend_monotone` to `monotone.Icc_extend`;
* add `set.strict_mono_incr_on_proj_Icc` and `strict_mono.strict_mono_incr_on_Icc_extend`.

2020-12-09 17:36:06 efe18d5
feat(measure_theory/interval_integral): continuous implies interval_integrable (#5288)

2020-12-09 17:36:04 e357a33
chore(linear_algebra/multilinear): Add `linear_map.comp_multilinear_map_dom_dom_congr` (#5270)

2020-12-09 17:36:02 698d6b7
ci(.github/workflows/dependent-issues.yml): automation for "blocked-by-other-PR" label (#5261)
When a PR or issue is updated, the [dependent-issues](https://github.com/z0al/dependent-issues) action will do the following on all PRs which are marked as dependent on it (with the text `- [ ] depends on: #blah` that we're already using):
- add / remove the "blocked-by-other-PR" label
- post / edit a comment with the current status of its dependencies (this is slightly redundant, given that we have another action which checks off the dependent PRs in the PR comments, but the extra notifications might be useful).
- it also adds a new status check which is pending (yellow) until all dependencies are closed.

2020-12-09 16:13:00 a87f62b
feat(category_theory/limits/preserves): preserving binary products (#5061)
This moves and re-does my old file about preserving binary products to match the new API and framework for preservation of special shapes, and also cleans up some existing API. 
(I can split this up if necessary but they're all pretty minor changes, so hope this is okay!)

2020-12-09 09:24:04 d12a731
chore(data/mv_polynomial): mark `mv_polynomial.ext` as `@[ext]` (#5289)

2020-12-09 04:36:44 1f309c5
feat(analysis/special_functions): `real.log` is infinitely smooth away from zero (#5116)
Also redefine it using `order_iso.to_homeomorph` and prove more lemmas about limits of `exp`/`log`.

2020-12-09 01:42:58 2032f7b
chore(scripts): update nolints.txt (#5287)
I am happy to remove some nolints for you!

2020-12-09 01:42:56 7ae1165
chore(data/pi): Express `single` in terms of `function.update` (#5283)
These were originally introduced in #3513.
Perhaps `function.update` wasn't as well developed back then.

2020-12-08 22:41:41 1e3447b
chore(data/equiv/mul_add): Split out the group structure on automorphisms (#5281)
This prevents `group_theory.perm.basic` being imported into lots of files that don't care about permutations.
The argument here is that `add_aut` is to `add_equiv` as `perm` is to `equiv`: `perm` gets its group structure in a separate file to where `equiv` is defined, so `add_aut`, `mul_aut`, and `ring_aut` should too.
This adds back imports of `group_theory.perm.basic` to downstream files that inherited them through `data.equiv.mul_add`.

2020-12-08 18:18:54 4c9499f
chore(algebra/group/pi): Split into multiple files (#5280)
This allows files that appear before `ordered_group` to still use `pi.monoid` etc.

2020-12-08 16:34:05 b5ab2f7
feat(topology/algebra/ordered): add lemmas about `map coe at_top/at_bot` (#5238)

2020-12-08 15:28:08 7f5a5dd
feat(category_theory/limits): split coequalizers (#5230)
Define what it means for a triple of morphisms `f g : X ⟶ Y`, `π : Y ⟶ Z` to be a split coequalizer, and show that every split coequalizer is a coequalizer and absolute.
Define split pairs and `G`-split pairs.
These definitions and constructions are useful in particular for the monadicity theorems.

2020-12-08 13:47:48 64ddb12
feat(analysis/mean_inequalities): add Hölder's inequality for the Lebesgue integral of ennreal and nnreal functions (#5267)

2020-12-08 10:43:05 3996bd4
chore(logic/basic): add a few `simp` lemmas (#5278)
Also add `fintype.prod_eq_single`.

2020-12-08 10:43:02 d3bbaeb
chore(combinatorics/composition): use `order_embedding` (#5276)
* use `order_embedding` for `composition.boundary`
* use `order_embedding` for `composition.embedding`
* add `max_eq_right_iff` etc
* golf some proofs

2020-12-08 10:43:00 51f5ca3
chore(group_theory/perm): Add alternate formulation of (sum|sigma)_congr lemmas (#5260)
These lemmas existed already for `equiv`, but not for `perm` or for `perm` via group structures.

2020-12-08 07:36:20 ac6fc38
chore(*): move/add lemmas about `disjoint` (#5277)
* `set.disjoint_compl_left` and `set.disjoint_compl_right`:
  - generalize to any `boolean_algebra`,
  - move to `order/boolean_algebra`,
  - drop `set.` prefix,
  - make the argument implicit to follow the style of other lemmas in `order/boolean_algebra`
* add `set.disjoint_empty` and `set.empty_disjoint`
* add `disjoint_top` and `top_disjoint`, use in `set.disjoint_univ`and `set.univ_disjoint`.

2020-12-08 07:36:17 ef377a9
chore(data/list/sort): docs, add a few lemmas (#5274)
 * Add a module docstring and section headers.
* Rename `list.eq_of_sorted_of_perm` to `list.eq_of_perm_of_sorted`;
  the new name reflects the order of arguments.
* Add a few lemmas.

2020-12-08 07:36:15 aec64b1
feat(category_theory/monad): generalise algebra colimits (#5234)
Assumption generalisations and universe generalisations

2020-12-08 07:36:13 7360178
feat(category_theory/closed/types): presheaf category is cartesian closed (#4897)

2020-12-08 05:05:55 8f42d73
chore(data/list/pairwise): add `list.pairwise_pmap` and `list.pairwise.pmap` (#5273)
Also add `list.pairwise.tail` and use it in the proof of `list.sorted.tail`.

2020-12-08 03:20:13 3f4829c
chore(data/support): zero function has empty support (#5275)

2020-12-08 01:21:19 35f0862
chore(scripts): update nolints.txt (#5272)
I am happy to remove some nolints for you!

2020-12-07 20:04:10 b173925
refactor(data/fin): use `order_embedding` for many maps (#5251)
Also swap `data.fin` with `order.rel_iso` in the import tree.

2020-12-07 20:04:08 b9689bd
feat(topology/algebra/infinite_sum): add lemmas about continuous linear maps (#5243)

2020-12-07 17:05:50 f730137
chore(logic/basic): add `and.congr_left_iff` and `@[simp]` attrs (#5268)

2020-12-07 10:37:13 44400c9
feat(dynamics/circle/rotation_number): translation numbers define a group action up to a semiconjugacy (#5138)
Formalize a theorem by Étienne Ghys: given two lifts `f₁`, `f₂` of
actions of a group `G` on the circle by orientation preserving
homeomorphisms to the real line, assume that for each `g : G` the
translation numbers of `f₁ g` and `f₂ g` are equal. Then the actions
are semiconjugate by a (possibly discontinuous) circle map.

2020-12-07 08:45:14 f0ceb6b
feat(analysis/mean_inequalities): add young_inequality for nnreal and ennreal with real exponents (#5242)
The existing young_inequality for nnreal has nnreal exponents. This adds a version with real exponents with the is_conjugate_exponent property, and a similar version for ennreal with real exponents.

2020-12-07 06:49:09 914d2b1
chore(topology/category/Profinite): Fix docstring (#5265)

2020-12-07 03:33:52 b2427d5
feat(order/filter/ultrafilter): Restriction of ultrafilters along large embeddings (#5195)
This PR adds the fact that the `comap` of an ultrafilter along a "large" embedding (meaning the image is large w.r.t. the ultrafilter) is again an ultrafilter.

2020-12-07 01:24:27 67eb675
chore(scripts): update nolints.txt (#5262)
I am happy to remove some nolints for you!

2020-12-06 20:08:34 8d54d52
chore(topology/algebra/ordered): generalize `intermediate_value_Icc` etc (#5235)
Several lemmas assumed that the codomain is a conditionally complete
linear order while actually the statements are true for a linear
order. Also introduce `mem_range_of_exists_le_of_exists_ge` and use it
in `surjective_of_continuous`.

2020-12-06 20:08:32 9cb27c9
chore(ring_theory/algebra_tower): generalize `is_scalar_tower.right` (#5224)
The old instance for `[is_scalar_tower R S S]` assumed
[comm_semiring S]` instead of `[semiring S]`.

2020-12-06 20:08:30 128b316
feat(number_theory/primes_congruent_one): infinitely many primes congruent to 1 (#5217)
I prove that, for any positive `k : ℕ`, there are infinitely many primes `p` such that `p ≡ 1 [MOD k]`.
 I am not sure that `p ≡ 1 [MOD k]` is the recommended way of stating this in mathlib (instead of using `nat.cast_ring_hom `), I can change it if needed. Also, I don't know if it is appropriate to create a new file, but I didn't see any reasonable location.

2020-12-06 18:56:25 b3aa052
feat(combinatorics/simple_graph/basic): introduce incidence sets, graph construction from relation (#5191)
Add incidence sets and some lemmas, including a proof of equivalence between the neighbor set of a vertex and its incidence set. Add a graph construction from a given relation.
Definitions and lemmas adapted from [simple_graphs2](https://github.com/leanprover-community/mathlib/blob/simple_graphs2/src/combinatorics/simple_graph/basic.lean#L317)

2020-12-06 11:43:56 c88e8f3
refactor(*): drop `topology/instances/complex` (#5208)
* drop `topology/instances/complex`, deduce topology from `normed_space` instead;
* generalize continuity of `polynomial.eval` to any `topological_ring`; add versions for `eval₂` and `aeval`;
* replace `polynomial.tendsto_infinity` with `tendsto_abv_at_top`, add versions for `eval₂`, `aeval`, as well as `norm` instead of `abv`.
* generalize `complex.exists_forall_abs_polynomial_eval_le` to any `[normed_ring R] [proper_space R]` such that norm
  is multiplicative, rename to `polynomial.exists_forall_norm_le`.

2020-12-06 10:31:29 29a1731
feat(ring_theory/witt_vector): common identities between operators on Witt vectors (#5161)
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-12-06 07:55:26 339bd9a
chore(*): clean up several unnecessary let statements (#5257)
Cleans up a few `let`s and `letI`s and a `have` and a `set` that have made it into some proofs in the library but do not seem to do anything for the proof.

2020-12-06 07:55:24 12a8361
feat(data/polynomial): simp lemmas about polynomial derivatives (#5256)
Add simp lemmas derivative_bit0 derivative_bit1 and derivative_X_pow

2020-12-06 07:55:21 c6de6e4
chore(algebra/group_power): mark `map_pow` etc as `@[simp]` (#5253)

2020-12-06 04:52:54 8538071
doc(data/list): fix `erasep` doc string (#5254)
closes #5252

2020-12-06 01:24:31 065bd5f
chore(scripts): update nolints.txt (#5250)
I am happy to remove some nolints for you!

2020-12-05 20:21:10 7e8e174
style(combinatorics/simple_graph/basic): edit proof of lemma to match style guidelines (#5245)
Rewrite proof of `adj_iff_exists_edge` to match style guidelines.

2020-12-05 20:21:06 ae99c76
feat(field_theory/galois): Is_galois iff is_galois bot (#5231)
Proves that E/F is Galois iff E/bot is Galois.
This is useful in Galois theory because it gives a new way of showing that E/F is Galois:
1) Show that bot is the fixed field of some subgroup
2) Apply `is_galois.of_fixed_field`
3) Apply `is_galois_iff_is_galois_bot`
More to be added later (once #5225 is merged): Galois is preserved by alg_equiv, is_galois_iff_galois_top

2020-12-05 20:21:04 ddfba42
chore(data/multiset/basic): make `card` a bundled `add_monoid_hom` (#5228)
Other changes:
* use `/-! ###` in section headers;
* move `add_monoid` section above `card`;
* fix docstrings of `multiset.choose_x` and `multiset.choose`.

2020-12-05 20:21:02 1f64814
chore(data/equiv/ring): add `symm_symm` and `coe_symm_mk` (#5227)
Also generalize `map_mul` and `map_add` to `[has_mul R] [has_add R]`
instead of `[semiring R]`.

2020-12-05 18:53:49 d4bd4cd
fix(topology/algebra/infinite_sum): fix docstring typos and add example (#5159)

2020-12-05 16:59:01 83b13d1
feat(category_theory/limits): morphisms to equalizer (#5233)
The natural bijection for morphisms to an equalizer and the dual.

2020-12-05 16:58:59 dd11498
chore(linear_algebra/basic): redefine `restrict` (#5229)
Use `dom_restrict` and `cod_restrict`

2020-12-05 13:48:51 481f5e0
chore(data/prod): `prod.swap` is `bijective` (#5226)

2020-12-05 09:58:53 c5009dd
chore(data/equiv/basic): Add missing refl/trans/symm simp lemmas (#5223)

2020-12-05 07:50:28 3972da8
chore(category_theory/limits/preserves): make names consistent (#5240)
adjusted names and namespaces to match #5044

2020-12-05 07:50:26 39a3b58
feat(order/filter/at_top_bot): `order_iso` maps `at_top` to `at_top` (#5236)

2020-12-05 07:50:24 147a81a
chore(category_theory/limits): preserving coequalizers (#5212)
dualise stuff from before

2020-12-05 07:50:22 b82eb7a
refactor(combinatorics/simple_graph/matching): change definition of matching (#5210)
Refactored definition of matching per @eric-wieser's [suggestion](https://github.com/leanprover-community/mathlib/pull/5156#discussion_r535102524) and @kmill's [suggestion](https://github.com/leanprover-community/mathlib/pull/5156#discussion_r535745112), for the purpose of using `matching.sub_edges` instead of `matching.prop.sub_edges`

2020-12-05 07:50:19 dc08f4d
feat(analysis): define asymptotic equivalence of two functions (#4979)
This defines the relation `is_equivalent u v l`, which means that `u-v` is little o of
`v` along the filter `l`. It is required to state, for example, Stirling's formula, or the prime number theorem

2020-12-05 04:54:08 de7dbbb
feat(algebra/group): composition of monoid homs as "bilinear" monoid hom (#5202)

2020-12-05 01:27:37 56c4e73
chore(scripts): update nolints.txt (#5232)
I am happy to remove some nolints for you!

2020-12-04 21:26:40 0afd3a0
chore(data/finsupp/basic): Add single_of_single_apply (#5219)

2020-12-04 21:26:38 8a9a5d3
feat(dynamics): (semi-)flows, omega limits (#4843)
This code has gone through a couple of iterations since it was first written in summer, when the ambition was 'Morse decompositions in Lean' rather than 'mildly generalise some results from a first course in differential equations'. Nevertheless there's much in here I'm not confident about & would appreciate help with.

2020-12-04 15:57:38 5f43079
doc(data/quot): Fix typo (#5221)

2020-12-04 15:57:35 4ea2e68
chore(algebra/big_operators/basic): Split prod_cancels_of_partition_cancels in two and add a docstring (#5218)

2020-12-04 15:57:31 5ea96f9
feat(linear_algebra/multilinear): Add `multilinear_map.coprod` (#5182)

2020-12-04 15:57:29 cb7effa
feat(ring_theory/discrete_valuation_ring): add additive valuation (#5094)
Following the approach used for p-adic numbers, we define an additive valuation on a DVR R as a bare function v: R -> nat, with the convention that v(0)=0 instead of +infinity for convenience. Note that we have no `hom` structure (like `monoid_hom` or `add_monoid_hom`) for v(a*b)=v(a)+v(b) and anyway this doesn't even hold if ab=0. We prove all the usual axioms.

2020-12-04 14:48:23 f1d30f6
doc(data/typevec): Fix broken markdown rendering (#5220)

2020-12-04 13:34:38 54c13bd
docs(data/fp): Move title comment so that it appears in the markdown (#5222)

2020-12-04 10:35:26 30467f4
feat(field_theory/adjoin): induction on adjoin (#5173)
This is another adjoin induction lemma that will be used in an upcoming PR.

2020-12-04 07:43:02 7e307bc
chore(algebra/ring): delete a duplicate instance (#5215)
In #3303 and #3296 which were merged 1 day apart two versions of the instance comm_monoid_with_zero from a comm_semiring were added 5 lines apart in the file, delete one.

2020-12-04 07:43:00 2d00ba4
feat(category_theory/limits): cleanup equalizers (#5214)
golf and make simp more powerful

2020-12-04 07:42:59 b2f8c4c
feat(category_theory/limits): reflects limit if reflects iso and preserves (#5213)

2020-12-04 07:42:57 cfd01f9
chore(topology/continuous_on): change type of `continuous_on.comp_continuous` (#5209)
Use `∀ x, f x ∈ s` instead of `range f ⊆ s`.

2020-12-04 07:42:55 ad25cac
refactor(data/polynomial/derivative): change `polynomial.derivative` to be a `linear_map` (#5198)
Refactors polynomial.derivative to be a linear_map by default

2020-12-04 07:42:52 240f6eb
feat(category_theory/monad): cleanups in monad algebra (#5193)
- Converts the simp normal form for composition of algebra homs to use category notation. 
- Adds simps where appropriate
- Golfs proofs, remove some erw and nonterminal simps
- Remove some redundant brackets

2020-12-04 07:42:50 c10d1b1
feat(ring_theory/polynomial/cyclotomic):  add  order_of_root_cyclotomic (#5151)
Two lemmas about roots of cyclotomic polynomials modulo `p`.
`order_of_root_cyclotomic` is the main algebraic tool to prove the existence of infinitely many primes congruent to `1` modulo `n`.

2020-12-04 07:42:48 c939c9e
feat(category_theory/limits/preserves): preserving terminal objects (#5060)
Another part of #4716.

2020-12-04 06:35:18 4f5046d
feat(ring_theory/polynomial/cyclotomic): Möbius inversion formula for cyclotomic polynomials (#5192)
Proves Möbius inversion for functions to a `comm_group_with_zero`
Proves the Möbius inversion formula for cyclotomic polynomials

2020-12-04 01:20:37 57dd302
chore(scripts): update nolints.txt (#5211)
I am happy to remove some nolints for you!

2020-12-03 22:25:01 20cc59d
feat(algebra/lie/basic): define missing inclusion maps (#5207)

2020-12-03 22:24:59 ec839ef
feat(topology/algebra/order): continuity of monotone functions (#5199)
Add local versions of `order_iso.continuous`.

2020-12-03 19:30:25 3894503
doc(tactic/library_search): use more detailed doc string in docs (#5206)
The doc string for `tactic.interactive.library_search` is better than the tactic doc entry.
The latter is missing details like `library_search!`

2020-12-03 19:30:23 d416ad6
feat(topology/category/Profinite): add category of profinite top. spaces (#5147)

2020-12-03 19:30:20 6f38a50
feat(field_theory/minimal_polynomial): add algebra_map_inj (#5062)
I have added `algebra_map_inj` that computes the minimal polynomial of an element of the base ring. It generalizes `algebra_map` that assumes the base ring to be a field. I left `algebra_map` since I think it is reasonable to have a lemma that works without proving explicitly that the algebra map is injective.

2020-12-03 16:31:34 986cabf
fix(linear_algebra/multilinear): Fix incorrect type constraints on `dom_dom_congr` (#5203)
In the last PR, I accidentally put this in a section with `[comm_semiring R]`, but this only actually requires `[semiring R]`

2020-12-03 16:31:32 5269717
chore(linear_algebra/determinant): Move some lemmas about swaps to better files (#5201)
These lemmas are not specific to determinants, and I need them in another file imported by `determinant`.

2020-12-03 16:31:30 8ff9c0e
feat(group_theory/order_of_element): add is_cyclic_of_prime_card (#5172)
Add `is_cyclic_of_prime_card`, which says if a group has prime order, then it is cyclic. I also added `eq_top_of_card_eq` which says a subgroup is `top` when it has the same size as the group, not sure where that should be in the file.

2020-12-03 14:04:40 f1b387f
feat(algebra/module/basic): Add smul_comm_class instances (#5205)

2020-12-03 14:04:38 a4b6c41
feat(field_theory/separable): is_separable_of_alg_hom_is_separable (#5175)
Proves that is_separable pulls back along an alg_hom

2020-12-03 14:04:36 b978f36
refactor(field_theory/fixed): Generalize alg_hom lemmas (#5174)
This PR generalizes some alg_hom lemmas to not require equality of the domain and codomain.

2020-12-03 14:04:33 e7c2bba
feat(ring_theory/witt_vector/frobenius): the frobenius endomorphism of witt vectors (#4838)
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-12-03 12:03:20 f1531ea
feat(ring_theory/witt_vector): witt_sub, a demonstration of is_poly techniques (#5165)
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-12-03 12:03:18 f6273d4
feat(group_theory/group_action/sub_mul_action): Add an object for bundled sets closed under a mul action (#4996)
This adds `sub_mul_action` as a base class for `submodule`, and copies across the relevant lemmas.
This also weakens the type class requires for `A →[R] B`, to allow it to be used when only `has_scalar` is available.

2020-12-03 10:55:59 98a20c2
feat(combinatorics/simple_graph/matching): introduce matchings and perfect matchings of graphs (#5156)
Introduce definitions of matchings and perfect matchings of graphs. This is with the goal of eventually proving Hall's Marriage Theorem and Tutte's Theorem.

2020-12-03 02:41:41 61e76c4
chore(scripts): update nolints.txt (#5197)
I am happy to remove some nolints for you!

2020-12-03 01:03:53 d9a7d05
chore(topology/algebra/ordered): add `order_iso.to_homeomorph` (#5111)
* Replace `homeomorph_of_strict_mono_surjective` with `order_iso.to_homeomorph` and `order_iso.continuous`.
* Drop `continuous_at_of_strict_mono_surjective` in favor of `order_iso.to_homeomorph`.
* Use notation for `nhds_within` here and there.

2020-12-02 21:22:19 3f61e54
feat(category_theory/monad): mark monad lemmas as reassoc (#5190)

2020-12-02 21:22:16 a84d7a7
feat(category_theory/adjunction): adjunction to equivalence (#5189)
Raise an adjunction to an equivalence

2020-12-02 21:22:13 ed6eab0
feat(category_theory/adjunction): simp adjunction defs (#5188)
Mark adjunction defs as `simps` and use the new lemmas to simplify some proofs

2020-12-02 21:22:11 9be829e
feat(order/bounds): add basic lemmas about bdd_below (#5186)
Lemmas for bounded intervals (`Icc`, `Ico`, `Ioc` and `Ioo`). There were lemmas for `bdd_above` but the ones for `bdd_below` were missing.

2020-12-02 21:22:09 e5befed
chore(data/polynomial/degree): golf some proofs, add simple lemmas (#5185)
* drop `polynomial.nat_degree_C_mul_X_pow_of_nonzero`; was a duplicate
  of `polynomial.nat_degree_C_mul_X_pow`;
* golf the proof of `nat_degree_C_mul_X_pow_le`;
* add more `simp` lemmas.

2020-12-02 21:22:07 64fd9f8
feat(order/rel_iso): preimages of intervals under an `order_iso` (#5183)

2020-12-02 21:22:05 725fb8b
feat(algebra/lie/basic): define `map` and `comap` for Lie ideals, submodules (#5181)

2020-12-02 21:22:03 5e93545
feat(linear_algebra/multilinear): Generalize dom_dom_congr for equivalences between types (#5180)
This also bundles the operation into an equivalence.

2020-12-02 21:22:01 8da5f23
feat(data/set/function): Extend `update_comp` lemmas to work on dependent functions (#5178)
Also extends them to `Sort`

2020-12-02 21:21:58 2189c7a
feat(data/option/basic): map_map functor-like lemmas (#5030)
New lemmas:
`map_eq_map`
`map_map`
`comp_map`
`map_comp_map`

2020-12-02 19:13:28 0bb8809
feat(category_theory/limits): left adjoint if preserves colimits (#4942)
A slight generalisation of a construction from before. Maybe this is the dual version you were talking about @jcommelin - if so my mistake! I think the advantage of doing it this way is that you definitionally get the old version but also the new version too.

2020-12-02 17:38:03 e5ea200
chore(analysis/normed_space): golf 2 proofs (#5184)

2020-12-02 15:07:43 a8ddd7b
feat(algebra/module/basic): generalize `is_scalar_tower` instances (#5135)

2020-12-02 13:32:27 d6241cb
feat(linear_algebra/*): Use alternating maps for wedge and determinant (#5124)
This :
* Adds `exterior_algebra.ι_multi`, where `ι_multi ![a, b ,c]` = `ι a * ι b * ι c`
* Makes `det_row_multilinear` an `alternating_map`
* Makes `is_basis.det` an `alternating_map`

2020-12-02 07:25:31 61f6364
feat(number_theory/arithmetic_function): Möbius inversion for `add_comm_group`s, `comm_group`s (#5115)
Adds scalar multiplication for `arithmetic_function`s
Generalizes Möbius inversion to work with `(add_)comm_group`s

2020-12-02 02:00:39 f7e1806
chore(scripts): update nolints.txt (#5176)
I am happy to remove some nolints for you!

2020-12-01 23:23:57 c2c7afe
feat(data/nat/sqrt): add simple inequality lemmas and "no middle square" (#5155)
The first two theorems are useful when one needs the biggest perfect square strictly less than a number, whereas `no_middle_square` can be used to easily prove that a given number is not a square.

2020-12-01 23:23:54 9a4ed2a
refactor(*): Add `_injective` alongside `_inj` lemmas (#5150)
This adds four new `injective` lemmas:
* `list.append_right_injective`
* `list.append_left_injective`
* `sub_right_injective`
* `sub_left_injective`
It also replaces as many `*_inj` lemmas as possible with an implementation of `*_injective.eq_iff`, to make it clear that the lemmas are just aliases of each other.

2020-12-01 23:23:52 c2b7d23
chore(category_theory/limits): separate regular and normal monos (#5149)
This separates the file `regular_mono` into `regular_mono` and `normal_mono`: mostly this simplifies the import graph, but also this has the advantage that to use things about kernel pairs it's no longer necessary to import things about zero objects (I kept changing equalizers and using the changes in a file about monads which imported kernel pairs, and it was very slow because of zero objects)

2020-12-01 20:05:02 6c456e3
feat(linear_algebra/multilinear): Add dom_dom_congr (#5136)

2020-12-01 20:05:00 41e0903
feat(category_theory/limits/preserves): preserving equalizers (#5044)
Constructions and lemmas about preserving equalizers

2020-12-01 16:14:24 2a68477
chore(algebra/group/basic): Add eq_one_iff_eq_one_of_mul_eq_one (#5169)

2020-12-01 16:14:22 24596ca
feat(tactic/ring_exp): handle `nat.succ p` as `p + 1` (#5166)
Fixes: #5157 
This PR adds a `rewrite` operation to `ring_exp`, which takes a normalized `p' : ex sum` and a proof that `p = p'.orig`, and shows `p` also normalizes to `p'.pretty`. The only use currently is `nat.succ`. If we still had `nat.has_pow`, the same function could have handled rewriting from `nat.has_pow` to `monoid.has_pow`.

2020-12-01 16:14:20 9e78823
feat(ring_theory/perfection): perfection and tilt (#5032)
- [x] depends on: #5132

2020-12-01 13:25:41 b7649bc
doc(linear_algebra/determinant): Add a reference to is_basis.det (#5167)

2020-12-01 13:25:39 c088f65
chore(data/equiv/perm): Move around lemmas about perm and swap (#5153)
Only a very small fraction of `data/equiv/basic` needs knowledge of groups, moving out `perm_group` lets us cut the dependency.
The new `perm_group` file is then a good place for some of the lemmas in `group_theory/perm/sign`, especially those which just restate `equiv` lemmas in terms of `*` and `⁻¹` instead of `.trans` and `.symm`.
This moves a few lemmas about swap out of the `equiv.perm` namespace and into `equiv`, since `equiv.swap` is also in that namespace.

2020-12-01 13:25:37 7188eae
feat(linear_algebra): Add alternating multilinear maps (#5102)

2020-12-01 10:59:06 ca3351f
feat(rat/{basic,floor}) add floor lemmas (#5148)

2020-12-01 08:49:42 2b074be
feat(algebra/lie/basic): Define lattice structure for `lie_submodule`s (#5146)

2020-12-01 05:46:04 a883152
doc(data/mv_polynomial/basic): Fix documentation of mv_polynomial.monomial (#5160)
The documenting comment for this function was obviously lifted from the single variable polynomial version, and did not make sense.
I'm not sure if this is the right comment, but it is at least better to what it was before.

2020-12-01 01:20:08 b846aa5
chore(scripts): update nolints.txt (#5158)
I am happy to remove some nolints for you!

2020-11-30 18:13:09 c3f4d1b
refactor(combinatorics/simple_graph): move simple graph files to their own folder (#5154)
Move the files into one folder with the goal of integrating material from the branch [simple_graphs2](https://github.com/leanprover-community/mathlib/tree/simple_graphs2)

2020-11-30 12:04:56 e3a699e
feat(linear_algebra/determinant): Show that the determinant is a multilinear map (#5142)

2020-11-30 10:52:36 9f955fe
feat(ring_theory/integral_closure): Cleanup interface for ring_hom.is_integral (#5144)

2020-11-29 02:33:01 1f1ba58
feat(category_theory/limits): reflexive coequalizers (#5123)
Adds reflexive coequalizers. These are useful for #5118 as well as for some monadicity theorems and other results.

2020-11-29 01:19:16 5866812
chore(scripts): update nolints.txt (#5143)
I am happy to remove some nolints for you!

2020-11-28 21:16:44 fe7b407
feat(tactic/explode): display exploded proofs as widgets (#4718)
#4094. This is a more advanced version of the expandable `#explode` diagram implemented in the [Mathematica-Lean Link](http://robertylewis.com/leanmm/lean_mm.pdf). The widget adds features such as jumping to definitions and exploding constants occurring in a proof term subsequently. Note that right now the [\<details\>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details) tag simply hides the information. "Exploding on request" requires a bit more refactoring on `#explode` itself and is still on the way. 
Example usage:`#explode_widget iff_true_intro`. 
![explode_widget](https://user-images.githubusercontent.com/22624072/96630999-7cb62780-1361-11eb-977d-3eb34039ab41.png)

2020-11-28 19:38:23 ec82227
chore(group_theory/perm/sign): Add swap_mul_involutive (#5141)
This is just a bundled version of swap_mul_self_mul

2020-11-28 17:42:18 916bf74
feat(category_theory/limits): images, equalizers and pullbacks imply functorial images (#5140)

2020-11-28 17:42:16 b1d8b89
chore(algebra/char_p): refactor char_p (#5132)

2020-11-28 16:26:44 137163a
feat(analysis/normed_space/dual): Fréchet-Riesz representation for the dual of a Hilbert space (#4379)
This PR defines `to_dual` which maps an element `x` of an inner product space to `λ y, ⟪x, y⟫`. We also give the Fréchet-Riesz representation, which states that every element of the dual of a Hilbert space `E` has the form `λ u, ⟪x, u⟫` for some `x : E`.

2020-11-28 01:26:41 801dea9
chore(scripts): update nolints.txt (#5139)
I am happy to remove some nolints for you!

2020-11-27 23:09:55 ba43f6f
doc(field_theory/finite/basic): update doc-strings (#5134)
The documentation mentions `finite_field.is_cyclic` that does not exist (probably replaced by `subgroup_units_cyclic` in `ring_theory.integral_domain`).

2020-11-27 23:09:53 b6f2309
chore({ring,group}_theory/free_*): Add of_injective (#5131)
This adds:
* `free_abelian_group.of_injective`
* `free_ring.of_injective`
* `free_comm_ring.of_injective`
* `free_algebra.of_injective`
following up from dcbec39a5bf9af5c6e065eea185f8776ac537d3b

2020-11-27 21:26:04 4a153ed
feat(ring_theory/polynomials/cyclotomic): add lemmas about cyclotomic polynomials (#5122)
Two lemmas about cyclotomic polynomials:
`cyclotomic_of_prime` is the explicit formula for `cyclotomic p R` when `p` is prime;
`cyclotomic_coeff_zero` shows that the constant term of `cyclotomic n R` is `1` if `2 ≤ n`. I will use this to prove that there are infinitely many prime congruent to `1` modulo `n`, for all `n`.

2020-11-27 21:26:02 14f2096
feat(ring_theory/jacobson): generalized nullstellensatz - polynomials over a Jacobson ring are Jacobson (#4962)
The main statements are `is_jacobson_polynomial_iff_is_jacobson ` and `is_jacobson_mv_polynomial`, saying that `polynomial` and `mv_polynomial` both preserve jacobson property of rings. 
This second statement is in some sense a general form of the classical nullstellensatz, since in a Jacobson ring the intersection of maximal ideals containing an ideal will be exactly the radical of that ideal (and so I(V(I)) = I.radical).

2020-11-27 18:30:26 8d3e93f
chore(category_theory/limits): golf a proof (#5133)

2020-11-27 18:30:24 fb70419
feat(algebra/group/basic): simplify composed assoc ops (#5031)
New lemmas:
`comp_assoc_left`
`comp_assoc_right`
`comp_mul_left`
`comp_add_left`
`comp_mul_right`
`comp_add_right`

2020-11-27 18:30:22 73a2fd3
feat(ring_theory/witt_vector/init_tail): adding disjoint witt vectors (#4835)
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-11-27 15:35:32 396487f
feat(topology/separation): Adds t2_space instances for disjoint unions (sums and sigma types). (#5113)

2020-11-27 14:25:59 876481e
feat(field_theory/separable): add separable_of_X_pow_sub_C and squarefree_of_X_pow_sub_C (#5052)
I've added that `X ^ n - a` is separable, and so `squarefree`.

2020-11-27 14:25:57 c82b708
feat(category_theory/sites): the canonical topology on a category (#4928)
Explicitly construct the finest topology for which the given presheaves are sheaves, and specialise to construct the canonical topology. 
Also one or two tiny changes which should have been there before

2020-11-27 11:58:59 0ac414a
feat(data/fin): Add pred_{le,lt}_pred_iff (#5121)

2020-11-27 11:58:57 8acd296
chore(topology/path_connected): move `proj_Icc` to a separate file (#5120)
Also use `min` and `max` in the definition to make, e.g., the proof of the continuity trivial.

2020-11-27 09:16:37 238c58c
chore(category_theory/limits): golf a proof (#5130)

2020-11-27 09:16:35 ff2aeae
feat(logic/relation): trans_gen closure (#5129)
Mechanical conversion of `refl_trans_gen` lemmas for just `trans_gen`.

2020-11-27 09:16:33 af7ba87
feat(data/polynomial/eval): eval₂ f x (p * X) = eval₂ f x p * x (#5110)
Also generalize `polynomial.eval₂_mul_noncomm` and
`polynomial.eval₂_list_prod_noncomm`.
This PR uses `add_monoid_algebra.lift_nc` to golf some proofs about
`eval₂`. I'm not ready to replace the definition of `eval₂` yet (e.g.,
because it breaks dot notation everywhere), so I added
a lemma `eval₂_eq_lift_nc` instead.

2020-11-27 09:16:31 8e09111
chore(order/basic): add `strict_mono_??cr_on.dual` and `dual_right` (#5107)
We can use these to avoid `@strict_mono_??cr_on (order_dual α) (order_dual β)`.

2020-11-27 09:16:29 a106102
chore(category_theory/iso): golf and name consistency (#5096)
Minor changes: makes the names consistent and simplifies proofs

2020-11-27 09:16:27 d078950
feat(linear_algebra/bilinear_form): equivalence with matrices, given a basis (#5095)
This PR defines the equivalence between bilinear forms on an arbitrary module and matrices, given a basis of that module. It updates the existing equivalence between bilinear forms on `n → R` so that the overall structure of the file matches that of `linear_algebra.matrix`, i.e. there are two pairs of equivs, one for `n → R` and one for any `M` with a basis.
Changes:
 - `bilin_form_equiv_matrix`, `bilin_form.to_matrix` and `matrix.to_bilin_form` have been consolidated as linear equivs `bilin_form.to_matrix'` and `matrix.to_bilin'`. Other declarations have been renamed accordingly.
 - `quadratic_form.to_matrix` and `matrix.to_quadratic_form` are renamed by analogy to `quadratic_form.to_matrix'` and `matrix.to_quadratic_form'`
 - replaced some `classical.decidable_eq` in lemma statements with instance parameters, because otherwise we have to use `congr` to apply these lemmas when a `decidable_eq` instance is available
Additions:
 - `bilin_form.to_matrix` and `matrix.to_bilin`: given a basis, the equivalences between bilinear forms on any module and matrices
 - lemmas from `to_matrix'` and `to_bilin'` have been ported to `to_matrix` and `to_bilin`
 - `bilin_form.congr`, a dependency of `bilin_form.to_matrix`, states that `bilin_form R M` and `bilin_form R M'` are linearly equivalent if `M` and `M'` are
 - assorted lemmas involving `std_basis`
Deletions:
 - `bilin_form.to_matrix_smul`: use `linear_equiv.map_smul` instead

2020-11-27 09:16:24 c06c616
feat(number_theory/arithmetic_function): Moebius inversion (#5047)
Changes the way that zeta works with coercion
Proves Möbius inversion for functions to a general `comm_ring`

2020-11-27 09:16:21 2bda184
feat(field_theory): Prove the Galois correspondence (#4786)
The proof leverages existing results from field_theory/fixed.lean and field_theory/primitive_element.lean.
We define Galois as normal + separable. Proving the various equivalent characterizations of Galois extensions is yet to be done.

2020-11-27 06:39:09 2f939e9
chore(data/equiv/basic): redefine `set.bij_on.equiv` (#5128)
Now `set.bij_on.equiv` works for any `h : set.bij_on f s t`. The old
behaviour can be achieved using `(equiv.set_univ _).symm.trans _`.

2020-11-27 06:39:07 4715d99
chore(data/set/function): add 3 trivial lemmas (#5127)

2020-11-27 06:39:04 c1edbdd
chore(data/complex/exponential): golf 2 proofs (#5126)

2020-11-27 06:39:02 cb9e5cf
doc(data/equiv/basic): improve docstring of `equiv.sum_equiv_sigma_bool` (#5119)
Also slightly improve defeq of the `to_fun` field by using `sum.elim` instead of a custom `match`.

2020-11-27 06:39:00 d3cc993
chore(data/pprod): Add pprod.mk.eta (#5114)
This is exactly the same as prod.mk.eta

2020-11-27 04:12:29 2c5d4a3
chore(order/rel_iso): add a few lemmas (#5106)
* add lemmas `order_iso.apply_eq_iff_eq` etc;
* define `order_iso.symm`.

2020-11-27 01:21:04 1a8089e
chore(scripts): update nolints.txt (#5125)
I am happy to remove some nolints for you!

2020-11-26 17:19:04 59717d6
chore(data/sum): Add trivial simp lemmas (#5112)

2020-11-26 09:59:56 2d476e0
chore(data/equiv/basic): Add comp_swap_eq_update (#5091)

2020-11-26 01:18:53 98ebe5a
chore(scripts): update nolints.txt (#5117)
I am happy to remove some nolints for you!

2020-11-25 16:13:58 6e301c7
chore(logic/function/basic): Add function.update_apply (#5093)
This makes it easier to eliminate `dite`s in simple situations when only `ite` is needed.

2020-11-25 15:09:50 81207e0
feat(algebra/triv_sq_zero_ext): trivial square-zero extension (#5109)

2020-11-25 11:39:21 4265f2c
chore(data/int/basic): Add int.units_mul_self (#5101)

2020-11-25 06:48:00 0324935
chore(data/equiv/basic): Add trivial simp lemma (#5100)
With this in place, `⇑1 ∘ f` simplifies to `⇑f`

2020-11-25 03:17:58 0020077
fix(algebra/ordered_group): remove workaround (#5103)
The problem mentioned in the TODO has been solved so the workaround is no longer needed.

2020-11-25 01:28:51 83f293e
chore(scripts): update nolints.txt (#5105)
I am happy to remove some nolints for you!

2020-11-24 19:48:35 7e66984
fix(algebra/group_with_zero/power): remove duplicate lemmas (#5083)
`pow_eq_zero` and `pow_eq_zero'` are syntactically equal, as are `pow_ne_zero` and `pow_ne_zero'`.

2020-11-24 13:18:42 2ed4846
chore(linear_algebra/multilinear_map): Add boring coercion lemmas copied from ring_hom (#5099)

2020-11-24 11:42:00 943b129
feat(analysis/special_functions/trigonometric): sin, cos, sinh, and cosh are infinitely smooth (#5090)

2020-11-24 09:15:42 fe4abe0
chore(algebra/lie/skew_adjoint): move logic for Lie algebras of skew-adjoint endomorphisms to own file (#5098)

2020-11-24 02:14:31 51e71e9
chore(scripts): update nolints.txt (#5097)
I am happy to remove some nolints for you!

2020-11-23 23:33:18 64b3e52
feat(data/finset/basic): Finset subset induction (#5087)
Induction on subsets of a given finset.

2020-11-23 22:04:03 434a34d
feat(group_theory/perm/sign): Add swap_induction_on' (#5092)
This also adds a docstring for swap_induction_on

2020-11-23 22:04:01 2a49f4e
feat(algebra/lie/direct_sum): direct sums of Lie modules (#5063)
There are three things happening here:
  1. introduction of definitions of direct sums for Lie modules,
  2. introduction of definitions of morphisms, equivs for Lie modules,
  3. splitting out extant definition of direct sums for Lie algebras
     into a new file.

2020-11-23 19:56:57 fee93e9
feat(ring_theory/*): Various lemmas about ideals, quotients, and localizations (#5046)
Lemmas needed for the proof that is_jacobson is preserved under taking polynomials.

2020-11-23 17:02:17 96a2038
chore(linear_algebra/bilinear_form): cleanup (#5049)
- Generalize some defs and lemmas to semimodules over semirings
- Define the equiv between `bilin_form` and `linear_map` analogously to `linear_map.to_matrix / matrix.to_lin`
- Mark appropriate lemmas as `simp`
- Fix overlong lines, match style guide in other places too
- Make use of variables consistent throughout the file

2020-11-23 15:20:48 270fc31
fix(ring_theory/discrete_valuation_ring): docstring typos (#5085)
Clarify one docstring and fix two others.

2020-11-23 13:47:52 e8c8ce9
chore(category_theory/limits): move product isomorphisms (#5057)
This PR moves some constructions and lemmas from `monoidal/of_has_finite_products` (back) to `limits/shapes/binary_products`. 
This reverts some changes made in https://github.com/leanprover-community/mathlib/commit/18246ac427c62348e7ff854965998cd9878c7692#diff-95871ea16bec862dfc4359f812b624a7a98e87b8c31c034e8a6e792332edb646. In particular, the purpose of that PR was to minimise imports in particular relating to `finite_limits`, but moving these particular definitions back doesn't make the imports any worse in that sense - other than that `binary_products` now imports `terminal` which I think doesn't make the import graph much worse.  On the other hand, these definitions are useful outside of the context of monoidal categories so I think they do genuinely belong in `limits/`.
I also changed some proofs from `tidy` to `simp` or a term-mode proof, and removed a `simp` attribute from a lemma which was already provable by `simp`.

2020-11-23 13:47:50 a71901f
feat(category_theory/limits): explicit binary product functor in Type (#5043)
Adds `binary_product_functor`, the explicit product functor in Type, and `binary_product_iso_prod` which shows it is isomorphic to the one picked by choice (this is helpful eg to show Type is cartesian closed).
I also edited the definitions a little to use existing machinery instead - this seems to make `simp` and `tidy` stronger when working with the explicit product cone; but they're definitionally the same as the old ones.

2020-11-23 13:47:48 562be70
feat(field_theory/separable): a separable polynomial is squarefree (#5039)
I prove that a separable polynomial is squarefree.

2020-11-23 13:47:44 3c1cf60
feat(category_theory/sigma): disjoint union of categories (#5020)

2020-11-23 13:47:42 13b9478
feat(combinatorics/colex): introduce colexicographical order (#4858)
We define the colex ordering for finite sets, and give a couple of important lemmas and properties relating to it.
Part of #2770, in order to prove the Kruskal-Katona theorem.

2020-11-23 12:40:48 83ec6e0
feat(analysis/normed_space/inner_product): inner product is infinitely smooth (#5089)

2020-11-23 10:07:38 fdabe9c
feat(data/padics/padic_norm): add a little more API (#5082)
A little more API for `padic_val_rat` and `padic_val_nat`.

2020-11-23 09:03:09 2f51659
feat(analysis/special_functions/exp_log): `exp` is infinitely smooth (#5086)
* Prove that `complex.exp` and `real.exp` are infinitely smooth.
* Generalize lemmas about `exp ∘ f` to `f : E → ℂ` or `f : E → ℝ`
  instead of `f : ℂ → ℂ` or `f : ℝ → ℝ`.

2020-11-23 03:24:34 b9bd4a5
chore(scripts): update nolints.txt (#5088)
I am happy to remove some nolints for you!

2020-11-23 01:00:25 ce0498e
feat(data/nat/basic): add injectivity and divisibility lemmas (#5068)
Multiplication by a non-zero natural is injective. Also a simple criterion for non-divisibility which I couldn't find (0<b<a implies a doesn't divide b).

2020-11-22 22:06:40 2252c3a
chore(data/list/basic): Add pmap_map (#5081)

2020-11-22 22:06:38 7f4286c
chore(order/basic): add `le_update_iff` and `update_le_iff`  (#5080)
Other changes:
* add `update_eq_iff`, `eq_update_iff` and a more general lemma `rel_update_iff`;
* remove `@[simps]` attributes on `pi.*_lattice` instances.

2020-11-22 22:06:36 c4132e9
chore(logic/unique): add `fin.inhabited` (#5077)

2020-11-22 22:06:34 2044451
chore(data/real/ennreal): add a few lemmas (#5071)
Also swap LHS with RHS in `to_real_mul_to_real` and rename it to `to_real_mul`.

2020-11-22 22:06:32 f627d76
chore(data/set/basic): more simp lemmas (#5070)
Motivated by #4843

2020-11-22 22:06:30 f5b967a
feat(finset/basic): Add forall_mem_union (#5064)
Part of [#4943](https://github.com/leanprover-community/mathlib/pull/4943), in order to prove theorems about antichains.
Lemma and proof supplied by [eric-wieser](https://github.com/eric-wieser)

2020-11-22 22:06:27 17a6f6d
refactor(analysis/normed_space/hahn_banach): use is_R_or_C instead of specific typeclass (#5009)
In the current version, the proof of Hahn-Banach theorem is given over the reals, then over the complexes, and then to state the consequences uniformly a custom typeclass is defined. The proof over the complexes in fact works directly over any `is_R_or_C` field (i.e., reals or complexes), so we reformulate the proof in these terms, avoiding the custom typeclass.
It doesn't bring any new theorem to mathlib, but it may be helpful in the future (to prove results uniformly over reals and complexes using `is_R_or_C`) if we have Hahn-Banach readily available for this typeclass.

2020-11-22 19:31:23 2a876b6
chore(algebra/ordered_group): move monoid stuff to ordered_monoid.lean (#5066)
Replace one 2000 line file with two 1000 line files: ordered group stuff in one, and ordered monoid stuff in the other.

2020-11-22 14:51:30 8d71ec9
chore(data/fin): a few more lemmas about `fin.insert_nth` (#5079)

2020-11-22 14:51:28 c458724
chore(topology/metric_space/isometry): add a missing simp lemma (#5078)

2020-11-22 14:51:26 a9b6b36
chore(algebra/big_operators): add `finset.abs_prod` (#5076)

2020-11-22 14:51:24 2ba930e
chore(measure_theory/borel_space): add some `simp` attrs (#5075)

2020-11-22 14:51:21 c59dbf3
chore(topology/basic): add `cluster_pt.map`, rename `mem_closure` (#5065)
* add `filter.prod_pure`, `filter.pure_prod`, `cluster_pt.map`, and `set.maps_to.closure`;
* rename `mem_closure` to `map_mem_closure`;
* rename `mem_closure2` to `map_mem_closure2`.

2020-11-22 12:03:14 a649851
chore(analysis/complex/basic): add `times_cont_diff.real_of_complex` (#5073)
Also rename `has_deriv_at_real_of_complex` to `has_deriv_at.real_of_complex`.

2020-11-22 12:03:12 87439b9
chore(logic/basic): add `forall_apply_eq_imp_iff₂` (#5072)
Other lemmas simplify `∀ y ∈ f '' s, p y` to the LHS of this lemma.

2020-11-22 10:15:37 198f3e5
chore(topology/homeomorph): add more simp lemmas (#5069)
Also use implicit arguments in some `iff` lemmas.

2020-11-22 01:09:23 8525aa9
chore(scripts): update nolints.txt (#5067)
I am happy to remove some nolints for you!

2020-11-21 21:24:19 79cd720
feat(data/complex/is_R_or_C): Create a proper coercion from ℝ (#4824)
This PR creates a proper coercion `ℝ → 𝕜` for `[is_R_or_C 𝕜]`, modelled on the code in `data/nat/cast`, as per the discussion [here](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Hilbert.20space.20is.20isometric.20to.20its.20dual).

2020-11-21 20:09:32 556a725
feat(data/nat/parity): lemmas about (-1)^n (#5056)
I needed these twice recently, for two independent reasons, so I thought they were worth a PR.

2020-11-21 17:37:55 aff4669
feat(group_theory/subgroup): add closure_eq_bot_iff (#5055)
Add missing lemma

2020-11-21 01:13:36 cff497f
chore(scripts): update nolints.txt (#5058)
I am happy to remove some nolints for you!

2020-11-20 19:18:02 006f84e
feat(algebra/group_power/basic): add add le_of_pow_le_pow (#5054)
add a random missing lemma

2020-11-20 16:41:58 1fbdf77
fix(linear_algebra/quadratic_form): nondegenerate -> anisotropic (#5050)
I made a mistake by merging a PR that defined `nondegenerate`
but should have used the terminology `anisotropic` instead.

2020-11-20 12:39:29 498d497
feat(measure_theory/lp_space): prove that neg and add are in Lp (#5014)
For f and g in Lp, (-f) and (f+g) are also in Lp.

2020-11-20 09:40:27 32d1dfc
feat(linear_algebra/quadratic_form): nondegenerate quadratic forms (#5045)
No real lemmas about these, but `nondegenerate Q` is easier to read than `∀ x, Q x = 0 → x = 0`

2020-11-20 07:52:25 8d40e8d
feat(analysis/special_functions/pow): add ennreal.to_nnreal_rpow (#5042)
cut ennreal.to_real_rpow into two lemmas: to_nnreal_rpow and to_real_rpow

2020-11-20 06:44:00 de76acd
feat(number_theory/arithmetic_function): moebius is the inverse of zeta (#5001)
Proves the most basic version of moebius inversion: that the moebius function is the inverse of the zeta function

2020-11-20 01:04:58 0e976d9
chore(scripts): update nolints.txt (#5048)
I am happy to remove some nolints for you!

2020-11-19 15:34:57 47542a0
feat(ring_theory/witt_vector/verschiebung): verschiebung of witt vectors (#4836)
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-11-19 13:00:19 3326510
chore(field_theory/minimal_polynomial): generalize irreducible (#5006)
I have removed the assumption that the base ring is a field for a minimal polynomial to be irreducible.
The proof is simple but long, it should be possible to use `wlog` to shorten it, but I do not understand how to do it...

2020-11-19 13:00:17 b479d3b
feat(algebra/*): star_ring instances on free_algebra, free_monoid, ring_quot, and quaternion (#4902)

2020-11-19 10:10:26 700d576
chore(algebra/group/defs): Remove shortcut instance definitions (#4955)
This means that `group.to_left_cancel_semigroup` is now spelt `group.to_cancel_monoid.to_left_cancel_monoid.to_left_cancel_semigroup`.
The longer spelling shouldn't actually matter because type inference will do it anyway.
I don't know whether this matters, but this should slightly reduce the number of connections that instance resolution must check.
This shortcut wasn't added deliberately, it seems it just got added accidentally when #3688 was introduced.

2020-11-19 06:43:23 123c522
feat(category_theory/limits): terminal comparison morphism (#5025)

2020-11-19 03:06:00 b848b5b
feat(algebra/squarefree): a squarefree element of a UFM divides a power iff it divides (#5037)
Proves that if `x, y` are elements of a UFM such that `squarefree x`, then `x | y ^ n` iff `x | y`.

2020-11-19 01:49:38 87a6d95
chore(scripts): update nolints.txt (#5041)
I am happy to remove some nolints for you!

2020-11-19 01:49:36 68adaba
chore(field_theory/separable): spell-check "seperable" to "separable" (#5040)
Replacing instances of "seperable" with "separable"

2020-11-18 23:23:59 dcbec39
feat(algebra/*): Add of_injective lemmas (#5034)
This adds `free_monoid.of_injective`, `monoid_algebra.of_injective`, `add_monoid_algebra.of_injective`, and renames and restates `free_group.of.inj` to match these lemmas.
`function.injective (free_abelian_group.of)` is probably also true, but I wasn't able to prove it.

2020-11-18 23:23:57 2de8db4
feat(analysis/special_functions/pow): prove measurability of rpow for ennreal (#5026)
Prove measurability of rpow for an ennreal argument.
Also shorten the proof in the real case.

2020-11-18 21:10:00 abb0b67
refactor(*): make continuous a structure (#5035)
Turn `continuous` into a structure, to make sure it is not unfolded too much by Lean.
After the change, inferring some types is harder to Lean (as it can not unfold further to find more information), so some help is needed at places. Especially, for `hf : continuous f` and `hg : continuous g`, I had to replace `hf.prod_mk hg` with `(hf.prod_mk hg : _)` a lot of times.
For `hf : continuous f` and `hs : is_open s`, the fact that `f^(-1) s` is open used to be `hf s hs`. Now, it is `hs.preimage hf`, just like it is for closed sets.

2020-11-18 16:28:13 38d2b53
feat(algebra/free_algebra): Add a nontrivial instance (#5033)

2020-11-18 14:27:12 0e09ada
feat(category_theory/is_connected): zigzag lemmas (#5024)
A few basic lemmas about connected categories and the zigzag relation

2020-11-18 12:44:52 aff7727
chore(data/complex/is_R_or_C): Remove two unnecessary axioms (#5017)
`of_real` and `smul_coe_mul_ax` are already implied by the algebra structure.
The addition of `noncomputable` does not matter here, as both instances of `is_R_or_C` are marked non-computable anyway.

2020-11-18 09:32:12 d22a878
doc(algebra/module/linear_map): Explain where the ring instance is (#5023)

2020-11-18 09:32:10 dfdad99
feat(category_theory): constant functor is faithful (#5022)

2020-11-18 09:32:06 dab2ae3
feat(category_theory/is_connected): transfer across equivalence (#5021)
Also renames some universes to match usual conventions

2020-11-18 09:31:55 a44b46c
chore(*/sub*): Use the simp normal form for has_coe_to_sort (#5019)
This reduces the need to start proofs on subtypes by applying `mem_coe`.

2020-11-18 09:31:53 0d3092b
feat(number_theory/arithmetic_function): defining several more `arithmetic_function`s (#4998)
Defines arithmetic functions `card_factors`, `card_distinct_factors`, and `moebius`

2020-11-18 09:31:50 7cc6b53
feat(category_theory/sites): sheaves on a grothendieck topology (#4608)
Broken off from #4577.

2020-11-18 07:06:12 fec1a59
feat(data/list): map lemmas paralleling functor (#5028)
Adding `comp_map` and `map_comp_map`.
Docstrings done to match docstrings for equivalent `prod.map_comp_map`.

2020-11-18 01:08:16 19e3302
chore(scripts): update nolints.txt (#5029)
I am happy to remove some nolints for you!

2020-11-17 17:53:52 e92b5ac
feat(algebra/opposites): Provide semimodule instances and op_linear_equiv (#4954)
We already have a `has_scalar` definition via an `algebra` definition.
The definition used there satisfies a handful of other typeclasses too, and also allows for `op_add_equiv` to be stated more strongly as `op_linear_equiv`.
This also cuts back the imports a little on `algebra.module.basic`, which means formerly-transitive imports have to be added to downstream files.

2020-11-17 15:27:56 97fc8ce
refactor(algebra/lie/basic): unbundle the action in `lie_module` (#4959)

2020-11-17 12:21:38 47476ef
docs(references.bib): adds Samuel's Théorie Algébrique des Nombres (#5018)
Added Samuel's Théorie Algébrique des Nombres

2020-11-17 12:21:36 a59e76b
feat(ring_theory/noetherian): add two lemmas on products of prime ideals (#5013)
Add two lemmas saying that in a noetherian ring (resp. _integral domain)_ every (_nonzero_) ideal contains a (_nonzero_) product of prime ideals.

2020-11-17 12:21:33 86b0971
feat(algebra/group_with_zero): Bundled `monoid_with_zero_hom` (#4995)
This adds, without notation, `monoid_with_zero_hom` as a variant of `A →* B` that also satisfies `f 0 = 0`.
As part of this, this change:
* Splits up `group_with_zero` into multiple files, so that the definitions can be used in the bundled homs before any of the lemmas start pulling in dependencies
* Adds `monoid_with_zero_hom` as a base class of `ring_hom`
* Changes some `monoid_hom` objects into `monoid_with_zero_hom` objects.
* Moves some lemmas about `valuation` into `monoid_hom`, since they apply more generally
* Add automatic coercions between `monoid_with_zero_hom` and `monoid_hom`

2020-11-17 12:21:30 7a70764
feat(ring_theory/fractional_ideal): helper lemmas for Dedekind domains (#4994)
An assortment of lemmas and refactoring related to `fractional_ideal`s, used in the Dedekind domain project.
    
The motivation for creating this PR is that we are planning to remove the general `has_inv` instance on `fractional_ideal` (reserving it only for Dedekind domains), and we don't want to do the resulting refactoring twice. So we make sure everything is in the master branch, do the refactoring there, then merge the changes back into the work in progress branch.
Overview of the changes in `localization.lean`:
 * more `is_integer` lemmas
 * a localization of a noetherian ring is noetherian
 * generalize a few lemmas from integral domains to nontrivial `comm_ring`s
 * `algebra A (fraction_ring A)` instance
Overview of the changes in `fractional_ideal.lean`:
 * generalize many lemmas from integral domains to (nontrivial) `comm_ring`s (now `R` is notation for a `comm_ring` and `R₁` for an integral domain) 
 * `is_fractional_of_le`, `is_fractional_span_iff` and `is_fractional_of_fg`
 * many `simp` and `norm_cast` results involving `coe : ideal -> fractional_ideal` and `coe : fractional_ideal -> submodule`: now should be complete for `0`, `1`, `+`, `*`, `/` and `≤`.
 * use `1 : submodule` as `simp` normal form instead of `coe_submodule (1 : ideal)`
 * make the multiplication operation irreducible
 * port `submodule.has_mul` lemmas to `fractional_ideal.has_mul`
 * `simp` lemmas for `canonical_equiv`, `span_singleton`
 * many ways to prove `is_noetherian`
Co-Authored-By: Ashvni <ashvni.n@gmail.com>
Co-Authored-By: faenuccio <filippo.nuccio@univ-st-etienne.fr>

2020-11-17 11:18:37 ad286fb
feat(tactic/fresh_names): add tactics for giving hyps fresh names (#4987)
This commit adds a variant of `rename` which guarantees that the renamed
hypotheses receive fresh names. To implement this, we also add more flexible
variants of `get_unused_name`, `intro_fresh` and `intro_lst_fresh`.

2020-11-17 02:15:30 a2f3399
chore(scripts): update nolints.txt (#5016)
I am happy to remove some nolints for you!

2020-11-16 23:47:31 53f71f8
feat(data/list): list last lemmas (#5015)
list last lemmas letting lean learn little logical links

2020-11-16 14:15:33 b588fc4
chore(*) Unused have statements in term mode (#5012)
Remove unneeded have statements.

2020-11-16 09:03:03 90fa510
feat(analysis/special_functions/pow): rpow is measurable (#5008)
Prove the measurability of rpow in two cases: real and nnreal.

2020-11-16 01:22:58 4cd2438
chore(scripts): update nolints.txt (#5011)
I am happy to remove some nolints for you!

2020-11-16 00:17:12 470ac77
feat(category_theory/monad): monadic functor really creates limits (#4931)
Show that a monadic functor `creates_limits`, and a partial result for colimits.

2020-11-15 14:10:11 9631594
feat(algebra/star): star monoids, rings and algebras (#4886)

2020-11-15 04:56:07 9dd9b6b
refactor(archive/imo/imo1969_q1): prove `infinite` statement, cleanup (#4391)
The previous formalization didn't quite prove that there were infinitely many natural numbers with the desired property, but rather that for any natural number there's a larger one with the property. This PR changes the ending to prove that the set of integers described in the problem statement is `infinite`.

2020-11-15 01:46:16 7e27d94
chore(scripts): update nolints.txt (#5007)
I am happy to remove some nolints for you!

2020-11-15 01:46:14 447b18f
chore(data/polynomial/degree): consolidate all `polynomial.degree` files in one folder (#5005)
Moves `data/polynomial/degree.lean` to `data/polynomial/degree`, which already exists, renames it `lemmas.lean`
Renames `data/polynomial/degree/basic.lean` to `definitions.lean`
Adds `data/polynomial/degree/default.lean`, which just imports `lemmas.lean`

2020-11-15 01:46:12 fca7eba
chore(analysis/calculus/deriv): composition of `g : 𝕜 → 𝕜` with `f : E → 𝕜` (#4871)

2020-11-15 00:37:55 e6e8275
chore(linear_algebra/char_poly): put everything `char_poly` in one folder (#5004)
Moves `char_poly` to `char_poly.basic`, because the folder already exists

2020-11-14 23:13:25 6544244
feat(data/polynomial) small refactor and golf (#5002)
Factor out the lemma that roots of the normalization equal the roots of a polynomial and golf a proof a tiny bit.

2020-11-14 22:08:14 0582237
feat(analysis): seminorms and local convexity (#4827)

2020-11-14 19:46:53 633c2a6
feat(ring_theory/gauss_lemma): two primitive polynomials divide iff they do in a fraction field (#5003)
Shows `polynomial.is_primitive.dvd_iff_fraction_map_dvd_fraction_map`, that two primitive polynomials divide iff they do over a fraction field.
Shows `polynomial.is_primitive.int.dvd_iff_map_cast_dvd_map_cast`, the version for integers and rationals.

2020-11-14 19:46:51 0092414
feat(data/nat/choose/sum): alternating binomial coefficient sums (#4997)
Evaluates some sums related to binomial coefficients with alternating signs

2020-11-14 18:20:15 9b887d5
feat(measure_theory/lp_space): Define Lp spaces (#4993)
Define the space Lp of functions for which the norm raised to the power p has finite integral.
Define the seminorm on that space (without proof that it is a seminorm, for now).
Add three lemmas to analysis/special_functions/pow.lean about ennreal.rpow
<!--
put comments you want to keep out of the PR commit here.
If this PR depends on other PRs, please list them below this comment,
using the following format:
- [ ] depends on: #abc [optional extra text]
- [ ] depends on: #xyz [optional extra text]
-->

2020-11-14 12:34:53 70ca6fd
feat(ring_theory/power_basis): `equiv`s between algebras with the same power basis (#4986)
`power_basis.lift` and `power_basis.equiv` use the power basis structure to define `alg_hom`s and `alg_equiv`s.
    
The main application in this PR is `power_basis.equiv_adjoin_simple`, which states that adjoining an element of a power basis of `L : K` gives `L` itself.

2020-11-14 12:34:51 6bac899
feat(category_theory/limits/preserves): functor product preserves colims (#4941)

2020-11-14 12:34:49 154d73d
feat(category_theory/equivalence): equivalence of functor categories (#4940)

2020-11-14 12:34:46 a0341a8
feat(category_theory/limits/creates): transfer creating limits through nat iso (#4938)
`creates` version of #4934

2020-11-14 12:34:45 ccc1431
feat(ring_theory/ideal_operations): prime avoidance (#773)
```lean
/-- Prime avoidance. Atiyah-Macdonald 1.11, Eisenbud 3.3, Stacks 10.14.2 (00DS), Matsumura Ex.1.6. -/
theorem subset_union_prime {s : finset ι} {f : ι → ideal R} (a b : ι)
  (hp : ∀ i ∈ s, i ≠ a → i ≠ b → is_prime (f i)) {I : ideal R} :
  (I : set R) ⊆ (⋃ i ∈ (↑s : set ι), f i) ↔ ∃ i ∈ s, I ≤ f i :=
```

2020-11-14 11:02:55 5f15104
feat(algebra/squarefree): Defines squarefreeness, proves several equivalences (#4981)
Defines when a monoid element is `squarefree`
Proves basic lemmas to determine squarefreeness
Proves squarefreeness criteria in terms of `multiplicity`, `unique_factorization_monoid.factors`, and `nat.factors`

2020-11-14 01:13:48 4db26af
chore(scripts): update nolints.txt (#4999)
I am happy to remove some nolints for you!

2020-11-13 22:06:40 9ed9e0f
feat(tactic/has_variable_names): add tactic for type-based naming (#4988)
When we name hypotheses or variables, we often do so in a type-directed fashion:
a hypothesis of type `ℕ` is called `n` or `m`; a hypothesis of type `list ℕ` is
called `ns`; etc. This commits adds a tactic which looks up typical variable
names for a given type. Typical variable names are registered by giving an
instance of the new type class `has_variable_names`. We also give instances of
this type class for many core types.

2020-11-13 19:42:11 050b837
feat(field_theory/adjoin): Adjoin integral element (#4831)

2020-11-13 17:59:05 eeb2057
feat(ring_theory/unique_factorization_domain): connecting `multiplicity` to `unique_factorization_domain.factors` (#4980)
Connects multiplicity of an irreducible to the multiset of irreducible factors

2020-11-13 11:15:04 1a233e0
feat(analysis/calculus): derivative is measurable (#4974)

2020-11-13 01:25:28 140d8b4
chore(scripts): update nolints.txt (#4992)
I am happy to remove some nolints for you!

2020-11-12 23:23:14 6b3a2d1
feat(archive/imo): formalize IMO 1964 problem 1 (#4935)
This is an alternative approach to #4369, where progress seems to have stalled. I avoid integers completely by working with `nat.modeq`, and deal with the cases of n mod 3 by simply breaking into three cases.

2020-11-12 16:36:44 6e64df5
chore(deprecated/group): Do not import `deprecated` from `equiv/mul_add` (#4989)
This swaps the direction of the import, which makes the deprecated instances for `mul_equiv` be in the same place as the instances for `monoid_hom`.

2020-11-12 16:36:42 97a7f57
chore(algebra/direct_limit): Use bundled morphisms (#4964)
This introduced some ugliness in the form of `(λ i j h, f i j h)`, which is a little unfortunate

2020-11-12 14:19:46 34215fc
feat(group_theory/sub{monoid,group}): Add `closure_induction'` for subtypes (#4984)

2020-11-12 12:14:35 7404f0e
feat(algebra/pointwise): lemmas relating to submonoids (#4960)

2020-11-12 08:28:56 593013d
feat(algebra/quandle): Bundle `rack.to_envel_group.map` into an equiv (#4978)
This also cleans up some non-terminal simp tactics

2020-11-12 04:06:42 3f575d7
feat(group_theory/subgroup) top is a normal subgroup (#4982)

2020-11-12 02:51:51 509a224
chore(scripts): update nolints.txt (#4983)
I am happy to remove some nolints for you!

2020-11-12 00:24:20 f6c8d81
feat(algebra/group/with_one): Use an equiv for `lift` (#4975)

2020-11-12 00:24:16 49cf28f
feat(data/matrix): little lemmas on `map` (#4874)
I had a couple of expressions involving mapping matrices, that the simplifier didn't `simp` away. It turns out the missing lemmas already existed, just not with the correct form / hypotheses. So here they are.

2020-11-11 22:13:41 67309a4
refactor(group_theory/group_action): Break the file into three pieces (#4936)
I found myself fighting import cycles when trying to define `has_scalar` instances in files that are early in the import tree.
By creating a separate `defs` file with minimal dependencies, this ought to become easier.
This also adds documentation.
None of the proofs or lemma statements have been touched.

2020-11-11 19:36:52 743a104
chore(algebra): trivial lemmas on powers (#4977)

2020-11-11 18:01:44 5f098cf
chore(topology): 2 trivial lemmas (#4968)

2020-11-11 15:13:36 d4aabf9
doc(type_classes): Explain the use of {} instance arguments (#4976)
Closes gh-4660

2020-11-11 13:39:21 60234d1
chore(algebra/archimedean): add `exists_pow_lt_of_lt_1` (#4970)

2020-11-11 13:39:18 4bf7ae4
refactor(analysis/normed_space): use `lt` in rescale_to_shell, DRY (#4969)
* Use strict inequality for the upper bound in `rescale_to_shell`.
* Deduplicate some proofs about operator norm.
* Add `linear_map.bound_of_shell`, `continuous_linear_map.op_norm_le_of_shell`, and `continuous_linear_map.op_norm_le_of_shell'`.

2020-11-11 13:39:16 e1560a3
feat(measure_theory/borel_space): continuity set of a function is measurable (#4967)
* Move the definition of `is_Gδ` and basic lemmas to a separate file.
* Prove that `{x | continuous_at f x}` is a Gδ set provided that the
  codomain is a uniform space with countable basis of the uniformity
  filter (e.g., an `emetric_space`). In particular, this set is
  measurable.
* Rename `nhds_le_uniformity` to `supr_nhds_le_uniformity`.
* Add new `nhds_le_uniformity` without `⨆` in the statement.
* Add `uniform.continuous_at_iff_prod`.

2020-11-11 10:50:27 02cdc33
chore(algebra/group/hom): Add missing simp lemmas (#4958)
These are named in the same pattern as `linear_map.to_add_monoid_hom_coe`

2020-11-11 10:50:25 3d6291e
chore(algebra/group/with_one): Use bundled morphisms (#4957)
The comment "We have no bundled semigroup homomorphisms" has become false, these exist as `mul_hom`.
This also adds `with_one.coe_mul_hom` and `with_zero.coe_add_hom`

2020-11-11 08:22:46 f30200e
refactor(algebra/free_algebra): Make `lift` an equiv (#4908)
This can probably lead to some API cleanup down the line

2020-11-11 01:33:41 c20ecef
chore(scripts): update nolints.txt (#4965)
I am happy to remove some nolints for you!

2020-11-10 23:30:00 5c9e3ef
feat(ring_theory/adjoin_root): Dimension of adjoin_root (#4830)
Adds `adjoin_root.degree_lt_linear_equiv`, the restriction of `adjoin_root.mk f`
to the polynomials of degree less than `f`, viewed as a isomorphism between
vector spaces over `K` and uses it to prove that `adjoin_root f` has dimension
`f.nat_degree`. Also renames `adjoin_root.alg_hom` to `adjoin_root.lift_hom`.

2020-11-10 20:04:41 19bcf65
chore(data/set/basic): Simp `(⊤ : set α)` to `set.univ` (#4963)

2020-11-10 11:25:41 d3fff8a
feat(data/fin): define `fin.insert_nth` (#4947)
Also rename `fin.succ_above_descend` to `fin.succ_above_pred_above`.

2020-11-10 11:25:39 ecbcd38
feat(category_theory/closed): cartesian closed category with zero object is trivial (#4924)

2020-11-10 10:21:55 55a28c1
feat(ring_theory/witt_vector/mul_p): multiplication by p as operation on witt vectors (#4837)
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-11-10 08:10:37 34b7361
feat(algebra/*): Add ring instances to clifford_algebra and exterior_algebra (#4916)
To do this, this removes the `irreducible` attributes.
These attributes were present to try and "insulate" the quotient / generator based definitions, and force downstream proofs to use the universal property.
Unfortunately, this irreducibility created massive headaches in typeclass resolution, and the tradeoff for neatness vs usability just isn't worth it.
If someone wants to add back the `irreducible` attributes in future, they now have test-cases that force them not to break the `ring` instances when doing so.

2020-11-10 01:07:17 1ada09b
chore(scripts): update nolints.txt (#4961)
I am happy to remove some nolints for you!

2020-11-09 22:52:35 e8758ae
feat(measure_theory/*): a few lemmas about `(is_)measurable` in `Π i, π i` (#4948)

2020-11-09 13:01:10 09afb04
feat(ring_theory/polynomial/content): Gauss's Lemma (irreducibility criterion) (#4861)
Proves that a primitive polynomial is irreducible iff it is irreducible over the fraction field

2020-11-09 10:48:50 fdbfe75
chore(group_theory/group_action): Rename some group_action lemmas (#4946)
This renames
* These lemmas about `group α`, for consistency with `smul_neg` etc, which are in the global scope:
  * `mul_action.inv_smul_smul` → `inv_smul_smul`
  * `mul_action.smul_inv_smul` → `smul_inv_smul`
  * `mul_action.inv_smul_eq_iff` → `inv_smul_eq_iff`
  * `mul_action.eq_inv_smul_iff` → `eq_inv_smul_iff`
* These lemmas about `group_with_zero α`, for consistency with `smul_inv_smul'` etc, which have trailing `'`s (and were added in #2693, while the `'`-less ones were added later):
  * `inv_smul_eq_iff` → `inv_smul_eq_iff'`
  * `eq_inv_smul_iff` → `eq_inv_smul_iff'`

2020-11-09 05:45:56 22b61b2
feat(topology/subset_properties): separated of discrete (#4952)
As [requested on Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/totally.20disconnected.20of.20discrete/near/216021581).

2020-11-09 03:25:54 e1c333d
chore(data/finset/basic): remove inter_eq_sdiff_sdiff (#4953)
This is a duplicate of sdiff_sdiff_self_left

2020-11-09 00:48:26 40f673e
feat(data/set/intervals/pi): lemmas about intervals in `Π i, π i` (#4951)
Also add missing lemmas `Ixx_mem_nhds` and lemmas `pi_Ixx_mem_nhds`.
For each `pi_Ixx_mem_nhds` I add a non-dependent version
`pi_Ixx_mem_nhds'` because sometimes Lean fails to unify different
instances while trying to apply the dependent version to `ι → ℝ`.

2020-11-08 18:51:05 dcb8576
chore(data/finset/basic): trivial simp lemmas (#4950)

2020-11-08 18:51:03 de2f1b2
feat(data/set/intervals/basic): collection of lemmas of the form I??_of_I?? (#4918)
Some propositions about intervals that I thought may be useful (despite their simplicity).

2020-11-08 16:26:23 14a7c39
chore(data/finset/basic): use `has_coe_t` for coercion of `finset` to `set` (#4917)

2020-11-08 01:11:01 26e4f15
chore(scripts): update nolints.txt (#4944)
I am happy to remove some nolints for you!

2020-11-07 21:27:41 e7d40ef
refactor(*): Move an instance to a more appropriate file (#4939)
In its former location, this instance related neither to the section it was the sole resident of, nor even to the file.

2020-11-07 20:15:40 5fed35b
chore(docs/100): fix typo (#4937)

2020-11-07 20:15:38 c2ab384
feat(category_theory/limits/preserves): convenience defs for things already there (#4933)

2020-11-07 19:06:12 9a0ba08
feat(category_theory/limits/preserves): transfer preserving limits through nat iso (#4932)
- Move two defs higher in the file
- Shorten some proofs using newer lemmas
- Show that we can transfer preservation of limits through natural isomorphism in the functor.

2020-11-07 19:06:10 c494db5
feat(category_theory/limits/shapes/equalizers): equalizer comparison map (#4927)

2020-11-07 18:00:08 11368e1
feat(category_theory/limits/preserves): transfer reflecting limits through nat iso (#4934)

2020-11-07 08:45:59 655b617
feat(category_theory/limits/preserves/shapes/products): preserve products (#4857)
A smaller part of #4716, for just products.
This also renames the file `preserves/shapes.lean` to `preserves/shapes/products.lean`, since I want a similar API for other special shapes and it'd get too big otherwise. 
Of the declarations which were already present: `preserves_products_iso`, `preserves_products_iso_hom_π`, `map_lift_comp_preserves_products_iso_hom`, the first is still there but with weaker assumptions, and the other two are now provable by simp (under weaker assumptions again).

2020-11-07 01:11:14 c4e8d74
chore(scripts): update nolints.txt (#4926)
I am happy to remove some nolints for you!

2020-11-06 20:34:51 8ba0dde
chore(data/polynomial/monic): speedup next_coeff_mul (#4920)

2020-11-06 20:34:49 e0cf0d3
fix(meta/expr): adjust is_likely_generated_binder_name to lean#490 (#4915)
Lean PR 490 changed Lean's strategy for generating binder names. This PR adapts
`name.is_likely_generated_binder_name`, which checks whether a binder name was
likely generated by Lean (rather than given by the user).

2020-11-06 19:17:20 b6b41c1
feat(category_theory/limits/creates): composition creates limits (#4922)

2020-11-06 19:17:18 4f673bd
feat(category_theory/limits/preserves): instances for composition preserving limits (#4921)
A couple of quick instances. I'm pretty sure these instances don't cause clashes since they're for subsingleton classes, and they shouldn't cause loops since they're just other versions of instances already there.

2020-11-06 16:08:51 bddc5c9
feat(category_theory/limits): equivalence creates colimits (#4923)
Dualises and tidy proofs already there

2020-11-06 14:57:51 91f8e68
feat(src/ring_theory/polynomial/cyclotomic): cyclotomic polynomials (#4914)
I have added some basic results about cyclotomic polynomials. I defined them as the polynomial, with integer coefficients, that lifts the complex polynomial ∏ μ in primitive_roots n ℂ, (X - C μ). I proved that the degree of cyclotomic n is totient n and the product formula for X ^ n - 1. I plan to prove the irreducibility in the near future.
This was in [4869](https://github.com/leanprover-community/mathlib/pull/4869) before I splitted that PR. Compared to it, I added the definition of `cyclotomic n R` for any ring `R` (still using the polynomial with coefficients in `ℤ`) and some easy lemmas, especially `cyclotomic_of_ring_hom`, `cyclotomic'_eq_X_pow_sub_one_div` `cyclotomic_eq_X_pow_sub_one_div`, and `cycl_eq_cycl'`.

2020-11-06 10:17:40 747aaae
chore(algebra/lie/basic): Add some missing simp lemmas about A →ₗ⁅R⁆ B (#4912)
These are mostly inspired by lemmas in linear_map. All the proofs are either `rfl` or copied from a proof for `linear_map`.

2020-11-06 01:10:55 fd3212c
chore(scripts): update nolints.txt (#4919)
I am happy to remove some nolints for you!

2020-11-05 18:57:18 a12d677
feat(ring_theory): define a `power_basis` structure (#4905)
This PR defines a structure `power_basis`. If `S` is an `R`-algebra, `pb : power_basis R S` states that `S` (as `R`-module) has basis `1`, `pb.gen`, ..., `pb.gen ^ (pb.dim - 1)`. Since there are multiple possible choices, I decided to not make it a typeclass.
Three constructors for `power_basis` are included: `algebra.adjoin`, `intermediate_field.adjoin` and `adjoin_root`. Each of these is of the form `power_basis K _` with `K` a field, at least until `minimal_polynomial` gets better support for rings.

2020-11-05 17:06:55 246df99
feat(category_theory/limits): Any small complete category is a preorder (#4907)
Show that any small complete category has subsingleton homsets.
Not sure if this is useful for anything - maybe it shouldn't be an instance

2020-11-05 17:06:53 4024597
feat(category_theory/limits/presheaf): left adjoint if preserves colimits (#4896)

2020-11-05 17:06:51 6a1ce57
chore(algebra/module/linear_map): Derive linear_map from mul_action_hom (#4888)
Note that this required some stuff about polynomials to move to cut import cycles.

2020-11-05 15:43:26 2f07ff2
chore(topology/metric_space): more `norm_cast` lemmas, golf proofs (#4911)

2020-11-05 01:07:58 834d491
chore(scripts): update nolints.txt (#4910)
I am happy to remove some nolints for you!

2020-11-04 21:59:56 189063b
chore(data/W): rename `W` to `W_type` (#4909)
Having a single character identifier in the root namespace is inconvenient.
closes leanprover-community/doc-gen#83

2020-11-04 18:37:41 5a61ef1
feat(ring_theory/witt_vector/teichmuller): Teichmuller representatives (#4690)
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-11-04 16:04:42 211b0c0
feat(logic/basic): forall2_congr lemmas (#4904)
Some helpful lemmas for working with quantifiers, just other versions of what's already there.

2020-11-04 16:04:40 0081a5a
feat(ring_theory/algebraic): if `L / K` is algebraic, then the subalgebras are fields (#4903)

2020-11-04 14:06:15 e303a7d
feat(linear_algebra/tensor_product): tensoring linear maps with modules (#4771)

2020-11-04 08:09:46 6f72c22
chore(data/finset): add a few lemmas (#4901)

2020-11-04 08:09:42 0877077
chore(analysis/calculus/times_cont_diff): a few missing lemmas (#4900)
* add `times_cont_diff_within_at_iff_forall_nat_le` and `times_cont_diff_on_iff_forall_nat_le`;
* add `times_cont_diff_on_all_iff_nat` and `times_cont_diff_all_iff_nat`;
* rename `times_cont_diff_at.differentiable` to `times_cont_diff_at.differentiable_at`;
* add `times_cont_diff.div_const`;
* add `times_cont_diff_succ_iff_deriv`
* move some `of_le` lemmas up to support minor golfing of proofs.

2020-11-04 08:09:40 beb6831
feat(analysis/calculus/times_cont_diff): add `restrict_scalars` (#4899)
Add `restrict_scalars` lemmas to `has_ftaylor_series_up_to_on`,
`times_cont_diff_within_at`, `times_cont_diff_on`,
`times_cont_diff_at`, and `times_cont_diff`.

2020-11-04 08:09:38 b7991c0
feat(category_theory/limits/cones): map_cone and postcompose lemmas (#4894)

2020-11-04 08:09:36 7d6f37d
feat(category_theory/closed/cartesian): product preserves colimits (#4893)

2020-11-04 08:09:35 e1d60fd
feat(data/equiv): exists unique congr (#4890)

2020-11-04 08:09:31 d88042c
feat(order/filter/at_top_bot): lemmas about `map/comap` of `at_top`/`at_bot` (#4878)
* Redefine `at_top`/`at_bot` using `Ici`/`Iic`.
* Add lemmas about `map`/`comap` of `at_top`/`at_bot` under `coe : s → α`, where `s` is one of `Ici a`, `Iic a`, `Ioi a`, `Iio a`.

2020-11-04 05:43:18 7ab3ca8
feat(data/quaternion): define quaternions and prove some basic properties (#2339)

2020-11-04 01:36:53 16e3871
chore(scripts): update nolints.txt (#4898)
I am happy to remove some nolints for you!

2020-11-04 00:20:10 23a2767
feat(category_theory/yoneda): type level yoneda equivalence (#4889)
Broken off from #4608.

2020-11-03 21:30:18 505097f
feat(order): countable categoricity of dense linear orders (#2860)
We construct an order isomorphism between any two countable, nonempty, dense linear orders without endpoints, using the back-and-forth method.

2020-11-03 20:37:43 712a0b7
chore(algebra/lie): adjoint rep of lie algebra uses lowercase `ad` (#4891)
The uppercase is for Lie groups

2020-11-03 17:56:57 e88a5bb
feat(*): assorted prereqs for cyclotomic polynomials (#4887)
This is hopefully my last preparatory PR for cyclotomic polynomials. It was in [4869](https://github.com/leanprover-community/mathlib/pull/4869) .

2020-11-03 17:56:54 b37d4a3
feat(category_theory/limits/types): ext iff lemma (#4883)
A little lemma which sometimes makes it easier to work with limits in type.

2020-11-03 17:56:52 6bed7d4
fix(tactic/interactive): issue where long term tooltips break layout (#4882)
For issue description see https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/widget.20v.20long.20term.20names
Basically the problem is that if the little 'argument pills' in the tooltip are too long, then there is a fight between the expression linebreaking algorithm and the pill linebreaking algorithm and something gets messed up.
A first attempt to fix this is to use flexbox for laying out the pills.
Still some issues with expressions linebreaking weirdly to sort out before this should be pulled.
Need to find a mwe that I can put in a file without a huge dependency tree.

2020-11-03 17:56:50 4f8c490
feat(tactic/mk_iff_of_inductive_prop): mk_iff attribute (#4863)
This attribute should make `mk_iff_of_inductive_prop` easier to use.

2020-11-03 15:50:10 918e28c
feat(category_theory/limits/types): explicit description of equalizers in Type (#4880)
Cf https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/concrete.20limits.20in.20Type.
Adds equivalent conditions for a fork in Type to be a equalizer, and a proof that the subtype is an equalizer.
(cc: @adamtopaz @kbuzzard)

2020-11-03 15:50:08 34c3668
chore(data/set/intervals/ord_connected): make it more useful as a typeclass (#4879)
* Add `protected lemma set.Icc_subset` that looks for
  `ord_connected s` instance.
* Add `instance` versions to more lemmas.
* Add `ord_connected_pi`.

2020-11-03 15:50:06 9851a88
feat(*/multilinear): define `(continuous_)multilinear_map.restrict_scalars` (#4872)
I'm going to use these definitions to prove
`times_cont_diff_at.restrict_scalars` etc.

2020-11-03 15:50:04 63d109f
chore(category_theory/limits): Use `lim_map` over `lim.map` (#4856)
Modify the simp-normal form for `lim.map` to be `lim_map` instead, and express lemmas in terms of `lim_map` instead, as well as use it in special shapes so that the assumptions can be weakened.

2020-11-03 15:50:02 b26fc59
feat(category_theory/limits/shapes/products): pi comparison morphism (#4855)

2020-11-03 14:17:25 5275628
feat(algebra/operations): add three lemmas (#4864)
Add lemmas `one_le_inv`, `self_le_self_inv` and `self_inv_le_one`

2020-11-03 09:26:45 c2b6220
feat(linear_algebra/matrix): `det (reindex e e A) = det A` (#4875)
This PR includes four flavours of this lemma: `det_reindex_self'` is the `simp` lemma that doesn't include the actual term `reindex` as a subexpression (because that would be already `simp`ed away by `reindex_apply`). `det_reindex_self`, `det_reindex_linear_equiv_self` and `det_reindex_alg_equiv` include their respective function in the lemma statement.

2020-11-03 01:06:41 57ee216
chore(scripts): update nolints.txt (#4884)
I am happy to remove some nolints for you!

2020-11-02 22:24:06 0e4f8f4
chore(scripts): typo in yaml_check (#4881)

2020-11-02 22:24:05 dae87bc
chore(data/finsupp/basic): Remove finsupp.leval which duplicates finsupp.lapply (#4876)

2020-11-02 20:27:42 5334f48
chore(data/fintype/card): add a few lemmas (#4877)
Prove a few versions of `(∏ i in s, f i) * (∏ i in sᶜ, f i) = ∏ i, f i`

2020-11-02 18:45:02 13a104d
chore({data,linear_algebra}/dfinsupp): Move linear_algebra stuff to its own file (#4873)
This makes the layout of files about `dfinsupp` resemble those of `finsupp` a little better.
This also:
* Renames type arguments to match the names of those in finsupp
* Adjusts argument explicitness to match those in finsupp
* Adds `dfinsupp.lapply` to match `finsupp.lapply`

2020-11-02 17:17:23 6587e84
feat(algebra/algebra/subalgebra): subalgebras, when seen as submodules, are idempotent (#4854)

2020-11-02 14:44:02 0aa6aed
chore(order/basic): move `strict_mono_coe`to `subtype` NS (#4870)
Also add `subtype.mono_coe`

2020-11-02 04:55:03 309df10
refactor(data/list/basic,...): more explicit args (#4866)
This makes the `p` in most lemmas involving the following functions explicit, following the usual explicitness conventions:
- `list.filter`,
- `list.countp`,
- `list.take_while`,
- `multiset.filter`,
- `multiset.countp`,
- `finset.filter`

2020-11-02 04:55:01 556079b
feat(ring_theory/polynomial/content): monic polynomials are primitive (#4862)
Adds the lemma `monic.is_primitive`.

2020-11-02 02:10:46 ecdc319
fix(tactic/simpa): reflect more simp errors (#4865)
fixes #2061

2020-11-02 01:12:55 7c8868d
chore(scripts): update nolints.txt (#4868)
I am happy to remove some nolints for you!

2020-11-01 17:55:51 4aa087a
doc(*): work around markdown2 bug for now (#4842)

2020-11-01 01:07:16 7a624b8
chore(scripts): update nolints.txt (#4860)
I am happy to remove some nolints for you!

2020-10-31 22:44:12 6f7c539
docs(order/complete_lattice): make two docstrings more detailed (#4859)
Following [discussion](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Constructing.20a.20complete.20lattice), clarify information about how to construct a complete lattice while preserving good definitional equalities.

2020-10-31 20:22:31 51cbb83
refactor(tactic/norm_num): move norm_num extensions (#4822)
#4820 adds the long awaited ability for `norm_num` to be extended in other files. There are two norm_num extensions currently in mathlib: `norm_digits`, which was previously exposed as a standalone tactic, and `eval_prime`, which was a part of `norm_num` and so caused `tactic.norm_num` to depend on `data.nat.prime`. This PR turns both of these into norm_num extensions, and changes the dependencies so that `data.nat.prime` can import `norm_num` rather than the other way around (which required splitting `pnat` primality and gcd facts to their own file).

2020-10-31 17:41:26 be161d1
feat(category_theory/sites): functor inclusion constructions (#4845)

2020-10-31 17:41:24 d91c878
chore(group_theory/group_action): introduce `smul_comm_class` (#4770)

2020-10-31 15:07:49 9a03bdf
chore(algebra/ordered_group): use implicit args, add `add_eq_coe` (#4853)
* Use implicit arguments in various `iff` lemmas about `with_top`.
* Add `add_eq_coe`.
* Rewrite `with_top.ordered_add_comm_monoid` moving `begin .. end` blocks inside the structure.
This way we don't depend on the fact that `refine` doesn't introduce any `id`s and it's easier to see right away which block proves which statement.

2020-10-31 13:30:44 e14c378
refactor(order/filter): move some proofs to `bases` (#3478)
Move some proofs to `order/filter/bases` and add `filter.has_basis` versions.
Non-bc API changes:
* `filter.inf_ne_bot_iff`; change `∀ {U V}, U ∈ f → V ∈ g → ...` to `∀ ⦃U⦄, U ∈ f → ∀ ⦃V⦄, V ∈ g → ...`
  so that `simp` lemmas about `∀ U ∈ f` can further simplify the result;
* `filter.inf_eq_bot_iff`: similarly, change `∃ U V, ...` to `∃ (U ∈ f) (V ∈ g), ...`
* `cluster_pt_iff`: similarly, change `∀ {U V : set α}, U ∈ 𝓝 x → V ∈ F → ...` to
  `∀ ⦃U : set α⦄ (hU : U ∈ 𝓝 x) ⦃V⦄ (hV : V ∈ F), ...`

2020-10-31 08:44:02 f9c8abe
chore(data/finset/basic): a few lemmas about `finset.piecewise` (#4852)

2020-10-31 08:44:00 7756265
chore(linear_algebra/affine_space/ordered): compare endpoints to midpoint (#4851)

2020-10-31 08:43:59 1f61621
feat(linear_algebra/affine_space/affine_map): add `affine_map.proj` (#4850)

2020-10-31 08:43:57 6a44930
refactor(data/pnat): move data.pnat.prime (#4839)
Remove the dependency `data.pnat.basic -> data.nat.prime`. Needed for #4822.

2020-10-31 08:43:55 3b2c97f
feat(data/dfinsupp): Port `finsupp.lsum` and lemmas about `lift_add_hom` (#4833)
This then removes the proofs of any `direct_sum` lemmas which become equivalent to the `lift_add_hom` lemmas

2020-10-31 08:43:53 17697a6
feat(data/dfinsupp): Add dfinsupp.single_eq_single_iff, and subtype.heq_iff_coe_eq (#4810)
This ought to make working with dfinsupps over subtypes easier

2020-10-31 06:18:28 67c2b5a
feat(analysis/normed_space/add_torsor): distance to midpoint (#4849)

2020-10-31 06:18:25 1521da6
feat(order/conditionally_complete_lattice): nested intervals lemma (#4848)
* Add a few versions of the nested intervals lemma.
* Add `pi`-instance for `conditionally_complete_lattice`.

2020-10-31 06:18:24 f5fd218
feat(algebra/module/ordered): add pi instance (#4847)

2020-10-31 06:18:21 6fc3517
feat(category_theory/sites): generate lemmas (#4840)
A couple of simple lemmas about the sieve generated by certain presieves.

2020-10-31 06:18:19 517f0b5
feat(ring_theory/polynomial/basic): prerequisites for galois_definition (#4829)

2020-10-31 06:18:16 0f39d7a
feat(data/prod): comp_map (#4826)

2020-10-31 04:53:40 2283cf0
chore(order/filter/bases): golf a proof (#4834)
* rename `filter.has_basis.forall_nonempty_iff_ne_bot` to
  `filter.has_basis.ne_bot_iff`, swap LHS with RHS;
* add `filter.has_basis.eq_bot_iff`;
* golf the proof of `filter.has_basis.ne_bot` using `filter.has_basis.forall_iff`.

2020-10-31 02:07:09 94fa905
feat(analysis/calculus/times_cont_diff): differentiability of field inverse (#4795)

2020-10-31 00:58:01 d5650a7
chore(scripts): update nolints.txt (#4844)
I am happy to remove some nolints for you!

2020-10-30 18:58:08 cc7f06b
feat(data/polynomial/lifts): polynomials that lift (#4796)
Given semirings `R` and `S` with a morphism `f : R →+* S`, a polynomial with coefficients in `S` lifts if there exist `q : polynomial R` such that `map f p = q`. I proved some basic results about polynomials that lifts, for example concerning the sum etc.
Almost all the proof are trivial (and essentially identical), fell free to comment just the first ones, I will do the changes in all the relevant lemmas.
The proofs of `lifts_iff_lifts_deg` (a polynomial that lifts can be lifted to a polynomial of the same degree) and of `lifts_iff_lifts_deg_monic` (the same for monic polynomials) are quite painful, but this are the shortest proofs I found... I think that at least these two results deserve to be in mathlib (I'm using them to prove that the cyclotomic polynomial lift to `\Z`).

2020-10-30 14:20:39 bfadf05
feat(algebra, logic): Pi instances for nontrivial and monoid_with_zero (#4766)

2020-10-30 11:09:12 58f8817
feat(number_theory/fermat4): The n=4 case of fermat (#4720)
Fermat's last theorem for n=4.

2020-10-30 11:09:05 d28e3d1
feat(ring_theory/witt_vector/is_poly): supporting ghost calculations (#4691)
Most operations on Witt vectors can be described/defined
by evaluating integral polynomials on the coefficients of Witt vectors.
One can prove identities between combinations of such operations
by applying the non-injective ghost map,
and continuing to prove the resulting identity of ghost components.
Such a calculation is called a ghost calculation.
This file provides the theoretical justification for why
applying the non-injective ghost map is a legal move,
and it provides tactics that aid in applying this step
to the point that it is almost transparent.
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-10-30 08:20:23 3aac028
feat(field_theory/intermediate_field): equalities from inclusions and dimension bounds (#4828)

2020-10-30 08:20:21 6ec7aec
feat(data/polynomial): ext lemmas for homomorphisms from `polynomial R` (#4823)

2020-10-30 08:20:19 03a477c
feat(data/dfinsupp): Port over the `finsupp.lift_add_hom` API (#4821)
These lemmas are mostly copied with minimal translation from `finsupp`.
A few proofs are taken from `direct_sum`.
The API of `direct_sum` is deliberately unchanged in this PR.

2020-10-30 08:20:18 5ae192e
feat(data/equiv, algebra/*): Add simps projections to many equivs and homs (#4818)
This doesn't actually change any existing lemmas to use these projections.

2020-10-30 08:20:16 d46d0c2
chore(topology/basic): the set of cluster pts of a filter is a closed set (#4815)

2020-10-30 08:20:14 072cfc5
chore(data/dfinsupp): Provide dfinsupp with a semimodule instance (#4801)
finsupp already has one, it seems pointless to hide the one for dfinsupp behind a def.

2020-10-30 08:20:09 63c0dac
refactor(module/ordered): make ordered_semimodule a mixin (#4719)
Per @urkud's suggestion at #4683. This should avoid having to introduce a separate `ordered_algebra` class.

2020-10-30 05:28:30 4003b3e
feat(*): a, switch to lean 3.23 (#4802)
There are three changes affecting mathlib:
1. `ℕ → ℕ` is now elaborated as `∀ ᾰ : ℕ, ℕ`.  This means that `intro` introduces assumptions with names like `ᾰ_1`, etc.  These names should not be used, and instead provided explicitly to `intro` (and other tactics).
2. The heuristic to determine the definition name for `instance : foo bar` has been changed.
3. `by_contra` now uses classical logic, and defaults to the hypothesis name `h`.
4. adds a few new simp-lemmas in `data/typevec`

2020-10-30 02:02:16 581b2af
feat(analysis/asymptotics): Equivalent definitions for `is_[oO] u v l` looking like `u = φ * v` for some `φ` (#4646)
The advantage of these statements over `u/v` tendsto 0 / is bounded is they do not require any nonvanishing assumptions about `v`

2020-10-30 01:08:49 f510728
chore(scripts): update nolints.txt (#4825)
I am happy to remove some nolints for you!

2020-10-29 22:37:58 fc307f9
feat(tactic/norm_num): make norm_num extensible (#4820)
This allows you to extend `norm_num` by defining additional tactics of type `expr → tactic (expr × expr)` with the `@[norm_num]` attribute. It still requires some tactic proficiency to use correctly, but it at least allows us to move all the possible norm_num extensions to their own files instead of the current dependency cycle problem.
This could potentially become a performance problem if too many things are marked `@[norm_num]`, as they are simply looked through in linear order. It could be improved by having extensions register a finite set of constants that they wish to evaluate, and dispatch to the right extension tactic using a `name_map`.
```lean
def foo : ℕ := 1
@[norm_num] meta def eval_foo : expr → tactic (expr × expr)
| `(foo) := pure (`(1:ℕ), `(eq.refl 1))
| _ := tactic.failed
example : foo = 1 := by norm_num
```

2020-10-29 19:28:13 2c7efdf
feat(category_theory/sites): Grothendieck topology on a space (#4819)
The grothendieck topology associated to a topological space.
I also changed a definition I meant to change in #4816, and updated the TODOs of some docstrings; I can split these into separate PRs if needed but I think all the changes are quite minor

2020-10-29 19:28:10 92af9fa
feat(category_theory/limits/pullbacks): pullback self is id iff mono (#4813)

2020-10-29 19:28:07 78811e0
feat(ring_theory/unique_factorization_domain): `unique_factorization_monoid` structure on polynomials over ufd (#4774)
Provides the `unique_factorization_monoid` structure on polynomials over a UFD

2020-10-29 19:28:03 856381c
chore(data/equiv/basic): arrow_congr preserves properties of binary operators (#4759)

2020-10-29 19:28:00 ccc98d0
refactor(*): `midpoint`, `point_reflection`, and Mazur-Ulam in affine spaces (#4752)
* redefine `midpoint` for points in an affine space;
* redefine `point_reflection` for affine spaces (as `equiv`,
  `affine_equiv`, and `isometric`);
* define `const_vsub` as `equiv`, `affine_equiv`, and `isometric`;
* define `affine_map.of_map_midpoint`;
* fully migrate the proof of Mazur-Ulam theorem to affine spaces;

2020-10-29 19:27:56 4d19191
feat(algebra/monoid_algebra): Add an equivalence between `add_monoid_algebra` and `monoid_algebra` in terms of `multiplicative` (#4402)

2020-10-29 18:26:22 d709ed6
feat(algebra/direct_sum*): relax a lot of constraints to add_comm_monoid (#3537)

2020-10-29 15:42:46 f83468d
feat(category_theory/functor_category): monos in the functor category (#4811)

2020-10-29 14:18:55 7d7e850
chore(category_theory/sites): nicer names (#4816)
Changes the name `arrows_with_codomain` to `presieve` which is more suggestive and shorter, and changes `singleton_arrow` to `singleton`, since it's in the presieve namespace anyway.

2020-10-29 13:24:15 8b858d0
feat(data/dfinsupp): Relax requirements of semimodule conversion to add_comm_monoid (#3490)
The extra `_`s required to make this still build are unfortunate, but hopefully someone else can work out how to remove them in a later PR.

2020-10-29 09:49:53 d510a63
feat(linear_algebra/finite_dimensional): finite dimensional algebra_hom of fields is bijective (#4793)
Changes to finite_dimensional.lean from #4786

2020-10-29 07:30:22 1baf701
feat(category_theory/Fintype): Adds the category of finite types and its "standard" skeleton. (#4809)
This PR adds the category `Fintype` of finite types, as well as its "standard" skeleton whose objects are `fin n`.

2020-10-29 01:05:47 d9c8215
chore(scripts): update nolints.txt (#4814)
I am happy to remove some nolints for you!

2020-10-28 20:49:21 69d41da
feat(tactic/dependencies): add tactics to compute (reverse) dependencies (#4602)
These are the beginnings of an API about dependencies between expressions. For
now, we only deal with dependencies and reverse dependencies of hypotheses,
which are easy to compute.
Breaking change: `tactic.revert_deps` is renamed to
`tactic.revert_reverse_dependencies_of_hyp` for consistency. Its implementation
is completely new, but should be equivalent to the old one except for the order
in which hypotheses are reverted. (But the old implementation made no particular
guarantees about this order anyway.)

2020-10-28 18:09:43 d75da1a
feat(topology/algebra/group_with_zero): introduce `has_continuous_inv'` (#4804)
Move lemmas about continuity of division from `normed_field`, add a few new lemmas, and introduce a new typeclass. Also use it for `nnreal`s.

2020-10-28 18:09:41 80ffad0
chore(data/dfinsupp): Make some lemma arguments explicit (#4803)
This file is long and this is not exhaustive, but this hits most of the simpler ones

2020-10-28 18:09:39 7a37dd4
feat(algebra/monoid_algebra): Bundle lift_nc_mul and lift_nc_one into a ring_hom and alg_hom (#4789)

2020-10-28 18:09:37 28cc74f
feat(ring_theory/unique_factorization_domain): a `normalization_monoid` structure for ufms (#4772)
Provides a default `normalization_monoid` structure on a `unique_factorization_monoid`

2020-10-28 18:09:35 25df267
feat(category_theory/limits/presheaf): free cocompletion (#4740)
Fill in the missing part of #4401, showing that the yoneda extension is unique. Also adds some basic API around #4401.

2020-10-28 18:09:33 dfa85b5
feat(archive/imo): formalize IMO 1981 problem Q3 (#4599)
Determine the maximum value of `m ^ 2 + n ^ 2`, where `m` and `n` are integers in
`{1, 2, ..., 1981}` and `(n ^ 2 - m * n - m ^ 2) ^ 2 = 1`.

2020-10-28 15:21:10 40da087
feat(equiv/basic): use @[simps] (#4652)
Use the `@[simps]` attribute to automatically generate equation lemmas for equivalences.
The names `foo_apply` and `foo_symm_apply` are used for the projection lemmas of `foo`.

2020-10-28 10:34:25 e8f8de6
feat(ring_theory/valuation): ring of integers (#4729)

2020-10-28 09:18:54 216cbc4
feat(analysis/special_functions/trigonometric): simp attributes for trig values (#4806)
simp attributes for the trig values that didn't already have them

2020-10-28 07:49:32 6dfa952
refactor(order/filter): make `filter.has_mem semireducible (#4807)
This way `simp only []` does not simplify `s ∈ f` to `s ∈ f.sets`.
* Add protected simp lemmas `filter.mem_mk` and `filter.mem_sets`.
* Use implicit argument in `filter.mem_generate_iff`.
* Use `∃ t, s ∈ ...` instead of `s ∈ ⋃ t, ...` in
  `filter.mem_infi_finite` and `filter.mem_infi_finite'`.
* Use an implicit argument in `(non/ne_)empty_of_mem_ultrafilter`.

2020-10-28 06:06:38 7807f3d
chore(linear_algebra/affine_space/basic): split (#4767)
* Split `linear_algebra/affine_space/basic` into two files: `affine_map` and `affine_subspace`.
* Move notation `affine_space` to the bottom of `algebra/add_torsor`.

2020-10-28 01:11:30 4d1da54
chore(scripts): update nolints.txt (#4808)
I am happy to remove some nolints for you!

2020-10-27 22:22:51 c737996
feat(algebra/algebra/subalgebra): algebra equalizer (#4791)
Changes to subalgebra.lean from #4786

2020-10-27 22:22:50 2a7e215
feat(data/vector2): scanl and associated lemmas (#4613)

2020-10-27 19:53:05 51e12c0
chore(ring_theory/fractional_ideal): change exists_eq_span_singleton_mul (#4800)
Replace assumption `(a : K)` with `(a : R)`
Add result `a \ne 0` 
Change `span_singleton` a to `span singleton (g.to_map a)^-1`
.. in the statement of lemma `exists_eq_span_singleton_mul`
Adapt dependences

2020-10-27 19:53:03 97065db
refactor(data/polynomial): use `linear_map` for `monomial`, review `degree` (#4784)

2020-10-27 19:53:01 a1ab984
feat(data/finset/lattice,order/basic): add lemmas in order_dual, prove dual order exchanges max' and min' (#4715)
Introduce functionality to work with order duals and monotone decreasing maps.  The pretty part of the code is by Johan Commelin, the ugly part is my own addition!

2020-10-27 17:20:51 1efbf13
feat(data/vector2): add lemma map_id (#4799)
`map_id` proves that a vector is unchanged when mapped under the `id` function. This is similar to `list.map_id`. This lemma was marked with the `simp` attribute to make it available to the simplifier.

2020-10-27 17:20:47 40e514c
feat(algebra/monoid_algebra): formula for `lift_nc f g (c • φ)` (#4782)

2020-10-27 17:20:45 99acfda
feat(category_theory/sites): pretopology (#4648)
Adds pretopologies.

2020-10-27 14:39:13 a027a37
feat(tactic/simps): user-provided names for projections (#4663)
Adds the functionality to specify custom projection names, like this:
```lean
initialize_simps_projections equiv (to_fun → apply, inv_fun → symm_apply)
```
These names will always be used and cannot (yet) be manually overridden. 
Implement this for embeddings: `initialize_simps_projections embedding (to_fun → apply)`.
Rename `fixed_points.to_alg_hom_apply -> fixed_points.to_alg_hom_apply_apply`, since `@[simps]` now generates the name `to_alg_hom_apply` instead of `to_alg_hom_to_fun`.

2020-10-27 11:55:33 e0b153b
refactor(*): drop `decidable_linear_order`, switch to Lean 3.22.0 (#4762)
The main non-bc change in Lean 3.22.0 is leanprover-community/lean#484 which merges `linear_order`
with `decidable_linear_order`. This is the `mathlib` part of this PR.
## List of API changes
* All `*linear_order*` typeclasses now imply decidability of `(≤)`, `(<)`, and `(=)`.
* Drop `classical.DLO`.
* Drop `discrete_linear_ordered_field`, use `linear_ordered_field` instead.
* Drop `decidable_linear_ordered_semiring`, use `linear_ordered_semiring` instead.
* Drop `decidable_linear_ordered_comm_ring`, use `linear_ordered_comm_ring` instead;
* Rename `decidable_linear_ordered_cancel_add_comm_monoid` to `linear_ordered_cancel_add_comm_monoid`.
* Rename `decidable_linear_ordered_add_comm_group` to `linear_ordered_add_comm_group`.
* Modify some lemmas to use weaker typeclass assumptions.
* Add more lemmas about `ordering.compares`, including `linear_order_of_compares` which
  constructs a `linear_order` instance from `cmp` function.

2020-10-27 01:56:15 69db7a3
chore(scripts): update nolints.txt (#4797)
I am happy to remove some nolints for you!

2020-10-26 23:04:21 6e2980c
chore(*): reflow some long lines (#4794)

2020-10-26 23:04:19 8746f08
feat(data/equiv/basic): equiv.set.powerset (#4790)

2020-10-26 21:30:45 c76c3c5
feat(degree/basic.lean): degree_lt_iff_coeff_zero (#4792)
Changes to degree/basic.lean from #4786

2020-10-26 18:39:32 95b3add
fix(tactic/derive_fintype): add support for props (#4777)
This adds support for propositional arguments in inductive constructors.
It was previously not handled, and while it *almost* works without
change, we have to use `Sigma' (a:A) (b:B) (c:C), unit` to tuple up the
arguments instead of `Sigma' (a:A) (b:B), C` because it would cause problems
in the unary case where there is only one propositional field.

2020-10-26 18:39:30 9428598
feat(tactic/rcases): add `rintro (x y : t)` support (#4722)
As requested on Zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/rintros/near/213999254

2020-10-26 18:39:29 877a20e
feat(ring_theory/finiteness): some finiteness notions in commutative algebra (#4634)

2020-10-26 18:39:27 61c095f
chore(algebra/module,linear_algebra): split off a `linear_map` file (#4476)
In order to make `algebra/module/basic.lean` and `linear_algebra/basic.lean` a bit more manageable, move the basic facts about `linear_map`s and `linear_equiv`s into a separate file. `linear_algebra/basic.lean` still needs to be split a bit more.

2020-10-26 16:13:21 83edb50
feat(simps): improve error messages (#4653)
If a custom projection has a different type than the expected projection, then it will show a more specific error message.
Also reflow most long lines
Also add some tests

2020-10-26 14:18:36 ba5594a
feat(data/dfinsupp): Add missing to_additive lemmas (#4788)

2020-10-26 13:22:48 2e90c60
feat(ring_theory/witt_vector/basic): verifying the ring axioms (#4694)
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-10-26 05:21:12 7be82f9
chore(scripts): update nolints.txt (#4785)
I am happy to remove some nolints for you!

2020-10-26 05:21:10 b2b39ed
chore(order/galois_connection): define `with_bot.gi_get_or_else_bot` (#4781)
This Galois insertion can be used to golf proofs about
`polynomial.degree` vs `polynomial.nat_degree`.

2020-10-26 05:21:08 121c9a4
chore(algebra/group/hom): use `coe_comp` in `simp` lemmas (#4780)
This way Lean will simplify `⇑(f.comp g)` even if it is not applied to
an element.

2020-10-26 05:21:06 6e4fe98
chore(data/polynomial/{degree/basic, eval}): Some trivial lemmas about polynomials (#4768)
I have added the lemma `supp_card_le_succ_nat_degree` about the cardinality of the support of a polynomial and removed the useless commutativity assumptio in `map_sum` and `map_neg`.

2020-10-26 04:25:05 4036212
feat(algebra/big_operators/nat_antidiagonal): a few more lemmas (#4783)

2020-10-25 21:53:20 a9d3ce8
feat(analysis/normed_space/add_torsor): continuity of `vadd`/`vsub` (#4751)
Prove that `vadd`/`vsub` are Lipschitz continuous, hence uniform
continuous and continuous.

2020-10-25 18:29:34 e7a4b12
fix(tactic/core): fix infinite loop in emit_code_here (#4746)
Previously `emit_code_here "\n"` would go into an infinite loop because the `command_like` parser consumes nothing, but the string is not yet empty. Now we recurse on the length of the string to ensure termination.

2020-10-25 16:45:20 151f0dd
chore(linear_algebra/tensor_product): missing simp lemmas (#4769)

2020-10-25 16:45:18 69f550c
chore(ring_theory/unique_factorization_domain): fix some lemma names (#4765)
Fixes names of some lemmas that were erroneously renamed with find-and-replace
Changes some constructor names to use dot notation
Names replaced:
`exists_prime_of_factor` -> `exists_prime_factors`
`wf_dvd_monoid_of_exists_prime_of_factor` -> `wf_dvd_monoid.of_exists_prime_factors`
`irreducible_iff_prime_of_exists_prime_of_factor` -> `irreducible_iff_prime_of_exists_prime_factors`
`unique_factorization_monoid_of_exists_prime_of_factor` -> `unique_factorization_monoid.of_exists_prime_factors`
`unique_factorization_monoid_iff_exists_prime_of_factor` -> `unique_factorization_monoid.iff_exists_prime_factors`
`irreducible_iff_prime_of_exists_unique_irreducible_of_factor` -> `irreducible_iff_prime_of_exists_unique_irreducible_factors`
`unique_factorization_monoid.of_exists_unique_irreducible_of_factor` -> `unique_factorization_monoid.of_exists_unique_irreducible_factors`
`no_factors_of_no_prime_of_factor` -> `no_factors_of_no_prime_factors`
`dvd_of_dvd_mul_left_of_no_prime_of_factor` -> `dvd_of_dvd_mul_left_of_no_prime_factors`
`dvd_of_dvd_mul_right_of_no_prime_of_factor` -> `dvd_of_dvd_mul_right_of_no_prime_factors`

2020-10-25 14:56:50 14cff9a
chore(algebra/group/pi): add `pi.has_div` (#4776)
Motivated by #4646

2020-10-24 22:07:59 f056468
chore(analysis/normed_space): add 2 `@[simp]` attrs (#4775)
Add `@[simp]` to `norm_pos_iff` and `norm_le_zero_iff`

2020-10-24 11:48:11 cae77dc
feat(algebra/direct_sum): Fix two todos about generalizing over unique types (#4764)
Also promotes `id` to a `≃+`, and prefers coercion over direct use of `subtype.val`.

2020-10-24 05:36:36 de6a9d4
feat(ring_theory/polynomial/content): `gcd_monoid` instance on polynomials over gcd domain (#4760)
Refactors `ring_theory/polynomial/content` a bit to introduce `prim_part`
Provides a `gcd_monoid` instance on polynomials over a gcd domain

2020-10-24 05:36:34 570c293
feat(data/polynomial/ring_division): Two easy lemmas about polynomials (#4742)
Two easy lemmas from my previous, now splitted, PR.

2020-10-24 05:36:32 b9a94d6
feat(linear_algebra/nonsingular_inverse): add stronger form of Cramer's rule (#4737)
Also renaming `cramer_transpose_eq_adjugate_mul_vec` --> `cramer_eq_adjugate_mul_vec` after the transpose was rendered redundant.

2020-10-24 03:10:11 2987a49
fix(tactic/core): use eval_pexpr in run_parser_cmd (#4761)
Continuation of #4745, see https://github.com/leanprover-community/mathlib/pull/4745#discussion_r510771137

2020-10-24 01:02:28 8255507
feat(data/pnat/basic): Add strong induction on pnat (#4736)
I added strong induction on `pnat`. (This was from a previous PR that I am splitting.)

2020-10-23 22:12:51 c141eed
feat(data/list/basic): Add prod_reverse_noncomm (#4757)

2020-10-23 22:12:50 4ec88db
feat(algebra/direct_sum): Bundle the homomorphisms (#4754)

2020-10-23 22:12:48 aa59039
feat(category_theory): presheaf is colimit of representables (#4401)
Show every presheaf (on a small category) is a colimit of representables, and some related results. 
Suggestions for better names more than welcome.

2020-10-23 20:04:40 5afeb9b
chore(*): a few more type-specific ext lemmas (#4741)
* mark lemmas about homs from `multiplicative nat` and `multiplicative int` as `@[ext]`;
* add a special case lemma about linear maps from the base semiring;
* ext lemmas for ring homs from `(add_)monoid_algebra`;
* ext lemmas for multiplicative homs from `multiplicative (α →₀ M)`;
* make sure that Lean can chain ext lemmas by using hom equalities in lemmas about `finsupp`/`(add_)monoid_algebra`.

2020-10-23 17:42:40 0bbf3e2
fix(deprecated/group): Correct the name of `is_add_group_hom has_neg.neg` (#4755)
Rename `inv.is_add_group_hom` to `neg.is_add_group_hom`.

2020-10-23 13:03:43 5886961
feat(data/{nat,list}/basic): Add some trivial lemmas (#4738)

2020-10-23 10:15:32 b651c6f
feat(tactic/core): add `run_parser` user command (#4745)
Allows for writing things like:
```lean
import tactic.core
run_parser emit_code_here "def foo := 1"
```
Relevant Zulip conversation: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/universes/near/214229509

2020-10-23 10:15:30 fb4aee0
fix(deprecated/*): remove instances (#4735)
Remove all instances constructing structures from `is_*` predicates, like for example:
```lean
instance subset.ring {S : set R} [is_subring S] : ring S :=
...
```
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>

2020-10-23 10:15:28 70b14ce
refactor(*): use is_scalar_tower instead of restrict_scalars (#4733)
- rename `semimodule.restrict_scalars` to `restrict_scalars`
- rename `restrict_scalars` to `subspace.restrict_scalars`
- use `is_scalar_tower` wherever possible
- add warnings to docstrings about `restrict_scalars` to encourage `is_scalar_tower` instead

2020-10-23 10:15:26 82b4843
feat(ring_theory/roots_of_unity): Roots of unity as union of primitive roots (#4644)
I have added some lemmas about roots of unity, especially `root_of_unity_eq_uniun_prim` that says that, if there is a primitive `n`-th root of unity in `R`, then the set of `n`-th roots of unity is equal to the union of `primitive_roots i R` for `i | n`.
I will use this lemma in to develop the theory of cyclotomic polynomials.

2020-10-23 10:15:24 278a14b
feat(analysis/p_series): prove the p-series convergence test (#4360)

2020-10-23 10:15:21 04b5572
feat(ring_theory/witt_vector/defs): type of witt vectors + ring operations (#4332)
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-10-23 07:42:45 9e4ef85
feat(linear_algebra/affine_space): define `affine_equiv.mk'` (#4750)
Similarly to `affine_map.mk'`, this constructor checks that the map
agrees with its linear part only for one base point.

2020-10-23 07:42:43 468c01c
chore(topology/*): add two missing simp coe lemmas (#4748)

2020-10-23 07:42:40 458c833
chore(algebra/group/basic): Mark inv_involutive simp (#4744)
This means expressions like `has_inv.inv ∘ has_inv.inv` can be simplified

2020-10-23 05:47:36 bb52355
feat(linear_algebra/basic): define `linear_equiv.neg` (#4749)
Also weaken requirements for `has_neg (M →ₗ[R] M₂)` from
`[add_comm_group M]` `[add_comm_group M₂]` to `[add_comm_monoid M]`
`[add_comm_group M₂]`.

2020-10-23 05:47:34 dc4ad81
refactor(*): lmul is an algebra hom (#4724)
also, make some arguments implicit, and add simp lemmas

2020-10-23 05:47:32 ff711a3
feat(measure_theory/measure_space): Added lemmas for commuting restrict for outer measures and measures (#4673)
This also adds `of_function_apply` and `Inf_apply` (for `outer_measure`). I had some difficulty getting
these functions to expand (as represented by the length of `Inf_apply`) in a clean way.
I also think `Inf_apply` is instructive in terms of making it clear what the definition of `Inf` is. Once `Inf` is rewritten,
then the large set of operations available for `infi_le` and `le_infi` (and `ennreal.tsum_le_tsum`) can be used.
`measure.restrict_Inf_eq_Inf_restrict` will be helpful in getting more results about the subtraction of measures,
specifically writing down the result of `(a - b)` when `a` is not less than or equal to `b` and `b` is not less than
or equal to `a`.

2020-10-23 04:31:09 f279313
feat(category_theory/yoneda): better simp lemmas for small yoneda (#4743)
Gives nicer (d)simp lemmas for yoneda_sections_small.

2020-10-23 01:10:33 8bd1df5
chore(scripts): update nolints.txt (#4747)
I am happy to remove some nolints for you!

2020-10-22 17:33:36 de12036
chore(data/polynomial): remove monomial_one_eq_X_pow (#4734)
monomial_one_eq_X_pow was a duplicate of X_pow_eq_monomial

2020-10-22 14:57:55 6eb5564
chore(data/equiv/basic): Add a simp lemma perm.coe_mul (#4723)
This mirrors `equiv.coe_trans`

2020-10-22 07:48:25 add5096
chore(*): 3 unrelated small changes (#4732)
* fix universe levels in `equiv.set.compl`: by default Lean uses some
`max` universes both for `α` and `β`, and it backfires when one tries
to apply it.
* add `nat.mul_factorial_pred`;
* add instance `fixed_points.decidable`.
Part of #4731

2020-10-22 07:48:23 aba31c9
feat(algebra/monoid_algebra): define a non-commutative version of `lift` (#4725)
* [X] define `monoid_algebra.lift_c` and `add_monoid_algebra.lift_nc` to be generalizations of `(mv_)polynomial.eval₂` to `(add_)monoid_algebra`s.
* [X] use `to_additive` in many proofs about `add_monoid_algebra`;
* [X] define `finsupp.nontrivial`, use it for `(add_)monoid_algebra.nontrivial`;
* [X] copy more lemmas about `lift` from `monoid_algebra` to `add_monoid_algebra`;
* [X] use `@[ext]` on more powerful type-specific lemmas;
* [x] fix docstrings of `(add_)monoid_algebra.lift₂`;
* [x] fix compile failures.

2020-10-22 07:48:21 fb5ef2b
feat(linear_algebra/nonsingular_inverse): state Cramer's rule explicitly (#4700)
Mostly so that we can add an entry to the Freek 100.

2020-10-22 06:38:42 03f0285
refactor(algebra/add_torsor): define pointwise `-ᵥ` and `+ᵥ` on sets (#4710)
This seems more natural than `vsub_set` to me.

2020-10-22 05:15:46 4c4d47c
feat(algebra/gcd_monoid): noncomputably defines `gcd_monoid` structures from partial information (#4664)
Adds the following 4 noncomputable functions which define `gcd_monoid` instances.
`gcd_monoid_of_gcd` takes as input a `gcd` function and a few of its properties
`gcd_monoid_of_lcm` takes as input a `lcm` function and a few of its properties
`gcd_monoid_of_exists_gcd` takes as input the prop that every two elements have a `gcd`
`gcd_monoid_of_exists_lcm` takes as input the prop that every two elements have an `lcm`

2020-10-22 01:14:08 fca876e
chore(scripts): update nolints.txt (#4730)
I am happy to remove some nolints for you!

2020-10-21 15:31:43 df45002
feat(archive): formalize compiler correctness by McCarthy and Painter (#4702)
Add a formalization of the correctness of a compiler from arithmetic expressions to machine language described by McCarthy and Painter, which is considered the first proof of compiler correctness.

2020-10-21 15:31:40 1b4e769
feat(linear_algebra/affine_space): define `affine_equiv` (#2909)
Define
* [X] `affine_equiv` to be an invertible affine map (e.g., extend both `affine_map` and `equiv`);
* [X] conversion to `linear_equiv`;
* [X] `group` structure on affine automorphisms;
* [X] prove standard lemmas for equivalences (`apply_symm_apply`, `symm_apply_eq` etc).
API changes
* make `G` implicit in `equiv.vadd_const`.

2020-10-21 13:35:00 75316ca
chore(linear_algebra/basic): a few simp lemmas (#4727)
* add `submodule.nonempty`;
* add `@[simp]` to `submodule.map_id`;
* add `submodule.neg_coe`, `protected submodule.map_neg`, and `submodule.span_neg`.

2020-10-21 01:39:35 01c1e6f
chore(scripts): update nolints.txt (#4721)
I am happy to remove some nolints for you!

2020-10-21 01:39:33 3a860cc
fixup(category_theory/sites): add arrow sets that aren't sieves  (#4703)
Broken off from #4648.
- I realised that by creating a type `arrows_with_codomain` I can avoid using `set (over X)` entirely (the bit I was missing was that `derive complete_lattice` works on the new type even though it wasn't inferred on the pi-type), so I changed sieves to use that instead. 
- I added constructors for special arrow sets. The definitions of `singleton_arrow` and `pullback_arrows` look a bit dubious because of the equality and `eq_to_hom` stuff; I don't love that either so if there's a suggestion on how to achieve the same things (in particular stating (1) and (3) from: https://stacks.math.columbia.edu/tag/00VH, as well as a complete lattice structure) I'd be happy to consider.
- I added a coercion so we can write `S f` instead of `S.arrows f` for sieves.

2020-10-21 00:42:57 857cbd5
chore(category_theory/limits/preserves): split up files and remove redundant defs (#4717)
Broken off from #4163 and #4716.
While the diff of this PR is quite big, it actually doesn't do very much: 
- I removed the definitions of `preserves_(co)limits_iso` from `preserves/basic`, since there's already a version in `preserves/shapes` which has lemmas about it. (I didn't keep them in `preserves/basic` since that file is already getting quite big, so I chose to instead put them into the smaller file.
- I split up `preserves/shapes` into two files: `preserves/limits` and `preserves/shapes`. From my other PRs my plan is for `shapes` to contain isomorphisms and constructions for special shapes, eg `fan.mk` and `fork`s, some of which aren't already present, and `limits` to have things for the general case. In this PR I don't change the situation for special shapes (other than simplifying some proofs), other than moving it into a separate file for clarity.

2020-10-20 13:15:11 8489972
feat(data/complex/module): ![1, I] is a basis of C over R (#4713)

2020-10-20 10:23:27 cf551ee
chore(*): review some lemmas about injectivity of coercions (#4711)
API changes:
* rename `linear_map.coe_fn_congr` to `protected
  linear_map.congr_arg`;
* rename `linear_map.lcongr_fun` to `protected linear_map.congr_fun`;
* rename `enorm.coe_fn_injective` to `enorm.injective_coe_fn`, add
  `enorm.coe_inj`;
* rename `equiv.coe_fn_injective` to `equiv.injective_coe_fn`,
  reformulate in terms of `function.injective`;
* add `equiv.coe_inj`;
* add `affine_map.injective_coe_fn`, `protected affine_map.congr_arg`,
  and `protected affine_map.congr_fun`;
* rename `linear_equiv.to_equiv_injective` to
  `linear_equiv.injective_to_equiv`, add `linear_equiv.to_equiv_inj`;
* rename `linear_equiv.eq_of_linear_map_eq` to
  `linear_equiv.injective_to_linear_map`, formulate as `injective
  coe`;
* add `linear_equiv.to_linear_map_inj`;
* rename `outer_measure.coe_fn_injective` to
  `outer_measure.injective_coe_fn`;
* rename `rel_iso.to_equiv_injective` to `rel_iso.injective_to_equiv`;
* rename `rel_iso.coe_fn_injective` to `rel_iso.injective_coe_fn`;
* rename `continuous_linear_map.coe_fn_injective` to
  `injective_coe_fn`.

2020-10-20 10:23:25 5d52ea4
chore(.gitignore): gitignore for emacs temp files (#4699)
Emacs backup files end in `~`, and you don't want them in the repo. Just makes things mildly easier for emacs users if that pattern is in the gitignore.

2020-10-20 08:10:53 8131349
fix(tactic/norm_num): remove one_div from simp set (#4705)
fixes #4701

2020-10-20 08:10:51 617e829
feat(linear_algebra/affine_space/ordered): define `slope` (#4669)
* Review API of `ordered_semimodule`:
  - replace `lt_of_smul_lt_smul_of_nonneg` with `lt_of_smul_lt_smul_of_pos`;
    it's equivalent but is easier to prove;
  - add more lemmas;
  - add a constructor for the special case of an ordered semimodule over
	a linearly ordered field; in this case it suffices to verify only
	`a < b → 0 < c → c • a ≤ c • b`;
  - use the new constructor in `analysis/convex/cone`;
* Define `units.smul_perm_hom`, reroute `mul_action.to_perm` through it;
* Add a few more lemmas unfolding `affine_map.line_map` in special cases;
* Define `slope f a b = (b - a)⁻¹ • (f b -ᵥ f a)` and prove a handful
  of monotonicity properties.

2020-10-20 05:38:10 b46190f
chore(data/finsupp): minor review (#4712)
* add a few lemmas about injectivity of `coe_fn` etc;
* simplify definition of `finsupp.on_finset`;
* replace the proof of `support_on_finset` by `rfl`;
* make `finsupp.mem_support_on_finset` a `simp` lemma.

2020-10-20 05:38:08 288802b
chore(data/polynomial): slightly generalize `map_eq_zero` and `map_ne_zero` (#4708)
We don't need the codomain to be a field.

2020-10-20 05:38:07 21415c8
chore(topology/algebra/ordered): drop section vars, golf 2 proofs (#4706)
* Explicitly specify explicit arguments instead of using section
  variables;
* Add `continuous_min` and `continuous_max`;
* Use them for `tendsto.min` and `tendsto.max`

2020-10-20 05:38:04 0cf8a98
chore(data/set): a few more lemmas about `image2` (#4695)
Also add `@[simp]` to `set.image2_singleton_left` and `set.image2_singleton_rigt`.

2020-10-20 05:38:01 050b5a1
feat(data/real/pi): Leibniz's series for pi (#4228)
Freek No. 26 
<!-- put comments you want to keep out of the PR commit here -->

2020-10-20 03:17:38 cd884eb
feat(measure_theory): finite_spanning_sets_in (#4668)
* We define a new Type-valued structure `finite_spanning_sets_in` which consists of a countable sequence of sets that span the type, have finite measure, and live in a specified collection of sets, 
* `sigma_finite` is redefined in terms of `finite_spanning_sets_in`
* One of the ext lemmas is now conveniently formulated in terms of `finite_spanning_sets_in`
* `finite_spanning_sets_in` is also used to remove a little bit of code duplication in `prod` (which occurred because `sigma_finite` was a `Prop`, and forgot the actual construction)
* Define a predicate `is_countably_spanning` which states that a collection of sets has a countable spanning subset. This is useful for one particular lemma in `prod`.
* Generalize some lemmas about products in the case that the σ-algebras are generated by a collection of sets. This can be used to reason about iterated products.
* Prove `prod_assoc_prod`.
* Cleanup in `measurable_space` and somewhat in `measure_space`.
* Rename `measurable.sum_rec -> measurable.sum_elim` (and give a different but definitionally equal statement)

2020-10-20 01:14:13 9755ae3
chore(scripts): update nolints.txt (#4704)
I am happy to remove some nolints for you!

2020-10-19 22:45:26 accc50e
chore(data/finsupp): `to_additive` on `on_finset_sum` (#4698)

2020-10-19 22:45:23 706b484
chore(data/multiset): add a few lemmas (#4697)

2020-10-19 22:45:21 b707e98
refactor(ring_theory/witt_vector): move lemmas to separate file (#4693)
This new file has almost no module docstring.
This is on purpose, it is a refactor PR.
A follow-up PR will add a module docstring and more definitions.
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-10-19 22:45:19 b300302
feat(algebra/free_algebra): Add a ring instance (#4692)
This also adds a ring instance to `tensor_algebra`.
The approach here does not work for `exterior_algebra` and `clifford_algebra`, and produces weird errors.
Those will be easier to investigate when their foundations are in mathlib.

2020-10-19 22:45:17 cc6594a
doc(algebra/algebra/basic): Fixes some documentation about `R`-algebras (#4689)
See the associated zulip discussion:
https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/The.20Type.20of.20R-algebras/near/213722713

2020-10-19 22:45:15 86d65f8
chore(topology/instances/ennreal): prove `nnreal.not_summable_iff_tendsto_nat_at_top` (#4670)
* use `ℝ≥0` notation in `data/real/ennreal`;
* add `ennreal.forall_ne_top`, `ennreal.exists_ne_top`,
  `ennreal.ne_top_equiv_nnreal`, `ennreal.cinfi_ne_top`,
  `ennreal.infi_ne_top`, `ennreal.csupr_ne_top`, `ennreal.sup_ne_top`,
  `ennreal.supr_ennreal`;
* add `nnreal.injective_coe`, add `@[simp, norm_cast]` to
  `nnreal.tendsto_coe`, and add `nnreal.tendsto_coe_at_top`; move
  `nnreal.infi_real_pos_eq_infi_nnreal_pos` from `ennreal` to `nnreal`;
* use `function.injective` instead of an unfolded definition in `filter.comap_map`;
* add `ennreal.nhds_top'`, `ennreal.tendsto_nhds_top_iff_nnreal`,
  `ennreal.tendsto_nhds_top_iff_nat`;
  
* upgrade `ennreal.tendsto_coe_nnreal_nhds_top` to an `iff`, rename to
  `ennreal.tendsto_coe_nhds_top`;
* `nnreal.has_sum_iff_tendsto_nat` now takes  `r` as an implicit argument;
* add `nnreal.not_summable_iff_tendsto_nat_at_top` and
  `not_summable_iff_tendsto_nat_at_top_of_nonneg`.

2020-10-19 22:45:12 3019581
feat({field,ring}_theory/adjoin): generalize `induction_on_adjoin` (#4647)
We can prove `induction_on_adjoin` for both `algebra.adjoin` and `intermediate_field.adjoin` in a very similar way, if we add a couple of small lemmas. The extra lemmas I introduced for `algebra.adjoin` shorten the proof of `intermediate_field.adjoin` noticeably.

2020-10-19 22:45:10 006b2e7
feat(data/polynomial/reverse): define `reverse f`, prove that `reverse` is a multiplicative monoid homomorphism (#4598)

2020-10-19 22:45:07 0c70cf3
feat(tactic/unify_equations): add unify_equations tactic (#4515)
`unify_equations` is a first-order unification tactic for propositional
equalities. It implements the algorithm that `cases` uses to simplify
indices of inductive types, with one extension: `unify_equations` can
derive a contradiction from 'cyclic' equations like `n = n + 1`.
`unify_equations` is unlikely to be particularly useful on its own, but
I'll use it as part of my new `induction` tactic.

2020-10-19 22:45:05 a249c9a
feat(archive/imo): formalize IMO 1998 problem 2 (#4502)

2020-10-19 22:45:03 5065471
feat(data/monoid_algebra): add missing has_coe_to_fun (#4315)
Also does the same for the additive version `semimodule k (add_monoid_algebra k G)`.

2020-10-19 20:01:36 0523b61
chore(logic/function): `simp`lify applications of `(un)curry` (#4696)

2020-10-19 15:37:07-04:00 a1f1770
Revert "chore(data/multiset): add a few lemmas"
This reverts commit 45caa4f392fe4f7622fef576cf3811b9ff6fd307.

2020-10-19 15:30:42-04:00 45caa4f
chore(data/multiset): add a few lemmas

2020-10-19 15:11:45 cacc297
fix(tactic/norm_num): remove unnecessary argument to rat.cast_zero (#4682)
See [Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60norm_num.60.20error.20message).

2020-10-19 11:39:07 0f1bc68
feat(ring_theory/witt_vector/structure_polynomial): examples and basic properties (#4467)
This is the 4th and final PR in a series on a fundamental theorem about Witt polynomials.
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-10-19 11:39:05 4140f78
feat(algebra/ordered_semiring): relax 0 < 1 to 0 ≤ 1 (#4363)
Per [discussion](https://github.com/leanprover-community/mathlib/pull/4296#issuecomment-701953077) in #4296.

2020-10-19 10:38:52 ef9d00f
feat(linear_algebra/matrix): multiplying `is_basis.to_matrix` and `linear_map.to_matrix` (#4650)
This basically tells us that `is_basis.to_matrix` is indeed a basis change matrix.

2020-10-19 10:38:50 47dcecd
feat(data/complex/exponential): bounds on exp (#4432)
Define `real.exp_bound` using `complex.exp_bound`.  Deduce numerical
bounds on `exp 1` analogous to those we have for pi.

2020-10-19 10:38:48 c38d128
feat(ring_theory/polynomial/chebyshev): chebyshev polynomials of the first kind (#4267)
If T_n denotes the n-th Chebyshev polynomial of the first kind, then the
polynomials 2*T_n(X/2) form a Lambda structure on Z[X].
I call these polynomials the lambdashev polynomials, because, as far as I
am aware they don't have a name in the literature.
We show that they commute, and that the p-th polynomial is congruent to X^p
mod p. In other words: a Lambda structure.

2020-10-19 07:13:04 f75dbd3
feat(algebra/*): some simp lemmas, and changing binders (#4681)

2020-10-19 07:13:01 41c227a
feat(algebra/infinite_sum): make tsum irreducible (#4679)
See https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/congr'.20is.20slow

2020-10-19 07:12:58 7601a7a
feat(ring_theory/adjoin): adjoin_singleton_one (#4633)

2020-10-19 04:45:06 4b890a2
feat(*): make int.nonneg irreducible (#4601)
In #4474, `int.lt` was made irreducible. We make `int.nonneg` irreducible, which is stronger as `int.lt` is expressed in terms of `int.nonneg`.

2020-10-19 01:25:23 d174295
chore(scripts): update nolints.txt (#4680)
I am happy to remove some nolints for you!

2020-10-19 01:25:21 9d1bbd1
fix(data/equiv): nolint typo (#4677)

2020-10-19 01:25:19 49bb5dd
refactor(tactic/norm_num): define prove_ne_zero using prove_ne (#4626)
This is trickier than it sounds because of a cyclic dependency. As a result we
now have two versions of `prove_ne_zero` and `prove_clear_denom` is
generic over them. One version proves ne using an order relation on the
target, while the other uses `uncast` lemmas to reduce to `rat` and
then uses the first `prove_ne_zero`. (This is why we actually want two versions -
we can't solve this with a large mutual def, because it would
result in an infinite recursion.)

2020-10-18 23:06:55 1ac5d82
fix(logic/nontrivial): change tactic doc entry tag to more common "type class" (#4676)

2020-10-18 21:34:51 61e1111
chore(linear_algebra/affine_space): introduce notation for `affine_map` (#4675)

2020-10-18 21:34:49 4faf2e2
chore(order/filter): use implicit arguments in `tendsto_at_top` etc (#4672)
Also weaken some assumptions from a decidable linear order to a linear order.

2020-10-18 21:34:47 392d52c
chore(order/filter): run `dsimp only [set.mem_set_of_eq]` in `filter_upwards` (#4671)

2020-10-18 19:21:09 93b7e63
feat(analysis/special_functions/trigonometric): range_{exp,cos,sin} (#4595)

2020-10-18 16:02:22 fee2dfa
chore(analysis/calculus/fderiv): golf a lemma using new `nontriviality` (#4584)

2020-10-18 09:59:52 e21dc7a
feat(topology/subset_properties): define `filter.cocompact` (#4666)
The filter of complements to compact subsets.

2020-10-18 05:51:33 cc32876
chore(analysis/normed_space/basic): add `continuous_at.inv'`, `continuous.div` etc (#4667)
Also add `continuous_on_(cos/sin)`.

2020-10-18 04:29:30 db06b67
feat(measure_theory/prod): product measures and Fubini's theorem (#4590)
* Define the product measure of two σ-finite measures.
* Prove Tonelli's theorem.
* Prove Fubini's theorem.

2020-10-18 01:46:58 c7782bb
chore(scripts): update nolints.txt (#4665)
I am happy to remove some nolints for you!

2020-10-18 01:46:56 77dc679
chore(data/set/intervals): more lemmas (#4662)

2020-10-18 01:46:53 9585210
chore(order/filter): add a few lemmas (#4661)

2020-10-18 01:46:51 f990838
chore(data/finsupp/basic): rename type variables (#4624)
Use `M`, `N`, `P` for types with `has_zero`, `add_monoid`, or
`add_comm_monoid` structure, and `R`, `S` for types with at least
a `semiring` instance.
API change: `single_add_erase` and `erase_add_single` now use explicit arguments.

2020-10-18 01:46:49 ebd2b7f
feat(logic/nontrivial): make `nontriviality` work for more goals (#4574)
The goal is to make `nontriviality` work for the following goals:
* [x] `nontriviality α` if the goal is `is_open s`, `s : set α`;
* [x] `nontriviality E` if the goal is `is_O f g` or `is_o f g`, where `f : α → E`;
* [x] `nontriviality R` if the goal is `linear_independent R _`;
* [ ] `nontriviality R` if the goal is `is_O f g` or `is_o f g`, where `f : α → E`, `[semimodule R E]`;
  in this case `nontriviality` should add a local instance `semimodule.subsingleton R`.
The last case was never needed in `mathlib`, and there is a workaround: run `nontriviality E`, then deduce `nontrivial R` from `nontrivial E`.
Misc feature:
* [x] make `nontriviality` accept an optional list of additional `simp` lemmas.

2020-10-18 01:46:47 b977dba
fix(solve_by_elim): handle multiple goals with different hypotheses (#4519)
Previously `solve_by_elim*` would operate on multiple goals (only succeeding if it could close all of them, and performing backtracking across goals), however it would incorrectly only use the local context from the main goal. If other goals had different sets of hypotheses, ... various bad things could happen!
This PR arranges so that `solve_by_elim*` inspects the local context later, so it picks up the correct hypotheses.

2020-10-17 23:24:37 13cd192
feat(measure_theory/measure_space): added sub for measure_theory.measure (#4639)
This definition is useful for proving the Lebesgue-Radon-Nikodym theorem for non-negative measures.

2020-10-17 23:24:35 e83458c
feat(algebra/group_power): Add mul/add variants of powers_hom and friends (#4636)

2020-10-17 23:24:33 c83c28a
feat(archive/imo): add IMO 2019 problem 4 (#4482)

2020-10-17 20:50:45 95d33ee
refactor(algebra/quadratic_discriminant): drop linearity condition; cleanup (#4656)
Renames:
- `discriminant_le_zero` to `discrim_le_zero`
- `discriminant_lt_zero` to `discrim_lt_zero`

2020-10-17 20:50:43 0367467
chore(group/type_tags): Add missing simp lemmas (#4651)

2020-10-17 20:50:41 0b9afe1
chore(linear_algebra/affine_space): redefine `line_map`, add `to_affine_subspace` (#4643)
* now `line_map` takes two points on the line, not a point and a
  direction, update/review lemmas;
* add `submodule.to_affine_subspace`;
* add `affine_map.fst` and `affine_map.snd`;
* prove that an affine map `ℝ → ℝ` sends an unordered interval to an unordered interval.

2020-10-17 18:26:05 589ebf5
chore(algebra/*): add a few `prod.*` instances (#4659)
* `prod.left_cancel_semigroup`;
* `prod_right_cancel_semigroup`;
* `prod.ordered_cancel_comm_monoid`;
* `ordered_comm_group`.

2020-10-17 18:26:02 6e5b6cc
feat(algebra/gcd_monoid, polynomial/field_division): generalizing `normalization_monoid` on polynomials (#4655)
Defines a `normalization_monoid` instance on any `comm_group_with_zero`, including fields
Defines a `normalization_monoid` instance on `polynomial R` when `R` has a `normalization_monoid` instance

2020-10-17 18:26:00 edddb3b
feat(finsupp/basic): Add a variant of `prod_map_domain_index` for when f is injective (#4645)
This puts much weaker restrictions on `h`, making this easier to apply in some situations

2020-10-17 18:25:58 85eb12d
feat(algebra/algebra/basic): product of two algebras (#4632)

2020-10-17 18:25:57 82ff1e5
feat(algebra/algebra/subalgebra): subalgebra.subsingleton (#4631)

2020-10-17 18:25:55 688157f
feat(ring_theory/polynomial/content): definition of content + proof that it is multiplicative (#4393)
Defines `polynomial.content` to be the `gcd` of the coefficients of a polynomial
Says a polynomial `is_primitive` if its content is 1
Proves that `(p * q).content = p.content * q.content

2020-10-17 16:08:01 b145c36
feat(archive/imo): variant solution to IMO 1962 problem 4 (#4640)
Continuation of a discussion at #4518

2020-10-17 13:41:26 25d8343
feat(topology/sheaves): an equivalent sheaf condition (#4538)
Another condition equivalent to the sheaf condition: for every open cover `U`, `F.obj (supr U)` is the limit point of the diagram consisting of all the `F.obj V`, where `V ≤ U i` for some `i`.
This condition is particularly straightforward to state, and makes some proofs easier (however we don't do this here: just prove the equivalence with the "official" definition). It's particularly nice because there is no case splitting (depending on whether you're looking at single or double intersections) when checking the sheaf condition.
This is the statement Lurie uses in Spectral Algebraic Geometry.
Later I may propose that we make this the official definition, but I'll wait to see how it pans out in actual use, first. For now it's just provided as yet another equivalent version of the sheaf condition.

2020-10-17 01:11:20 ca2e6f4
chore(scripts): update nolints.txt (#4654)
I am happy to remove some nolints for you!

2020-10-16 21:43:46 7b9acd9
chore(measure_theory/*): reflow long lines (#4642)
Also do some minor golfing.

2020-10-16 19:41:32 189e538
feat(geometry/manifold): stab at diffeomorphisms (#4351)

2020-10-16 18:01:28 86b298f
feat(category_theory/sites): grothendieck topologies (#4577)

2020-10-16 16:28:29 0d9227f
feat(category_theory/monad/kleisli): add Kleisli category of a monad (#4542)
Adds the Kleisli category of a monad, and shows the Kleisli category for a lawful control monad is equivalent to the Kleisli category of its category-theoretic version.
Following discussion at https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/kleisli.20vs.20kleisli.
I'd appreciate suggestions for names more sensible than the ones already there.

2020-10-16 07:43:42 f675a00
chore(set_theory/zfc): split long lines (#4641)
Also add `Set.subset_def` and rewrite `Set.mem_pair_sep` in tactic mode

2020-10-16 05:34:17 1cce606
feat(analysis/special_functions/trigonometric): some lemmas (#4638)
The following changes:
- `sin_sub_sin` and friends (sum-to-product lemmas) moved from `trigonometric` to the earlier file `exponential`.  (I think the distinction between the files is that `trigonometric` collects the facts that require either differentiation or the definition `pi`, whereas purely algebraic facts about trigonometry go in `exponential`?  For example the double-angle formula is in `exponential`).
- rewrite proof of `cos_lt_cos_of_nonneg_of_le_pi_div_two` to avoid dependence on `cos_eq_one_iff_of_lt_of_lt` (but not sure if the result is actually simpler, feel free to propose this be reverted)
- some new explicit values of trig functions, `cos (π / 3)` and similar
- correct a series of lemmas in the `complex` namespace that were stated for real arguments (presumably the author copy-pasted but forgot to rewrite)
- lemmas `sin_eq_zero_iff`, `cos_eq_cos_iff`, `sin_eq_sin_iff`

2020-10-16 05:34:15 e7b8421
chore(linear_algebra/finsupp): turn `finsupp.lsum` into `add_equiv` (#4597)

2020-10-16 03:25:42 8280190
chore(scripts): update nolints.txt (#4637)
I am happy to remove some nolints for you!

2020-10-16 03:25:39 cc14658
chore(algebra/group_powers): Add missing lemmas (#4635)
This part of the file defines four equivalences, but goes on to state lemmas about only one of them.
This provides the lemmas for the other three.

2020-10-16 00:56:13 dca1393
feat(data/equiv/basic): add `equiv.set.compl` (#4630)
Given an equivalence between two sets `e₀ : s ≃ t`, the set of
`e : α ≃ β` that agree with `e₀` on `s` is equivalent to `sᶜ ≃ tᶜ`.
Also add a bunch of lemmas to `data/set/function`; some of them are
used in the definition of `equiv.set.compl`.

2020-10-16 00:56:11 b0b61e6
feat(order/category/omega-complete): omega-complete partial orders form a complete category (#4397)
as discussed in #4348.

2020-10-15 23:48:19 3e12a7b
chore(category_theory/limits/binary_products): fixup binary product lemmas (#4376)
The main changes in here are:
- `prod.map` is now a def, not an abbreviation. I think this is an important change because oftentimes `simp` will reduce it to `lim.map` and then get stuck, which is tough to debug and usually the wrong step to take. Instead, the `prod.map_fst` and `snd` lemmas are proved directly rather than with simp, and these are used to get everything else.
- I added a couple of new simp lemmas and rewrote a few others: the overall guide here is that more things can be proved by `rw` or `simp` *without using ext*. The idea of this is that when you're dealing with a chain of compositions containing product morphisms, it's much nicer to be able to rewrite (or simp) the parts you want rather than needing to do an auxiliary `have` and use `ext` in there, then rewrite using this lemma inside your big chain. In this file at least I managed to get rid of a bunch of uses of `ext` (and also convert `tidy` to `simp`) so I'm pretty sure these changes were positive.
- Moved around some definitions and lemmas. No big changes here, mostly just putting things which work similarly closer.
- Weakened typeclass assumptions: in particular for `prod_comparison`.
- Renamed some `prod_` lemmas to `prod.`, since there used to be a mix between the two; so I've made the usage consistent.
+ dual versions of all the above.

2020-10-15 22:31:38 b7d176e
feat(category_theory/cones): some isomorphisms relating operations (#4536)

2020-10-15 20:34:24 8985e39
feat(archive/100-theorems-list/70_perfect_numbers): Perfect Number Theorem, Direction 2 (#4621)
Adds a few extra lemmas about `divisors`, `proper_divisors` and sums of proper divisors
Proves Euler's direction of the Perfect Number theorem, finishing Freek 70

2020-10-15 16:29:11 d473517
chore(algebra/group/hom): add `monoid_hom.eval` (#4629)

2020-10-15 16:29:09 38a5f5d
chore(data/equiv/mul_add): add `monoid_hom.to_mul_equiv` (#4628)

2020-10-15 16:29:07 46b0528
refactor(data/polynomial): Move some lemmas to `monoid_algebra` (#4627)
The `add_monoid_algebra.mul_apply_antidiagonal` lemma is copied verbatim from `monoid_algebra.mul_apply_antidiagonal`.

2020-10-15 16:29:05 abaf3c2
feat(algebra/category/Algebra/basic): Add free/forget adjunction. (#4620)
This PR adds the usual free/forget adjunction for the category of `R`-algebras.

2020-10-15 16:29:03 07ee11e
feat(algebra/algebra/basic): Add `map_finsupp_(sum|prod)` to `alg_(hom|equiv)` (#4603)
Also copies some lemmas from `alg_hom` to `alg_equiv` that were missing

2020-10-15 16:29:00 bb1f549
feat(algebra/gcd_monoid): in a gcd_domain a coprime factor of a power is a power (#4589)
The main result is:
```
theorem associated_pow_of_mul_eq_pow {a b c : α} (ha : a ≠ 0) (hb : b ≠ 0)
  (hab : gcd a b = 1) {k : ℕ} (h : a * b = c ^ k) :
  ∃ (d : α), associated (d ^ k) a
```

2020-10-15 16:28:58 b01ca81
feat(data/matrix/notation): simp lemmas for constant-indexed elements (#4491)
If you use the `![]` vector notation to define a vector, then `simp`
can extract elements `0` and `1` from that vector, but not element `2`
or subsequent elements.  (This shows up in particular in geometry if
defining a triangle with a concrete vector of vertices and then
subsequently doing things that need to extract a particular vertex.)
Add `bit0` and `bit1` `simp` lemmas to allow any element indexed by a
numeral to be extracted (even when the numeral is larger than the
length of the list, such numerals in `fin n` being interpreted mod
`n`).
This ends up quite long; `bit0` and `bit1` semantics mean extracting
alternate elements of the vector in a way that can wrap around to the
start of the vector when the numeral is `n` or larger, so the lemmas
need to deal with constructing such a vector of alternate elements.
As I've implemented it, some definitions also need an extra hypothesis
as an argument to control definitional equalities for the vector
lengths, to avoid problems with non-defeq types when stating
subsequent lemmas.  However, even the example added to
`test/matrix.lean` of extracting element `123456789` of a 5-element
vector is processed quite quickly, so this seems efficient enough.
Note also that there are two `@[simp]` lemmas whose proofs are just
`by simp`, but that are in fact needed for `simp` to complete
extracting some elements and that the `simp` linter does not (at least
when used with `#lint` for this single file) complain about.  I'm not
sure what's going on there, since I didn't think a lemma that `simp`
can prove should normally need to be marked as `@[simp]`.

2020-10-15 15:01:02 85d4b57
feat(data/polynomial/eval): bit0_comp, bit1_comp (#4617)

2020-10-15 14:04:18 1444fa5
fix(haar_measure): minor changes (#4623)
There were some mistakes in the doc, which made it sound like `chaar` and `haar_outer_measure` coincide on compact sets, which is not generally true. 
Also cleanup various proofs.

2020-10-15 08:51:18 7559d1c
lint(data/num/*): add docs and remove some [has_zero] requirements (#4604)

2020-10-15 07:30:22 fa65282
chore(category_theory/monoidal): fix typo in docstrings (#4625)

2020-10-15 01:11:53 2e1129e
chore(scripts): update nolints.txt (#4622)
I am happy to remove some nolints for you!

2020-10-14 18:39:39 084b7e7
chore(algebra/order,data/set/intervals): a few more trivial lemmas (#4611)
* a few more lemmas for `has_le.le` and `has_lt.lt` namespaces;
* a few lemmas about intersections of intervals;
* fix section header in `topology/algebra/module`.

2020-10-14 18:39:37 d11eb84
fix(tactic/suggest): properly remove "Try this: exact " prefix from library_search hole command (#4609)
[See Zulip](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/mechanisms.20to.20search.20through.20mathlilb/near/213223321)

2020-10-14 17:31:01 40844f0
doc(category_theory/comma): Fix markdown rendering in docs (#4618)

2020-10-14 14:46:32 de46349
feat(data/set/intervals): more lemmas about `unordered_interval` (#4607)
Add images/preimages of unordered intervals under common arithmetic operations.

2020-10-14 14:46:30 442ef22
feat(linear_algebra/clifford_algebra): Add a definition derived from exterior_algebra.lean (#4430)

2020-10-14 15:36:40+02:00 1a1655c
doc(docs/100): link to actual triangle inequality (#4614)

2020-10-14 09:45:28 f7edbca
feat(algebra/char_zero): char_zero.infinite (#4593)

2020-10-14 09:45:26 6f5ccc1
chore(linear_algebra/linear_independent): review API (#4567)
### API changes
#### New definitions and lemmas
* `subalgebra.to_submodule_equiv`: a linear equivalence between a subalgebra and its coercion
  to a submodule;
* `algebra.to_submodule_bot`: coercion of `⊥ : subalgebra R A` to `submodule R A` is
  `submodule.span {1}`;
* `submodule.disjoint_def'`: one more expansion of `disjoint` for submodules;
* `submodule.is_compl_range_inl_inr`: ranges of `inl` and `inr` are complement submodules;
* `finsupp.supported_inter`, `finsupp.disjojint_supported_supported`,
  `finsupp.disjoint_supported_supported_iff` : more lemmas about `finsupp.supported`;
* `finsupp.total_unique`: formula for `finsupp.total` on a `unique` type;
* `linear_independent_iff_injective_total`, `linear_independent.injective_total` :
  relate `linear_independent R v` to `injective (finsupp.total ι M R v)`;
* `fintype.linear_independent_iff`: a simplified test for
  `linear_independent R v` if the domain of `v` is a `fintype`;
* `linear_independent.map'`: an injective linear map sends linearly
  independent families of vectors to linearly independent families of
  vectors;
* `linear_map.linear_independent_iff`: if `f` is an injective linear
  map, then `f ∘ v` is linearly independent iff `v` is linearly
  independent;
* `linear_independent.disjoint_span_image`: if `v` is a linearly
  independent family of vectors, then the submodules spanned by
  disjoint subfamilies of `v` are disjoint;
* `linear_independent_sum`: a test for linear independence of a
  disjoint union of two families of vectors;
* `linear_independent.sum_type`: `iff.mpr` from `linear_independent_sum`;
* `linear_independent_unique_iff`, `linear_independent_unique`: a test
  for linear independence of a single-vector family;
* `linear_independent_option'`, `linear_independent_option`, `linear_independent.option`:
  test for linear independence of a family indexed by `option ι`;
* `linear_independent_pair`: test for independence of `{v₁, v₂}`;
* `linear_independent_fin_cons`, `linear_independent.fin_cons`,
  `linear_independent_fin_succ`, `linear_independent_fin2`: tests for
  linear independence of families indexed by `i : fin n`.
#### Rename
* `_root_.disjoint_span_singleton` → `submodule.disjoint_span_singleton'`;
* `linear_independent.image` → `linear_independent.map`
* `linear_independent_of_comp` → `linear_independent.of_comp`;
#### Changes in type signature
* `is_basis.to_dual`, `is_basis.to_dual_flip`, `is_basis.to_dual_equiv`: take `B` as an explicit
  argument to improve readability of the pretty-printed output;

2020-10-14 08:24:05 8511729
refactor(data/int/gcd,ring_theory/int/basic): collect integer divisibility results from various files (#4572)
Applying comments from PR #4384. In particular:
1) Move the gcd and lcm results from gcd_monoid to `data/int/gcd.lean` with new proofs (for a few lcm results) that do not need ring theory.
2) Try to collect applications of ring theory to ℕ and ℤ into a new file `ring_theory/int/basic.lean`.

2020-10-14 08:24:03 20006f1
feat(data/polynomial/field_division, field_theory/splitting_field): Splits if enough roots (#4557)
I have added some lemmas about polynomials that split. In particular the fact that if `p` has as many roots as its degree than it can be written as a product of `(X - a)` and so it splits.
The proof of this for monic polynomial, in `eq_prod_of_card_roots_monic`, is rather messy and can probably be improved a lot.

2020-10-14 01:06:37 1c12bd9
chore(scripts): update nolints.txt (#4610)
I am happy to remove some nolints for you!

2020-10-13 23:51:13 e2dd1c6
feat(analysis/normed_space): unconditionally convergent series in `R^n` is absolutely convergent (#4551)

2020-10-13 21:59:53 2543b68
refactor(*): migrate to `dense` API (#4447)
@PatrickMassot introduced `dense` in #4399. In this PR I review the API and migrate many definitions and lemmas
to use `dense s` instead of `closure s = univ`. I also generalize `second_countable_of_separable` to a `uniform_space`
with a countably generated uniformity filter.
## API changes
### Use `dense` or `dense_range` instead of `closure _ = univ`
#### Lemmas
- `has_fderiv_within_at.unique_diff_within_at`;
- `exists_dense_seq`;
- `dense_Inter_of_open_nat`;
- `dense_sInter_of_open`;
- `dense_bInter_of_open`;
- `dense_Inter_of_open`;
- `dense_sInter_of_Gδ`;
- `dense_bInter_of_Gδ`;
- `eventually_residual`;
- `mem_residual`;
- `dense_bUnion_interior_of_closed`;
- `dense_sUnion_interior_of_closed`;
- `dense_Union_interior_of_closed`;
- `Kuratowski_embeddinng.embedding_of_subset_isometry`;
- `continuous_extend_from`;
#### Definitions
- `unique_diff_within_at`;
- `residual`;
### Rename
- `submodule.linear_eq_on` → `linear_map.eq_on_span`, `linear_map.eq_on_span'`;
- `submodule.linear_map.ext_on` → `linear_map.ext_on_range`;
- `filter.is_countably_generated.has_antimono_basis` →
  `filter.is_countably_generated.exists_antimono_basis`;
- `exists_countable_closure_eq_univ` → `exists_countable_dense`, use `dense`;
- `dense_seq_dense` → `dense_range_dense_seq`, use `dense`;
- `dense_range.separable_space` is now `protected`;
- `dense_of_subset_dense` → `dense.mono`;
- `dense_inter_of_open_left` → `dense.inter_of_open_left`;
- `dense_inter_of_open_right` → `dense.inter_of_open_right`;
- `continuous.dense_image_of_dense_range` → `dense_range.dense_image`;
- `dense_range.inhabited`, `dense_range.nonempty`: changed API, TODO;
- `quotient_dense_of_dense` → `dense.quotient`, use `dense`;
- `dense_inducing.separable` → `dense_inducing.separable_space`, add `protected`;
- `dense_embedding.separable` → `dense_embedding.separable_space`, add `protected`;
- `dense_inter_of_Gδ` → `dense.inter_of_Gδ`;
- `stone_cech_unit_dense` → `dense_range_stone_cech_unit`;
- `abstract_completion.dense'` → `abstract_completion.closure_range`;
- `Cauchy.pure_cauchy_dense` → `Cauchy.dense_range_pure_cauchy`;
- `completion.dense` → `completion.dense_range_coe`;
- `completion.dense₂` → `completion.dense_range_coe₂`;
- `completion.dense₃` → `completion.dense_range_coe₃`;
### New
- `has_fderiv_within_at.unique_on` : if `f'` and `f₁'` are two derivatives of `f`
  within `s` at `x`, then they are equal on the tangent cone to `s` at `x`;
- `local_homeomorph.mdifferentiable.mfderiv_bijective`,
  `local_homeomorph.mdifferentiable.mfderiv_surjective`
- `continuous_linear_map.eq_on_closure_span`: if two continuous linear maps are equal on `s`,
  then they are equal on `closure (submodule.span s)`;
- `continuous_linear_map.ext_on`: if two continuous linear maps are equal on a set `s` such that
  `submodule.span s` is dense, then they are equal;
- `dense_closure`: `closure s` is dense iff `s` is dense;
- `dense.of_closure`, `dense.closure`: aliases for `dense_closure.mp` and `dense_closure.mpr`;
- `dense_univ`: `univ` is dense;
- `dense.inter_open_nonempty`: alias for `dense_iff_inter_open.mp`;
- `dense.nonempty_iff`: if `s : set α` is a dense set, then `s` is nonempty iff `α` is nonempty;
- `dense.nonempty`: a dense set in a nonempty type is nonempty;
- `dense_range.some`: given a function with `dense_range` and a point in the codomain, returns a point in the domain;
- `function.surjective.dense_range`: a surjective function has dense range;
- `continuous.range_subset_closure_image_dense`: closure of the image of a dense set under
  a continuous function includes the range of this function;
- `dense_range.dense_of_maps_to`: if a function with dense range maps a dense set `s` to `t`, then
  `t` is dense in the codomain;
- `dense_range.quotient`;
- `dense.prod`: product of two dense sets is dense in the product;
- `set.eq_on.closure`;
- `continuous.ext_on`;
- `linear_map.ext_on`

2020-10-13 19:48:34 fde3d78
chore(multiset): dedicated notation for multiset.cons (#4600)

2020-10-13 18:44:25 7368d71
chore(number_theory/arithmetic_function): Define in terms of zero_hom (#4606)
No need to write these proofs in two places

2020-10-13 16:46:02 b1c1033
feat(analysis/normed_space/operator_norm): construct a continuous_linear_equiv from a linear_equiv and bounds in both directions (#4583)

2020-10-13 16:46:00 7cff825
feat(data/vector2): induction principle, define last, and some lemmas (blocked by #4578) (#4554)

2020-10-13 15:24:50 71bb9f2
chore(linear_algebra/finsupp): Implement lsingle in terms of single_add_hom (#4605)
While not shorter, this makes it easier to relate the two definitions

2020-10-13 14:02:34 ca6af1c
chore(algebra/monoid_algebra): Replace `algebra_map'` with `single_(zero|one)_ring_hom` (#4582)
`algebra_map'` is now trivially equal to `single_(zero|one)_ring_hom.comp`, so is no longer needed.

2020-10-13 11:12:28 9f9344d
feat(algebra/char_p): fields with a hom between them have same char (#4594)

2020-10-13 09:47:17 dd8bf2c
feat(data/polynomial/eval): easy lemmas + speedup (#4596)

2020-10-13 06:30:22 7fff35f
chore(algebra/pointwise): remove `@[simp]` from `singleton_one`/`singleton_zero` (#4592)
This lemma simplified `{1}` and `{0}` to `1` and `0` making them unusable for other `singleton` lemmas.

2020-10-13 06:30:20 c9ae9e6
chore(linear_algebra/dimension): more same-universe versions of `is_basis.mk_eq_dim` (#4591)
While all the `lift` magic is good for general theory, it is not that convenient for the case when everything is in `Type`.
* add `mk_eq_mk_of_basis'`: same-universe version of `mk_eq_mk_of_basis`;
* generalize `is_basis.mk_eq_dim''` to any index type in the same universe as `V`, not necessarily `s : set V`;
* reorder lemmas to optimize the total length of the proofs;
* drop one `finite_dimensional` assumption in `findim_of_infinite_dimensional`.

2020-10-13 04:39:56 766d860
fix(big_operators): fix imports (#4588)
Previously `algebra.big_operators.pi` imported `algebra.big_operators.default`. That import direction is now reversed.

2020-10-13 03:48:58 505b969
feat(archive/imo): formalize IMO 1962 problem Q1 (#4450)
The problem statement:
Find the smallest natural number $n$ which has the following properties:
(a) Its decimal representation has 6 as the last digit.
(b) If the last digit 6 is erased and placed in front of the remaining digits,
the resulting number is four times as large as the original number $n$.
This is a proof that 153846 is the smallest member of the set satisfying these conditions.

2020-10-13 02:01:14 e957269
chore(scripts): update nolints.txt (#4587)
I am happy to remove some nolints for you!

2020-10-13 02:01:12 9eb341a
feat(mv_polynomial): minor simplification in coeff_mul (#4586)
The proof was already golfed in #4472.
Use `×` instead of `sigma`.
Shorten one line over 100 chars.

2020-10-13 02:01:09 7dcaee1
feat(archive/imo): formalize IMO 1962 problem 4 (#4518)
The problem statement: Solve the equation `cos x ^ 2 + cos (2 * x) ^ 2 + cos (3 * x) ^ 2 = 1`.
There are a bunch of trig formulas I proved along the way; there are sort of an infinite number of trig formulas so I'm open to feedback on whether some should go in the core libraries. Also possibly some of them have a shorter proof that would render the lemma unnecessary.
For what it's worth, the actual method of solution is not how a human would do it; a more intuitive human method is to simplify in terms of `cos x` and then solve, but I think this is simpler in Lean because it doesn't rely on solving `cos x = y` for several different `y`.

2020-10-13 02:01:07 b231d8e
feat(archive/imo): formalize IMO 1960 problem 1 (#4366)
The problem:
Determine all three-digit numbers $N$ having the property that $N$ is divisible by 11, and
$\dfrac{N}{11}$ is equal to the sum of the squares of the digits of $N$.
Art of Problem Solving offers three solutions to this problem - https://artofproblemsolving.com/wiki/index.php/1960_IMO_Problems/Problem_1 - but they all involve a fairly large amount of bashing through cases and solving basic algebra. This proof is also essentially bashing through cases, using the `iterate` tactic and calls to `norm_num`.

2020-10-12 23:17:41 a6d445d
feat(data/finsupp): Add `map_finsupp_prod` to homs (#4585)
This is a convenience alias for `map_prod`, which is awkward to use.

2020-10-12 23:17:40 d1bb5ea
feat(topology/category/Compactum): Compact Hausdorff spaces (#4555)
This PR provides the equivalence between the category of compact Hausdorff topological spaces and the category of algebras for the ultrafilter monad.
## Notation
1. `Compactum` is the category of algebras for the ultrafilter monad. It's a wrapper around `monad.algebra (of_type_functor $ ultrafilter)`.
2. `CompHaus` is the full subcategory of `Top` consisting of topological spaces which are compact and Hausdorff.

2020-10-12 23:17:37 bc77a23
feat(data/list/*): add left- and right-biased versions of map₂ and zip (#4512)
When given lists of different lengths, `map₂` and `zip` truncate the output to
the length of the shorter input list. This commit adds variations on `map₂` and
`zip` whose output is always as long as the left/right input.

2020-10-12 20:50:13 d3d70f1
chore(algebra/order*): move `abs`/`min`/`max`, review (#4581)
* make `algebra.ordered_group` import `algebra.order_functions`, not vice versa;
* move some proofs from `algebra.ordered_functions` to `algebra.ordered_group` and `algebra.ordered_ring`;
* deduplicate API;
* golf some proofs.

2020-10-12 20:50:11 6ea6200
feat(tactic/rcases): rcases_many (#4569)
This allows you to pattern match many variables at once, using the
syntax `obtain ⟨a|b, c|d⟩ := ⟨x, y⟩`. This doesn't require any change
to the front end documentation, as it is in some sense the obvious thing,
but this doesn't break any existing uses because this could never work
before (since the expected type of the tuple expression is not known).

2020-10-12 20:50:09 9bed456
feta(data/fin): induction principle on fin (n + 1) (#4546)

2020-10-12 20:50:06 8ccfb0a
chore(control/functor): linting (#4496)

2020-10-12 18:08:56 9713e96
chore(*): update to Lean 3.21.0c (#4578)
The only real change is the removal of notation for `vector.cons`.

2020-10-12 18:08:53 6816b83
feat(archive/100-theorems-list/70_perfect_numbers): Direction 1 of the Perfect Number Theorem (#4544)
Proves Euclid's half of the Euclid-Euler Theorem that if `2 ^ (k + 1) - 1` is prime, then `2 ^ k * (2 ^ (k + 1) - 1)` is an (even) perfect number.

2020-10-12 17:14:21 9379050
chore(data/hash_map): linting (#4498)

2020-10-12 14:57:35 266895f
fix(algebra/ordered_group): use `add_neg` in autogenerated lemma name (#4580)
Explicitly add `sub_le_sub_iff` with `a - b`.

2020-10-12 14:57:33 b3ce883
feat(algebra/*_power): simplify `(-a)^(bit0 _)` and `(-a)^(bit1 _)` (#4573)
Works for `pow` and `fpow`. Also simplify powers of `I : ℂ`.

2020-10-12 14:57:31 38e9ed3
feat(archive/imo): IMO 2020 Q2 (#4565)
Add a proof of IMO 2020 Q2 (directly following one of the official
solutions; there are many very similar approaches possible).
In support of this solution, add `geom_mean_le_arith_mean4_weighted`
to `analysis.mean_inequalities`, for both `real` and `nnreal`,
analogous to the versions for two and three numbers (and also add
`geom_mean_le_arith_mean3_weighted` for `real` as it was only present
for `nnreal`).

2020-10-12 14:57:28 5022425
feat(algebra/free_algebra): Add an inductive principle (#4335)

2020-10-12 14:57:26 3d1f16a
feat(analysis/normed_space/multilinear): define `mk_pi_algebra` (#4316)
I'm going to use this definition for converting `(mv_)power_series` to `formal_multilinear_series`.

2020-10-12 12:21:50 1362701
refactor(field_theory): Adjoin intermediate field (#4468)
Refactor adjoin to be an intermediate field rather than a subalgebra.

2020-10-12 10:16:23 8fa9125
feat(data/polynomial/degree/erase_lead): definition and basic lemmas (#4527)
erase_lead serves as the reduction step in an induction, breaking off one monomial from a polynomial.  It is used in a later PR to prove that reverse is a multiplicative monoid map on polynomials.

2020-10-12 08:30:01 0bfc68f
feat(ring_theory/witt_vector/structure_polynomial): witt_structure_int_prop (#4466)
This is the 3rd PR in a series on a fundamental theorem about Witt polynomials.
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-10-12 06:33:28 b953717
feat(set_theory/cardinal): cardinality of powerset (#4576)
adds a lemma for cardinality of powerset

2020-10-12 01:08:24 81b8123
chore(scripts): update nolints.txt (#4575)
I am happy to remove some nolints for you!

2020-10-11 21:16:36 665cc13
chore(topology/algebra/group): review (#4570)
* Ensure that we don't use `[topological_group G]` when it suffices to ask for, e.g., `[has_continuous_mul G]`.
* Introduce `[has_continuous_sub]`, add an instance for `nnreal`.

2020-10-11 20:09:45 952a407
feat(data/nat/digits): add norm_digits tactic (#4452)
This adds a basic tactic for normalizing expressions of the form `nat.digits a b = l`. As requested on Zulip: https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/simplifying.20nat.2Edigits/near/212152395

2020-10-11 20:09:43 b1ca33e
feat(analysis/calculus/times_cont_diff, analysis/calculus/inverse): smooth inverse function theorem (#4407)
The inverse function theorem, in the C^k and smooth categories.

2020-10-11 18:49:02 b48b4ff
feat(analysis/normed_space/inner_product): Cauchy-Schwarz equality case and other lemmas (#4571)

2020-10-11 18:49:00 0f085b9
chore(linear_algebra/finite_dimensional): rename `of_finite_basis` (#4562)
* rename `of_finite_basis` to `of_fintype_basis`;
* add new `of_finite_basis` assuming that the domain the basis is a
  `finite` set;
* allow `s : finset ι` and any function `s → V` in `of_finset_basis`.

2020-10-11 16:27:35 14dcfe0
chore(*): assorted lemmas (#4566)
Non-bc changes:
* make some lemmas use `coe` instead of `subtype.val`;
* make the arguments of `range_comp` explicit, reorder them.

2020-10-11 16:27:33 918e5d8
chore(data/finsupp): replace `eq_zero_of_zero_eq_one` with `finsupp.unique_of_right` (#4563)
Also add a lemma `semimodule.subsingleton`: if `R` is a subsingleton semiring, then any semimodule over `R` is a subsingleton.

2020-10-11 15:12:38 33f7870
chore(measure_theory/measurable_space): add `finset.is_measurable_bUnion` etc (#4553)
I always forget how to convert `finset` or `set.finite` to `set.countable. Also `finset.is_measurable_bUnion` uses `finset`'s `has_mem`, not coercion to `set`.
Also replace `tendsto_at_top_supr_nat` etc with slightly more general versions using a `[semilattice_sup β] [nonempty β]` instead of `nat`.

2020-10-11 12:30:22 99130d8
chore(algebra/monoid_algebra): Reorder lemmas, name some sections for clarity (#4535)
This also reduces the scope of `local attribute [reducible] add_monoid_algebra` to the sections which actually need it.

2020-10-11 10:42:23 0487a1d
chore(algebra/algebra/basic): fix definition of `ring_hom.to_algebra` (#4561)
The new definition uses `to_ring_hom := i` instead of `.. i` to get
defeq `algebra_map R S = i`, and adds it as a lemma.

2020-10-11 04:06:05 2c53e5e
chore(order/well_founded): move to a file (#4568)
I want to use `order/rel_classes` before `data/set/basic`.

2020-10-11 03:06:27 4dbebe3
chore(scripts): update nolints.txt (#4564)
I am happy to remove some nolints for you!

2020-10-11 01:02:23 d8d6e18
feat(data/finset/basic): equivalence of finsets from equivalence of types (#4560)
Broken off from #4259.
Given an equivalence `α` to `β`, produce an equivalence between `finset α` and `finset β`, and simp lemmas about it.

2020-10-10 23:06:12 df5adc5
chore(topology/*): golf some proofs (#4528)
* move `exists_nhds_split` to `topology/algebra/monoid`, rename to `exists_nhds_one_split`;
* add a version `exists_open_nhds_one_split`;
* move `exists_nhds_split4` to `topology/algebra/monoid`, rename to `exists_nhds_one_split4`;
* move `one_open_separated_mul` to `topology/algebra/monoid`, rename to `exists_open_nhds_one_mul_subset`;
* add `mem_prod_nhds_iff`;
* golf some proofs.

2020-10-10 20:25:23 c726898
feat(data/equiv/basic): equivalence on functions from bool (#4559)
An equivalence of functions from bool and pairs, together with some simp lemmas about it.
Broken off from #4259.

2020-10-10 18:28:05 f91e0c6
feat(data/finset/pi): pi singleton lemmas (#4558)
Broken off from #4259. 
Two lemmas to reduce `finset.pi` on singletons.

2020-10-10 15:18:44 c8738cb
feat(topology/uniform_space/cauchy): generalize `second_countable_of_separable` to uniform spaces (#4530)
Also generalize `is_countably_generated.has_antimono_basis` to `is_countably_generated.exists_antimono_subbasis` and add a few lemmas about bases of the uniformity filter.

2020-10-10 09:40:05 6676917
feat(analysis/special_functions/*): a few more simp lemmas (#4550)
Add more lemmas for simplifying inequalities with `exp`, `log`, and
`rpow`. Lemmas that generate more than one inequality are not marked
as `simp`.

2020-10-10 01:04:50 b084a06
chore(scripts): update nolints.txt (#4556)
I am happy to remove some nolints for you!

2020-10-09 19:22:53 40b55c0
feat(measure_theory): additions (#4324)
Many additional lemmas. 
Notable addition: sequential limits of measurable functions into a metric space are measurable.
Rename `integral_map_measure` -> `integral_map` (to be consistent with the version for `lintegral`)
Fix the precedence of all notations for integrals. From now on `∫ x, abs ∥f x∥ ∂μ` will be parsed
correctly (previously it gave a parse error).
Some cleanup (moving lemmas, and some nicer presentation by opening locales and namespaces).

2020-10-09 18:15:49 d533e1c
feat(ring_theory/power_series): inverse lemmas (#4552)
Broken off from #4259.

2020-10-09 15:44:20 b167809
feat(topology/basic): Lim_spec etc. cleanup (#4545)
Fixes #4543
See [Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/More.20point.20set.20topology.20questions/near/212757136)

2020-10-09 13:16:06 fcaf6e9
feat(meta/expr): add parser for generated binder names (#4540)
During elaboration, Lean generates a name for anonymous Π binders. This commit
adds a parser that recognises such names.

2020-10-09 13:16:04 306dc8a
chore(algebra/big_operators/basic): add lemma prod_multiset_count' that generalize prod_multiset_count to consider a function to a monoid (#4534)
I have added `prod_multiset_count'` that is very similar to `prod_multiset_count` but takes into account a function `f : \a \r M` where `M` is a commutative monoid. The proof is essentially the same (I didn't try to prove it using `prod_multiset_count` because maybe we can remove it and just keep the more general version).

2020-10-09 11:06:01 656ef0a
chore(topology/instances/nnreal): use notation (#4548)

2020-10-09 11:05:59 d0f45f5
lint(various): nolint has_inhabited_instance for injective functions (#4541)
`function.embedding`, `homeomorph`, `isometric` represent injective/bijective functions, so it's silly to expect them to be inhabited.

2020-10-09 08:54:38 cc75e4e
chore(data/nat/cast): a few `simp`/`norm_cast` lemmas (#4549)

2020-10-09 01:44:31 f6836c1
chore(scripts): update nolints.txt (#4547)
I am happy to remove some nolints for you!

2020-10-08 23:44:06 8004fb6
chore(topology/algebra/group): move a lemma to `group_theory/coset` (#4522)
`quotient_group_saturate` didn't use any topology. Move it to
`group_theory/coset` and rename to
`quotient_group.preimage_image_coe`.
Also rename `quotient_group.open_coe` to `quotient_group.is_open_map_coe`

2020-10-08 22:15:42 ce999a8
feat(topology/basic): add `is_open_iff_ultrafilter` (#4529)
Requested on [Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F)
by Adam Topaz

2020-10-08 18:04:05 a912455
fix(bors.toml, build.yml): check for new linter, rename linter to "Lint style" (#4539)

2020-10-08 15:41:18 73f119e
refactor(category_theory/pairwise): change direction of morphisms in the category of pairwise intersections (#4537)
Even though this makes some proofs slightly more awkward, this is the more natural definition.
In a subsequent PR about another equivalent sheaf condition, it also makes proofs less awkward, too!

2020-10-08 15:41:16 0ae4a3d
fix(update-copy-mod-doc-exceptions.sh): cleanup, sort properly (#4533)
Followup to #4513.

2020-10-08 15:41:14 427564e
chore(algebra/monoid_algebra): Fix TODO about unwanted unfolding (#4532)
For whatever reason, supplying `zero` and `add` explicitly makes the proofs work inline.
This TODO was added by @johoelzl in f09abb1c47a846c33c0e996ffa9bf12951b40b15.

2020-10-08 15:41:12 0c18d96
chore(data/padics/*): linting + squeeze_simp speedup (#4531)

2020-10-08 15:41:08 60be8ed
feat(data/equiv/*): to_monoid_hom_injective and to_ring_hom_injective (#4525)

2020-10-08 15:41:06 253f225
lint(computability/halting): docstrings (#4524)
Adds docstrings in `computability/halting.lean`

2020-10-08 15:41:04 e74bd26
chore(*): add a few more `unique` instances (#4511)
* `linear_map.unique_of_left`, `linear_map.unique_of_right`,
  `continuous_linear_map.unique_of_left`,
  `continuous_linear_map.unique_of_right`: if either `M` or `M₂` is a
  `subsingleton`, then both `M →ₗ[R] M₂` and `M →L[R] M₂` are
  `unique`;
* `pi.unique`: if each `β a` is `unique`, then `Π a, β a` is `unique`;
* rename `function.injective.comap_subsingleton` to
  `function.injective.subsingleton`;
* add `unique.mk'` and `function.injective.unique`;
* add a few `simp` lemmas for `default`;
* drop `nonempty_unique_or_exists_ne` and `subsingleton_or_exists_ne`;
* rename `linear_map.coe_inj` to `coe_injective` and `continuous_linear_map.coe_inj` to `coe_fn_injective`,
  make them use `function.injective`.
Motivated by #4407

2020-10-08 15:41:02 7b42c71
feat(archive/imo): revive @kbuzzard's imo2019_q1 (#4377)

2020-10-08 15:40:59 9b0d30c
feat(number_theory/arithmetic_function): define `is_multiplicative` on `arithmetic_function`s, provides examples (#4312)
Provides a few basic examples of important arithmetic functions
Defines what it means for an arithmetic function to be multiplicative

2020-10-08 13:27:56 5a01549
lint(multiset/pi): remove unused instance (#4526)
Removes an unused instance from `multiset/pi`

2020-10-08 13:27:54 48a3604
feat(logic/nontrivial): a tactic to summon nontrivial instances (#4374)
```
Given a goal `a = b` or `a ≤ b` in a type `α`, generates an additional hypothesis `nontrivial α`
(as otherwise `α` is a subsingleton and the goal is trivial).
Alternatively, given a hypothesis `a ≠ b` or `a < b` in a type `α`, tries to generate a `nontrivial α`
hypothesis from existing hypotheses using `nontrivial_of_ne` and `nontrivial_of_lt`.
```

2020-10-08 10:23:23 43f52dd
chore(algebra/char_zero): rename vars, add `with_top` instance (#4523)
Motivated by #3135.
* Use `R` as a `Type*` variable;
* Add `add_monoid_hom.map_nat_cast` and `with_top.coe_add_hom`;
* Drop versions of `char_zero_of_inj_zero`, use `[add_left_cancel_monoid R]` instead.

2020-10-08 05:32:06 34a4471
chore(data/quot): `quot.mk` etc are surjective (#4517)

2020-10-08 05:32:04 4f75760
chore(*/hom,equiv): Split `monoid_hom` into more fundamental structures, and reuse them elsewhere (#4423)
Notably this adds `add_hom` and `mul_hom`, which become base classes of `add_equiv`, `mul_equiv`, `linear_map`, and `linear_equiv`.
Primarily to avoid breaking assumptions of field order in `monoid_hom` and `add_monoid_hom`, this also adds `one_hom` and `zero_hom`.
A massive number of lemmas here are totally uninteresting and hold for pretty much all objects that define `coe_to_fun`.
This PR translates all those lemmas, but doesn't bother attempting to generalize later ones.

2020-10-08 04:37:20 b4dc912
ci(*): run style lint in parallel job, fix update-copy-mod-doc-exceptions.sh (#4513)
Followup to #4486:
- run the linter in a separate parallel job, per request
- the update-*.sh script now correctly generates a full exceptions file
- add some more comments to the shell scripts

2020-10-08 04:37:18 3d1d4fb
feat(data/polynomial/degree/trailing_degree): fixed formatting and streamlined a couple of proofs (#4509)

2020-10-08 03:44:56 7a71554
doc(tactic/slim_check): improve advice in error message (#4520)
The error message in `slim_check` suggests to look for `testable` and it now specifies which namespace to find `testable` in.

2020-10-08 01:08:47 e9d1dc4
chore(scripts): update nolints.txt (#4521)
I am happy to remove some nolints for you!

2020-10-07 23:27:32 a5b0376
chore(topology/algebra/monoid,group): rename variables (#4516)
Use `M`, `N` for monoids, `G`, `H` for groups.

2020-10-07 21:39:17 d67062f
chore(algebra/pointwise): add `###` here and there (#4514)

2020-10-07 21:39:15 fa8b7ba
chore(topology/*): use dot notation for `is_open.prod` and `is_closed.prod` (#4510)

2020-10-07 20:25:40 2b89d59
chore(ring_theory/coprime): weaken assumptions of finset.prod_dvd_of_coprime (#4506)

2020-10-07 18:09:31 4635aee
chore(algebra/continuous_functions): `coninuous` -> `continuous` (#4508)

2020-10-07 18:09:28 4e8427e
fix(data/list/defs): remove map_head; rename map_last to modify_last (#4507)
`map_head` is removed in favour of the equivalent `modify_head`.
`map_last` is renamed to `modify_last` for consistency with the other
`modify_*` functions.

2020-10-07 18:09:25 a4a20ac
doc(data/num/basic): added doc-strings to most defs (#4439)

2020-10-07 16:08:11 8f9c10f
feat(data/matrix): add `matrix.mul_sub` and `matrix.sub_mul` (#4505)
I was quite surprised that we didn't have this yet, but I guess they weren't needed when `sub_eq_add_neg` was still `@[simp]`.

2020-10-07 16:08:08 2d34e94
chore(*big_operators*): line length (#4504)

2020-10-07 16:08:05 6b50fb9
fix(tactic/ring): use int_sub_hack to avoid defeq blowup (#4503)

2020-10-07 14:27:03 4db1c72
ci(scripts/*): linting for copyright, imports, module docstrings, line length (#4486)
This PR adds some scripts to check the `.lean` files in `src/` and `archive/` for the following issues (which are out of scope for the current linter):
- Malformed or missing copyright header
- More than one file imported per line
- Module docstring missing, or too late
- Lines of length > 100 (unless they contain `http`)
The scripts are run at the end of our "tests" job since the "lint" job usually takes longer to run. (This isn't a big deal though, since they're quick.)
Current problems are saved in the file `scripts/copy-mod-doc-exceptions.txt` and ignored so that we don't have to fix everything up front. Over time, this should get shorter as we fix things!
Separately, this also fixes some warnings in our GitHub actions workflow (see [this blog post](https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/)).

2020-10-07 14:26:58 c9d4567
lint(data/matrix/basic): add definition docstrings (#4478)

2020-10-07 10:12:05 6a85279
fix(tactic/doc_commands): do not construct json by hand (#4501)
Fixes three lines going over the 100 character limit.
The first one was a hand-rolled JSON serializer, I took the liberty to migrate it to the new `json` API.

2020-10-07 10:12:04 0386ada
chore(data/tree): linting (#4499)

2020-10-07 10:12:02 cbbc123
lint(category_theory/equivalence): docstring and a module doc (#4495)

2020-10-07 10:12:00 8a4b491
feat(ring_theory/witt_vector/structure_polynomial): {map_}witt_structure_int (#4465)
This is the second PR in a series on a fundamental theorem about Witt polynomials.
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-10-07 07:56:34 e5ce9d3
chore(data/quot): linting (#4500)

2020-10-07 07:56:32 ed9ef1b
chore(*): normalise copyright headers (#4497)
This diff makes sure that all files start with a copyright header
of the following shape
```
/-
Copyright ...
... Apache ...
Author...
-/
```
Some files used to have a short description of the contents
in the same comment block.
Such comments have *not* been turned into module docstrings,
but simply moved to a regular comment block below the copyright header.
Turning these comments into good module docstrings is an
effort that should be undertaken in future PRs.

2020-10-07 06:23:11 3c75527
lint(group_theory/*): docstrings and an inhabited instance (#4493)
An inhabited instance for `presented_group`
Docstrings in `group_theory/abelianization` and `group_theory/congruence`.

2020-10-07 04:25:17 8c528b9
lint(group_theory/perm/*): docstrings (#4492)
Adds missing docstrings in `group_theory/perm/cycles` and `group_theory/perm/sign`.

2020-10-07 01:06:50 cb3118d
chore(scripts): update nolints.txt (#4490)
I am happy to remove some nolints for you!

2020-10-07 01:06:47 2e77ef6
lint(order/lexographic, pilex): docstrings (#4489)
Docstrings in `order/lexographic` and `order/pilex`

2020-10-07 01:06:45 afffab1
lint(order/order_iso_nat): docstrings (#4488)
Adds docstrings to `rel_embedding.nat_lt` and `rel_embedding.nat_gt`

2020-10-07 01:06:42 93cdc3a
feat(control/traversable/basic): composition of applicative transformations (#4487)
Added composition law for applicative transformations, added rest of interface for coercion of applicative transformations to functions (lifted from `monoid_hom`), and proved composition was associative and has an identity.  Also corrected some documentation.

2020-10-07 01:06:41 fe8b631
lint(ring_theory/*): docstrings (#4485)
Docstrings in `ring_theory/ideal/operations`, `ring_theory/multiplicity`, and `ring_theory/ring_invo`.

2020-10-06 22:45:54 7488f8e
lint(order/bounded_lattice): docstring (#4484)

2020-10-06 22:45:52 f4ccbdf
feat(data/nat/basic): add_succ_lt_add (#4483)
Add the lemma that, for natural numbers, if `a < b` and `c < d` then
`a + c + 1 < b + d` (i.e. a stronger version of `add_lt_add` for the
natural number case).  `library_search` did not find this in mathlib.

2020-10-06 22:45:50 f88234d
feat(measure_theory): integral of a non-negative function is >0 iff μ(support f) > 0 (#4410)
Also add a few supporting lemmas

2020-10-06 21:23:34 5192fd9
feat(data/polynomial/degree/basic): add lemmas dealing with monomials, their support and their nat_degrees (#4475)

2020-10-06 21:23:32 d768e46
feat(ring_theory/witt_vector/structure_polynomial): witt_structure_rat{_prop} (#4464)
This is the first PR in a series on a fundamental theorem for Witt polynomials.
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-10-06 19:36:49 7948b5a
chore(*): fix authorship for split files (#4480)
A few files with missing copyright headers in #4477 came from splitting up older files, so the attribution was incorrect:
- `data/setoid/partition.lean` was split from `data/setoid.lean` in #2853.
- `data/finset/order.lean` was split from `algebra/big_operators.lean` in #3495.
- `group_theory/submonoid/operations.lean` was split from `group_theory/submonoid.lean` in  #3058.

2020-10-06 17:40:04 ac05889
chore(topology/list): one import per line (#4479)
This one seems to have slipped through previous efforts

2020-10-06 15:23:11 e559ca9
chore(*): add copyright headers (#4477)

2020-10-06 15:23:09 7416127
feat(data/polynomial/ring_division): add multiplicity of sum of polynomials is at least minimum of multiplicities (#4442)
I've added the lemma `root_multiplicity_add` inside `data/polynomial/ring_division` that says that the multiplicity of a root in a sum of two polynomials is at least the minimum of the multiplicities.

2020-10-06 12:41:50 8d19939
feat(*): make `int.le` irreducible (#4474)
There's very rarely a reason to unfold `int.le` and it can create trouble: https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/deep.20recursion.20was.20detected.20at.20'replace'

2020-10-06 12:41:47 99e308d
chore(parity): even and odd in semiring (#4473)
Replaces the ad-hoc `nat.even`, `nat.odd`, `int.even` and `int.odd` by definitions that make sense in semirings and get that `odd` can be `rintros`/`rcases`'ed. This requires almost no change except that `even` is not longer usable as a dot notation (which I see as a feature since I find `even n` to be more readable than `n.even`).

2020-10-06 12:41:45 1d1a041
chore(data/mv_polynomial/basic): coeff_mul, more golfing and speedup (#4472)

2020-10-06 12:41:43 8cebd2b
chore(algebra/algebra): Split subalgebras into their own file (#4471)
This matches how `subring` and `submonoid` both have their own files.
This also remove `noncomputable theory` which is unnecessary for almost all the definitions

2020-10-06 12:41:42 94bc31d
lint(logic/unique): module doc, docstring (#4461)

2020-10-06 12:41:40 2fc6598
lint(group_theory/eckmann_hilton): docs, module docs, unused argument (#4459)

2020-10-06 12:41:38 f4207aa
feat(data/*): lemmas about lists and finsets (#4457)
A part of #4316

2020-10-06 12:41:36 1fa07c2
chore(category_theory/monoidal): add module docs (#4454)

2020-10-06 12:41:33 4d9406e
feat(geometry/euclidean/monge_point): orthocentric systems (#4448)
Define orthocentric systems of points, and prove some basic properties
of them.  In particular, if we say that an orthocentric system
consists of four points, one of which is the orthocenter of the
triangle formed by the other three, then each of the points is the
orthocenter of the triangle formed by the other three, and all four
triangles have the same circumradius.

2020-10-06 10:22:31 e9b43b6
lint(data/equiv/ring): docstrings, inhabited (#4460)

2020-10-06 10:22:29 58a54d3
chore(category_theory/*): doc-strings (#4453)

2020-10-06 10:22:27 6b59725
chore(control/traversable/{basic,equiv,instances,lemmas}): linting (#4444)
The `nolint`s in `instances.lean` are there because all the arguments need to be there for `is_lawful_traversable`.  In the same file, I moved `traverse_map` because it does not need the `is_lawful_applicative` instances.

2020-10-06 10:22:25 372d294
feat(data/finsupp): lift a collection of `add_monoid_hom`s to an `add_monoid_hom` on `α →₀ β` (#4395)

2020-10-06 09:02:45 b1d3ef9
chore(data/mv_polynomial/basic): speedup coeff_mul (#4469)

2020-10-06 09:02:43 c08a868
feat(trailing_degree): added two lemmas support_X, support_X_empty computing the support of X, simplified a couple of lemmas (#4294)

2020-10-06 09:02:41 fc7e943
feat(normed_space/basic): remove localized notation (#4246)
Remove notation for `tendsto` in `nhds`. 
Also make `is_bounded_linear_map.tendsto` protected.

2020-10-06 07:07:40 32b5b68
chore(topology/compacts): inhabit instances (#4462)

2020-10-06 07:07:38 d3b1d65
lint(measure_theory): docstrings and style (#4455)

2020-10-06 02:54:28 523bddb
doc(data/nat/prime, data/int/basic, data/int/modeq): docstrings (#4445)
Filling in docstrings on `data/nat/prime`, `data/int/basic`, `data/int/modeq`.

2020-10-06 02:54:26 cd78599
lint(category_theory/monad): doc-strings (#4428)

2020-10-06 02:04:28 a228af6
chore(scripts): update nolints.txt (#4456)
I am happy to remove some nolints for you!

2020-10-06 00:55:20 27b6c23
lint(category_theory/limits): docstrings and inhabited instances (#4435)

2020-10-06 00:09:52 37879aa
feat(undergrad): minimal polynomial (#4308)
Adds minimal polynomial of endomorphisms to the undergrad list, although its use will be hard to guess for undergrads.

2020-10-05 23:18:37 432da5f
feat(measure_theory/integration): add lintegral_with_density_eq_lintegral_mul (#4350)
This is Exercise 1.2.1 from Terence Tao's "An Epsilon of Room"

2020-10-05 22:01:48 97c444e
lint(topology/algebra): docstrings (#4446)

2020-10-05 19:45:24 21158c4
lint(data/pnat): Docstrings and an unused argument in `pnat.basic`, `pnat.factors` (#4443)
Adds docstrings
Changes `div_exact` from having one unused input of type `k | m` to `div_exact m k`.

2020-10-05 19:45:21 45347f9
lint(src/order/rel_iso): docstrings and inhabited (#4441)

2020-10-05 19:45:19 2127165
chore(linear_algebra/basis): split off `linear_independent.lean` (#4440)
The file `basis.lean` was getting rather long (1500 lines), so I decided to split it into two not as long files at a natural point: everything using `linear_independent` but not `basis` can go into a new file `linear_independent.lean`. As a result, we can import `basis.lean` a bit later in the `ring_theory` hierarchy.

2020-10-05 19:45:18 88c76ab
feat(order/filter/ultrafilter): Add variant of `exists_ultrafilter`. (#4436)
The lemma `exists_ultrafilter` tells us that any proper filter can be extended to an ultrafilter (using Zorn's lemma). This PR adds a variant, called `exists_ultrafilter_of_finite_inter_nonempty` which says that any collection of sets `S` can be extended to an ultrafilter whenever it satisfies the property that the intersection of any finite subcollection `T` is nonempty.

2020-10-05 19:45:15 9151532
lint(order/conditionally_complete_lattice): docstrings (#4434)

2020-10-05 19:45:13 221ec60
feat(ring_theory/ideal): ideals in product rings (#4431)

2020-10-05 19:45:10 f9e3779
lint(category_theory/whiskering): add doc-strings (#4417)

2020-10-05 19:45:08 d2140ef
feat(algebra/gcd_monoid): `gcd_mul_dvd_mul_gcd` (#4386)
Adds a `gcd_monoid` version of `nat.gcd_mul_dvd_mul_gcd`

2020-10-05 17:20:44 c58c4e6
docs(tactic/{fin_cases,lift}): lint (#4421)

2020-10-05 17:20:42 e89d0ed
chore(*/multilinear): generalize `comp_linear_map` to a family of linear maps (#4408)
Together with #4316 this will give us multilinear maps corresponding to monomials.

2020-10-05 15:18:22 7f74e6b
feat(data/mv_polynomial/basic): map_map_range_eq_iff (#4438)
Split off from #4268

2020-10-05 15:18:20 39f5d6b
feat(data/rat/basic): denom_eq_one_iff (#4437)
Split off from #4268

2020-10-05 15:18:18 22398f3
chore(src/linear_algebra): linting (#4427)

2020-10-05 11:39:07 ca269b4
feat(linear_algebra/affine_space/finite_dimensional): collinearity (#4433)
Define collinearity of a set of points in an affine space for a vector
space (as meaning the `vector_span` has dimension at most 1), and
prove some basic lemmas about it, leading to three points being
collinear if and only if they are not affinely independent.

2020-10-05 11:39:05 b0fe280
chore(category_theory/yoneda): doc-strings (#4429)

2020-10-05 11:39:03 1501bf6
chore(data/fin2): linting (#4426)

2020-10-05 11:39:01 dd73dd2
chore(linear_algebra/finsupp*): linting (#4425)

2020-10-05 11:38:58 c058524
chore(data/fintype/basic): linting (#4424)

2020-10-05 11:38:56 70b8e82
data(data/dlist/{basic,instances}): linting (#4422)

2020-10-05 11:38:54 da1265c
chore(data/buffer/basic): linting (#4420)

2020-10-05 11:38:52 768ff76
chore(data/array/lemmas): linting (#4419)

2020-10-05 11:38:50 c370bd0
chore(data/W): linting (#4418)

2020-10-05 11:38:48 6a4fd24
lint(category_theory/adjunction): add doc-strings (#4415)

2020-10-05 11:38:46 17b607f
chore(algebra/direct_sum): linting (#4412)

2020-10-05 11:38:43 b44e927
feat(data/finsupp): Make `finsupp.dom_congr` a `≃+` (#4398)
Since this has additional structure, it may as well be part of the type

2020-10-05 11:38:41 54a2c6b
chore(algebra/group/with_one): prove `group_with_zero` earlier, drop custom lemmas (#4385)

2020-10-05 11:38:39 7236084
refactor(linear_algebra/matrix): consistent naming (#4345)
The naming of the maps between `linear_map` and `matrix` was a mess. This PR proposes to clean it up by standardising on two forms:
 * `linear_map.to_matrix` and `matrix.to_linear_map` are the equivalences (in the respective direction) between `M₁ →ₗ[R] M₂` and `matrix m n R`, given bases for `M₁` and `M₂`.
 * `linear_map.to_matrix'` and `matrix.to_lin'` are the equivalences between `((n → R) →ₗ[R] (m → R))` and `matrix m n R` in the respective directions
The following declarations are renamed:
 * `comp_to_matrix_mul` -> `linear_map.to_matrix'_comp`
 * `linear_equiv_matrix` -> `linear_map.to_matrix`
 * `linear_equiv_matrix_{apply,comp,id,mul,range}` -> `linear_map.to_matrix_{apply,comp,id,mul,range}`
 * `linear_equiv_matrix_symm_{apply,mul,one}` -> `matrix.to_lin_{apply,mul,one}`
 * `linear_equiv_matrix'` -> `linear_map.to_matrix'`
 * `linear_map.to_matrix_id` ->`linear_map.to_matrix'_id`
 * `matrix.mul_to_lin` -> `matrix.to_lin'_mul`
 * `matrix.to_lin` -> `matrix.mul_vec_lin` (which should get simplified to `matrix.to_lin'`)
 * `matrix.to_lin_apply` -> `matrix.to_lin'_apply`
 * `matrix.to_lin_one` -> `matrix.to_lin'_one`
 * `to_lin_to_matrix` -> `matrix.to_lin'_to_matrix'`
 * `to_matrix_to_lin` -> `linear_map.to_matrix'_to_lin'`
The following declarations are deleted as unnecessary:
 * `linear_equiv_matrix_apply'` (use `linear_map.to_matrix_apply` instead)
 * `linear_equiv_matrix'_apply` (the original `linear_map.to_matrix` doesn't exist any more)
 * `linear_equiv_matrix'_symm_apply` (the original `matrix.to_lin` doesn't exist any more)
 * `linear_map.to_matrixₗ` (use `linear_map.to_matrix'` instead)
 * `linear_map.to_matrix` (use `linear_map.to_matrix'` instead)
 * `linear_map.to_matrix_of_equiv` (use `linear_map.to_matrix'_apply` instead)
 * `matrix.eval` (use `matrix.to_lin'` instead)
 * `matrix.to_lin.is_add_monoid_hom` (use `linear_equiv.to_add_monoid_hom` instead)
 * `matrix.to_lin_{add,zero,neg}` (use `linear_equiv.map_{add,zero,neg} matrix.to_lin'` instead)
 * `matrix.to_lin_of_equiv` (use `matrix.to_lin'_apply` instead)
Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Refactoring.20.60linear_map.20.3C-.3E.20matrix.60

2020-10-05 08:49:57 67b312c
chore(logic/relation): linting (#4414)

2020-10-05 08:49:55 186660c
feat(*): assorted `simp` lemmas for IMO 2019 q1 (#4383)
* mark some lemmas about cancelling in expressions with `(-)` as `simp`;
* simplify `a * b = a * c` to `b = c ∨ a = 0`, and similarly for
  `a * c = b * c;
* change `priority` of `monoid.has_pow` and `group.has_pow` to the
  default priority.
* simplify `monoid.pow` and `group.gpow` to `has_pow.pow`.

2020-10-05 08:49:53 8f4475b
feat(combinatorics/partitions): Add partitions (#4303)

2020-10-05 07:39:36 ca679ac
chore(algebra/direct_limit): linting (#4411)

2020-10-05 07:39:32 581b141
feat(data/complex): norm_cast lemmas (#4405)
Mark various existing lemmas such as `abs_of_real` and `of_real_exp`
as `norm_cast` lemmas so that `norm_cast` and related tactics can
handle expressions involving those functions, and add lemmas
`of_real_prod` and `of_real_sum` to allow those tactics to work with
sums and products involving coercions from real to complex.

2020-10-05 07:39:30 1c8bb42
feat(linear_algebra/affine_space/finite_dimensional): more lemmas (#4389)
Add more lemmas concerning dimensions of affine spans of finite
families of points.  In particular, various forms of the lemma that `n + 1`
points are affinely independent if and only if their `vector_span` has
dimension `n` (or equivalently, at least `n`).  With suitable
definitions, this is equivalent to saying that three points are
affinely independent or collinear, four are affinely independent or
coplanar, etc., thus preparing for giving a definition of `collinear`
(for any set of points in an affine space for a vector space) in terms
of dimension and proving some basic properties of it including
relating it to affine independence.

2020-10-05 07:39:28 565e961
feat(number_theory/arithmetic_function): Define arithmetic functions/the Dirichlet ring (#4352)
Defines a type `arithmetic_function A` of functions from `nat` to `A` sending 0 to 0
Defines the Dirichlet ring structure on `arithmetic_function A`

2020-10-05 05:24:10 9ab7f05
feat(category_theory/limits/terminal): limit of a diagram with initial object (#4404)
If the index category for a functor has an initial object, the image of the functor is a limit.

2020-10-05 05:24:08 91d9e96
chore(algebra/ring/basic): docs, simps (#4375)
* add docstrings to all typeclasses in `algebra/ring/basic`;
* add `ring_hom.inhabited := ⟨id α⟩` to make linter happy;
* given `f : α →+* β`, simplify `f.to_monoid_hom` and
`f.to_add_monoid_hom` to coercions;
* add `simp` lemmas for coercions of `ring_hom.mk f _ _ _ _` to
`monoid_hom` and `add_monoid_hom`.

2020-10-05 05:24:06 08cdf37
feat(analysis/complex/roots_of_unity): complex (primitive) roots of unity (#4330)

2020-10-05 04:08:17 bf99889
feat(category_theory/limits): lift self limit (#4403)
A couple of little lemmas to simplify lift of a limit cone.

2020-10-05 02:16:27 916b5d3
feat(topology): completion of separable space is separable (#4399)
API change:
* `dense` renamed to `exists_between`;
* new `dense (s : set α)` means `∀ x, x ∈ closure s`.

2020-10-05 01:18:46 fc09dba
feat(analysis/special_functions/pow): exp_mul (#4409)
Add the lemma that `exp (x * y) = (exp x) ^ y`, for real `x` and `y`.

2020-10-04 20:49:23 d13d21b
feat(algebra/big_operators/order): bounding finite fibration cardinalities from below (#4396)
Also including unrelated change `finset.inter_eq_sdiff_sdiff`.

2020-10-04 19:18:31 f437365
feat(linear_algebra/dimension): one-dimensional spaces (#4400)
Add some lemmas about the vectors in spaces and subspaces of dimension
at most 1.

2020-10-04 15:27:55 8f53676
feat(data/nat): Slightly strengthen nat.coprime_of_dvd/nat.coprime_of_dvd' (#4368)
It is sufficient to consider prime factors.
The theorems now depend on nat.prime (data/nat/prime.lean), which depends on
data/nat/gcd.lean, so I moved them to prime.lean.

2020-10-04 11:10:48 729b60a
feat(data/set/basic): subsingleton_coe (#4388)
Add a lemma relating a set being a subsingleton set to its coercion to
a type being a subsingleton type.

2020-10-04 11:10:45 e8b65e6
feat(data/set/basic): eq_singleton_iff_unique_mem (#4387)
We have this lemma for `finset`.  Add a version for `set` (with the
same name).

2020-10-04 11:10:43 e1b1d17
feat(algebra/group): construct `add_monoid_hom` from `map_sub` (#4382)

2020-10-04 11:10:41 231271d
chore(data/equiv/mul_add): add more `equiv` lemmas to `mul_equiv` namespace (#4380)
Also make `apply_eq_iff_eq` and `apply_eq_iff_eq_symm_apply` use
implicit arguments.

2020-10-04 11:10:39 5d35b9a
feat(algebra/gcd_monoid, data/*set/gcd): a few lemmas about gcds (#4354)
Adds lemmas about gcds useful for proving Gauss's Lemma

2020-10-04 09:48:24 509dd9e
feat(linear_algebra/basic): span_singleton smul lemmas (#4394)
Add two submodule lemmas relating `span R ({r • x})` and `span R {x}`.

2020-10-04 06:59:45 c3d0835
chore(data/mv_polynomial): rename `pderivative` to `pderiv` (#4381)
This name matches `fderiv` and `deriv` we have in `analysis/`.

2020-10-04 05:39:03 e902cae
feat(category_theory/limits/cofinal): better API for cofinal functors (#4276)
This PR
1. Proves that `F : C ⥤ D` being cofinal is equivalent to `colimit (F ⋙ G) ≅ colimit G` for all `G : D ⥤ E`. (Previously we just had the implication.)
2. Proves that if `F` is cofinal then `limit (F.op ⋙ H) ≅ limit H` for all `H: Dᵒᵖ ⥤ E`.

2020-10-04 03:45:24 e738e90
feat(algebra/group_power/identities): named ring identities (#4390)
This PR adds a new file containing some "named" ring identities provable by `ring`.

2020-10-04 01:55:07 f2044a5
chore(scripts): update nolints.txt (#4392)
I am happy to remove some nolints for you!

2020-10-03 23:52:40 333c216
chore(algebra/group/type_tags): Use ≃ instead of → (#4346)
These functions are all equivalences, so we may as well expose that in their type
This also fills in some conversions that were missing.
Unfortunately this requires some type ascriptions in a handful of places.
It might be possible to remove these somehow.
This zulip thread contains a mwe: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Type.20inference.20on.20.60.E2.86.92.60.20vs.20.60.E2.89.83.60/near/211922501.

2020-10-03 20:51:17 a0ba5e7
doc(data/real/*): add a few docstrings, `ereal.has_zero`, and `ereal.inhabited` (#4378)

2020-10-03 20:51:15 e593ffa
feat(algebra/ordered*): more simp lemmas (#4359)
Simplify expressions like `0 < a * b`, `0 < a / b`, `a / b < 1` etc. to FOL formulas of inequalities on `a`, `b`.

2020-10-03 18:56:38 b790b27
feat(slim_check): sampleable instance for generating functions and injective functions (#3967)
This also adds `printable_prop` to trace why propositions hold or don't hold and `sampleable_ext` to allow the data structure generated and shrunken by `slim_check` to have a different type from the type we are looking for.

2020-10-03 15:26:49 c39170e
doc(*): add a few short module docstrings (#4370)

2020-10-03 10:25:54 946ab02
chore(.github/workflows): github action for crossing off PR dependencies (#4367)

2020-10-03 05:00:16 069952b
chore(category_theory/limits/binary_products): weaken assumptions (#4373)
weakens the assumptions on which limits need to exist for these constructions
not much of a change but the assumptions I used were too strong so just a small fix

2020-10-03 05:00:15 9e455c1
feat(data/monoid_algebra): Allow R ≠ k in semimodule R (monoid_algebra k G) (#4365)
Also does the same for the additive version `semimodule R (add_monoid_algebra k G)`.

2020-10-03 04:08:49 6ab3eb7
chore(category_theory/limits/equalizers): some equalizer fixups (#4372)
A couple of minor changes for equalizers:
- Add some `simps` attributes
- Removes some redundant brackets
- Simplify the construction of an iso between cones (+dual)
- Show the equalizer fork is a limit (+dual)

2020-10-03 01:06:52 6a52400
chore(scripts): update nolints.txt (#4371)
I am happy to remove some nolints for you!

2020-10-02 20:49:45 da24add
feat(data/multiset): ordered sum lemmas (#4305)
Add some lemmas about products in ordered monoids and sums in ordered add monoids, and a multiset count filter lemma (and a rename of a count filter lemma)

2020-10-02 18:01:52 2634c1b
feat(category_theory/cones): map_cone_inv as an equivalence (#4253)
When `G` is an equivalence, we have `G.map_cone_inv : cone (F ⋙ G) → cone F`, and that this is an inverse to `G.map_cone`, but not quite that these constitute an equivalence of categories. This PR fixes that.

2020-10-02 13:06:24 2ce359b
feat(data/nat/parity,data/int/parity): odd numbers (#4357)
As discussed at
<https://leanprover.zulipchat.com/#narrow/stream/208328-IMO-grand-challenge/topic/formalizing.20IMO.20problems>,
define `nat.odd` and `int.odd` to allow a more literal expression
(outside of mathlib; for example, in formal olympiad problem
statements) of results whose informal statement refers to odd numbers.
These definitions are not expected to be used in mathlib beyond the
`simp` lemmas added here that translate them back to `¬ even`.  This
is similar to how `>` is defined but almost all mathlib results are
expected to use `<` instead.
It's likely that expressing olympiad problem statements literally in
Lean will end up using some other such definitions, where avoiding API
duplication means almost everything relevant in mathlib is developed
in terms of the expansion of the definition.

2020-10-02 12:12:21 53570c0
chore(README): add zulip badge (#4362)

2020-10-02 10:14:33 eeb9bb6
feat(data/polynomial/coeff): single-variate `C_dvd_iff_dvd_coeff` (#4355)
Adds a single-variate version of the lemma `mv_polynomial.C_dvd_iff_dvd_coeff`
(Useful for Gauss's Lemma)

2020-10-02 10:14:31 8876ba2
feat(ring_theory/roots_of_unity): (primitive) roots of unity (#4260)

2020-10-02 08:35:04 d631126
chore(algebra): move algebra and monoid algebra to algebra/ (#4298)
On the basis that all the basic definitions of algebraic gadgets are otherwise in `src/algebra/`, I'd like to move `ring_theory/algebra.lean`, `ring_theory/algebra_operations.lean`, and `data/monoid_algebra.lean` there too.

2020-10-02 07:19:29 1f91d93
chore(ring_theory/power_series): rename variables (#4361)
Use `R`, `S`, `T` for (semi)rings and `k` for a field.

2020-10-02 05:57:43 140db10
chore(data/monoid_algebra): Make the style in `lift` consistent (#4347)
This continues from a06c87ed28989d062aa3d5324e880e62edf4a2f8, which changed add_monoid_algebra.lift but not monoid_algebra.lift.
Note only the additive proof needs `erw` (to unfold `multiplicative`).

2020-10-02 01:04:21 d41f386
chore(scripts): update nolints.txt (#4358)
I am happy to remove some nolints for you!

2020-10-01 20:40:02 4ef680b
feat(group_theory): subgroups of real numbers (#4334)
This fills the last hole in the "Topology of R" section of our undergrad curriculum: additive subgroups of real numbers are either dense or cyclic. Most of this PR is supporting material about ordered abelian groups. 
Co-Authored-By: Heather Macbeth <25316162+hrmacbeth@users.noreply.github.com>

2020-10-01 18:43:08 4851857
chore(analysis/normed_space): define `norm_one_class` (#4323)
Many normed rings have `∥1⊫1`. Add a typeclass mixin for this property.
API changes:
* drop `normed_field.norm_one`, use `norm_one` instead;
* same with `normed_field.nnnorm_one`;
* new typeclass `norm_one_class` for `∥1∥ = 1`;
* add `list.norm_prod_le`, `list.norm_prod_le`, `finset.norm_prod_le`, `finset.norm_prod_le'`:
  norm of the product of finitely many elements is less than or equal to the product of their norms;
  versions with prime assume that a `list` or a `finset` is nonempty, while the other versions
  assume `[norm_one_class]`;
* rename `norm_pow_le` to `norm_pow_le'`, new `norm_pow_le` assumes `[norm_one_class]` instead
  of `0 < n`;
* add a few supporting lemmas about `list`s and `finset`s.

2020-10-01 17:37:36 d5834ee
feat(data/real/irrational): add a lemma to deduce nat_degree from irrational root (#4349)
This PR is splitted from #4301 .

2020-10-01 17:37:34 ddaa325
feat(archive/imo): formalize IMO 1969 problem 1 (#4261)
This is a formalization of the problem and solution for the first problem on the 1969 IMO:
Prove that there are infinitely many natural numbers $a$ with the following property: the number $z = n^4 + a$ is not prime for any natural number $n$

2020-10-01 16:43:25 7767ef8
feat(number_theory/divisors): defines the finsets of divisors/proper divisors, perfect numbers, etc. (#4310)
Defines `nat.divisors n` to be the set of divisors of `n`, and `nat.proper_divisors` to be the set of divisors of `n` other than `n`.
Defines `nat.divisors_antidiagonal` in analogy to other `antidiagonal`s used to define convolutions
Defines `nat.perfect`, the predicate for perfect numbers

2020-10-01 14:28:11 f10dda0
feat(data/nat/basic): simp-lemmas for bit0 and bit1 mod two (#4343)
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>

2020-10-01 14:28:07 0fc7b29
feat(data/mv_polynomial): stub on invertible elements (#4320)
More from the Witt vector branch.

2020-10-01 14:28:01 3d58fce
feat(linear_algebra): determinant of `matrix.block_diagonal` (#4300)
This PR shows the determinant of `matrix.block_diagonal` is the product of the determinant of each subblock.
The only contributing permutations in the expansion of the determinant are those which map each block to the same block. Each of those permutations has the form `equiv.prod_congr_left σ`. Using `equiv.perm.extend` and `equiv.prod_congr_right`, we can compute the sign of `equiv.prod_congr_left σ`, and with a bit of algebraic manipulation we reach the conclusion.

2020-10-01 14:27:59 13e9cc4
feat(linear_algebra/exterior_algebra): Add an exterior algebra (#4297)
This adds the basic exterior algebra definitions using a very similar approach to `universal_enveloping_algebra`.
It's based off the `exterior_algebra` branch, dropping the `wedge` stuff for now as development in multilinear maps is happening elsewhere.

2020-10-01 14:27:57 268073a
feat(geometry/manifold): derivative of the zero section of the tangent bundle (#4292)
We show that the zero section of the tangent bundle to a smooth manifold is smooth, and compute its derivative.
Along the way, some streamlining of supporting material.

2020-10-01 14:27:55 11cdc8c
feat(data/polynomial/*) : as_sum_support  (#4286)

2020-10-01 12:28:37 0ccc157
feat(data/nat/fact, analysis/specific_limits): rename nat.fact, add few lemmas about its behaviour along at_top (#4309)
Main content : 
- Rename `nat.fact` to `nat.factorial`, and add notation `n!` in locale `factorial`. This fixes #2786
- Generalize `prod_inv_distrib` to `comm_group_with_zero` *without any nonzero assumptions*
- `factorial_tendsto_at_top` : n! --> infinity as n--> infinity
- `tendsto_factorial_div_pow_self_at_top` : n!/(n^n) --> 0 as n --> infinity

2020-10-01 09:16:51 9c241b0
feat(*): a few more tests for `summable`, docstrings (#4325)
### Important new theorems:
* `summable_geometric_iff_norm_lt_1`: a geometric series in a normed field is summable iff the norm of the common ratio is less than 1;
* `summable.tendsto_cofinite_zero`: divergence test: if `f` is a `summable` function, then `f x` tends to zero along `cofinite`;
### API change
* rename `cauchy_seq_of_tendsto_nhds` to `filter.tendsto.cauchy_seq` to enable dot syntax.

2020-10-01 09:16:49 fb2b1de
feat(algebra/ordered_ring): ask for 0 < 1 earlier. (#4296)
It used to be that `linear_ordered_semiring` asked for `0 < 1`, while `ordered_semiring` didn't.
I'd prefer that `ordered_semiring` asks for this already:
1. because lots of interesting examples (e.g. rings of operators) satisfy this property
2. because the rest of mathlib doesn't care

2020-10-01 07:41:14 9ceb114
feat(analysis/normed_space/inner_product): Define the inner product based on `is_R_or_C` (#4057)

2020-10-01 02:57:05 1b97326
feat(data/fintype): pigeonhole principles (#4096)
Add pigeonhole principles for finitely and infinitely many pigeons in finitely many holes. There are also strong versions of these, which say that there is a hole containing at least as many pigeons as the average number of pigeons per hole. Fixes #2272.

2020-10-01 01:07:36 af99416
chore(scripts): update nolints.txt (#4341)
I am happy to remove some nolints for you!

2020-09-30 20:29:32 bcc7c02
feat(geometry/manifold): smooth bundled maps (#3641)

2020-09-30 19:43:08 c04e339
feat(archive/imo): formalize IMO 1959 problem 1 (#4340)
This is a formalization of the problem and solution for the first problem on the 1959 IMO:
Prove that the fraction (21n+4)/(14n+3) is irreducible for every natural number n.

2020-09-30 18:14:45 23b04b0
chore(ring_theory/algebra): Mark algebra.mem_top as simp (#4339)
This is consistent with `subsemiring.mem_top` and `submonoid.mem_top`, both of which are marked simp.

2020-09-30 18:14:43 decd67c
feat(analysis/convex): slope_mono_adjacent (#4307)

2020-09-30 16:47:25 a06c87e
chore(*): Tidy some proofs and variables (#4338)

2020-09-30 16:47:23 9921fe7
fix(ring_theory/algebra): Fix typo "algbera" (#4337)
Introduced in e57fc3d6c142835dc8566aa28e812f7688f14512

2020-09-30 14:42:25 05038da
feat(ring_theory/algebra): some lemmas about numerals in algebras (#4327)

2020-09-30 09:51:53 5fd2037
chore(*): rename is_unit_pow to is_unit.pow (#4329)
enable dot notation by renaming
is_unit_pow to is_unit.pow

2020-09-30 09:51:51 ac797ad
feat(topology/bounded_continuous_function): normed_comm_ring structure on bounded continuous functions (#4326)
An instance of the new (#4291) class `normed_comm_ring`.

2020-09-30 09:51:49 e53aa87
feat(order/basic): lemmas about `strict_mono_incr_on` (#4313)
Also move the section about `order_dual` up to use it in the proofs.
Non-BC API changes:
* Now `strict_mono_incr_on` and `strict_mono_decr_on` take `x` and `y` as `⦃⦄` args.

2020-09-30 09:51:46 e1c0b0a
feat(ring_theory/jacobson): Integral extension of Jacobson rings are Jacobson (#4304)
Main statement given by `is_jacobson_of_is_integral `

2020-09-30 09:51:44 ff66d92
chore(category_theory/limits): facts about opposites of limit cones (#4250)
Simple facts about limit cones and opposite categories.

2020-09-30 07:56:48 da66bb8
feat(*): preparations for roots of unity (#4322)

2020-09-29 14:16:59 743f82c
feat(algebra/pointwise): Add missing to_additive on finset lemmas (#4306)

2020-09-29 12:11:48 669a349
feat(data/prod): mk injective lemmas (#4319)
More scattered lemmmas from the Witt vector branch.
Co-authored by: Johan Commelin <johan@commelin.net>

2020-09-29 12:11:45 d301d43
feat(algebra/invertible): invertible.copy (#4318)
A useful gadget from the Witt vector project.
Co-authored by: Johan Commelin <johan@commelin.net>

2020-09-29 12:11:43 fa09f49
feat(analysis/special_functions/*): prove that `exp` etc are measurable (#4314)
The modifications in `measure_theory/borel_space` are a part of the
proof of measurability of `x^y`, `x : ennreal`, `y : ℝ`, but this
proof depends on a refactoring of `arcsin` I'm going to PR soon.

2020-09-29 12:11:41 744e067
feat(linear_algebra/dual): transpose of linear maps (#4302)
This is filling an easy hole from the undergrad curriculum page: the transpose of a linear map. We don't prove much about it but at least we make contact with matrix transpose.

2020-09-29 10:59:46 a5a7a75
feat(analysis/normed_space): define `normed_comm_ring` (#4291)
Also use section `variables`.

2020-09-29 09:53:22 9962bfa
doc(data/monoid_algebra): fix typo (#4317)

2020-09-29 07:37:23 22d034c
feat(algebra/quandle): racks and quandles (#4247)
This adds the algebraic structures of racks and quandles, defines a few examples, and provides the universal enveloping group of a rack.
A rack is a set that acts on itself bijectively, and sort of the point is that the action `act : α → (α ≃ α)` satisfies
```
act (x ◃ y) = act x * act y * (act x)⁻¹
```
where `x ◃ y` is the usual rack/quandle notation for `act x y`.  (Note: racks do not use `has_scalar` because it's convenient having `x ◃⁻¹ y` for the inverse action of `x` on `y`.  Plus, associative racks have a trivial action.)
In knot theory, the universal enveloping group of the fundamental quandle is isomorphic to the fundamental group of the knot complement.  For oriented knots up to orientation-reversed mirror image, the fundamental quandle is a complete invariant, unlike the fundamental group, which fails to distinguish non-prime knots with chiral summands.

2020-09-29 04:58:27 0bb5e5d
feat(ring_theory/algebra_tower): Artin--Tate lemma (#4282)

2020-09-29 03:32:06 88187ba
chore(topology/algebra/ordered): golf a proof (#4311)
* generalize `continuous_within_at_Ioi_iff_Ici` from `linear_order α`
  to `partial_order α`;
* base the proof on a more general fact:
  `continuous_within_at f (s \ {x}) x ↔ continuous_within_at f s x`.

2020-09-28 17:22:18 89d8cc3
refactor(data/nat/basic): review API of `nat.find_greatest` (#4274)
Other changes:
* add `nat.find_eq_iff`;
* use weaker assumptions in `measurable_to_encodable` and `measurable_to_nat`;
* add `measurable_find`.

2020-09-28 15:25:45 50dbce9
fix(data/list/basic): Ensure that ball_cons actually works as a simp lemma (#4281)
The LHS of the simp lemma `list.ball_cons` (aka `list.forall_mem_cons`) is not in simp-normal form, as `list.mem_cons_iff` rewrites it.
This adds a new simp lemma which is the form that `list.mem_cons_iff` rewrites it to.

2020-09-28 15:25:43 40fb701
feat(data/mv_polynomial): some lemmas on constant_coeff and rename (#4231)
Snippet from the Witt project
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-09-28 14:08:44 8461a7d
feat(geometry/euclidean/monge_point): lemmas on altitudes and orthocenter (#4179)
Add more lemmas about altitudes of a simplex and the orthocenter of a
triangle.  Some of these are just building out basic API that's
mathematically trivial (e.g. showing that the altitude as defined is a
one-dimensional affine subspace and providing an explicit form of its
direction), while the results on the orthocenter have some geometrical
content that's part of the preparation for defining and proving basic
properties of orthocentric systems.

2020-09-28 11:21:24 7bbb759
chore(algebra/free_algebra): Make the second type argument to lift and ι implicit (#4299)
These can always be inferred by the context, and just make things longer.
This is consistent with how the type argument for `id` is implicit.
The changes are applied to downstream uses too.

2020-09-28 11:21:22 ad680c2
chore(algebra/ordered_ring): remove duplicate lemma (#4295)
`ordered_ring.two_pos` and `ordered_ring.zero_lt_two` had ended up identical. I kept `zero_lt_two`.

2020-09-28 05:25:33 3986e97
chore(algebra/lie): group Lie algebra files together in their own directory (#4288)

2020-09-28 05:25:30 d77ac51
chore(data/fintype/card): review API (#4287)
API changes:
* `finset.filter_mem_eq_inter` now takes `[Π i, decidable (i ∈ t)]`; this way it works better
  with `classical`;
* add `finset.mem_compl` and `finset.coe_compl`;
* [DRY] drop `finset.prod_range_eq_prod_fin` and `finset.sum_range_eq_sum_fin`:
  use `fin.prod_univ_eq_prod_range` and `fin.sum_univ_eq_sum_range` instead;
* rename `finset.prod_equiv` to `equiv.prod_comp` to enable dot notation;
* add `fintype.prod_dite`: a specialized version of `finset.prod_dite`.
Also golf a proof in `analysis/normed_space/multilinear`

2020-09-28 05:25:28 66c87c0
feat(data/*/gcd): adds gcd, lcm of finsets and multisets (#4217)
Defines `finset.gcd`, `finset.lcm`, `multiset.gcd`, `multiset.lcm`
Proves some basic facts about those, analogous to those in `data.multiset.lattice` and `data.finset.lattice`

2020-09-28 04:20:18 1761822
chore(category_theory/limits): some limit lemmas (#4238)
A couple of lemmas characterising definitions which are already there (the first part of #4163)

2020-09-28 01:45:45 d8726bf
feat(ring_theory/integral_closure): Explicitly define integral extensions (#4164)
* Defined `ring_hom.is_integral_elem` as a generalization of `is_integral` that takes a ring homomorphism rather than an algebra. The old version is is redefined to be `(algebra_map R A).is_integral_elem x`.
* Create predicates `ring_hom.is_integral` and `algebra.is_integral` representing when the entire extension is integral over the base ring.

2020-09-28 00:59:38 2fa1bc6
chore(scripts): update nolints.txt (#4293)
I am happy to remove some nolints for you!

2020-09-27 20:45:01 3897758
feat(measure_theory): prove that more functions are measurable (#4266)
Mostly additions to `borel_space`.
Generalize `measurable_bsupr` and `measurable_binfi` to countable sets (instead of encodable underlying types). Use the lemma `countable_encodable` to get the original behavior.
Some cleanup in `borel_space`: more instances are in `variables`, and lemmas with the same instances a bit more.
One downside: there is a big import bump in `borel_space`, it currently imports `hahn_banach`. This is (only) used in `measurable_smul_const`. If someone has a proof sketch (in math) of `measurable_smul_const` that doesn't involve Hahn Banach (and that maybe generalizes `real` to a topological field or something), please let me know.

2020-09-27 18:31:22 c322471
feat(undergrad.yaml): missing items (#4290)

2020-09-27 16:34:03 2516d7d
feat(topology): various additions (#4264)
Some if it is used for Fubini, but some of the results were rabbit holes I went into, which I never ended up using, but that still seem useful.

2020-09-27 08:58:36 b6ce982
refactor(*): create directory field_theory/finite (#4212)
facts on finite fields needed facts on polynomials
facts on polynomials wanted to use things about finite fields
this PR reorganises some of the imports
at the moment it also contributes a bit of new stuff,
and depends on two other PRs that add new stuff.

2020-09-27 07:48:56 95ab6ac
docs(overview): expand analysis (#4284)
A few additions to the "normed spaces", "convexity", "special functions" and "manifolds" sections of the overview.

2020-09-27 05:22:34 a7e3435
chore(data/option): swap sides in `ne_none_iff_exists` (#4285)
* swap lhs and rhs of the equality in `option.ne_none_iff_exists`; the new order matches, e.g., the definition of `set.range` and `can_lift.prf`;
* the same in `with_one.ne_one_iff_exists` and `with_zero.ne_zero_iff_exists`;
* remove `option.ne_none_iff_exists'`;
* restore the original `option.ne_none_iff_exists` as `option.ne_none_iff_exists'`

2020-09-27 01:39:14 5f6b07f
chore(scripts): update nolints.txt (#4283)
I am happy to remove some nolints for you!

2020-09-27 00:33:40 5c957ec
feat(analysis/convex/integral): Jensen's inequality for integrals (#4225)

2020-09-26 20:43:15 8600cb0
feat(measure_space): define sigma finite measures (#4265)
They are defined as a `Prop`. The noncomputable "eliminator" is called `spanning_sets`, and satisfies monotonicity, even though that is not required to give a `sigma_finite` instance.
I define a helper function `accumulate s := ⋃ y ≤ x, s y`. This is helpful, to separate out some monotonicity proofs. It is in its own file purely for import reasons (there is no good file to put it that imports both `set.lattice` and `finset.basic`, the latter is used in 1 lemma).

2020-09-26 19:15:53 253b120
feat(field_theory): prove primitive element theorem (#4153)
Proof of the primitive element theorem. The main proof is in `field_theory/primitive_element.lean`. Some lemmas we used have been added to other files. We have also changed the notation for adjoining an element to a field to be easier to use.

2020-09-26 19:15:50 d0b5947
feat(algebra/universal_enveloping_algebra): construction of universal enveloping algebra and its universal property (#4041)
## Main definitions
  * `universal_enveloping_algebra`
  * `universal_enveloping_algebra.algebra`
  * `universal_enveloping_algebra.lift`
  * `universal_enveloping_algebra.ι_comp_lift`
  * `universal_enveloping_algebra.lift_unique`
  * `universal_enveloping_algebra.hom_ext`

2020-09-26 17:53:17 3ebee15
feat(src/data/polynomial/ring_division.lean): eq_zero_of_infinite_is_root (#4280)
add a lemma stating that a polynomial is zero if it has infinitely many roots.

2020-09-26 17:53:15 376ab30
feat(data/nat/unique_factorization): a `unique_factorization_monoid` instance on N (#4194)
Provides a `unique_factorization_monoid` instance on `nat`
Shows its equivalence to `nat.factors`, which is list-valued

2020-09-26 15:49:19 88e198a
feat(data/multiset): count repeat lemma (#4278)
A small lemma and renaming (of `count_repeat` to `count_repeat_self`) to count elements in a `multiset.repeat`. One part of #4259.

2020-09-26 15:49:16 8e83805
chore(analysis/special_functions/pow): +2 lemmas about `nnreal.rpow` (#4272)
`λ x, x^y` is continuous in more cases than `λ p, p.1^p.2`.

2020-09-26 15:49:14 3177493
feat(ring_theory/algebra, algebra/module): Add add_comm_monoid_to_add_comm_group and semiring_to_ring (#4252)

2020-09-26 15:49:13 7c0c16c
feat(data/list/basic): Add lemmas about inits and tails (#4222)

2020-09-26 13:57:50 bc3a6cf
chore(data/list/basic): Make it clear that `forall_mem_cons` and `ball_cons` are synonyms (#4279)

2020-09-26 12:12:06 9b09f90
feat(ennreal): some lemmas about ennreal (#4262)
Also some lemmas about norms in (e)nnreal.

2020-09-26 10:16:14 280a42e
chore(topology/instances/nnreal): reuse `order_topology_of_ord_connected` (#4277)

2020-09-26 10:16:12 b8b6f5d
chore(order/filter/archimedean): move&generalize a few lemmas (#4275)
* `tendsto_coe_nat_real_at_top_iff`: `tendsto_coe_nat_at_top_iff`,
  generalize to a linear ordered archimedean semiring;
* `tendsto_coe_nat_real_at_top_at_top`: `tendsto_coe_nat_at_top_at_top`,
  generalize to a linear ordered archimedean semiring;
* `tendsto_coe_int_real_at_top_iff`: `tendsto_coe_int_at_top_iff`,
  generalize to a linear ordered archimedean ring;
* `tendsto_coe_int_real_at_top_at_top`: `tendsto_coe_int_at_top_at_top`,
  generalize to a linear ordered archimedean ring;
* add versions for `ℚ`;
* golf the proof of `tendsto_at_top_embedding`.

2020-09-26 10:16:10 aa11589
feat(algebra/homology, category_theory/abelian): expand API on exactness (#4256)

2020-09-26 10:16:08 61897ae
feat(data/set/intervals/infinite): intervals are infinite (#4241)

2020-09-26 10:16:06 e3cc06e
feat(algebraic_geometry/presheafed_space): gluing presheaves (#4198)
#### `PresheafedSpace C` has colimits.
If `C` has limits, then the category `PresheafedSpace C` has colimits,
and the forgetful functor to `Top` preserves these colimits.
When restricted to a diagram where the underlying continuous maps are open embeddings,
this says that we can glue presheaved spaces.
Given a diagram `F : J ⥤ PresheafedSpace C`,
we first build the colimit of the underlying topological spaces,
as `colimit (F ⋙ PresheafedSpace.forget C)`. Call that colimit space `X`.
Our strategy is to push each of the presheaves `F.obj j`
forward along the continuous map `colimit.ι (F ⋙ PresheafedSpace.forget C) j` to `X`.
Since pushforward is functorial, we obtain a diagram `J ⥤ (presheaf C X)ᵒᵖ`
of presheaves on a single space `X`.
(Note that the arrows now point the other direction,
because this is the way `PresheafedSpace C` is set up.)
The limit of this diagram then constitutes the colimit presheaf.

2020-09-26 07:58:50 c2f896f
feat(data/set): add some lemmas (#4263)
Some lemmas about sets, mostly involving disjointness
I also sneaked in the lemma `(λ x : α, y) = const α y` which is useful to rewrite with.

2020-09-26 07:58:48 1892724
feat(data/matrix): definition of `block_diagonal` (#4257)
This PR defines `matrix.block_diagonal : (o -> matrix m n R) -> matrix (m × o) (n × o) R`. The choice to put `o` on the right hand side of the product will help with relating this to `is_basis.smul`, but it won't be a huge hassle to write `matrix (o × m) (o × m) R` instead if you prefer.
I also tried making `m` and `n` depend on `o`, giving `block_diagonal M : matrix (Σ k : o, m k) (Σ k : o, n k) R`, but that turned out to be a shotcut to `eq.rec` hell.

2020-09-26 06:09:45 7aef150
feat(category_theory): sieves (#3909)
Define sieves, from my topos project. Co-authored by @EdAyers. 
These definitions and lemmas have been battle-tested quite a bit so I'm reasonably confident they're workable.

2020-09-26 02:31:08 6289adf
fix(order/bounded_lattice): fix some misleading theorem names (#4271)

2020-09-26 01:49:24 d76f19f
feat(overview): expand measure theory (#4258)

2020-09-26 00:58:04 4b3570f
chore(scripts): update nolints.txt (#4270)
I am happy to remove some nolints for you!

2020-09-25 19:15:25 85bbf8a
feat(data/fin): `zero_eq_one_iff` and `one_eq_zero_iff` (#4255)
Just a pair of little lemmas that were handy to me. The main benefit is that `simp` can now prove `if (0 : fin 2) = 1 then 1 else 0 = 0`, which should help with calculations using `data.matrix.notation`.

2020-09-25 16:57:57 3a591e8
chore(data/list/defs): mark pairwise.nil simp to match chain.nil (#4254)

2020-09-25 16:57:55 5e8d527
feat(ring_theory/witt_vector/witt_polynomial): definition and basic properties (#4236)
From the Witt vector project
This is the first of a dozen of files on Witt vectors. This file contains
the definition of the so-called Witt polynomials.
Follow-up PRs will contain:
* An important structural result on the Witt polynomials
* The definition of the ring of Witt vectors (including the ring structure)
* Several common operations on Witt vectors
* Identities between thes operations
* A comparison isomorphism between the ring of Witt vectors over F_p and
the ring of p-adic integers Z_p.
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-09-25 14:53:58 565efec
chore(data/real/ennreal): 3 lemmas stating `∞ / b = ∞` (#4248)

2020-09-25 14:53:56 1029974
feat(*): finite rings with char = card = n are isomorphic to zmod n (#4234)
From the Witt vector project
I've made use of the opportunity to remove some unused arguments,
and to clean up some code by using namespacing and such.

2020-09-25 14:53:54 aee16bd
feat(data/mv_polynomial/basic): counit (#4205)
From the Witt vector project

2020-09-25 14:53:52 5deb96d
feat(data/mv_polynomial/funext): function extensionality for polynomials (#4196)
over infinite integral domains

2020-09-25 12:54:20 680f877
feat(data/rat/basic): coe_int_div, coe_nat_div (#4233)
Snippet from the Witt project

2020-09-25 12:54:18 9591d43
feat(data/*): lemmas on division of polynomials by constant polynomials (#4206)
From the Witt vector project
We provide a specialized version for polynomials over zmod n,
which turns out to be convenient in practice.
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-09-25 12:54:16 c7d818c
feat(data/mv_polynomial/variables): vars_bind₁ and friends (#4204)
From the Witt vector project
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-09-25 10:07:16 2313602
feat(order/bounded_lattice): custom recursors for with_bot/with_top (#4245)

2020-09-25 10:07:14 f43bd45
fix(tactic/lint/simp): only head-beta reduce, don't whnf (#4237)
This is necessary to accept simp lemmas like `injective reverse`.

2020-09-25 10:07:12 5da451b
feat(data/mv_polynomial/expand): replace variables by a power (#4197)
From the Witt vectors project.

2020-09-25 09:07:07 b6154d9
feat(category_theory/limits): small lemmas (#4251)

2020-09-25 08:21:16 40f1370
chore(measure_theory/bochner_integration): rename/add lemmas, fix docstring (#4249)
* add `integral_nonneg` assuming `0 ≤ f`;
* rename `integral_nonpos_of_nonpos_ae` to `integral_nonpos_of_ae`;
* add `integral_nonpos` assuming `f ≤ 0`;
* rename `integral_mono` to `integral_mono_ae`;
* add `integral_mono` assuming `f ≤ g`;
* (partially?) fix module docstring.

2020-09-25 06:57:20 143c074
feat(category_theory/cofinal): cofinal functors (#4218)

2020-09-25 05:46:05 dda82fc
chore(*): add missing copyright, cleanup imports (#4229)
Add missing copyright, avoid use of `import tactic`, and put each `import` statement on a separate line, for easier analysis via grep.

2020-09-25 00:12:04 f9a667d
refactor(algebra/group_power, data/nat/basic): remove redundant lemmas (#4243)
This removes lemmas about `pow` on `nat` which are redundant
with more general versions in the root namespace.
One notable removal is `nat.pow_succ`; use `pow_succ'` instead.
In order that the general versions are available already in `data.nat.basic`,
many lemmas from `algebra.group_power.lemmas` have been moved to
`algebra.group_power.basic` (basically as many as possible without adding imports).

2020-09-24 22:51:18 46bf8ca
fix(topology/path_connected): avoid a slow use of `continuity` (#4244)
This corrects the timeout experienced by @Nicknamen in #3641. See https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.233641/near/211107487

2020-09-24 20:51:05 675f5d4
feat(algebra/char_p): nontrivial_of_char_ne_one (#4232)
Also renames `false_of_nonzero_of_char_one` to `false_of_nontrivial_of_char_one`
Snippet from the Witt project

2020-09-24 19:43:34 5eedf32
docs(data/complex/exponential): docstring for de Moivre (#4242)

2020-09-24 17:38:37 02ca5e2
fix(.github/workflows/add_label_from_review.yml): fix label removal (#4240)
The API calls were referencing the wrong field, see for example https://github.com/leanprover-community/mathlib/runs/1161014126?check_suite_focus=true#step:7:3

2020-09-24 17:38:35 d670746
feat(category_theory/monad/algebra): Add faithful instances.  (#4227)
Adds a `faithful` instance for the forgetful functors from the Eilenberg Moore category associated to a (co)monad.

2020-09-24 17:38:32 5c31dea
feat(field_theory): intermediate fields (#4181)
Define `intermediate_field K L` as a structure extending `subalgebra K L` and `subfield L`.
This definition required some changes in `subalgebra`, which I added in #4180.

2020-09-24 17:38:30 e23b97e
feat(ring_theory/polynomial): decomposing the kernel of an endomorphism polynomial (#4174)

2020-09-24 16:49:35 03894df
feat(category_theory/limits/creates): Add has_(co)limit defs (#4239)
This PR adds four `def`s:
1. `has_limits_of_shape_of_has_limits_of_shape_creates_limits_of_shape` 
2. `has_limits_of_has_limits_creates_limits`
3. `has_colimits_of_shape_of_has_colimits_of_shape_creates_colimits_of_shape`
4. `has_colimits_of_has_colimits_creates_colimits`
These show that a category `C` has (co)limits (of a given shape) given a functor `F : C ⥤ D` which creates (co)limits (of the given shape) where `D` has (co)limits (of the given shape).
See the associated zulip discussion: 
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/has_limits.20of.20has_limits.20and.20creates_limits/near/211083395

2020-09-24 14:02:39 03775fb
chore(data/mv_polynomial): aeval_rename -> aeval_id_rename (#4230)
`aeval_rename` was not general enough, so it is renamed to
`aeval_id_rename`.
Also: state and prove the more general version of `aeval_rename`.

2020-09-24 10:39:14 3484e8b
fix(data/mv_polynomial): fix doc strings (#4219)

2020-09-24 10:39:13 f0713cb
refactor(measure_theory/simple_func_dense): split monolithic proof (#4199)
In the new proof the sequence of approximating functions has a simpler description: `N`-th function
sends `x` to the point `e k` which is the nearest to `f x` among the points `e 0`, ..., `e N`, where `e n`
is a dense sequence such that `e 0 = 0`.

2020-09-24 08:37:51 ba8fa0f
feat(logic/embedding): use simps (#4169)
Some lemmas are slightly reformulated, and have a worse name. But they are (almost) never typed explicitly, since they are simp lemmas (even the occurrences in other files probably came from `squeeze_simp`).

2020-09-24 06:54:53 5e934cd
chore(*): cleanup imports, split off data/finset/preimage from data/set/finite (#4221)
Mostly this consists of moving some content from `data.set.finite` to `data.finset.preimage`, in order to reduce imports in `data.set.finite`.

2020-09-24 05:52:22 ed07cac
feat(data/mv_polynomial/rename): coeff_rename (#4203)
Also, use the opportunity to use R as variable for the coefficient ring
throughout the file.

2020-09-24 03:33:52 ef18740
feat(linear_algebra/eigenspace): generalized eigenvectors span the entire space (#4111)

2020-09-24 02:35:58 4e41445
chore(scripts): update nolints.txt (#4226)
I am happy to remove some nolints for you!

2020-09-24 02:35:57 6b35819
refactor(category_theory): make `has_image` and friends a Prop (#4195)
This is an obious follow-up to #3995. It changes the following declarations to a `Prop`:
* `arrow.has_lift`
* `strong_epi`
* `has_image`/`has_images`
* `has_strong_epi_mono_factorisations`
* `has_image_map`/`has_image_maps`
The big win is that there is now precisely one notion of exactness in every category with kernels and images, not a (different but provably equal) notion of exactness per `has_kernels` and `has_images` instance like in the pre-#3995 era.

2020-09-24 00:15:43 96e81fa
feat(data/(lazy_)list): various lemmas and definitions (#4172)

2020-09-23 20:55:39 6927958
feat(data/real/irrational): add a different formulation for irrationality (#4213)

2020-09-23 20:55:36 9aeffa8
feat(geometry/manifold): bundled smooth map (#3904)

2020-09-23 18:48:10 72e5b9f
feat(measure_theory): ext lemmas for measures (#3895)
Add class `sigma_finite`.
Also some cleanup.
Rename `measurable_space.is_measurable` -> `measurable_space.is_measurable'`. This is to avoid name clash with `_root_.is_measurable`, which should almost always be used instead.
define `is_pi_system`.

2020-09-23 16:56:11 7cf8fa6
fix(archive/100-thms): update link to 100.yaml in README (#4224)

2020-09-23 11:10:37 ecd889a
feat(data/polynomial/*): higher order derivative (#4187)

2020-09-23 09:47:01 5ab7eb0
feat(analysis/special_functions/trigonometric): continuity and differentiability of arctan (#4138)
Added lemmas for continuity and differentiability of arctan, as well as various supporting limit lemmas.

2020-09-23 07:33:15 d7aada1
doc(data/list/tfae): Add skeletal docstring (#4220)

2020-09-23 01:02:05 937199a
chore(scripts): update nolints.txt (#4216)
I am happy to remove some nolints for you!

2020-09-22 19:08:32 392d3e3
feat(archive/imo/*): add IMO 1972 B2, move IMOs to a subdirectory (#4209)

2020-09-22 17:01:30 994c31d
feat(ring_theory/ideal/basic): mem_bot (#4211)
Snippet from the Witt project
Co-Authored-By: Rob Y. Lewis <rob.y.lewis@gmail.com>

2020-09-22 14:52:30 f2458d6
chore(data/mv_polynomial): Rename variables (#4208)
I renamed `α` to `R` throughout. I also changed the `\sigma` to `σ` in `basic.lean`, see leanprover-community/doc-gen#62

2020-09-22 12:57:23 516b0df
refactor(ring_theory/algebra): re-bundle `subalgebra` (#4180)
This PR makes `subalgebra` extend `subsemiring` instead of using `subsemiring` as a field in its definition. The refactor is needed because `intermediate_field` should simultaneously extend `subalgebra` and `subfield`, and so the type of the `carrier` fields should match.
I added some copies of definitions that use `subring` instead of `is_subring` if I needed to change these definitions anyway.

2020-09-22 11:28:53 d09ef4a
feat(category_theory/monoidal): transport monoidal structure along an equivalence (#4123)

2020-09-22 11:28:51 caffd02
feat(data/polynomial/degree/trailing_degree): basic definitions and properties (#4113)
Adds trailing_degree, trailing_nat_degree, trailing_coeff and various lemmas add functionality to work with trailing coefficients

2020-09-22 10:04:16 58d0bfc
feat(topology/sheaves): alternate formulation of the sheaf condition (#4190)
Currently the sheaf condition is stated as it often is in textbooks, e.g. 
https://stacks.math.columbia.edu/tag/0072. That is, it is about an equalizer of the two maps `∏ F.obj (U i) ⟶ ∏ F.obj (U i) ⊓ (U j)`.
This PR adds an equivalent formulation, saying that `F.obj (supr U)` (with its natural projection maps) is the limit of the diagram consisting of the `F.obj (U i)` and the `F.obj (U i ⊓ U j)`. 
I'd like to add further reformulations in subsequent PRs, in particular the nice one I saw in Lurie's SAG, just saying that `F.obj (supr U)` is the limit over the diagram of all `F.obj V` where `V` is an open subset of *some* `U i`. This version is actually much nicer to formalise, and I'm hoping we can translate over quite a lot of what we've already done about the sheaf condition to that version

2020-09-22 08:41:20 b4641ef
feat(l1_space): add measurability to integrable (#4170)
This PR defines `integrable` such that `integrable` implies `measurable`. The old version is called `has_finite_integral`.
This allows us to drop *many* measurability conditions from lemmas that also require integrability.
There are some lemmas that have extra measurability conditions, if it has `integrable` as conclusion without corresponding `measurable` hypothesis.
There are many results that require an additional `[measurable_space E]` hypothesis, and some that require `[borel_space E]` or `[second_countable_space E]` (usually when using that addition is measurable).

2020-09-22 06:16:42 2ae199f
refactor(ring_theory/unique_factorization_domain): completes the refactor of `unique_factorization_domain` (#4156)
Refactors `unique_factorization_domain` to `unique_factorization_monoid`
`unique_factorization_monoid` is a predicate
`unique_factorization_monoid` now requires no additive/subtractive structure

2020-09-22 00:54:05 480c92c
chore(scripts): update nolints.txt (#4207)
I am happy to remove some nolints for you!

2020-09-21 18:45:31 b91df55
chore(topology/algebra/module): make `topological_module` an abbreviation (#4200)
Also prove that a `topological_semiring` is a `topological_semimodule`.

2020-09-21 16:27:12 92c0125
chore(data/nat/digits): use nat namespace (#4201)

2020-09-21 13:06:58 4a8c38e
chore(category_theory/limits/lattice): cleanup (#4191)

2020-09-21 10:21:23 cd4a91f
fix(scripts/mk_all): macOS compatibility fix (#4148)
`readlink -f` doesn't work macOS unfortunately - there are alternatives but I think it's probably safe to remove it altogether? This assumes `mk_all.sh` isn't a symlink but I can't think of a reason why it should be - and `rm_all.sh` uses `dirname "${BASH_SOURCE[0]}"` directly 🙂

2020-09-21 08:37:54 e483298
feat(ring_theory/unique_factorization_domain): API for coprime, coprime factor of a power is a power (#4049)

2020-09-21 06:08:33 40f582b
feat(data/*/nat_antidiagonal): induction lemmas about antidiagonals (#4193)
Adds a `nat.antidiagonal_succ` lemma for `list`, `multiset`, and `finset`, useful for proving facts about power series derivatives

2020-09-21 03:23:12 d8e7bb5
feat(tactic/tauto): optional closer tactic for `tauto` (#4189)
`tauto` sometimes fails on easy subgoals; instead of backtracking
and discarding the work, the user can now supply a closer tactic
to the remaining goals, such as `cc`, `simp`, or `linarith`.
this also wraps `tauto` in a `focus1`, which allows for better
error messages.

2020-09-20 23:55:02 f77d5d6
feat(data/finset): add lemma for empty filter (#4188)
A little lemma, analogous to `filter_true_of_mem` to make it convenient to reduce a filter which always fails.

2020-09-20 21:53:36 db9842c
feat(analysis/calculus/times_cont_diff): inversion of continuous linear maps is smooth (#4185)
- Introduce an `inverse` function on the space of continuous linear maps between two Banach spaces, which is the inverse if the map is a continuous linear equivalence and zero otherwise.
- Prove that this function is `times_cont_diff_at` each `continuous_linear_equiv`.
- Some of the constructions used had been introduced in #3282 and placed in `analysis.normed_space.operator_norm` (normed spaces); they are moved to the earlier file `topology.algebra.module` (topological vector spaces).

2020-09-20 21:53:34 d774ef6
feat(topology/path_connected): add lemmas about paths and continuous families of paths (#4063)
From the sphere eversion project (see https://github.com/leanprover-community/sphere-eversion/pull/12)

2020-09-20 20:05:32 884e90b
feat(measure_theory): Borel-Cantelli (#4166)
```lean
lemma measure_limsup_eq_zero {s : ℕ → set α} (hs : ∀ i, is_measurable (s i))
  (hs' : (∑' i, μ (s i)) ≠ ⊤) : μ (limsup at_top s) = 0
```
There is a converse statement that is also called Borel-Cantelli, but we can't state it yet, because we don't know what independent events are.

2020-09-20 16:28:24 2c9b063
feat(algebra/big_operators): add prod boole lemma (#4192)
A small lemma to simplify products of indicator functions

2020-09-20 00:47:20 44667ba
feat(ring_theory/power_series): power series lemmas (#4171)
A couple of little lemmas for multiplication and coefficients

2020-09-20 00:00:33 9232032
refactor(linear_algebra/tensor_algebra): build as a quotient of a free algebra (#4079)

2020-09-19 23:11:09 7013e5b
feat(category_theory/internal): commutative monoid objects (#4186)
This reprises a series of our recent PRs on monoid objects in monoidal categories, developing the same material for commutative monoid objects in braided categories.

2020-09-19 20:26:57 5b143ff
feat(data/set/basic): a few lemmas (#4184)

2020-09-19 19:45:22 640ba6c
feat(geometry/euclidean): cospherical points (#4178)
Define cospherical points in a Euclidean space (the general-dimension
version of the two-dimensional concept of a set of points being
concyclic) and prove some very basic lemmas about them.

2020-09-19 19:03:21 02b492a
feat(category_theory/Mon): Mon_ C has limits when C does (#4133)
If `C` has limits, so does `Mon_ C`.
(This could potentially replace many individual constructions for concrete categories,
in particular `Mon`, `SemiRing`, `Ring`, and `Algebra R`.)

2020-09-19 04:51:22 567954f
feat(category_theory): `lim : (J ⥤ C) ⥤ C` is lax monoidal when `C` is monoidal (#4132)
A step towards constructing limits in `Mon_ C` (and thence towards sheaves of modules as internal objects).

2020-09-19 03:33:07 04fe4b6
feat(algebra/ring_quot): quotients of noncommutative rings (#4078)

2020-09-18 21:57:43 bf7a2ed
fix(conditionally_complete_lattice): add instance (#4183)
there was no instance from `conditionally_complete_linear_order_bot` to `conditionally_complete_linear_order`. It is added by this change.

2020-09-18 21:57:41 c2ae6c0
doc(simps): explain short_name (#4182)

2020-09-18 21:57:39 0269a76
feat(integration): integral commutes with continuous linear maps (#4167)
from the sphere eversion project. Main result:
```lean
continuous_linear_map.integral_apply_comm {α : Type*} [measurable_space α] {μ : measure α} 
  {E : Type*} [normed_group E]  [second_countable_topology E] [normed_space ℝ E] [complete_space E]
  [measurable_space E] [borel_space E] {F : Type*} [normed_group F]
  [second_countable_topology F] [normed_space ℝ F] [complete_space F]
  [measurable_space F] [borel_space F] 
  {φ : α → E} (L : E →L[ℝ] F) (φ_meas : measurable φ) (φ_int : integrable φ μ) :
  ∫ a, L (φ a) ∂μ = L (∫ a, φ a ∂μ)
```

2020-09-18 20:21:39 4e3729b
feat(geometry/euclidean/basic): intersections of circles (#4088)
Add two versions of the statement that two circles in two-dimensional
space intersect in at most two points, along with some lemmas involved
in the proof (some of which can be interpreted in terms of
intersections of circles or spheres and lines).

2020-09-18 17:25:27 9051aa7
feat(polynomial): prepare for transcendence of e by adding small lemmas (#4175)
This will be a series of pull request to prepare for the proof of transcendence of e by adding lots of small lemmas.

2020-09-18 11:37:08 ae72826
feat(data/mv_polynomial): define comap (#4161)
More from the Witt vector branch.
Co-authored by: Johan Commelin <johan@commelin.net>

2020-09-18 09:43:35 953a5dc
feat(category_theory/monoidal): monoid objects are just lax monoidal functors from punit (#4121)

2020-09-18 08:44:32 c158ce8
feat(analysis/calculus): converse mean value inequality  (#4173)
Also restate mean value inequality in terms of `lipschitz_on_with`.
From the sphere eversion project.

2020-09-18 08:44:30 f68c936
feat(analysis/normed_space/real_inner_product): orthogonal subspace lemmas (#4152)
Add a few more lemmas about `submodule.orthogonal`.

2020-09-18 08:44:28 b00b01f
feat(linear_algebra/affine_space): more lemmas (#4127)
Add another batch of lemmas relating to affine spaces.  These include
factoring out `vector_span_mono` as a combination of two other lemmas
that's used several times, and additional variants of lemmas relating
to finite-dimensional subspaces.

2020-09-18 07:44:06 43ff7dc
feat(topology/algebra/ordered): generalize two lemmas (#4177)
they hold for conditionally complete linear orders, not just for complete linear orders

2020-09-18 05:39:35 58883e3
feat(topology/ωCPO): define Scott topology in connection with ω-complete partial orders (#4037)

2020-09-18 00:57:16 52d4b92
chore(scripts): update nolints.txt (#4176)
I am happy to remove some nolints for you!

2020-09-17 15:33:38 5a2e7d7
refactor(field-theory/subfield): bundled subfields (#4159)
Define bundled subfields. The contents of the new `subfield` file are basically a copy of `subring.lean` with the replacement `subring` -> `subfield`, and the proofs repaired as necessary.
As with the other bundled subobject refactors, other files depending on unbundled subfields now import `deprecated.subfield`.

2020-09-17 15:33:35 34ebade
feat(algebra/free_algebra): free (noncommutative) algebras (#4077)
Previously, @adamtopaz constructed the tensor algebra of an `R`-module via a direct construction of a quotient of a free algebra.
This uses essentially the same construction to build a free algebra (on a type) directly. In a PR coming shortly, I'll refactor his development of the tensor algebra to use this construction.

2020-09-17 14:29:36 b62dd28
feat(linear_algebra/eigenspace): beginning to relate minimal polynomials to eigenvalues (#4165)
rephrases some lemmas in `linear_algebra` to use `aeval` instead of `eval2` and `algebra_map`
shows that an eigenvalue of a linear transformation is a root of its minimal polynomial, and vice versa

2020-09-17 05:26:28 265c587
doc(meta/converter/interactive): Add tactic documentation for a subset of `conv` tactics (#4144)

2020-09-16 18:50:15 7db9e13
feat(data/monoid_algebra): ext lemma (#4162)
A small lemma that was useful in the Witt vector project.
Co-authored by: Johan Commelin <johan@commelin.net>

2020-09-16 15:49:12 9f9a8c0
feat(readme): add @hrmacbeth to maintainers list (#4168)

2020-09-16 11:42:42 623c846
feat(data/mv_polynomial/variables): add facts about vars and mul (#4149)
More from the Witt vectors branch.
Co-authored by: Johan Commelin <johan@commelin.net>

2020-09-16 09:39:46 6603c6d
fix(simps): use coercion for algebra morphisms (#4155)
Previously it tried to apply whnf on an open expression, which failed, so it wouldn't find the coercion. Now it applied whnf before opening the expression.
Also use `simps` for `fixed_points.to_alg_hom`. The generated lemmas are
```lean
fixed_points.to_alg_hom_to_fun : ∀ (G : Type u) (F : Type v) [_inst_4 : group G] [_inst_5 : field F]
[_inst_6 : faithful_mul_semiring_action G F],
  ⇑(to_alg_hom G F) =
    λ (g : G),
      {to_fun := (mul_semiring_action.to_semiring_hom G F g).to_fun,
       map_one' := _,
       map_mul' := _,
       map_zero' := _,
       map_add' := _,
       commutes' := _}
```

2020-09-16 08:03:28 9a11efb
feat(metric_space): add lipschitz_on_with (#4151)
The order of the explicit arguments in this definition is open for negotiation.
From the sphere eversion project.

2020-09-16 08:03:26 4c9d3a5
feat(operator_norm): smul_right lemmas (#4150)
from the sphere eversion project
We need a version of `continuous_linear_map.smul_right` that is itself a continuous linear map from a normed space to a space of continuous linear maps. 
breaking changes:
* rename `smul_right_norm` to `norm_smul_right_apply`
* in `homothety_norm` remove useless sign assumption and switch from assuming positive dimension to `nontrivial`

2020-09-16 06:06:09 f585ce5
feat(category_theory): monoidal natural transformations and discrete monoidal categories (#4112)

2020-09-15 20:10:38 4c896c5
chore(undergrad.yaml): updates (#4160)
Added a bunch of things to `undergrad.yaml`: generalized eigenspaces, conjugacy classes in a group, the orthogonal complement, continuity of monotone functions and their inverses, inverse hyperbolic trig functions, radius of convergence.  Also changed (hopefully improved) some translations.

2020-09-15 12:59:56 d3a1719
feat(category_theory/is_connected): make `is_connected` a Prop (#4136)
Also renames `connected` to `is_connected`, and relies on `classical.arbitrary` slightly less.

2020-09-15 11:43:08 427d414
feat(data/enat): some API and a module docstring (#4103)

2020-09-15 01:03:57 7c321f8
chore(scripts): update nolints.txt (#4157)
I am happy to remove some nolints for you!

2020-09-14 23:27:33 b83362e
fix(order/ocpo): remove trace option (#4154)
(it did not produce any output)

2020-09-14 23:27:32 a0adcc0
chore(category_theory/zero): lemmas for has_zero_morphisms.comp_zero|zero_comp (#4142)
The axioms of `has_zero_morphisms` never had lemmas written for them, so everyone has been using the typeclass fields directly.

2020-09-14 23:27:30 3d73bd8
feat(topology/algebra/ordered): monotone continuous function is homeomorphism, relative version (#4043)
A function `f : α → β` restricts to a homeomorphism `(Ioo a b) → β`, if it (1) is order-preserving within the interval; (2) is `continuous_on` the interval; (3) tends to positive infinity at the right endpoint; and (4) tends to negative infinity at the left endpoint. The orders `α`, `β` are required to be conditionally complete, and the order on `α` must also be dense.

2020-09-14 21:25:17 ff2639d
feat(tactic/pretty_cases): provide a skeleton for a proof by induction / cases (#4093)

2020-09-14 19:35:47 218ef40
feat(measure_theory): image of Lebesgue measure under shift/rescale (#3760)

2020-09-14 16:35:45 a18be37
feat(ring_theory/ideal/over): Going up theorem for integral extensions (#4064)
The main statement is `exists_ideal_over_prime_of_is_integral` which shows that for an integral extension, every prime ideal of the original ring lies under some prime ideal of the extension ring.
`is_field_of_is_integral_of_is_field` is a brute force proof that if `R → S` is an integral extension, and `S` is a field, then `R` is also a field (using the somewhat new `is_field` proposition). `is_maximal_comap_of_is_integral_of_is_maximal` Gives essentially the same statement in terms of maximal ideals.
`disjoint_compl` has also been replaced with `disjoint_compl_left` and `disjoint_compl_right` variants.

2020-09-14 15:36:04 6babb55
fix(normed_space): fixed a typo from #4099 (#4147)
This lemma was less general that it should be because migrating it to its
mathlib place messed up the typeclass assumptions.

2020-09-14 15:36:02 8877606
chore(ci): teach bors and GitHub about new labels (#4146)

2020-09-14 15:35:59 49fc7ed
feat(measure_theory): assorted integration lemmas (#4145)
from the sphere eversion project
This is still preparations for differentiation of integals depending on a parameter.

2020-09-14 15:35:57 5f45c0c
feat(linear_algebra/finite_dimensional): finite-dimensional submodule lemmas / instances (#4128)
Add the lemma that a submodule contained in a finite-dimensional
submodule is finite-dimensional, and instances that allow type class
inference to show some infs and sups involving finite-dimensional
submodules are finite-dimensional.  These are all useful when working
with finite-dimensional submodules in a space that may not be
finite-dimensional itself.
Given the new instances, `dim_sup_add_dim_inf_eq` gets its type class
requirements relaxed to require only the submodules to be
finite-dimensional rather than the whole space.
`linear_independent_iff_card_eq_findim_span` is added as a variant of
`linear_independent_of_span_eq_top_of_card_eq_findim` for vectors not
necessarily spanning the whole space (implemented as an `iff` lemma
using `findim_span_eq_card` for the other direction).

2020-09-14 14:48:27 d5c58eb
chore(category_theory/*): make all forgetful functors use explicit arguments (#4139)
As suggested as https://github.com/leanprover-community/mathlib/pull/4131#discussion_r487527599, for the sake of more uniform API.

2020-09-14 12:41:02 a998fd1
feat(algebra/category/Module): the monoidal category of R-modules is symmetric (#4140)

2020-09-14 12:41:00 e35e287
refactor(data/nat/*): cleanup data.nat.basic, split data.nat.choose (#4135)
This PR rearranges `data.nat.basic` so the lemmas are now in (hopefully appropriately-named) markdown sections. It also moves several sections (mostly ones that introduced new `def`s) into new files:
- `data.nat.fact`
- `data.nat.psub` (maybe this could be named `data.nat.partial`?)
- `data.nat.log`
- `data.nat.with_bot`
`data.nat.choose` has been split into a directory:
- The definition of `nat.choose` and basic lemmas about it have been moved from `data.nat.basic` into `data.nat.choose.basic`
- The binomial theorem and related lemmas involving sums are now in `data.nat.choose.sum`; the following lemmas are now in the `nat` namespace:
  - `sum_range_choose`
  - `sum_range_choose_halfway`
  - `choose_middle_le_pow`
- Divisibility properties of binomial coefficients are now in `data.nat.choose.dvd`.
Other changes:
- added `nat.pow_two_sub_pow_two` to `data.nat.basic`.
- module docs & doc strings for `data.nat.sqrt`

2020-09-14 11:13:26 39962b7
chore(data/polynomial/derivative): golf proof of mem_support_derivative (#4134)
Golfed proof to be similar to what it was like prior to the refactor.

2020-09-14 10:24:38 6756d47
feat(category_theory): Mon_.forget reflects isos (#4131)
A step along the way to `sheaf X (Mon_ C) ~ Mon_ (sheaf X C)`.

2020-09-14 09:42:31 bbfeff3
feat(data/mv_polynomial/monad): mv_polynomial is a monad in two different ways (#4080)
These definitions and lemmas significantly decrease the pain in several computations in the Witt project.

2020-09-14 09:42:28 ed71b2d
feat(computability/tm_computable): define computable (in polytime) for TMs, prove id is computable in constant time  (#4048)
We define computability in polynomial time to be used in our future PR on P and NP.
We also prove that id is computable in constant time.
<!-- put comments you want to keep out of the PR commit here -->

2020-09-14 08:03:38 dce6b37
chore(algebra/homology): cleanup instances post #3995 (#4137)

2020-09-14 08:03:36 1c2ddbc
feat(field_theory/fixed): dimension over fixed field is order of group (#4125)
```lean
theorem dim_fixed_points (G : Type u) (F : Type v) [group G] [field F]
  [fintype G] [faithful_mul_semiring_action G F] :
  findim (fixed_points G F) F = fintype.card G
````

2020-09-14 08:03:35 b1e5a6b
doc(measure_theory): docstrings for continuity from above and below (#4122)

2020-09-14 08:03:33 5a478f0
doc(category_theory/natural_isomorphism): documentation and cleanup (#4120)

2020-09-14 08:03:31 51608f4
feat(linear_algebra/affine_space,geometry/euclidean): simplex centers and order of points (#4116)
Add lemmas that the centroid of an injective indexed family of points
does not depend on the indices of those points, only on the set of
points in their image, and likewise that the centroid, circumcenter
and Monge point of a simplex and thus the orthocenter of a triangle do
not depend on the order in which the vertices are indexed by `fin (n + 1)`,
only on the set of vertices.

2020-09-14 08:03:29 b19fbd7
feat(ring_theory/algebra_tower): coefficients for a basis in an algebra tower (#4114)
This PR gives an expression for `(is_basis.smul hb hc).repr` in terms of `hb.repr` and `hc.repr`, useful if you have a field extension `L / K`, and `x y : L`, and want to write `y` in terms of the power basis of `K(x)`.

2020-09-14 06:53:07 e355933
chore(category_theory/limits): remove unnecessary typeclass arguments (#4141)
Ongoing cleanup post #3995.
Previously we couldn't construct things like `instance : has_kernel (0 : X \hom Y)`, because it wouldn't have agreed definitionally with more general instances. Now we can.

2020-09-14 00:14:59 bd385fb
chore(category_theory/limits/functor_category): shuffle limits in functor cats (#4124)
Give `is_limit` versions for statements about limits in the functor category, and write the `has_limit` versions in terms of those.
This also generalises the universes a little.
As usual, suggestions for better docstrings or better names appreciated!

2020-09-13 08:21:22 5d35e62
feat(algebraic_geometry/*): Gamma the global sections functor (#4126)

2020-09-13 03:55:56 f403a8b
feat(category_theory/limits/types): is_limit versions of limits in type (#4130)
`is_limit` versions for definitions and lemmas about limits in `Type u`.

2020-09-13 01:01:54 dd43823
chore(scripts): update nolints.txt (#4129)
I am happy to remove some nolints for you!

2020-09-12 18:30:15 f3326db
feat(normed_space): second countability for linear maps (#4099)
From the sphere eversion project, various lemmas about continuous linear maps and a theorem: if E is finite dimensional and F is second countable then the space of continuous linear maps from E to F is second countable.

2020-09-12 16:34:13 c8771b6
fix(algebra/ring/basic): delete mul_self_sub_mul_self_eq (#4119)
It's redundant with `mul_self_sub_mul_self`.
Also renamed `mul_self_sub_one_eq` to `mul_self_sub_one`.

2020-09-12 15:49:53 169384a
feat(slim_check): add test cases (#4100)

2020-09-12 09:38:07 c3a6a69
doc(group_theory/subgroup): fix links in module doc (#4115)

2020-09-12 09:38:05 88dd01b
chore(category_theory): minor cleanups (#4110)

2020-09-12 07:45:55 b1a210e
feat(logic/basic): Add more simp lemmas for forall (#4117)

2020-09-12 06:00:57 3419986
feat(category_theory/limits): make has_limit a Prop (#3995)
We change `has_limit` so that it is only an existential statement that limit data exists, and in particular lives in `Prop`.
This means we can safely have multiple `has_limit` classes for the same functor, because proof irrelevance ensures Lean sees them all as the same.
We still have access to the API which lets us pretend we have consistently chosen limits, but now these limits are provided by the axiom of choice and hence are definitionally opaque.

2020-09-12 01:05:19 f6a65cf
chore(scripts): update nolints.txt (#4118)
I am happy to remove some nolints for you!

2020-09-11 17:48:45 7bade58
feat(logic/basic): Add forall_apply_eq_imp_iff (#4109)
Also adds forall_apply_eq_imp_iff' for swapped forall arguments
This means that `forall_range_iff` can now be solved by `simp`.
This requires changes in data/pfun and measure_theory/borel_space, where non-terminal `simp`s broke.

2020-09-11 17:48:43 17a5807
feat(category_theory/limits/fubini): another formulation for limits commuting (#4034)
The statement that you can swap limits, rather than just combine into a single limit as we had before.
(This just uses two copies of the previous isomorphism.)

2020-09-11 17:48:40 045619e
feat(topology/sheaves): sheafification (#3937)
# Sheafification of `Type` valued presheaves
We construct the sheafification of a `Type` valued presheaf,
as the subsheaf of dependent functions into the stalks
consisting of functions which are locally germs.
We show that the stalks of the sheafification are isomorphic to the original stalks,
via `stalk_to_fiber` which evaluates a germ of a dependent function at a point.
We construct a morphism `to_sheafify` from a presheaf to (the underlying presheaf of)
its sheafification, given by sending a section to its collection of germs.
## Future work
Show that the map induced on stalks by `to_sheafify` is the inverse of `stalk_to_fiber`.
Show sheafification is a functor from presheaves to sheaves,
and that it is the left adjoint of the forgetful functor.

2020-09-11 17:48:37 5509a30
feat(category_theory/skeleton): add skeletal categories and construct a special case (#3929)
I'm interested in the quotient construction of the skeleton for a thin category in particular for topos and sheafification PRs, but of course the general construction is useful too, so I've marked that as TODO and I'll make a followup PR so that this one doesn't get too big.
The advantage of handling this special case separately is that the skeleton of a thin category is a partial order, and so lattice constructions can be used (which is needed for my application), and also there are nice definitional equalities.

2020-09-11 15:53:17 847f87e
feat(geometry/euclidean/circumcenter): lemmas on orthogonal projection and reflection (#4087)
Add more lemmas about orthogonal projection and the circumcenter of a
simplex (so substantially simplifying the proof of
`orthogonal_projection_circumcenter`).  Then prove a lemma
`eq_or_eq_reflection_of_dist_eq` that if we fix a distance a point has
to all the vertices of a simplex, any two possible positions of that
point in one dimension higher than the simplex are equal or
reflections of each other in the subspace of the simplex.

2020-09-11 15:53:15 872a37e
cleanup(group_theory/presented_group): () -> [], and remove some FIXMEs (#4076)

2020-09-11 15:53:13 377c7c9
feat(category_theory/braided): braiding and unitors (#4075)
The interaction between braidings and unitors in a braided category.
Requested by @cipher1024 for some work he's doing on monads.
I've changed the statements of some `@[simp]` lemmas, in particular `left_unitor_tensor`, `left_unitor_tensor_inv`, `right_unitor_tensor`, `right_unitor_tensor_inv`. The new theory is that the components of a unitor indexed by a tensor product object are "more complicated" than other unitors. (We already follow the same principle for simplifying associators using the pentagon equation.)

2020-09-11 15:53:11 a1cbe88
feat(logic/basic, logic/function/basic): involute ite  (#4074)
Some lemmas about `ite`:
- `(d)ite_not`: exchanges the branches of an `(d)ite`
  when negating the given prop.
- `involutive.ite_not`: applying an involutive function to an `ite`
  negates the prop
Other changes:
Generalize the arguments for `(d)ite_apply` and `apply_(d)ite(2)`
to `Sort*` over `Type*`.

2020-09-11 15:53:09 832acd6
feat(data/{sym2,sym}) decidable version of sym2.mem.other, filling out some of sym API (#4008)
Removes `sym2.vmem` and replaces it with `sym2.mem.other'`, which can get the other element of a pair in the presence of decidable equality. Writing `sym2.mem.other'` was beyond my abilities when I created `sym2.vmem`, and seeing that vmem is extremely specialized and has no immediate use, it's probably best to remove it.
Adds some assorted simp lemmas, and also an additional lemma that `sym2.mem.other` is, in some sense, an involution.
Adds to the API for `sym`.  This is from taking some of the interface for multisets.  (I was exploring whether `sym2 α` should be re-implemented as `sym α 2` and trying to add enough to `sym` to pull it off, but it doesn't seem to be worth it in the end.)
(I'm not committing a recursor for `sym α n`, which lets you represent elements by vectors of length `n`.  It needs some cleanup.)

2020-09-11 14:46:51 7886c27
feat(category_theory/monoidal): lax monoidal functors take monoids to monoids (#4108)

2020-09-11 14:46:48 bd74baa
feat(algebra/homology/exact): lemmas about exactness (#4106)
These are a few lemmas on the way to showing how `exact` changes under isomorphisms applied to the objects. It's not everthing one might want; I'm salvaging this from an old branch and unlikely to do more in the near future, but hopefully this is mergeable progress as is.

2020-09-11 14:46:45 233a802
feat(algebraic_geometry/Scheme): Spec as Scheme (#4104)
```lean
def Spec (R : CommRing) : Scheme
```

2020-09-11 14:46:44 34e0f31
feat(nnreal): absolute value (#4098)

2020-09-11 13:30:01 842a324
feat(category_theory): the Grothendieck construction (#3896)
Given a functor `F : C ⥤ Cat`, 
the objects of `grothendieck F` consist of dependent pairs `(b, f)`, where `b : C` and `f : F.obj c`,
and a morphism `(b, f) ⟶ (b', f')` is a pair `β : b ⟶ b'` in `C`, and `φ : (F.map β).obj f ⟶ f'`.
(This is only a special case of the real thing: we should treat `Cat` as a 2-category and allow `F` to be a 2-functor / pseudofunctor.)

2020-09-11 11:35:29 0c57b2d
doc(category_theory): add doc-strings and links to the stacks project (#4107)
We'd been discussing adding a `@[stacks "007B"]` tag to add cross-references to the stacks project (and possibly include links back again -- they say they're keen).
I'm not certain that we actually have the documentation maintenance enthusiasm to make this viable, so this PR is a more lightweight solution: adding lots of links to the stacks project from doc-strings. I'd be very happy to switch back to the attribute approach later.
This is pretty close to exhaustive for the "category theory preliminaries" chapter of the stacks project, but doesn't attempt to go beyond that. I've only included links where we formalise all, or almost all (in which case I've usually left a note), of the corresponding tag.

2020-09-11 11:35:27 3965e06
chore(*): use new `extends_priority` default of 100, part 2 (#4101)
This completes the changes started in #4066.

2020-09-11 11:35:25 bc78621
feat(geometry/euclidean/monge_point): reflection of circumcenter (#4062)
Show that the distance from the orthocenter of a triangle to the
reflection of the circumcenter in a side equals the circumradius (a
key fact for proving various standard properties of orthocentric
systems).

2020-09-11 11:35:23 4ce27a5
feat(category_theory/limits): filtered colimits commute with finite limits (in Type) (#4046)

2020-09-11 06:18:46 80a9e4f
refactor(data/mv_polynomial/pderivative): make pderivative a linear map (#4095)
Make `pderivative i` a linear map as suggested at https://github.com/leanprover-community/mathlib/pull/4083#issuecomment-689712833

2020-09-11 00:47:31 9a24f68
chore(scripts): update nolints.txt (#4105)
I am happy to remove some nolints for you!

2020-09-10 18:33:51 7d88b31
feat(ring_theory/algebra_operations): add le_div_iff_mul_le (#4102)

2020-09-10 16:46:37 e33a777
feat(data/fin): iffs about succ_above ordering (#4092)
New lemmas:
`succ_above_lt_iff`
`lt_succ_above_iff`
These help avoid needing to do case analysis when faced with
inequalities about `succ_above`.

2020-09-10 14:56:55 38d1715
chore(*): update to Lean 3.20.0c, account for nat.pow removal from core (#3985)
Outline:
* `nat.pow` has been removed from the core library.
  We now use the instance `monoid.pow` to provide `has_pow ℕ ℕ`.
* To accomodate this, `algebra.group_power` has been split into a directory.
  `algebra.group_power.basic` contains the definitions of `monoid.pow` and `nsmul`
  and whatever lemmas can be stated with very few imports. It is imported in `data.nat.basic`.
  The rest of `algebra.group_power` has moved to `algebra.group_power.lemmas`.
* The new `has_pow ℕ ℕ` now satisfies a different definitional equality:
  `a^(n+1) = a * a^n` (rather than `a^(n+1) = a^n * a`).
  As a temporary measure, the lemma `nat.pow_succ` provides the old equality
  but I plan to deprecate it in favor of the more general `pow_succ'`.
  The lemma `nat.pow_eq_pow` is gone--the two sides are now the same in all respects
  so it can be deleted wherever it was used.
* The lemmas from core that mention `nat.pow` have been moved into `data.nat.lemmas`
  and their proofs adjusted as needed to take into account the new definition.
* The module `data.bitvec` from core has moved to `data.bitvec.core` in mathlib.
Future plans:
* Remove `nat.` lemmas redundant with general `group_power` ones, like `nat.pow_add`.
  This will be easier after further shuffling of modules.

2020-09-10 13:02:29 d5be9f3
refactor(data/mv_polynomial): move `smul` lemmas into basic.lean (#4097)
`C_mul'`, `smul_eq_C_mul` and `smul_eval` seemed a bit out of place in `comm_ring.lean`, since they only need `comm_semiring α`. So I moved them to `basic.lean` where they probably fit in a bit better?
I've also golfed the proof of `smul_eq_C_mul`.

2020-09-10 13:02:28 19b9ae6
feat(data/mv_polynomial): a few facts about `constant_coeff` and `aeval` (#4085)
A few additional facts about `constant_coeff_map` and `aeval` from the witt vector branch.
Co-authored by: Johan Commelin <johan@commelin.net>

2020-09-10 13:02:25 d857def
feat(slim_check): make `shrink` recursive (#4038)
Make example shrinking recursive to make it faster and more reliable. It now acts more like a binary search and less like a linear search.

2020-09-10 11:22:25 55cab6c
feat(data/{int,nat}/cast): dvd cast lemmas (#4086)

2020-09-10 08:56:58 49bb92d
feat(ring_theory/dedekind_domain): definitions (#4000)
Defines `is_dedekind_domain` in three variants:
1.  `is_dedekind_domain`: Noetherian, Integrally closed, Krull dimension 1, thanks to @Vierkantor 
2. `is_dedekind_domain_dvr`: Noetherian, localization at every nonzero prime is a DVR
3. `is_dedekind_domain_inv`: Every nonzero ideal is invertible.
TODO: prove that these definitions are equivalent.
This PR also includes some misc. lemmas required to show the definitions are independent of choice of fraction field.
Co-Authored-By: mushokunosora <knaka3435@gmail.com>
Co-Authored-By: faenuccio <filippo.nuccio@univ-st-etienne.fr>
Co-Authored-By: Vierkantor <vierkantor@vierkantor.com>

2020-09-10 07:43:56 8e9b1f0
feat(linear_algebra): add `restrict` for endomorphisms (#4053)
Add a `restrict` function for endomorphisms. Add some lemmas about the new function, including one about generalized eigenspaces. Add some additional lemmas about `linear_map.comp` that I do not use in the final proof, but still consider useful.

2020-09-10 05:42:47 47264da
feat(linear_algebra): tiny missing pieces (#4089)
From the sphere eversion project.

2020-09-10 01:34:24 9f55ed7
feat(data/polynomial/ring_division): make `polynomial.roots` a multiset (#4061)
The original definition of `polynomial.roots` was basically "while ∃ x, p.is_root x { finset.insert x polynomial.roots }", so it was not
too hard to replace this with `multiset.cons`.
I tried to refactor most usages of `polynomial.roots` to talk about the multiset instead of coercing it to a finset, since that should give a bit more power to the results.

2020-09-09 23:56:32 660a6c4
feat(topology): misc topological lemmas (#4091)
From the sphere eversion project.

2020-09-09 23:56:30 9da39cf
feat(ordered_field): missing inequality lemmas (#4090)
From the sphere eversion project.

2020-09-09 22:00:53 0967f84
doc(*): add some docstrings (#4073)

2020-09-09 16:00:30 44d356c
feat(tactic/explode): correctly indent long statements (#4084)
`#explode` didn't indent long statements in the proof, such as in this lemma:
```lean
import tactic.explode
variables (p q r : ℕ → Prop)
lemma ex (h : ∃ x, ∀ y, ∃ z, p x ∧ q y ∧ r z) :
              ∃ z, ∀ y, ∃ x, p x ∧ q y ∧ r z :=
Exists.rec_on h $ λ x h',
Exists.rec_on (h' 0) $ λ z h'',
⟨z, λ y,
  Exists.rec_on (h' y) $ λ w h''',
  ⟨x, h''.1, h'''.2.1, h''.2.2⟩⟩
#explode ex
```

2020-09-09 16:00:28 11e62b0
fix(data/mv_polynomial/pderivative): rename variables and file, make it universe polymorphic (#4083)
This file originally used different variable names to the rest of `mv_polynomial`. I've changed it to now use the same conventions as the other files.
I also renamed the file to `pderivative.lean` to be consistent with `derivative.lean` for polynomials.
The types of the coefficient ring and the indexing variables are now universe polymorphic.
The diff shows it as new files, but the only changes are fixing the statements and proofs.

2020-09-09 14:54:02 98061d1
fix(tactic/linarith): treat powers like multiplication (#4082)
`ring` understands that natural number exponents are repeated multiplication, so it's safe for `linarith` to do the same. This is unlikely to affect anything except `nlinarith` calls, which are now slightly more powerful.

2020-09-09 13:02:22 d6e7ee0
doc(ring_theory/localization): fix docstring typo (#4081)

2020-09-09 13:02:19 297a14e
feat(linear_algebra/affine_space): more lemmas (#4055)
Add some more lemmas about affine spaces.  One,
`affine_span_insert_affine_span`, is extracted from the proof of
`exists_unique_dist_eq_of_affine_independent` as it turned out to be
useful elsewhere.

2020-09-09 13:02:17 40de35a
feat(order/conditionally_complete_lattice, topology/algebra/ordered): inherited order properties for `ord_connected` subset (#3991)
If `α` is `densely_ordered`, then so is the subtype `s`, for any `ord_connected` subset `s` of `α`.
Same result for `order_topology`.
Same result for `conditionally_complete_linear_order`, under the hypothesis `inhabited s`.

2020-09-09 11:11:47 2ab31f9
chore(*): use new `extends_priority` default of 100 (#4066)
This is the first of (most likely) two PRs which remove the use of
`set_option default_priority 100` in favor of per-instance priority
attributes, taking advantage of Lean 3.19c's new default priority
of 100 on instances produced by `extends`.

2020-09-09 08:45:23 77c8415
refactor(data/mv_polynomial): split into multiple files (#4070)
`mv_polynomial.lean` was getting massive and hard to explore. This breaks it into (somewhat arbitrary) pieces. While `basic.lean` is still fairly long, there are a lot of basics about multivariate polynomials, and I think it's reasonable.

2020-09-09 04:32:30 d5580f4
feat(data/equiv/basic): add ext_iff for perm (#4067)

2020-09-08 21:33:25 f5ee84c
feat(analysis/special_functions/pow): Added lemmas bounding rpow in ennreal (#4039)
Continuation of #3715. Added lemmas in `ennreal` corresponding to the `real` and `nnreal` lemmas added in that PR

2020-09-08 20:35:35 7354042
fix(topology/metric_space): free universe (#4072)
Removes an unneeded and painful universe restriction

2020-09-08 18:11:23 dde8bad
doc(*): add docstrings (#4071)
Minor docstring fixes

2020-09-08 12:40:23 b2ec2b0
chore(data/padics): fix bad markdown in doc string (#4068)
Just noticed this in the docs

2020-09-08 12:40:21 4f1399d
feat(geometry/euclidean/basic): reflection lemmas (#4056)
Add more lemmas about reflections of points in subspaces.

2020-09-08 12:40:19 445e883
feat(function): has_uncurry (#3694)
By Gabriel Ebner, from the sphere eversion project. See discussion at 
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/recursive.20uncurry

2020-09-08 10:47:42 1c53f91
doc(tactic/lean_core_docs): congr understands subsingletons (#4060)

2020-09-08 00:47:47 a16112d
doc(algebra/group/to_additive): order of to_additive relative to other attributes (#4065)

2020-09-07 19:41:48 c7d6a8e
feat(ring_theory/unique_factorization_domain): descending chain condition for divisibility (#4031)
Defines the strict divisibility relation `dvd_not_unit`
Defines class `wf_dvd_monoid`, indicating that `dvd_not_unit` is well-founded
Provides instances of `wf_dvd_monoid`
Prepares to refactor `unique_factorization_domain` as a predicate extending `wf_dvd_monoid`

2020-09-07 17:54:54 851e83e
feat(category_theory): colimits for pi categories (#4054)

2020-09-07 13:36:36 c259305
feat(topology/algebra/floor_ring): add basic topological facts about `floor`, `ceil` and `fract` (#4042)
From the sphere eversion project

2020-09-07 07:49:55 f253fa0
feat(logic/basic): apply_dite2, apply_ite2 (#4050)
Add variants of `apply_dite` and `apply_ite` for two-argument
functions (in the case where I wanted `apply_ite`, the function was
addition).  I don't think there is any need for corresponding versions
of `dite_apply` or `ite_apply`, as two-argument versions of those
would be exactly the same as applying the one-argument version twice,
whereas that's not the case with `apply_dite2` and `apply_ite2`.

2020-09-07 05:46:33 94b96cf
feat(algebraic_geometry/structure_sheaf): stalk_iso (#4047)
Given a ring `R` and a prime ideal `p`, construct an isomorphism of rings between the stalk of the structure sheaf of `R` at `p` and the localization of `R` at `p`.

2020-09-07 00:51:55 2e198b4
chore(scripts): update nolints.txt (#4058)
I am happy to remove some nolints for you!

2020-09-06 23:47:49 4662b20
feat(category_theory): definition of `diag` in `binary_products` (#4051)

2020-09-06 23:08:44 4945c77
cleanup(ring_theory/ring_invo): update old module doc, add ring_invo.involution with cleaner statement (#4052)

2020-09-06 12:14:42 de03e19
feat(analysis/normed_space/real_inner_product): linear independence of orthogonal vectors (#4045)
Add the lemma that an indexed family of nonzero, pairwise orthogonal
vectors is linearly independent.

2020-09-06 12:14:40 1117ae7
feat(linear_algebra): Add lemmas about powers of endomorphisms (#4036)
Add lemmas about powers of endomorphisms and the corollary that every generalized eigenvector is a generalized eigenvector for exponent `findim K V`.

2020-09-06 11:28:33 fabf34f
feat(analysis/special_functions/trigonometric): Added lemmas for deriv of tan (#3746)
I added lemmas for the derivative of the tangent function in both the complex and real namespaces. I also corrected two typos in comment lines.
<!-- put comments you want to keep out of the PR commit here -->

2020-09-06 06:48:30 6296386
feat(data/mv_polynomial): fill in API for vars (#4018)
`mv_polynomial.vars` was missing a lot of API. This doesn't cover everything, but it fleshes out the theory quite a bit. There's probably more coming eventually -- this is what we have now.
Co-authored by: Johan Commelin <johan@commelin.net>

2020-09-06 05:07:42 7b3c653
chore(data/finset/lattice): remove unneeded assumptions (#4020)

2020-09-05 13:51:33 815a2f9
feat(computability/encoding): define encoding of basic data types (#3976)
We define the encoding of natural numbers and booleans to strings for Turing machines to be used in our future PR on polynomial time computation on Turing machines.

2020-09-05 09:19:56 364d5d4
feat(linear_algebra/char_poly): rephrase Cayley-Hamilton with `aeval', define `matrix.min_poly` (#4040)
Rephrases the Cayley-Hamilton theorem to use `aeval`, renames it `aeval_self_char_poly`
Defines `matrix.min_poly`, the minimal polynomial of a matrix, which divides `char_poly`

2020-09-05 00:55:56 ccd502a
chore(scripts): update nolints.txt (#4044)
I am happy to remove some nolints for you!

2020-09-04 11:49:24 7c9a86d
refactor(geometry/manifold): use a sigma type for the total space of the tangent bundle (#3966)
Redefine the total space of the tangent bundle to be a sigma type instead of a product type. Before
```
have p : tangent_bundle I M := sorry,
rcases p with ⟨x, v⟩,
-- x: M
-- v: E
```
After
```
have p : tangent_bundle I M := sorry,
rcases p with ⟨x, v⟩,
-- x: M
-- v: tangent_space I x
```
This seems more natural, and is probably needed to do Riemannian manifolds right. The drawback is that we can not abuse identifications any more between the tangent bundle to a vector space and a product space (but we can still identify the tangent space with the vector space itself, which is the most important thing).

2020-09-04 00:52:11 ecf18c6
refactor(field_theory/minimal_polynomial, *): make `aeval`, `is_integral`, and `minimal_polynomial` noncommutative (#4001)
Makes `aeval`, `is_integral`, and `minimal_polynomial` compatible with noncommutative algebras
Renames `eval₂_ring_hom_noncomm` to `eval₂_ring_hom'`

2020-09-03 21:00:06 e3057ba
doc(slim_check): add suggestion (#4024)

2020-09-03 19:18:55 a056ccb
feat(slim_check): subtype instances for `le` `lt` and `list.perm` (#4027)

2020-09-03 17:36:08 2d40d9c
feat(data/padics): universal property of Z_p (#3950)
We establish the universal property of $\mathbb{Z}_p$ as a projective limit. Given a family of compatible ring homs $f_k : R \to \mathbb{Z}/p^n\mathbb{Z}$, there is a unique limit $R \to \mathbb{Z}_p$.
In addition, we:
* split `padic_integers.lean` into two files, creating `ring_homs.lean`
* renamings: `padic_norm_z.*` -> `padic_int.norm_*`

2020-09-03 16:43:52 49173c0
ci(scripts/detect_errors.py): enforce silent builds (#4025)
Refactor of #3989. 
This changes the GitHub Actions workflow so that the main build step and the test step run `lean` with `--json`. The JSON output is piped to `detect_errors.py` which now exits at the end of the build if there is any output and also writes a file `src/.noisy_files` with the names of the noisy Lean files. This file is now included in the olean caches uploaded to Azure.
The "try to find olean cache" step now uses `src/.noisy_files` to delete all of the `.olean` files corresponding to the noisy Lean files, thus making the results of CI idempotent (hopefully).

2020-09-03 14:47:30 8b277a9
feat(category_theory/filtered): finite diagrams in filtered categories admit cocones (#4026)
This is only step towards eventual results about filtered colimits commuting with finite limits, `forget CommRing` preserving filtered colimits, and applications to `Scheme`.

2020-09-03 11:22:52 fa6485a
feat(category_theory/limits/concrete): simp lemmas (#3973)
Some specialisations of simp lemmas about (co)limits for concrete categories, where the equation in morphisms has been applied to an element.
This isn't exhaustive; just the things I've wanted recently.

2020-09-03 04:04:29 dd633c2
feat(geometry/euclidean/circumcenter): more lemmas (#4028)
Add some more basic lemmas about `circumcenter` and `circumradius`.

2020-09-03 01:52:48 c86359f
chore(scripts): update nolints.txt (#4030)
I am happy to remove some nolints for you!

2020-09-03 01:52:46 ca5703d
fix(docs/100.yaml): fix indentation in 100 list (#4029)

2020-09-03 00:15:49 7b9db99
fix(test/*): make sure tests produce no output (#3947)
Modify tests so that they produce no output. This also means removing all uses of `sorry`/`admit`.
Replace `#eval` by `run_cmd` consistently.
Tests that produced output before are modified so that it is checked that they roughly produce the right output
Add a trace option to the `#simp` command that turns the message of only if the expression is simplified to `true`. All tests are modified so that they simplify to `true`.
The randomized tests can produce output when they find a false positive, but that should basically never happen.
Add some docstings to `src/tactic/interactive`.

2020-09-02 19:38:06 9d42f6c
feat(order/rel_iso): define `rel_hom` (relation-preserving maps) (#3946)
Creates a typeclass for (unidirectionally) relation-preserving maps that are not necessarily injective
(In the case of <= relations, this is essentially a bundled monotone map)
Proves that these transfer well-foundedness between relations

2020-09-02 15:51:17 57463fa
feat(linear_algebra/affine_space): more lemmas (#3990)
Add another batch of lemmas about affine spaces.  These lemmas mostly
relate to manipulating centroids and the relations between centroids
of points given by different subsets of the index type.

2020-09-02 15:11:55 71ef45e
chore(topology/sheaves): depend less on rfl (#3994)
Another backport from the `prop_limits` branch.

2020-09-02 13:19:05 895f6ee
chore(algebra/category/CommRing/limits): don't use deprecated.subring (#4010)

2020-09-02 13:19:01 ddbdfeb
chore(data/fin): succ_above defn compares fin terms instead of values (#3999)
`fin.succ_above` is redefined to use a comparison between two `fin (n + 1)` instead of their coerced values in `nat`. This should delay any "escape" from `fin` into `nat` until necessary. Lemmas are added regarding `fin.succ_above`. Some proofs for existing lemmas reworked for new definition and simplified. Additionally, docstrings are added for related lemmas.
New lemmas:
Comparison after embedding:
`succ_above_lt_ge`
`succ_above_lt_gt`
Injectivity lemmas:
`succ_above_right_inj`
`succ_above_right_injective`
`succ_above_left_inj`
`succ_above_left_injective`
finset lemma:
`fin.univ_succ_above`
prod and sum lemmas:
`fin.prod_univ_succ_above`

2020-09-02 13:18:59 96c80e2
feat(ring_theory/localization): Localizations of integral extensions (#3942)
The main definition is the algebra induced by localization at an algebra. Given an algebra `R → S` and a submonoid `M` of `R`, as well as localization maps `f : R → Rₘ` and `g : S → Sₘ`, there is a natural algebra `Rₘ → Sₘ` that makes the entire square commute, and this is defined as `localization_algebra`. 
The two main theorems are similar but distinct statements about integral elements and localizations:
* `is_integral_localization_at_leading_coeff` says that if an element `x` is algebraic over `algebra R S`, then if we localize to a submonoid containing the leading coefficient the image of `x` will be integral.
* `is_integral_localization` says that if `R → S` is an integral extension, then the algebra induced by localizing at any particular submonoid will be an integral extension.

2020-09-02 11:43:54 cd36773
feat(linear_algebra/eigenspace): add generalized eigenspaces (#4015)
Add the definition of generalized eigenspaces, eigenvectors and eigenvalues. Add some basic lemmas about them.
Another step towards #3864.

2020-09-02 08:30:45 7310eab
feat(field_theory/adjoin): adjoining elements to fields (#3913)
Defines adjoining elements to fields

2020-09-02 06:01:22 8026ea8
feat(ring_theory/localization): localization away from an element (#4019)

2020-09-02 00:37:30 0b4444c
feat(pfun/recursion): unbounded recursion (#3778)

2020-09-01 23:53:35 d94643c
doc(slim_check): improve documentation, swap instances (#4023)

2020-09-01 23:53:33 ef22a33
feat(slim_check/errors): improve error messages and add useful instances (#4022)

2020-09-01 18:54:03 0c2e77c
feat(testing): property based testing (basics) (#3915)
Add `gen` monad, `sampleable` and `testable` type classes

2020-09-01 12:58:32 329393a
feat(analysis/calculus/times_cont_diff): iterated smoothness in terms of deriv (#4017)
Currently, iterated smoothness is only formulated in terms of the Fréchet derivative. For one-dimensional functions, it is more handy to use the one-dimensional derivative `deriv`. This PR provides a basic interface in this direction.

2020-09-01 12:58:30 849a5f9
feat(docs,ci): move overview, undergrad, and 100 theorems lists from website (#4016)
See conversation at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/website.20overview/near/208659351
We'll store these lists in mathlib so that we can catch breakage as soon as it happens, rather than continually repairing the website build. This PR adds the lists and a CI step that checks that every declaration name appearing in the lists actually exists in the library.

2020-09-01 12:18:06 6a5241f
refactor(algebra/category/*, category_theory/concrete_category): generalize universes for concrete categories (#3687)
Currently, concrete categories need to be `large_category`s. In particular, if objects live in `Type u`, then morphisms live in `Type (u + 1)`. For the category of modules over some ring R, this is not necessarily true, because we have to take the universe of R into account. One way to deal with this problem is to just force the universe of the ring to be the same as the universe of the module. This [sounds like it shouldn't be much of an issue](https://github.com/leanprover-community/mathlib/pull/1420#discussion_r322607455), but unfortunately, [it is](https://github.com/leanprover-community/mathlib/pull/3621#issue-458293664).
This PR
* removes the constraint that a concrete category must be a `large_category`,
* generalizes `Module R` and `Algebra R` to accept a universe parameter for the module/algebra and
* adds a ton of universe annotations which become neccesary because of the change
As a reward, we get `abelian AddCommGroup.{u}` for arbitrary `u` without any (additional) work.

2020-09-01 09:54:45 a97d71b
feat(data/mv_polynomial): assorted lemmas (#4002)
Assorted additions to `mv_polynomial`. This is more from the Witt vector development. Nothing too deep here, just scattered lemmas and the `constant_coeff` ring hom.
Coauthored by: Johan Commelin <johan@commelin.net>
<!-- put comments you want to keep out of the PR commit here -->
Hopefully this builds -- it's split off from a branch with a lot of other changes. I think it shouldn't have dependencies!

2020-09-01 06:48:21 2688d42
feat(archive/100-theorems-list): friendship theorem (nr 83) (#3970)
defines friendship graphs
proves the friendship theorem (freek #83)

2020-09-01 04:51:03 12763ec
chore(*): more use of bundled ring homs (#4012)

2020-09-01 04:51:01 51546d2
chore(ring_theory/free_ring): use bundled ring homs (#4011)
Use bundled ring homs in `free_ring` and `free_comm_ring`.

2020-09-01 04:50:59 93468fe
chore(algebraic_geometry/Spec): reduce imports (#4007)
The main change is to remove some `example`s from `topology.category.TopCommRing`, so that we don't need to know about the real and complex numbers on the way to defining a `Scheme`.
While I was staring at `leanproject import-graph --to algebraic_geometry.Scheme`, I also removed a bunch of redundant or unused imports elsewhere.

2020-09-01 04:50:57 551cf8e
refactor(algebra/associates): unite `associates.prime` with `prime` (#3988)
deletes `associates.prime`, replaces it with the existing `prime`

2020-09-01 04:50:54 7cd67b5
feat(category_theory/limits/shapes/terminal): is_terminal object (#3957)
Add language to talk about when an object is terminal, and generalise some results to use this

2020-09-01 03:18:29 fc57cf4
feat(data/{finset,finsupp,multiset}): more assorted lemmas (#4006)
Another grab bag of facts from the Witt vector branch.
Coauthored by: Johan Commelin <johan@commelin.net>
<!-- put comments you want to keep out of the PR commit here -->

2020-09-01 01:12:55 c33b41b
chore(scripts): update nolints.txt (#4009)
I am happy to remove some nolints for you!

2020-09-01 00:04:06 e053bda
feat(category_theory/monoidal/internal): Mon_ (Module R) ≌ Algebra R (#3695)
The category of internal monoid objects in `Module R`
is equivalent to the category of "native" bundled `R`-algebras.
Moreover, this equivalence is compatible with the forgetful functors to `Module R`.

2020-08-31 22:41:43 036527a
feat(linear_algebra/finite_dimensional): eq_of_le_of_findim_eq (#4005)
Add a variant of `eq_top_of_findim_eq`, where instead of proving a
submodule equal to `⊤`, it's shown equal to another finite-dimensional
submodule with the same dimension that contains it.  The two lemmas
are related by the `comap_subtype` lemmas, so the proof is short, but
it still seems useful to have this form.

2020-08-31 22:11:18 be3b175
feat(analysis/normed_space/real_inner_product): inner_add_sub_eq_zero_iff (#4004)
Add a lemma that the sum and difference of two vectors are orthogonal
if and only if they have the same norm.  (This can be interpreted
geometrically as saying e.g. that a median of a triangle from a vertex
is orthogonal to the opposite edge if and only if the triangle is
isosceles at that vertex.)

2020-08-31 19:25:35 d0a8cc4
feat(analysis/special_functions/trigonometric): ranges of `real.sin` and `real.cos` (#3998)

2020-08-31 17:07:43 d4484a4
fix(widget): workaround for webview rendering bug (#3997)
See https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/extension.20performance
The bug seems to go away if we collapse the extra nested spans made by `block` in to one span.
Still should do some tests to make sure this doesn't break anything else.
Minimal breaking example is:
```
import tactic.interactive_expr
example :
0+1+2+3+4+5+6+7+8+9 +
0+1+2+3+4+5+6+7+8+9 =
0+1+2+3+4+5+6+7+8+9 :=
by skip
```

2020-08-31 15:32:01 d2b18a1
feat(algebra/field, ring_theory/ideal/basic): an ideal is maximal iff the quotient is a field (#3986)
One half of the theorem was already proven (the implication maximal
ideal implies that the quotient is a field), but the other half was not,
mainly because it was missing a necessary predicate.
I added the predicate is_field that can be used to tell Lean that the
usual ring structure on the quotient extends to a field. The predicate
along with proofs to move between is_field and field were provided by
Kevin Buzzard. I also added a lemma that the inverse is unique in
is_field.
At the end I also added the iff statement of the theorem.

2020-08-31 14:45:05 8089f50
chore(category_theory/limits): some simp lemmas (#3993)

2020-08-31 13:17:44 9e9e318
feat(data/fin): simplify fin.mk (#3996)
After the recent changes to make `fin n` a subtype, expressions
involving `fin.mk` were not getting simplified as they used to be,
since the `simp` lemmas are for the anonymous constructor, which is
`subtype.mk` not `fin.mk`.  Add a `simp` lemma converting `fin.mk` to
the anonymous constructor.
In particular, unsimplified expressions involving `fin.mk` were coming
out of `fin_cases` (I think this comes from `fin_range` in
`data/list/range.lean` using `fin.mk`).  I don't know if that should
be avoiding creating the `fin.mk` expressions in the first place, but
simplifying them seems a good idea in any case.

2020-08-31 08:47:27 10ebb71
feat(measure_theory): induction principles in measure theory (#3978)
This commit adds three induction principles for measure theory
* To prove something for arbitrary simple functions
* To prove something for arbitrary measurable functions into `ennreal`
* To prove something for arbitrary measurable + integrable functions.
This also adds some basic lemmas to various files. Not all of them are used in this PR, some will be used by near-future PRs.

2020-08-31 08:11:24 bf7487b
fix(algebraic_geometry/Spec): inline TeX in heading (#3992)

2020-08-31 05:09:37 b79fc03
feature(algebraic_geometry/Scheme): the category of schemes (#3961)
The definition of a `Scheme`, and the category of schemes as the full subcategory of locally ringed spaces.

2020-08-30 23:20:13 e88843c
feat(data/finset/sort): range_mono_of_fin (#3987)
Add a `simp` lemma giving the range of `mono_of_fin`.

2020-08-30 18:40:35 861f182
feat(widget): add go to definition button. (#3982)
Now you can hit a new button in the tooltip and it will reveal the definition location in the editor!

2020-08-30 17:12:27 f9ee416
feat(topology/tactic): optionally make `continuity` verbose with `?` (#3962)

2020-08-30 15:37:08 1073204
feat(logic/nontrivial): function.injective.exists_ne (#3983)
Add a lemma that an injective function from a nontrivial type has an
argument at which it does not take a given value.

2020-08-30 11:24:28 942c779
feat(meta/widget): Add css classes for indentation as required by group and nest. (#3764)
this is a transplant of https://github.com/leanprover-community/lean/pull/439
the relevant css section looks more or less like this:
```css
        .indent-code {
            text-indent: calc(var(--indent-level) * -1ch);
            padding-left: calc(var(--indent-level) * 1ch);
        }
```
For details, one can play around here: https://jsfiddle.net/xbzhL60m/45/

2020-08-30 05:38:17 ffce8f6
feat(data/complex/is_R_or_C): add typeclass for real or complex (#3934)

2020-08-30 04:53:26 a18f142
feat(set_theory/game): computation of grundy_value (nim n + nim m) (#3977)

2020-08-30 01:59:33 dfdb38a
feat(data/fin): nontrivial instance (#3979)
Add an instance `nontrivial (fin (n + 2))`.

2020-08-29 17:36:23 14e7fe8
feat(linear_algebra/char_poly/coeff,*): prerequisites for friendship theorem (#3953)
adds several assorted lemmas about matrices and `zmod p`
proves that if `M` is a square matrix with entries in `zmod p`, then `tr M^p = tr M`, needed for friendship theorem

2020-08-29 17:36:21 4c4243c
feat(linear_algebra): determinant of vectors in a basis (#3919)
From the sphere eversion project, define the determinant of a family of vectors with respects to a basis. 
The main result is `is_basis.iff_det` asserting a family of vectors is a basis iff its determinant in some basis is invertible.
Also renames `equiv_fun_basis` to `is_basis.equiv_fun` and `equiv_fun_basis_symm_apply` to `is_basis.equiv_fun_symm_apply`, in order to use dot notation.

2020-08-29 15:59:15 94b1292
doc(topology/sheaves): update module docs (#3971)

2020-08-29 15:59:13 ba41f0a
feat(data/nat): API for test_bit and bitwise operations (#3964)

2020-08-29 14:16:16 faf1df4
chore(topology/sheaves/sheaf_of_functions): rely less on defeq (#3972)
This backports some changes from the `prop_limits` branch.

2020-08-29 14:16:14 fd4628f
chore(*): bump to lean 3.19.0c, fin is now a subtype (#3955)
* Some `decidable.*` order theorems have been moved to core.
* `fin` is now a subtype. 
This means that the whnf of `fin n` is now `{i // i < n}`.
Also, the coercion `fin n → nat` is now preferred over `subtype.val`.
The entire library has been refactored accordingly. (Although I probably missed some cases.)
* `in_current_file'` was removed since the bug in 
`in_current_file` was fixed in core.
* The syntax of `guard_hyp` in core was changed from
`guard_hyp h := t` to `guard_hyp h : t`, so the syntax
for the related `guard_hyp'`, `match_hyp` and
`guard_hyp_strict` tactics in `tactic.interactive` was changed as well.

2020-08-29 13:43:16 17c4651
feat(algebraic_geometry): structure sheaf on Spec R (#3907)
This defines the structure sheaf on Spec R, following Hartshorne, as a sheaf in `CommRing` on `prime_spectrum R`.
We still need to show at the stalk at a point is just the localization; this is another page of Hartshorne, and will come in a subsequent PR.

2020-08-29 11:21:31 84d47a0
refactor(set_theory/game): make impartial a class (#3974)
* Misc. style cleanups and code golf
* Changed naming and namespace to adhere more closely to the naming convention
* Changed `impartial` to be a `class`. I am aware that @semorrison explicitly requested not to make `impartial` a class in the #3855, but after working with the definition a bit I concluded that making it a class is worth it, simply because writing `impartial_add (nim_impartial _) (nim_impartial _)` gets annoying quite quickly, but also because you tend to get goal states of the form `Grundy_value _ = Grundy_value _`. By making `impartial` a class and making the game argument explicit, these goal states look like `grundy_value G = grundy_value H`, which is much nicer to work with.

2020-08-29 04:30:09 ea177c2
feat(analysis/convex): add correspondence between convex cones and ordered semimodules (#3931)
This shows that a convex cone defines an ordered semimodule and vice-versa.

2020-08-29 02:58:36 53275f4
chore(algebra/group_with_zero): adjust some instance priorities (#3968)
Use priority 100 for these `extends` instances.

2020-08-29 00:44:57 2d3530d
chore(scripts): update nolints.txt (#3969)
I am happy to remove some nolints for you!

2020-08-28 16:07:49 4ccbb51
feat(linear_algebra): eigenspaces of linear maps (#3927)
Add eigenspaces and eigenvalues of linear maps. Add lemma that in a
finite-dimensional vector space over an algebraically closed field,
eigenvalues exist. Add lemma that eigenvectors belonging to distinct
eigenvalues are linearly independent.
This is a rework of #3864, following Cyril's suggestion. Generalized
eigenspaces will come in a subsequent PR.

2020-08-28 15:21:57 1353b7e
chore(group_theory/perm/sign): speed up proofs (#3963)
fixes #3958 
based on my completely unscientific test methods, this went from 40 seconds to ~~19~~ 17 seconds (on my laptop).
What I've done here is just `squeeze_simp`, but further speedup is definitely possible. Suggestions for what to do with `simp [*, eq_inv_iff_eq] at * <|> cc` are welcome, and should speed this file up a bit more.

2020-08-28 14:46:42 d77798a
doc(representation_theory/maschke): fix latex (#3965)

2020-08-28 14:11:16 31db0bd
feat(category_theory/limits): add kernel pairs (#3925)
Add a subsingleton data structure expressing that a parallel pair of morphisms is a kernel pair of a given morphism.
Another PR from my topos project. A pretty minimal API since I didn't need much there - I also didn't introduce anything like `has_kernel_pairs` largely because I didn't need it, but also because I don't know that it's useful for anyone, and it might conflict with ideas in the prop-limits branch.

2020-08-28 10:25:09 a08fb2f
feat(tactic/congr): additions to the congr' tactic (#3936)
This PR gives a way to apply `ext` after `congr'`.
`congr' 3 with x y : 2` is a new notation for `congr' 3; ext x y : 2`.
New tactic `rcongr` that recursively keeps applying `congr'` and `ext`.
Move `congr'` and every tactic depending on it from `tactic/interactive` to a new file `tactic/congr`.
The original `tactic.interactive.congr'` is now best called as `tactic.congr'`. 
Other than the tactics `congr'` and `rcongr` no tactics have been (essentially) changed.

2020-08-28 07:24:16 ceacf54
feat(category_theory/filtered): filtered categories, and filtered colimits in `Type` (#3960)
This is some work @rwbarton did last year. I've merged master, written some comments, and satisfied the linter.

2020-08-28 05:18:40 513f740
feat(topology/sheaves): checking the sheaf condition under a forgetful functor (#3609)
# Checking the sheaf condition on the underlying presheaf of types.
If `G : C ⥤ D` is a functor which reflects isomorphisms and preserves limits
(we assume all limits exist in both `C` and `D`),
then checking the sheaf condition for a presheaf `F : presheaf C X`
is equivalent to checking the sheaf condition for `F ⋙ G`.
The important special case is when
`C` is a concrete category with a forgetful functor
that preserves limits and reflects isomorphisms.
Then to check the sheaf condition it suffices
to check it on the underlying sheaf of types.
## References
* https://stacks.math.columbia.edu/tag/0073

2020-08-28 03:16:37 7e6393f
feat(topology/sheaves): the sheaf condition for functions satisfying a local predicate (#3906)
Functions satisfying a local predicate form a sheaf.
This sheaf has a natural map from the stalk to the original fiber, and we give conditions for this map to be injective or surjective.

2020-08-27 20:30:40 eaaac99
feat(geometry/euclidean/basic): reflection (#3932)
Define the reflection of a point in an affine subspace, as a bundled
isometry, in terms of the orthogonal projection onto that subspace,
and prove some basic lemmas about it.

2020-08-27 18:31:26 359261e
feat(data/nat): commutativity of bitwise operations (#3956)

2020-08-27 14:44:42 6b556cf
feat(combinatorics/adjacency_matrix): defines adjacency matrices of simple graphs (#3672)
defines the adjacency matrix of a simple graph
proves lemmas about adjacency matrix that will form the bulk of the proof of the friendship theorem (freek 83)

2020-08-27 06:25:31 ea9bf31
refactor(analysis/normed_space/real_inner_product,geometry/euclidean): orthogonal projection hypotheses (#3952)
As advised by Patrick in #3932, define `orthogonal_projection` (for
both real inner product spaces and Euclidean affine spaces) without
taking hypotheses of the subspace being nonempty and complete,
defaulting to the identity map if those conditions are not satisfied,
so making `orthogonal_projection` more convenient to use with those
properties only being needed on lemmas but not simply to refer to the
orthogonal projection at all.
The hypotheses are removed from lemmas that don't need them because
they are still true with the identity map.  Some `nonempty` hypotheses
are also removed where they follow from another hypothesis that gives
a point or a nonempty set of points in the subspace.
The unbundled `orthogonal_projection_fn` that's used only to prove
properties needed to define a bundled linear or affine map still takes
the original hypotheses, then a bundled map taking those hypotheses is
defined under a new name, then that map is used to define plain
`orthogonal_projection` which does not take any of those hypotheses
and is the version expected to be used in all lemmas after it has been
defined.

2020-08-27 00:47:46 5627aed
chore(scripts): update nolints.txt (#3954)
I am happy to remove some nolints for you!

2020-08-26 20:24:56 c147894
feat(data/fin): flesh out API for fin (#3769)
Provide more API for `fin n`. Lemma names chosen to match equivalent lemmas in `nat`. Does not develop docstrings for the lemmas.
New lemmas:
iff lemmas for comparison
`ne_iff_vne`
`eq_mk_iff_coe_eq`
`succ_le_succ_iff`
`succ_lt_succ_iff`
lemmas about explicit numerals
`val_zero'`
`mk_zero`
`mk_one`
`mk_bit0`
`mk_bit1`
`cast_succ_zero`
`succ_zero_eq_one`
`zero_ne_one`
`pred_one`
lemmas about order
`zero_le`
`succ_pos`
`mk_succ_pos`
`one_pos`
`one_lt_succ_succ`
`succ_succ_ne_one`
`pred_mk_succ`
`cast_succ_lt_last`
`cast_succ_lt_succ`
`lt_succ`
`last_pos`
`le_coe_last`
coe lemmas:
`coe_eq_cast_succ`
`coe_succ_eq_succ`
`coe_nat_eq_last`
succ_above API:
`succ_above_below`
`succ_above_zero`
`succ_above_last`
`succ_above_above`
`succ_above_pos`
addition API:
`add_one_pos`
`pred_add_one`
Co-authored by: Yury Kudryashov urkud@ya.ru

2020-08-26 18:55:44 26dfea5
feat(algebra/big_operators): sum of two products (#3944)

2020-08-26 18:55:42 64aad5b
feat(category_theory/adjunction): uniqueness of adjunctions (#3940)
Co-authored by @thjread

2020-08-26 18:55:40 080746f
feat(algebra/category/*/limits): don't rely on definitions (#3873)
This is a second attempt (which works **much** better) at #3860, after @TwoFX explained how to do it properly.
This PR takes the constructions of limits in the concrete categories `(Add)(Comm)[Mon|Group]`, `(Comm)(Semi)Ring`, `Module R`, and `Algebra R`, and makes sure that they never rely on the actual definitions of limits in "prior" categories.
Of course, at this stage the `has_limit` typeclasses still contain data, so it's hard to judge whether we're really not relying on the definitions. I've marked all the `has_limits` instances in these files as irreducible, but the real proof is just that this same code is working over on the `prop_limits` branch.

2020-08-26 17:53:30 2d9ab61
feat(ring_theory/ideal/basic): R/I is an ID iff I is prime (#3951)
`is_integral_domain_iff_prime (I : ideal α) : is_integral_domain I.quotient ↔ I.is_prime`

2020-08-26 16:20:07 2b6924d
feat(topology/algebra/ordered): conditions for a strictly monotone function to be a homeomorphism (#3843)
If a strictly monotone function between linear orders is surjective, it is a homeomorphism.
If a strictly monotone function between conditionally complete linear orders is continuous, and tends to `+∞` at `+∞` and to `-∞` at `-∞`, then it is a homeomorphism.
[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Order.20topology)
Co-authored by: Yury Kudryashov <urkud@ya.ru>

2020-08-26 14:45:52 f4f0854
feat(ring_theory/bundled_subring): add bundled subrings (#3886)

2020-08-26 14:45:50 0d67a02
feat(ring_theory/noetherian): maximal among set iff Noetherian (#3846)
Main theorem is `set_has_maximal_iff_noetherian,` which relates well foundedness of `<` to being noetherian.
Most notably a result of
`well_founded.well_founded_iff_has_max'` provides the fact that on a partial ordering, `well_founded >` is equivalent to each nonempty set having a maximal element.
`well_founded.well_founded_iff_has_min` provides an analogous fact for `well_founded <`.
Some other miscellaneous lemmas are as follows
`localization_map.integral_domain_of_local_at_prime` is the localization of an integral domain at a prime's complement is an integral domain
`ideal.mul_eq_bot` is the fact that in an integral domain if I*J = 0, then at least one is 0.
`submodule.nonzero_mem_of_gt_bot` is that if ⊥ < J, then J has a nonzero member.
`lt_add_iff_not_mem` is that b is not a member of J iff J < J+(b).
`bot_prime` states that 0 is a prime ideal of an integral domain.

2020-08-26 13:12:40 187bfa5
feat(set/basic): additions to prod (#3943)
Also add one lemma about `Inter`.

2020-08-26 13:12:38 fb6046e
feat(*/category/*): add coe_of simp lemmas (#3938)

2020-08-26 11:39:01 206673e
chore(*): trivial golfing using dec_trivial tactic (#3949)

2020-08-26 10:32:55 dd742dc
feat(finsupp/basic): add hom_ext (#3941)
Two R-module homs from finsupp X R which agree on `single x 1` agree everywhere.
```
lemma hom_ext [semiring β] [add_comm_monoid γ] [semimodule β γ] (φ ψ : (α →₀ β) →ₗ[β] γ)
  (h : ∀ a : α, φ (single a 1) = ψ (single a 1)) : φ = ψ
```

2020-08-26 09:56:27 a31096d
fix(set_theory/game): remove stray #lint introduced in #3939 (#3948)

2020-08-26 00:44:38 da47548
chore(scripts): update nolints.txt (#3945)
I am happy to remove some nolints for you!

2020-08-25 19:52:43 666a2e2
feat(algebra/group/with_one): more API for with_zero (#3716)

2020-08-25 16:55:18 4478719
feat(data/padic/padic_integers): homs to zmod(p ^ n) (#3882)
This is the next PR in a series of PRs on the padic numbers/integers that should culminate in a proof that Z_p is isomorphic to the ring of Witt vectors of zmod p.
In this PR we build ring homs from Z_p to zmod (p ^ n).

2020-08-25 14:36:42 b03ce61
chore(set_theory/game): various cleanup and code golf (#3939)

2020-08-25 14:36:40 878c44f
feat(category_theory/adjunction): restrict adjunction to full subcategory (#3924)
Blocked by #3923.

2020-08-25 13:04:30 a5a9858
feat(data/sigma/basic): cleanup (#3933)
Use namespaces
Add `sigma.ext_iff`, `psigma.ext` and `sigma.ext_iff`

2020-08-25 12:10:39 3409388
doc(ring_theory/*): add some module docstrings (#3880)

2020-08-24 23:25:19 d4d33de
feat(combinatorics): define simple graphs (#3458)
adds basic definition of `simple_graph`s

2020-08-24 19:17:49 8af1579
refactor(geometry/euclidean): split up file (#3926)
Split up `geometry/euclidean.lean` into four smaller files in
`geometry/euclidean`.  There should be no changes to any of the
individual definitions, or to the set of definitions present, but
module doc strings have been expanded.
Various definitions in `geometry/euclidean/basic.lean` are not used by
all the other files, so it would be possible to split it up further,
but that doesn't seem necessary for now, and more of those things may
be used by more other files in future.  (For example,
`geometry/euclidean/circumcenter.lean` doesn't make any use of angles
at present.  But a version of the law of sines involving the
circumradius would naturally go in
`geometry/euclidean/circumcenter.lean`, and would introduce such a
dependency.)

2020-08-24 16:57:27 1404ad8
feat(algebra/add_torsor): vsub_vadd_comm (#3928)
Add another (commutative) `add_torsor` rearrangement lemma.

2020-08-24 16:23:09 96b559c
feat(set_theory/game): grundy number of single-heap nim (#3930)

2020-08-24 01:55:42 1ccdbb9
feat(category_theory/images): unique image (#3921)
Show that the strong-epi mono factorisation of a morphism is unique.

2020-08-24 01:55:40 685d9dd
feat(category_theory): cancel fully faithful functor (#3920)
Construct the natural isomorphism between `F` and `G` given a natural iso between `F ⋙ H` and `G ⋙ H` for a fully faithful `H`.

2020-08-24 01:00:11 ebd3351
chore(category_theory/conj): add a new simp lemma (#3922)
Mark a new simp lemma which I think is helpful and simplify some proofs using it.

2020-08-24 01:00:09 f230409
feat(category_theory/adjunction): opposite adjunctions (#3899)
Add two constructions for adjoints for opposite functors.

2020-08-24 01:00:07 bfc8c66
feat(category_theory/limits/shapes/finite*): finite limits from limits (#3800)
Add some missing derivations in the new has_limits hierarchy

2020-08-23 23:56:34 bf6cd28
feat(category_theory/fully_faithful): equivalence of homsets (#3923)
I was *so sure* I'd already made this PR but I can't find it nor this construction, so here it is.

2020-08-23 16:22:06 7d4f773
feat(ring_theory/jacobson): Proof that if a ring is a Jacobson Ring then so is its localization at a single element (#3651)
The main result here is that the localization of a Jacobson ring to a single element is also a Jacobson ring, which is one of the things needed for the proof that `R` is Jacobson if and only if `R[x]` is Jacobson.
Two characterization of Jacobson rings in terms of their quotient rings are also included, again needed to prove `R[x]` is Jacobson.

2020-08-23 15:35:50 e216755
feat(linear_algebra/affine_space): more lemmas (#3918)
Add some more affine space lemmas.  In particular, this includes
lemmas about the dimension of the span of a finite affinely
independent family.

2020-08-23 14:51:36 d80f3ef
feat(geometry/euclidean): Monge point and orthocenter (#3872)
The main purpose of this PR is to define the orthocenter of a
triangle.
Simplices in more than two dimensions do not in general have an
orthocenter: the altitudes are not necessarily concurrent.  However,
there is a n-dimensional generalization of the orthocenter in the form
of the Monge point of a simplex.  Define a Monge plane to be an
(n-1)-dimensional subspace that passes through the centroid of an
(n-2)-dimensional face of the simplex and is orthogonal to the
opposite edge.  Then the Monge planes of a simplex are always
concurrent, and their point of concurrence is known as the Monge point
of the simplex.  Furthermore, the circumcenter O, centroid G and Monge
point M are collinear in that order on the Euler line, with OG : GM =
(n-1) : 2.
Here, we use that ratio as a convenient way to define the Monge point
in terms of the existing definitions of the circumcenter and the
centroid.  First we set up some infrastructure for dealing with affine
combinations of the vertices of a simplex together with its
circumcenter, which can be convenient for computations rather than
dealing with combinations of the vertices alone; the use of an
inductive type `points_with_circumcenter_index` seemed to be more
convenient than other options for how to index such combinations.
Then, a straightforward calculation using `inner_weighted_vsub` shows
that the point defined in terms of the circumcenter and the centroid
does indeed lie in the Monge planes, so justifying the definition as
being a definition of the Monge point.  It is then shown to be the
only point in that intersection (in fact, the only point in the
intersection of all the Monge planes where one of the two vertices
needed to specify a Monge plane is fixed).
The altitudes of a simplex are then defined.  In the case of a
triangle, the orthocenter is defined to be the Monge point, the
altitudes are shown to equal the Monge planes (mathematically trivial,
but involves quite a bit of fiddling around with `fin 3`) and thus the
orthocenter is shown to lie in the altitudes and to be the unique
point lying in any two of them (again, involves various fiddling
around with `fin 3` to link up with the previous lemmas).  Because of
the definition chosen for the Monge point, the position of the
orthocenter on the Euler line of the triangle comes for free (not
quite `rfl`, but two rewrites of `rfl` lemmas plus `norm_num`).

2020-08-23 13:21:25 588e46c
feat(tactic/*,meta/expr): refactor and extend binder matching functions (#3830)
This PR deals with meta functions that deconstruct expressions starting
with pi or lambda binders. Core defines `mk_local_pis` to deconstruct pi
binders and `tactic.core` used to contain some ad-hoc variations of its
functionality. This PR unifies all these variations and adds several
more, for both pi and lambda binders. Specifically:
- We remove `mk_local_pis_whnf`. Use `whnf e md >>= mk_local_pis` instead.
  Note: we reuse the name for another function with different semantics;
  see below.
- We add `mk_{meta,local}_{pis,lambdas}`, `mk_{meta,local}_{pis,lambdas}n`,
  `mk_{meta,local}_{pis,lambdas}_whnf`, `mk_{meta,local}_{pis,lambdas}n_whnf`.
  These can all be used to 'open' a pi or lambda binder. The binder is
  instantiated with a fresh local for the `local` variants and a fresh
  metavariable for the `meta` variants. The `whnf` variants normalise
  the input expression before checking for leading binders. The
  `{pis,lambdas}n` variants match a given number of leading binders.
  Some of these functions were already defined, but we now implement
  them in terms of a new function, `mk_binders`, which abstracts over
  the common functionality.
- We rename `get_pi_binders_dep` to `get_pi_binders_nondep`. This function returns
  the nondependent binders, so the old name was misleading.
- We add `expr.match_<C>` for every constructor `C` of `expr`. `match_pi`
  and `match_lam` are needed to implement the `mk_*` functions; the
  other functions are added for completeness.
- (Bonus) We add `get_app_fn_args_whnf` and `get_app_fn_whnf`. These are variants
  of `get_app_fn_args` and `get_app_fn`, respectively, which normalise the input
  expression as necessary.
The refactoring might be a slight performance regression because the new
implementation adds some indirection. But the affected functions aren't
widely used anyway and I suspect that the performance loss is very
minor, so having clearer and more concise code is probably worth it.

2020-08-23 12:27:41 ffd8626
refactor(linear_algebra/affine_space/basic): make more arguments of smul_vsub_vadd_mem implicit (#3917)
Came up in #3872.

2020-08-23 06:36:27 7d88a30
fix(data/sigma/basic): rename `ext` to `sigma.ext` (#3916)

2020-08-23 05:18:43 ff97055
feat(data/finset/basic): insert_singleton_comm (#3914)
Add the result that `({a, b} : finset α) = {b, a}`.  This came up in
#3872, and `library_search` does not show it as already present.

2020-08-23 02:34:47 7ac7246
feat(linear_algebra/finite_dimensional): Add `linear_equiv.of_inj_endo` and related lemmas (#3878)
This PR prepares #3864.
* Move the section `zero_dim` up.
* Add several lemmas about finite dimensional vector spaces. The only new definition is `linear_equiv.of_injective_endo`, which produces a linear equivalence from an injective endomorphism.

2020-08-22 18:09:38 abe4459
feat(analysis/convex): define concavity of functions (#3849)

2020-08-22 15:14:00 9e9b380
doc(algebra/linear_recurrence): fix a mistake in module docstring (#3911)

2020-08-22 15:13:58 65ceb00
fix(topology): simplify proof of Heine-Cantor (#3910)

2020-08-22 14:33:36 6a85278
feat(data/polynomial/eval): eval_finset.prod (#3903)
Evaluating commutes with finset.prod; useful in a variety of situations in numerical analysis.

2020-08-22 13:26:57 aca785a
feat(linear_algebra): linear_equiv_matrix lemmas (#3898)
From the sphere eversion project, with help by Anne for the crucial `linear_equiv_matrix_apply`.

2020-08-22 12:32:20 e9d1067
feat(category_theory/opposites): isomorphism of opposite functor (#3901)
Get some lemmas generated by `simps` and add two isomorphisms for opposite functors.

2020-08-22 10:07:23 011a262
feat(set_theory/game): impartial games and the Sprague-Grundy theorem (#3855)

2020-08-22 09:35:08 e546e94
fix(data/equiv/transfer_instance): remove stray #lint (#3908)

2020-08-22 06:31:00 13881d7
feat(tactic/dec_trivial): make dec_trivial easier to use (#3875)

2020-08-22 04:56:48 83db96b
feat(algebra/group/with_one): make with_one and with_zero irreducible. (#3883)

2020-08-22 01:22:48 4b24166
chore(scripts): update nolints.txt (#3905)
I am happy to remove some nolints for you!

2020-08-22 00:21:09 278f512
feat(data/real): define the golden ratio and its conjugate, prove irrationality of both and Binet's formula (#3885)
Co-authored by @alreadydone and @monadius through their solutions to the corresponding Codewars Kata.

2020-08-21 22:13:24 9998bee
chore(measure_theory/*): remove some `measurable f` arguments (#3902)

2020-08-21 20:49:40 4c04f0b
feat(topology/algebra/ordered): sum of functions with limits at_top and cst (#3833)
Two functions which tend to `at_top` have sum tending to `at_top`.  Likewise if one tends to `at_top` and one tends to a constant.
Also made a couple of edits relating to [this conversation](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Ordered.20groups.20have.20no.20top.20element) about `no_top` for algebraic structures:

2020-08-21 19:07:51 1db32c5
feat(set/basic): some results about `set.pi` (#3894)
New definition: `function.eval`
Also some changes in `set.basic`
Name changes:
```
pi_empty_index -> empty_pi
pi_insert_index -> insert_pi
pi_singleton_index -> singleton_pi
set.push_pull -> image_inter_preimage
set.push_pull' -> image_preimage_inter
```

2020-08-21 18:31:42 0c7ac83
feat(measure_theory/bochner_integration): add `integral_smul_measure` (#3900)
Also add `integral_dirac`

2020-08-21 16:04:55 ac56790
feat(order/rel_iso): a new definition of order_iso, using preorder instances (#3838)
defines (new) `order_embedding` and `order_iso`, which map both < and <=
replaces existing `rel_embedding` and `rel_iso` instances preserving < or <= with the new abbreviations

2020-08-21 13:01:05 e3409c6
feat(data/zmod/basic): morphisms to zmod are surjective (deps: #3888) (#3889)
... and determined by their kernel

2020-08-21 11:41:54 4921be9
feat(analysis/special_functions/arsinh): inverse hyperbolic sine function (#3801)
Added the following lemmas and definitions:
`cosh_def`
`sinh_def`
`cosh_pos`
`sinh_strict_mono`
`sinh_injective`
`sinh_surjective`
`sinh_bijective`
`real.cosh_sq_sub_sinh_sq`
`sqrt_one_add_sinh_sq`
`sinh_arsinh`
`arsinh_sin`
This is from the list of UG not in lean. `cosh` coming soon.

2020-08-21 10:07:49 7a48761
feat(logic/function): left/right inverse iff (#3897)
From the sphere eversion project.

2020-08-21 10:07:47 de20a39
feat(group_theory/subroup,ring_theory/ideal/operations): lift_of_surjective (#3888)
Surjective homomorphisms behave like quotient maps

2020-08-21 10:07:46 045b6c7
chore(topology/basic): use dot notation (#3861)
## API changes
* add `set.range_sigma_mk`, `finset.sigma_preimage_mk`, `finset.sigma_preimage_mk_of_subset`,
  `finset.sigma_image_fst_preimage_mk`, `finset.prod_preimage'`;
* rename `filter.monotone.tendsto_at_top_finset` to `filter.tendsto_at_top_finset_of_monotone`,
  add alias `monotone.tendsto_at_top_finset`;
* add `filter.tendsto_finset_preimage_at_top_at_top`;
* add `filter.tendsto.frequently`;
* add `cluster_pt_principal_iff_frequently`, `mem_closure_iff_frequently`, `filter.frequently.mem_closure`,
  `filter.frequently.mem_of_closed`, `is_closed.mem_of_frequently_of_tendsto`;
* rename `mem_of_closed_of_tendsto` to `is_closed.mem_of_tendsto`;
* delete `mem_of_closed_of_tendsto'`; use new `is_closed.mem_of_frequently_of_tendsto` instead;

2020-08-21 10:07:44 d8cde2a
feat(measure_theory/interval_integral): more versions of FTC-1 (#3709)
Left/right derivative, strict derivative, differentiability in both endpoints.
Other changes:
* rename `filter.tendsto_le_left` and `filter.tendsto_le_right` to `filter.tendsto.mono_left` and `filter.tendsto.mono_right`, swap arguments;
* rename `order_top.tendsto_at_top` to `order_top.tendsto_at_top_nhds`;
* introduce `tendsto_Ixx_class` instead of `is_interval_generated`.

2020-08-21 08:35:09 bc3e835
feat(tactic/rcases): clear pattern `-` in rcases (#3868)
This allows you to write:
```lean
example (h : ∃ x : ℕ, true) : true :=
begin
  rcases h with ⟨x, -⟩,
  -- x : ℕ |- true
end
```
to clear unwanted hypotheses. Note that dependents are also cleared,
meaning that you can get into trouble if you try to keep matching when a
variable later in the pattern is deleted. The `_` pattern will match
a hypothesis even if it has been deleted, so this is the recommended way
to match on variables dependent on a deleted hypothesis.
You can use `-` if you prefer, but watch out for unintended variables
getting deleted if there are duplicate names!

2020-08-21 07:33:42 da6cd55
feat(determinant): towards multilinearity (#3887)
From the sphere eversion project. In a PR coming soon, this will be used to prove that the determinant of a family of vectors in a given basis is multi-linear (see [here](https://github.com/leanprover-community/sphere-eversion/blob/2c776f6a92c0f9babb521a02ab0cc341a06d3f3c/src/vec_det.lean) for a preview if needed).

2020-08-21 05:29:48 23749aa
chore(measure_theory/*): use `_measure` instead of `_meas` (#3892)

2020-08-21 03:53:31 31cd6dd
chore(order/bounded_lattice): use `⦃⦄` in `disjoint.symm` (#3893)

2020-08-21 02:24:33 1719035
feat(category_theory/monad/*): Add category of bundled (co)monads; prove equivalence of monads with monoid objects (#3762)
This PR constructs bundled monads, and proves the "usual" equivalence between the category of monads and the category of monoid objects in the endomorphism category.
It also includes a definition of morphisms of unbundled monads, and proves some necessary small lemmas in the following two files:
1. `category_theory.functor_category`
2. `category_theory.monoidal.internal`
Given any isomorphism in `Cat`, we construct a corresponding equivalence of categories in `Cat.equiv_of_iso`.

2020-08-21 01:44:02 7271f74
chore(scripts): update nolints.txt (#3891)
I am happy to remove some nolints for you!

2020-08-21 00:08:35 0a48f0a
feat(system/random): a monad for (pseudo-)randomized computations (#3742)

2020-08-20 23:05:44 36386fc
feat(linear_algebra): some easy linear map/equiv lemmas (#3890)
From the sphere eversion project.

2020-08-20 21:33:51 c9704ff
chore(data/matrix, linear_algebra): generalize universe parameters (#3879)
@PatrickMassot was complaining that `matrix m n R` often doesn't work when the parameters are declared as `m n : Type*` because the universe parameters were equal. This PR makes the universe parameters of `m` and `n` distinct where possible, also generalizing some other linear algebra definitions.
The types of `col` and `row` used to be `matrix n punit` but are now `matrix n unit`, otherwise the elaborator can't figure out the universe. This doesn't seem to break anything except for the cases where `punit.{n}` was explicitly written down.
There were some breakages, but the total amount of changes is not too big.

2020-08-20 21:33:49 901c5bc
feat(ring_theory/separable): a separable polynomial splits into a product of unique `X - C a` (#3877)
Bonus result: the degree of a separable polynomial is the number of roots
in the field where it splits.

2020-08-20 21:33:47 9f525c7
chore(category_theory/limits/types): cleanup (#3871)
Backporting some cleaning up work from `prop_limits`, while it rumbles onwards.

2020-08-20 16:50:10 7a93d87
doc(src/ring_theory/integral_domain.lean): add module docstring (#3881)

2020-08-20 11:47:20 4631018
feat(data/polynomial): Add polynomial/eval lemmas (#3876)
Add some lemmas about `polynomial`. In particular, add lemmas about
`eval2` for the case that the ring `S` that we evaluate into is
non-commutative.

2020-08-20 08:43:40 e174f42
feat(equiv/transfer_instances): other algebraic structures (#3870)
Some updates to `data.equiv.transfer_instances`.
1. Use `@[to_additive]`
2. Add algebraic equivalences between the original and transferred instances.
3. Transfer modules and algebras.

2020-08-20 08:43:38 d7621b9
feat(data/list/basic): lemmas about foldr/foldl (#3865)
This PR prepares #3864.
* Move lemmas about `foldr`/`foldl` into the appropriate section.
* Add variants of the `foldl_map`/`foldr_map` lemmas.
* Add lemmas stating that a fold over a list of injective functions is injective.

2020-08-20 08:00:59 ba06edc
chore(data/complex/module): move `linear_map.{re,im,of_real}` from `analysis` (#3874)
I'm going to use these `def`s in `analysis/convex/basic`, and I don't
want to `import analysis.normed_space.basic` there.

2020-08-20 06:10:17 34db3c3
feat(order/category): various categories of ordered types (#3841)
This is a first step towards the category of simplicial sets (which are presheaves on the category of nonempty finite linear orders).

2020-08-20 03:32:46 4364798
fix(data/fin): better defeqs in fin.has_le instance (#3869)
This ensures that the instances from `fin.decidable_linear_order` match
the direct instances. They were defeq before but not at instance reducibility.

2020-08-19 22:20:42 9a8e504
feat(linear_algebra/affine_space/basic): more direction lemmas (#3867)
Add a few more lemmas about the directions of affine subspaces.

2020-08-19 21:38:08 7e6b8a9
feat(linear_algebra/affine_space/basic): more vector_span lemmas (#3866)
Add more lemmas relating `vector_span` to the `submodule.span` of
particular subtractions of points.  The new lemmas fix one of the
points in the subtraction and exclude that point, or its index in the
case of an indexed family of points rather than a set, from being on
the other side of the subtraction (whereas the previous lemmas don't
exclude the trivial subtraction of a point from itself).

2020-08-19 17:44:57 bd5552a
feat(ring_theory/polynomial/basic): Isomorphism between polynomials over a quotient and quotient over polynomials (#3847)
The main statement is `polynomial_quotient_equiv_quotient_polynomial`, which gives that If `I` is an ideal of `R`, then the ring polynomials over the quotient ring `I.quotient` is isomorphic to the quotient of `polynomial R` by the ideal `map C I`.
Also, `mem_map_C_iff` shows that `map C I` contains exactly the polynomials whose coefficients all lie in `I`

2020-08-19 13:32:50 15cacf0
feat(analysis/normed_space/real_inner_product): orthogonal subspace order (#3863)
Define the Galois connection between `submodule ℝ α` and its
`order_dual` given by `submodule.orthogonal`.  Thus, deduce that the
inf of orthogonal subspaces is the subspace orthogonal to the sup (for
three different forms of inf), as well as replacing the proof of
`submodule.le_orthogonal_orthogonal` by a use of
`galois_connection.le_u_l`.

2020-08-19 13:32:45 d963213
refactor(algebra/add_torsor,linear_algebra/affine_space/basic): vsub_set (#3858)
The definition of `vsub_set` in `algebra/add_torsor` does something
similar to `set.image2`, but expressed directly with `∃` inside
`{...}`.  Various lemmas in `linear_algebra/affine_space/basic`
likewise express such sets of subtractions with a given point on one
side directly rather than using `set.image`.  These direct forms can
be inconvenient to use with lemmas about `set.image2`, `set.image` and
`set.range`; in particular, they have the equality inside the binders
expressed the other way round, leading to constructs such as `conv_lhs
{ congr, congr, funext, conv { congr, funext, rw eq_comm } }` when
it's necessary to convert one form to the other.
The form of `vsub_set` was suggested in review of #2720, the original
`add_torsor` addition, based on what was then used in
`algebra/pointwise`.  Since then, `image2` has been added to mathlib
and `algebra/pointwise` now uses `image2`.
Thus, convert these definitions to using `image2` or `''` as
appropriate, so simplifying various proofs.
This PR deliberately only addresses `vsub_set` and related definitions
for such sets of subtractions; it does not attempt to change any other
definitions in `linear_algebra/affine_space/basic` that might also be
able to use `image2` or `''` but are not such sets of subtractions,
and does not change the formulations of lemmas not involving such sets
even if a rearrangement of equalities and existential quantifiers in
some such lemmas might bring them closer to the formulations about
images of sets.

2020-08-19 11:58:06 1e677e6
chore(data/finset/basic): use `finset.map` in `sigma_eq_bind` (#3857)

2020-08-19 11:22:59 a100396
doc(linear_algebra/sesquilinear_form): add missing backtick (#3862)

2020-08-19 03:25:09 8579a5f
fix(test/norm_cast): fix(?) test (#3859)

2020-08-18 21:50:05 425aee9
feat(analysis/calculus) : L'Hôpital's rule, 0/0 case (#3740)
This proves several forms of L'Hôpital's rule for computing 0/0 indeterminate forms, based on the proof given here : [Wikibooks](https://en.wikibooks.org/wiki/Calculus/L%27H%C3%B4pital%27s_Rule). See module docstring for more details.

2020-08-18 20:22:26 5d2256d
feat(miu_language): a formalisation of the MIU language described by D. Hofstadter in "Gödel, Escher, Bach". (#3739)
We define an inductive type `derivable` so that `derivable x`  represents the notion that the MIU string `x` is derivable in the MIU language. We show `derivable x` is equivalent to `decstr x`, viz. the condition that `x` begins with an `M`, has no `M` in its tail, and for which `count I` is congruent to 1 or 2 modulo 3.
By showing `decidable_pred decstr`, we deduce that `derivable` is decidable.

2020-08-18 17:14:51 0854e83
chore(algebra/euclidean_domain): docstrings (#3816)

2020-08-18 15:37:53 7877033
chore(logic/basic): `and_iff_left/right_iff_imp`, `or.right_comm` (#3854)
Also add `@[simp]` to `forall_bool` and `exists_bool`

2020-08-18 15:37:47 cb4a5a2
doc(field_theory/tower): correct docstring (#3853)

2020-08-18 14:01:34 9a70533
feat(data/option/basic): add ne_none_iff_exists (#3856)

2020-08-18 10:28:42 67549d9
feat(order/filter/at_top_bot): add `at_bot` versions for (almost) all `at_top` lemmas (#3845)
There are a few lemmas I ignored, either because I thought a `at_bot` version wouldn't be useful (e.g subsequence lemmas), because there is no "order inversing" equivalent of `monotone` (I think ?), or because I just didn't understand the statement so I was unable to tell if it was useful or not.

2020-08-18 08:45:02 67e0019
refactor(topology/metric_space/baire): use choose! in Baire theorem (#3852)
Use `choose!` in the proof of Baire theorem.

2020-08-18 08:45:00 6538274
chore(data/set/finite): explicit `f` in `finset.preimage s f hf` (#3851)
Otherwise pretty printer shows just `finset.preimage s _`.

2020-08-18 08:44:58 c356148
feat(category_theory/abelian): pseudoelements and a four lemma (#3803)

2020-08-18 07:06:45 0494807
feat(algebra/ordered_*): cleanup and projection notation (#3850)
Also add a few new projection notations.

2020-08-18 00:46:41 cd7c228
chore(scripts): update nolints.txt (#3848)
I am happy to remove some nolints for you!

2020-08-17 21:27:17 b68702e
chore(field_theory/tower): generalize tower law to modules (#3844)

2020-08-17 21:27:15 3ea8e28
feat(tactic/choose): derive local nonempty instances (#3842)
This allows `choose!` to work even in cases like `{A : Type} (p : A -> Prop) (h : ∀ x : A, p x → ∃ y : A, p y)`, where we don't know that `A` is nonempty because it is generic, but it can be derived from the inhabitance of other variables in the context of the `∃ y : A` statement. As requested on zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/non.20dependent.20chooser/near/207126587

2020-08-17 21:27:14 f77530e
feat(ring_theory/localization): Generalize theorems about localization over an integral domain (#3780)
A number of theorems about the `fraction_map` from an integral domain to its field of fractions can be generalized to apply to any `localization_map` that were the localization set doesn't contain any zero divisors. The main use for this is to show that localizing an integral domain at any set of non-zero elements is an integral domain, were previously this was only proven for the field of fractions.
I made `le_non_zero_divisors` a class so that the integral domain instance can be synthesized automatically once you show that zero isn't in the localization set, but it could be left as just a proposition instead if that seems unnecessary.

2020-08-17 20:43:24 f818acb
feat(analysis/normed_space): generalize corollaries of Hahn-Banach (#3658)

2020-08-17 17:33:37 f8bf001
fix(ring_theory/localization): remove coe_submodule instance (#3832)
This coe can loop. See zulip discussion at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Unknown.20error.20while.20type-checking.20with.20.60use.60/near/207089095

2020-08-17 16:59:15 472251b
feat(algebra): define linear recurrences and prove basic lemmas about them (#3829)
We define "linear recurrences", i.e assertions of the form `∀ n : ℕ, u (n + d) = a 0 * u n + a 1 * u (n+1) + ... + a (d-1) * u (n+d-1)`, and we introduce basic related lemmas and definitions (solution space, auxiliary polynomial). Currently, the most advanced theorem is : `q ^ n` is a solution iff `q` is a root of the auxiliary polynomial.

2020-08-17 15:28:54 3edf2b2
feat(ring_theory/DVR,padics/padic_integers): characterize ideals of DVRs, apply to `Z_p` (#3827)
Also introduce the p-adic valuation on `Z_p`, stolen from the perfectoid project.
Coauthored by: Johan Commelin <johan@commelin.net>

2020-08-17 15:28:52 d4cb237
feat(algebra/module): define ordered semimodules and generalize convexity of functions (#3728)

2020-08-17 13:59:04 bc72d90
refactor(logic/basic): classical -> root, root -> decidable (#3812)
This moves all logic lemmas with `decidable` instances into the `decidable` namespace, and moves or adds classical versions of these to the root namespace. This change hits a lot of files, mostly to remove the `classical.` prefix on explicit references to classical lemmas.

2020-08-17 12:15:00 1a8f6bf
feat(lint): improved ge_or_gt linter (#3810)
The linter will now correctly accepts occurrences of `f (≥)` and `∃ x ≥ t, b`
The linter will still raise a false positive on `∃ x y ≥ t, b` (with 2+ bound variables in a single binder that involves `>/≥`)
In contrast to the previous version of the linter, this one *does* check hypotheses.
This should reduce the `@[nolint ge_or_gt]` attributes from ~160 to ~10.

2020-08-17 10:46:14 2a8d7f3
chore(analysis/normed_space/banach): correct typo (#3840)
Correct a typo from an old global replace.

2020-08-17 09:54:31 41cbfdc
chore(analysis/hofer): use  the new choose! (#3839)

2020-08-17 09:11:02 626de47
feat(linear_algebra/affine_space/combination): centroid (#3825)
Define the centroid of points in an affine space (given by an indexed
family with a `finset` of the index type), when the underlying ring
`k` is a division ring, and prove a few lemmas about cases where this
does not involve division by zero.  For example, the centroid of a
triangle or simplex, although none of the definitions and lemmas here
require affine independence so they are all stated more generally.
(The sort of things that would be appropriate to state specifically
for the case of a simplex would be e.g. defining medians and showing
that the centroid is the intersection of any two medians.)

2020-08-17 04:44:59 6773f52
feat(category_theory): limits in the category of indexed families (#3737)
A continuation of #3735, hopefully useful in #3638.

2020-08-17 04:10:13 b0b5cd4
feat(geometry/euclidean): circumradius simp lemmas (#3834)
Mark `dist_circumcenter_eq_circumradius` as a `simp` lemma.  Also add
a variant of that lemma where the distance is the other way round so
`simp` can work with both forms.

2020-08-17 03:03:18 43337f7
chore(data/nat/digits): refactor proof of `last_digit_ne_zero` (#3836)
I thoroughly misunderstood why my prior attempts for #3544 weren't working. I've refactored the proof so the `private` lemma is no longer necessary.

2020-08-17 01:29:28 c1fece3
fix(tactic/refine_struct): accept synonyms for `structure` types (#3828)

2020-08-17 00:44:50 56ed455
chore(scripts): update nolints.txt (#3835)
I am happy to remove some nolints for you!

2020-08-16 20:46:14 40214fc
feat(ring_theory/derivations): stab on derivations (#3688)

2020-08-16 18:48:55 4f2c958
feat(tactic/interactive/choose): nondependent choose (#3806)
Now you can write `choose!` to eliminate propositional arguments from the chosen functions.
```
example (h : ∀n m : ℕ, n < m → ∃i j, m = n + i ∨ m + j = n) : true :=
begin
  choose! i j h using h,
  guard_hyp i := ℕ → ℕ → ℕ,
  guard_hyp j := ℕ → ℕ → ℕ,
  guard_hyp h := ∀ (n m : ℕ), n < m → m = n + i n m ∨ m + j n m = n,
  trivial
end
```

2020-08-16 17:15:55 3d4f085
chore(ring_theory/ideal): docstring for Krull's theorem and a special case (#3831)

2020-08-16 13:39:50 ee74e7f
feat(analysis/special_functions/exp_log): `tendsto real.log at_top at_top` (#3826)

2020-08-16 12:41:57 863bf79
feat(data/padics): more valuations, facts about norms (#3790)
Assorted lemmas about the `p`-adics. @jcommelin and I are adding algebraic structure here as part of the Witt vector development.
Some of these declarations are stolen shamelessly from the perfectoid project.
Coauthored by: Johan Commelin <johan@commelin.net>

2020-08-16 11:27:24 a6f6434
feat(data/fin): bundled embedding (#3822)
Add the coercion from `fin n` to `ℕ` as a bundled embedding, an
equivalent of `function.embedding.subtype`.  Once leanprover-community/lean#359 is fixed
(making `fin n` a subtype), this can go away as a duplicate, but until
then it is useful.

2020-08-16 10:08:53 dda2dcd
chore(data/*): doc strings on some definitions (#3791)
Doc strings on definitions in `data.` which I could figure out what it does.

2020-08-16 08:37:23 8f03035
chore(algebra/with_one): docstrings (#3817)

2020-08-16 07:20:48 20fe4a1
feat(algebra/euclidean_domain): some cleanup (#3752)
Lower the priority of simp-lemmas which have an equivalent version in `group_with_zero`, so that the version of `group_with_zero` is found by `squeeze_simp` for types that have both structures.
Add docstrings
Remove outdated comment

2020-08-16 06:05:27 490d3ce
refactor(data/list/palindrome): use decidable_of_iff' (#3823)
Follow-up to #3729.
`decidable_of_iff'` allows for omitting the `eq.symm`.

2020-08-16 06:05:25 62374f7
doc(data/real/card): docs and cleanup (#3815)

2020-08-16 06:05:24 8325cf6
feat(*): reorder implicit arguments in tsum, supr, infi (#3809)
This is helpful for a future version of the `ge_or_gt` linter to recognize binders: the binding type is the (implicit) argument directly before the binding body.

2020-08-16 06:05:21 dba3018
feat(category_theory): the category of indexed families of objects (#3735)
Pulling out a definition from #3638, and add some associated basic material.

2020-08-16 06:05:19 3c2ed2a
feat(topology/sheaves): construct sheaves of functions (#3608)
# Sheaf conditions for presheaves of (continuous) functions.
We show that
* `Top.sheaf_condition.to_Type`: not-necessarily-continuous functions into a type form a sheaf
* `Top.sheaf_condition.to_Types`: in fact, these may be dependent functions into a type family
* `Top.sheaf_condition.to_Top`: continuous functions into a topological space form a sheaf

2020-08-16 06:05:17 765e460
feat(ring_theory/polynomial/homogeneous): definition and basic props (#3223)
This PR also move ring_theory/polynomial.lean to
ring_theory/polynomial/basic.lean
This PR is part of bringing symmetric polynomials to mathlib,
and besided that, I also expect to add binomial polynomials
and Chebyshev polynomials in the future.
Altogether, this motivates the starting of a ring_theory/polynomial
directory.
The file basic.lean may need cleaning or splitting at some point.

2020-08-16 04:46:02 b1e7fb2
feat (category_theory/over): composition of `over.map` (#3798)
Filtering in some defs from the topos project.
~~Depends on #3797.~~

2020-08-16 04:46:00 1037a3a
feat(algebra/homology, category_theory/abelian, algebra/category/Module): exactness (#3784)
We define what it means for two maps `f` and `g` to be exact and show that for R-modules, this is the case if and only if `range f = ker g`.

2020-08-16 04:45:58 2c930a3
refactor(algebra/gcd_monoid, ring_theory/multiplicity): generalize normalization_domain, gcd_domain, multiplicity (#3779)
* generalize `normalization_domain`, `gcd_domain`, `multiplicity` to not reference addition and subtraction
* make `gcd_monoid` and `normalization_monoid` into mixins
* add instances of `normalization_monoid` for `nat`, `associates`

2020-08-16 03:16:51 ae8abf3
chore(order/rel_iso): rename order_iso and order_embedding to rel_iso and rel_embedding (#3750)
renames `order_iso` and `order_embedding`, to make it clear they apply to all binary relations
makes room for a new definition of `order_embedding` that will deal with order instances

2020-08-16 01:06:39 55d06a9
chore(scripts): update nolints.txt (#3820)
I am happy to remove some nolints for you!

2020-08-16 01:06:37 bf51f82
feat(ring_theory/integral_closure): Rings lying within an integral extension are integral extensions (#3781)
Proofs that if an algebra tower is integral then so are the two extensions making up the tower. I needed these for another proof I'm working on, but it seemed reasonable to create a smaller PR now since they are basically self contained.

2020-08-16 01:06:35 a991854
feat(category_theory/limits): a Fubini theorem (#3732)

2020-08-15 23:34:47 ad8c7e5
chore(algebra/group/defs): docstrings (#3819)

2020-08-15 23:34:45 ad8dcaf
chore(algebra/field): docstrings (#3814)

2020-08-15 23:34:43 598c091
chore(tactic/squeeze): format `simp only []` as `simp only` (#3811)
fixes #3150

2020-08-15 23:34:42 e75ada7
docs(category_theory/limits/cones): cones documentation and equivalence fixup (#3795)
Mostly adding documentation in `ct.limits.cones`, but also shortened a couple of proofs. I also adjusted a couple of statements for `is_equivalence` to match the `is_equivalence` projections which are meant to be used (these statements were only used for cones anyway).

2020-08-15 23:34:40 db99f67
docs(category_theory/adjunction): document convenience constructors for adjunctions (#3788)
As mentioned here: https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/monoid.20object/near/204930460

2020-08-15 22:44:14 cd1c00d
chore(algebra/associated): docstrings (#3813)

2020-08-15 22:09:09 8f75f96
feat(geometry/euclidean): circumcenter and circumradius (#3693)
Show that every simplex in a Euclidean affine space has a unique
circumcenter (in the affine subspace spanned by that simplex) and
circumradius.  There are four main pieces, which all seem closely
enough related to put them all together in the same PR.  Both (b) and
(c) have quite long proofs, but I don't see obvious pieces to extract
from them.
(a) Various lemmas about `orthogonal_projection` in relation to points
equidistant from families of points.
(b) The induction step for the existence and uniqueness of the
(circumcenter, circumradius) pair, `exists_unique_dist_eq_of_insert`
(this is actually slightly more general than is needed for the
induction; it includes going from a set of points that has a unique
circumcenter and circumradius despite being infinite or not affine
independent, to such a unique circumcenter and circumradius when
another point is added outside their affine subspace).  This is
essentially just a calculation using an explicit expression for the
distance of the circumcenter of the new set of points from its
orthogonal projection, but still involves quite a lot of manipulation
to get things down to a form `field_simp, ring` can handle.
(c) The actual induction
`exists_unique_dist_eq_of_affine_independent`, giving a unique
(circumcenter, circumradius) pair for for any affine independent
family indexed by a `fintype`, by induction on the cardinality of that
`fintype` and using the result from (b).  Given (b), this is
essentially a lot of manipulation of trivialities.
(d) Extracting definitions and basic properties of `circumcenter` and
`circumradius` from the previous result.

2020-08-15 20:42:02 b97b08b
fix(*): remove usages of ge/gt (#3808)
These were not caught by the old `ge_or_gt` linter, but they will be caught by the new (upcoming) `ge_or_gt` linter.
The `nolint` flags are not yet removed, this will happen in a later PR.
Renamings:
```
char_is_prime_of_ge_two -> char_is_prime_of_two_le
dist_eq_sub_of_ge -> dist_eq_sub_of_le_right
gt_of_mul_lt_mul_neg_right -> lt_of_mul_lt_mul_neg_right
```

2020-08-15 20:42:00 36ced83
chore(linear_algebra/matrix): format doc using markdown (#3807)

2020-08-15 20:41:57 26f2d4e
docs(data/sum): fix typo in sum.is_right docs (#3805)

2020-08-15 20:41:56 9339a34
chore(data/list/defs): docstring (#3804)

2020-08-15 20:41:54 7f1a489
fix(algebra/order): restore choiceless theorems (#3799)
The classical_decidable linter commit made these choiceless proofs use choice
again, making them duplicates of other theorems not in the `decidable.`
namespace.

2020-08-15 20:41:52 2e890e6
feat(category_theory/comma): constructing isos in the comma,over,under cats (#3797)
Constructors to give isomorphisms in comma, over and under categories - essentially these just let you omit checking one of the commuting squares using the fact that the components are iso and the other square works.

2020-08-15 20:41:50 c9bf6f2
feat(linear_algebra/affine_space/independent): affinely independent sets (#3794)
Prove variants of `affine_independent_iff_linear_independent_vsub`
that relate affine independence for a set of points (as opposed to an
indexed family of points) to linear independence for a set of vectors,
so facilitating linking to results such as `exists_subset_is_basis`
expressed in terms of linearly independent sets of vectors.  There are
two variants, depending on which of the set of points or the set of
vectors is given as a hypothesis.
Thus, applying `exists_subset_is_basis`, deduce that if `k` is a
field, any affinely independent set of points can be extended to such
a set that spans the whole space.
Zulip discussion:
https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/linear.20suffering

2020-08-15 20:41:48 ef3ba8b
docs(category_theory/adjunction): lint some adjunction defs (#3793)

2020-08-15 20:41:45 d40c06f
feat(algebra/ordered_field): rewrite and cleanup (#3751)
Group similar lemmas in a more intuitive way
Add docstrings, module doc and section headers
Simplify some proofs
Remove some implications if they had a corresponding `iff` lemma.
Add some more variants of some lemmas
Rename some lemmas for consistency
List of name changes (the lemma on the right might be a bi-implication, if the original version was an implication):
`add_midpoint` -> `add_sub_div_two_lt`
`le_div_of_mul_le`, `mul_le_of_le_div` -> `le_div_iff`
`lt_div_of_mul_lt`, `mul_lt_of_lt_div` -> `lt_div_iff`
`div_le_of_le_mul` -> `div_le_iff'`
`le_mul_of_div_le` -> `div_le_iff`
`div_lt_of_pos_of_lt_mul` -> `div_lt_iff'`
`mul_le_of_neg_of_div_le`, `div_le_of_neg_of_mul_le` -> `div_le_iff_of_neg`
`mul_lt_of_neg_of_div_lt`, `div_lt_of_neg_of_mul_lt` -> `div_lt_iff_of_neg`
`div_le_div_of_pos_of_le` -> `div_le_div_of_le`
`div_le_div_of_neg_of_le` -> `div_le_div_of_nonpos_of_le`
`div_lt_div_of_pos_of_lt` -> `div_lt_div_of_lt`
`div_mul_le_div_mul_of_div_le_div_nonneg` -> `div_mul_le_div_mul_of_div_le_div`
`one_le_div_of_le`, `le_of_one_le_div`, `one_le_div_iff_le` -> `one_le_div`
`one_lt_div_of_lt`, `lt_of_one_lt_div`, `one_lt_div_iff_lt` -> `one_lt_div`
`div_le_one_iff_le` -> `div_le_one`
`div_lt_one_iff_lt` -> `div_lt_one`
`one_div_le_of_pos_of_one_div_le` -> `one_div_le`
`one_div_le_of_neg_of_one_div_le` -> `one_div_le_of_neg`
`div_lt_div_of_pos_of_lt_of_pos` -> `div_lt_div_of_lt_left`
One regression I noticed in some other files: when using `div_le_iff`, and the argument is proven by some lemma about `linear_ordered_semiring` then Lean gives a type mismatch. Presumably this happens because the instance chain `ordered_field -> has_le` doesn't go via `ordered_semiring`. The fix is to give the type explicitly, for example using `div_le_iff (t : (0 : ℝ) < _)`

2020-08-15 20:41:42 f953a9d
feat(category_theory/limits/shapes/types): duals (#3738)
Just dualising some existing material.

2020-08-15 19:14:07 8ce00af
feat(data/set/basic): pairwise_on for equality (#3802)
Add another lemma about `pairwise_on`: if and only if `f` takes
pairwise equal values on `s`, there is some value it takes everywhere
on `s`.  This arose from discussion in #3693.

2020-08-15 19:14:05 78354e1
feat(tactic/linarith): support case splits in preprocessing (including `ne` hypotheses) (#3786)
This adds an API for `linarith` preprocessors to branch. Each branch results in a separate call to `linarith`, so this can be exponentially bad. Use responsibly.
Given that the functionality is there, and I needed a way to test it, I've added a feature that people have been begging for that I've resisted: you can now call `linarith {split_ne := tt}` to handle `a ≠ b` hypotheses. Again: 2^n `linarith` calls for `n` disequalities in your context.

2020-08-15 17:58:55 050728b
feat(data/fintype/basic): card lemma and finset bool alg (#3796)
Adds the card lemma
```
finset.card_le_univ [fintype α] (s : finset α) : s.card ≤ fintype.card α
```
which I expected to see in mathlib, and upgrade the bounded_distrib_lattice instance on finset in the presence of fintype to a boolean algebra instance.

2020-08-15 17:58:53 44010bc
refactor(linear_algebra/affine_space/combination): bundled affine_combination (#3789)
When `weighted_vsub_of_point` and `weighted_vsub` became bundled
`linear_map`s on the weights, `affine_combination` was left as an
unbundled function with different argument order from the other two
related operations.  Make it into a bundled `affine_map` on the
weights, so making it more consistent with the other two operations
and allowing general results on `affine_map`s to be used on
`affine_combination` (as illustrated by the changed proofs of
`weighted_vsub_vadd_affine_combination` and
`affine_combination_vsub`).

2020-08-15 17:58:51 9216dd7
chore(ring_theory): delete `is_algebra_tower` (#3785)
Delete the abbreviation `is_algebra_tower` for `is_scalar_tower`, and replace all references (including the usages of the `is_algebra_tower` namespace) with `is_scalar_tower`. Documentation should also have been updated accordingly.
This change was requested in a comment on #3717.

2020-08-15 16:25:49 9451f8d
feat(data/sum): add sum.{get_left, get_right, is_left, is_right} (#3792)

2020-08-15 14:12:32 daafd6f
chore(number_theory/pythagorean_triples): added doc-strings (#3787)
Added docstrings to:
`pythagorean_triple_comm`
`pythagorean_triple.zero`
`mul`
`mul_iff`

2020-08-15 14:12:30 10d4811
feat(algebra/add_torsor): injectivity lemmas (#3767)
Add variants of the `add_action` and `add_torsor` cancellation lemmas
whose conclusion is stated in terms of `function.injective`.

2020-08-15 12:43:48 5c13693
chore(algebra/classical_lie_algebras): fix some doc strings (#3776)

2020-08-15 12:43:45 9ac6e8a
refactor(set_theory/pgame): rename pgame lemma (#3775)
Renamed `move_left_right_moves_neg_symm` to `move_left_left_moves_neg_symm` to make it consistent with the other 3 related lemmas

2020-08-15 12:43:43 658cd38
feat(tactic/derive_fintype): derive fintype instances (#3772)
This adds a `@[derive fintype]` implementation, like so:
```
@[derive fintype]
inductive foo (α : Type)
| A : α → foo
| B : α → α → foo
| C : α × α → foo
| D : foo
```

2020-08-15 12:43:41 18746ef
feat(analysis/special_functions/pow): Added lemmas for rpow of neg exponent (#3715)
I noticed that the library was missing some lemmas regarding the bounds of rpow of a negative exponent so I added them. I cleaned up the other similar preexisting lemmas for consistency. I then repeated the process for nnreal lemmas.

2020-08-15 12:43:39 099f070
feat(topology/sheaves): the sheaf condition (#3605)
Johan and I have been working with this, and it's at least minimally viable.
In follow-up PRs we have finished:
* constructing the sheaf of dependent functions to a type family
* constructing the sheaf of continuous functions to a fixed topological space
* checking the sheaf condition under forgetful functors that reflect isos and preserve limits (https://stacks.math.columbia.edu/tag/0073)
Obviously there's more we'd like to see before being confident that a design for sheaves is workable, but we'd like to get started!

2020-08-15 12:06:09 36b4a1e
refactor(algebra/add_torsor): use `out_param` (#3727)

2020-08-15 10:36:54 2b8ece6
feat(data/nat/basic): one mod two or higher is one (#3763)

2020-08-15 10:09:19 c444a00
Revert "chore(ring_theory): delete `is_algebra_tower`"
This reverts commit c956ce1516ccfb3139ae3ebde7ede9c678d81968.

2020-08-15 10:05:13 c956ce1
chore(ring_theory): delete `is_algebra_tower`
Delete the abbreviation `is_algebra_tower` for `is_scalar_tower`,
and replace all references (including the usages of the `is_algebra_tower`
namespace) with `is_scalar_tower`. Documentation should also have been
updated accordingly.
This change was requested in a comment on #3717.

2020-08-15 08:45:27 67dad7f
feat(control/equiv_functor): fintype instance (#3783)
Requested at https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/fintype.2Eequiv_congr/near/206773279

2020-08-15 07:22:35 b670212
fix(tactic/apply): fix ordering of goals produced by `apply` (#3777)

2020-08-15 07:22:33 c1a5283
refactor(data/list/tfae): tfae.out (#3774)
This version of `tfae.out` has slightly better automatic reduction behavior: if `h : [a, b, c].tfae` then the original of `h.out 1 2` proves `[a, b, c].nth_le 1 _ <-> [a, b, c].nth_le 2 _` while the new version of `h.out 1 2` proves `b <-> c`. These are the same, of course, and you can mostly use them interchangeably, but the second one is a bit nicer to look at (and possibly works better with e.g. subsequent rewrites).

2020-08-15 06:35:10 55f4926
fix(algebra/archimedean): switch to a more natural and general condition in exists_nat_pow_near (#3782)
per discussion at https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Starting.20to.20contribute.20to.20mathlib/near/206945824

2020-08-14 17:00:08 3ae44bd
fix(tactic/equiv_rw): fix problem with stuck universe metavariables (#3773)

2020-08-14 15:47:08 c252800
chore(*): use notation for `filter.prod` (#3768)
Also change from `∀ v w ∈ V` to `∀ (v ∈ V) (w ∈ V)` in `exists_nhds_split_inv`, `exists_nhds_half_neg`, `add_group_with_zero_nhd.exists_Z_half`.

2020-08-14 12:28:48 0e5f44b
chore(*): assorted lemmas for FTC-1 (#3755)
Lemmas from FTC-1 (`has_strict_deriv` version) #3709

2020-08-14 00:40:06 b611c5f
chore(scripts): update nolints.txt (#3771)
I am happy to remove some nolints for you!

2020-08-13 19:36:34 32c6a73
feat(ci): auto label merge conflicts, try 2 (#3766)

2020-08-13 19:36:32 627b431
feat(tactic/find_unused): find the dead code in a module (#3701)

2020-08-13 19:36:30 28dfad8
feat(ideals,submonoids,subgroups): mem_sup(r) and mem_inf(i) lemmas (#3697)

2020-08-13 18:09:00 4cc094b
chore(data/int/basic): norm_cast attribute on int.coe_nat_mod (#3765)

2020-08-13 14:29:54 c66ecd3
feat(intervals/image_preimage): preimage under multiplication (#3757)
Add lemmas `preimage_mul_const_Ixx` and `preimage_const_mul_Ixx`.
Also generalize `equiv.mul_left` and `equiv.mul_right` to `units`.

2020-08-13 12:59:37 f912f18
feat(ci): auto label merge conflicts (#3761)

2020-08-13 12:59:35 34352c2
refactor(algebra/associated): change several instances from [integral_domain] to [comm_cancel_monoid_with_zero] (#3744)
defines `comm_cancel_monoid_with_zero`
replaces some `integral_domain` instances with `comm_cancel_monoid_with_zero`
prepares the API for refactoring `normalization_domain`, `gcd_domain`, and `unique_factorization_domain` to monoids

2020-08-13 12:59:33 2c4300b
feat(data/polynomial): adds map_comp (#3736)
Adds lemma saying that the map of the composition of two polynomials is the composition of the maps, as mentioned [here](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Polynomial.20composition.20and.20map.20commute).

2020-08-13 11:32:00 ac2f011
feat(data/*): Add sizeof lemmas. (#3745)

2020-08-13 11:01:00 b1e56a2
feat(analysis/special_functions/trigonometric): Added lemma cos_ne_zero_iff (#3743)
I added the theorem `cos_ne_zero_iff`, a corollary to the preexisting theorem `cos_eq_zero_iff`
<!-- put comments you want to keep out of the PR commit here -->

2020-08-13 09:23:02 ced7469
chore(data/finset/order): use `[nonempty]` in `directed.finset_le` (#3759)

2020-08-13 09:23:00 4c24a09
chore(data/fintype/card): add `prod_bool` (#3758)

2020-08-13 09:22:58 31a0258
chore(data/fintype/card): DRY using `@... (multiplicative _)` (#3756)

2020-08-13 09:22:56 cc6528e
feat(analysis/calculus/fderiv): multiplication by a complex respects real differentiability (#3731)
If `f` takes values in a complex vector space and is real-differentiable, then `c f` is also real-differentiable when `c` is a complex number. This PR proves this fact and the obvious variations, in the general case of two fields where one is a normed algebra over the other one.
Along the way, some material on `module.restrict_scalars` is added, notably in a normed space context.

2020-08-13 09:22:52 cfcbea6
feat(data/list/palindrome): define palindromes (#3729)
This introduces an inductive type `palindrome`, with conversions to and from the proposition `reverse l = l`.
Review of this PR indicates two things: (1) maybe the name `is_palindrome` is better, especially if we define the subtype of palindromic lists; (2) maybe defining palindrome by `reverse l = l` is simpler. We note these for future development.

2020-08-13 07:52:35 c503b7a
feat(algebra/order): more lemmas for projection notation (#3753)
Also import `tactic.lint` and ensure that the linter passes
Move `ge_of_eq` to this file

2020-08-13 06:22:20 6c8b2cd
fix(algebra/field) remove `one_div_eq_inv` (#3749)
It already existed as `one_div` for `group_with_zero`
Also make `one_div` a `simp` lemma and renamed `nnreal.one_div_eq_inv` to `nnreal.one_div`.

2020-08-13 01:10:43 d6ffc1a
feat(tactic/clear_value): preserve order and naming (#3700)

2020-08-13 00:42:53 cacb54e
chore(scripts): update nolints.txt (#3754)
I am happy to remove some nolints for you!

2020-08-12 23:09:20 486830b
feat(tactic/choose): `choose` can now decompose conjunctions (#3699)

2020-08-12 20:04:21 f8c8135
feat(tactic/rcases): type ascriptions in rcases (#3730)
This is a general rewrite of the `rcases` tactic, with the primary intent of adding support for type ascriptions in `rcases` patterns but it also includes a bunch more documentation, as well as making the grammar simpler, avoiding the strict tuple/alts alternations required by the previous `many` constructor (and the need for `rcases_patt_inverted` for whether the constructor means `tuple` of `alts` or `alts` of `tuple`).
From a user perspective, it should not be noticeably different, except:
* You can now use parentheses freely in patterns, so things like `a | (b | c)` work
* You can use type ascriptions
The new `rcases` is backward compatible with the old one, except that `rcases e with a` (where `a` is a name) no longer does any cases and is basically just another way to write `have a := e`; to get the same effect as `cases e with a` you have to write `rcases e with ⟨a⟩` instead.

2020-08-12 16:33:24 4324778
feat(.): add code of conduct (#3747)

2020-08-12 15:04:27 eb4b2a0
feat(field_theory/algebraic_closure): algebraic closure (#3733)
```lean
instance : is_alg_closed (algebraic_closure k) :=
```
TODO: Show that any algebraic extension embeds into any algebraically closed extension (via Zorn's lemma).

2020-08-12 10:41:14 bfcf640
feat(topology/opens): open_embedding_of_le (#3597)
Add `lemma open_embedding_of_le {U V : opens α} (i : U ≤ V) : open_embedding (set.inclusion i)`.
Also, I was finding it quite inconvenient to have `x ∈ U` for `U : opens X` being unrelated to `x ∈ (U : set X)`. I propose we just add the simp lemmas in this PR that unfold to the set-level membership operation.
(I'd be happy to go the other way if someone has a strong opinion here; just that we pick a simp normal form for talking about membership and inclusion of opens.)

2020-08-11 15:31:36 06e1405
docs(category/default): Fix typo for monomorphism (#3741)

2020-08-11 09:57:43 f92fd0d
refactor(algebra/divisibility, associated): generalize instances in divisibility, associated (#3714)
generalizes the divisibility relation to noncommutative monoids
adds missing headers to algebra/divisibility
generalizes the instances in many of the lemmas in algebra/associated
reunites (some of the) divisibility API for ordinals with general monoids

2020-08-11 07:24:07 57df7f5
feat(haar_measure): define the Haar measure (#3542)
Define the Haar measure on a locally compact Hausdorff group.
Some additions and simplifications to outer_measure and content.

2020-08-11 00:42:24 43ceb3e
chore(scripts): update nolints.txt (#3734)
I am happy to remove some nolints for you!

2020-08-10 19:28:55 9e03995
chore(algebra/ordered_field): cleanup (#3723)
* drop `mul_zero_lt_mul_inv_of_pos` and `mul_zero_lt_mul_inv_of_neg`;
* add `iff` lemmas `one_div_pos/neg/nonneg/nonpos` replacing old
  implications;
* some lemmas now assume `≤` instead of `<`;
* rename `mul_lt_of_gt_div_of_neg` to `mul_lt_of_neg_of_div_lt`
  replacing `>` by `<`.
* add `mul_sub_mul_div_mul_neg_iff` and `mul_sub_mul_div_mul_nonpos_iff`,
  generate implications using `alias`;
* drop `div_pos_of_pos_of_pos` (use `div_pos`) and
  `div_nonneg_of_nonneg_of_pos` (use `div_nonneg`);
* replace `div_nonpos_of_nonpos_of_pos` with
  `div_nonpos_of_nonpos_of_nonneg`;
* replace `div_nonpos_of_nonneg_of_neg` with
  `div_nonpos_of_nonneg_of_nonpos`;
* replace `div_mul_le_div_mul_of_div_le_div_pos` and
  `div_mul_le_div_mul_of_div_le_div_pos'` with
  `div_mul_le_div_mul_of_div_le_div_nonneg`; I failed to find
  in the history why we had two equivalent lemmas.
* merge `le_mul_of_ge_one_right` and `le_mul_of_one_le_right'` into
  `le_mul_of_one_le_right`, rename old `le_mul_of_one_le_right` to
  `le_mul_of_one_le_right'`;
* ditto with `le_mul_of_ge_one_left`, `le_mul_of_one_le_left`, and
  `le_mul_of_one_le_left'`;
* ditto with `lt_mul_of_gt_one_right`, `lt_mul_of_one_lt_right`, and
  `lt_mul_of_one_lt_right'`;
* rename `div_lt_of_mul_lt_of_pos` to `div_lt_of_pos_of_lt_mul`;
* rename `div_lt_of_mul_gt_of_neg` to `div_lt_of_neg_of_mul_lt`;
* rename `mul_le_of_div_le_of_neg` to `mul_le_of_neg_of_div_le`;
* rename `div_le_of_mul_le_of_neg` to `div_le_of_neg_of_mul_le`;
* rename `div_lt_div_of_lt_of_pos` to `div_lt_div_of_pos_of_lt`, swap
  arguments;
* rename `div_le_div_of_le_of_pos` to `div_le_div_of_pos_of_le`, swap
  arguments;
* rename `div_lt_div_of_lt_of_neg` to `div_lt_div_of_neg_of_lt`, swap
  arguments;
* rename `div_le_div_of_le_of_neg` to `div_le_div_of_neg_of_le`, swap
  arguments;
* rename `one_div_lt_one_div_of_lt_of_neg` to
  `one_div_lt_one_div_of_neg_of_lt`;
* rename `one_div_le_one_div_of_le_of_neg` to
  `one_div_le_one_div_of_neg_of_le`;
* rename `le_of_one_div_le_one_div_of_neg` to
  `le_of_neg_of_one_div_le_one_div`;
* rename `lt_of_one_div_lt_one_div_of_neg` to
  `lt_of_neg_of_one_div_lt_one_div`;
* rename `one_div_le_of_one_div_le_of_pos` to
  `one_div_le_of_pos_of_one_div_le`;
* rename `one_div_le_of_one_div_le_of_neg` to
  `one_div_le_of_neg_of_one_div_le`.

2020-08-10 19:28:53 4a75df9
feat(group_theory/group_action): generalize `is_algebra_tower` (#3717)
This PR introduces a new typeclass `is_scalar_tower R M N` stating that scalar multiplications between the three types are compatible: `smul_assoc : ((x : R) • (y : M)) • (z : N) = x • (y • z)`.
This typeclass is the general form of `is_algebra_tower`. It also generalizes some of the existing instances of `is_algebra_tower`. I didn't try very hard though, so I might have missed some instances.
Related Zulip discussions:
 * https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Effect.20of.20changing.20the.20base.20field.20on.20span
 * https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/pull.20back.20an.20R.20module.20along.20.60S.20-.3E.2B*.20R.60

2020-08-10 17:55:47 37e97b5
feat(tactic): fix two bugs with generalize' (#3710)
The name generated by `generalize'` will be exactly the given name, even if the name already occurs in the context.
There was a bug with `generalize' h : e = x` if `e` occurred in the goal.

2020-08-10 15:19:08 4786136
feat(category_theory/limits): explicit isomorphisms between preserved limits (#3602)
When `G` preserves limits, it's nice to be able to quickly obtain the iso `G.obj (pi_obj f) ≅ pi_obj (λ j, G.obj (f j))`.

2020-08-10 12:46:02 5680428
chore(category_theory/limits): minor changes in equalizers and products (#3603)

2020-08-09 01:11:07 17ef529
refactor(linear_algebra/affine_space): split up file (#3726)
`linear_algebra/affine_space.lean` was the 10th largest `.lean` file
in mathlib.  Move it to `linear_algebra/affine_space/basic.lean` and
split out some pieces into separate files, so reducing its size to
41st largest as well as reducing dependencies for users not needing
all those files.
More pieces could also be split out (for example, splitting out
`homothety` would eliminate the dependence of
`linear_algebra.affine_space.basic` on
`linear_algebra.tensor_product`), but this split seems a reasonable
starting point.
This split is intended to preserve the exact set of definitions
present and their namespaces, just moving some of them to different
files, even if the existing namespaces aren't very consistent
(e.g. some definitions relating to affine combinations are in the
`finset` namespace, so allowing dot notation to be used for such
combinations, but others are in the `affine_space` namespace, and
there may not be a consistent rule for the division between the two).

2020-08-08 14:34:18 f23fe9a
doc(tactic/lean_core_docs): by_cases is classical (#3718)
`by_cases` was changed to use classical reasoning (leanprover-community/mathlib#3354, leanprover-community/lean#409), but the documentation hasn't been updated yet.
I leave `by_contra` alone as it still uses `decidable`.

2020-08-08 13:01:43 d27ddb4
chore(linear_algebra/basic): rewrite `p.comap q.subtype` to `comap q.subtype p` (#3725)
@PatrickMassot requested this change in the review of #3720:
> I find this statement very difficult to read. I think this is a bad use of dot notation, it really feels like `p` is pulling back `q.subtype` instead of the other way around (and even the docstring is suggesting that!). The same problem happens with filter.(co)map and always try to avoid it.
> I would open submodule and then write `comap q.subtype p ≃ₗ[R] p`.

2020-08-08 10:16:01 1675dc4
chore(order/complete_lattice): use `order_dual` (#3724)

2020-08-08 09:22:19 bf1c7b7
feat(linear_algebra/finite_dimensional): finite dimensional `is_basis` helpers (#3720)
If we have a family of vectors in `V` with cardinality equal to the (finite) dimension of `V` over a field `K`, they span the whole space iff they are linearly independent.
This PR proves those two facts (in the form that either of the conditions of `is_basis K b` suffices to prove `is_basis K b` if `b` has the right cardinality).
We don't need to assume that `V` is finite dimensional, because the case that `findim K V = 0` will generally lead to a contradiction. We do sometimes need to assume that the family is nonempty, which seems like a much nicer condition.

2020-08-07 21:33:16 d61bd4a
feat(algebra/classical_lie_algebras): add lie_algebra.orthogonal.mem_so (#3711)
Also unrelated change to use new notation for direct_sum

2020-08-07 19:53:30 1cd74b1
fix(linear_algebra/finite_dimensional): universe generalize cardinal_mk_le_findim_of_linear_independent (#3721)

2020-08-07 18:26:21 00e4c04
doc(linear_algebra/affine_space): expand module doc string (#3719)
Make module doc string discuss the main definitions relating to affine
spaces.

2020-08-07 18:26:19 4e24f4c
feat(data/list/*): add indexed versions of some list functions (#2191)
Add `foldr_with_index`, `foldl_with_index`, `mfoldr_with_index`, `mfoldl_with_index`, `mmap_with_index` and `mmap_with_index'`. The new functions are proven correct by relating them to their non-indexed counterparts.

2020-08-07 16:49:27 aacd757
feat(measurable_space): more properties of measurable sets in a product (#3703)
Add multiple lemmas about `prod` to `set.basic`
Some cleanup in `set.basic`
Fix the name of the instance `measure_space ℝ`
Cleanup and a couple of additions to the `prod` section of `measurable_space`.
Rename: `prod_singleton_singleton` -> `singleton_prod_singleton`
Use `prod.swap` in the statement of `image_swap_prod`.

2020-08-07 00:44:48 49ba4c4
chore(scripts): update nolints.txt (#3712)
I am happy to remove some nolints for you!

2020-08-06 16:42:35 1930601
feat(algebra/group_power): lemmas relating pow in `multiplicative int` with multiplication in `int` (#3706)

2020-08-06 16:42:33 35ecc7b
feat(analysis/calculus): Rolle's and Cauchy's mean value theorems with weaker assumptions (deps : 3590) (#3681)
This introduces stronger versions of Rolle's theorem and Cauchy's mean value theorem, essentially by encapsulating an extension by continuity using the newly introduced `extend_from` of #3590

2020-08-06 16:42:31 e57fc3d
feat(field_theory/splitting_field): splitting field unique (#3654)
Main theorem:
```lean
polynomial.is_splitting_field.alg_equiv {α} (β) [field α] [field β] [algebra α β]
  (f : polynomial α) [is_splitting_field α β f] : β ≃ₐ[α] splitting_field f
````

2020-08-06 15:42:26 bc2bcac
chore(algebra/module): Move submodule to its own file (#3696)

2020-08-06 14:19:33 224e0f8
docs(tactic/interactive): Add tag `debugging` and doc `mwe` for `extract_goal` (#3708)
Requested by @kbuzzard on [Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Being.20stuck.20-.3E.20MWE/near/206124861).
x-ref: leanprover-community/leanprover-community.github.io#105

2020-08-06 09:35:08 ee7bb12
chore(ring_theory/ideal): Move ideal modules into a single folder (#3707)
The main motivation is to fix the odd inconsistency of `ideals` being plural, while most other files have singular names.
Besides that, there seems to be precedent for grouping together such files

2020-08-06 06:58:32 3eea109
feat(measure_theory/interval_integral): introduce `∫ x in a..b, f x`, prove FTC-1 (#3640)
Define `∫ x in a..b, f x ∂μ` as `∫ x in Ioc a b, f x ∂μ - ∫ x in Ioc b a, f x ∂μ`. With this definition for a probability measure `μ` we have `F_μ(b)-F_μ(a)=∫ x in a..b, f x ∂μ`, where `F_μ` is the cumulative distribution function.

2020-08-06 03:47:24 5cba21d
chore(*): swap order of [fintype A] [decidable_eq A] (#3705)
@fpvandoorn  suggested in #3603 swapping the order of some `[fintype A] [decidable_eq A]` arguments to solve a linter problem with slow typeclass lookup.
The reasoning is that Lean solves typeclass search problems from right to left, and 
* it's "less likely" that a type is a `fintype` than it has `decidable_eq`, so we can fail earlier if `fintype` comes second
* typeclass search for `[decidable_eq]` can already be slow, so it's better to avoid it.
This PR applies this suggestion across the library.

2020-08-06 00:42:41 f8fd0c3
chore(scripts): update nolints.txt (#3704)
I am happy to remove some nolints for you!

2020-08-05 22:44:03 9d3c709
chore(algebra/module): Reuse proofs from subgroup (#3631)
Confusingly these have opposite names - someone can always fix the names later though.

2020-08-05 22:44:01 2918b00
feat(topology): define `extend_from`, add lemmas about extension by continuity on sets and intervals and continuity gluing (#3590)
#### Add a new file `topology/extend_from_subset` (mostly by @PatrickMassot )
Define `extend_from A f` (where `f : X → Y` and `A : set X`) to be a function `g : X → Y` which maps any
`x₀ : X` to the limit of `f` as `x` tends to `x₀`, if such a limit exists. Although this is not really an extension, it maps with the classical meaning of extending a function *defined on a set*, hence the name. In some way it is analogous to `dense_inducing.extend`, but in `set` world.
The main theorem about this is `continuous_on_extend_from` about extension by continuity
#### Corollaries for extending functions defined on intervals
A few lemmas of the form : if `f` is continuous on `Ioo a b`, then `extend_from (Ioo a b) f` is continuous on `I[cc/co/oc] a b`, provided some assumptions about limits on the boundary (and has some other properties, e.g it is equal to `f` on `Ioo a b`)
#### More general continuity gluing
Lemmas `continuous_on_if'` and its corollaries `continuous_on_if` and `continuous_if'`, and a few other continuity lemmas

2020-08-05 21:26:53 89ada87
chore(algebra, data/pnat): refactoring comm_semiring_has_dvd into comm_monoid_has_dvd (#3702)
changes the instance comm_semiring_has_dvd to apply to any comm_monoid
cleans up the pnat API to use this new definition

2020-08-05 19:30:40 13d4fbe
feat(tactic/interactive_attr): `@[interactive]` attribute to export interactive tactics (#3698)
Allows one to write 
```lean
@[interactive]
meta def my_tactic := ...
```
instead of
```lean
meta def my_tactic := ...
run_cmd add_interactive [``my_tactic]
```

2020-08-05 16:34:55 5fc6281
chore(data/matrix/basic): rename _val lemmas to _apply (#3297)
We use `_apply` for lemmas about applications of functions to arguments. Arguably "picking out the entries of a matrix" could warrant a different name, but as we treat matrices just as functions all over, I think it's better to use the usual names.

2020-08-05 15:41:26 d952e8b
chore(topology/category/Top/opens): module-doc, cleanup, and construct some morphisms (#3601)

2020-08-05 11:37:40 c63dad1
chore(ring_theory/ideals): Move the definition of ideals out of algebra/module (#3692)
Neatness was the main motivation - it makes it easier to reason about what would need doing in #3635.
It also results in somewhere sensible for the docs about ideals. Also adds a very minimal docstring to `ring_theory/ideals.lean`.

2020-08-05 11:37:36 4a82e84
feat(algebra/*/ulift): algebraic instances for ulift (#3675)

2020-08-05 10:42:04 2b9ac69
feat(linear_algebra/affine_space): faces of simplices (#3691)
Define a `face` of an `affine_space.simplex` with any given nonempty
subset of the vertices, using `finset.mono_of_fin`.

2020-08-05 10:42:02 ecb5c5f
docs(algebra/module): Remove completed TODO (#3690)
Today, submodule _does_ extend `add_submonoid`, which is I assume what this TODO was about

2020-08-05 10:42:00 0531cb0
feat(algebra/classical_lie_algebras): add definitions of missing classical Lie algebras (#3661)
Copying from the comments I have added at the top of `classical_lie_algebras.lean`:
## Main definitions
  * `lie_algebra.symplectic.sp`
  * `lie_algebra.orthogonal.so`
  * `lie_algebra.orthogonal.so'`
  * `lie_algebra.orthogonal.so_indefinite_equiv`
  * `lie_algebra.orthogonal.type_D`
  * `lie_algebra.orthogonal.type_B`
  * `lie_algebra.orthogonal.type_D_equiv_so'`
  * `lie_algebra.orthogonal.type_B_equiv_so'`

2020-08-05 09:56:01 37119b4
feat(topology): normed spaces are (locally) path connected (#3689)

2020-08-05 09:09:06 545186c
refactor(*): add a notation for `nhds_within` (#3683)
The definition is still there and can be used too.

2020-08-05 08:29:26 3b26878
feat(linear_algebra/affine_space): more lemmas (#3615)
Add further lemmas on affine spaces.  This is the last piece of
preparation needed on the affine space side for my definitions of
`circumcenter` and `circumradius` for a simplex in a Euclidean affine
space.

2020-08-04 18:21:00 84b450d
feat(topology): path connected spaces (#3627)
From the sphere eversion project.

2020-08-04 16:33:38 f4b2790
feat(data/list/defs): add monadic versions of list.{find,any,all,bor,band} (#3679)
Also universe-generalise `mfind` while I'm at it.

2020-08-04 13:40:24 3ae6cea
feat(group_theory/submonoid/operations): transfer galois connection/insertion lemmas (#3657)

2020-08-04 10:47:06 78fe862
chore(measure_theory/lebesgue_measure): review (#3686)
* use `ennreal.of_real` instead of `coe ∘ nnreal.of_real`;
* avoid some non-finishing `simp`s;
* simplify proofs of `lebesgue_outer_Ico/Ioc/Ioo`;
* add `instance : locally_finite_measure (volume : measure ℝ)`
  instead of `real.volume_lt_top_of_bounded` and
  `real.volume_lt_top_of_compact`.

2020-08-04 10:47:04 8f02ad2
feat(geometry/euclidean): orthogonal projection (#3662)
Define orthogonal projection onto an affine subspace of a Euclidean
affine space, and prove some basic lemmas about it.

2020-08-04 09:49:04 14d206b
feat(order/filter/interval): define class `filter.is_interval_generated` (#3663)

2020-08-04 09:49:02 ed377e1
feat(analysis/convex): a local minimum of a convex function is a global minimum (#3613)

2020-08-04 09:09:02 b4a6651
chore(order/filter/at_top_bot): golf three proofs (#3684)
Also add `is_countably_generated_at_top`.

2020-08-04 07:11:52 b0de811
chore(measure_theory/borel_space): DRY by using `order_dual` (#3685)

2020-08-04 02:05:22 d9a6e47
feat(measure_theory/group): regular, invariant, and conjugate measures (#3650)
Define the notion of a regular measure. I did this in Borel space, which required me to add an import measure_space -> borel_space.
Define left invariant and right invariant measures for groups
Define the conjugate measure, and show it is left invariant iff the original is right invariant

2020-08-04 00:36:52 acedda0
chore(scripts): update nolints.txt (#3682)
I am happy to remove some nolints for you!

2020-08-03 20:53:03 b215e95
fix(data/set/intervals/basic): fix a typo (#3680)

2020-08-03 20:53:01 234011d
chore(order/filter/lift): prove `has_basis.lift` and `has_basis.lift'` (#3618)

2020-08-03 19:22:21 50d1c48
feat(order/galois_connection): galois_coinsertions (#3656)

2020-08-03 19:22:19 40c6a29
feat(measure_theory/content): define outer measure from content (#3649)
Part of the development for the Haar measure: define an outer measure from a content.

2020-08-03 17:57:40 018309f
chore(linear_algebra/basis): replace explicit arguments for 0 ≠ 1 with nontrivial R (#3678)

2020-08-03 17:57:38 6186c69
feat(group_theory/subgroup): range_gpowers_hom (#3677)

2020-08-03 17:57:36 b8df8aa
feat(algebra/ring): the codomain of a ring hom is trivial iff ... (#3676)
In the discussion of #3488, Johan (currently on vacation, so I'm not pinging him) noted that we were missing the lemma "if `f` is a ring homomorphism, `∀ x, f x = 0` implies that the codomain is trivial". This PR adds a couple of ways to derive from homomorphisms that rings are trivial.
I used `0 = 1` to express that the ring is trivial because that seems to be the one that is used in practice.

2020-08-03 17:57:34 5f9e427
feat(analysis/normed_space/add_torsor): isometries of normed_add_torsors (#3666)
Add the lemma that an isometry of `normed_add_torsor`s induces an
isometry of the corresponding `normed_group`s at any base point.
Previously discussed on Zulip, see
<https://leanprover-community.github.io/archive/stream/113488-general/topic/Undergraduate.20math.20list.html#199450039>;
both statement and proof have been revised along the lines indicated
in that discussion.

2020-08-03 17:57:32 aef7ade
feat(data/set/intervals): a few lemmas needed by FTC-1 (#3653)

2020-08-03 16:25:13 c6381aa
chore(algebra/group_ring_action): docstring, move monoid.End to algebra/group/hom (#3671)

2020-08-03 14:09:09 b2be1ee
feat(measure_theory/measure_space): add 3 typeclasses (#3664)
Define `probability_measure`, `finite_measure`, and `locally_finite_measure`.

2020-08-03 11:29:40 3781435
feat(algebra/category/Group): the category of abelian groups is abelian (#3621)

2020-08-03 11:29:38 6079ef9
feat(analysis/normed_space/real_inner_product): orthogonal projection (#3563)
`analysis.normed_space.real_inner_product` proves the existence of
orthogonal projections onto complete subspaces, but only in the form
of an existence theorem without a corresponding `def` for the function
that is proved to exist.  Add the corresponding `def` of
`orthogonal_projection` as a `linear_map` and lemmas with the basic
properties, extracted from the existing results with `some` and
`some_spec`.
For convenience in constructing the `linear_map`, some lemmas are
first proved for a version of the orthogonal projection as an
unbundled function, then used in the definition of the bundled
`linear_map` version, then restarted for the bundled version (the two
versions of each lemma being definitionally equal; the bundled version
is considered the main version that should be used in all subsequent
code).
This is preparation for defining the corresponding operation for
Euclidean affine spaces as an `affine_map`.

2020-08-03 10:04:53 8e0d111
feat(data/finset/lattice,data/finset/sort): singleton lemmas (#3668)
Add lemmas about `min'`, `max'` and `mono_of_fin` for a singleton
`finset`.

2020-08-03 10:04:51 61db67d
chore(measure_theory/integration): define composition of a `simple_func` and a measurable function (#3667)

2020-08-03 10:04:49 292c921
doc(category_theory): add library note about 'dsimp, simp' pattern (#3659)

2020-08-03 09:08:57 3d41e33
feat(group_theory/submonoid/operations): mrange_eq_map (#3673)

2020-08-03 08:41:40 d3e1f5f
feat(README): add @Vierkantor to maintainer list (#3674)

2020-08-03 07:29:19 d6c17c9
feat(linear_algebra/affine_space): simplex ext lemmas (#3669)
Add `ext` lemmas for `affine_space.simplex`.

2020-08-03 05:29:42 60ba478
feat(algebra/category/Module): the category of R-modules is abelian (#3606)

2020-08-03 00:42:24 fb883ea
chore(scripts): update nolints.txt (#3670)
I am happy to remove some nolints for you!

2020-08-02 22:03:03 06df503
chore(analysis/calculus/times_cont_diff): transpose lemmas (#3665)
In #3639 , I accidentally placed the new lemma `times_cont_diff_at_inverse` between `times_cont_diff_at.prod_map'` and `times_cont_diff.prod_map`.  This fixes that.

2020-08-02 16:01:03 4588400
chore(group_theory/*): refactor quotient groups to use bundled subgroups (#3321)

2020-08-02 11:46:51 6559832
feat(order/filter/lift): a few lemmas about `filter.lift' _ powerset` (#3652)

2020-08-02 11:46:49 fe4da7b
feat(category_theory/limits): transporting is_limit (#3598)
Some lemmas about moving `is_limit` terms around over equivalences, or (post|pre)composing.

2020-08-02 11:46:47 52c0b42
feat(category_theory): Mon_ (C ⥤ D) ≌ C ⥤ Mon_ D (#3576)
When `D` is a monoidal category,
monoid objects in `C ⥤ D` are the same thing as functors from `C` into the monoid objects of `D`.
This is formalised as:
* `Mon_functor_category_equivalence : Mon_ (C ⥤ D) ≌ C ⥤ Mon_ D`
The intended application is that as `Ring ≌ Mon_ Ab` (not yet constructed!),
we have `presheaf Ring X ≌ presheaf (Mon_ Ab) X ≌ Mon_ (presheaf Ab X)`,
and we can model a module over a presheaf of rings as a module object in `presheaf Ab X`.

2020-08-02 11:46:45 e99518b
feat(category_theory): braided and symmetric categories (#3550)
Just the very basics:
* the definition of braided and symmetric categories
* braided functors, and compositions thereof
* the symmetric monoidal structure coming from products
* upgrading `Type u` to a symmetric monoidal structure
This is prompted by the desire to explore modelling sheaves of modules as the monoidal category of module objects for an internal commutative monoid in sheaves of `Ab`.

2020-08-02 11:46:43 8c1e2da
feat(linear_algebra/tensor_algebra): Tensor algebras (#3531)
This PR constructs the tensor algebra of a module over a commutative ring.
The main components are:
1. The construction of the tensor algebra: `tensor_algebra R M` for a module `M` over a commutative ring `R`.
2. The linear map `univ R M` from `M` to `tensor_algebra R M`.
3. Given a linear map `f`from `M`to an `R`-algebra `A`, the lift of `f` to `tensor_algebra R M` is denoted `lift R M f`.
4. A theorem `univ_comp_lift` asserting that the composition of `univ R M` with `lift R M f`is `f`.
5. A theorem `lift_unique` asserting the uniqueness of `lift R M f`with respect to property 4.

2020-08-02 10:18:28 58f2c36
feat(dynamics/periodic_pts): definition and basic properties (#3660)
Also add more lemmas about `inj/surj/bij_on` and `maps_to`.

2020-08-02 08:31:21 78655b6
feat(data/set/intervals): define `set.ord_connected` (#3647)
A set `s : set α`, `[preorder α]` is `ord_connected` if for
any `x y ∈ s` we have `[x, y] ⊆ s`. For real numbers this property
is equivalent to each of the properties `convex s`
and `is_preconnected s`. We define it for any `preorder`, prove some
basic properties, and migrate lemmas like `convex_I??` and
`is_preconnected_I??` to this API.

2020-08-02 08:31:19 f2db6a8
chore(algebra/order): enable dot syntax (#3643)
Add dot syntax aliases to some lemmas about order (e.g.,
`has_le.le.trans`). Also remove `lt_of_le_of_ne'` (was equivalent
to `lt_of_le_of_ne`).

2020-08-02 06:44:24 6394e4d
feat(algebra/category/*): forget reflects isos (#3600)

2020-08-02 04:10:31 d76c75e
feat(measure_theory): cleanup and generalize measure' (#3648)
There were two functions `measure'` and `outer_measure'` with undescriptive names, and which were not very general
rename `measure'` -> `extend`
rename `outer_measure'` -> `induced_outer_measure`
generalize both `extend` and `induced_outer_measure` to an arbitrary subset of `set α` (instead of just the measurable sets). Most lemmas still hold in full generality, sometimes with a couple more assumptions. For the lemmas that need more assumptions, we have also kept the version that is just for `is_measurable`.
Move functions `extend`, `induced_outer_measure` and `trim` to `outer_measure.lean`.
rename `caratheodory_is_measurable` -> `of_function_caratheodory`
rename `trim_ge` -> `le_trim`
Make the section on caratheodory sets not private (and give a more descriptive name to lemmas).
Style in `measurable_space` and `outer_measure`

2020-08-02 03:20:12 fc65ba0
feat(analysis/calculus/times_cont_diff): inversion is smooth (#3639)
At an invertible element of a complete normed algebra, the inversion operation is smooth.

2020-08-02 02:10:22 d3de289
feat(topology/local_homeomorph): open_embedding.continuous_at_iff (#3599)
```
lemma continuous_at_iff
  {f : α → β} {g : β → γ} (hf : open_embedding f) {x : α} :
  continuous_at (g ∘ f) x ↔ continuous_at g (f x) :=
```

2020-08-01 21:07:07 4274ddd
chore(*): bump to Lean 3.18.4 (#3610)
* Remove `pi_arity` and the `vm_override` for `by_cases`, which have moved to core
* Fix fallout from the change to the definition of `max`
* Fix a small number of errors caused by changes to instance caching
* Remove `min_add`, which is generalized by `min_add_add_right`  and make `to_additive` generate some lemmas

2020-08-01 15:55:33 92a20e6
feat(order/filter/extr, topology/local_extr): links between extremas of two eventually le/eq functions (#3624)
Add many lemmas that look similar to e.g : if f and g are equal at `a`, and `f ≤ᶠ[l] g` for some filter `l`, then `is_min_filter l f a`implies `is_min_filter l g a`

2020-08-01 12:08:21 aa67315
chore(order/filter/bases): generalize `has_basis.restrict` (#3645)
The old lemma is renamed to `filter.has_basis.restrict_subset`

2020-08-01 09:06:29 c6f3399
feat(topology/subset_properties): add `is_compact.induction_on` (#3642)

2020-07-31 19:09:51 37ab426
feat(complete_lattice): put supr_congr and infi_congr back (#3646)

2020-07-31 17:41:12 7e570ed
chore(*): assorted small lemmas (#3644)

2020-07-31 17:41:10 396a764
feat(analysis/calculus/fderiv): inversion is differentiable (#3510)
At an invertible element `x` of a complete normed algebra, the inversion operation of the algebra is Fréchet-differentiable, with derivative `λ t, - x⁻¹ * t * x⁻¹`.

2020-07-31 16:13:36 3ae893d
fix(tactic/simps): do not reach unreachable code (#3637)
Fixes #3636

2020-07-30 22:46:17 f78a012
feat(group_theory/subgroup): Add `mem_infi` and `coe_infi` (#3634)
These already existed for submonoid, but were not lifted to subgroup.
Also adds some missing `norm_cast` attributes to similar lemmas.

2020-07-30 21:46:00 985a56b
ci(fetch_olean_cache.sh): error handling (#3628)
Previously, the CI would be interrupted if extracting the olean cache failed. After this PR, if that step fails, all oleans are deleted and then CI continues.
I also changed the search for ancestor commits with caches to look for `.xz` files instead of `.gz` files, for consistency.

2020-07-30 20:16:57 1a393e7
feat(tactic/explode): support exploding "let" expressions and improve handling of "have" expressions (#3632)
The current #explode has little effect on proofs using "let" expressions, e.g., #explode nat.exists_infinite_primes. #explode also
occasionally ignores certain dependencies due to macros occurring in "have" expressions. See examples below. This PR fixes these issues.
theorem foo {p q : Prop}: p → p :=
λ hp, have hh : p, from hp, hh
#explode foo -- missing dependencies at forall introduction
theorem bar {p q : Prop}: p → p :=
λ hp, (λ (hh : p), hh) hp
#explode bar -- expected behavior

2020-07-30 17:59:32 43ccce5
feat(geometry): first stab on Lie groups (#3529)

2020-07-30 13:59:09 77f3fa4
feat(tactic/interactive_expr): add copy button to type tooltip (#3633)
There should now be a 'copy expression' button in each tooltip which can
be used to copy the current expression to the clipboard.
![image](https://user-images.githubusercontent.com/5064353/88916012-374ff580-d25d-11ea-8260-8149966fc84a.png)
I have not tested on windows yet.
Also broke out `widget_override.goals_accomplished_message` so that
users can override it. For example:
```
meta def my_new_msg {α : Type} : widget.html α := "my message"
attribute [vm_override my_new_msg] widget_override.goals_accomplished_message
```

2020-07-30 13:18:00 e7075b8
chore(topology/algebra/ordered): fix assumptions in some lemmas (#3629)
* Some `nhds_within_I??_eq_nhds_within_I??` lemmas assumed strict
  inequalities when this was not needed.
* Remove TFAEs that only stated equality of three `nhds_within`s.
  Prove equality of `nhds_within`s instead.
* Genralize `I??_mem_nhds_within_I??` to `order_closed_topology`.

2020-07-30 08:41:45 29d5f11
chore(algebra/group_with_zero): weaken assumptions in some lemmas (#3630)

2020-07-30 07:34:56 e1fa5cb
feat(linear_algebra): invariant basis number property (#3560)

2020-07-30 05:41:44 03c302d
feat(field_theory/fixed): field is separable over fixed subfield under group action (#3568)

2020-07-29 23:48:24 ef89e9a
feat(data/qpf): compositional data type framework for inductive / coinductive types (#3317)
First milestone of the QPF project. Includes multivariate quotients of polynomial functors and compiler for coinductive types.
Not included in this PR
 * nested inductive / coinductive data types
 * universe polymorphism with more than one variable
 * inductive / coinductive families
 * equation compiler
 * efficient byte code implementation
Those are coming in future PRs

2020-07-30 01:14:09+02:00 4985ad5
Revert "feat(topology): path connected spaces"
This reverts commit 9208c2bd1f6c8dedc0cd1646dd107842f05b0b0c.

2020-07-30 01:12:56+02:00 9208c2b
feat(topology): path connected spaces

2020-07-29 21:50:21 86c83c3
feat(topology): two missing connectedness lemmas (#3626)
From the sphere eversion project.

2020-07-29 20:38:16 ebeeee7
feat(filters): a couple more lemmas (#3625)
Random lemmas gathered while thinking about https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/nhds_left.20and.20nhds_right

2020-07-29 13:58:44 652fb2e
chore(doc/*): add README files (#3623)

2020-07-29 11:45:51 37e13a0
feat(tactic/lint): quieter output by default (#3622)
* The behavior of `lint-` hasn't changed.
* `lint` will now suppress the output of successful checks. If everything succeeds, it will print "All linting checks passed!"
* `lint+` behaves like the old `lint`. It prints a confirmation for each test.
Zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/quiet.20linter

2020-07-29 11:19:36 b0d1d17
feat(data/ulift): add `monad ulift` and `monad plift` (#3588)
We add `functor`/`applicative`/`monad` instances for `ulift` and `plift`.

2020-07-29 08:21:11 80f2762
feat(topology): assorted topological lemmas (#3619)
from the sphere eversion project

2020-07-29 00:35:48 e14ba7b
chore(scripts): update nolints.txt (#3620)
I am happy to remove some nolints for you!

2020-07-28 23:25:03 e245254
feat(category_theory/monoidal): λ_ (𝟙_ C) = ρ_ (𝟙_ C) (#3556)
The incredibly tedious proof from the axioms that `λ_ (𝟙_ C) = ρ_ (𝟙_ C)` in any monoidal category.
One would hope that it falls out from a coherence theorem, but we're not close to having one, and I suspect that this result might be a step in any proof.

2020-07-28 22:08:48 2e6c488
chore(order/complete_lattice): use `Prop` args in `infi_inf` etc (#3611)
This way one can `rw binfi_inf` first, then prove `∃ i, p i`.
Also move some code up to make it available near `infi_inf`.

2020-07-28 21:33:31 aafc486
feat(topology/ordered): intervals frontiers (#3617)
from the sphere eversion project

2020-07-28 20:45:39 5cd6eeb
chore(ci): only store oleans in azure cache (#3616)

2020-07-28 20:12:44 4ae8752
chore(data/mv_polynomial): use bundled homs (#3595)
I've done a lot of the scut work, but there are still about half a dozen broken proofs, if anyone would like to take a bash at them!

2020-07-28 19:31:16 b765570
chore(topology): rename interior_eq_of_open (#3614)
This allows to use dot notation and is more consistent with
its closed twin is_closed.closure_eq

2020-07-28 17:35:02 9f51e33
feat(measure_theory/measurable_space): introduce `filter.is_measurably_generated` (#3594)
Sometimes I want to extract an `is_measurable` witness of a `filter.eventually` statement.

2020-07-28 17:35:00 7236938
feat(measure_theory/measure_space): add `count_apply_infinite` (#3592)
Also add some supporting lemmas about `set.infinite`.

2020-07-28 17:02:06 f6f6f8a
feat(linear_algebra/affine_space): more affine subspace lemmas (#3552)
Add more lemmas on affine subspaces that came up in the course of
proving existence and uniqueness of the circumcenter of a simplex in a
Euclidean space.

2020-07-28 15:30:51 7848f28
feat(category_theory): Mon_ (Type u) ≌ Mon.{u} (#3562)
Verifying that internal monoid objects in Type are the same thing as bundled monoid objects.

2020-07-28 14:20:39 9e841c8
feat(data/list/basic): add a proof that `(a :: l) ≠ l` (#3584)
`list.cons_ne_self` is motivated by the existence of `nat.succ_ne_self`.

2020-07-28 13:45:08 f1dfece
feat(linear_algebra/affine_space): bundled affine independent families (#3561)
Define `affine_space.simplex` as `n + 1` affine independent points,
with the specific case of `affine_space.triangle`.  I expect most
definitions and results for these types (such as `circumcenter` and
`circumradius`, which I'm currently working on) will be specific to
the case of Euclidean affine spaces, but some make sense in a more
general affine space context.

2020-07-28 11:47:58 5a876ca
feat(category_theory): monoidal_category (C ⥤ C) (#3557)

2020-07-28 10:21:52 be99e53
chore(ci): remove unused build step (#3607)

2020-07-28 10:21:50 f1ad7a8
docs(topology/sheaves): better docs for presheaf (#3596)
Add module doc-strings to two files.

2020-07-28 10:21:48 35f1f63
doc(topology/basic): docstrings for nhds and a few related lemmas (#3548)
`nhds` was the only `def` in the file which didn't have an explanation, so I documented it.
I also went ahead and documented a few related lemmas which I felt were worth calling out.

2020-07-28 09:27:12 037821b
chore(category_theory/limits/types): remove simp lemmas (#3604)
No one wants to see how the sausage is being made.
Or at least, no one wants `simp` to show you without asking.

2020-07-28 09:27:10 a574db1
refactor(algebra/category/*/limits): refactor concrete limits (#3463)
We used to construct categorical limits for `AddCommGroup` and `CommRing`.
Now we construct them for
* `(Add)(Comm)Mon`
* `(Add)(Comm)Group`
* `(Comm)(Semi)Ring`
* `Module R`
* `Algebra R`
Even better, we reuse structure along the way, and show that all the relevant forgetful functors preserve limits.
We're still not at the point were this can either be done by
* automation, or
* noticing that everything is a model of a Lawvere theory
but ... maybe one day.

2020-07-28 08:55:31 ce70305
feat(category_theory): monoidal_category (C ⥤ D) when D is monoidal (#3571)
When `C` is any category, and `D` is a monoidal category,
there is a natural "pointwise" monoidal structure on `C ⥤ D`.
The initial intended application is tensor product of presheaves.

2020-07-28 07:54:19 3576381
chore(ring_theory/subsemiring): tidy up docstrings (#3580)

2020-07-28 02:35:47 865e888
chore(*): make sure definitions don't generate `s x`, `s : set _` (#3591)
Fix the following definitions: `subtype.fintype`, `pfun.dom`, `pfun.as_subtype`, `pfun.equiv_subtype`.

2020-07-28 02:35:45 d04e3fc
feat(linear_algebra/char_poly): relates the characteristic polynomial to trace, determinant, and dimension (#3536)
adds lemmas about the number of fixed points of a permutation
adds lemmas connecting the trace, determinant, and dimension of a matrix to its characteristic polynomial

2020-07-28 02:35:42 a9481d9
feat(analysis/convex/basic): add lemmas about transformations of convex sets and functions (#3524)

2020-07-28 02:35:40 005201a
feat(linear_algebra/adic_completion): basic definitions about completions of modules (#3452)

2020-07-28 01:10:52 7cd1e26
feat(data/set/basic): range_unique (#3582)
Add a lemma on the `range` of a function from a `unique` type.

2020-07-28 01:10:50 23bd09a
chore(deprecated/ring): removing uses (#3577)
This strips out a lot of the use of `deprecated.ring`. It's now only imported by `data.polynomial.eval`, and `ring_theory.free_ring`.

2020-07-28 01:10:48 7d4d985
chore(data/polynomial): make eval2 irreducible (#3543)
A while back @gebner identified that [an unfortunate timeout could be avoided](https://github.com/leanprover-community/mathlib/pull/3380#issuecomment-657449148) by making `polynomial.eval2` irreducible.
This PR does that.
It's not perfect: on a few occasions I have to temporarily set it back to semireducible, because it looks like the proofs really do some heavy refling.
I'd like to make more things irreducible in the polynomial API, but not yet.

2020-07-28 00:39:31 4afb214
chore(scripts): update nolints.txt (#3593)
I am happy to remove some nolints for you!

2020-07-27 20:50:19 7556353
feat(data/int/cast): monoid_hom.ext_int (#3587)

2020-07-27 20:50:17 864a22a
chore(ci): delete doc generation steps (#3586)
Doc generation will be run on schedule in another repo for security reasons.

2020-07-27 20:50:15 2ecf70f
feat(data/finset/basic): more lemmas on finsets of subtypes (#3575)
Add two more lemmas related to `not_mem_map_subtype_of_not_property`.

2020-07-27 15:26:50 3550f4f
feat(*): remaining preliminaries for Haar measure (#3541)
Define `has_mul (finset α)`
more convenient formulation of `is_compact.finite_compact_cover`
some lemma additions

2020-07-27 14:54:00 adfcfe7
feat(category_theory/concrete_category): epi_of_surjective (#3585)
Also, change the proof of `mono_of_injective` to use the fact that the forgetful function reflects monomorphisms.

2020-07-27 12:21:03 aeff5fc
chore(ci): get xz archive (#3581)
We've been storing both .gz and .xz for a while for backward compatibility but will eventually drop .gz support.

2020-07-27 12:20:59 133067c
feat(set_theory/cardinal_ordinal): cardinal.mk_finset_eq_mk (#3578)

2020-07-27 11:35:50 4a5e25c
chore(ci): remove branch update script (#3579)
For security reasons, this will move to a scheduled action in a different repo.

2020-07-27 11:35:48 8ba59d8
feat(measure_theory/measure_space): 2 lemmas about compact sets (#3573)
A compact set `s` has finite (resp., zero) measure if every point of
`s` has a neighborhood within `s` of finite (resp., zero) measure.

2020-07-27 11:35:46 da64c7f
chore(order/filter/basic): use `set.eq_on` in a few lemmas (#3565)

2020-07-27 10:07:11 8c8d6a2
feat(topology/tactic): continuity faster and more powerful (#3545)
Following up on the recent introduction of Reid's continuity tactic in #2879, I've made some tweaks that make it both faster and more capable.
1. we use `apply_rules {md:=semireducible}`, taking advantage of #3538. This makes examples like
`example : continuous (λ x : ℝ, exp ((max x (-x)) + sin (cos x))^2) := by continuity` viable.
2. in `apply_rules`, if we pull in lemmas using an attribute, we reverse the list of lemmas (on the heuristic that older lemmas are more frequently applicable than newer lemmas)
3. in `continuity`, I removed the `apply_assumption` step in the `tidy` loop, since `apply_rules` is already calling `assumption`
4. also in the `tidy` loop, I moved `intro1` above `apply_rules`.
The example in the test file
```
example {κ ι : Type}
  (K : κ → Type) [∀ k, topological_space (K k)] (I : ι → Type) [∀ i, topological_space (I i)]
  (e : κ ≃ ι) (F : Π k, homeomorph (K k) (I (e k))) :
  continuous (λ (f : Π k, K k) (i : ι), F (e.symm i) (f (e.symm i))) :=
by show_term { continuity }
```
which previously timed out now runs happily even with `-T50000`.

2020-07-27 06:09:20 4c0881e
feat(measure_theory/measure_space): several lemmas about `restrict` (#3574)

2020-07-27 04:33:38 d5d463e
chore(topology/subset_properties): +2 lemmas about `is_compact` (#3567)
Also use `variables {s t : set α}`

2020-07-27 03:38:45 8673f23
chore(data/finsupp): move into finsupp folder (#3566)

2020-07-27 02:48:13 d6e399f
chore(order/filter/basic): add `@[simp]` to `principal_empty/univ` (#3572)

2020-07-27 01:32:13 d06f62d
feat(analysis/calculus/times_cont_diff): more thorough times_cont_diff interface (#3551)
Add missing lemmas on smooth functions between vector spaces, that were necessary to solve the manifold exercises in Lftcm2020.
Changes the `{x : E}` argument from implicit to explicit in `lemma times_cont_diff_within_at.comp` and `lemma times_cont_diff_within_at.comp'`.

2020-07-27 00:02:05 ca6cebc
feat(data/nat/digits): add `last_digit_ne_zero` (#3544)
The proof of `base_pow_length_digits_le` was refactored as suggested by @fpvandoorn in #3498.

2020-07-26 23:00:29 3c4abe0
chore(ci): remove update_nolint action (#3570)
this action will move to another repository for security reasons

2020-07-26 22:16:42 4763feb
chore(topology/basic): directly use `self_of_nhds` in `eq_of_nhds` (#3569)

2020-07-26 17:38:11 a6d3d65
chore(data/set/intervals): more `simp` lemmas (#3564)

2020-07-26 14:16:23 692a689
feat(data/list/chain): chain'.append_overlap (#3559)

2020-07-26 10:41:56 f4106af
feat(order/filters, topology): relation between neighborhoods of a in [a, u), [a, u] and [a,+inf) + various nhds_within lemmas (#3516)
Content : 
- two lemmas about filters, namely `tendsto_sup` and `eventually_eq_inf_principal_iff`
- a few lemmas about `nhds_within`
- duplicate and move parts of the lemmas `tfae_mem_nhds_within_[Ioi/Iio/Ici/Iic]` that only require `order_closed_topology α` instead of `order_topology α`. This allows to turn any left/right neighborhood of `a` into its "canonical" form (i.e `Ioi`/`Iio`/`Ici`/`Iic`) with a weaker assumption than before

2020-07-26 09:05:48 f95e90b
chore(order/liminf_limsup): use dot notation and `order_dual` (#3555)
## New
* `filter.has_basis.Limsup_eq_infi_Sup`
## Rename
### Namespace `filter`
* `is_bounded_of_le` → `is_bounded_mono`;
* `is_bounded_under_of_is_bounded` → `is_bounded.is_bounded_under`;
* `is_cobounded_of_is_bounded` → `is_bounded.is_cobounded_flip`;
* `is_cobounded_of_le` → `is_cobounded.mono`;
### Top namespace
* `is_bounded_under_le_of_tendsto` → `filter.tendsto.is_bounded_under_le`;
* `is_cobounded_under_ge_of_tendsto` → `filter.tendsto.is_cobounded_under_ge`;
* `is_bounded_under_ge_of_tendsto` → `filter.tendsto.is_bounded_under_ge`;
* `is_cobounded_under_le_of_tendsto` → `filter.tendsto.is_cobounded_under_le`.
## Remove
* `filter.is_trans_le`, `filter.is_trans_ge`: we have both
  in `order/rel_classes`.

2020-07-26 09:05:46 493a5b0
feat(data/set/lattice): add lemmas `disjoint.union_left/right` etc (#3554)

2020-07-26 07:41:04 3c1f332
feat(tactic/to_additive): automate substructure naming (#3553)
This is all @cipher1024's work, improving `to_additive` to correctly generate names when we're talking about structures (rather than just operations).

2020-07-26 07:03:20 d7fcd8c
chore(analysis/normed_space): remove 2 `norm_zero` lemmas (#3558)
We have a general `norm_zero` lemma and these lemmas are not used
before we introduce `normed_group` instances.

2020-07-26 02:39:04 11179d5
feat(algebra/category/Group/*): compare categorical (co)kernels/images with the usual notions (#3443)

2020-07-25 15:53:29 8582b06
feat(logic/basic): mark cast_eq as a `simp` lemma (#3547)
The theorem `cast_eq` is in core and says `theorem cast_eq : ∀ {α : Sort u} (h : α = α) (a : α), cast h a = a`

2020-07-25 15:23:48 3484194
chore(geometry/manifold/real_instance): remove global fact instance (#3549)
Remove global `fact` instance that was used to get a manifold structure on `[0, 1]`, and register only the manifold structure.

2020-07-25 10:09:45 e90c7b9
feat(data/num/prime): kernel-friendly decision procedure for prime (#3525)

2020-07-25 07:31:35 0379d3a
chore(*): minor import cleanup (#3546)

2020-07-25 06:33:04 2a456a9
feat(topology/*, geometry/*): missing lemmas (#3528)
Grab bag of missing lemmas on topology and geometry that were needed for the manifold exercises in Lftcm2020.

2020-07-25 06:33:02 12a7ce3
feat(category_theory/isomorphism): lemmas about cancelling isomorphisms (#3436)

2020-07-25 05:30:35 2d29f80
feat(data/finsupp): lattice structure on finsupp (#3335)
adds facts about order_isos respecting lattice operations
defines lattice structures on finsupps to N
constructs an order_iso out of finsupp.to_multiset

2020-07-25 04:26:19 8d55eda
feat(topology/tactic): `continuity` tactic (#2879)

2020-07-24 21:19:13 6f9da35
feat(tactic/simps): improvements (#3477)
Features:
* `@[simps]` will look for `has_coe_to_sort` and `has_coe_to_fun` instances, and use those instead of direct projections. This should make it way more applicable for `equiv`, `local_equiv` and all other structures that coerce to a function (and for the few structures that coerce to a type). This works out-of-the-box without special configuration.
* Use `has_mul.mul`, `has_zero.zero` and all the other "notation projections" instead of the projections directly. This should make it more useful in category theory and the algebraic hierarchy (note: the `[notation_class]` attribute still needs to be added to all notation classes not defined in `init.core`)
* Add an easy way to specify custom projections of structures (like using `⇑e.symm` instead of `e.inv_fun`). They have to be definitionally equal to the projection.
Minor changes:
* Change the syntax to specify options.
* `prod` (and `pprod`) are treated as a special case: we do not recursively apply projections of these structure. This was the most common reason that we had to write the desired projections manually. You can still override this behavior by writing out the projections manually.
* A flag to apply `simp` to the rhs of the generated lemma, so that they are in simp-normal-form.
* Added an options to add more attributes to the generated lemmas
* Added an option which definitions to unfold to determine whether a type is a function type. By default it will unfold reducible definitions and instances (but e.g. not `set α`)
* Added an option to unfold definitions in the declaration to determine whether it is a constructor. (default: none)
* Added an option to not fully-apply the terms in the generated lemmas.
Design decisions:
* For every field in a structure there is a specified "projection expression" that acts as the projection for that field. For most fields this is just the projection of the structure, but this will be automatically overridden under certain conditions, like a coercion to functions/sorts existing, or a notation typeclass existing for a certain field.
* The first time you call `simps` for a specific structure, these projection expressions are cached using an attribute for that structure, and it is assumed you want to use the same projection expressions every time.
* You can also manually specify the projection. See Note [custom simps projection].

2020-07-24 18:42:44 4d81149
chore(ring_theory/prod): move file to algebra/ring/prod (#3540)

2020-07-24 17:03:22 47efcf3
chore(algebraic_geometry/presheafed_space): use projection rather than fancy coercion (#3507)
We'd gone to great effort when writing `PresheafedSpace` to create a coercion from morphisms of `PresheafedSpace`s to morphisms in `Top`.
It's hard to read, it's fragile.
So this PR rips out that coercion, and renames the "continuous map between base spaces" field from `f` to `base`, and uses that throughout.

2020-07-24 13:04:01 229cf6e
feat(data/polynomial): irreducible_of_irreducible_mod_prime (#3539)
I was waiting on this, an exercise from Johan's tutorial at LftCM, to see if a participant would PR it. Perhaps not, so I'll contribute this now.

2020-07-24 13:03:59 579b142
feat(field_theory/fixed): a field is normal over the fixed subfield under a group action (#3520)
From my Galois theory repo.

2020-07-24 11:52:28 a6ad904
feat(tactic/apply_rules): allow apply_cfg argument (#3538)
This allows passing an `apply_cfg` argument to `apply_rules` (and simplifies the configuration argument to `solve_by_elim`).
This is prompted by the desire to try using `apply_rules` with `md := semireducible` when working on the `continuity` tactic.

2020-07-24 11:07:23 2d47d0c
chore(measure_theory/indicator_function): split into 2 files deps: 3503 (#3509)
Split `measure_theory/indicator_function` into 2 files.
This file formulated all lemmas for `measure.ae` but they hold for any filter.

2020-07-24 09:01:42 6fe81bd
chore(*): remove `plift` from some lemmas about `infi`/`supr` (#3503)
Now `supr_eq_supr_finset` etc assume `ι` is a `Type*` and don't use `plift`. If you want
to apply it to a `Sort*`, rewrite on `equiv.plift.surjective.supr_comp` first.
## Full list of API changes:
### `data/equiv/basic`
* `equiv.ulift`: change the order of universe arguments to match `ulift`;
* add `coe_ulift`, `coe_plift`, `coe_ulift_symm`, `coe_plift_symm`;
### `data/finset/lattice`
* `supr_eq_supr_finset`, `infi_eq_infi_finset`: assume `ι` is a `Type*`, avoid `plift`;
* `Union_eq_Union_finset`, `Inter_eq_Inter_finset`: same as above;
### `data/set/basic`
* `function.surjective.range_comp`: generalize to `Sort*` for 2 of 3 arguments;
### `order/complete_lattice`
* remove `supr_congr` and `infi_congr`;
* add `function.surjective.supr_comp` and `function.surjective.infi_comp`.

2020-07-24 08:19:54 499cb9b
refactor(data/nat/digits): refactor into sections (#3527)
Refactor `data.nat.digits` into sections and grouping similar lemmas together.

2020-07-24 07:44:28 5d41ec7
feat(ring_theory/polynomial/basic): remove unnecessary commutativity assumption (#3535)

2020-07-24 00:41:59 c88f8be
chore(scripts): update nolints.txt (#3534)
I am happy to remove some nolints for you!

2020-07-23 23:18:12 bad4f97
feat(algebra/direct_sum): Add ⨁ notation (#3473)
This uses the unicode character "n-ary circled plus operator", which seems to be the usual symbol for this operation

2020-07-23 19:52:19 289d17c
chore(data/equiv/basic): avoid `λ ⟨a, b⟩` in some defs, add `simp` lemmas (#3530)

2020-07-23 18:29:16 2d395a9
refactor(algebra/pi_instance): delete pi_instance file, and move instances to group/ring etc appropriately (#3513)

2020-07-23 14:56:16 ed33a99
chore(measure_theory/l1_space): make `measure` argument of `integrable` optional (#3508)
Other changes:
* a few trivial lemmas;
* fix notation for `∀ᵐ`: now Lean can use it for printing, not only
  for parsing.

2020-07-23 13:44:07 396a66a
chore(order/filter/*): use `[nonempty _]` instead of `(_ : nonempty _)` (#3526)
In most cases Lean can find an instance automatically.

2020-07-23 11:08:28 b9beca0
chore(set_theory/ordinal): split into multiple files (#3517)
Split the file `ordinal.lean` into three files, and add docstrings for all definitions and file-level docstrings. This is just shuffling things around: no new content, no erased content.

2020-07-23 08:52:03 79df8cc
refactor(order/filter/at_top): import order.filter.bases (#3523)
This way we can use facts about `filter.has_basis` in `filter.at_top`.
Also generalize `is_countably_generated_at_top_finset_nat`
to `at_top` filter on any `encodable` type.

2020-07-23 07:50:13 d974457
feat(ring_theory/ideal_over): a prime ideal lying over a maximal ideal is maximal (#3488)
By making the results in `ideal_over.lean` a bit more general, we can transfer to quotient rings. This allows us to prove a strict inclusion `I < J` of ideals in `S` results in a strict inclusion `I.comap f < J.comap f` if `R` if `f : R ->+* S` is nice enough. As a corollary, a prime ideal lying over a maximal ideal is maximal.

2020-07-23 02:51:42 7397db7
chore(data/sym2) : simplify proofs (#3522)
This shouldn't change any declarations, only proofs.

2020-07-23 01:10:58 c149839
chore(topology/uniform_space/basic): golf a proof (#3521)
Also prove that a `subsingleton` has a unique `topological_space` structure.

2020-07-23 01:10:56 4a918fb
chore(order/complete_lattice): add `supr/infi_of_empty(')` (#3519)

2020-07-23 01:10:54 827fcd0
feat(analysis/convex/basic): add lemmas about convex combination of endpoints of intervals (#3482)

2020-07-22 23:58:19 fbcd890
chore(data/subtype,order/complete_lattice): use `coe` instead of `subtype.val` (#3518)

2020-07-22 19:30:06 1dd69d3
refactor(data/polynomial): re-organizing (#3512)
This builds on #3407, trying to get related material closer together. 
There shouldn't be any change to the set of declarations, just the order they come in and the imports required to get them.
The major changes are:
1. `data.polynomial.derivative` now has much weaker imports
2. generally, material has been moved "upwards" to the first place it can be done (a lot of material moved out of `data.polynomial.degree` into `data.polynomial.degree.basic` -- essentially `degree` is the material about `degree` that also needs `eval` and friends; a further rename might be appropriate)
3. some of the later material is no longer a big chain of linear dependencies, but compiles separately

2020-07-22 16:16:15 36ea9e8
chore(*): cleanup imports (#3511)
A not-very-interesting cleanup of imports.
I deleted 
```
instance orbit_fintype (b : β) [fintype α] [decidable_eq β] :	
  fintype (orbit α b) := set.fintype_range _
```
which wasn't being used, for the sake of not having to import everything about finiteness into `algebra.group_action`.

2020-07-22 16:16:13 a8cedf9
feat(data/nat/digits): a number is bigger than base^(digits length - 1) (#3498)

2020-07-22 14:52:45 acc2802
feat(tactic/extract_goal): remove annoying spaces (#3514)
closes #3375

2020-07-22 14:04:33 a971a88
refactor(linear_algebra/nonsingular_inverse, data/matrix/basic): update_* rectangular matrices (#3403)

2020-07-22 11:32:56 90d3386
feat(category_theory/kernels): compute kernel (f ≫ g) when one is an iso (#3438)

2020-07-22 10:18:14 39f8f02
refactor(algebra/big_operators): split file, reduce imports (#3495)
I've split up `algebra.big_operators`. It wasn't completely obvious how to divide it up, but this is an attempt to balance coherence / file size / minimal imports.

2020-07-22 08:55:49 197b501
feat(tactic/extract_goal): better support for `let` expressions (#3496)
Improve treatment of let expressions #3375

2020-07-22 05:08:37 64335de
chore(topology/category/): switch to bundled morphisms in Top (#3506)
This is a natural follow-up to @Nicknamen's recent PRs splitting bundled continuous maps out of `compact_open`.
There is a slight regression in `algebraic_geometry.presheafed_space` and `algebraic_geometry.stalks`, requiring a more explicit coercion. I'd encourage reviewers to ignore this, as I'll make a separate PR simplifying this (basically: having a coercion from morphisms of `PresheafedSpace`s to morphisms of `Top`s is unrealistically ambitious, and moreover harder to read, than just using the projection notation, and removing it makes everything easier).

2020-07-22 03:47:11 dced343
feat(data/list/basic): induction from both ends (#3448)
This was originally an induction principle on palindromes, but researching Coq solutions made me realize that weakening the statement made it simpler and much easier to prove.
- ["The way we proceeded was to prove first an induction principle for lists, considering insertions at both ends..."][1]
- ["... generalizing a single variable in that definition would create another inductive definition of a list."][2]
[1]: https://www.labri.fr/perso/casteran/CoqArt/inductive-prop-chap/palindrome.html
[2]: https://danilafe.com/blog/coq_palindrome/
This also adds the lemmas `length_init` and `init_append_last`.

2020-07-22 02:38:08 55e7dcc
fix(ring_theory/jacobson): Clean up documentation in Jacobson Ring definitions (#3501)
Fixes to formatting and documentation found after merging the definition of Jacobson Rings in https://github.com/leanprover-community/mathlib/pull/3404

2020-07-22 01:12:15 314b209
chore(scripts): update nolints.txt (#3505)
I am happy to remove some nolints for you!

2020-07-22 00:27:14 2219dc1
feat(tactic/linarith): put certificate generation in tactic monad (#3504)

2020-07-22 00:27:12 219e298
feat(ring_theory/discrete_valuation_ring): add DVR (#3476)

2020-07-21 23:16:29 84d6497
fix(algebra/ring): add coe_neg_one lemma to units (#3489)
Follow up to #3472 - adds `coe_neg_one`, which allows `norm_cast` to handle hypotheses like `↑-1 = 1`

2020-07-21 22:26:30 e448bb1
feat(tactic/linarith): modularize coefficient oracle (#3502)
This makes it easy to plug an alternate certificate search method (e.g. simplex-based) into `linarith`, should one desire.

2020-07-21 21:58:58 c6aa8e7
feat(algebra/invertible): invertible elements are units (#3499)

2020-07-21 21:58:56 2fb6a05
feat(group_theory/semidirect_product): semidirect_product.map (#3492)

2020-07-21 21:29:16 dfef07a
chore(analysis/special_functions): moved trig vals out of real.pi, added new trig vals (#3497)
Moved trigonometric lemmas from real.pi to analysis.special_functions.trigonometric. Also added two new trig lemmas, tan_pi_div_four and arctan_one, to analysis.special_functions.trigonometric.
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Trig.20function.20values

2020-07-21 16:25:32 c47d1d0
feat(data/{mv_}polynomial): make args to aeval implicit (#3494)

2020-07-21 16:25:30 7efdd99
feat(algebra/invertible): lemmas (#3493)
Coauthored by: Johan Commelin <johan@commelin.net>

2020-07-21 15:23:28 5776f4c
feat(topology): more lemmas about Ici and Iic neighborhoods (#3474)
Main feature :  add `tfae_mem_nhds_within_Ici` and `tfae_mem_nhds_within_Iic`, analogous to the existing `tfae_mem_nhds_within_Ioi` and `tfae_mem_nhds_within_Iio`, as well as related lemmas (again imitating the open case)
I also added a few lemmas in `data/set/intervals/basic.lean` that were useful for this and a few upcoming PRs

2020-07-21 12:58:53 49049e4
feat(topology): implemented continuous bundled maps (#3486)
In this PR we defined continuous bundled maps, adapted the file `compact_open` accordingly, and proved instances of algebraic structures over the type `continuous_map` of continuous bundled maps. This feature was suggested on Zulip multiple times, see for example https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Continuous.20maps

2020-07-21 11:50:25 5c55e15
feat(data/finset/intervals): Lemma about filter and Ico (#3479)
Add "if you filter an Ico based on being less than or equal to its bottom element, you get the singleton bottom element".

2020-07-21 10:37:37 d57130b
feat(field_theory/mv_polynomial): char_p instance (#3491)

2020-07-21 09:25:11 1a31e69
chore(algebra/group/anti_hom): remove is_group_anti_hom (#3485)
`is_group_anti_hom` is no longer used anywhere, so I'm going to count it as deprecated and propose removing it.

2020-07-21 08:38:58 3169970
feat(category_theory/kernels): helper lemmas for constructing kernels (#3439)
This does for kernels what #3398 did for pullbacks.

2020-07-21 07:47:44 d174d3d
refactor(linear_algebra/*): postpone importing material on direct sums (#3484)
This is just a refactor, to avoid needing to develop material on direct sums before we can even define an algebra.

2020-07-21 04:06:36 c71e67a
feat(ring_theory/jacobson): definition of Jacobson rings (#3404)

2020-07-21 01:55:48 0322d89
refactor(topology/algebra/monoid): changed topological_monoid into has_continuous_mul (#3481)

2020-07-21 01:05:11 079d409
chore(scripts): update nolints.txt (#3483)
I am happy to remove some nolints for you!

2020-07-21 01:05:09 6721ddf
refactor(ring_theory): remove unbundled leftovers in `ideal.quotient` (#3467)
This PR aims to smooth some corners in the `ideal.quotient` namespace left by the move to bundled `ring_hom`s. The main irritation is the ambiguity between different ways to map `x : R` to the quotient ring: `quot.mk`, `quotient.mk`, `quotient.mk'`, `submodule.quotient.mk`, `ideal.quotient.mk` and `ideal.quotient.mk_hom`, which caused a lot of duplication and more awkward proofs.
The specific changes are:
 * delete function `ideal_quotient.mk`
 * rename ring hom `ideal.quotient.mk_hom` to `ideal.quotient.mk`
 * make new `ideal_quotient.mk` the `simp` normal form
 * delete obsolete `mk_eq_mk_hom`
 * delete obsolete `mk_...` `simp` lemmas (use `ring_hom.map_...` instead)
 * delete `quotient.map_mk` which was unused and had no lemmas (`ideal.map quotient.mk` is used elsewhere)

2020-07-21 01:05:07 564ab02
feat(category_theory/kernels): cokernel (image.ι f) ≅ cokernel f (#3441)

2020-07-20 23:42:11 32c082f
fix(tactic/library_search): group monotone lemmas with le lemmas (#3471)
This lets `library_search` use `monotone` lemmas to prove `\le` goals, and vice versa, resolving a problem people were experiencing in Patrick's exercises at LftCM2020:
```
import order.filter.basic
open filter
example {α β γ : Type*} {A : filter α} {B : filter β} {C : filter γ} {f : α → β} {g : β → γ}
  (hf : tendsto f A B) (hg : tendsto g B C) : tendsto (g ∘ f) A C :=
calc
map (g ∘ f) A = map g (map f A) : by library_search
          ... ≤ map g B         : by library_search!
          ... ≤ C               : by library_search!
```

2020-07-20 22:17:29 2915fae
feat(data/finset/basic): Cardinality of intersection with singleton (#3480)
Intersecting with a singleton produces a set of cardinality either 0 or 1.

2020-07-20 20:30:53 1f74ddd
feat(topology/local_extr): add lemmas on composition with continuous functions (#3459)

2020-07-20 18:42:24 7aa85c2
fix(algebra/group/units): add missing coe lemmas to units (#3472)
Per @kbuzzard's suggestions [here](https://leanprover-community.github.io/archive/stream/113489-new-members/topic/Shortening.20proof.20on.20product.20of.20units.20in.20Z.html#204406319):
- Add a new lemma `coe_eq_one` to `units` API
- Tag `eq_iff` with `norm_cast`

2020-07-20 17:56:13 b66d1be
feat(data/multivariate/qpf): definition (#3395)
Part of #3317

2020-07-20 15:42:49 78f438b
feat(tactic/squeeze_*): improve suggestions (#3431)
This makes this gives `squeeze_simp`, `squeeze_simpa` and `squeeze_dsimp` the `?` optional argument that indicates that we should consider all `simp` lemmas that are also `_refl_lemma`

2020-07-20 14:17:48 d0df6b8
feat(data/equiv/mul_add): refl_apply and trans_apply (#3470)

2020-07-20 14:17:46 2994f1b
feat(solve_by_elim): add tracing (#3468)
When `solve_by_elim` fails, it now prints:
```
`solve_by_elim` failed.
Try `solve_by_elim { max_depth := N }` for a larger `N`,
or use `set_option trace.solve_by_elim true` to view the search.
```
and with `set_option trace.solve_by_elim true` we get messages like:
```
example (n m : ℕ) (f : ℕ → ℕ → Prop) (h : f n m) : ∃ p : ℕ × ℕ, f p.1 p.2 :=
begin
  repeat { fsplit },
  solve_by_elim*,
end
```
producing:
```
[solve_by_elim . ✅ `n` solves `⊢ ℕ`]
[solve_by_elim .. ✅ `n` solves `⊢ ℕ`]
[solve_by_elim ... ❌ failed to solve `⊢ f (n, n).fst (n, n).snd`]
[solve_by_elim .. ✅ `m` solves `⊢ ℕ`]
[solve_by_elim ... ✅ `h` solves `⊢ f (n, m).fst (n, m).snd`]
[solve_by_elim .... success!]
```
Fixed #3063

2020-07-20 14:17:44 38b95c8
feat(set_theory/cardinal): simp lemmas about numerals (#3450)

2020-07-20 14:17:41 9a92363
feat(logic/basic): nonempty.some (#3449)
Could we please have this? I've a number of times been annoyed by the difficulty of extracting an element from a `nonempty`.
(Criterion for alternative solutions: `library_search` solves `nonempty X -> X`.)

2020-07-20 14:17:39 469043f
refactor(tactic/generalizes): reimplement generalizes' (#3416)
The new implementation is somewhat simpler. It is inspired by the C++
function `generalize_indices` in `library/tactic/cases_tactic.cpp`,
which performs essentially the same construction.
The only non-internal change is the return type of `generalizes_intro`.

2020-07-20 12:54:51 593b1bb
feat(linear_algebra/affine_space): lemmas on affine spans (#3453)
Add more lemmas on affine spans; in particular, that the points in an
`affine_span` are exactly the `affine_combination`s where the sum of
weights equals 1, provided the underlying ring is nontrivial.

2020-07-20 12:54:49 65208ed
refactor(data/polynomial/*): further refactors (#3435)
There's a lot further to go, but I need to do other things for a while so will PR what I have so far.

2020-07-20 12:54:47 cb06214
feat(tactic/interactive_expr): always select all arguments (#3384)
If you hover over `id id 0` in the widget (or really any function with more than one argument), then it is possible to select the partial application `id id`.  The popup will then only show the function `id` and the argument `id`, but not the second argument `0`.
This PR changes this behavior so that you can't select partial applications and always see all argument in the popup.

2020-07-20 11:25:58 4a3755a
chore(algebra/ring): fix a mistake (#3469)

2020-07-20 09:41:20 4dc0814
feat (algebra/module): lemma about submodules (#3466)
Add a 3-line lemma saying that a linear combination of elements of a submodule is still in that submodule.

2020-07-20 08:16:52 a400adb
fix(tactic/library_search): 1 ≤ n goals in nat (#3462)
Fixes #3432.
This PR changes `library_search` and `suggest`:
1. instead of just selecting lemma with a single `name` as their head symbol, allows selecting from a `name_set`.
2. when the goal is `≤` on certain `ℕ` goals, set that `name_set` to `[has_lt.lt, has_le.le]`, for more flexible matching of inequality lemmas about `ℕ`
3. now successfully solves `theorem nonzero_gt_one (n : ℕ) : ¬ n = 0 → n ≥ 1 := by library_search!`
4. splits the `test/library_search/basic.lean` file into two parts, one which doesn't import `data.nat.basic`, for faster testing

2020-07-20 06:04:37 5080dd5
feat(data/padics/padic_norm): lemmas about padic_val_nat (#3230)
Collection of lemmas about `padic_val_nat`, culminating in `lemma prod_pow_prime_padic_val_nat : ∀ (n : nat) (s : n ≠ 0) (m : nat) (pr : n < m),  ∏ p in finset.filter nat.prime (finset.range m), pow p (padic_val_nat p n) = n`.

2020-07-20 05:06:14 84d4ea7
feat(data/nat/digits): a bigger number has more digits (#3457)

2020-07-20 05:06:12 792f541
feat(field_theory/tower): tower law (#3355)

2020-07-20 03:39:14 501aeb7
feat(data/quot.lean): add lift_on_beta\_2 (#3456)
This corresponds to `lift_on\_2` in `library/init/data/quot.lean` just as `lift_beta` and `lift_on_beta` correspond to `lift` and `lift_on`. It greatly simplifies quotient proofs but was, surprisingly, missing.

2020-07-20 03:10:32 697488c
feat(tactic/unfold_cases): add unfold_cases tactic (#3396)

2020-07-20 00:16:06 2975f93
chore(tactic/interactive): move non-monadic part of `clean` to `expr.clean` (#3461)

2020-07-20 00:16:04 db18144
chore(order/bounded_lattice): add `is_compl.inf_left_eq_bot_iff` etc (#3460)

2020-07-19 21:18:59 1bb3d19
refactor(order/filter/basic): add class `filter.ne_bot` (#3454)
This way Lean will f`≠ ⊥` in a few most common cases
(incl. `nhds_ne_bot`, `at_top_ne_bot`) automatically.
Other API changes:
* many lemmas now take `[ne_bot l]` instead of `(hl : l ≠ ⊥)`;
* some lemmas got `'` versions that take an explicit `(hl : ne_bot l)`;
* rename `ultrafilter_unique` to `is_ultrafilter.unique`;
* `cauchy_downwards` is now `cauchy.mono` (instance arg) and `cauchy.mono'` (explicit arg);
* `cauchy_map` is now `cauchy.map`;
* `cauchy_comap` is now `cauchy.comap`;
* `totally_bounded_closure` is now `totally_bounded.closure`;
* `totally_bounded_image` is now `totally_bounded.image`;

2020-07-19 21:18:58 953ab3a
feat(geometry/manifold/charted_space): open subset of a manifold is a manifold (#3442)
An open subset of a charted space is naturally a charted space.  If the charted space has structure groupoid `G` (with `G` closed under restriction), then the open subset does also.
Most of the work is in `topology/local_homeomorph`, where it is proved that a local homeomorphism whose source is `univ` is an open embedding, and conversely.

2020-07-19 16:12:23 bc278b7
fix(tactic/apply_rules): fix stuck metavariable bug (#3451)
`apply_rules` had the same bug `solve_by_elim` used to suffer from: applying a lemma once would fix its arguments, and prevent it from being applied a second time with different arguments.
This essentially ports over the fix from `solve_by_elim`: rather than carrying around a `list expr`, we carry a `list (tactic expr)` and generate on demand.

2020-07-19 15:29:48 9b0435a
fix(tactic/linarith): find correct zero_lt_one (#3455)
Zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/linarith.20and.20ordinal.20file

2020-07-19 14:44:28 47ea2a6
feat(topology, analysis) : add lemmas about `has_neg.neg` (preliminaries for L'Hopital's rule) (#3392)
This PR contains a few lemmas about the `has_neg.neg` function, such as : 
- its limit along `at_top` and `at_bot`
- its limit along `nhds a`, `nhds_within a (Ioi a)` and similar filters
- its differentiability and derivative

2020-07-19 14:13:17 8187551
feat(topology/algebra/continuous_functions): algebra structure over continuous functions (#3383)

2020-07-19 09:29:38 5228d55
feat(linear_algebra/basic): add span_zero (#3306)
`simp` now proves span_zero for both submodules and ideals

2020-07-19 06:24:31 3354476
feat(data/indicator_function): more lemmas (#3424)
Add some lemmas of use when using `set.indicator` to manipulate
functions involved in summations.

2020-07-19 05:43:15 8312419
refactor(data/polynomial): remove has_coe_to_fun, and @[reducible] on monomial (#3420)
I'm going to refactor in stages, trying to clean up some of the cruftier aspects of `data/polynomial/*`.
This PR:
1. removes the `has_coe_to_fun` on polynomial

2020-07-19 04:53:42 eca55c9
feat(category_theory/equivalence): injectivity simp lemmas for equivalences (#3437)

2020-07-19 04:53:40 eb68f4c
feat (linear_algebra/matrix): make diag and trace compatible with semirings (#3433)
changes ring and related instances to semiring etc. in requirements for matrix.diag and matrix.trace

2020-07-19 04:53:38 e6bfe18
feat(topology/algebra/module): pi and proj for CLM (#3430)

2020-07-19 03:42:37 f83cf57
feat(data/equiv/mul_add): minor lemmas (#3447)

2020-07-19 03:42:35 61bd966
feat(data/list/basic): add concat lemmas (#3445)
The first two are taken after the `head_eq_of_cons_eq` and `tail_eq_of_cons_eq` lemmas further up in the file.
The third, `reverse_concat`, is like `reverse_cons'` but with the `::` and `concat` swapped.

2020-07-19 03:15:24 91ca927
feat(geometry/manifold/local_invariant_properties):  local structomorphism is `local_invariant_prop` (#3434)
For a groupoid `G`, define the property of being a local structomorphism; prove that if `G` is closed under restriction then this property satisfies `local_invariant_prop` (i.e., is local and `G`-invariant).

2020-07-18 16:49:37 4760a33
feat(algebra/polynomial, data/polynomial): lemmas about monic polynomials (#3402)

2020-07-18 16:19:16 37cf166
feat(data/complex/exponential): added @[mono] tag to exp_le_exp and exp_lt_exp (#3318)
added @[mono] tag to exp_le_exp and exp_lt_exp.

2020-07-18 12:28:11 e3e0aa0
chore(linear_algebra/direct_sum_module): add dosctrings (#3418)

2020-07-18 11:26:57 21a1683
feat(data/finsupp): sums over on_finset (#3427)
There aren't many lemmas about `finsupp.on_finset`.  Add one that's
useful for manipulating sums over `on_finset`.

2020-07-18 11:26:55 4767b30
feat(algebra/big_operators): more general prod_insert_one (#3426)
I found I had a use for a slightly more general version of
`prod_insert_one` / `sum_insert_zero`.  Add that version and use it in
the proof of `prod_insert_one`.

2020-07-18 10:34:10 f81568a
feat(group_theory/semidirect_product): mk_eq_inl_mul_inr and hom_ext (#3408)

2020-07-18 09:27:48 907147a
feat(linear_algebra/matrix): define equivalences for reindexing matrices with equivalent types (#3409)

2020-07-18 06:56:08 06823d6
chore(*): add copyright header, cleanup imports (#3440)
Fixes
1. a missing copyright header
2. moves `tactic.obviously` into the imports of `tactic.basic`, so everyone has `tidy` and `obviously` available.
3. removes a few redundant imports

2020-07-17 14:49:16 9616f44
feat(algebra/ordered_group): decidable_linear_order for multiplicative and additive (#3429)

2020-07-17 14:49:14 3acf220
feat(group_theory/semidirect_product): inl_aut_inv (#3410)

2020-07-17 13:47:53 8999625
chore(*): more import reduction (#3421)
Another import reduction PR. (This is by hand, not just removing transitive imports.)
Mostly this one is from staring at `leanproject import-graph --to data.polynomial.basic` and wondering about weird edges in the graph.

2020-07-17 12:38:22 207a1d4
feat(data/finset/basic): finset of empty type (#3425)
In a proof working by cases for whether a type is nonempty, I found I
had a use for the result that a `finset` of an empty type is empty.

2020-07-17 09:26:56 4a6b716
fix(tactic/nlinarith): stop nlinarith failing in the presence of squares when there is no order (#3417)
As reported by Heather Macbeth at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/app_builder_exception.20in.20.60nlinarith.60/near/204138256

2020-07-17 07:23:09 7d31f77
refactor(measure_theory/*): big refactor (#3373)
Big refactor of integrals, fixes #3084 
Make `integral (f : α → E) (μ : measure α)` the main definition, and use `notation` for other integrals
(over a set and/or w.r.t. the canonical measure `volume`).

2020-07-17 05:45:27 819bd86
feat(tactic/squeeze_*): add `squeeze_dsimp` (#3386)

2020-07-17 03:52:34 9d74f9b
chore(data/polynomial): reduce imports (#3419)
Now that @jalex-stark has split up `data.polynomial` into submodules, this PR minimises imports.

2020-07-17 00:03:26 f1b687c
feat (order/order_iso): lemmas about order_isos on lattices (#3397)
shows that `order_embedding`s and `order_iso`s respect `lattice` operations

2020-07-16 19:13:26 33d45bf
chore(data/polynomial): break up behemoth file (#3407)
Polynomial refactor
The goal is to split `data/polynomial.lean` into several self-contained files in the same place. For the time being, the new place for all these files is `data/polynomial/`.
Future PRs may simplify proofs, remove duplicate lemmas, and move files out of the `data` directory.

2020-07-16 18:00:07 6fd4f8f
feat(meta/expr): add tactic_format instance for declaration (#3390)
This allows you to `trace d` where `d : declaration`. Useful for debugging metaprograms.

2020-07-16 14:24:27 25be04a
feat(data/nat/digits): add lemmas about digits (#3406)
Added `lt_base_pow_length_digits`, `of_digits_lt_base_pow_length`, `of_digits_append` and `of_digits_digits_append_digits`

2020-07-16 12:55:24 a8c10e1
chore(topology/algebra/ordered): rename `lim*_eq_of_tendsto` to `tendsto.lim*_eq` (#3415)
Also add `tendsto_of_le_liminf_of_limsup_le`

2020-07-16 07:53:56 1311eb2
feat(tactic/obviously): improve error reporting (#3412)
If `obviously` (used for auto_params) fails, it now prints a more useful message than "chain tactic made no progress"
If the goal presented to obviously contains `sorry`, it just uses `sorry` to discard it.

2020-07-16 06:45:37 9ca3ce6
chore(data/opposite): pp_nodot on op and unop (#3413)
Since it's not possible to write `X.op`, its extremely unhelpful for the pretty printer to output this.

2020-07-15 23:05:39 c1a5ae9
chore(order/directed): use implicit args in `iff`s (#3411)

2020-07-15 16:50:18 5fe67b7
feat(measure_theory): preliminaries for Haar measure (#3195)
Move properties about lattice operations on encodable types to a new file. These are generalized from lemmas in the measure theory folder, for lattice operations and not just for `ennreal`. Also move them to the `encodable` namespace.
Rename `outer_measure.Union_aux` to `encodable.Union_decode2`.
Generalize some properties for outer measures to arbitrary complete lattices. This is useful for operations that behave like outer measures on a subset of `set α`.

2020-07-15 13:56:45 5f5d641
feat(algebra/ordered_group): instances for additive/multiplicative (#3405)

2020-07-15 11:42:20 a41a307
refactor(topology/algebra/infinite_sum): review (#3371)
## Rename
- `has_sum_unique` → `has_sum.unique`;
- `summable.summable_comp_of_injective` → `summable.comp_injective`;
- `has_sum_iff_tendsto_nat_of_summable` → `summable.has_sum_iff_tendsto_nat`;
- `tsum_eq_has_sum` → `has_sum.tsum_eq`;
- `support_comp` → `support_comp_subset`, delete `support_comp'`;
## Change arguments
- `tsum_eq_tsum_of_ne_zero_bij`, `has_sum_iff_has_sum_of_ne_zero_bij`: use functions from `support` instead of `Π x, f x ≠ 0 → β`;
## Add
- `indicator_compl_add_self_apply`, `indicator_compl_add_self`;
- `indicator_self_add_compl_apply`, `indicator_self_add_compl`;
- `support_subset_iff`, `support_subset_iff'`;
- `support_subset_comp`;
- `support_prod_mk`;
- `embedding.coe_subtype`;

2020-07-15 09:51:42 503a40a
feat(logic/basic) forall_imp (#3391)
Added a missing lemma, which is the one-way implication version of `forall_congr`.

2020-07-15 05:11:12 51a75ff
feat(category_theory/pullback): make the is_limit helper lemmas more ergonomic (#3398)

2020-07-15 00:57:03 8495f76
feat(geometry/manifold/times_cont_mdiff): smooth functions between manifolds (#3387)
We define smooth functions between smooth manifolds, and prove their basic properties (including the facts that a composition of smooth functions is smooth, and that the tangent map of a smooth map is smooth).
To avoid reproving always the same stuff in manifolds, we build a general theory of local invariant properties in the model space (i.e., properties which are local, and invariant under the structure groupoids) and show that the lift of such properties to charted spaces automatically inherit all the good behavior of the original property. We apply this general machinery to prove most basic properties of smooth functions between manifolds.

2020-07-14 16:40:34 708e481
chore(data/set/basic): simp attribute on set.image_subset_iff (#3394)
see discussion here with @sgouezel :
https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.233387.3A.20smooth.20functions.20on.20manifolds/near/203751071

2020-07-14 15:06:30 6c1ae3b
chore(category_theory/natural_isomorphism): move lemmas to correct namespace, add simp lemma (#3401)

2020-07-14 15:06:28 f7825bf
feat(algebra/polynomial): big_operators lemmas for polynomials (#3378)
This starts a new folder algebra/polynomial. As we refactor data/polynomial.lean, much of that content should land in this folder.

2020-07-14 14:42:05 bcf61df
feat(data/qpf): uniformity iff preservation of supp (#3388)

2020-07-14 14:05:54 02f2f94
refactor(category_theory/finite_limits): missing piece of #3320 (#3400)
A recent PR #3320 did some refactoring of special shapes of limits. It seems I forgot to include `wide_pullbacks` in that refactor, so I've done that here.

2020-07-14 11:42:20 a0846da
chore(category_theory/limits/over): split a slow file (#3399)
This was previously the last file to finish compiling when compiling `category_theory/`. This PR splits it into some smaller pieces which can compile in parallel (and some pieces now come earlier in the import hierarchy).
No change to content.

2020-07-14 11:42:18 0fff477
feat(analysis/normed_space): complex Hahn-Banach theorem (#3286)
This proves the complex Hahn-Banach theorem by reducing it to the real version.
The corollaries from #3021 should be generalized as well at some point.

2020-07-14 11:05:58 5f01b54
feat(category_theory/kernels): kernel_iso_of_eq (#3372)
This provides two useful isomorphisms when working with abstract (co)kernels:
```
def kernel_zero_iso_source [has_kernel (0 : X ⟶ Y)] : kernel (0 : X ⟶ Y) ≅ X :=
def kernel_iso_of_eq {f g : X ⟶ Y} [has_kernel f] [has_kernel g] (h : f = g) : kernel f ≅ kernel g :=
```
and some associated simp lemmas.

2020-07-14 09:01:17 58dde5b
chore(*): generalize tensor product to semirings (#3389)

2020-07-14 01:25:26 0410946
chore(linear_algebra/nonsingular_inverse): swap update_row/column names (#3393)
The names for `update_row` and `update_column` did not correspond to their definitions. Doing a global swap of the names keep all the proofs valid and makes the semantics match.

2020-07-13 20:57:57 32c75d0
feat(linear_algebra/affine_space): more lemmas on directions of affine subspaces (#3377)
Add more lemmas on directions of affine subspaces, motivated by uses
for Euclidean geometry.

2020-07-13 20:02:35 1132237
feat(ring_theory/ideal_over): lemmas for nonzero ideals lying over nonzero ideals (#3385)
Let `f` be a ring homomorphism from `R` to `S` and `I` be an ideal in `S`. To show that `I.comap f` is not the zero ideal, we can show `I` contains a non-zero root of some non-zero polynomial `p : polynomial R`. As a corollary, if `S` is algebraic over `R` (e.g. the integral closure of `R`), nonzero ideals in `S` lie over nonzero ideals in `R`.
I created a new file because `integral_closure.comap_ne_bot` depends on `comap_ne_bot_of_algebraic_mem`, but `ring_theory/algebraic.lean` imports `ring_theory/integral_closure.lean` and I didn't see any obvious join in the dependency graph where they both belonged.

2020-07-13 19:35:16 45477c8
feat(analysis/normed_space/real_inner_product): orthogonal subspaces (#3369)
Define the subspace of vectors orthogonal to a given subspace and
prove some basic properties of it, building on the existing results
about minimizers.  This is in preparation for doing similar things in
Euclidean geometry (working with the affine subspace through a given
point and orthogonal to a given affine subspace, for example).

2020-07-13 19:01:01 2ae7ad8
feat(functor): definition multivariate functors (#3360)
One part of #3317

2020-07-13 12:37:11 f034899
feat(data/equiv/mul_add): conj as a mul_aut (#3367)

2020-07-13 09:46:22 e26b459
feat(data/polynomial): some lemmas about eval2 and algebra_map (#3382)

2020-07-13 08:17:18 792faae
chore(data/polynomial): missing a simp attribute (#3381)

2020-07-13 08:17:16 afa534c
chore(tactic/show_term): use Try this: (#3374)

2020-07-12 23:29:02 eb851ae
chore(data/nat/prime): @[pp_nodot] nat.prime (#3379)

2020-07-12 10:32:15 a8d6bdf
feat(algebra/category/AddCommGroup): has_image_maps (#3366)

2020-07-12 09:02:34 fa6c45a
feat(data/polynomial): simp lemmas for bit0 / bit1 (#3376)
Add lemmas on polynomials and bit0/bit1 (as suggested [here](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Eval.20of.20constant.20polynomial))

2020-07-12 07:43:26 4e603f4
feat(geometry/manifold/charted_space):  typeclass `closed_under_restriction` for structure groupoids (#3347)
* Define a typeclass `closed_under_restriction` for structure groupoids.
* Prove that it is equivalent to requiring that the structure groupoid contain all local homeomorphisms equivalent to the restriction of the identity to an open subset.
* Verify that `continuous_groupoid` and `times_cont_diff_groupoid` satisfy `closed_under_restriction`.  
* Show that a charted space defined by a single chart is `has_groupoid` for any structure groupoid satisfying `closed_under_restriction`.
[Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Restriction.20in.20structure.20groupoid)

2020-07-12 05:07:52 0e1c2bc
feat(algebra/add_torsor): more cancellation lemmas (#3368)
Add more cancellation lemmas for `vsub`, similar to lemmas already
present for `vadd`.

2020-07-12 03:42:43 b047396
feat(data/set/finite): add a version of `prod_preimage` for `inj_on` (#3342)
* rename `finset.prod_preimage` to `finset.prod_preimage_of_bij`;
* new `prod_preimage` assumes `∀ x ∈ s, x ∉ range f, g x = 1`;
* rename `finset.image_preimage` to `finset.image_preimage_of_bij`;
* new `finset.image_preimage` says
  `image f (preimage s hf) = s.filter (λ x, x ∈ set.range f)`;
* change the order of implicit arguments in the definition of `set.inj_on`;
* add `prod_filter_of_ne`;
* use `coe` instead of `subtype.val` in `prod_attach`;
* add `finset.image_subset_iff`, `finset.image_subset_iff_subset_preimage`,
  `finset.map_subset_iff_subset_preimage`.

2020-07-12 00:42:49 298caa0
chore(scripts): update nolints.txt (#3370)
I am happy to remove some nolints for you!

2020-07-11 10:11:11 d7ac180
feat(data/fintype/basic): set.to_finset_empty (#3361)
Add set.to_finset_empty, analogously to set.to_finset_univ.

2020-07-11 10:11:09 34d3fe1
chore(category_theory/comma): split into three files (#3358)
Just reorganisation.

2020-07-11 08:43:40 f742a3d
refactor(tactic/push_neg): simp ¬ (p ∧ q) better (#3362)
This simplifies `¬ (p ∧ q)` to `(p → ¬ q)` instead of `¬ p ∨ ¬ q`. This has better behavior when going between `\forall x, P -> Q` and `\exists x, P /\ Q'` where `Q` and `Q'` are opposite.

2020-07-11 08:43:39 36a25d9
feat(algebra/category/*): get rid of the local reducible hack (#3354)
I thought I did this back in April, but apparently never made the PR.
We currently use a strange hack when setting up concrete categories, making them locally reducible. There's a library note about this, which ends:
```
TODO: Probably @[derive] should be able to create instances of the	
required form (without `id`), and then we could use that instead of	
this obscure `local attribute [reducible]` method.
```
This PR makes the small change required to `delta_instance` to make this happen, and then stops using the hack in setting up concrete categories (and deletes the library note explaining this hack).

2020-07-11 07:58:56 75b9cfa
feat(category/has_shift): missing simp lemmas (#3365)

2020-07-11 07:58:54 f669a78
chore(category_theory/functor): explain how to type 𝟭 (#3364)

2020-07-11 06:47:13 574dac5
feat(tactic/interval_cases): add `with h` option (#3353)
closes #2881

2020-07-11 00:41:45 5ddbdc1
chore(scripts): update nolints.txt (#3363)
I am happy to remove some nolints for you!

2020-07-10 19:01:46 1aff3af
feat(interactive_expr): bigger accomplishment (#3359)
Lean is difficult, we need more incentives.

2020-07-10 17:35:22 960fc8e
feat(data/univariate/qpf): compositional data type framework for (co)inductive types (#3325)
Define univariate QPFs (quotients of polynomial functors).  This is the first part of #3317.

2020-07-10 12:28:46 d1e63f3
chore(category_theory/limits): remove an unnecessary import (#3357)

2020-07-10 12:28:40 699c915
feat(number_theory): pythagorean triples (#3200)
The classification of pythagorean triples (one of the "100 theorems")

2020-07-10 11:15:29 e52108d
chore(data/int/basic): move content requiring advanced imports (#3334)
`data.int.basic` had grown to require substantial imports from `algebra.*`. This PR moves out the end of this file into separate files. As a consequence it's then possible to separate out `data.multiset.basic` into some further pieces.

2020-07-10 10:35:29 a348944
chore(topology): rename compact to is_compact (#3356)

2020-07-10 07:09:28 79bb8b7
feat(linear_algebra/cayley_hamilton): the Cayley-Hamilton theorem (#3276)
The Cayley-Hamilton theorem, following the proof at http://drorbn.net/AcademicPensieve/2015-12/CayleyHamilton.pdf.

2020-07-10 06:31:16 66db1ad
refactor(algebra/homology): handle co/homology uniformly (#3316)
A refactor of `algebra/homology` so homology and cohomology are handled uniformly, and factor out a file `image_to_kernel_map.lean` which gains some extra lemmas (which will be useful for talking about exact sequences).

2020-07-10 05:40:16 bcf733f
feat(data/matrix): add matrix.map and supporting lemmas (#3352)
As [requested](https://github.com/leanprover-community/mathlib/pull/3276/files#r452366674).

2020-07-10 04:14:30 8b630df
feat(ring_theory/matrix_algebra): drop commutativity assumption (#3351)
Remove the unnecessary assumption that `A` is commutative in `matrix n n A ≃ₐ[R] (A ⊗[R] matrix n n R)`.
(This didn't cause a problem for Cayley-Hamilton, but @alexjbest and Bassem Safieldeen [realised it's not necessary](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Tensor.20product.20of.20matrices).)

2020-07-10 04:14:28 c949dd4
chore(logic/embedding): reuse proofs from `data.*` (#3341)
Other changes:
* rename `injective.prod` to `injective.prod_map`;
* add `surjective.prod_map`;
* redefine `sigma.map` without pattern matching;
* rename `sigma_map_injective` to `injective.sigma_map`;
* add `surjective.sigma_map`;
* add `injective.sum_map` and `surjective.sum_map`;
* rename `embedding.prod_congr` to `embedding.prod_map`;
* rename `embedding.sum_congr` to `embedding.sum_map`;
* delete `embedding.sigma_congr_right`, add more
  general `embedding.sigma_map`.

2020-07-10 02:38:09 92d508a
chore(*): import tactic.basic as early as possible, and reduce imports (#3333)
As discussed on [zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/import.20refactor.20and.20library_search), #3235 had the unfortunate effect of making `library_search` and `#where` and various other things unavailable in many places in mathlib.
This PR makes an effort to import `tactic.basic` as early as possible, while otherwise reducing unnecessary imports. 
1. import `tactic.basic` "as early as possible" (i.e. in any file that `tactic.basic` doesn't depend on, and which imports any tactic strictly between `tactic.core` and `tactic.basic`, just `import tactic.basic` itself
2. add `tactic.finish`, `tactic.tauto` and `tactic.norm_cast` to tactic.basic (doesn't requires adding any dependencies)
3. delete various unnecessary imports

2020-07-10 00:38:39 997025d
chore(scripts): update nolints.txt (#3350)
I am happy to remove some nolints for you!

2020-07-09 22:44:21 270e3c9
chore(data/fintype/basic): add `finset.order_top` and `finset.bounded_distrib_lattice` (#3345)

2020-07-09 22:44:20 f5fa614
chore(*): some monotonicity lemmas (#3344)

2020-07-09 21:17:53 d6e9f97
feat(topology/basic): yet another mem_closure (#3348)

2020-07-09 21:17:51 ac62213
chore(order/filter/at_top_bot): in `order_top` `at_top = pure ⊤` (#3346)

2020-07-09 21:17:48 4a63f3f
feat(data/indicator_function): add `indicator_range_comp` (#3343)
Add
* `comp_eq_of_eq_on_range`;
* `piecewise_eq_on`;
* `piecewise_eq_on_compl`;
* `piecewise_compl`;
* `piecewise_range_comp`;
* `indicator_range_comp`.

2020-07-09 16:34:14 d6ecb44
feat(topology/basic): closure in term of subtypes (#3339)

2020-07-09 15:24:02 593a4c8
fix(tactic/norm_cast): remove bad norm_cast lemma (#3340)
This was identified as a move_cast lemma, which meant it was rewriting to the LHS which it couldn't reduce. It's better to let the conditional rewriting handle nat subtraction -- if the right inequality is in the context there's no need to go to `int.sub_nat_nat`.

2020-07-09 14:50:06 33ca9f1
doc(category_theory/terminal): add doc-strings (#3338)
Just adding some doc-strings.

2020-07-09 13:55:03 9d47b28
feat(data): Mark all `sqrt`s as `@[pp_nodot]` (#3337)

2020-07-09 05:00:10-07:00 e4ecf14
I'm just another maintainer

2020-07-09 10:43:05 be2e42f
chore(ring_theory/algebraic): speedup slow proof (#3336)

2020-07-09 06:11:02 c06f500
feat(logic/basic): add eq_iff_true_of_subsingleton (#3308)
I'm surprised we didn't have this already.
```lean
example (x y : unit) : x = y := by simp
```

2020-07-09 03:35:05 95cc1b1
refactor(topology/dense_embedding): simplify proof (#3329)
Using filter bases, we can give a cleaner proof of continuity of extension by continuity. Also switch to use the "new" `continuous_at` in the statement.

2020-07-09 03:35:03 d5cfa87
fix(tactic/lint/type_classes): add missing unfreeze_local_instances (#3328)

2020-07-09 03:06:58 b535b0a
fix(tactic/default): add transport, equiv_rw (#3330)
Also added a tactic doc entry for `transport`.

2020-07-09 00:41:30 65dcf4d
chore(scripts): update nolints.txt (#3331)
I am happy to remove some nolints for you!

2020-07-08 20:57:45 782013d
fix(tactic/monotonicity): support monotone in mono (#3310)
This PR allow the `mono` tactic to use lemmas stated using `monotone`.
Mostly authored by Simon Hudon

2020-07-08 17:40:17 19225c3
chore(*): update to 3.17.1 (#3327)

2020-07-08 14:31:06 27f622e
chore(data/fintype/basic): split, and reduce imports (#3319)
Following on from #3256 and #3235, this slices a little out of `data.fintype.basic`, and reduces imports, mostly in the vicinity of `data.fintype.basic`.

2020-07-08 14:31:04 f90fcc9
chore(*): use is_algebra_tower instead of algebra.comap and generalize some constructions to semirings (#3299)
`algebra.comap` is now reserved to the **creation** of new algebra instances. For assumptions of theorems / constructions, `is_algebra_tower` is the new way to do it. For example:
```lean
variables [algebra K L] [algebra L A]
lemma is_algebraic_trans (L_alg : is_algebraic K L) (A_alg : is_algebraic L A) :
  is_algebraic K (comap K L A) :=
```
is now written as:
```lean
variables [algebra K L] [algebra L A] [algebra K A] [is_algebra_tower K L A]
lemma is_algebraic_trans (L_alg : is_algebraic K L) (A_alg : is_algebraic L A) :
  is_algebraic K A :=
```

2020-07-08 14:31:02 ba8af8c
feat(ring_theory/polynomial_algebra): polynomial A ≃ₐ[R] (A ⊗[R] polynomial R) (#3275)
This is a formal nonsense preliminary to the Cayley-Hamilton theorem, which comes in the next PR.
We produce the algebra isomorphism `polynomial A ≃ₐ[R] (A ⊗[R] polynomial R)`, and as a consequence also the algebra isomorphism
```
matrix n n (polynomial R) ≃ₐ[R] polynomial (matrix n n R)
```
which is characterized by
```
coeff (matrix_polynomial_equiv_polynomial_matrix m) k i j = coeff (m i j) k
```

2020-07-08 13:22:00 8f6090c
feat(algebra/ordered_field): missing lemma (#3324)

2020-07-08 11:56:25 97853b9
doc(tactic/lean_core_docs): remove "hypothesis management" tag (#3323)

2020-07-08 10:26:52 a3e21a8
feat(category_theory/zero): lemmas about zero objects and zero morphisms, and improve docs (#3315)

2020-07-08 10:26:50 fbb49cb
refactor(*): place map_map in the functor namespace (#3309)
Renames `_root_.map_map` to `functor.map_map` and `filter.comap_comap_comp` to `filter.comap_comap` (which is consistent with `filter.map_map`).

2020-07-08 09:01:29 afae2c4
doc(tactic/localized): unnecessary escape characters (#3322)
This is probably left over from when it was a string literal instead of a doc string.

2020-07-08 08:25:47 18246ac
refactor(category_theory/finite_limits): reorganise import hierarchy (#3320)
Previously, all of the "special shapes" that happened to be finite imported `category_theory.limits.shapes.finite_limits`. Now it's the other way round, which I think ends up being cleaner.
This also results in some significant reductions to the dependency graph (e.g. talking about homology of complexes no longer requires compiling `data.fintype.basic` and all its antecedents).
No actual content, just moving content around.

2020-07-08 07:12:45 13eea4c
chore(category_theory/images): cleanup (#3314)
Just some cleanup, and adding two easy lemmas.

2020-07-08 07:12:43 eb271b2
feat(data/int/basic): some lemmas (#3313)
A few small lemmas about `to_nat` that I wanted while playing with exact sequences.

2020-07-08 05:45:29 ff1aea5
feat(data/equiv): α × α ≃ α for [subsingleton α] (#3312)

2020-07-08 00:37:50 e987f62
chore(scripts): update nolints.txt (#3311)
I am happy to remove some nolints for you!

2020-07-07 19:51:20 23f449b
feat(topology/metric_space/basic): add closed_ball_mem_nhds (#3305)
I found this lemma handy when converting between the epsilon-N definition of convergence and the filter definition

2020-07-07 17:45:54 35940dd
feat(linear_algebra/finite_dimensional): add dim_sup_add_dim_inf_eq (#3304)
Adding a finite-dimensional version of dim(W+X)+dim(W \cap X)=dim(W)+dim(X)

2020-07-07 16:39:23 ea10944
feat(data/list/defs): list.singleton_append and list.bind_singleton (#3298)
I found these useful when working with palindromes and Fibonacci words respectively.
While `bind_singleton` is available as a monad law, I find the specialized version more convenient.

2020-07-07 15:15:11 11ba687
chore(algebra/big_operators): use proper `*_with_zero` class in `prod_eq_zero(_iff)` (#3303)
Also add a missing instance `comm_semiring → comm_monoid_with_zero`.

2020-07-07 09:59:21 12c2acb
feat(algebra/continued_fractions): add first set of approximation lemmas (#3218)

2020-07-07 09:25:12 08ffbbb
feat(analysis/normed_space/operator_norm): normed algebra of continuous linear maps (#3282)
Given a normed space `E`, its continuous linear endomorphisms form a normed ring, and a normed algebra if `E` is nonzero.  Moreover, the units of this ring are precisely the continuous linear equivalences.

2020-07-07 04:39:03 095445e
refactor(order/*): make `data.set.basic` import `order.bounded_lattice` (#3285)
I have two goals:
* make it possible to refactor `set` to use `lattice` operations;
* make `submonoid.basic` independent of `data.nat.basic`.

2020-07-07 00:37:33 d62e71d
chore(scripts): update nolints.txt (#3302)
I am happy to remove some nolints for you!

2020-07-06 20:20:45 f548db4
feat(linear_algebra/affine_space): lattice structure on affine subspaces (#3288)
Define a `complete_lattice` instance on affine subspaces of an affine
space, and prove a few basic lemmas relating to it.  (There are plenty
more things that could be proved about it, that I think can reasonably
be added later.)

2020-07-06 19:04:56 edd29d0
chore(ring_theory/power_series): weaken assumptions for nontrivial (#3301)

2020-07-06 17:34:23 c0926f0
chore(*): update to lean 3.17.0 (#3300)

2020-07-06 16:58:21 f06e4e0
feat(data/sym2) Defining the symmetric square (unordered pairs) (#3264)
This adds a type for the symmetric square of a type, which is the quotient of the cartesian square by permutations.  These are also known as unordered pairs.
Additionally, this provides some definitions and lemmas for equalities, functoriality, membership, and a relationship between symmetric relations and terms of the symmetric square.
I preferred `sym2` over `unordered_pairs` out of a combination of familiarity and brevity, but I could go either way for naming.

2020-07-06 15:34:25 e3a1a61
feat(tactic/interactive): identity tactic (#3295)
A surprisingly missing tactic combinator.

2020-07-06 14:12:29 33b6cba
refactor(*): replace nonzero with nontrivial (#3296)
Introduce a typeclass `nontrivial` saying that a type has at least two distinct elements, and use it instead of the predicate `nonzero` requiring that `0` is different from `1`. These two predicates are equivalent in monoids with zero, which cover essentially all relevant ring-like situations, but `nontrivial` applies also to say that a vector space is nontrivial, for instance.
Along the way, fix some quirks in the alebraic hierarchy (replacing fields `zero_ne_one` in many structures with extending `nontrivial`, for instance). Also, `quadratic_reciprocity` was timing out. I guess it was just below the threshold before the refactoring, and some of the changes related to typeclass inference made it just above after the change. So, I squeeze_simped it, going from 47s to 1.7s on my computer.
Zulip discussion at https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/nonsingleton/near/202865366

2020-07-06 13:27:20 2c9d9bd
chore(scripts/nolints_summary.sh): list number of nolints per file

2020-07-06 07:16:47 5ff099b
feat(topology): preliminaries for Haar measure (#3194)
Define group operations on sets
Define compacts, in a similar way to opens
Prove some "separation" properties for topological groups
Rename `continuous.comap` to `opens.comap` (so that we can have comaps for other kinds of sets in topological spaces)
Rename `inf_val` to `inf_def` (unused)
Move some definitions from `topology.opens` to `topology.compacts`

2020-07-06 05:41:46 2e140f1
refactor(algebra/inj_surj): more lemmas, move to files, rename (#3290)
* use names `function.?jective.monoid` etc;
* move definitions to different files;
* add versions for `semimodules` and various `*_with_zero`;
* add `funciton.surjective.forall` etc.

2020-07-06 04:31:33 ffa504c
fix(finset/lattice): undo removal of bUnion_preimage_singleton (#3293)
In #3189 I removed it, which was a mistake.

2020-07-06 00:39:48 e1f6ed2
chore(scripts): update nolints.txt (#3294)
I am happy to remove some nolints for you!

2020-07-05 10:40:51 0cd500e
doc(tactic/explode): expand doc string (#3271)
Explanation copied from @digama0's Zulip message [here](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.23explode.20error/near/202396813). Also removed a redundant function and added some type ascriptions.

2020-07-05 10:13:00 293287d
chore(category_theory/over/limits): change instance to def (#3281)
Having this as an instance causes confusion since it's a different terminal object to the one inferred by the other limit constructions in the file.

2020-07-05 09:46:41 f39e0d7
chore(algebra/category): use preadditivity for biproducts (#3280)
We can avoid some scary calculations thanks to abstract nonsense.

2020-07-04 19:11:32 023d4f7
feat(ring_theory/localization): order embedding of ideals, local ring instance (#3287)

2020-07-04 15:02:36 08e1adc
feat(data/pnat): basic pnat facts needed for perfect numbers (3094) (#3274)
define pnat.coprime
add some basic lemmas pnats, mostly about coprime, gcd
designate some existing lemmas with @[simp]

2020-07-04 08:32:44 0d249d7
feat(analysis/normed_space/*): group of units of a normed ring is open (#3210)
In a complete normed ring, the group of units is an open subset of the ring ([Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Inversion.20is.20analytic))
Supporting material:
* `topology.metric_space.basic`, `analysis.normed_space.basic`, `normed_space.operator_norm`: some lemmas about limits and infinite sums in metric and normed spaces
* `analysis.normed_space.basic`, `normed_space.operator_norm`: left- and right- multiplication in a normed ring (algebra) is a bounded homomorphism (linear map); the algebra/linear-map versions are not needed for the main result but included for completeness
* `analysis.normed_space.basic`: a normed algebra is `nonzero` (not needed for the main result) ([Zulip](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Dangerous.20instance))
* `algebra.group_with_zero`: the `subsingleton_or_nonzero` dichotomy for monoids with zero ([Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/zero.20ring/near/202202187)) (written by @jcommelin )
* `analysis.specific_limits`: results on geometric series in a complete `normed_ring`; relies on
* `algebra.geom_sum`: "left" variants of some existing "right" lemmas on finite geometric series; relies on
* `algebra.opposites`, `algebra.group_power`, `algebra.big_operators`: lemmas about the opposite ring ([Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Finite.20geometric.20series))

2020-07-04 06:17:21 c2886d3
fix(tactic/default): import tactic.basic (#3284)
Some basic tactics and commands (e.g. `#explode`) were not available even if `import tactic` was used. I added `import tactic.basic` to `tactic/default.lean` to remedy this.

2020-07-04 00:39:31 2a43e26
chore(scripts): update nolints.txt (#3283)
I am happy to remove some nolints for you!

2020-07-03 23:00:44 742dc88
feat(ring_theory/polynomial): rational root theorem and integral root theorem (#3241)
Prove the rational root theorem for a unique factorization domain `A`: Let `K` be the field of fractions of `A` and `p` a polynomial over `A`. If `x : K` is a root of `p`, then the numerator of `x` divides the constant coefficient and the denominator of `x` divides the leading coefficient. (This required defining the numerator and denominator.) As a corollary we have the integral root theorem: if `p` is monic, then its roots in `K` are in fact elements of `A`. As a second corollary, the integral closure of `A` in `K` is `A` itself.

2020-07-03 22:00:28 c4bf9e4
chore(algebra/ordered_group): deduplicate (#3279)
For historical reasons we have some lemmas duplicated for `ordered_comm_monoid`
and `ordered_cancel_comm_monoid`. This PR merges some duplicates.

2020-07-03 22:00:26 f1637e5
feat(field_theory/splitting_field): definition of splitting field (#3272)

2020-07-03 20:42:56 48dea2f
feat(algebra/pointwise): make instances global (#3240)
add image2 and image3, the images of binary and ternary functions
cleanup in algebra/pointwise
make many variables implicit
make many names shorter
add some lemmas
add more simp lemmas
add type set_semiring as alias for set, with semiring instance using union as "addition"

2020-07-03 15:04:51 f9f0ca6
feat(analysic/calculus/times_cont_diff): add times_cont_diff_within_at (#3262)
I want to refactor manifolds, defining local properties in the model space and showing that they automatically inherit nice behavior in manifolds. 
In this PR, we modify a little bit the definition of smooth functions in vector spaces by introducing a predicate `times_cont_diff_within_at` (just like we already have `continuous_within_at` or `differentiable_within_at`) and using it in all definitions and proofs. This will be the basis of the locality argument in manifolds.

2020-07-03 09:21:25 53c1531
feat(geometry/manifold/smooth_manifold_with_corners): product of smooth manifolds with corners (#3250)

2020-07-03 08:38:36 e236160
chore(order/filter/basic): implicit arg in `eventually_of_forall` (#3277)
Make `l : filter α` argument of `eventually_of_forall` implicit
because everywhere in `mathlib` it was used as `eventually_of_forall _`.

2020-07-03 07:27:21 56ed551
fix(algebra/group_with_zero): fix left/right (#3278)
Rename `mul_inv_cancel_left'`/`mul_inv_cancel_right'` to match
`mul_inv_cancel_left`/`mul_inv_cancel_right`.

2020-07-03 04:28:12 303740d
feat(category_theory/abelian): every abelian category is preadditive  (#3247)

2020-07-03 00:58:35 9b086e1
chore(*): reduce imports (#3235)
The RFC pull request simply removes some `import tactic` or `import tactic.basic`, and then makes the necessary changes in later files to import things as needed.
I'm not sure if it's useful or not

2020-07-03 00:22:34 6a49975
feat(category_theory/limits): fully faithful functors reflect limits and colimits (#3269)
A fully faithful functor reflects limits and colimits

2020-07-02 20:45:17 838dc66
feat(topology/basic): add `eventually_eventually_nhds` (#3266)

2020-07-02 19:38:26 d84c48c
feat(data/real/cardinality): cardinalities of intervals of reals (#3252)
Use the existing result `mk_real` to deduce corresponding results for
all eight kinds of intervals of reals.
It's convenient for this result to add a new lemma to
`data.set.intervals.image_preimage` about the image of an interval
under `inv`.  Just as there are only a few results there about images
of intervals under multiplication rather than a full set, so I just
added the result I needed rather than all the possible variants.  (I
think there are something like 36 reasonable variants of that lemma
that could be stated, for (image or preimage - the same thing in this
case, but still separate statements) x (interval in positive or
negative reals) x (end closer to 0 is 0 (open), nonzero (open) or
nonzero (closed)) x (other end is open, closed or infinite).)

2020-07-02 18:55:47 e4fdc75
refactor(analysis/calculus/*deriv): use eventually_eq in congruence statements (#3261)
Use `eventually_eq` instead of `mem_sets` for congruence lemmas in continuity and differentiability statements.

2020-07-02 18:14:59 237b1ea
feat(analysis/specific_limits): proof of harmonic series diverging and preliminaries (#3233)
This PR is made of two parts : 
- A few new generic lemmas, mostly by @PatrickMassot , in `order/filter/at_top_bot.lean` and `topology/algebra/ordered.lean`
- Definition of the harmonic series, basic lemmas about it, and proof of its divergence, in `analysis/specific_limits.lean`
Zulip : https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/201651652

2020-07-02 13:05:20 8be66ee
fix(library_search): fix a bug with iff lemmas where both sides match (#3270)
Also add a proper failure message for `library_search`, using Mario's text.

2020-07-02 13:05:18 18a80ea
chore(tactic/noncomm_ring): allow simp to fail (#3268)
Fixes #3267.

2020-07-02 10:27:52 dc1d936
feat(data/polynomial): preliminaries for Cayley-Hamilton (#3243)
Many cheerful facts about polynomials!

2020-07-02 00:35:42 cd29ede
chore(scripts): update nolints.txt (#3265)
I am happy to remove some nolints for you!

2020-07-01 23:16:08 9309910
chore(algebra/*): deduplicate `*_with_zero`/`semiring`/`field` (#3259)
All moved/renamed/merged lemmas were generalized to use
`*_with_zero`/`nonzero`/`mul_zero_class` instead of
`(semi)ring`/`division_ring`/`field`.
## Moved to `group_with_zero`
The following lemmas were formulated for
`(semi_)ring`s/`division_ring`s/`field`s. Some of them had strictly
more general “prime” versions for `*_with_zero`. I either moved a
lemma to `algebra/group_with_zero` and adjusted the requirements or
removed the non-prime version and `'` from the name of the prime
version. Sometimes I also made some arguments implicit.
TL;DR: moved to `group_with_zero`, removed `name'` lemma if it was there.
* `is_unit_zero_iff`;
* `not_is_unit_zero`;
* `div_eq_one_iff_eq`;
* `eq_div_iff_mul_eq`;
* `eq_div_of_mul_eq`;
* `eq_one_div_of_mul_eq_one`;
* `eq_one_div_of_mul_eq_one_left`;
* `one_div_one_div`;
* `eq_of_one_div_eq_one_div`;
* `one_div_div`;
* `mul_eq_of_eq_div`;
* `mul_mul_div`;
* `eq_zero_of_zero_eq_one`;
* `eq_inv_of_mul_right_eq_one`;
* `eq_inv_of_mul_left_eq_one`;
* `div_right_comm`;
* `div_div_div_cancel_right`;
* `div_mul_div_cancel`;
## Renamed/merged
* rename `mul_inv''` to `mul_inv'` and merge `mul_inv'` into `mul_inv_rev'`;
* `coe_unit_mul_inv`, `coe_unit_inv_mul`: `units.mul_inv'`, `units.inv_mul'`
* `division_ring.inv_eq_iff`: `inv_eq_iff`;
* `division_ring.inv_inj`: `inv_inj'`;
* `domain.mul_left_inj`: `mul_left_inj'`;
* `domain.mul_right_inj`: `mul_right_inj'`;
* `eq_of_mul_eq_mul_of_nonzero_left` and `eq_of_mul_eq_mul_left`: `mul_left_cancel'`;
* `eq_of_mul_eq_mul_of_nonzero_right` and `eq_of_mul_eq_mul_right`: `mul_right_cancel'`;
* `inv_inj`, `inv_inj'`, `inv_inj''`: `inv_injective`, `inv_inj`, and `inv_inj'`, respectively;
* `mul_inv_cancel_assoc_left`, `mul_inv_cancel_assoc_right`,
  `inv_mul_cancel_assoc_left`, `inv_mul_cancel_assoc_right`:
  `mul_inv_cancel_left'`, `mul_inv_cacnel_right'`,
  `inv_mul_cancel_left'`, `inv_mul_cancel_right'`;
* `ne_zero_and_ne_zero_of_mul_ne_zero` : `ne_zero_and_ne_zero_of_mul`.
* `ne_zero_of_mul_left_eq_one`: `left_ne_zero_of_mul_eq_one`
* `ne_zero_of_mul_ne_zero_left` : `right_ne_zero_of_mul`;
* `ne_zero_of_mul_ne_zero_right` : `left_ne_zero_of_mul`;
* `ne_zero_of_mul_right_eq_one`: `left_ne_zero_of_mul_eq_one`
* `neg_inj` and `neg_inj` renamed to `neg_injective` and `neg_inj`;
* `one_inv_eq`: merged into `inv_one`;
* `unit_ne_zero`: `units.ne_zero`;
* `units.mul_inv'` and `units.inv_mul'`: `units.mul_inv_of_eq` and `units.inv_mul_of_eq`;
* `units.mul_left_eq_zero_iff_eq_zero`,
  `units.mul_right_eq_zero_iff_eq_zero`: `units.mul_left_eq_zero`,
  `units.mul_right_eq_zero`;
## New
* `class cancel_monoid_with_zero`: a `monoid_with_zero` such that
  left/right multiplication by a non-zero element is injective; the
  main instances are `group_with_zero`s and `domain`s;
* `monoid_hom.map_ne_zero`, `monoid_hom.map_eq_zero`,
  `monoid_hom.map_inv'`, `monoid_hom.map_div`, `monoid_hom.injective`:
  lemmas about monoid homomorphisms of two groups with zeros such that
  `f 0 = 0`;
* `mul_eq_zero_of_left`, `mul_eq_zero_of_right`, `ne_zero_of_eq_one`
* `unique_of_zero_eq_one`, `eq_of_zero_eq_one`, `nonzero_psum_unique`,
  `zero_ne_one_or_forall_eq_0`;
* `mul_left_inj'`, `mul_right_inj'`
## Misc changes
* `eq_of_div_eq_one` no more requires `b ≠ 0`;

2020-07-01 18:46:03 1a419a9
feat(data/nat/digits): add digits_lt_base (#3246)

2020-07-01 17:12:55 f00b7c0
chore(*): work on removing deprecated is_X_hom typeclasses (#3258)
It's far from over, but as I was bumping up against issues in `polynomial.lean` and `mv_polynomial.lean`, I'm going to PR this part for now, and then wait to return to it when other PRs affecting `polynomial.lean` have cleared.

2020-07-01 12:12:44 e803c85
feat(field_theory/separable): relating irreducibility and separability (#3198)

2020-07-01 10:05:14 a7cdab5
chore(data/set/basic): simp attribute on mem_range_self (#3260)

2020-07-01 10:05:12 7bd19b3
chore(data/finset, data/multiset): split into smaller files (#3256)
This follows on from #2341, which split the second half of `data.list.basic` into separate files. This now does the same (trying to follow a similar split) for `data.multiset` and `data.finset`.

2020-07-01 10:05:10 8ba7595
feat(category/preadditive): properties of preadditive biproducts (#3245)
### Basic facts about morphisms between biproducts in preadditive categories.
* In any category (with zero morphisms), if `biprod.map f g` is an isomorphism,
  then both `f` and `g` are isomorphisms.
The remaining lemmas hold in any preadditive category.
* If `f` is a morphism `X₁ ⊞ X₂ ⟶ Y₁ ⊞ Y₂` whose `X₁ ⟶ Y₁` entry is an isomorphism,
  then we can construct isomorphisms `L : X₁ ⊞ X₂ ≅ X₁ ⊞ X₂` and `R : Y₁ ⊞ Y₂ ≅ Y₁ ⊞ Y₂`
  so that `L.hom ≫ g ≫ R.hom` is diagonal (with `X₁ ⟶ Y₁` component still `f`),
  via Gaussian elimination.
* As a corollary of the previous two facts,
  if we have an isomorphism `X₁ ⊞ X₂ ≅ Y₁ ⊞ Y₂` whose `X₁ ⟶ Y₁` entry is an isomorphism,
  we can construct an isomorphism `X₂ ≅ Y₂`.
* If `f : W ⊞ X ⟶ Y ⊞ Z` is an isomorphism, either `𝟙 W = 0`,
  or at least one of the component maps `W ⟶ Y` and `W ⟶ Z` is nonzero.
* If `f : ⨁ S ⟶ ⨁ T` is an isomorphism,
  then every column (corresponding to a nonzero summand in the domain)
  has some nonzero matrix entry.
This PR is preliminary to some work on semisimple categories.

2020-07-01 09:03:47 aff951a
chore(algebra/big_operators): don't use omega (#3255)
Postpone importing `omega` a little bit longer.

2020-07-01 07:55:07 e68503a
feat(ring_theory/valuation): definition and basic properties of valuations (#3222)
From the perfectoid project.

2020-07-01 03:39:36 a22cd4d
chore(algebra/group_with_zero): nolint (#3254)
Adding two doc strings to make the file lint-free again. cf. #3253.

2020-07-01 01:31:04 859edfb
chore(scripts): update nolints.txt (#3253)
I am happy to remove some nolints for you!

2020-07-01 00:28:03 89f3bbc
feat(data/matrix): std_basis_matrix (#3244)
The definition of
```
def std_basis_matrix (i : m) (j : n) (a : α) : matrix m n α :=
(λ i' j', if i' = i ∧ j' = j then a else 0)
```
and associated lemmas, and some refactoring of `src/ring_theory/matrix_algebra.lean` to use it.
This is work of @jalex-stark which I'm PR'ing as part of getting Cayley-Hamilton ready.

2020-07-01 00:02:51 a40be98
feat(category_theory/limits/shapes): simp lemmas to decompose pullback_cone.mk.fst (#3249)
Decompose `(pullback_cone.mk _ _ _).fst` into its first component (+symmetrical and dual versions)

2020-06-30 22:34:44 0625691
chore(topology/*): use dot syntax for some lemmas (#3251)
Rename:
* `closure_eq_of_is_closed` to `is_closed.closure_eq`;
* `closed_of_compact` to `compact.is_closed`;
* `bdd_above_of_compact` to `compact.bdd_above`;
* `bdd_below_of_compact` to `compact.bdd_below`.
* `is_complete_of_is_closed` to `is_closed.is_complete`
* `is_closed_of_is_complete` to `is_complete.is_closed`
* `is_closed_iff_nhds` to `is_closed_iff_cluster_pt`
* `closure_subset_iff_subset_of_is_closed` to `is_closed.closure_subset_iff`
Add:
* `closure_closed_ball` (`@[simp]` lemma)
* `is_closed.closure_subset : is_closed s → closure s ⊆ s`

2020-06-30 17:14:16 b391563
feat(algebra/lie_algebra): conjugation transformation for Lie algebras of skew-adjoint endomorphims, matrices (#3229)
The two main results are the lemmas:
 * skew_adjoint_lie_subalgebra_equiv
 * skew_adjoint_matrices_lie_subalgebra_equiv
The latter is expected to be useful when defining the classical Lie algebras
of type B and D.

2020-06-30 16:18:08 ea961f7
chore(ring_theory/polynomial): move `ring_theory.polynomial` to `ring_theory.polynomial.basic` (#3248)
This PR is the intersection of #3223 and #3241, allowing them to be merged in either order.
Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/where.20should.20these.20definitions.20live.3F

2020-06-30 14:58:52 9524dee
feat(topology): real.image_Icc (#3224)
The image of a segment under a real-valued continuous function is a segment.

2020-06-30 12:42:26 1bc6eba
fix(tactic/interactive_expr): show let-values in tactic state widget (#3228)
Fixes the missing let-values in the tactic state widget:
![let_widget](https://user-images.githubusercontent.com/313929/86048315-9d740d80-ba50-11ea-9a8c-09c853687343.png)

2020-06-30 11:46:05 b82ed0c
fix(tactic/apply_fun): beta reduction was too aggressive (#3214)
The beta reduction performed by `apply_fun` was previously too aggressive -- in particular it was unfolding `A * B` to `A.mul B` when `A` and `B` are matrices. 
This fix avoids using `dsimp`, and instead calls `head_beta` separately on the left and right sides of the new hypothesis.

2020-06-30 09:50:40 6d0f40a
chore(topology/algebra/ordered): use `continuous_at`, rename (#3231)
* rename `Sup_mem_of_is_closed` and `Inf_mem_of_is_closed` to
  `is_closed.Sup_mem` and `is_closed.Inf_mem`, similarly with
  `cSup` and `cInf`;
* make `Sup_of_continuous` etc take `continuous_at` instead
  of `continuous`, rename to `Sup_of_continuous_at_of_monotone` etc,
  similarly with `cSup`/`cInf`.

2020-06-30 08:06:04 a143c38
refactor(linear_algebra/affine_space): allow empty affine subspaces (#3219)
When definitions of affine spaces and subspaces were added in #2816,
there was some discussion of whether an affine subspace should be
allowed to be empty.
After further consideration of what lemmas need to be added to fill
out the interface for affine subspaces, I've concluded that it does
indeed make sense to allow empty affine subspaces, with `nonempty`
hypotheses then added for those results that need them, to avoid
artificial `nonempty` hypotheses for other results on affine spans and
intersections of affine subspaces that don't depend on any way on
affine subspaces being nonempty and can be more cleanly stated if they
can be empty.
Thus, change the definition to allow affine subspaces to be empty and
remove the bundled `direction`.  The new definition of `direction` (as
the `vector_span` of the points in the subspace, i.e. the
`submodule.span` of the `vsub_set` of the points) is the zero
submodule for both empty affine subspaces and for those consisting of
a single point (and it's proved that in the nonempty case it contains
exactly the pairwise subtractions of points in the affine subspace).
This doesn't generally add new lemmas beyond those used in reproving
existing results (including what were previously the `add` and `sub`
axioms for affine subspaces) with the new definitions.  It also
doesn't add the complete lattice structure for affine subspaces, just
helps enable adding it later.

2020-06-30 05:20:57 e250eb4
feat(category/schur): a small corollary of the baby schur's lemma (#3239)

2020-06-30 05:20:54 d788d4b
chore(data/set/intervals): split `I??_union_I??_eq_I??` (#3237)
For each lemma `I??_union_I??_eq_I??` add a lemma
`I??_subset_I??_union_I??` with no assumptions.

2020-06-30 05:20:51 af53c9d
chore(algebra/ring): move some classes to `group_with_zero` (#3232)
Move `nonzero`, `mul_zero_class` and `no_zero_divisors` to
`group_with_zero`: these classes don't need `(+)`.

2020-06-30 05:20:45 da481e7
chore(data/polynomial): partial move from is_ring_hom to ring_hom (#3213)
This does not attempt to do a complete refactor of `polynomial.lean` and `mv_polynomial.lean` to remove use of `is_ring_hom`, but only to fix `eval₂` which we need for the current work on Cayley-Hamilton.
Having struggled with these two files for the last few days, I'm keen to get them cleaned up, so I'll promise to return to this more thoroughly in a later PR.

2020-06-30 04:15:21 38904ac
feat(data/fintype/basic): card_eq_zero_equiv_equiv_pempty (#3238)
Adds a constructive equivalence `α ≃ pempty.{v+1}` given `fintype.card α = 0`, which I think wasn't available previously.
I would have stated this as an `iff`, but as the right hand side is data is an `equiv` itself.

2020-06-30 04:15:19 1588d81
feat(category_theory): remove nearly all universe annotations (#3221)
Due to some recent changes to mathlib (does someone know the relevant versions/commits?) most of the universe annotations `.{v}` and `include 𝒞` statements that were previously needed in the category_theory library are no longer necessary.
This PR removes them!

2020-06-30 03:05:21 056a72a
perf(linarith): don't repeat nonneg proofs for nat-to-int casts (#3226)
This performance issue showed up particularly when using `nlinarith` over `nat`s. Proofs that `(n : int) >= 0` were being repeated many times, which led to quadratic blowup in the `nlinarith` preprocessing.

2020-06-30 03:05:19 791744b
feat(analysis/normed_space/real_inner_product,geometry/euclidean): inner products of weighted subtractions (#3203)
Express the inner product of two weighted sums, where the weights in
each sum add to 0, in terms of the norms of pairwise differences.
Thus, express inner products for vectors expressed in terms of
`weighted_vsub` and distances for points expressed in terms of
`affine_combination`.
This is a general form of the standard formula for a distance between
points expressed in terms of barycentric coordinates: if the
difference between the normalized barycentric coordinates (with
respect to triangle ABC) for two points is (x, y, z) then the squared
distance between them is -(a^2 yz + b^2 zx + c^2 xy).
Although some of the lemmas are given with the two vectors expressed
as sums over different indexed families of vectors or points (since
nothing in the statement or proof depends on them being the same), I
expect almost all uses will be in cases where the two indexed families
are the same and only the weights vary.

2020-06-30 01:43:20 4fcd6fd
chore(*): import expression widgets from core (#3181)
With widgets, the rendering of the tactic state is implemented in pure Lean code.  I would like to move this part (temporarily) into mathlib to facilitate collaborative improvement and rapid iteration under a mature community review procedure.  (That is, I want other people to tweak it themselves without having to wait a week for the next Lean release to see the effect.)
I didn't need to change anything in the source code (except for adding some doc strings).  So it should be easy to copy it back to core if we want to.
There are no changes required to core for this PR.

2020-06-30 00:37:07 e8fd085
chore(scripts): update nolints.txt (#3234)
I am happy to remove some nolints for you!

2020-06-29 19:03:51 45904fb
chore(*): change notation for `set.compl` (#3212)
* introduce typeclass `has_compl` and notation `∁` for `has_compl.compl`
* use it instead of `has_neg` for `set` and `boolean_algebra`

2020-06-29 16:12:00 d3006ba
chore(init_/): remove this directory (#3227)
* remove `init_/algebra`;
* move `init_/data/nat` to `data/nat/basic`;
* move `init_/data/int` to `data/int/basic`.

2020-06-29 15:01:42 eb05a94
feat(order/filter/germ): define `filter.germ` (#3172)
Actually we already had this definition under the name
`filter_product`.

2020-06-29 13:48:28 4907d5d
feat(algebra/ring): ite_mul_one and ite_mul_zero_... (#3217)
Three simple lemmas about if statements involving multiplication, useful while rewriting.

2020-06-29 13:48:26 964f0e5
feat(data/polynomial): work over noncommutative rings where possible (#3193)
After downgrading `C` from an algebra homomorphism to a ring homomorphism in [69931ac](https://github.com/leanprover-community/mathlib/commit/69931acfe7b6a29f988bcf7094e090767b34fb85), which requires a few tweaks, everything else is straightforward.

2020-06-29 13:48:23 a708f85
feat(category/limits/shapes): fix biproducts (#3175)
This is a second attempt at #3102.
Previously the definition of a (binary) biproduct in a category with zero morphisms (but not necessarily) preadditive was just wrong.
The definition for a "bicone" was just something that was simultaneously a cone and a cocone, with the same cone points. It was a "biproduct bicone" if the cone was a limit cone and the cocone was a colimit cocone. However, this definition was not particularly useful. In particular, there was no way to prove that the two different `map` constructions providing a morphism `W ⊞ X ⟶ Y ⊞ Z` (i.e. by treating the biproducts either as cones, or as cocones) were actually equal. Blech.
So, I've added the axioms `inl ≫ fst = 𝟙 P`, `inl ≫ snd = 0`, `inr ≫ fst = 0`, and `inr ≫ snd = 𝟙 Q` to `bicone P Q`. (Note these only require the exist of zero morphisms, not preadditivity.)
Now the two map constructions are equal.
I've then entirely removed the `has_preadditive_biproduct` typeclass. Instead we have
1. additional theorems providing `total`, when `preadditive C` is available
2. alternative constructors for `has_biproduct` that use `total` rather than `is_limit` and `is_colimit`.
This PR also introduces some abbreviations along the lines of `abbreviation has_binary_product (X Y : C) := has_limit (pair X Y)`, just to improve readability.

2020-06-29 13:48:21 78beab4
feat(linear_algebra/affine_space): affine independence (#3140)
Define affine independent indexed families of points (in terms of no
nontrivial `weighted_vsub` in the family being zero), prove that a
family of at most one point is affine independent, and prove a family
of points is affine independent if and only if a corresponding family
of subtractions is linearly independent.
There are of course other equivalent descriptions of affine
independent families it will be useful to add later (that the affine
span of all proper subfamilies is smaller than the affine span of the
whole family, that each point is not in the affine span of the rest;
in the case of a family indexed by a `fintype`, that the dimension of
the affine span is one less than the cardinality).  But I think the
definition and one equivalent formulation is a reasonable starting
point.

2020-06-29 12:45:16 36ce13f
chore(finset/nat/antidiagonal): simplify some proofs (#3225)
Replace some proofs with `rfl`, and avoid `multiset.to_finset` when there is a `nodup` available.

2020-06-29 08:15:17 c4f9176
feat(linear_algebra/tensor_product): ite_tmul (#3216)
```
((if P then x₁ else 0) ⊗ₜ[R] x₂) = if P then (x₁ ⊗ₜ x₂) else 0
```
and the symmetric version.

2020-06-29 06:59:46 ca44926
chore(ring_theory/tensor_product): missing simp lemmas (#3215)
A few missing `simp` lemmas.

2020-06-29 04:45:10 a443d8b
feat(simp_nf): instructions for linter timeout (#3205)

2020-06-29 04:21:12 9a1c0a6
feat(data/padics/padic_norm) Fix namespacing of padic_val_nat (#3207)
No longer need we `padic_val_rat.padic_val_nat`.

2020-06-29 03:57:10 9acf590
feat(data/matrix/notation): smul matrix lemmas (#3208)

2020-06-29 03:20:59 d2b46ab
chore(category_theory/punit): use discrete punit instead of punit (#3201)
Analogous to #3191 for `punit`. I also removed some `simp` lemmas which can be generated instead by `[simps]`.

2020-06-29 02:24:01 b503fb4
chore(docs/tutorial): change category declarations (#3220)
change category declarations to match syntax in recent commit (i.e. no more explicit typeclass naming), delete unnecessary "include" lines as they are no longer needed for Lean to include the typeclass, update tutorial text to explain new syntax

2020-06-28 22:51:22 2ec83dc
chore(group_theory/submonoid): split into 3 files (#3058)
Now
* `group_theory.submonoid.basic` contains the definition, `complete_lattice` structure, and some basic facts about `closure`;
* `group_theory.submonoid.operations` contains definitions of various operations on submonoids;
* `group_theory.submonoid.membership` contains various facts about membership in a submonoid or the submonoid closure of a set.

2020-06-28 22:28:30 4ad82e5
feat(uniform_space): compact uniform spaces, Heine-Cantor (#3180)
feat(uniform_space): compact uniform spaces
Compact Hausdorff spaces are uniquely uniformizable and continuous
functions on them are uniformly continuous (Heine-Cantor).

2020-06-28 21:26:32 3d72c97
chore(measure_theory/outer_measure,measure_space): use `complete_lattice_of_Inf/Sup` (#3185)
Also add a few supporting lemmas about `bsupr`/`binfi` to `order/complete_lattice`

2020-06-28 13:39:01 35fbfe0
fix(tactic/linarith): use refine instead of apply to avoid apply bug (#3199)
closes #3142

2020-06-28 09:35:54 da210bf
doc(contribute/bors.md): update some outdated info (#3209)

2020-06-28 08:10:20 2f6a5f5
feat(nat, lattice): preliminaries for Haar measure (#3190)
PR 2/5 to put the Haar measure in mathlib. This PR: results about lattices and lattice operations on `nat`.
add some simp lemmas for `nat.find` (simplifying a proof in `sum_four_squares`)
rename `finset.sup_val` to `finset.sup_def` (it was unused). In PR 3 I will add a new declaration `finset.sup_val`
`Inf_nat_def` and `Sup_nat_def` renamed to `nat.Inf_def` and `nat.Sup_def`, and use `set.nonempty` in statement (they were unused outside that file)

2020-06-28 07:12:16 4e2b46a
feat(algebra/big_operators): add induction principles (#3197)
add sum_induction and prod_induction

2020-06-28 06:01:24 a220286
feat(subtype): standardize (#3204)
Add simp lemma from x.val to coe x
Use correct ext/ext_iff naming scheme
Use coe in more places in the library

2020-06-28 00:34:00 dd2f1b9
chore(scripts): update nolints.txt (#3206)
I am happy to remove some nolints for you!

2020-06-27 18:19:16 247fe80
feat(category_theory/cones): cone functoriality is fully faithful (#3202)
The functors `cones.functoriality` and `cocones.functoriality` are fully faithful if the transformation functor is as well.

2020-06-27 10:10:55 adcd09d
chore(tactic/linarith): remove final linting error (#3196)

2020-06-27 05:25:00 e7e9f30
feat(set): preliminaries for Haar measure (#3189)
`comp_sup_eq_sup_comp` is renamed `comp_sup_eq_sup_comp_of_is_total` and there is a new version that doesn't assume that the order is linear.
`set.image_injective` is renamed `function.injective.image_injective` (in the same way as the existing `function.surjective.preimage_injective`). `set.image_injective` is now an `iff`.

2020-06-27 03:21:26 8413b3f
feat(analysis/normed_space/real_inner_product): sums and bilinear form (#3187)
Add lemmas about distributing the inner product into a sum.  The
natural approach to proving those seems to be to use the corresponding
lemmas for bilinear forms, so also add a construction of a `bilin_form
ℝ α` from the inner product.
I realise this might all get refactored later if inner products get
refactored to cover the case of complex inner products as well.

2020-06-27 02:52:56 6ed3325
feat(category_theory/limits): limit of point iso (#3188)
Prove a cone is a limit given that the canonical morphism from it to a limiting cone is an iso.

2020-06-27 00:32:10 c6fd69d
chore(scripts): update nolints.txt (#3192)
I am happy to remove some nolints for you!

2020-06-26 23:51:42 78d6780
chore(category_theory/pempty): use discrete pempty instead of a special pempty category (#3191)
Use `discrete pempty` instead of a specialised `pempty` category.
Motivation: Since we have a good API for `discrete` categories, there doesn't seem to be much point in defining a specialised `pempty` category with an equivalence, instead we might as well just use `discrete pempty`.

2020-06-26 16:35:02 2d270ff
feat(data/set/basic): +2 lemmas, +2 `simp` attrs (#3182)

2020-06-26 15:11:50 ef62d1c
chore(*): last preparations for Heine (#3179)
This is hopefully the last preparatory PR before we study compact uniform spaces. It has almost no mathematical content, except that I define `uniform_continuous_on`, and check it is equivalent to uniform continuity for the induced uniformity.

2020-06-26 13:39:18 6624509
feat(algebra/big_operators): telescoping sums (#3184)
generalize sum_range_sub_of_monotone, a theorem about nats, to a theorem about commutative groups

2020-06-26 09:59:19 5b97da6
feat(ring_theory/matrix_equiv_tensor): matrix n n A ≃ₐ[R] (A ⊗[R] matrix n n R) (#3177)
When `A` is an `R`-algebra, matrices over `A` are equivalent (as an algebra) to `A ⊗[R] matrix n n R`.

2020-06-26 07:16:55 3cfc0e7
chore(category/*): linting (#3178)
Some linting work on `category_theory/`.

2020-06-26 06:18:21 c3923e3
feat(data/fintype): trunc_sigma_of_exists (#3166)
When working over a `fintype`, you can lift existential statements to `trunc` statements.
This PR adds:
```
def trunc_of_nonempty_fintype {α} (h : nonempty α) [fintype α] : trunc α
def trunc_sigma_of_exists {α} [fintype α] {P : α → Prop} [decidable_pred P] (h : ∃ a, P a) : trunc (Σ' a, P a)
```

2020-06-26 01:23:06 616cb5e
chore(category_theory/equivalence) explicit transitivity transformation (#3176)
Modifies the construction of the transitive equivalence to be explicit in what exactly the natural transformations are.
The motivation for this is two-fold: firstly we get auto-generated projection lemmas for extracting the functor and inverse, and the natural transformations aren't obscured through `adjointify_η`.

2020-06-26 00:34:33 abae5a3
chore(scripts): update nolints.txt (#3174)
I am happy to remove some nolints for you!

2020-06-25 23:10:54 43a2b24
feat(tactic/abel) teach abel to gsmul_zero (#3173)
As reported by Heather Macbeth in:
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/limitations.20of.20.60abel.60
`abel` was not negating zero to zero.

2020-06-25 16:36:04 db7a53a
refactor(ring_theory/ideals): make local_ring a prop class (#3171)

2020-06-25 15:51:37 afc1c24
feat(category/default): comp_dite (#3163)
Adds lemmas to "distribute" composition over `if` statements.

2020-06-25 15:51:35 c6f629b
feat(category_theory/limits): isos from reindexing limits (#3100)
Three related constructions which are helpful when identifying "the same limit written different ways".
1. The categories of cones over `F` and `G` are equivalent if `F` and `G` are naturally isomorphic
(possibly after changing the indexing category by an equivalence).
2. We can prove two cone points `(s : cone F).X` and `(t.cone F).X` are isomorphic if
* both cones are limit cones
* their indexing categories are equivalent via some `e : J ≌ K`,
* the triangle of functors commutes up to a natural isomorphism: `e.functor ⋙ G ≅ F`.
3. The chosen limits of `F : J ⥤ C` and `G : K ⥤ C` are isomorphic,
if there is an equivalence `e : J ≌ K` making the triangle commute up to natural isomorphism.

2020-06-25 14:32:01 158e84a
feat(*): bump to Lean 3.16.5 (#3170)
There should be no changes required in mathlib.

2020-06-25 13:06:57 7d331eb
chore(*): assorted lemmas about `set` and `finset` (#3158)

2020-06-25 13:06:55 80a0877
feat(category_theory): show a pullback of a regular mono is regular (#2780)
And adds two methods for constructing limits which I've found much easier to use in practice.

2020-06-25 12:26:52 3f868fa
feat(filter, topology): cluster_pt and principal notation, redefine compactness (#3160)
This PR implements what is discussed in https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Picking.20sides. It introduces a notation for `filter.principal`, defines `cluster_pt` and uses it to redefine compactness in a way which makes the library more consistent by always putting the neighborhood filter on the left, as in the description of closures and `nhds_within`.

2020-06-25 07:40:04 e7db701
feat(category/adjunction): missing simp lemmas (#3168)
Just two missing simp lemmas.

2020-06-25 07:40:02 d86f1c8
chore(category/discrete): missing simp lemmas (#3165)
Some obvious missing `simp` lemmas for `discrete.nat_iso`.

2020-06-25 07:40:01 266d316
chore(category/equivalence): cleanup (#3164)
Previously some "shorthands" like
```
@[simp] def unit (e : C ≌ D) : 𝟭 C ⟶ e.functor ⋙ e.inverse := e.unit_iso.hom
```
had been added in `equivalence.lean`.
These were a bit annoying, as even though they were marked as `simp` sometimes the syntactic difference between `e.unit` and `e.unit_iso.hom` would get in the way of tactics working.
This PR turns these into abbreviations.
This comes at a slight cost: apparently expressions like `{ X := X }.Y` won't reduce when `.Y` is an abbreviation for `.X.Z`, so we add some `@[simp]` lemmas back in to achieve this.

2020-06-25 07:39:59 e8187ac
feat(category/preadditive): comp_sum (#3162)
Adds lemmas to distribute composition over `finset.sum`, in a preadditive category.

2020-06-25 06:32:59 3875012
feat(data/quot): add `map'`, `hrec_on'`, and `hrec_on₂'` (#3148)
Also add a few `simp` lemmas

2020-06-25 05:38:59 553e453
feat(algebra/big_operators): prod_dite_eq (#3167)
Add `finset.prod_dite_eq`, the dependent analogue of `finset.prod_ite_eq`, and its primed version for the flipped equality.

2020-06-25 04:35:29 8f04a92
refactor(algebra/*): small API fixes (#3157)
## Changes to `canonically_ordered_comm_semiring`
* in the definition of `canonically_ordered_comm_semiring` replace
  `mul_eq_zero_iff` with `eq_zero_or_eq_zero_of_mul_eq_zero`; the other
  implication is always true because of `[semiring]`;
* add instance `canonically_ordered_comm_semiring.to_no_zero_divisors`;
## Changes to `with_top`
* use `to_additive` for `with_top.has_one`, `with_top.coe_one` etc;
* move `with_top.coe_ne_zero` to `algebra.ordered_group`;
* add `with_top.has_add`, make `coe_add`, `coe_bit*` require only `[has_add α]`;
* use proper instances for lemmas about multiplication in `with_top`, not
  just `canonically_ordered_comm_semiring` for everything;
## Changes to `associates`
* merge `associates.mk_zero_eq` and `associates.mk_eq_zero_iff_eq_zero` into
  `associates.mk_eq_zero`;
* drop `associates.mul_zero`, `associates.zero_mul`, `associates.zero_ne_one`,
  and `associates.mul_eq_zero_iff` in favor of typeclass instances;
## Misc changes
* drop `mul_eq_zero_iff_eq_zero_or_eq_zero` in favor of `mul_eq_zero`;
* drop `ennreal.mul_eq_zero` in favor of `mul_eq_zero` from instance.

2020-06-25 01:09:38 e1a72b5
feat(archive/100-theorems-list/73_ascending_descending_sequences): Erdős–Szekeres (#3074)
Prove the Erdős-Szekeres theorem on ascending or descending sequences

2020-06-25 00:34:07 5c7e1a2
chore(scripts): update nolints.txt (#3161)
I am happy to remove some nolints for you!

2020-06-24 19:51:54 2aa08c1
chore(algebra/ordered_group): merge `add_le_add'` with `add_le_add` (#3159)
Also drop `mul_le_mul''` (was a weaker version of `mul_le_mul'`).

2020-06-24 14:36:47 04a5bdb
feat(linear_algebra/finsupp_vector_space): is_basis.tensor_product (#3147)
If `b : ι → M` and `c : κ → N` are bases then so is `λ i, b i.1 ⊗ₜ c i.2 : ι × κ → M ⊗ N`.

2020-06-24 10:22:57 dd9b5c6
refactor(tactic/linarith): big refactor and docs (#3113)
This PR:
* Splits `linarith` into multiple files for organizational purposes
* Uses the general `zify` and `cancel_denom` tactics instead of weaker custom versions
* Refactors many components of `linarith`, in particular,
* Modularizes `linarith` preprocessing, so that users can insert custom steps
* Implements `nlinarith` preprocessing as such a custom step, so it happens at the correct point of the preprocessing stage
* Better encapsulates the FM elimination module, to make it easier to plug in alternate oracles if/when they exist
* Docs, docs, docs
The change to zification means that some goals which involved multiplication of natural numbers will no longer be solved. However, others are now in scope. `nlinarith` is a possible drop-in replacement; otherwise, generalize the product of naturals to a single natural, and `linarith` should still succeed.

2020-06-24 09:30:51 194edc1
feat(ring_theory/localization): integral closure in field extension (#3096)
Let `A` be an integral domain with field of fractions `K` and `L` a finite extension of `K`. This PR shows the integral closure of `A` in `L` has fraction field `L`. If those definitions existed, the corollary is that the ring of integers of a number field is a number ring.
For this, we need two constructions on polynomials:
 * If `p` is a nonzero polynomial, `integral_normalization p` is a monic polynomial with roots `z * a` for `z` a root of `p` and `a` the leading coefficient of `p`
 * If `f` is the localization map from `A` to `K` and `p` has coefficients in `K`, then `f.integer_normalization p` is a polynomial with coefficients in `A` (think: `∀ i, is_integer (f.integer_normalization p).coeff i`) with the same roots as `p`.

2020-06-24 07:12:51 8ecf53d
feat(order/filter/countable_Inter): `sup` and `inf` (#3154)

2020-06-24 06:13:13 617b07e
feat(uniform_space/separation): add separated_set (#3130)
Also add documentation and simplify the proof of separated => t2 and add the converse.

2020-06-24 00:48:46 985cce7
chore(scripts): update nolints.txt (#3156)
I am happy to remove some nolints for you!

2020-06-24 00:18:26 d57ac08
feat(field_theory/separable): definition and basic properties (#3155)

2020-06-23 22:02:55 340d5a9
refactor(geometry/manifold/*): rename to charted_space and tangent_map (#3103)
@PatrickMassot  had asked some time ago if what is currently called `manifold` in mathlib could be renamed to `charted_space`, and in a recent PR he asked if `bundled_mfderiv` could be called `tangent_map`. Both changes make sense. They are implemented in this PR, together with several tiny improvements to the manifold library.

2020-06-23 17:57:24 bc3ed51
chore(data/set/finite): use dot notation (#3151)
Rename:
* `finite_insert` to `finite.insert`;
* `finite_union` to `finite.union`;
* `finite_subset` to `finite.subset`;
* `finite_image` to `finite.image`;
* `finite_dependent_image` to `finite.dependent_image`;
* `finite_map` to `finite.map`;
* `finite_image_iff_on` to `finite_image_iff`;
* `finite_preimage` to `finite.preimage`;
* `finite_sUnion` to `finite.sUnion`;
* `finite_bUnion` to `finite.bUnion`, merge with `finite_bUnion'` and
  use `f : Π i ∈ s, set α` instead of `f : ι → set α`;
* `finite_prod` to `finite.prod`;
* `finite_seq` to `finite.seq`;
* `finite_subsets_of_finite` to `finite.finite_subsets`;
* `bdd_above_finite` to `finite.bdd_above`;
* `bdd_above_finite_union` to `finite.bdd_above_bUnion`;
* `bdd_below_finite` to `finite.bdd_below`;
* `bdd_below_finite_union` to `finite.bdd_below_bUnion`.
Delete
* `finite_of_finite_image_on`, was a copy of `finite_of_fintie_image`;
* `finite_bUnion'`: merge with `finite_bUnion` into `finite.bUnion`.

2020-06-23 17:15:59 26918a0
feat(topology/metric_space/baire): define filter `residual` (#3149)
Fixes #2265. Also define a typeclass `countable_Inter_filter` and prove that both `residual`
and `μ.ae` have this property.

2020-06-23 16:11:19 62e1364
chore(linear_algebra/nonsingular_inverse): `matrix.nonsing_inv` no longer requires base ring to carry `has_inv` instance (#3136)

2020-06-23 14:59:38 ea665e7
fix(algebra/ordered*): add norm_cast attribute (#3132)

2020-06-23 13:58:52 d287d34
refactor(order/filter/basic): define `filter.eventually_eq` (#3134)
* Define `eventually_eq` (`f =^f[l] g`) and `eventually_le` (`f ≤^f[l] g`).
* Use new notation and definitions in some files.

2020-06-23 08:40:54 421ed70
chore(topology/metric_space/baire): review (#3146)
* Simplify some proofs in `topology/metric_space/baire`;
* Allow dependency on `hi : i ∈ S` in some `bUnion`/`bInter` lemmas.

2020-06-23 08:40:52 159766e
chore(topology/metric_space/basic): rename `uniform_continuous_dist'` (#3145)
* rename `uniform_continuous_dist'` to `uniform_continuous_dist`;
* rename `uniform_continuous_dist` to `uniform_continuous.dist`;
* add `uniform_continuous.nndist`.

2020-06-23 07:31:42 02d880b
perf(tactic/cache): call `freeze_local_instances` after `reset_instance_cache` (#3128)
Calling `unfreeze_local_instances` unfreezes the local instances of the main goal, and thereby disables the type-class cache (for this goal).  It is therefore advisable to call `freeze_local_instances` afterwards as soon as possible.  (The type-class cache will still be trashed when you switch between goals with different local instances, but that's only half as bad as disabling the cache entirely.)
To this end this PR contains several changes:
 * The `reset_instance_cache` function (and `resetI` tactic) immediately call `freeze_local_instances`.
 * The `unfreezeI` tactic is removed.  Instead we introduce `unfreezingI { tac }`, which only temporarily unfreezes the local instances while executing `tac`.  Try to keep `tac` as small as possible.
 * We add `substI h` and `casesI t` tactics (which are short for `unfreezingI { subst h }` and `unfreezingI { casesI t }`, resp.) as abbreviations for the most common uses of `unfreezingI`.
 * Various other uses of `unfreeze_local_instances` are eliminated.  Avoid use of `unfreeze_local_instances` if possible.  Use the `unfreezing tac` combinator instead (the non-interactive version of `unfreezingI`).
See discussion at https://github.com/leanprover-community/mathlib/pull/3113#issuecomment-647150256

2020-06-23 04:53:57 c0d74a3
refactor(group/perm) bundle sign of a perm as a monoid_hom (#3143)
We're trying to bundle everything right?

2020-06-23 03:11:26 23d6141
chore(algebra/ring,char_zero): generalize some lemmas (#3141)
`mul_eq_zero` etc only need `[mul_zero_class]` and `[no_zero_divisors]`. In particular, they don't need `has_neg`. Also deduplicate with `group_with_zero.*`.

2020-06-23 00:34:00 52abfcf
chore(scripts): update nolints.txt (#3144)
I am happy to remove some nolints for you!

2020-06-22 20:52:37 b562575
feat(data/finset): add card_insert_of_mem (#3137)

2020-06-22 19:11:00 36e3b9f
chore(*): update to Lean 3.16.4c (#3139)

2020-06-22 19:10:58 67844a8
feat(order/complete_lattice): complete lattice of Sup (#3138)
Construct a complete lattice from a least upper bound function. 
From a Xena group discussion.

2020-06-22 18:22:19 f059336
fix(algebra/pi_instances): improve definitions of `pi.*` (#3116)
The new `test/pi_simp.lean` fails with current `master`. Note that
this is a workaround, not a proper fix for `tactic.pi_instance`.
See also [Zulip chat](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60id.60.20in.20pi_instances)
Also use `@[to_additive]` to generate additive definitions, add ordered multiplicative monoids, and add `semimodule (Π i, f i) (Π, g i)`.

2020-06-22 16:12:16 54cc126
feat(data/finset,data/fintype,algebra/big_operators): some more lemmas (#3124)
Add some `finset`, `fintype` and `algebra.big_operators` lemmas that
were found useful in proving things related to affine independent
families.  (In all cases where results are proved for products, and
then derived for sums where possible using `to_additive`, it was the
result for sums that I actually had a use for.  In the case of
`eq_one_of_card_le_one_of_prod_eq_one` and
`eq_zero_of_card_le_one_of_sum_eq_zero`, `to_additive` couldn't be
used because it also tries to convert the `1` in `s.card ≤ 1` to `0`.)

2020-06-22 13:19:55 86dcd5c
feat(analysis/calculus): C^1 implies strictly differentiable (#3119)
Over the reals, a continuously differentiable function is strictly differentiable.
Supporting material:  Add a standard mean-value-theorem-related trick as its own lemma, and refactor another proof (in `calculus/extend_deriv`) to use that lemma.
Other material:  an _equality_ (rather than _inequality_) version of the mean value theorem for domains; slight refactor of `normed_space/dual`.

2020-06-22 11:57:27 46a8894
feat(linear_algebra/affine_space): affine combinations for finsets (#3122)
Extend the definitions of affine combinations over a `fintype` to the
case of sums over a `finset` of an arbitrary index type (which is
appropriate for use cases such as affine independence of a possibly
infinite family of points).
Also change to have only bundled versions of `weighted_vsub_of_point`
and `weighted_vsub`, following review, so avoiding duplicating parts
of `linear_map` API.

2020-06-22 10:46:14 105fa17
feat(linear_algebra/matrix): trace of an endomorphism independent of basis (#3125)

2020-06-22 08:01:57 068aaaf
chore(data/finmap): nolint (#3131)

2020-06-22 07:22:10 3f9b52a
refactor(ring_theory/*): make PID class a predicate (#3114)

2020-06-22 00:33:41 6aba958
chore(scripts): update nolints.txt (#3133)
I am happy to remove some nolints for you!

2020-06-21 21:04:24 d59adc1
chore(data/list/alist): nolint (#3129)

2020-06-21 19:44:08 5b5ff79
fix(tactic/delta_instance): bug in computing pi arity (#3127)

2020-06-21 19:09:48 eff9ed3
feat(topology/uniform_space): some basic lemmas (#3123)
This is the second PR on the road to Heine. It contains various elementary lemmas about uniform spaces.

2020-06-21 17:25:22 7073c8b
feat(tactic/cancel_denoms): try to remove numeral denominators  (#3109)

2020-06-21 16:23:00 b7d056a
feat(tactic/zify): move nat propositions to int (#3108)

2020-06-21 15:04:19 d097161
fix(tactic/set): use provided type for new variable (#3126)
closes #3111

2020-06-20 19:21:52 8729fe2
feat(tactic/simps): option `trace.simps.verbose` prints generated lemmas (#3121)

2020-06-20 15:10:42 e8ff6ff
feat(*): random lemmas about sets and filters (#3118)
This is the first in a series of PR that will culminate in a proof of Heine's theorem (a continuous function from a compact separated uniform space to any uniform space is uniformly continuous). I'm slicing a 600 lines files into PRs. This first PR is only about sets, filters and a bit of topology. Uniform spaces stuff will come later.

2020-06-20 11:22:01 cd9e8b5
fix(tactic/group): bugfix for inverse of 1 (#3117)
The new group tactic made goals like
```lean
example {G : Type*} [group G] (x : G) (h : x = 1) : x = 1 :=
begin
  group, -- x * 1 ^(-1) = 1
  exact h,
end
```
worse, presumably from trying to move the rhs to the lhs we end up with `x * 1^(-1) = 1`, we add a couple more lemmas to try to fix this.

2020-06-19 13:54:55 103743e
doc(tactic/core,uniform_space/basic): minor doc fixes (#3115)

2020-06-19 04:18:45 8e44b9f
feat(algebra/big_operators): `prod_apply_dite` and `prod_dite` (#3110)
Generalize `prod_apply_ite` and `prod_ite` to dependent if-then-else. Since the proofs require `prod_attach`, it needed to move to an earlier line.
Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/prod_ite_eq

2020-06-19 00:33:30 56a580d
chore(scripts): update nolints.txt (#3112)
I am happy to remove some nolints for you!

2020-06-18 22:26:13 ed44541
chore(*): regularize naming using injective (#3071)
This begins some of the naming regularization discussed at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/naming.20of.20injectivity.20lemmas
Some general rules:
1. Lemmas should have `injective` in the name iff they have `injective` in the conclusion
2. `X_injective` is preferable to `injective_X`.
3. Unidirectional `inj` lemmas should be dropped in favour of bidirectional ones.
Mostly, this PR tried to fix the names of lemmas that conclude `injective` (also `surjective` and `bijective`, but they seemed to be much better already).
A lot of the changes are from `injective_X` to `X_injective` style

2020-06-18 21:08:16 e060c93
feat(category_theory/discrete): build equivalence from equiv (#3099)
* renames all the construction building functors/transformations out of discrete categories as `discrete.functor`, `discrete.nat_trans`, `discrete.nat_iso`, rather than names using `of_function`.
* adds `def discrete.equivalence {I J : Type u₁} (e : I ≃ J) : discrete I ≌ discrete J`,
* removes some redundant definitions
* breaks some long lines, 
* and adds doc-strings.

2020-06-18 21:08:14 73caeaa
perf(tactic/linarith): implement redundancy test to reduce number of comparisons (#3079)
This implements a redundancy check in `linarith` which can drastically reduce the size of the sets of comparisons that the tactic needs to deal with.
`linarith` iteratively transforms sets of inequalities to equisatisfiable sets by eliminating a single variable. If there are `n` comparisons in the set, we expect `O(n^2)` comparisons after one elimination step. Many of these comparisons are redundant, i.e. removing them from the set does not change its satisfiability.
Deciding redundancy is expensive, but there are cheap approximations that are very useful in practice. This PR tests comparisons for non-minimal history (http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.51.493&rep=rep1&type=pdf p.13, theorem 7). Non-minimal history implies redundancy.

2020-06-18 20:37:24 21bf873
refactor(category_theory/abelian): use has_finite_products (#2917)
This doesn't go nearly as far as I wanted.
Really I'd like to factor out `additive`, which is a `preadditive` category with all finite biproducts, and then layer `abelian` on top of that (with (co)kernels and every epi/mono normal).
I can't do that immediately, because:
1. we don't provide the instances from `has_finite_biproducts` to `has_finite_(co)products`
2. we don't define the preadditive version of finite biproducts (we only did the binary ones)
3. hence we don't show that in a preadditive category finite products give rise to finite biproducts
@TwoFX, @b-mehta, if either of you are interested in doing any of these, that would be great. I'll hopefully get to them eventually.

2020-06-18 13:45:55 53af714
chore(*): update to lean 3.16.3 (#3107)
The changes to mathlib are from https://github.com/leanprover-community/lean/pull/321 which removed some redundant lemmas:
* `int.of_nat_inj` -> `int.of_nat.inj`
* `int.neg_succ_of_nat_inj` -> `int.neg_succ_of_nat.inj`
* `nat.succ_inj` -> `nat.succ.inj`

2020-06-18 11:39:55 24792be
chore(data/finset): minor review (#3105)

2020-06-18 09:54:38 eb5b7fb
fix(tactic/linarith): don't fail trying to preprocess irrelevant hypotheses (#3104)

2020-06-18 01:11:41 b91909e
chore(category_theory/closed/cartesian): style (#3098)
Just breaking long lines, and using braces in a multi-goal proof, for a recently added file.
 (#2894)

2020-06-17 19:57:11 b5baf55
feat(algebra/linear_ordered_comm_group_with_zero) define linear_ordered_comm_group_with_zero (#3072)

2020-06-17 19:10:21 48c4f40
refactor(measure_theory): make `volume` a bundled measure (#3075)
This way we can `apply` and `rw` lemmas about `measure`s without
introducing a `volume`-specific version.

2020-06-17 12:07:34 0736c95
chore(order/filter/basic): move some parts to new files (#3087)
Move `at_top`/`at_bot`, `cofinite`, and `ultrafilter` to new files.

2020-06-17 11:06:54 077cd7c
feat(algebra/category/Algebra): basic setup for category of bundled R-algebras (#3047)
Just boilerplate. If I don't run out of enthusiasm I'll do tensor product of R-algebras soon. (#3050)

2020-06-17 09:57:50 54441b5
feat(algebra/group_action_hom): define equivariant maps (#2866)

2020-06-17 03:12:21 e40de30
chore(category_theory/closed): move one thing to monoidal closed and fix naming (#3090)
Move one of the CCC defs to MCC as an example, and make the naming consistent.

2020-06-17 00:45:09 a19dca6
chore(scripts): update nolints.txt (#3091)
I am happy to remove some nolints for you!

2020-06-16 19:33:00 e3c9fd8
feat(topology): sequential compactness (#3061)
This is the long overdue PR bringing Bolzano-Weierstrass to mathlib. I'm sorry it's a bit large. I did use a couple of preliminary PRs, that one is really about converging subsequences, but supporting material is spread in many files.

2020-06-16 17:58:48 a478f91
chore(algebra/ring): move `add_mul_self_eq` to `comm_semiring` (#3089)
Also use `alias` instead of `def ... := @...` to make linter happy.
Fixes https://github.com/leanprover-community/lean/issues/232

2020-06-16 17:08:01 ae6bf56
feat(ring_theory/tensor_product): tensor product of algebras (#3050)
The R-algebra structure on the tensor product of two R-algebras.

2020-06-16 06:49:06 a432a3a
feat(analysis/convex): Carathéodory's convexity theorem (#2960)
```
theorem caratheodory (s : set E) :
  convex_hull s = ⋃ (t : finset E) (w : ↑t ⊆ s) (b : t.card ≤ findim ℝ E + 1), convex_hull ↑t
```
and more explicitly
```
theorem eq_center_mass_card_dim_succ_of_mem_convex_hull (s : set E) (x : E) (h : x ∈ convex_hull s) :
  ∃ (t : finset E) (w : ↑t ⊆ s) (b : t.card ≤ findim ℝ E + 1)
    (f : E → ℝ), (∀ y ∈ t, 0 ≤ f y) ∧ t.sum f = 1 ∧ t.center_mass f id = x
```

2020-06-16 04:03:38 b51028f
chore(linear_algebra/finite_dimensional): lin-indep lemma typos (#3086)

2020-06-16 02:35:24 e087174
feat(linear_algebra/finite_dimensional): bases given by finsets (#3041)
In some cases, it might be more straightforward working with finsets of
the vector space instead of indexed types or carrying around a proof of
set.finite. Also provide a lemma on equal dimension
and basis cardinality lemma that uses a finset basis.

2020-06-15 23:58:09 a796008
feat(category_theory): cartesian closed categories (#2894)
Cartesian closed categories, from my topos project.

2020-06-15 20:59:03 25e414d
feat(tactic/linarith): nlinarith tactic (#2637)
Based on Coq's [nra](https://coq.inria.fr/refman/addendum/micromega.html#coq:tacn.nra) tactic, and requested on [Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/nonlinear.20linarith).

2020-06-15 16:49:19 2e752e1
feat(tactic/group): group normalization tactic (#3062)
A tactic to normalize expressions in multiplicative groups.

2020-06-15 15:45:46 aa35f36
feat(analysis/hofer): Hofer's lemma (#3064)
Adds Hofer's lemma about complete metric spaces, with supporting material.

2020-06-15 13:00:34 4843bb1
chore(linear_algebra/finsupp_vector_space): remove leftover pp.universes (#3081)
See also #1608.

2020-06-15 08:05:05 758806e
feat(linear_algebra/affine_space): more on affine subspaces (#3076)
Add extensionality lemmas for affine subspaces, and a constructor to
make an affine subspace from a point and a direction.

2020-06-15 02:06:19 543359c
feat(field_theory/finite): Chevalley–Warning (#1564)

2020-06-15 01:22:53 3a66d9a
feat(polynomial): generalising some material to (noncomm_)semiring (#3043)

2020-06-15 00:49:47 01732f7
chore(scripts): update nolints.txt (#3078)
I am happy to remove some nolints for you!

2020-06-15 00:15:36 c91fc15
chore(geometry/manifold/real_instances): use euclidean_space (#3077)
Now that `euclidean_space` has been refactored to use the product topology, we can fix the geometry file that used a version of the product space (with the sup norm!) called `euclidean_space2`, using now instead the proper `euclidean_space`.

2020-06-14 20:40:58 c4a32e7
doc(topology/uniform_space/basic): library note on forgetful inheritance (#3070)
A (long) library note explaining design decisions related to forgetful inheritance, and reference to this note in various places (I have probably forgotten a few of them).

2020-06-14 19:26:34 797177c
feat(linear_algebra/affine_space): affine combinations of points (#2979)
Some basic definitions and lemmas related to affine combinations of
points, in preparation for defining barycentric coordinates for use in
geometry.
This version for sums over a `fintype` is probably the most convenient
for geometrical uses (where the type will be `fin 3` in the case of a
triangle, or more generally `fin (n + 1)` for an n-simplex), but other
use cases may find that `finset` or `finsupp` versions of these
definitions are of use as well.
The definition `weighted_vsub` is expected to be used with weights
that sum to zero, and the definition `affine_combination` is expected
to be used with weights that sum to 1, but such a hypothesis is only
specified for lemmas that need it rather than for those definitions.
I expect that most nontrivial geometric uses of barycentric
coordinates will need to prove such a hypothesis at some point, but
that it will still be more convenient not to need to pass it to all
the definitions and trivial lemmas.

2020-06-14 16:36:35 77c5dfe
perf(*): avoid `user_attribute.get_param` (#3073)
Recent studies have shown that `monoid_localization.lean` is the slowest file in mathlib.  One hundred and three seconds (93%) of its class-leading runtime are spent in constructing the attribute cache for `_to_additive`.  This is due to the use of the `user_attribute.get_param` function inside `get_cache`.  See the [library note on user attribute parameters](https://leanprover-community.github.io/mathlib_docs/notes.html#user%20attribute%20parameters) for more information on this anti-pattern.
This PR removes two uses of `user_attribute.get_param`, one in `to_additive` and the other in `ancestor`.

2020-06-14 16:36:33 0d05299
chore(data/finset): rename `ext`/`ext'`/`ext_iff` (#3069)
Now
* `ext` is the `@[ext]` lemma;
* `ext_iff` is the lemma `s₁ = s₂ ↔ ∀ a, a ∈ s₁ ↔ a ∈ s₂`.
Also add 2 `norm_cast` attributes and a lemma `ssubset_iff_of_subset`.

2020-06-14 16:36:31 1f16da1
refactor(analysis/normed_space/real_inner_product): extend normed_space in the definition (#3060)
Currently, inner product spaces do not extend normed spaces, and a norm is constructed from the inner product. This makes it impossible to put an instance on reals, because it would lead to two non-defeq norms. We refactor inner product spaces to extend normed spaces, with the condition that the norm is equal (but maybe not defeq) to the square root of the inner product, to solve this issue.
The possibility to construct a norm from a well-behaved inner product is still given by a constructor `inner_product_space.of_core`.
We also register the inner product structure on a finite product of inner product spaces (not on the Pi type, which has the sup norm, but on `pi_Lp 2 one_le_two \alpha` which has the right norm).

2020-06-14 15:09:35 85b8bdc
perf(tactic/linarith): use key/value lists instead of rb_maps to represent linear expressions (#3004)
This has essentially no effect on the test file, but scales much better. 
See discussion at https://leanprover.zulipchat.com/#narrow/stream/187764-Lean-for.20teaching/topic/Real.20analysis for an example which is in reach with this change.

2020-06-14 12:37:42 7f60a62
chore(order/basic): move unbundled order classes to `rel_classes (#3066)
Reason: these classes are rarely used in `mathlib`, we don't need to mix them with classes extending `has_le`.

2020-06-14 12:37:40 2c97f23
feat(tactic/library_search): small improvements (#3037)
This makes the following small improvements to `library_search`:
1. ~~Don't use `*.inj` lemmas, which are rarely useful. (Cuts test file from 95 seconds to 90 seconds.)~~
2. Some refactoring for reusability in other tactics.
3. `apply_declaration` now reports how many subgoals were successfully closed by `solve_by_elim` (for use by new tactics)

2020-06-14 12:37:38 a6534db
feat(normed_space/dual): (topological) dual of a normed space (#3021)
Define the topological dual of a normed space, and prove that over the reals, the inclusion into the double dual is an isometry.
Supporting material:  a corollary of Hahn-Banach; material about spans of singletons added to `linear_algebra.basic` and `normed_space.operator_norm`; material about homotheties added to `normed_space.operator_norm`.

2020-06-14 11:55:48 4e88687
chore(data/complex/basic): rearrange into sections (#3068)
Also:
* reworded some docstrings,
* removed dependence on `deprecated.field` by changing the proofs of `of_real_div` and `of_real_fpow` to use `ring_hom` lemmas instead of `is_ring_hom` lemma,
* renamed the instance `of_real.is_ring_hom` too `coe.is_ring_hom`,
* renamed `real_prod_equiv*` to `equiv_prod_real*`, and
* `conj_two` was removed in favor of `conj_bit0` and `conj_bit1`.

2020-06-14 09:10:57 2cd329f
feat(algebra/continued_fractions): add correctness of terminating computations (#2911)
### What
Add correctness lemmas for terminating computations of continued fractions
### Why
To show that the continued fractions algorithm is computing the right thing in case of termination. For non-terminating sequences, lemmas about the limit will be added in a later PR.
### How
1. Show that the value to be approximated can always be obtained by adding the corresponding, remaining fractional part stored in `int_fract_pair.stream`.
2. Use this to derive that once the fractional part becomes 0 (and hence the continued fraction terminates), we have exactly computed the value.

2020-06-14 08:08:09 fdc326c
feat(geometry/euclidean): sum of angles of a triangle (#2994)
Item 27 from the 100-theorems list.

2020-06-14 04:30:41 c8c1869
refactor(order/basic): make `*order.lift` use `[]` argument (#3067)
Take an order on the codomain as a `[*order β]` argument.

2020-06-14 01:30:16 67f7288
doc(measure_theory): document basic measure theory files (#3057)

2020-06-14 00:41:33 0f98c37
chore(scripts): update nolints.txt (#3065)
I am happy to remove some nolints for you!

2020-06-13 19:37:02 e33245c
feat(topology/metric_space/pi_Lp): L^p distance on finite products (#3059)
`L^p` edistance (or distance, or norm) on finite products of emetric spaces (or metric spaces, or normed groups), put on a type synonym `pi_Lp p hp α` to avoid instance clashes, and being careful to register as uniformity the product uniformity.

2020-06-13 13:42:10 cc16d35
feat(linear_algebra/finite_dimensional): cardinalities and linear independence (#3056)

2020-06-13 12:38:45 b7048a4
feat(tactic/linarith): improve parsing expressions into linear form (#2995)
This PR generalizes the parsing stage of `linarith`. It will try harder to recognize expressions as linear combinations of monomials, and will match monomials up to commutativity. 
```lean
example (u v r s t : ℚ) (h : 0 < u*(t*v + t*r + s)) : 0 < (t*(r + v) + s)*3*u :=
by linarith
```
This is helpful for #2637 .

2020-06-13 11:08:59 4bb29ab
doc(algebra/group/to_additive): add doc strings and tactic doc entry (#3055)

2020-06-13 11:08:57 a22b657
refactor(topology/uniform_space): docstring and notation (#3052)
The goal of this PR is to make `topology/uniform_space/basic.lean` more accessible. 
First it introduces the standard notation for relation composition that was inexplicably not used before. I used a non-standard unicode circle here `\ciw` but this is up for discussion as long as it looks like a composition circle.
Then I introduced balls as discussed on [this Zulip topic](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/notations.20for.20uniform.20spaces).  There could be used more, but at least this should be mostly sufficient for following PRs.
And of course I put a huge module docstring. As with `order/filter/basic.lean`, I think we need more mathematical explanations than in the average mathlib file.
I also added a bit of content about symmetric entourages but I don't have enough courage to split this off unless someone really insists.

2020-06-13 09:51:05 938b73a
feat(topology/metric_space/pi_lp): Holder and Minkowski inequalities in ennreal (#2988)
Hölder and Minkowski inequalities for finite sums. Versions for ennreals.

2020-06-13 09:19:08 dc69dc3
refactor(ci): only update nolints once a day (#3036)
This PR moves the update nolints step to a new GitHub actions workflow `update_nolints.yml` which runs once a day.

2020-06-13 07:27:55 1645542
feat(linear_algebra): elements of a dim zero space (#3054)

2020-06-12 18:08:42 51ad2a1
chore(*): update to Lean 3.16.2c (#3053)

2020-06-12 18:08:40 ce594be
feat(linear_algebra/affine_space): define a few affine maps (#2981)

2020-06-12 16:33:01 1429279
feat(data/*): lemmas converting finset, set.finite, and their card (#3042)

2020-06-12 16:32:59 c955537
fix(library_search): only unfold reducible definitions when matching (#3038)
By default `library_search` only unfolds `reducible` definitions
when attempting to match lemmas against the goal.
Previously, it would unfold most definitions, sometimes giving surprising answers, or slow answers.
The old behaviour is still available via `library_search!`.

2020-06-12 15:35:03 5c0000c
chore(*): remove extra author info (#3051)
Removing changes to author headers in files with recent changes. Authorship should be cited in the headers only for significant contributions.

2020-06-12 13:27:48 64461b8
chore(scripts): update nolints.txt (#3049)
I am happy to remove some nolints for you!

2020-06-12 12:19:15 6aa2464
chore(scripts): update nolints.txt (#3048)
I am happy to remove some nolints for you!

2020-06-12 11:43:13 f78693d
chore(data/complex/exponential): linting and pp_nodot (#3045)

2020-06-12 11:43:11 5808afc
feat(analysis/mean_inequalities): Holder and Minkowski inequalities (#3025)

2020-06-12 11:10:43 27a0946
chore(scripts): update nolints.txt (#3046)
I am happy to remove some nolints for you!

2020-06-12 10:19:27 30e620c
chore(data/real/cau_seq): linting (#3040)

2020-06-12 09:31:29 0f6b3ca
doc(data/complex/basic): docstrings and pp_nodots (#3044)

2020-06-12 05:32:43 96676a7
chore(scripts): update nolints.txt (#3039)
I am happy to remove some nolints for you!

2020-06-12 03:49:42 4ec7cc5
refactor(*): fix field names in `linear_map` and `submodule` (#3032)
* `linear_map` now uses `map_add'` and `map_smul`';
* `submodule` now `extends add_submonoid` and adds `smul_mem'`;
* no more `submodule.is_add_subgroup` instance;
* `open_subgroup` now uses bundled subgroups;
* `is_linear_map` is not a `class` anymore: we had a couple of
  `instances` but zero lemmas taking it as a typeclass argument;
* `subgroup.mem_coe` now takes `{g : G}` as it should, not `[g : G]`.

2020-06-12 02:45:20 338bbd2
chore(measure/theory): remove useless module instances (#3031)
Remove useless `module` and `vector_space` instances, as these words are now synonyms of `semimodule`.

2020-06-11 22:32:06 593f731
chore(scripts): update nolints.txt (#3035)
I am happy to remove some nolints for you!

2020-06-11 21:56:33 5444945
chore(scripts): update nolints.txt (#3034)
I am happy to remove some nolints for you!

2020-06-11 21:56:31 f71e359
chore(ring_theory/power_series): avoid id in instances (#3033)
The power series instances contain a spurious `id`, that we remove.

2020-06-11 20:24:50 9a7151c
feat(data/finsupp): set.finite {m | m ≤ n} (#3029)

2020-06-11 20:24:48 666b9e5
refactor(analysis/mean_inequalities): review (#3023)
Also add several lemmas to other files

2020-06-11 18:53:58 257d1b7
feat(*): preparations for Caratheodory's convexity theorem (#3030)

2020-06-11 18:53:56 447a2d6
chore(data/matrix/basic): move numeral section into diagonal (#3022)
Since the numeral section defines numerals for matrices as scalar
multiples of `one_val`, which is the identity matrix, these are defined
solely for diagonal matrices of type `matrix n n r`. So the numeral
section should be in the diagonal section.

2020-06-11 18:19:12 1df9301
feat(group_theory/semidirect_product): introduce semidirect_products of groups (#3028)

2020-06-11 15:35:28 ce48b6b
chore(data/finsupp): drop `finsupp.module` and `vector_space` (#3009)
These instances are not needed as `module` and `vector_space` are abbreviations for `semimodule`.
Also add two bundled versions of `eval`: as `add_monoid_hom` and as `linear_map`.

2020-06-11 11:41:18 cf0c6b8
chore(*): use prod and sum notation (#3027)

2020-06-11 09:43:11 5129aed
chore(algebra/group/to_additive): improve warning message (#3024)
Also prevent `group_theory/subgroup` from generating this warning.

2020-06-11 08:03:33 ade196f
chore(scripts): update nolints.txt (#3026)
I am happy to remove some nolints for you!

2020-06-11 06:36:39 8863666
feat(ring_theory/ideals): prod_dvd_of_coprime (#2815)

2020-06-10 19:03:46 2779093
feat(linear_algebra/matrix): matrix has finite dim  (#3013)
Using the fact that currying is a linear operation, we give matrix
a finite dimensional instance. This allows one to invoke `findim`
on matrices, giving the expected dimensions for a finite-dim matrix.
The import is changed to linear_algebra.finite_dimension,
which brings in the previous linear_algebra.dimension import.

2020-06-10 15:54:19 067a96b
chore(*): update to lean 3.16.1c (#3020)

2020-06-10 15:54:17 76e7d29
chore(scripts): update nolints.txt (#3019)
I am happy to remove some nolints for you!

2020-06-10 15:54:15 f7654b3
feat(tactic/generalizes): tactic for generalizing over multiple expressions (#2982)
This commit adds a tactic `generalizes` which works like `generalize` but for multiple expressions at once. The tactic is more powerful than calling `generalize` multiple times since this usually fails when there are dependencies between the expressions. By contrast, `generalizes` handles at least some such situations.

2020-06-10 14:24:39 daed8a4
style(*): use rcases patterns with ext (#3018)

2020-06-10 14:24:37 026d639
ci(build.yml): add -T100000 to test step (#3017)
cf. #2276.  This will also prevent some confusing timeouts, see e.g. https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Tests.20fail

2020-06-10 12:50:03 614d1ca
chore(*): update to lean 3.16.0 (#3016)
The only change relevant to mathlib is that the precedence of unary `-` has changed, so that `-a^n` parses as `-(a^n)` and not (as formerly) `(-a)^n`.

2020-06-10 12:50:01 4b62261
chore(algebra/field): deduplicate with group_with_zero (#3015)
For historical reasons there are lots of lemmas we prove for `group_with_zero`, then again for a `division_ring`. Merge some of them.

2020-06-10 12:49:59 b427ebf
chore(data/equiv/basic): add many docstrings, review (#3008)
Non-docstring changes:
* drop `decidable_eq_of_equiv` (was a copy of `equiv.decidable_eq`);
* rename `inhabited_of_equiv` to `equiv.inhabited`;
* rename `unique_of_equiv` to `equiv.unique`, take `unique β` as an
  instance argument;
* better defeq for `equiv.list_equiv_of_equiv`;
* use `coe` instead of `subtype.val` in `equiv.set.union'`;
* use `s ∩ t ⊆ ∅` instead of `s ∩ t = ∅` in `equiv.set.union`;
  this way it agrees with `disjoint`;
* use `[decidable_pred (λ x, x ∈ s)]` instead of `[decidable_pred s]`
  in `equiv.set.union`;
* use `coe` instead of `subtype.val` in `equiv.set.sep`;
* make `f` an explicit argument in `equiv.of_bijective f hf`;

2020-06-10 12:49:57 671284e
feat(control/equiv_functor/instances): allow equiv_rw on finset (#2997)
Allows moving `finset` over an `equiv` using `equiv_rw`, as requested by @jcommelin.
e.g.
```
import data.finset
import tactic.equiv_rw
example (σ τ : Type) (e : σ ≃ τ) : finset σ ≃ finset τ :=
by { equiv_rw e, refl, }
```

2020-06-10 11:19:50 b932a51
feat(data/set/function): add lemmas about `semiconj` (#3007)
Also redefine `set.maps_to` to avoid unfolding `mem_preimage`.

2020-06-10 09:47:17 836c0a2
chore(*): use sum notation (#3014)
The biggest field test of the new summation notation.

2020-06-10 08:49:53 d9934b2
feat(linear_algebra/basic): curry is linear_equiv (#3012)
Currying provides a linear_equiv. This can be used to show that
matrix lookup is a linear operation. This should allow to easily
provide a finite_dimensional instance for matrices.

2020-06-10 07:15:39 6a0412e
chore(data/fintype): generalise `to_finset_card` (#2316)
Slight generalisation of a lemma, allowing a more flexible `fintype` instance.
Also americanises some spelling. :-)

2020-06-10 00:06:07 f1df14c
feat(group_theory/subgroup): normal_closure and gpowers (#2959)
Transfer some more proofs from `deprecated/subgroup`

2020-06-09 21:53:37 4e1558b
chore(algebra/group_power): simp attribute on nsmul_eq_mul and gsmul_eq_mul (#2983)
Also fix the resulting lint failures, corresponding to the fact that several lemmas are not in simp normal form any more.

2020-06-09 20:16:58 a02ab48
refactor(group_theory/subgroup): swap `mul_mem_cancel_left/right` (#3011)
This way the name follows the position of the term we cancel.

2020-06-09 19:36:31 df34ee2
chore(scripts): update nolints.txt (#3010)
I am happy to remove some nolints for you!

2020-06-09 17:36:44 1a4f0c2
refactor(algebra/ordered_group): multiplicative versions of ordered monoids/groups (#2844)
This PR defines multiplicative versions of ordered monoids and groups. It also lints the file.

2020-06-09 17:00:44 f098c16
feat(ring_theory/localization): more lemmas and defs about fields of fractions (#3005)

2020-06-09 12:21:46 ccdf1d2
feat(category_theory/limits): prod.lift_comp_comp (#2968)

2020-06-09 11:36:39 7cb0a85
refactor(topology): rename `lim` to `Lim` (#2977)
Also introduce `lim (f : filter α) (g : α → β)`.

2020-06-09 11:05:31 76792dc
feat(algebra/add_torsor): add `prod.add_torsor` (#2980)

2020-06-09 09:07:38 4281343
refactor(data/polynomial): redefine `C` as an `alg_hom` (#3003)
As a side effect Lean parses `C 1` as `polynomial nat`. If you need `polynomial R`, then use `C (1:R)`.

2020-06-09 08:13:56 34302c6
chore(ring_theory/algebra): add comments explaining absence of 2 `simp` attrs (#3002)

2020-06-09 08:13:54 03c345f
chore(data/real/nnreal): +2 lemmas (#3000)

2020-06-09 08:13:52 1091462
feat(analysis/special_functions/pow): `inv_rpow`, `div_rpow` (#2999)
Also use notation `ℝ≥0` and use `nnreal.eq` instead of `rw ← nnreal.coe_eq`.

2020-06-09 07:06:53 45567dc
chore(algebra/big_operators): add `@[simp] lemma sum_eq_zero_iff` (#2998)

2020-06-09 05:24:03 24ce416
chore(data/matrix/basic): clean up of new lemmas on matrix numerals (#2996)
Generalise and improve use of `@[simp]` for some newly added lemmas about matrix numerals.

2020-06-08 20:32:11 7bb2d89
feat(dynamics/fixed_points/topology): new file (#2991)
* Move `is_fixed_pt_of_tendsto_iterate` from
  `topology.metric_space.contracting`, reformulate it without `∃`.
* Add `is_closed_fixed_points`.
* Move `dynamics.fixed_points` to `dynamics.fixed_points.basic`.

2020-06-08 19:36:45 470ccd3
chore(scripts): update nolints.txt (#2993)
I am happy to remove some nolints for you!

2020-06-08 19:36:43 94deddd
feat(data/real/conjugate_exponents): define real conjugate exponents (#2992)

2020-06-08 19:36:41 4ee67ac
chore(*): use prod notation (#2989)
The biggest field test of the new product notation.

2020-06-08 19:36:39 a377993
feat(geometry/euclidean): angles and some basic lemmas (#2865)
Define angles (undirected, between 0 and π, in terms of inner
product), and prove some basic lemmas involving angles, for real inner
product spaces and Euclidean affine spaces.
From the 100-theorems list, this provides versions of
* 04 Pythagorean Theorem,
* 65 Isosceles Triangle Theorem and
* 94 The Law of Cosines, with various existing definitions implicitly providing
* 91 The Triangle Inequality.

2020-06-08 19:05:30 dbbd696
feat(order/ideal): order ideals, cofinal sets and the Rasiowa-Sikorski lemma (#2850)
We define order ideals and cofinal sets, and use them to prove the (very simple) Rasiowa-Sikorski lemma: given a countable family of cofinal subsets of an inhabited preorder, there is an upwards directed set meeting each one. This provides an API for certain recursive constructions.

2020-06-08 17:34:19 d204daa
chore(*): add docs and nolints (#2990)
Other changes:
* Reuse `gmultiples_hom` for `AddCommGroup.as_hom`.
* Reuse `add_monoid_hom.ext_int` for `AddCommGroup.int_hom_ext`.
* Drop the following definitions, define an `instance` right away
  instead:
  - `algebra.div`;
  - `monoid_hom.one`, `add_monoid_hom.zero`;
  - `monoid_hom.mul`, `add_monoid_hom.add`;
  - `monoid_hom.inv`, `add_monoid_hom.neg`.

2020-06-08 17:34:17 9fba817
refactor(algebra/*): move `commute` below `ring` in `import`s (#2973)
Fixes #1865
API changes:
* drop lemmas about unbundled `center`;
* add `to_additive` to `semiconj_by` and `commute`;
* drop `inv_comm_of_comm` in favor of `commute.left_inv`,
  same with `inv_comm_of_comm` and `commute.left_inv'`;
* rename `monoid_hom.map_commute` to `commute.map`, same with
  `semiconj_by`;
* drop `commute.cast_*_*` and `nat/int/rat.mul_cast_comm`, add
  `nat/int/rat.cast_commute` and `nat.int.rat.commute_cast`;
* add `commute.mul_fpow`.

2020-06-08 16:39:55 2caf479
feat(data/matrix/basic): add bit0, bit1 lemmas (#2987)
Based on a conversation in
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Matrix.20equality.20by.20extensionality
we define simp lemmas for matrices represented by numerals.
This should result in better representation of scalar multiples of
 `one_val : matrix n n a`.

2020-06-08 15:06:15 3ca4c27
chore(algebra/ordered_ring): use le instead of ge (#2986)

2020-06-08 15:06:12 47f7335
feat(data/nat/digits): digits, and divisibility tests for Freek 85 (#2686)
I couldn't quite believe how much low hanging fruit there is on Lean's attempt at Freek's list, and so took a moment to do surely the lowest of the low...
This provides `digits b n`, which extracts the digits of a natural number `n` with respect to a base `b`, and `of_digits b L`, which reconstitutes a number from its digits, proves a few simple facts about these functions, and proves the usual divisibility by 3, 9, and 11 tests.

2020-06-08 13:54:41 a793042
feat(ring_theory/fractional_ideal): pushforward of fractional ideals (#2984)
Extend `submodule.map` to fractional ideals by showing that the pushforward is also fractional.
For this, we need a slightly tweaked definition of fractional ideal: if we localize `R` at the submonoid `S`, the old definition required a nonzero `x : R` such that `xI ≤ R`, and the new definition requires `x ∈ S` instead. In the most common case, `S = non_zero_divisors R`, the results are exactly the same, and all operations are still the same.
A practical use of these pushforwards is included: `canonical_equiv` states fractional ideals don't depend on choice of localization map.

2020-06-08 07:55:43 c360e01
feat(ring/localization): add fraction map for int to rat cast (#2921)

2020-06-08 07:00:32 592f769
feat(dynamics/circle): define translation number of a lift of a circle homeo (#2974)
Define a structure `circle_deg1_lift`, a function `translation_number : circle_deg1_lift → ℝ`, and prove some basic properties

2020-06-07 17:42:45 edd0209
ci(deploy_docs.sh): generalize for use in doc-gen CI (#2978)
This moves some installation steps out of `deploy_docs.sh` script and makes it accept several path arguments so that it can be re-used in the CI for `doc-gen`. 
The associated `doc-gen` PR: https://github.com/leanprover-community/doc-gen/pull/27 will be updated after this is merged.

2020-06-07 16:14:35 be21b9a
fix(data/nat/basic): use protected attribute (#2976)

2020-06-07 11:42:06 516d9b5
chore(scripts): update nolints.txt (#2975)
I am happy to remove some nolints for you!

2020-06-07 09:39:31 a7f0069
chore(algebra/ring): fix docs, `def`/`lemma` (#2972)

2020-06-07 04:23:17 16ad1b4
chore(topology/basic): remove unneeded `mk_protected` (#2971)
It was already fixed by adding `@[protect_proj]`.

2020-06-07 03:29:48 b59f777
feat(category_theory/eq_to_hom): functor extensionality using heq (#2712)
Used in https://github.com/rwbarton/lean-homotopy-theory.
Also proves `faithful.div_comp`, but using it would create an import loop
so for now I just leave a comment.

2020-06-06 20:56:40 2a36d25
chore(analysis/normed_space/mazur_ulam): add `to_affine_map` (#2963)

2020-06-06 18:14:53 a44c9a1
chore(*): protect some definitions to get rid of _root_ (#2846)
These were amongst the worst offenders.

2020-06-06 17:40:41 e48c2af
feat(data/padics/padic_norm): New padic_val_nat convenience functions (#2970)
Convenience functions to allow us to deal either with the p-adic valuation or with multiplicity in the naturals, depending on what is locally convenient.

2020-06-06 17:40:39 589bdb9
feat(number_theory/lucas_lehmer): prime (2^127 - 1) (#2842)
This PR
1. proves the sufficiency of the Lucas-Lehmer test for Mersenne primes
2. provides a tactic that uses `norm_num` to do each step of the calculation of Lucas-Lehmer residues
3. proves 2^127 - 1 = 170141183460469231731687303715884105727 is prime
It doesn't
1. prove the necessity of the Lucas-Lehmer test (mathlib certainly has the necessary material if someone wants to do this)
2. use the trick `n ≡ (n % 2^p) + (n / 2^p) [MOD 2^p - 1]` that is essential to calculating Lucas-Lehmer residues quickly
3. manage to prove any "computer era" primes are prime! (Although my guess is that 2^521 - 1 would run in <1 day with the current implementation.)
I think using "the trick" is very plausible, and would be a fun project for someone who wanted to experiment with certified/fast arithmetic in Lean. It likely would make much larger Mersenne primes accessible.
This is a tidy-up and completion of work started by a student, Ainsley Pahljina.

2020-06-06 15:39:02 ed5f636
chore(algebra/group_with_zero_power): review (#2966)
List of changes:
* Rename `gpow_neg_succ` to `gpow_neg_succ_of_nat` to match other names in `int` namespace.
* Add `units.coe_gpow`.
* Remove `fpow_neg_succ`, leave `fpow_neg_succ_of_nat`.
* Rewrite the proof of `fpow_add` in the same way I rewrote the proof of `gpow_add`.
* Make argument `a` implicit in some lemmas because they have an argument `ha : a ≠ 0`.
* Remove `fpow_inv`. This was a copy of `fpow_neg_one` with a misleading name.
* Remove `unit_pow` in favor of a more general `units.coe_pow`.
* Remove `unit_gpow`, add a more general `units.coe_gpow'` instead.

2020-06-06 15:05:30 2f028a8
feat(analysis/convex/specific_functions): convexity of rpow (#2965)
The function `x -> x^p` is convex on `[0, +\infty)` when `p \ge 1`.

2020-06-06 13:23:11 f096a74
fix(tactic/ring_exp): `ring_exp` now recognizes that `2^(n+1+1) = 2 * 2^(n+1)` (#2929)
[Zulip thread with bug report](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/ring_exp.20needs.20ring).
The problem was a missing lemma so that `norm_num` could fire on `x^y` if `x` and `y` are coefficients.

2020-06-06 09:55:46 6f27271
fix(documentation): fix a typo in the readme (#2969)

2020-06-06 08:01:08 d1ae307
chore(algebra/ordered_group): add `exists_pos_add_of_lt` (#2967)
Also drop `protected` on `_root_.zero_lt_iff_ne_zero`.

2020-06-06 07:15:17 d18061f
chore(algebra/add_torsor): a few more lemmas and implicit args (#2964)

2020-06-05 16:16:43 1b2048d
feat(analysis/special_functions/pow): rpow is differentiable (#2930)
Differentiability of the real power function `x ↦ x^p`. Also register the lemmas about the composition with a function to make sure that the simplifier can handle automatically the differentiability of `x ↦ (f x)^p` and more complicated expressions involving powers.

2020-06-05 13:39:37 5c851bd
fix(tactic/squeeze_simp): make `squeeze_simp [←...]` work (#2961)
`squeeze_simp` parses the argument list using a function in core Lean, and when support for backwards arguments was added to `simp`, it used a new function to parse the additional structure. This PR fixes the TODO left in the code to switch `squeeze_simp` to the new function by deleting the code that needed it - it wasn't used anyway!
To add a test for the fix, I moved the single existing `squeeze_simp` test from the deprecated file `examples.lean` to a new file.

2020-06-05 11:58:53 a433eb0
feat(analysis/special_functions/pow): real powers on ennreal (#2951)
Real powers of extended nonnegative real numbers. We develop an API based on that of real powers of reals and nnreals, proving the corresponding lemmas.

2020-06-05 10:41:53 fd623d6
feat(data/set/intervals/image_preimage): new file (#2958)
* Create a file for lemmas like
  `(λ x, x + a) '' Icc b c = Icc (b + a) (b + c)`.
* Prove lemmas about images and preimages of all intervals under
  `x ↦ x ± a`, `x ↦ a ± x`, and `x ↦ -x`.
* Move lemmas about multiplication from `basic`.

2020-06-05 10:10:03 1ef65c9
feat(linear_algebra/quadratic_form): more constructions for quadratic forms (#2949)
Define multiplication of two linear forms to give a quadratic form and addition of quadratic forms. With these definitions, we can write a generic binary quadratic form as `a • proj R₁ 0 0 + b • proj R₁ 0 1 + c • proj R₁ 1 1 : quadratic_form R₁ (fin 2 → R₁)`.
In order to prove the linearity conditions on the constructions, there are new `simp` lemmas `polar_add_left`, `polar_smul_left`, `polar_add_right` and `polar_smul_right` copying from the corresponding fields of the `quadratic_form` structure, that use `⇑ Q` instead of `Q.to_fun`. The original field names have a `'` appended to avoid name clashes.

2020-06-05 08:41:12 31ceb62
feat(data/int|nat/basic): add `add_monoid_hom.ext_nat/int` (#2957)

2020-06-05 08:41:10 edb4422
feat(algebra/add_torsor): add `equiv.const_vadd` and `equiv.vadd_const` (#2907)
Also define their `isometric.*` versions in `analysis/normed_space/add_torsor`.

2020-06-05 07:28:47 a130c73
feat(topology/algebra/ordered): list of preconnected sets (#2943)
A subset of a densely ordered conditionally complete lattice (e.g., `ℝ`) with order topology is preconnected if and only if it is one of the intervals.

2020-06-05 05:31:21 8f89bd8
chore(algebra/group_power): simplify a proof (#2955)

2020-06-05 05:31:19 d7fa405
chore(algebra/*): merge `inv_inv''` with `inv_inv'` (#2954)

2020-06-05 05:31:17 8161888
feat(group_theory/subgroup): define normal bundled subgroups (#2947)
Most proofs are adapted from `deprecated/subgroup`.

2020-06-05 05:31:15 2131382
feat(data/setoid/partition): some lemmas about partitions (#2937)

2020-06-05 04:53:19 80a52e9
chore(analysis/convex/basic): add `finset.convex_hull_eq` (#2956)

2020-06-04 18:38:01 2ceb7f7
feat(analysis/convex): preparatory statement for caratheodory (#2944)
Proves
```lean
lemma convex_hull_eq_union_convex_hull_finite_subsets (s : set E) :
  convex_hull s = ⋃ (t : finset E) (w : ↑t ⊆ s), convex_hull ↑t
```

2020-06-04 18:05:52 beb5d45
chore(scripts): update nolints.txt (#2952)
I am happy to remove some nolints for you!

2020-06-04 16:18:37 1a29796
chore(is_ring_hom): remove some uses of is_ring_hom (#2884)
This PR deletes the definitions `is_ring_anti_hom` and `ring_anti_equiv`, in favour of using the bundled `R →+* Rᵒᵖ` and `R ≃+* Rᵒᵖ`. It also changes the definition of `ring_invo`.
This is work towards removing the deprecated `is_*_hom` family.

2020-06-04 15:38:26 7d803a9
feat(topology/metric_space/isometry): group structure on isometries (#2950)
Closes #2908

2020-06-04 15:38:24 add0c9a
feat(ring/localization): add construction of localization as a quotient type (#2922)

2020-06-04 15:06:53 2dbf550
feat(ring_theory/eisenstein_criterion): Eisenstein's criterion (#2946)

2020-06-04 14:28:44 c2e78d2
refactor(data/zmod): generalize zmod.cast_hom (#2900)
Currently, `zmod.cast_hom` would cast `zmod n` to rings `R` of characteristic `n`.
This PR builds `cast_hom` for rings `R` with characteristic `m` that divides `n`.

2020-06-04 07:22:09 e397b4c
chore(scripts): update nolints.txt (#2948)
I am happy to remove some nolints for you!

2020-06-04 04:42:31 5744f89
chore(*): fix some `ge_or_gt` lint issues (#2945)
Also rename a few definitions:
* `ge_of_forall_ge_sub` : `le_of_forall_sub_le`;
* `power_series.order_ge_nat` : `power_series.nat_le_order`;
* `power_series.order_ge`: `power_series.le_order`;

2020-06-03 16:19:29 ef6d8d9
refactor(analysis/specific_limits): prove `0 < r → (1+r)^n→∞` for semirings (#2935)
* Add `add_one_pow_unbounded_of_pos` and
  `tendsto_add_one_pow_at_top_at_top_of_pos` assuming
  `[linear_ordered_semiring α]` `[archimedean α]`.
* Rename `tendsto_pow_at_top_at_top_of_gt_1` to
  `tendsto_pow_at_top_at_top_of_one_lt`, generalize to an archimedean
  ordered ring.
* Rename `tendsto_pow_at_top_at_top_of_gt_1_nat` to
  `nat.tendsto_pow_at_top_at_top_of_one_lt`.

2020-06-03 15:11:28 1adf204
chore(scripts): update nolints.txt (#2942)
I am happy to remove some nolints for you!

2020-06-03 15:11:26 494b43e
chore(category_theory/limits/over): granularity in forget preserving colimits (#2941)
a bit more granularity for instances about forget preserving colimits

2020-06-03 15:11:24 97265f9
feat(category_theory/limits): dualise a limits result (#2940)
Add the dual of `is_limit.of_cone_equiv`.

2020-06-03 13:41:29 e205228
feat(data/fintype/basic): to_finset_inj (#2938)

2020-06-03 13:41:27 74037cb
feat(topology/algebra/ordered): IVT for two functions (#2933)
Also rename some `is_connected_I*` lemmas to `is_preconnected_I*`.

2020-06-03 13:41:25 f44509c
chore(tactic/localized): lower priority of bad decidability instances in classical locale (#2932)
Also add a decidability instance for complex numbers.
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/monoid_algebra.2Emul_apply/near/199595932
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/slow.20elaboration/near/199543997

2020-06-03 12:09:46 ed91bb2
feat(data/setoid/partition): sUnion _classes (#2936)

2020-06-03 12:09:44 c3221f7
feat(data/rat): denom_div_cast_eq_one_iff (#2934)

2020-06-03 12:09:43 1f2102d
chore(group_theory/group_action): protect_proj attribute for mul_action (#2931)

2020-06-03 12:09:41 687fc51
ci(bors): set `cut_body_after` to `---` (#2927)

2020-06-03 12:09:39 9fc2413
feat(order/iterate): a few more lemmas about `f^[n]` (#2925)

2020-06-03 12:09:37 0ec9c0e
feat(algebra/iterate_hom): add `mul_left_iterate` etc (#2923)

2020-06-03 11:09:01 8d9e541
feat(group_theory/group_action): some lemmas about orbits (#2928)
also remove the simp attribute unfolding the definition of orbit.
Depends on #2924

2020-06-03 09:28:49 5020285
chore(group_theory/group_action): simp attributes on inv_smul_smul and smul_inv_smul (#2924)

2020-06-03 07:59:41 3904374
chore(algebra/ordered_group)`: add `strict_mono.add_const/const_add` (#2926)

2020-06-03 06:31:17 879bad2
feat(analysis/normed_space/enorm): define extended norm (#2897)

2020-06-02 21:15:28 efae3d9
feat(data/mv_polynomial): C_inj and C_injective (#2920)

2020-06-02 19:58:24 607286e
feat(data/*): ring_hom.ext_{nat,int,rat,zmod} (#2918)

2020-06-02 17:27:51 62ec2c5
feat(linear_algebra/matrix): add alg_equiv_matrix (#2919)

2020-06-02 07:41:15 1a4de99
feat(category_theory/limits) equalizer morphism is regular mono (#2916)
The equalizer morphism is a regular mono, and its dual

2020-06-02 06:13:44 1494cc1
feat(order/semiconj_Sup): use `Sup` to semiconjugate functions (#2895)
Formalize two lemmas from a paper by É. Ghys.

2020-06-02 02:13:40 4372d17
chore(scripts): update nolints.txt (#2914)
I am happy to remove some nolints for you!

2020-06-02 00:43:24 eb616cf
chore(*): split long lines (#2913)

2020-06-01 23:39:34 b95f165
chore(group_theory/sub*): move unbundled submonoids and subgroups to `deprecated` (#2912)
* move unbundled submonoids to `deprecated/submonoid.lean`;
* move unbundled subgroups to `deprecated/subgroup.lean`;
* move bundled subgroups to `group_theory/subgroup.lean`;
* unbundled versions import bundled.

2020-06-01 21:26:03 66ce5d0
feat(representation_theory/maschke): Maschke's theorem (#2762)
The final theorem is
```
lemma monoid_algebra.submodule.exists_is_compl
  (not_dvd : ¬(ring_char k ∣ fintype.card G)) (p : submodule (monoid_algebra k G) V) :
  ∃ q : submodule (monoid_algebra k G) V, is_compl p q
```
for `[field k]`.
The core computation, turning a `k`-linear retraction of `k[G]`-linear map into a `k[G]`-linear retraction by averaging over `G`, happens over an arbitrary `[comm_ring k]` in which `[invertible (fintype.card G : k)]`.

2020-06-01 19:40:48 085aade
chore(linear_algebra/affine_space): use implicit args (#2905)
Whenever we have an argument `f : affine_map k V P`, Lean can figure out `k`, `V`, and `P`.

2020-06-01 17:01:58 17296e9
feat(category_theory/abelian): Schur's lemma (#2838)
I wrote this mostly to gain some familiarity with @TwoFX's work on abelian categories from #2817.
That all looked great, and Schur's lemma was pleasantly straightforward.

2020-06-01 15:13:02 2812cdc
fix(ci): check nolints.txt against master (#2906)
Currently, leanprover-community-bot makes an "update nolints" PR if both of the following hold:
- the `nolints` branch doesn't exist, meaning there isn't already an open nolints PR
- `nolints.txt` has been modified compared to HEAD.
This can lead to a duplicate nolints PR (see e.g. #2899 and #2901), since a nolints PR might have been merged after this build on `master` started, but before this step runs.
This PR changes the second check so that it instead compares `nolints.txt` against the most recent `master` commit, which should fix this.

2020-06-01 12:17:18 f142b42
fix(scripts/deploy_docs): correct git push syntax (#2903)
The suggestion I made in #2893 didn't work.

2020-06-01 12:17:17 b405a5e
fix(tactic/equiv_rw): use kdepends_on rather than occurs (#2898)
`kdepends_on t e` and `e.occurs t` sometimes give different answers, and it seems `equiv_rw` wants the behaviour that `kdepends_on` provides.
There is a new test which failed with `occurs`, and succeeds using `kdepends_on`. No other changes.

2020-06-01 11:48:05 b9d485d
chore(data/mv_polynomial): swap the order of mv_polynomial.ext_iff (#2902)
The previous order of implications is not the one you usually want to simp or rw with.

2020-06-01 10:50:43 0485e0f
feat(scripts/deploy_docs): force push generated docs (#2893)
(1) We build the full html docs in every CI run, even though they only get saved on master builds. Just compiling the .lean files used in doc generation should be enough to catch 95% of breaks. I think the bit of extra risk is worth speeding up the CI runs, especially since linting is now as fast as tests + docs. 
(2) The repo hosting the html pages was 1.3gb because we kept every revision. Half of the time spent on doc builds was just checking out the repo. I've deleted the history. This PR changes the build script to overwrite the previous version.

2020-06-01 09:01:28 9172cdf
feat(linear_algebra/affine_space): affine spaces (#2816)
Define (very minimally) affine spaces (as an abbreviation for
add_torsor in the case where the group is a vector space), affine
subspaces, the affine span of a set of points and affine maps.

2020-06-01 06:43:53 6beebb0
chore(scripts): update nolints.txt (#2899)
I am happy to remove some nolints for you!

2020-06-01 05:31:26 7263917
chore(order/complete_lattice): redefine `ord_continuous` (#2886)
Redefine `ord_continuous` using `is_lub` to ensure that the definition
makes sense for `conditionally_complete_lattice`s.

2020-06-01 04:59:52 ea76bd8
chore(scripts): update nolints.txt (#2896)
I am happy to remove some nolints for you!

2020-06-01 03:45:00 5c27885
feat(order/order_iso): group structure on order automorphisms (#2875)
Also add a few missing lemmas about `order_iso`

2020-06-01 01:58:08 73f95a7
chore(algebra/group): move defs to `defs.lean` (#2885)
Also delete the aliases `eq_of_add_eq_add_left` and `eq_of_add_eq_add_right`.

2020-05-31 20:01:07 d3fc918
chore(scripts): update nolints.txt (#2892)
I am happy to remove some nolints for you!

2020-05-31 18:58:17 1fd5195
chore(data/equiv/mul_add): review (#2874)
* make `mul_aut` and `add_aut` reducible to get `coe_fn`
* add some `coe_*` lemmas

2020-05-31 17:05:57 7c7e866
chore(*): update to lean 3.15.0 (#2851)
The main effect for mathlib comes from https://github.com/leanprover-community/lean/pull/282, which changes the elaboration strategy for structure instance literals (`{ foo := 42 }`).  There are two points where we need to pay attention:
1. Avoid sourcing (`{ ..e }` where e.g. `e : euclidean_domain α`) for fields like `add`, `mul`, `zero`, etc.  Instead write `{ add := (+), mul := (*), zero := 0, ..e }`.  The reason is that `{ ..e }` is equivalent to `{ mul := euclidean_domain.mul, ..e }`.  And `euclidean_domain.mul` should never be mentioned.
I'm not completely sure if this issue remains visible once the structure literal has been elaborated, but this hasn't changed since 3.14.  For now, my advice is: if you get weird errors like "cannot unify `a * b` and `?m_1 * ?m_2` in a structure literal, add `mul := (*)`.
2. `refine { le := (≤), .. }; simp` is slower.  This is because references to `(≤)` are no longer reduced to `le` in the subgoals.  If a subgoal like `a ≤ b → b ≤ a → a = b` was stated for preorders (because `partial_order` extends `preorder`), then the `(≤)` will contain a `preorder` subterm.  This subterm also contains other subgoals (proofs of reflexivity and transitivity).  Therefore the goals are larger than you might expect:
```
∀ (a b : α),
    @has_le.le.{u} α
      (@preorder.to_has_le.{u} α
         (@preorder.mk.{u} α le (@lattice.lt._default.{u} α le)
            (@conditionally_complete_lattice.copy._aux_1.{u} α c le eq_le sup eq_sup inf eq_inf Sup eq_Sup Inf eq_Inf)
            (@conditionally_complete_lattice.copy._aux_2.{u} α c le eq_le sup eq_sup inf eq_inf Sup eq_Sup Inf eq_Inf)
            (λ (a b : α), iff.refl (@has_lt.lt.{u} α (@has_lt.mk.{u} α (@lattice.lt._default.{u} α le)) a b))))
      a
      b →
    @has_le.le.{u} α
      (@preorder.to_has_le.{u} α
         (@preorder.mk.{u} α le (@lattice.lt._default.{u} α le)
            (@conditionally_complete_lattice.copy._aux_1.{u} α c le eq_le sup eq_sup inf eq_inf Sup eq_Sup Inf eq_Inf)
            (@conditionally_complete_lattice.copy._aux_2.{u} α c le eq_le sup eq_sup inf eq_inf Sup eq_Sup Inf eq_Inf)
            (λ (a b : α), iff.refl (@has_lt.lt.{u} α (@has_lt.mk.{u} α (@lattice.lt._default.{u} α le)) a b))))
      b
      a →
    @eq.{u+1} α a b
```
Advice: in cases such as this, try `refine { le := (≤), .. }; abstract { simp }` to reduce the size of the (dependent) subgoals.
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Lean.203.2E15.2E0).

2020-05-31 15:03:10 25fc0a8
feat(field_theory/splitting_field): lemmas (#2887)

2020-05-31 06:22:54 13b34b3
chore(*): split long lines (#2883)
Also move docs for `control/fold` from a comment to a module docstring.

2020-05-31 04:59:04 a285049
chore(algebra/group_hom): rename `add_monoid.smul` to `nsmul` (#2861)
Also drop `•` as a notation for two `smul`s  declared in this file,
use `•ℕ` and `•ℤ` instead.
This way one can immediately see that a lemma uses `nsmul`/`gsmul`, not `has_scalar.smul`.

2020-05-31 01:56:14 28e79d4
chore(data/set/basic): add some lemmas to `function.surjective` (#2876)
This way they can be used with dot notation. Also rename
`set.surjective_preimage` to
`function.surjective.injective_preimage`. I think that the old name
was misleading.

2020-05-31 01:56:12 297806e
feat(topology/homeomorph): sum_prod_distrib (#2870)
Also modify the `inv_fun` of `equiv.sum_prod_distrib` to have
more useful definitional behavior. This also simplifies
`measurable_equiv.sum_prod_distrib`.

2020-05-30 22:43:58 0827a30
feat(tactic/noncomm_ring): add noncomm_ring tactic (#2858)
Fixes https://github.com/leanprover-community/mathlib/issues/2727

2020-05-30 21:15:08 6e581ef
chore(scripts): update nolints.txt (#2878)
I am happy to remove some nolints for you!

2020-05-30 19:55:19 c034b4c
chore(order/bounds): +2 lemmas, fix a name (#2877)

2020-05-30 19:08:27 9d76ac2
chore(scripts): update nolints.txt (#2873)
I am happy to remove some nolints for you!

2020-05-30 18:01:32 f05acc8
feat(group_theory/group_action): orbit_equiv_quotient_stabilizer_symm_apply and docs (#2864)

2020-05-30 16:24:08 67f1951
refactor(algebra/module): change module into an abbreviation for semimodule (#2848)
The file `algebra/module.lean` contains the lines
```
There were several attempts to make `module` an abbreviation of `semimodule` but this makes
  class instance search too hard for Lean 3.
```
It turns out that this was too hard for Lean 3 until recently, but this is not too hard for Lean 3.14. This PR removes these two lines, and changes the files accordingly.
This means that the basic objects of linear algebra are now semimodules over semiring, making it possible to talk about matrices with natural number coefficients or apply general results on multilinear maps to get the binomial or the multinomial formula.
A linear map is now defined over semirings, between semimodules which are `add_comm_monoid`s. For some statements, you need to have an `add_comm_group`, and a `ring` or a `comm_semiring` or a `comm_ring`. I have not tried to lower the possible typeclass assumptions like this in all files, but I have done it carefully in the following files:
* `algebra/module`
* `linear_algebra/basic`
* `linear_algebra/multilinear`
* `topology/algebra/module`
* `topology/algebra/multilinear`
Other files can be optimised later in the same way when needed, but this PR is already big enough.
I have also fixed the breakage in all the other files. It was sometimes completely mysterious (in tensor products, I had to replace several times `linear_map.id.flip` with `linear_map.flip linear_map.id`), but globally all right. I have tweaked a few instance priorities to make sure that things don't go too bad: there are often additional steps in typeclass inference, going from `ring` to `semiring` and from `add_comm_group` to `add_comm_monoid`, so I have increased their priority (putting it strictly between 100 and 1000), and adjusted some other priorities to get more canonical instance paths, fixing some preexisting weirdnesses (notably in multilinear maps). One place where I really had to help Lean is with normed spaces of continuous multilinear maps, where instance search is just too big.
I am aware that this will be a nightmare to refer, but as often with big refactor it's an "all or nothing" PR, impossible to split in tiny pieces.

2020-05-30 15:05:49 cc06d53
feat(algebra/big_operators): prod_ne_zero (#2863)

2020-05-30 13:12:33 b40ac2a
chore(topology): make topological_space fields protected (#2867)
This uses the recent `protect_proj` attribute (#2855).

2020-05-30 07:33:44 62cb7f2
feat(geometry/euclidean): Euclidean space (#2852)
Define Euclidean affine spaces (not necessarily finite-dimensional),
and a corresponding instance for the standard Euclidean space `fin n → ℝ`.
This just defines the type class and the instance, with some other
basic geometric definitions and results to be added separately once
this is in.
I haven't attempted to do anything about the `euclidean_space`
definition in geometry/manifold/real_instances.lean that comes with a
comment that it uses the wrong norm.  That might better be refactored
by someone familiar with the manifold code.
By defining Euclidean spaces such that they are defined to be metric
spaces, and providing an instance, this probably implicitly gives item
91 "The Triangle Inequality" from the 100-theorems list, if that's
taken to have a geometric interpretation as in the Coq version, but
it's not very clear how something implicit like that from various
different pieces of the library, and where the item on the list could
be interpreted in several different ways anyway, should be entered in
100.yaml.

2020-05-30 06:12:38 74d446d
feat(order/iterate): some inequalities on `f^[n] x` and `g^[n] x` (#2859)

2020-05-30 04:46:16 aa47bba
feat(data/equiv): equiv_of_subsingleton_of_subsingleton (#2856)

2020-05-30 00:45:00 5455fe1
chore(scripts): update nolints.txt (#2862)
I am happy to remove some nolints for you!

2020-05-29 22:20:28 f95e809
chore(algebra): displace zero_ne_one_class with nonzero and make no_zero_divisors a Prop (#2847)
- `[nonzero_semiring α]` becomes `[semiring α] [nonzero α]`
- `[nonzero_comm_semiring α]` becomes `[comm_semiring α] [nonzero α]`
- `[nonzero_comm_ring α]` becomes `[comm_ring α] [nonzero α]`
- `no_zero_divisors` is now a `Prop`
- `units.ne_zero` (originally for `domain`) merges into `units.coe_ne_zero` (originally for `nonzero_comm_semiring`)

2020-05-29 20:46:37 b2f643e
feat(dynamics/fixed_points): define `is_fixed_pt` (#2857)
Define `function.is_fixed_pt` and prove some basic properties.

2020-05-29 16:24:04 836184a
feat(tactic/protect_proj): protect_proj attribute for structures (#2855)
This attribute protect the projections of a structure that is being defined. 
There were some errors in Euclidean domain caused by `rw` using `euclidean_domain.mul_assoc` instead of `mul_assoc` because the `euclidean_domain` namespace was open. This fixes this problem, and makes the `group` and `ring` etc. namespaces more usable.

2020-05-29 16:24:02 77674a0
chore(category_theory): T50000 challenge (#2840)
A lame effort at making something compile with `-T50000`. No actual speed improvement, just split up a definition into pieces.

2020-05-29 16:24:00 07cdafe
feat(tactic/with_local_reducibility): alter reducibility attributes locally (#2820)

2020-05-29 14:48:35 4a5799e
feat(data/equiv/basic): subtype_prod_equiv_prod (#2717)

2020-05-29 06:50:56 b013b2d
feat(ring_theory): define subsemirings (#2837)
~~Depends on #2836,~~ needs a better module docstring.
Some lemmas are missing, most notably `(subsemiring.closure s : set R) = add_submonoid.closure (submonoid.closure s)`.

2020-05-29 05:57:08 6c046c7
chore(data/setoid): split into `basic` and `partition` (#2853)
The `basic` part has slightly fewer dependencies and `partition` part
is never used in `mathlib`.

2020-05-28 23:10:08 543ae52
feat(analysis/normed_space/add_torsor): normed_add_torsor (#2814)
Define the metric space structure on torsors of additive normed group
actions.  The motivating case is Euclidean affine spaces.
See
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Some.20olympiad.20formalisations
for the discussion leading to this particular handling of the
distance.
Note: I'm not sure what the right way is to address the
dangerous_instance linter error "The following arguments become
metavariables. argument 1: (V : Type u_1)".

2020-05-28 13:26:09 e9ba32d
chore(scripts): update nolints.txt (#2849)
I am happy to remove some nolints for you!

2020-05-28 11:54:54 ca95726
feat(algebra/free) additive versions, docs. (#2755)
https://github.com/leanprover-community/mathlib/issues/930

2020-05-28 08:37:23 cbf4740
refactor(data/equiv/local_equiv): use dot notation for `eq_on_source` (#2830)
Also reuse more lemmas from `data/set/function`.

2020-05-28 08:37:21 28dc2ed
fix(tactic/suggest): normalize synonyms uniformly in goal and lemma (#2829)
This change is intended to make `library_search` and `suggest` a bit more robust in unfolding the types of the goal and lemma in order to determine which lemmas it will try to apply.
Before, there were two ad-hoc systems to map a head symbol to the name(s) that it should match, now there is only one ad-hoc function that does so.  As a consequence, `library_search` should be able to use a lemma with return type `a > b` to close the goal `b < a`, and use `lemma foo : p → false` to close the goal `¬ p`.
(The `>` normalization shouldn't "really" be needed if we all strictly followed the `gt_or_ge` linter but we don't and the failure has already caused confusion.)
[Discussion on Zulip starts here](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/How.20to.20get.20familiar.20enough.20with.20Mathlib.20to.20use.20it/near/198746479)

2020-05-28 07:50:25 005763e
feat(linear_algebra/lagrange): Lagrange interpolation (#2764)
Fixes #2600.

2020-05-28 07:50:22 fa371f7
feat(linear_algebra/bilinear_form): introduce adjoints of linear maps (#2746)
We also use this to define the Lie algebra structure on skew-adjoint
endomorphisms / matrices. The motivation is to enable us to define the
classical Lie algebras.

2020-05-28 07:02:07 315ba3e
feat(category_theory): show an epi regular mono is an iso (#2781)
a really minor proof to show that a regular mono which is epi is an iso

2020-05-27 21:30:17 efb4e95
refactor(*iterate*): move to `function`; renamings (#2832)
* move lemmas about `iterate` from `data.nat.basic` to `logic.function.iterate`;
* move lemmas like `nat.iterate_succ` to `function` namespace;
* rename some lemmas:
  - `iterate₀` to `iterate_fixed`,
  - `iterate₁` to `semiconj.iterate_right`, see also `commute.iterate_left` and `commute.iterate_right`;
  - `iterate₂` to `semiconj₂.iterate`;
  - `iterate_cancel` to `left_inverse.iterate` and `right_inverse.iterate`;
* move lemmas `*_hom.iterate_map_*` to `algebra/iterate_hom`.

2020-05-27 18:57:00 1988364
feat(src/ring_theory): in a PID, all fractional ideals are invertible (#2826)
This would show that all PIDs are Dedekind domains, once we have a definition of Dedekind domain (we could define it right now, but it would depend on the choice of field of fractions).
In `localization.lean`, I added a few small lemmas on localizations (`localization.exists_integer_multiple` and `fraction_map.to_map_eq_zero_iff`). @101damnations, are these additions compatible with your branches? I'm happy to change them if not.

2020-05-27 13:41:59 c812ebe
feat(category_theory/abelian): abelian categories (#2817)
~~Depends on #2779.~~ Closes #2178. I will give instances for `AddCommGroup` and `Module`, but since this PR is large already, I'll wait until the next PR with that.

2020-05-27 12:11:16 2deb6b4
feat(algebra/continued_fractions): add computation definitions and basic translation lemmas (#2797)
### What
- add definitions of the computation of a continued fraction for a given value (in a given floor field)
- add very basic, mostly technical lemmas to convert between the different structures used by the computation
### Why
- I want to be able to compute the continued fraction of a value. I next will add termination, approximation, and correctness lemmas for the definitions in this commit (I already have them lying around on my PC for ages :cold_sweat: )
- The technical lemmas are needed for the next bunch of commits.
### How
- Follow the straightforward approach as described, for example, on [Wikipedia](https://en.wikipedia.org/wiki/Continued_fraction#Calculating_continued_fraction_representations)

2020-05-27 12:11:14 798c61b
feat(data/nat/prime): eq_prime_pow_of_dvd_least_prime_pow (#2791)
Proves
```lean
lemma eq_prime_pow_of_dvd_least_prime_pow
  (a p k : ℕ) (pp : prime p) (h₁ : ¬(a ∣ p^k)) (h₂ : a ∣ p^(k+1)) :
  a = p^(k+1)
```

2020-05-27 12:11:12 85f08ec
feat(CI): add -T100000 to the build step in CI (#2276)
This PR adds `-T100000` to CI. This is the default timeout setting in the VS Code extension and emacs.
With some exceptions, noted with `FIXME` comments mentioning `-T50000`, the library now compiles with `-T50000`:
- [ ] `has_sum.has_sum_ne_zero` in `src/topology/algebra/infinite_sum.lean`, where I don't really understand why it is slow.
- [ ] `exists_norm_eq_infi_of_complete_convex` in `src/analysis/normed_space/real_inner_product.lean`, which has a giant proof which should be rewritten in several steps.
- [ ] `tangent_bundle_core.coord_change_comp` in `src/geometry/manifold/basic_smooth_bundle.lean`.
- [ ] `change_origin_radius` in `src/analysis/analytic/basic.lean`
There are 3 `def`s related to category theory which also don't compile:
- [ ] `adj₁` in `src/topology/category/Top/adjunctions.lean`
- [x] `cones_equiv_inverse` in `src/category_theory/limits/over.lean` (addressed in #2840)
- [ ] `prod_functor` in `src/category_theory/limits/shapes/binary_products.lean`
This proof no longer causes problems with `-T50000`, but it should still be broken up at some point.
- [ ] `simple_func_sequence_tendsto` in `src/measure_theory/simple_func_dense.lean`, which has a giant proof which should be rewritten in several steps. ~~This one is really bad, and doesn't even compile with `-T100000`.~~ 
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/-T50000.20challenge).

2020-05-27 11:24:35 7c5eab3
chore(scripts): update nolints.txt (#2841)
I am happy to remove some nolints for you!

2020-05-27 08:57:27 a7063ec
feat(ring_theory/prod): ring homs to/from `R × S` (#2836)
* move some instances from `algebra/pi_instances`;
* add `prod.comm_semiring`;
* define `ring_hom.fst`, `ring_hom.snd`, `ring_hom.prod`, and
  `ring_hom.prod_map`.

2020-05-27 08:57:25 6ee3a47
chore(data/equiv/basic): simplify some defs, add `coe` lemmas (#2835)
Use functions like `prod.map`, `curry`, `uncurry`, `sum.elim`, `sum.map` to define equivalences.

2020-05-27 08:57:23 2a48225
feat(computability/tm_to_partrec): partrec functions are TM-computable (#2792)
A construction of a Turing machine that can evaluate any partial recursive function. This PR contains the bulk of the work but the end to end theorem (which asserts that any `computable` function can be evaluated by a Turing machine) has not yet been stated.

2020-05-27 07:09:31 0d6d0b0
chore(*): split long lines, unindent in namespaces (#2834)
The diff is large but here is the word diff (search for `[-` or `[+`):
``` shellsession
$ git diff --word-diff=plain --ignore-all-space master | grep '(^---|\[-|\[\+)'
--- a/src/algebra/big_operators.lean
[-λ l, @is_group_anti_hom.map_prod _ _ _ _ _ inv_is_group_anti_hom l-]-- TODO there is probably a cleaner proof of this
        { have : [-(to_finset s).sum (λx,-]{+∑ x in s.to_finset,+} ite (x = a) 1 [-0)-]{+0+} = [-({a} : finset α).sum (λx,-]{+∑ x in {a},+} ite (x = a) 1 [-0),-]
[-          { apply (finset.sum_subset _ _).symm,-]{+0,+}
          { [-intros _ H, rwa mem_singleton.1 H },-]
[-            { exact λ _ _ H, if_neg (mt finset.mem_singleton.2 H) }-]{+rw [finset.sum_ite_eq', if_pos h, finset.sum_singleton, if_pos rfl],+} },
--- a/src/algebra/category/Group/basic.lean
[-a-]{+an+} `add_equiv` between `add_group`s."]
--- a/src/algebra/category/Group/colimits.lean
--- a/src/algebra/category/Mon/basic.lean
[-a-]{+an+} `add_equiv` between `add_monoid`s."]
[-a-]{+an+} `add_equiv` between `add_comm_monoid`s."]
--- a/src/algebra/free.lean
--- a/src/algebra/group/units.lean
--- a/src/algebra/group/units_hom.lean
--- a/src/category_theory/category/default.lean
[-universes v u-]-- The order in this declaration matters: v often needs to be explicitly specified while u often
--- a/src/control/monad/cont.lean
    simp [-[call_cc,except_t.call_cc,call_cc_bind_right,except_t.goto_mk_label,map_eq_bind_pure_comp,bind_assoc,@call_cc_bind_left-]{+[call_cc,except_t.call_cc,call_cc_bind_right,except_t.goto_mk_label,map_eq_bind_pure_comp,+}
  call_cc_bind_left  := by { intros, simp [-[call_cc,option_t.call_cc,call_cc_bind_right,option_t.goto_mk_label,map_eq_bind_pure_comp,bind_assoc,@call_cc_bind_left-]{+[call_cc,option_t.call_cc,call_cc_bind_right,+}
  call_cc_bind_left  := by { intros, simp [-[call_cc,state_t.call_cc,call_cc_bind_left,(>>=),state_t.bind,state_t.goto_mk_label],-]{+[call_cc,state_t.call_cc,call_cc_bind_left,(>>=),+}
  call_cc_dummy := by { intros, simp [-[call_cc,state_t.call_cc,call_cc_bind_right,(>>=),state_t.bind,@call_cc_dummy-]{+[call_cc,state_t.call_cc,call_cc_bind_right,(>>=),+}
  call_cc_bind_left  := by { intros, simp [-[call_cc,reader_t.call_cc,call_cc_bind_left,reader_t.goto_mk_label],-]{+[call_cc,reader_t.call_cc,call_cc_bind_left,+}
--- a/src/control/monad/writer.lean
--- a/src/control/traversable/basic.lean
   online at <http://arxiv.org/pdf/1202.2919>[-Synopsis-]
--- a/src/data/analysis/filter.lean
--- a/src/data/equiv/basic.lean
--- a/src/data/fin.lean
--- a/src/data/finset.lean
  [-by-]{+{+} rw [-[eq],-]{+[eq] },+}
--- a/src/data/hash_map.lean
--- a/src/data/int/basic.lean
--- a/src/data/list/basic.lean
--- a/src/data/list/tfae.lean
--- a/src/data/num/lemmas.lean
[-Properties of the binary representation of integers.-]
--- a/src/data/zsqrtd/basic.lean
--- a/src/group_theory/congruence.lean
with [-a-]{+an+} addition."]
@[to_additive Sup_eq_add_con_gen "The supremum of a set of additive congruence relations [-S-]{+`S`+} equals
--- a/src/group_theory/monoid_localization.lean
--- a/src/group_theory/submonoid.lean
--- a/src/number_theory/dioph.lean
--- a/src/set_theory/ordinal.lean
--- a/src/tactic/apply.lean
--- a/src/tactic/lean_core_docs.lean
--- a/src/tactic/lint/type_classes.lean
--- a/src/tactic/omega/main.lean
--- a/test/coinductive.lean
--- a/test/localized/import3.lean
--- a/test/norm_num.lean
--- a/test/tidy.lean
--- a/test/where.lean
```
P.S.: I don't know how to make `git diff` hide all non-interesting chunks.

2020-05-27 01:18:54 2792c93
feat(ring_theory/fintype): in a finite nonzero_semiring, fintype.card (units R) < fintype.card R (#2793)

2020-05-26 17:35:27 63b8c52
chore(scripts): update nolints.txt (#2833)
I am happy to remove some nolints for you!

2020-05-26 16:47:21 4dfd706
chore(scripts): update nolints.txt (#2831)
I am happy to remove some nolints for you!

2020-05-26 16:47:19 4ca776e
feat(linear_algebra/quadratic_form): equivalence of quadratic forms (#2769)

2020-05-26 15:15:29 9630eca
feat(data/nat/primes): lemmas about min_fac (#2790)

2020-05-26 13:30:46 895f568
perf(tactic/lint): speed up nolint attribute (#2828)
Looking up the nolint attribute only takes 15 seconds out of the 45 minutes, so speeding up this part has little effect.  More importantly, this PR removes one branch from the mathlib repository.

2020-05-26 13:30:44 1cf59fc
chore(src/algebra/ordered_ring.lean): fix linting errors (#2827)
[Mentioned, but not really discussed, in this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/How.20to.20get.20familiar.20enough.20with.20Mathlib.20to.20use.20it/near/198747067).
This PR also removes `mul_pos'` and `mul_nonneg'` lemmas because they are now identical to the improved `mul_pos` and `mul_nonneg`.

2020-05-26 13:30:42 7d86475
feat(data/polynomial): eq_one_of_is_unit_of_monic (#2823)
~~Depends on #2822 ~~

2020-05-26 13:30:40 099ffd3
chore(algebra/free_monoid): use implicit args in `lift` (#2821)

2020-05-26 13:30:38 fc79089
feat(number_theory/primorial): Bound on the primorial function (#2701)
This lemma is needed for Erdös's proof of Bertrand's postulate, but it may be of independent interest.

2020-05-26 11:43:31 2c40bd3
feat(tactic/push_cast): take list of extra simp lemmas (#2825)
closes #2783

2020-05-26 10:40:07 ab2e52e
feat(order/filter/basic): a local left inverse locally equals a local right inverse (#2808)

2020-05-26 10:40:05 8c36b32
feat(order/filter/basic): add `eventually.curry` (#2807)
I'm not sure that this is a good name. Suggestions of better names are welcome.

2020-05-26 10:40:03 597946d
feat(analysis/calculus/implicit): Implicit function theorem (#2749)
Fixes #1849
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/2749.20Implicit.20function.20theorem).

2020-05-26 09:33:44 b4d4d9a
feat(ring_theory/algebra): more on restrict_scalars (#2445)

2020-05-26 08:11:51 ea403b3
feat(algebra/group_with_zero): mul_self_mul_inv (#2795)
I found this lemma was useful for simplifying some expressions without
needing to split into cases or provide a proof that the denominator is
nonzero, and it doesn't show up with library_search.

2020-05-26 06:41:18 1c265e2
feat(data/nat/basic): with_bot lemmas (#2822)

2020-05-26 05:06:40 9bb9956
feat(data/nat/basic): inequalities (#2801)
Adds some simple inequalities about `nat.pow`.

2020-05-26 00:59:03 4b616e6
feat(category_theory/limits): transport lemmas for kernels (#2779)

2020-05-25 20:20:32 aad2dfc
fix(group_with_zero): fix definition of comm_monoid_with_zero (#2818)
Also generate instance comm_group_with_zero -> comm_monoid_with_zero.

2020-05-25 15:03:03 ae5b55b
feat(algebra/ring): ring_hom.map_dvd (#2813)

2020-05-25 12:50:28 52b839f
feat(data/polynomial): is_unit_C (#2812)

2020-05-25 12:50:26 3e0668e
feat(linear_algebra/projection): add `equiv_prod_of_surjective_of_is_compl` (#2787)
If kernels of two surjective linear maps `f`, `g` are complement subspaces,
then `x ↦ (f x, g x)` defines a  linear equivalence.
I also add a version of this equivalence for continuous maps.
Depends on #2785

2020-05-25 12:07:49 60f0b01
feat(logic/function): define `semiconj` and `commute` (#2788)

2020-05-25 10:18:13 96f318c
feat(algebra/group_power): int.nat_abs_pow_two (#2811)

2020-05-25 10:18:11 9da47ad
feat(data/zmod): lemmas about coercions to zmod (#2802)
I'm not particularly happy with the location of these new lemmas within the file `data.zmod`. If anyone has a suggestion that they should be some particular place higher or lower in the file, that would be welcome.

2020-05-25 08:49:00 dd062f0
feat(data/nat/prime): pow_not_prime (#2810)

2020-05-25 07:24:08 a2d5007
chore(topology/algebra/module): prove `fst.prod snd = id` (#2806)

2020-05-25 07:24:07 ccf646d
chore(set_theory/ordinal): use a `protected lemma` to drop a `nolint` (#2805)

2020-05-25 07:24:05 a3b3aa6
fix(tactic/norm_num): workaround int.sub unfolding bug (#2804)
Fixes https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/certificates.20for.20calculations/near/198631936 . Or rather, it works around an issue in how the kernel unfolds applications. The real fix is probably to adjust the definitional height or other heuristics around `add_group_has_sub` and `int.sub` so that tries to prove that they are defeq that way rather than unfolding `bit0` and `bit1`. Here is a MWE for the issue:
```lean
example : int.has_sub = add_group_has_sub := rfl
example :
  (@has_sub.sub ℤ int.has_sub 5000 2 : ℤ) =
  (@has_sub.sub ℤ add_group_has_sub 5000 2) := rfl -- deep recursion
```

2020-05-25 06:35:44 6552f21
feat(algebra/add_torsor): torsors of additive group actions (#2720)
Define torsors of additive group actions, to the extent needed for
(and with notation motivated by) affine spaces, to the extent needed
for Euclidean spaces.  See
https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Some.20olympiad.20formalisations
for the discussion leading to this particular structure.

2020-05-25 05:05:19 518d0fd
feat(data/int/basic): eq_zero_of_dvd_of_nonneg_of_lt (#2803)

2020-05-24 19:02:14 8d352b2
feat(char_p): generalize zmod.neg_one_ne_one (#2796)

2020-05-24 17:52:18 61b57cd
chore(scripts): update nolints.txt (#2799)
I am happy to remove some nolints for you!

2020-05-24 17:03:59 1445e08
chore(scripts): update nolints.txt (#2798)
I am happy to remove some nolints for you!

2020-05-24 16:14:04 8590081
feat(category_theory): Product comparison (#2753)
Construct the product comparison morphism, and show it's an iso iff F preserves binary products.

2020-05-24 15:07:07 292fc04
feat(category_theory): adjunction convenience defs (#2754)
Transport adjunctions along natural isomorphisms, and `is_left_adjoint` or `is_right_adjoint` versions of existing adjunction properties.

2020-05-24 09:09:11 2ef444a
feat(linear_algebra/basic): range of `linear_map.prod` (#2785)
Also make `ker_prod` a `simp` lemma.

2020-05-24 07:37:41 5449203
chore(order/basic): change "minimum" in descriptions to "minimal" (#2789)

2020-05-23 13:13:15 79e296b
doc(archive/100-theorems-list): Update README.md (#2750)
Making the 100.yaml file more discoverable.

2020-05-23 12:26:58 2a3f59a
chore(scripts): update nolints.txt (#2782)
I am happy to remove some nolints for you!

2020-05-23 11:01:14 2b79f1d
feat(ring_theory/ideal_operations): lemmas about ideals and galois connections (#2767)
depends on #2766

2020-05-23 09:33:06 ceb13ba
chore(order/basic): add `monotone.order_dual`, `strict_mono.order_dual` (#2778)
Also split long lines and lint.

2020-05-23 09:33:05 90abd3b
feat(data/fintype): finset.univ_map_embedding (#2765)
Adds the lemma
```
lemma finset.univ_map_embedding {α : Type*} [fintype α] (e : α ↪ α) :
  (finset.univ).map e = finset.univ :=
```

2020-05-23 09:33:02 6948505
feat(data/polynomial): prime_of_degree_eq_one_of_monic (#2745)

2020-05-23 07:44:20 8c1793f
chore(data/equiv): make `equiv.ext` args use { } (#2776)
Other changes:
* rename lemmas `eq_of_to_fun_eq` to `coe_fn_injective`;
* add `left_inverse.eq_right_inverse` and use it to prove `equiv.ext`.

2020-05-22 09:41:03 f66caaa
chore(scripts): update nolints.txt (#2777)
I am happy to remove some nolints for you!

2020-05-22 08:09:58 c6aab26
feat(algebra/invertible): invertible_of_ring_char_not_dvd (#2775)
```
def invertible_of_ring_char_not_dvd {R : Type*} [field R] {t : ℕ} (not_dvd : ¬(ring_char R ∣ t)) :
  invertible (t : R)
```

2020-05-22 08:09:56 58789f7
feat(analysis/normed_space/banach): add `continuous_linear_equiv.of_bijective` (#2774)

2020-05-22 07:28:22 80ad9ed
refactor(ring_theory/localization): characterise ring localizations up to isomorphism (#2714)
Beginnings of ```ring_theory/localization``` refactor from #2675.
It's a bit sad that using the characteristic predicate means Lean can't infer the R-algebra structure of the localization. I've tried to get round this, but I'm not using •, and I've duplicated some fairly random lemmas about modules & algebras to take ```f``` as an explicit argument - mostly just what I needed to make ```fractional_ideal``` work. Should I duplicate more?
My comments in the ```fractional_ideal``` docs about 'preserving definitional equalities' wrt getting an R-module structure from an R-algebra structure: do they make sense? I had some errors about definitional equality of instances which I *think* I fixed after making sure the R-module structure always came from the R-algebra structure, as well as doing a few other things. I never chased up exactly what the errors were or how they went away, so I'm just guessing at my explanation.
Things I've got left to PR to ```ring_theory/localization``` after this: 
- ```away``` (localization at submonoid generated by one element)
- localization as a quotient type & proof it satisfies the char pred
- localization at the complement of a prime ideal and the fact this is a local ring
- more lemmas about fields of fractions
- the order embedding for ideals of the localization vs. ideals of the original ring

2020-05-22 06:26:36 a012d76
chore(linear_algebra/projection): use implicit args in lemmas (#2773)

2020-05-22 06:26:34 749e39f
feat(category_theory): preadditive binary biproducts (#2747)
This PR introduces "preadditive binary biproducts", which correspond to the second definition of biproducts given in #2177.
* Preadditive binary biproducts are binary biproducts.
* In a preadditive category, a binary product is a preadditive binary biproduct.
* This directly implies that `AddCommGroup` has preadditive binary biproducts. The existence of binary coproducts in `AddCommGroup` is then a consequence of abstract nonsense.

2020-05-22 05:08:46 5585e3c
chore(linear_algebra/basic): redefine le on submodule (#2766)
Previously, to prove an `S \le T`, there would be a coercion in the statement after `intro x`. This fixes that.

2020-05-21 22:53:42 a9960ce
chore(scripts): update nolints.txt (#2771)
I am happy to remove some nolints for you!

2020-05-21 20:35:43 6c71874
feat(analysis/normed_space): complemented subspaces (#2738)
Define complemented subspaces and prove some basic facts.

2020-05-21 20:35:41 fd45e28
fix(*): do not nolint simp_nf (#2734)
The `nolint simp_nf` for `subgroup.coe_coe` was hiding an actual nontermination issue.  Please just ping me if you're unsure about the `simp_nf` linter.

2020-05-21 18:58:04 ec01a0d
perf(tactic/lint/simp): speed up `simp_comm` linter (#2760)
This is a fairly unimportant linter, but takes 35% of the linting runtime in my unscientific small-case profiling run.

2020-05-21 15:42:46 d532eb6
feat(order/lattice): sup_left_idem and similar (#2768)

2020-05-21 07:51:07 951b967
refactor(data/nat/basic): use function equality for `iterate` lemmas (#2748)

2020-05-20 19:37:56 a540d79
chore(archive/sensitivity): Clean up function coercion in sensitivity proof (depends on #2756) (#2758)
This formalizes the proof of an old conjecture: `is_awesome Gabriel`. I also took the opportunity to remove type class struggling, which I think is related to the proof of `is_awesome Floris`.
I think @jcommelin should also update this sensitivity file to use his sum notations if applicable.

2020-05-20 18:10:11 3c9bf6b
chore(scripts): update nolints.txt (#2763)
I am happy to remove some nolints for you!

2020-05-20 15:35:04 d6420bd
feat(ring_theory/principal_ideal_domain): definition of principal submodule (#2761)
This PR generalizes the definition of principal ideals to principal submodules. It turns out that it's essentially enough to replace `ideal R` with `submodule R M` in the relevant places. With this change, it's possible to talk about principal fractional ideals (although that development will have to wait #2714 gets merged).
Since the PR already changes the variables used in this file, I took the opportunity to rename them so `[ring α]` becomes `[ring R]`.

2020-05-20 15:35:02 4c3e1a9
feat(algebra): the R-module structure on S-linear maps, for S an R-algebra (#2759)
I couldn't find this already in mathlib, but perhaps I've missed it.

2020-05-20 15:34:59 6df77a6
chore(*): update to Lean 3.14.0 (#2756)
This is an optimistic PR, betting *nothing* will break when moving to Lean 3.14.0.

2020-05-20 15:34:58 164c2e3
chore(category_theory): attributes and a transport proof (#2751)
A couple of cleanups, modified a proof or two so that `@[simps]` can be used, which let me clean up some other proofs. Also a proof that we can transfer that `F` preserves the limit `K` along an isomorphism in `K`.
(Preparation for some PRs from my topos project)

2020-05-20 12:01:53 ab5d0f1
feat(category_theory/binary_products): some product lemmas and their dual (#2752)
A bunch of lemmas about binary products.

2020-05-20 11:03:44 1f00282
docs(linear_algebra/sesquilinear_form): correct module docs (#2757)
@PatrickMassot mentioned that the docs for `sesquilinear_form` mention bilinear forms instead in a few places. This PR corrects them to use "sesquilinear form" everywhere.

2020-05-20 06:18:22 cbe80ed
feat(linear_algebra/projection): projection to a subspace (#2739)
Define equivalence between complement subspaces and projections.

2020-05-19 22:34:25 3c1f9f9
feat(data/nat/choose): sum_range_choose_halfway (#2688)
This is a lemma on the way to proving that the product of primes less than `n` is less than `4 ^ n`, which is itself a lemma in Bertrand's postulate.
The lemma itself is of dubious significance, but it will eventually be necessary for Bertrand, and I want to commit early and often. Brief discussion of this decision at https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Candidate.20for.20inclusion.20in.20mathlib/near/197619722 .
This is my second PR to mathlib; the code is definitely verbose and poorly structured, but I don't know how to fix it. I'm expecting almost no lines of the original to remain by the end of this!

2020-05-19 18:38:27 e3aca90
feat(logic/basic): spaces with a zero or a one are nonempty (#2743)
Register instances that a space with a zero or a one is not empty, with low priority as we don't want to embark on a search for a zero or a one if this is not necessary.
Discussion on Zulip at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/inhabited.20and.20nonempty.20instances/near/198030072

2020-05-19 17:00:43 607767e
feat(algebra/big_operators): reversing an interval doesn't change the product (#2740)
Also use Gauss summation in the Gauss summation formula.
Inspired by #2688

2020-05-19 15:54:58 62c22da
fix(ci): replace 2 old secret names (#2744)
[`lean-3.13.2`](https://github.com/leanprover-community/mathlib/tree/lean-3.13.2) is out of date, since I missed two instances of `DEPLOY_NIGHTLY_GITHUB_TOKEN` in #2737.

2020-05-19 11:50:10 1e18512
chore(*): remove non-canonical `option.decidable_eq_none` instance (#2741)
I also removed the hack in `ulower.primcodable` where I had to use `none = o` instead of `o = none`.

2020-05-19 09:58:39 93b41e5
fix(*): put headings in multiline module docs on their own lines (#2742)
found using regex: `/-! #([^-/])*$`.
These don't render correctly in the mathlib docs. Module doc strings that consist of a heading on its own line are OK so I haven't changed them.
I also moved some descriptive text from copyright headers to module docs, or removed such text if there was already a module doc string.

2020-05-19 09:58:37 3d948bf
feat(analysis/normed_space): interior of `closed_ball` etc (#2723)
* define `sphere x r`
* prove formulas for `interior`, `closure`, and `frontier` of open and closed balls in real normed vector spaces.

2020-05-19 08:28:09 f2cb546
fix(ci): setup git before nolints, rename secret (#2737)
Oops, I broke the update nolints step on master. This should fix it.

2020-05-19 08:28:08 3968f7f
feat(linear_algebra): equiv_of_is_basis' and module.fintype_of_fintype (#2735)

2020-05-19 08:28:05 80b7f97
feat(tactic/localized): fail if unused locale is open (#2718)
This is more in line with the behavior of `open`.
Closes #2702

2020-05-19 08:28:03 3ba7d12
feat(algebra): obtaining algebraic classes through in/surjective maps (#2638)
This is needed for the definition of Witt vectors.

2020-05-19 07:10:15 52aa128
feat(data/equiv): add add_equiv.to_multiplicative (#2732)
We already have `add_monoid_hom.to_multiplicative`. This adds `add_equiv.to_multiplicative`.
It is placed in `data/equiv/mul_add.lean` because `data/equiv/mul_add.lean` already imports `algebra/group/type_tags.lean`.

2020-05-19 06:13:04 906220c
feat(topology/bounded_continuous_function): Normed algebra of bounded continuous functions (#2722)
The space `C(α, γ)` of bounded continuous functions into a normed algebra γ is a normed algebra.  The space of bounded continuous functions into a normed 𝕜-space is a `C(α, 𝕜)`-module.

2020-05-19 03:26:24 01efaeb
feat(ci): run lint and tests in parallel (#2736)
Actions doesn't let us run *steps* in parallel, but we can run *jobs* in parallel. The lint and test jobs are part of the same *workflow*. Understanding Actions terminology is half the battle.

2020-05-18 18:12:30 f01260a
feat(algebra/char_p): eq_iff_modeq_int (#2731)

2020-05-18 16:18:17 9d762df
chore(scripts): update nolints.txt (#2733)
I am happy to remove some nolints for you!

2020-05-18 13:38:47 ff3130d
feat(topology/constructions): topology on ulift (#2716)

2020-05-18 13:38:45 4026bd8
feat(category_theory/full_subcategory): induced category from a groupoid is a groupoid (#2715)
Also some minor cleanup to the same file.

2020-05-18 13:38:43 2fa1d7c
Revert "fix(category_theory/eq_to_hom): remove bad simp lemmas (#1346)" (#2713)
These are good simp lemmas: they push things into a proof-irrelevant position.
This reverts commit 5a309a3aa30fcec122a26f379f05b466ee46fc7a.

2020-05-18 13:38:41 8b42245
refactor(algebra): merge init_.algebra into algebra (#2707)
This is a big refactor PR. It depends on #2697, which brings in the algebra hierarchy without any change to the file structure. This PR merges `init_.algebra.group` into `algebra.group` and so on for the rest of the algebraic hierarchy.

2020-05-18 13:38:39 18217e9
feat(nat/choose): Generalise nat.dvd_choose (#2703)
Spin-off from #2701.

2020-05-18 11:24:28 434e6a6
chore(*): update to lean 3.13.2 (#2728)
This should fix the bug with the missing module doc strings in the documentation.

2020-05-17 23:39:12 93119dd
chore(scripts): update nolints.txt (#2721)
I am happy to remove some nolints for you!

2020-05-17 22:37:56 7325104
feat(ci): store xz archives (#2719)
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/olean.20cache

2020-05-17 20:01:37 cdf97dc
refactor(field_theory): preparations for Chevalley–Warning (#2590)
This PR adds some preparations for the Chevalley–Warning theorem.
depends on: ~#2606, #2607, #2623~

2020-05-17 17:58:04 f23c361
chore(*): bump to lean-3.13.1 (#2697)
## Move algebra to mathlib
The algebraic hierarchy has moved from the core library to `init_`. In later PRs this can be integrated into the existing directory structure of mathlib.

2020-05-17 15:08:29 3449510
feat(algebra/big_operators): Alternative phrasing of prod-bij (#2709)
Requested by @ChrisHughes24 in https://github.com/leanprover-community/mathlib/pull/2688/files#r426184248
A repaired version of #2708.

2020-05-17 12:00:04 a206df1
chore(scripts): update nolints.txt (#2711)
I am happy to remove some nolints for you!

2020-05-17 07:42:04 b530cdb
refactor(normed_space): require `norm_smul_le` instead of `norm_smul` (#2693)
While in many cases we can prove `norm_smul` directly, in some cases (e.g., for the operator norm) it's easier to prove `norm_smul_le`. Redefine `normed_space` to avoid repeating the same trick over and over.

2020-05-17 04:33:06 39af0f6
chore(algebra/ring): drop an unneeded instance (#2705)
We're incompatible with Lean 3.4.2 for a long time.

2020-05-17 02:07:24 1580cd8
fix(algebra/big_operators): typo fix (#2704)
Fix cut-and-paste typos in the doc string for `∑ x, f x`.

2020-05-17 02:07:22 4f484a1
feat(archive/100-theorems-list): Sum of the Reciprocals of the Triangular Numbers (#2692)
Adds a folder `archive/100-theorems-list`, moves our proof of 82 into it, and provides a proof of 42. There's a readme, I haven't really thought about what should go in there.

2020-05-17 00:07:54 21bdb78
feat(ring_theory/ideal_operations): jacobson radical, is_local, and primary ideals (#768)

2020-05-16 21:18:08 00024db
refactor(group_theory/monoid_localization): use old_structure_cmd (#2683)
Second bit of #2675.
The change to ```old_structure_cmd``` is so ring localizations can use this file more easily.
I've not made sure the map ```f``` is implicit when it can be because ```f.foo``` notation means it doesn't make much difference, but I'll change this if needed.*
I have changed some of the bad names at the end; they are still not great.  Does anyone have any
alternative suggestions?
Things to come in future PRs: the group completion of a comm monoid and some examples, ```away``` (localization at a submonoid generated by one element), more stuff on the localization as a quotient type & the fact it satisfies the char pred.
I think I've learnt some stuff about the ```@[simp]``` linter today. Hopefully I'll be making fewer commits trying and failing to appease it.
*edit: I mean I haven't checked how many places I can make ```f``` implicit & remove the appropriate ```f.```'s.

2020-05-16 17:50:21 a7b17cd
feat(data/finset): remove uses of choice for infima (#2699)
This PR removes the dependence of many lemmas about inf of finset sets on the axiom of choice. The motivation for this is to make `category_theory.limits.has_finite_limits_of_semilattice_inf_top` not depend on choice, which I would like so that I can prove independence results about topos models of set theory from the axiom of choice.
This does make the decidable_classical linter fail.

2020-05-16 14:49:11 c81be77
feat(data/finset) Another finset disjointness lemma (#2698)
I couldn't find this anywhere, and I wanted it.
Naming question: this is "obviously" called `disjoint_filter`, except there's already a lemma with that name.
I know I've broken one of the rules of using `simp` here ("don't do it at the beginning"), but this proof is much longer than I'd have thought would be necessary so I'm rather expecting someone to hop in with a one-liner.

2020-05-16 07:36:54 4b71428
doc(tactic/solve_by_elim): improve docs (#2696)

2020-05-16 02:47:42 74286f5
feat(category_theory/limits/shapes): avoid choice for binary products (#2695)
A tiny change to liberate binary products from the axiom of choice

2020-05-15 21:05:48 1b85e3c
chore(*): bump to lean-3.12.0 (#2681)
## Changes to bracket notation
* `{a}` now requires an instance `has_singleton`;
* `insert a ∅ = {a}` is called `insert_emptyc_eq`, provided by an `is_lawful_singleton` instance;
* `a ∈ ({b} : set α)` is now defeq `a = b`, not `a = b ∨ false`;
* `({a} : set α)` is no longer defeq `insert a ∅`;
* `({a} : finset α)` now means `⟨⟨[a]⟩, _⟩` (used to be called `finset.singleton a`), not `insert a ∅`;
* removed `finset.singleton`;
* `{a, b}` is now `insert a {b}`, not `insert b {a}`.
* `finset.univ : finset bool` is now `{tt, ff}`;
* `(({a} : finset α) : set α)` is no longer defeq `{a}`.
## Tactic `norm_num`
The interactive tactic `norm_num` was recently rewritten in Lean. The non-interactive `tactic.norm_num` has been removed in Lean 3.12 so that we can migrate the algebraic hierarchy to mathlib in 3.13.
## Tactic combinators
https://github.com/leanprover-community/lean/pull/212 renames a bunch of tactic combinators. We change to using the new names.
## Tactic `case`
https://github.com/leanprover-community/lean/pull/228 slightly changes the semantics of the `case` tactic. We fix the resulting breakage to be conform the new semantics.

2020-05-15 21:05:46 f5f7a3c
feat(analysis/special_functions/exp_log): power series for log around 1 (#2646)
This PR adds the power series expansion for the real logarithm around `1`, in the form
```lean
has_sum (λ (n : ℕ), x ^ (n + 1) / (n + 1)) (-log (1 - x))
```

2020-05-15 18:16:25 14a82b3
fix(tactic/norm_num): div/mod with negative first arg (#2689)
bugfix from https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/norm_num.20doesn't.20prove/near/197674516

2020-05-15 16:34:16 a4266a0
chore(scripts): update nolints.txt (#2690)
I am happy to remove some nolints for you!

2020-05-15 13:15:27 471d29e
perf(tactic/ring): use new norm_num, avoid mk_app (#2685)
Remove `tactic.norm_num` from `ring`, and do some performance upgrades borrowed from the `norm_num` overhaul while I'm at it.

2020-05-15 07:57:55 b44fa3c
chore(data/int/basic): mark cast_sub with simp attribute (#2687)
I think the reason this didn't have the `simp` attribute already was from the time when `sub_eq_add_neg` was a `simp` lemma, so it wasn't necessary. I'm adding the `simp` attribute back now that `sub_eq_add_neg` is not a `simp` lemma.

2020-05-15 04:51:31 f07ac36
feat(category_theory/limits/lattice): finite limits in a semilattice (#2665)
Construct finite limits in a semilattice_inf_top category, and finite colimits in a semilattice_sup_bot category.

2020-05-15 03:11:30 378aa0d
feat(data/nat/choose): Sum a row of Pascal's triangle (#2684)
Add the "sum of the nth row of Pascal's triangle" theorem.
Naming is hard, of course, and this is my first PR to mathlib, so naming suggestions are welcome.
Briefly discussed at https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Candidate.20for.20inclusion.20in.20mathlib/near/197619403 .

2020-05-14 18:21:52 be03a3d
chore(scripts): update nolints.txt (#2682)
I am happy to remove some nolints for you!

2020-05-14 18:21:50 606be81
perf(tactic/ext): NEVER USE `user_attribute.get_param` (#2674)
Refactor the extensionality attribute a bit so that it avoids `get_param`, which is a performance nightmare because it uses `eval_expr`.
```lean
import all
set_option profiler true
example (f g : bool → bool → set bool) : f = g :=
by ext
-- before: tactic execution took 2.19s
-- after: tactic execution took 33ms
```

2020-05-14 18:21:48 7427f8e
feat(topology): a few properties of `tendsto _ _ (𝓤 α)` (#2645)
- prove that `λ f g, tendsto (λ x, (f x, g x)) l (𝓤 α)` is an equivalence realtion;
- in case of a metric space, restate this relation as `tendsto (λ x, dist (f x) (g x)) l (𝓝 0)`;
- prove that `tendsto f l (𝓝 a) ↔ tendsto g l (𝓝 b)` provided that
  `tendsto (λ x, (f x, g x)) l (𝓤 α)`.

2020-05-14 15:22:51 d412cfd
chore(algebra/ring): lemmas about units in a semiring (#2680)
The lemmas in non-localization files from #2675. (Apart from one, which wasn't relevant to #2675).
(Edit: I am bad at git. I was hoping there would only be 1 commit here. I hope whatever I'm doing wrong is inconsequential...)

2020-05-14 11:14:27 03c272e
chore(scripts): update nolints.txt (#2679)
I am happy to remove some nolints for you!

2020-05-14 11:14:24 2871bd1
chore(logic/function): drop `function.uncurry'` (#2678)
See [lean#161](https://github.com/leanprover-community/lean/pull/161/files#diff-42c23da308a4d5900f9f3244953701daR132)
Also add `uniform_continuous.prod_map` and `uniform_continuous₂.bicompl`

2020-05-14 11:14:19 3da777a
chore(linear_algebra/basis): use dot notation, simplify some proofs (#2671)

2020-05-14 07:53:24 d0beb49
doc(*): move most docs to website, update links (#2676)
The relaunched https://leanprover-community.github.io now contains copies of most of the doc files. This PR replaces the corresponding markdown files on mathlib with pointers to their new locations so that they only need to be maintained in one place.
The two remaining markdown files are `docs/contribute/bors.md` and `docs/contribute/code-review.md`.
Fixes #2168.

2020-05-14 04:40:05 7077b58
chore(logic/function): move to `logic/function/basic` (#2677)
Also add some docstrings.
I'm going to add more `logic.function.*` files with theorems that can't go to `basic` because of imports.

2020-05-14 04:40:03 6ffb613
chore(algebra/free_monoid): add a custom `rec_on` (#2670)

2020-05-14 00:19:02 f7cb363
refactor(order/lattice): adjust proofs to avoid choice (#2666)
For foundational category theoretic reasons, I'd like these lattice properties to avoid choice.
In particular, I'd like the proof here: https://github.com/leanprover-community/mathlib/pull/2665 to be intuitionistic.
 For most of them it was very easy, eg changing `finish` to `simp`. For `sup_assoc` and `inf_assoc` it's a bit more complex though - for `inf_assoc` I wrote out a term mode proof, and for `sup_assoc` I used `ifinish`. I realise `ifinish` is deprecated because it isn't always intuitionistic, but in this case it did give an intuitionistic proof. I think both should be proved the same way, but I'm including one of each to see which is preferred.

2020-05-13 18:31:18 fc0c025
refactor(scripts/mk_all): generate a single deterministic all.lean file (#2673)
The current `mk_all.sh` script is non-deterministic, and creates invalid Lean code for the `data.matrix.notation` import.  The generated `all.lean` files are also slow: they take two minutes to compile on my machine.
The new script fixes all of that.  The single generated `all.lean` file takes only 27 seconds to compile now.

2020-05-13 12:20:02 9f16f86
feat(topology/algebra/infinite_sum): sums on subtypes (#2659)
For `f` a summable function defined on the integers, we prove the formula
```
(∑ i in range k, f i) + (∑' i, f (i + k)) = (∑' i, f i)
```
This is deduced from a general version on subtypes of the form `univ - s` where `s` is a finset.

2020-05-13 10:27:15 c9f2cbc
chore(scripts): update nolints.txt (#2669)
I am happy to remove some nolints for you!

2020-05-13 10:27:13 506a71f
feat(category_theory): preadditive categories (#2663)
[As discussed](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/197168926), here is the pedestrian definition of preadditive categories. Hopefully, it is not here to stay, but it will allow me to start PRing abelian categories.

2020-05-13 10:27:11 ce86d33
feat(analysis/calculus/(f)deriv): differentiability of a finite sum of functions (#2657)
We show that, if each `f i` is differentiable, then `λ y, ∑ i in s, f i y` is also differentiable when `s` is a finset, and give the lemmas around this for `fderiv` and `deriv`.

2020-05-13 07:01:46 ed183f9
chore(group_theory/submonoid): use `complete_lattice_of_Inf` (#2661)
* Use `complete_lattice_of_Inf` for `submonoid` and `subgroup` lattices.
* Add `sub*.copy`.
* Add a few `@[simp]` lemmas.

2020-05-13 03:44:20 51e2b4c
feat(topology/separation): add `subtype.t1_space` and `subtype.regular` (#2667)
Also simplify the proof of `exists_open_singleton_of_fintype`

2020-05-13 03:44:18 4857284
feat(topology/bounded_continuous_function): the normed space C^0 (#2660)
For β a normed (vector) space over a nondiscrete normed field 𝕜, we construct the normed 𝕜-space structure on the set of bounded continuous functions from a topological space into β.

2020-05-13 01:57:37 cbffb34
feat(analysis/specific_limits): more geometric series (#2658)
Currently, the sum of a geometric series is only known for real numbers in `[0,1)`. We prove it for any element of a normed field with norm `< 1`, and specialize it to real numbers in `(-1, 1)`.
Some lemmas in `analysis/specific_limits` are also moved around (but their content is not changed) to get a better organization of this file.

2020-05-12 18:35:33 437fdaf
feat(category_theory/creates): creates limits => preserves limits (#2639)
Show that `F` preserves limits if it creates them and the target category has them.

2020-05-12 15:37:33 1141533
feat(data/matrix): matrix and vector notation (#2656)
This PR adds notation for matrices and vectors [as discussed on Zulip a couple of months ago](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Notation.20for.20matrices.20and.20vectors), so that `![![a, b], ![c, d]]` constructs a 2x2 matrix with rows `![a, b] : fin 2 -> α` and `![c, d]`. It also adds corresponding `simp` lemmas for all matrix operations defined in `data.matrix.basic`. These lemmas should apply only when the input already contains `![...]`.
To express the `simp` lemmas nicely, I defined a function `dot_product : (v w : n -> α) -> α` which returns the sum of the entrywise product of two vectors. IMO, this makes the definitions of `matrix.mul`, `matrix.mul_vec` and `matrix.vec_mul` clearer, and it allows us to share some proofs. I could also inline `dot_product` (restoring the old situation) if the reviewers prefer.

2020-05-12 15:37:31 34a0c8c
chore(*): unify use of left and right for injectivity lemmas (#2655)
This is the evil twin of #2652 using the opposite convention: the name of a lemma stating that a function in two arguments is injective in one of the arguments refers to the argument that changes. Example:
```lean
lemma sub_right_inj : a - b = a - c ↔ b = c
```
See also the [Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/pow_(left.7Cright)_inj(ective)).
This PR renames lemmas following the other convention. The following lemmas were renamed:
`algebra/group/basic.lean`:
* `mul_left_injective` ↔ `mul_right_injective`
* `mul_left_inj` ↔ `mul_right_inj`
* `sub_left_inj` ↔ `sub_right_inj`
`algebra/goup/units.lean`:
* `mul_left_inj` ↔ `mul_right_inj`
* `divp_right_inj` → `divp_left_inj`
`algebra/group_power.lean`:
* `pow_right_inj` → `pow_left_inj`
`algebra/group_with_zero.lean`:
* `div_right_inj'` → ` div_left_inj'`
* `mul_right_inj'` → `mul_left_inj'`
`algebra/ring.lean`:
* `domain.mul_right_inj` ↔ `domain.mul_left_inj`
`data/finsupp.lean`:
* `single_right_inj` → `single_left_inj`
`data/list/basic.lean`:
* `append_inj_left` ↔ `append_inj_right`
* `append_inj_left'` ↔ `append_inj_right'`
* `append_left_inj` ↔ `append_right_inj`
* `prefix_append_left_inj` → `prefix_append_right_inj`
`data/nat/basic.lean`:
* `mul_left_inj` ↔ `mul_right_inj`
`data/real/ennreal.lean`:
* `add_left_inj` ↔ `add_right_inj`
* `sub_left_inj` → `sub_right_inj`
`set_theory/ordinal.lean`:
* `mul_left_inj` → `mul_right_inj`

2020-05-12 15:37:29 77b3d50
chore(topology/instances/ennreal): add +1 version of `tsum_eq_supr_sum` (#2633)
Also add a few lemmas about `supr` and monotone functions.

2020-05-12 15:37:27 ff184e6
feat(analysis/normed_space): add Mazur-Ulam theorem (#2214)
Based on a proof by Jussi Väisälä, see [journal version](https://www.jstor.org/stable/3647749) or [preprint on web.archive](https://web.archive.org/web/20180516125105/http://www.helsinki.fi/~jvaisala/mazurulam.pdf).
Also rename `reflection` to `point_reflection` as was suggested by @rwbarton and @PatrickMassot

2020-05-12 13:39:55 3f216bc
feat(number_theory/basic): dvd_sub_pow_of_dvd_sub (#2640)
Co-authored with: Kenny Lau <kc_kennylau@yahoo.com.hk>

2020-05-12 11:31:31 61b59ec
fix(order/filter/basic): markdown error in module doc (#2664)

2020-05-12 06:37:08 295b87e
feat(ring_theory/integral_domain): sum in integral domain indexed by finite group (#2623)
In other words: nontrivial sums are trivial
Moved from `field_theory.finite` to the new `ring_theory.integral_domain`:
- `card_nth_roots_subgroup_units`
- `subgroup_units_cyclic`

2020-05-12 05:22:17 f0e7817
chore(scripts): update nolints.txt (#2662)
I am happy to remove some nolints for you!

2020-05-12 01:24:40 8c88721
feat(data/list): assorted lemmas (#2651)
Some lemmas I found useful for #2578

2020-05-11 13:23:56 eb9e382
test(tactic/norm_num): import tests from lean core (#2654)

2020-05-11 11:46:09 a87f326
chore(scripts): update nolints.txt (#2653)
I am happy to remove some nolints for you!

2020-05-11 09:42:50 e777d0b
refactor(data/real/pi): add tactics for pi computation (#2641)
Depends on #2589. Moves pi bounds from @fpvandoorn's gist to mathlib, and also adds a small tactic to uniformize the proofs (and also skip some unsqueezed proofs), making the compilation even faster (just around 1 second for the longest proofs).

2020-05-11 06:32:55 ff37fb8
feat(algebra/ring): monoid structure on `R →+* R` (#2649)
Also add `comp_id` and `id_comp`

2020-05-11 03:53:42 7146082
refactor(data/fintype/basic): weaken assumptions of set.fintype (#2650)

2020-05-10 20:24:02 b9bdc67
feat(*): prove some `*.iterate` theorems (#2647)

2020-05-10 17:09:22 8c6b14e
fix(library_search): use custom apply tactic for the main goal, as well as subgoals (#2648)
cf https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/List.20lemmas

2020-05-10 07:14:07 3710744
feat(meta/uchange): universe lifting and lowering in meta (#2627)
We define the meta type `uchange (α : Type v) : Type u`, which permits us to change the universe of a type analogously to `ulift`.  However since `uchange` is meta, it can both lift and lower the universe.
As requested on Zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/widget/near/196808542

2020-05-10 04:05:15 b248481
chore(algebra/char_zero): add `∀ n : ℕ, (n + 1 : α) ≠ 0` (#2644)

2020-05-10 04:05:14 7590090
chore(scripts): update nolints.txt (#2643)
I am happy to remove some nolints for you!

2020-05-10 00:45:41 81f97bd
chore(*): move to lean-3.11.0 (#2632)
Related Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs

2020-05-09 23:30:16 a584d52
chore(scripts): update nolints.txt (#2642)
I am happy to remove some nolints for you!

2020-05-09 20:30:31 9f33b7d
feat(algebra/ordered_*): arithmetic operations on monotone functions (#2634)
Also move `strict_mono` to `order/basic` and add a module docstring.

2020-05-09 20:30:29 d04429f
chore(logic/embedding,order/order_iso): review (#2618)
* swap `inj` with `inj'` to match other bundled homomorphisms;
* make some arguments explicit to avoid `embedding.of_surjective _`
  in the pretty printer output;
* make `set_value` computable.

2020-05-09 20:30:27 08d4316
refactor(computability/turing_machine): add list_blank (#2605)
This ended up being a major refactor of `computability.turing_machine`. It started as a change of the definition of turing machine so that the tape is a quotient of lists up to the relation "ends with blanks", but the file is quite old and I updated it to pass the linter as well. I'm not up to speed on the new documentation requirements, but now is a good time to request them for this file. This doesn't add many new theorems, it's mostly just fixes to make it compile again after the change. (Some of the turing machine constructions are also simplified.)

2020-05-09 20:30:25 b769846
feat(tactic/norm_num): new all-lean norm_num (#2589)
This is a first draft of the lean replacement for `tactic.norm_num` in core. This isn't completely polished yet; the rest of `norm_num` can now be a little less "global-recursive" since the primitives for e.g. adding and multiplying natural numbers are exposed.
I'm also trying out a new approach using functions like `match_neg` and `match_numeral` instead of directly pattern matching on exprs, because this generates smaller (and hopefully more efficient) code. (Without this, some of the matches were hitting the equation compiler depth limit.)
I'm open to new feature suggestions as well here. `nat.succ` and coercions seem useful to support in the core part, and additional flexibility using `def_replacer` is also on the agenda.

2020-05-09 17:40:41 20c7418
chore(data/finset): drop `to_set`, use `has_lift` instead (#2629)
Also cleanup `coe_to_finset` lemmas. Now we have `set.finite.coe_to_finset` and `set.coe_to_finset`.

2020-05-09 14:34:49 e1192f3
feat(data/nat/basic): add `mod_add_mod` and `add_mod_mod` (#2635)
Added the `mod_add_mod` and `add_mod_mod` lemmas for `data.nat.basic`. I copied them from `data.int.basic`, and just changed the data type. Would there be issues with it being labelled `@[simp]`?
Also, would it make sense to refactor `add_mod` above it to use `mod_add_mod` and `add_mod_mod`? It'd make it considerably shorter.
(Tangential note, there's a disparity between the `mod` lemmas for `nat` and the `mod` lemmas for `int`, for example `int` doesn't have `add_mod`, should that be added in a separate PR?)

2020-05-09 08:33:21 96efc22
feat(data/nat/cast): nat.cast_with_bot (#2636)
As requested on Zulip: https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/with_bot/near/196979007

2020-05-08 21:01:31 67e19cd
feat(src/ring_theory/algebra): define equivalence of algebras (#2625)

2020-05-08 16:39:26 fc8c4b9
chore(`analysis/normed_space/banach`): minor review (#2631)
* move comment to module docstring;
* don't import `bounded_linear_maps`;
* reuse `open_mapping` in `linear_equiv.continuous_symm`;
* add a few `simp` lemmas.

2020-05-08 01:30:44 ac3fb4e
chore(scripts): update nolints.txt (#2628)
I am happy to remove some nolints for you!

2020-05-07 22:43:02 a7e8039
feat(data/equiv/encodable): `ulower` lowers countable types to `Type 0` (#2574)
Given a type `α : Type u`, we can lift it into a higher universe using `ulift α : Type (max u v)`.  This PR introduces an analogous construction going in the other direction.  Given an encodable (= countable) type `α : Type u`, we can lower it to the very bottom using `ulower α : Type 0`.  The equivalence is primitive recursive if the type is primcodable.
The definition of the equivalence was already present as `encodable.equiv_range_encode`.  However it is very inconvenient to use since it requires decidability instances (`encodable.decidable_range_encode`) that are not enabled by default because they would introduce overlapping instances that are not definitionally equal.

2020-05-07 21:02:37 ed453c7
chore(data/polynomial): remove unused argument (#2626)

2020-05-07 18:46:03 bdce195
chore(linear_algebra/basic): review (#2616)
* several new `simp` lemmas;
* use `linear_equiv.coe_coe` instead of `coe_apply`;
* rename `sup_quotient_to_quotient_inf` to `quotient_inf_to_sup_quotient` because it better reflects the definition; similarly for `equiv`.
* make `general_linear_group` reducible.

2020-05-07 15:51:38 5d3b830
refactor(order/lattice): add `sup/inf_eq_*`, rename `inf_le_inf_*` (#2624)
## New lemmas:
* `sup_eq_right : a ⊔ b = b ↔a ≤ b`, and similarly for `sup_eq_left`, `left_eq_sup`, `right_eq_sup`,
  `inf_eq_right`, `inf_eq_left`, `left_eq_inf`, and `right_eq_inf`; all these lemmas are `@[simp]`;
* `sup_elim` and `inf_elim`: if `(≤)` is a total order, then `p a → p b → p (a ⊔ b)`, and similarly for `inf`.
## Renamed
* `inf_le_inf_right` is now `inf_le_inf_left` and vice versa. This agrees with `sup_le_sup_left`/`sup_le_sup_right`, and the rest of the library.
* `ord_continuous_sup` -> `ord_continuous.sup`;
* `ord_continuous_mono` -> `ord_continuous.mono`.

2020-05-07 13:09:37 6c48444
feat(algebra/lie_algebra): `lie_algebra.of_associative_algebra` is functorial (#2620)
More precisely we:
  * define the Lie algebra homomorphism associated to a morphism of associative algebras
  * prove that the correspondence is functorial
  * prove that subalgebras and Lie subalgebras correspond

2020-05-07 10:25:22 da10afc
feat(*): define `equiv.reflection` and `isometry.reflection` (#2609)
Define reflection in a point and prove basic properties.
It is defined both as an `equiv.perm` of an `add_comm_group` and
as an `isometric` of a `normed_group`.
Other changes:
* rename `two_smul` to `two_smul'`, add `two_smul` using `semimodule`
  instead of `add_monoid.smul`;
* minor review of `algebra.midpoint`;
* arguments of `isometry.dist_eq` and `isometry.edist_eq` are now explicit;
* rename `isometry.inv` to `isometry.right_inv`; now it takes `right_inverse`
  instead of `equiv`;
* drop `isometry_inv_fun`: use `h.symm.isometry` instead;
* pull a few more lemmas about `equiv` and `isometry` to the `isometric` namespace.

2020-05-07 07:12:04 a6415d7
chore(data/set/basic): use implicit args in `set.ext_iff` (#2619)
Most other `ext_iff` lemmas use implicit arguments, let `set.ext_iff` use them too.

2020-05-07 02:39:51 f6edeba
chore(scripts): update nolints.txt (#2622)
I am happy to remove some nolints for you!

2020-05-07 00:42:46 a8eafb6
chore(scripts): update nolints.txt (#2621)
I am happy to remove some nolints for you!

2020-05-06 22:41:38 0c8d2e2
chore(data/set/countable): use dot syntax here and there (#2617)
Renamed:
* `exists_surjective_of_countable` -> `countable.exists_surjective`;
* `countable_subset` -> `countable.mono`;
* `countable_image` -> `countable.image`;
* `countable_bUnion` -> `countable.bUnion`;
* `countable_sUnion` -> `countable.sUnion`;
* `countable_union` -> `countable.union`;
* `countable_insert` -> `countable.insert`;
* `countable_finite` -> `finite.countable`;
Add:
* `finset.countable_to_set`

2020-05-06 19:39:53 c3d76d0
chore(*): a few missing `simp` lemmas (#2615)
Also replaces `monoid_hom.exists_inv_of_comp_exists_inv` with `monoid_hom.map_exists_right_inv` and adds `monoid_hom.map_exists_left_inv`.

2020-05-06 19:39:51 460d9d4
refactor(data/equiv/local_equiv, topology/local_homeomorph): use coercions (#2603)
Local equivs and local homeomorphisms use `e.to_fun x` and `e.inv_fun x`, instead of coercions as in most of mathlib, as there were problems with coercions that made them unusable in manifolds. These problems have been fixed in Lean 3.10, so we switch to coercions for them also.
This is 95% a refactor PR, erasing `.to_fun` and replacing `.inv_fun` with `.symm` in several files, and fixing proofs. Plus a few simp lemmas on the coercions to let things go smoothly. I have also linted all the files I have touched.

2020-05-06 19:39:49 b1c0398
feat(analysis/analytic/composition): the composition of formal series is associative (#2513)
The composition of formal multilinear series is associative. I will need this when doing the analytic local inverse theorem, and I was surprised by how nontrivial this is: one should show that two double sums coincide by reindexing, but the reindexing is combinatorially tricky (it involves joining and splitting lists carefully). 
Preliminary material on lists, sums and compositions is done in #2501 and #2554, and the proof is in this PR.

2020-05-06 16:31:27 0a7ff10
feat(algebra/units): some norm_cast attributes (#2612)

2020-05-06 14:05:37 93a64da
chore(data/pnat/basic): add `mk_le_mk`, `mk_lt_mk`, `coe_le_coe`, `coe_lt_coe` (#2613)

2020-05-06 09:03:06 5593155
feat(*): lemmas on sums and products over fintypes (#2598)

2020-05-06 02:11:34 4503f8f
chore(scripts): update nolints.txt (#2610)
I am happy to remove some nolints for you!

2020-05-05 22:33:19 c7593cc
refactor(field_theory): move finite_card.lean into finite.lean (#2607)

2020-05-05 22:33:16 0db59db
feat(data/equiv/basic): some elementary equivs (#2602)

2020-05-05 20:16:28 359031f
refactor(*): remove instance max depth (#2608)
With current Lean, all the manual increases of the maximum instance depth have become unnecessary. This PR removes them all.

2020-05-05 19:08:14 a66d0a8
chore(field_theory/finite): meaningful variable names (#2606)

2020-05-05 14:29:27 0c1b60b
feat(group_theory/order_of_element): order_of_eq_prime (#2604)

2020-05-05 08:02:15 7a367f3
feat(algebra/char_p): add lemma ring_char_ne_one (#2595)
This lemma is more useful than the extant `false_of_nonzero_of_char_one`
when we are working with the function `ring_char` rather than the `char_p`
Prop.

2020-05-05 06:09:07 91b3906
feat(data/polynomial): misc on derivatives of polynomials (#2596)
Co-authored by: @alexjbest

2020-05-05 04:42:12 d6ddfd2
feat(algebra/midpoint): define `midpoint`, prove basic properties (#2599)
Part of #2214

2020-05-04 22:27:29 1c4b5ec
feat(ring_theory/ideals): quotient map to residue field as ring hom (#2597)

2020-05-04 10:57:29 14aa1f7
feat(combinatorics/composition): refactor compositions, split a list wrt a composition (#2554)
Refactor `composition`, replacing in its definition a list of positive integers with a list of integers which are positive. This avoids going back and forth all the time between `nat` and `pnat`.
Also introduce the ability to split a list of length `n` with respect to a composition `c` of `n`, giving rise to a list of `c.length` sublists whose join is the original list.

2020-05-04 05:40:22 70245f4
feat(algebra/big_operators): prod_comp (#2594)
This is a lemma that @jcommelin looks like he could have used in Chevalley Warning, and is probably useful elsewhere.

2020-05-03 12:27:43 08a17d6
chore(scripts): update nolints.txt (#2593)
I am happy to remove some nolints for you!

2020-05-03 08:34:26 a223bbb
chore(*): switch to lean 3.10.0 (#2587)
There have been two changes in Lean 3.10 that have a significant effect on mathlib:
 - `rename'` has been moved to core.  Therefore `rename'` has been removed.
 - Given a term `⇑f x`, the simplifier can now rewrite in both `f` and `x`.  In many cases we had both `⇑f = ⇑f'` and `⇑f x = ⇑f' x` as simp lemmas; the latter is redundant now and has been removed (or just not marked simp anymore).  The new and improved congruence lemmas are also used by `convert` and `congr`, these tactics have become more powerful as well.
I've also sneaked in two related changes that I noticed while fixing the proofs affected by the changes above:
 - `@[to_additive, simp]` has been replaced by `@[simp, to_additive]` in the monoid localization file.  The difference is that `@[to_additive, simp]` only marks the multiplicative lemma as simp.
 - `def prod_comm : α × β ≃ β × α` (etc.) is no longer marked `@[simp]`.  Marking this kind of lemmas as simp causes the simplifier to unfold the definition of `prod_comm` (instead of just rewriting `α × β` to `β × α` in the `≃` simp relation).  This has become a bigger issue now since the simplifier can rewrite the `f` in `⇑f x`.

2020-05-02 22:38:27 d1eae21
chore(build.yml): Don't build nolints branch (#2591)

2020-05-02 15:22:25 a99f9b5
refactor(algebra/big_operators): introduce notation for finset.prod and finset.sum (#2582)
I have not gone through all of mathlib to use this notation everywhere. I think we can maybe transition naturally.

2020-05-02 12:33:54 1cc83e9
chore(algebra/ordered_field): move inv_neg to field and prove for division ring (#2588)
`neg_inv` this lemma with the equality swapped was already in the library, so maybe we should just get rid of this or `neg_inv`
[Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/inv_neg/near/196042954)

2020-05-02 09:41:43 b902f6e
feat(*): several `@[simp]` lemmas (#2579)
Also add an explicit instance for `submodule.has_coe_to_sort`.
This way `rintro ⟨x, hx⟩` results in `(hx : x ∈ p)`.
Also fixes some timeouts introduced by #2363. See Zulip: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/partrec_code

2020-05-02 09:41:41 06bae3e
fix(data/int/basic): use has_coe_t to prevent looping (#2573)
The file `src/computability/partrec.lean` no longer opens in vscode because type-class search times out.  This happens because we have the instance `has_coe ℤ α` which causes non-termination because coercions are chained transitively (`has_coe ℤ ℤ`, `has_coe ℤ ℤ`, ...).  Even if the coercions would not apply to integers (and maybe avoid non-termination), it would still enumerate all `0,1,+,-` structures, of which there are unfortunately very many.
This PR therefore downgrades such instances to `has_coe_t` to prevent non-termination due to transitivity.  It also adds a linter to prevent this kind of error in the future.

2020-05-02 09:41:39 9d57f68
feat(order/bounded_lattice): introduce `is_compl` predicate (#2569)
Also move `disjoint` from `data/set/lattice`

2020-05-02 08:31:10 738bbae
feat(algebra/group_ring_action): action on polynomials (#2586)

2020-05-02 06:01:16 d0a1d77
doc(tactic/rcases): mention the "rfl" pattern (#2585)
Edited from @jcommelin's answer on Zulip here: https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/184491982

2020-05-01 21:31:28 eb383b1
chore(group_theory/perm): delete duplicate lemmas (#2584)
`sum_univ_perm` is a special case of `sum_equiv`, so it's not necessary. 
I also moved `sum_equiv` into the `finset` namespace.

2020-05-01 15:51:57 4daa7e8
feat(algebra/lie_algebra): define simple Lie algebras and define classical Lie algebra, slₙ (#2567)
The changes here introduce a few important properties of Lie algebras and also begin providing definitions of the classical Lie algebras. The key changes are the following definitions:
 * `lie_algebra.is_abelian`
 * `lie_module.is_irreducible`
 * `lie_algebra.is_simple`
 * `lie_algebra.special_linear.sl`
Some simple related proofs are also included such as:
 * `commutative_ring_iff_abelian_lie_ring`
 * `lie_algebra.special_linear.sl_non_abelian`

2020-05-01 12:56:42 6a2559a
chore(algebra/group_with_zero): rename div_eq_inv_mul' to div_eq_inv_mul (#2583)
There are no occurrences of the name without ' in either core or mathlib
so this change in name (from #2242) seems to have been unnecessary.

2020-05-01 10:09:30 ee488b2
fix(tactic/lint/basic): remove default argument for auto_decl and enable more linters (#2580)
Run more linters on automatically-generated declarations.  Quite a few linters should have been run on them, but I forgot about it because the `auto_decls` flag is optional and off by default.  I've made it non-optional so that you don't forget about it when defining a linter.
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/simp.20linter.20and.20structure.20fields/near/195810856

2020-05-01 07:42:20 67f3fde
feat(algebra/group_ring_action) define group actions on rings (#2566)
Define group action on rings.
Related Zulip discussions: 
- https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.232566.20group.20actions.20on.20ring 
- https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mul_action

2020-05-01 05:59:47 74d24ab
feat(topology/instances/real_vector_space): `E →+ F` to `E →L[ℝ] F` (#2577)
A continuous additive map between two vector spaces over `ℝ` is `ℝ`-linear.

2020-05-01 04:49:00 d3140fb
feat(data/mv_polynomial): lemmas on total_degree (#2575)
This is a small preparation for the Chevalley–Warning theorem.

2020-04-30 21:10:46 c568bb4
fix(scripts): stop updating mathlib-nightly repository (#2576)
The `gothub` tool that we've used to push the nightlies doesn't build at the moment.  Now that we have `leanproject`, we no longer need the separate nightlies repository.

2020-04-30 21:10:44 06adf7d
chore(scripts): update nolints.txt (#2572)
I am happy to remove some nolints for you!

2020-04-30 18:20:23 caf93b7
feat(*): small additions that prepare for Chevalley-Warning (#2560)
A number a small changes that prepare for #1564.

2020-04-30 14:07:21 8fa8f17
refactor(tsum): use ∑' instead of ∑ as notation (#2571)
As discussed in: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/big.20ops/near/195821357
This is the result of
```
git grep -l '∑' | grep -v "mean_ineq" | xargs sed -i "s/∑/∑'/g"
```
after manually cleaning some occurences of `∑` in TeX strings. Probably `∑` has now also been changed in a lot of comments and docstrings, but my reasoning is that if the string "tsum" occurs in the file, then it doesn't do harm to write `∑'` instead of `∑` in the comments as well.

2020-04-30 14:07:19 ee70afb
doc(.github): remove pull-request template (#2568)
Move the pull-request template to `CONTRIBUTING.md`.  This reduces the boilerplate in the PR description that almost nobody reads anyhow.

2020-04-30 11:23:34 9c8bc7a
fix(tactic/interactive): make `inhabit` work on quantified goals (#2570)
This didn't work before because of the `∀` in the goal:
```lean
lemma c {α} [nonempty α] : ∀ n : ℕ, ∃ b : α, n = n :=
by inhabit α; intro; use default _; refl
```

2020-04-30 07:10:15 b14a26e
refactor(analysis/complex/exponential): split into three files in special_functions/ (#2565)
The file `analysis/complex/exponential.lean` was growing out of control (2500 lines) and was dealing with complex and real exponentials, trigonometric functions, and power functions. I split it into three files corresponding to these three topics, and put them instead in `analysis/special_functions/`, as it was not specifically complex.
This is purely a refactor, so absolutely no new material nor changed proof.
Related Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.232565.20exponential.20split

2020-04-29 17:26:19 e6491de
chore(data/equiv/ring): make ring_aut reducible (#2563)
This makes the coercion to fun work. This is the same approach as we used for `perm` and it worked okay for `perm`.
Related Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/ring_aut.20coerce.20to.20function

2020-04-29 16:12:56 8490c54
refactor(analysis/complex/exponential): define log x = log |x|  for x < 0 (#2564)
Previously we had `log  x = 0` for `x < 0`. This PR changes it to `log x = log (-x)`, to make sure that the formulas `log (xy) = log x + log y` and `log' = 1/x` are true for all nonzero variables.
Also, add a few simp lemmas on the differentiability properties of `log` to make sure that the following works:
```lean
example (x : ℝ) (h : x ≠ 0) : deriv (λ x, x * (log x - 1)) x = log x :=
by simp [h]
```
Related Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/definition.20of.20real.20log

2020-04-29 13:32:57 4580069
feat(field_theory/subfield): is_subfield.inter and is_subfield.Inter (#2562)
Prove that intersection of subfields is subfield.

2020-04-29 10:32:44 84f8b39
chore(data/nat/basic): move `iterate_inj` to `injective.iterate` (#2561)
Also add versions for `surjective` and `bijective`

2020-04-29 07:43:15 f8fe596
chore(algebra/*): missing `simp`/`inj` lemmas (#2557)
Sometimes I have a specialized `ext` lemma for `A →+ B` that uses structure of `A` (e.g., `A = monoid_algebra α R`) and want to apply it to `A →+* B` or `A →ₐ[R] B`. These `coe_*_inj` lemmas make it easier.
Also add missing `simp` lemmas for bundled multiplication and rename `pow_of_add` and `gpow_of_add` to `of_add_smul` and `of_add_gsmul`, respectively.

2020-04-29 05:44:26 cb3a017
chore(category_theory): remove `[𝒞 : category.{v₁} C] / include 𝒞` (#2556)
It is no longer necessary in Lean 3.9.0, thanks to
https://github.com/leanprover-community/lean/commit/01063857bb6814374156433e8cbc0c94a9483f52

2020-04-29 04:34:22 ba9fc4d
doc(install/*): remove outdated youtube links (#2559)
Fixes #2558.

2020-04-28 23:03:24 94ff59a
chore(scripts): update nolints.txt (#2555)
I am happy to remove some nolints for you!

2020-04-28 19:57:52 d12db89
chore(category): rename to control (#2516)
This is parallel to https://github.com/leanprover-community/lean/pull/202 for community Lean (now merged).
It seems the changes are actually completely independent; this compiles against current community Lean, and that PR. (I'm surprised, but I guess it's just that everything is in the root namespace, and in `init/`.)
This PR anticipates then renaming `category_theory/` to `category/`.

2020-04-28 19:57:50 c435b1c
feat(analysis/calculus/inverse): Inverse function theorem (#2228)
Ref #1849

2020-04-28 17:54:30 3c02800
chore(data/dfinsupp): use more precise `decidable` requirement (#2535)
Removed `decidable_zero_symm` and replaced all `[Π i, decidable_pred (eq (0 : β i))]` with `[Π i (x : β i), decidable (x ≠ 0)]`. This should work better with `open_locale classical` because now the lemmas and definitions don't assume that `[Π i (x : β i), decidable (x ≠ 0)]` comes from `decidable_zero_symm`.

2020-04-28 15:02:18 f6c9372
feat(data/fin): add some lemmas about coercions (#2522)
Two of these lemmas allow norm_cast to work with inequalities
involving fin values converted to ℕ.  The rest are for simplifying
expressions where coercions are used to convert from ℕ to fin, in
cases where an inequality means those coercions do not in fact change
the value.
There are very few lemmas relating to coercions from ℕ to fin in
mathlib at present; the lemma of_nat_eq_coe (and val_add on which it
depends, and a few similarly trivial lemmas alongside val_add) is
moved from data.zmod.basic to fin.basic for use in proving the other
lemmas, while the nat lemma add_mod is moved to data.nat.basic for use
in the proof of of_nat_eq_coe, and mul_mod is moved alongside it as
suggested in review.  These lemmas were found useful in formalising
solutions to an olympiad problem, see
<https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Some.20olympiad.20formalisations>,
and seem more generally relevant than to just that particular problem.

2020-04-28 12:08:15 f567962
feat(data/complex/basic): inv_I and div_I (#2550)

2020-04-28 12:08:13 9c81886
fix(tactic/doc_commands): clean up copy_doc_string command (#2543)
#2471 added a command for copying a doc string from one decl to another. This PR:
* documents this command
* extends it to copy to a list of decls
* moves `add_doc_string` from root to the `tactic` namespace

2020-04-28 06:54:15 ae06db3
feat(category_theory/concrete): make constructing morphisms easier (#2502)
Previously, if you wrote:
```lean
example (R : CommMon.{u}) : R ⟶ R :=
{ to_fun := λ x, _,
  map_one' := sorry,
  map_mul' := sorry, }
```
you were told the expected type was `↥(bundled.map comm_monoid.to_monoid R)`, which is not particularly reassuring unless you understand the details of how we've set up concrete categories.
If you called `dsimp`, this got better, just giving `R.α`. This still isn't ideal, as we prefer to talk about the underlying type of a bundled object via the coercion, not the structure projection.
After this PR, which provides a slightly different mechanism for constructing "induced" categories from bundled categories, the expected type is exactly what you might have hoped for: `↥R`.
There seems to be one place where we used to get away with writing `𝟙 _` and now have to write `𝟙 A`, but otherwise there appear to be no ill-effects of this change.
(For follow-up, I think I can entirely get rid of our `local attribute [reducible]` work-arounds when setting up concrete categories, and in fact construct most of the instances in `@[derive]` handlers, but these will be separate PRs.)

2020-04-27 16:34:48 fd3afb4
chore(ring_theory/algebra): move instances about complex to get rid of dependency (#2549)
Previously `ring_theory.algebra` imported the complex numbers. This PR moves some instances in order to get rid of that dependency.

2020-04-27 14:30:55 948d0ff
chore(topology/algebra/module): don't use unbundled homs for `algebra` instance (#2545)
Define special `algebra.of_semimodule` and `algebra.of_semimodule'`
constructors instead.
ref. #2534

2020-04-27 05:41:19 2fc9b15
chore(data/real/*): use bundled homs to prove `coe_sum` etc (#2533)

2020-04-26 21:58:07 134c5a5
chore(scripts): update nolints.txt (#2548)
I am happy to remove some nolints for you!

2020-04-26 20:47:49 039c5a6
chore(ring_theory/adjoin_root): drop `is_ring_hom` instance (#2546)
ref #2534

2020-04-26 19:06:10 942b795
doc(field_theory/subfield): don't mention unbundled homs in the comment (#2544)
ref #2534

2020-04-26 13:59:51 fa13d16
chore(scripts): update nolints.txt (#2542)
I am happy to remove some nolints for you!

2020-04-26 12:04:36 30ae5ba
chore(scripts): update nolints.txt (#2541)
I am happy to remove some nolints for you!

2020-04-26 12:04:34 74b9647
feat(measure_theory/measure_space): pigeonhole principle in a measure space (#2538)
ref #2272

2020-04-26 09:29:30 c170ce3
chore(data/finset): add `coe_map`, `coe_image_subset_range`, and `coe_map_subset_range` (#2530)

2020-04-26 09:29:28 40e97d3
feat(topology/algebra/module): ker, range, cod_restrict, subtype_val, coprod (#2525)
Also move `smul_right` to `general_ring` and define some
maps/equivalences useful for the inverse/implicit function theorem.

2020-04-26 09:29:26 11ccc1b
feat(analysis/calculus/deriv): define `has_strict_deriv_at` (#2524)
Also make more proofs explicitly use their `has_fderiv*` counterparts
and mark some lemmas in `fderiv` as `protected`.

2020-04-26 06:46:28 21b7292
feat(data/nat/basic): add `iterate_one` and `iterate_mul` (#2540)

2020-04-26 06:46:26 21d8e0a
chore(data/real/ennreal): +2 simple lemmas (#2539)
Extracted from #2311

2020-04-26 06:46:24 401d321
feat(analysis/normed_space/basic): add continuous_at.div (#2532)
When proving a particular function continuous at a particular point,
lemmas such as continuous_at.mul, continuous_at.add and
continuous_at.comp can be used to build this up from continuity
properties of simpler functions.  It's convenient to have something
similar for division as well.
This adds continuous_at.div for normed fields, as suggested by Yury.
If mathlib gets topological (semi)fields in future, this should become
a result for those.

2020-04-26 06:46:22 1182e91
refactor(tactic/nth_rewrite): enable rewriting hypotheses, add docstrings (#2471)
This PR
* renames the interactive tactic `perform_nth_rewrite` to `nth_rewrite`
* enables rewriting at hypotheses, instead of only the target
* renames the directory and namespace `rewrite_all` to `nth_rewrite`
* adds a bunch of docstrings

2020-04-26 03:56:10 c34add7
chore(scripts): update nolints.txt (#2537)
I am happy to remove some nolints for you!

2020-04-26 03:56:08 bda206a
chore(data/option,order/bounded_lattice): 2 simple lemmas about `get_or_else` (#2531)
I'm going to use these lemmas for `polynomial.nat_degree`. I don't want to PR
this change to `data/polynomial` because this would create merge conflicts later.

2020-04-26 03:56:06 ee6f20a
chore(algebra/module): use bundled homs for `smul_sum` and `sum_smul` (#2529)

2020-04-25 23:03:27 5219ca1
doc(data/nat/modeq): add module docstring and lemma (#2528)
I add a simple docstrong and also a lemma which I found useful for a codewars kata.

2020-04-25 23:03:25 ba4dc1a
doc(algebra/order_functions): add docstring and lemma (#2526)
I added a missing lemma, and then figured that while I was here I should add a docstring

2020-04-25 19:55:53 a8ae8e8
feat(data/bool): add de Morgan's laws (#2523)
I will go away with my tail between my legs if someone can show me that our esteemed mathematics library already contains de Morgan's laws for booleans. I also added a docstring. I can't lint the file because it's so high up in the import heirarchy, but I also added a docstring for the two instances.

2020-04-25 19:55:51 94fd41a
refactor(data/padics/*): use [fact p.prime] to assume that p is prime (#2519)

2020-04-25 18:43:05 632c4ba
feat(continued_fractions) add equivalence of convergents computations (#2459)
### What
Add lemmas showing that the two methods for computing the convergents of a continued fraction (recurrence relation vs direct evaluation) coincide. A high-level overview on how the proof works is given in the header of the file. 
### Why
One wants to be able to relate both computations. The recurrence relation can be faster to compute, the direct evaluation is more intuitive and might be easier for some proofs.
### How
The proof of the equivalence is by induction. To make the induction work, one needs to "squash" a sequence into a shorter one while maintaining the value of the convergents computations. Most lemmas in this commit deal with this squashing operation.

2020-04-25 09:58:14 d9327e4
refactor(geometry/manifold/real_instances): use fact instead of lt_class (#2521)
To define a manifold with boundary structure on the interval `[x, y]`, typeclass inference needs to know that `x < y`. This used to be provided by the introduction of a dummy class `lt_class`. The new mechanism based on `fact` makes it possible to remove this dummy class.

2020-04-25 09:58:12 2b95532
refactor(*): use [fact p.prime] for frobenius and perfect_closure (#2518)
This also removes the dependency of `algebra.char_p` on `data.padics.padic_norm`, which was only there to make `nat.prime` a class.
I also used this opportunity to rename all alphas and betas to `K` and `L` in the perfect closure file.

2020-04-25 08:51:08 f192f2f
chore(*): move quadratic_reciprocity to number_theory/ (#2520)
I've never really understood why we put all these cool theorems under the data/ directory, so I suggest moving them out of there, and into the place where thy "belong".

2020-04-25 05:42:30 3c8584d
feat(order/filter/bases): add `exists_iff` and `forall_iff` (#2507)

2020-04-25 05:42:28 199f6fe
refactor(tactic/suggest): call library_search and suggest with additional lemmas, better lemma caching (#2429)
This PR is mainly a refactoring of suggest. The changes include:
* Removed `(discharger : tactic unit := done)` from `library_search`, `suggest`, `suggest_scripts` `suggest_core`, `suggest_core'`, `apply_declaration` and `apply_and_solve` and replaced by `(opt : by_elim_opt := { })` from `solve_by_elim`.
* Replaced all occurences of `discharger` by `opt`, `opt.discharger`, or `..opt`.
* inserted a do block into the interactive `library_search` function.
* Added `asms ← mk_assumption_set no_dflt hs attr_names`, to the interactive `suggest` and `library_search` functions. This is so `library_search` and `suggest` don't rebuild the assumption set each time a lemma is applied.
* Added several inputs for the interactive `library_search` and `suggest` function. These parameters were lifted from the interactive `solve_by_elim` function and allow the user to control how `solve_by_elim` is utilized by `library_search` and `suggest`.
* Removed the `message` function (redundant code.)
* Removed several unnecessary `g ← instantiate_mvars g`, lines.

2020-04-25 04:11:06 06f8c55
chore(scripts): update nolints.txt (#2517)
I am happy to remove some nolints for you!

2020-04-25 02:22:56 22d89c4
chore(scripts): update nolints.txt (#2515)
I am happy to remove some nolints for you!

2020-04-24 23:37:04 e918f72
refactor(zmod): merge `zmodp` into `zmod`, use `[fact p.prime]` for tc search (#2511)
This PR introduces the class `fact P := P` for `P : Prop`, which is a way to inject elementary propositions into the type class system. This desing is inspired by @cipher1024 's https://gist.github.com/cipher1024/9bd785a75384a4870b331714ec86ad6f#file-zmod_redesign-lean.
We use this to endow `zmod p` with a `field` instance under the assumption `[fact p.prime]`.
As a consequence, the type `zmodp` is no longer needed, which removes a lot of duplicate code.
Besides that, we redefine `zmod n`, so that `n` is a natural number instead of a *positive* natural number, and `zmod 0` is now definitionally the integers.
To preserve computational properties, `zmod n` is not defined as quotient type, but rather as `int` and `fin n`, depending on whether `n` is `0` or `(k+1)`.
The rest of this PR is adapting the library to the new definitions (most notably quadratic reciprocity and Lagrange's four squares theorem).
Future work: Refactor the padics to use `[fact p.prime]` instead of making `nat.prime` a class in those files. This will address #1601 and #1648. Once that is done, we can clean up the mess in `char_p` (where the imports are really tangled) and finally get some movement in #1564.

2020-04-24 23:37:01 3e54e97
chore(topology/separation): prove that `{y | y ≠ x}` is open (#2506)

2020-04-24 21:12:05 ee8451b
feat(data/list): more lemmas on joins and sums (#2501)
A few more lemmas on lists (especially joins) and sums. I also linted the file `lists/basic.lean` and converted some comments to section headers.
Some lemmas got renamed:
`of_fn_prod_take` -> `prod_take_of_fn`
`of_fn_sum_take` -> `sum_take_of_fn`
`of_fn_prod` ->`prod_of_fn`
`of_fn_sum` -> `sum_of_fn`
The arguments of `nth_le_repeat` were changed for better `simp` efficiency

2020-04-24 20:10:09 6795c9d
chore(scripts): update nolints.txt (#2514)
I am happy to remove some nolints for you!

2020-04-24 17:09:09 3162c1c
feat(tactic/delta_instance): protect names and deal with functions (#2477)
There were (at least) two issues with the `delta_instance` derive handler:
* It couldn't protect the names of the instances it generated, so they had to be ugly to avoid clashes.
* It didn't deal well with deriving instances on function types, so `@[derive monad]` usually failed.
This should fix both. The first is possible with recent(ish) additions to core.
closes #1951

2020-04-24 14:15:51 2f6b8d7
chore(scripts): update nolints.txt (#2510)
I am happy to remove some nolints for you!

2020-04-24 14:15:48 7a71866
chore(topology/algebra/module): make `id` use explicit args (#2509)

2020-04-24 14:15:46 62feebc
chore(*): add missing copyright headers (#2505)
I think these are close to the last remaining files without copyright headers.
(We decided at some point to allow that `import`-only files don't need one.)

2020-04-24 14:15:44 c8946c9
chore(tactic/*): remove some unused args in commands (#2498)

2020-04-24 11:14:03 00d7da2
docs(*): merge rewrite tactic tag into rewriting (#2512)
We had two overlapping tags in the docs.

2020-04-24 11:14:01 13393e3
chore(data/list/*): various renamings to use dot notation (#2481)
* use dot notation
* add a version of `list.perm.prod_eq` that only assumes that elements of the list pairwise commute instead of commutativity of the monoid.
## List of renamed symbols
### `data/list/basic`
* `append_sublist_append_of_sublist_right` : `sublist.append_right`;
* `reverse_sublist` : `sublist.reverse`;
* `append_sublist_append` : `sublist.append`;
* `subset_of_sublist`: `sublist.subset`;
* `sublist_antisymm` : `sublist.antisymm`;
* `filter_map_sublist_filter_map` : `sublist.filter_map`
* `map_sublist_map` : `sublist.map`
* `erasep_sublist_erasep`: `sublist.erasep`
* `erase_sublist_erase` : `sublist.erase`;
* `diff_sublist_of_sublist` : `sublist.diff_right`;
### `data/list/perm`
* `perm.skip` : `perm.cons`;
* `perm_comm` (new);
* `perm_subset` : `perm.subset`;
* `mem_of_perm` : `perm.mem_iff`;
* `perm_app_left` : `perm.append_right` (note `right` vs `left`)
* `perm_app_right` : `perm.append_left` (note `right` vs `left`)
* `perm_app` : `perm.append`;
* `perm_app_cons` : `perm.append_cons`;
* `perm_cons_app` : `perm_append_singleton`;
* `perm_app_comm` : `perm_append_comm`;
* `perm_length` : `perm.length_eq`;
* `eq_nil_of_perm_nil` : `perm.eq_nil` and `perm.nil_eq`
  with different choices of lhs/rhs;
* `eq_singleton_of_perm_inv` : `perm.eq_singleton` and `perm.singleton_eq`
  with different choices of lhs/rhs;
* `perm_singleton` and `singleton_perm`: `iff` versions
  of `perm.eq_singleton` and `perm.singleton_eq`;
* `eq_singleton_of_perm` : `singleton_perm_singleton`;
* `perm_cons_app_cons` : `perm_cons_append_cons`;
* `perm_repeat` : `repeat_perm`; new `perm_repeat` differs from it
  in the choice of lhs/rhs;
* `perm_erase` : `perm_cons_erase`;
* `perm_filter_map` : `perm.filter_map`;
* `perm_map` : `perm.map`;
* `perm_pmap` : `perm.pmap`;
* `perm_filter` : `perm.filter`;
* `subperm_of_sublist` : `sublist.subperm`;
* `subperm_of_perm` : `perm.subperm`;
* `subperm.refl` : now has `@[refl]` attribute;
* `subperm.trans` : now has `@[trans]` attribute;
* `length_le_of_subperm` : `subperm.length_le`;
* `subset_of_subperm` : `subperm.subset`;
* `exists_perm_append_of_sublist` : `sublist.exists_perm_append`;
* `perm_countp` : `perm.countp_eq`;
* `countp_le_of_subperm` : `subperm.countp_le`;
* `perm_count` : `perm.count_eq`;
* `count_le_of_subperm` : `subperm.count_le`;
* `foldl_eq_of_perm` : `perm.foldl_eq`, added a primed version
  with slightly weaker assumptions;
* `foldr_eq_of_perm` : `perm.foldr_eq`;
* `rec_heq_of_perm` : `perm.eec_heq`;
* `fold_op_eq_of_perm` : `perm.fold_op_eq`;
* `prod_eq_of_perm`: `perm.prod_eq` and `perm.prod_eq'`;
* `perm_cons_inv` : `perm.cons_inv`;
* `perm_cons` : now is a `@[simp]` lemma;
* `perm_app_right_iff` : `perm_append_right_iff`;
* `subperm_app_left` : `subperm_append_left`;
* `subperm_app_right` : `subperm_append_right`;
* `perm_ext_sublist_nodup` : `nodup.sublist_ext`;
* `erase_perm_erase` : `perm.erase`;
* `subperm_cons_erase` (new);
* `erase_subperm_erase` : `subperm.erase`;
* `perm_diff_left` : `perm.diff_right` (note `left` vs `right`);
* `perm_diff_right` : `perm.diff_left` (note `left` vs `right`);
* `perm.diff`, `subperm.diff_right`, `erase_cons_subperm_cons_erase` (new);
* `perm_bag_inter_left` : `perm.bag_inter_right` (note `left` vs `right`);
* `perm_bag_inter_right` : `perm.bag_inter_left` (note `left` vs `right`);
* `perm.bag_inter` (new);
* `perm_erase_dup_of_perm` : `perm.erase_dup`;
* `perm_union_left` : `perm.union_right` (note `left` vs `right`);
* `perm_union_right` : `perm.union_left` (note `left` vs `right`);
* `perm_union` : `perm.union`;
* `perm_inter_left` : `perm.inter_right` (note `left` vs `right`);
* `perm_inter_right` : `perm.inter_left` (note `left` vs `right`);
* `perm_inter` : `perm.inter`;
* `perm_nodup` : `perm.nodup_iff`;
* `perm_bind_left` : `perm.bind_right` (note `left` vs `right`);
* `perm_bind_right` : `perm.bind_left` (note `left` vs `right`);
* `perm_product_left` : `perm.product_right` (note `left` vs `right`);
* `perm_product_right` : `peerm.product_left` (note `left` vs `right`);
* `perm_product` : `perm.product`;
* `perm_erasep` : `perm.erasep`;
### `data/list/sigma`
* `nodupkeys.pairwise_ne` (new);
* `perm_kreplace` : `perm.kreplace`;
* `perm_kerase` : `perm.kerase`;
* `perm_kinsert` : `perm.kinsert`;
* `erase_dupkeys_cons` : now take `x : sigma β` instead
  of `{x : α}` and `{y : β x}`;
* `perm_kunion_left` : `perm.kunion_right` (note `left` vs `right`);
* `perm_kunion_right` : `perm.kunion_left` (note `left` vs `right`);
* `perm_kunion` : `perm.kunion`;
*

2020-04-24 11:13:59 3ae22de
feat(linear_algebra): quadratic forms (#2480)
Define quadratic forms over a module, maps from quadratic forms to bilinear forms and matrices, positive definite quadratic forms and the discriminant of quadratic forms.
Along the way, I added some definitions to `data/matrix/basic.lean` and `linear_algebra/bilinear_form.lean` and did some cleaning up.

2020-04-24 06:43:01 e7bd312
chore(tactic/pi_instance): add a docstring, remove a little bit of redundancy (#2500)

2020-04-24 04:03:04 b7af283
feat(algebra): define `invertible` typeclass (#2504)
In the discussion for #2480, we decided that the definitions would be cleaner if the elaborator could supply us with a suitable value of `1/2`. With these changes, we can now add an `[invertible 2]` argument to write `⅟ 2`.
Related to Zulip discussion: https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.232480.20bilinear.20forms

2020-04-24 01:03:57 02d7308
feat(cmd/simp): let `#simp` use declared `variables` (#2478)
Let `#simp` see declared `variables`.
~~Sits atop the minor `tactic.core` rearrangement in #2465.~~
@semorrison It turns out that `push_local_scope` and `pop_local_scope` weren't required; the parser is smarter than we thought, and if you declared some `variables` and then tried to `#simp` them, lean would half-know what you are talking about.
Indeed, the parsed `pexpr` from the command would include this information, but `to_expr` would report `no such 'blah'` when called afterward. To fix this you have to add the local variables you want `simp` to be able to see as local hypotheses in the same `tactic_state` in which you invoke `expr.simp`---so no wrapping your call to `expr.simp` directly in `lean.parser.of_tactic` (since this cooks up a fresh `tactic_state` for you).
Closes #2475.
<br>
<br>

2020-04-23 23:53:50 0196748
chore(scripts): update nolints.txt (#2503)
I am happy to remove some nolints for you!

2020-04-23 21:05:16 fdbf22d
doc(tactic/*): doc entries for some missing tactics (#2489)
This covers most of the remaining list in the old issue #450. I've already checked off my additions.

2020-04-23 18:01:07 fc7ac67
feat(data/string): add docstrings and improve semantics (#2497)
Could have gone in #2493, but I didn't want to hold up #2478. Besides, what's a tiny pull request between friends.
This "writing docstrings" thing really lets helps you discover tiny little tweaks here and here.
<br>
<br>
<br>

2020-04-23 15:14:10 9ccfa92
feat(data/string): add phrasings common to conventional languages (#2493)
Just add a pair of string comparison functions with semantics which are common to conventional programming languages.
<br>
<br>
<br>

2020-04-23 12:15:02 64e464f
chore(*): remove unnecessary transitive imports (#2496)
This removes all imports which have already been imported by other imports.
Overall, this is slightly over a third of the total import lines. This should have no effect whatsoever on compilation, but should make `leanproject import-graph` somewhat... leaner!

2020-04-23 09:12:20 8a7b94f
chore(tactic/suggest): add a docstring (#2499)

2020-04-23 02:52:58 7c10fd2
feat(category_theory/epi_mono): opposite epi mono properties (#2479)
Relating epis and monos to the opposite category.

2020-04-23 01:10:17 4d94de4
feat(category_theory): wide pullbacks and limits in the over category (#2461)
This PR introduces [wide pullbacks](https://ncatlab.org/nlab/show/wide+pullback). 
Ordinary pullbacks are then defined as a special case of wide pullbacks, which simplifies some of the definitions and proofs there. 
Finally we show that the existence of wide pullbacks in `C` gives products in the slice `C/B`, and in fact gives all limits.

2020-04-22 23:11:50 4dadd26
chore(scripts): update nolints.txt (#2495)
I am happy to remove some nolints for you!

2020-04-22 21:20:58 bcbdeba
chore(tactic/apply_fun): add doc string and remove duplication (#2485)
I was just adding a docstring to `tactic.apply_fun`, and then saw some duplication and removed it. An example of a use of #2484.
<br>
<br>
<br>

2020-04-22 18:31:17 691a230
chore(scripts): update nolints.txt (#2494)
I am happy to remove some nolints for you!

2020-04-22 18:31:15 2fb6022
feat(mk_iff_of_inductive_prop): add, use, and document command (#2490)
This existed as an (undocumented) tactic that was being called with `run_cmd`. It deserves to be a documented user command.

2020-04-22 16:17:53 591a0a0
chore(*): only import one file per line (#2470)
This perhaps-unnecessarily-obsessive PR puts every import statement on its own line.
Why?
1. it's nice to be able to grep for `import X`
2. ~~if we enforced this, it would be easier deal with commands after imports, etc.~~ (irrelevant in 3.9)
3. it means I can remove all unnecessary transitive imports with a script
4. it's just tidier. :-)

2020-04-22 15:09:08 8865b00
chore(scripts): update nolints.txt (#2491)
I am happy to remove some nolints for you!

2020-04-22 12:17:00 d40662f
chore(tactic/auto_cases): add docstring and remove duplication (#2488)
I was just adding a docstring, and I saw some duplication so I removed it too.
<br>
<br>
<br>

2020-04-22 12:16:58 f760ad5
chore(meta/expr): add a docstring (#2487)
Add a docstring.
<br>
<br>
<br>

2020-04-22 12:16:56 62a613f
feat(data/option): add `option.mmap` and `option.maybe` (#2484)
Please let me know if something like this exists already! Over the last few days I've wanted it multiple times, and it is used in #2485.
<br>
<br>
<br>

2020-04-22 12:16:54 e4abced
chore(data/polynomial): rename type vars (#2483)
Rename `α` to `R` etc; use `ι` for index types
No other changes

2020-04-22 12:16:52 5965370
feat(data/monoid_algebra): algebra structure, lift of morphisms (#2366)
Prove that for a monoid homomorphism `f : G →* R` from a monoid `G` to a `k`-algebra `R` there exists a unique algebra morphism `g : k[G] →ₐ[k] R` such that `∀ x : G, g (single x 1) = f x`.
This is expressed as `def lift : (G →* R) ≃ (monoid_algebra k G →ₐ[k] R)`.
I want to use this to define `aeval` and `eval₂` for polynomials. This way we'll have many properties for free.

2020-04-22 09:12:07 142f001
chore(cmd/where): remove unused argument (#2486)
Just remove an unused argument from the `#where` declaration, satisfying the linter.
<br>
<br>
<br>

2020-04-22 03:48:09 5e2025f
feat(group_theory/bundled_subgroup): bundled subgroup (#2140)
Add bundled subgroups. While `is_subgroup` is a class taking `s : set G` as an argument, `subgroup G` is a structure with a field `carrier : set G` and a coercion to `set G`.

2020-04-21 20:46:05 585d77a
chore(scripts): update nolints.txt (#2482)
I am happy to remove some nolints for you!

2020-04-21 17:16:35 ffa97d0
fix(tactic/where): remove hackery from `#where`, using Lean 3c APIs (#2465)
We remove almost all of the hackery from `#where`, using the Lean 3c APIs exposed by @cipher1024. In doing so we add pair of library functions which make this a tad more convenient.
The last "hack" which remains is by far the most mild; we expose `lean.parser.get_current_namespace`, which creates a dummy definition in the environment in order to obtain the current namespace. Of course this should be replaced with an exposed C++ function when the time comes (crossref with the leanprover-community/lean issue here: https://github.com/leanprover-community/lean/issues/196).

2020-04-21 10:37:45 533a552
feat(tactic/hint): if hint can solve the goal, say so (#2474)
It used to be that `hint` would print:
```
the following tactics make progress:
----
tac1
tac2
tac3
```
with the tactics listed in order of number of resulting goals. In particular, if `tac1` and `tac2` actually solve the goal, while `tac3` only makes progress, this isn't explained.
With this PR, if any of those tactics actually close the goal, we only print those tactics, with text:
```
the following tactics solve the goal:
----
tac1
tac2
```

2020-04-21 10:37:42 15d35b1
feat(tactic/#simp): a user_command for #simp (#2446)
```lean
#simp 5 - 5
```
prints `0`.
If anyone knows how to get access to local `variables` while parsing an expression, that would be awesome. Then we could write 
```lean
variable (x : ℝ)
#simp [exp_ne_zero] : deriv (λ x, (sin x) / (exp x)) x
```
as well as
```lean
#simp [exp_ne_zero] : λ x, deriv (λ x, (sin x) / (exp x)) x
```

2020-04-21 07:42:40 df84064
fix(tactic/clear): don't use rb_map unnecessarily (#2325)
The `clear_dependent` tactic seems to unnecessarily convert `list` back and forth to an `rb_map`, for no purpose, and this makes the internal tactic unnecessarily difficult to call.

2020-04-21 05:12:16 3edb6a4
fix(category_theory/concrete): access the carrier type by the coercion (#2473)
This should marginally reduce the pain of using concrete categories, as the underlying types of a bundled object should more uniformly described via a coercion, rather than the `.α` projection.
(There's still some separate pain involving `bundled.map`, but it has an orthogonal fix which I'm working on in another branch.)

2020-04-21 01:17:00 7a13a11
chore(category_theory): delete two empty files (#2472)

2020-04-20 18:19:41 5d0a724
chore(docs/naming): update (#2468)
This file has been bit-rotting.

2020-04-20 15:36:57 7626763
fix(algebra/category/*/colimits): cleaning up (#2469)
With the passage of time, it seems some difficulties have dissolved away, and steps in the semi-automated construction of colimits in algebraic categories which previously required `rw` or even `erw`, can now be handled by `simp`. Yay!

2020-04-20 15:36:55 8adfafd
feat(data/nat,data/int): add some modular arithmetic lemmas (#2460)
These lemmas (a) were found useful in formalising solutions to some
olympiad problems, see
<https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Some.20olympiad.20formalisations>;
(b) seem more generally relevant than to just those particular
problems; (c) do not show up through library_search as being already
present.

2020-04-20 15:36:53 d1ba87a
feat(category_theory/faithful): faithful.of_iso (#2453)
A minor useful lemma, about to be abandoned on another branch.

2020-04-20 15:36:51 51e03aa
feat(data/monoid_algebra): the distrib_mul_action (#2417)

2020-04-20 14:24:18 036b038
chore(category_theory/opposites): typo fix (#2466)
As mentioned in #2464.

2020-04-20 13:15:51 59a767e
chore(scripts): update nolints.txt (#2467)
I am happy to remove some nolints for you!

2020-04-20 11:18:14 4474382
feat(category_theory/opposites): some opposite category properties (#2464)
Add some more basic properties relating to the opposite category.
Make sure you have:
  * [x] reviewed and applied the coding style: [coding](https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/style.md), [naming](https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/naming.md)
  * [x] reviewed and applied [the documentation requirements](https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/doc.md)
  * [x] make sure definitions and lemmas are put in the right files
  * [x] make sure definitions and lemmas are not redundant
For reviewers: [code review check list](https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/code-review.md)
If you're confused by comments on your PR like `bors r+` or `bors d+`, please see our [notes on bors](https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/bors.md) for information on our merging workflow.

2020-04-20 08:26:52 58088cc
fix(tactic/delta_instance): handle universe metavariables (#2463)

2020-04-20 07:17:35 9b25578
fix(category_theory/limits): avoid a rewrite in a definition (#2458)
The proof that every equalizer of `f` and `g` is an isomorphism if `f = g` had an ugly rewrite in a definition (introduced by yours truly). This PR reformulates the proof in a cleaner way by working with two morphisms `f` and `g` and a proof of `f = g` right from the start, which is easy to specialze to the case `(f, f)`, instead of trying to reduce the `(f, g)` case to the `(f, f)` case by rewriting.
This also lets us get rid of `fork.eq_of_ι_ι`, unless someone wants to keep it, but personally I don't think that using it is ever a good idea.

2020-04-20 01:36:42 c0afa80
chore(tactic/simp_result): forgot to import in tactic.basic (#2462)
When I write a new tactic, I tend not to import it into `tactic.basic` or `tactic.interactive` while testing it and PR'ing it, to save having to recompile the whole library every time I tweak the tactic.
But then, inevitably, I forget to add the import before the review process is finished.
This imports `simp_result`, from #2356, into `tactic.basic`.

2020-04-19 15:18:08 a8edb5e
fix(category_theory/limits): make image.map_comp a simp lemma (#2456)
This was not possible in Lean 3.8. Many thanks to @gebner for tracking down and fixing leanprover-community/lean#181 in Lean 3.9.

2020-04-19 15:18:06 e6aa533
fix(category_theory/limits): remove an unnecessary axiom in has_image_map (#2455)
I somehow missed the fact that `has_image_map.factor_map` is actually a consequence of `has_image_map.map_ι` together with the fact that `image.ι` is always a monomorphism.

2020-04-19 14:00:03 aa55f8b
feat(category_theory/eq_to_iso): missing simp lemma (#2454)
A missing simp lemma.

2020-04-19 14:00:01 9801c1c
feat(continued_fractions) add stabilisation under termination lemmas (#2451)
- continued fractions: add lemmas for stabilisation of computations under termination and add them to default exports
- seq: make argument in seq.terminated_stable explicit

2020-04-19 13:02:57 6054f7c
chore(number_theory/sum_four_squares): slightly shorten proof (#2457)
This proof was unnecessarily long due to a ring bug which has now been fixed.

2020-04-19 19:50:13+10:00 d344310
chore(category_theory/monoidal): some arguments that need to be made explicit in 3.8

2020-04-19 07:58:32 11d89a2
chore(algebra/module): replace typeclass arguments with inferred arguments (#2444)
This doesn't change the explicit type signature of any functions, but makes some inferable typeclass arguments implicit.
Beyond the potential performance improvement, my motivation for doing this was that in `monoid_algebra` we currently have two possible `module k (monoid_algebra k G)` instances: one directly from `monoid_algebra.module`, and another one via `restrict_scalars`. These are equal, but not definitionally. In another experimental branch, I couldn't even express the isomorphism between these module structures, because type inference was filling in the `monoid_algebra.module` instance in composition of linear maps, and then failing because one of the linear maps was actually using the other module structure...
This change fixes this.

2020-04-19 01:55:09 0ceac44
feat(data/nat/prime) factors of a prime number is the list [p] (#2452)
The factors of a prime number are [p].

2020-04-18 23:47:08 99245b3
chore(*): switch to lean 3.9.0 (#2449)
It's been too long since the last Lean release.

2020-04-18 23:47:06 d76a882
feat(category_theory/limits/over): over category has connected limits (#2438)
Show that the forgetful functor from the over category creates connected limits.
The key consequence of this is that the over category has equalizers, which we will use to show that it has all (finite) limits if the base category does.
I've also moved the connected category examples into `category_theory/connected.lean`.
Also I removed the proof of
`instance {B : C} [has_pullbacks.{v} C] : has_pullbacks.{v} (over B)`
which I wrote and semorrison massively improved, as the new instances generalise it. 
I also added a `reassoc` for `is_limit.fac`, which simplified one of the proofs I had.

2020-04-18 21:59:03 8ec447d
fix(*): remove `@[nolint simp_nf]` (#2450)
This removes a couple more nolints:
 - `coe_units_equiv_ne_zero` doesn't cause any problems anymore
 - `coe_mk` is redundant
 - `mk_eq_div` was not in simp-normal form (previously the linter timed out instead of reporting it as an error)
 - `factor_set.coe_add` is redundant

2020-04-18 17:48:38 5107c2b
fix(docs/extra/calc.md): remove extra space (#2448)
This was breaking the rendered doc at https://leanprover-community.github.io/mathlib_docs/calc.html#using-more-than-one-operator

2020-04-18 17:48:36 16552e6
fix(group_theory/submonoid): looping simp lemma (#2447)
Removes a `@[nolint simp_nf]`.  I have no idea why I didn't notice this earlier, but `coe_coe` loops due to `coe_sort_coe_base` since `submonoid` doesn't have it's own `has_coe_to_sort` instance.

2020-04-18 15:15:21 4e87223
feat(tactic/transport): transport structures across equivalences (#2251)
~~Blocked by #2246.~~
~~Blocked on #2319 and #2334, which both fix lower tactic layers used by `transport`.~~
From the doc-string:
---
Given a goal `⊢ S β` for some parametrized structure type `S`,
`transport` will look for a hypothesis `s : S α` and an equivalence `e : α ≃ β`,
and attempt to close the goal by transporting `s` across the equivalence `e`.
```lean
example {α : Type} [ring α] {β : Type} (e : α ≃ β) : ring β :=
by transport.
```
You can specify the object to transport using `transport s`,
and the equivalence to transport across using `transport s using e`.
---
You can just as easily transport a [`semilattice_sup_top`](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/lattice.20with.20antiautomorphism) or a `lie_ring`.
In the `test/transport.lean` file we transport `semiring` from `nat` to `mynat`, and verify that it's possible to do simple things with the transported structure.

2020-04-18 12:23:55 ffb99a3
chore(algebra/group/type_tags): add `additive.to_mul` etc (#2363)
Don't make `additive` and `multiplicative` irreducible (yet?) because
it breaks compilation here and there.
Also prove that homomorphisms from `ℕ`, `ℤ` and their `multiplicative`
versions are defined by the image of `1`.

2020-04-18 10:03:42 8b21231
chore(data/mv_polynomial): adding a comment about a T50000 regression (#2442)

2020-04-18 07:33:17 a530a81
refactor(data/nat/fib): simplify proof of fib_succ_succ (#2443)
By tweaking some of the lemmas, I managed to shorten `fib_succ_succ` from 7 complicated lines to a single call to `simp`.
An alternative expression would be:
```lean
unfold fib,
repeat { rw fib_aux_stream_succ },
unfold fib_aux_step,
```
I can change to that if you think the `simp` is too pithy.

2020-04-18 04:12:58 1ef989f
docs(install/*): put extra emphasis (#2439)
Put extra emphasis on creating and working with projects
If people like this change I'll also make it on the other pages.

2020-04-18 00:48:02 6b09575
feat(tactic/lint): lint for missing has_coe_to_fun instances (#2437)
Enforces the library note "function coercion":
https://github.com/leanprover-community/mathlib/blob/715be9f7466f30f1d4cbff4e870530af43767fba/src/logic/basic.lean#L69-L94
See #2434 for a recent PR where this issue popped up.

2020-04-17 21:00:09 24d464c
fix(github/workflows): ignore new bors branch (#2441)
Two hours ago, bors renamed the temporary branches. https://github.com/bors-ng/bors-ng/pull/933  :roll_eyes:

2020-04-17 19:48:56 da29275
chore(scripts): update nolints.txt (#2440)
I am happy to remove some nolints for you!

2020-04-17 16:30:37 64f6903
chore(*): migrate `nat/int/rat.eq_cast` to bundled homs (#2427)
Now it is `ring_hom.eq_*_cast`, `ring_hom.map_*_cast`, `add_monoid_hom.eq_int/nat_cast`.
Also turn `complex.of_real` into a `ring_hom`.

2020-04-17 13:44:40 855e70b
feat(data/nat): Results about nat.choose (#2421)
A convenience lemma for symmetry of choose and inequalities about choose.
More results from my combinatorics project.

2020-04-17 09:39:01 0bc15f8
feat(analysis/analytic/composition): the composition of analytic functions is analytic (#2399)
The composition of analytic functions is analytic. 
The argument is the following. Assume `g z = ∑ qₙ (z, ..., z)` and `f y = ∑ pₖ (y, ..., y)`. Then
```
g (f y) = ∑ qₙ (∑ pₖ (y, ..., y), ..., ∑ pₖ (y, ..., y))
= ∑ qₙ (p_{i₁} (y, ..., y), ..., p_{iₙ} (y, ..., y)).
```
For each `n` and `i₁, ..., iₙ`, define a `i₁ + ... + iₙ` multilinear function mapping
`(y₀, ..., y_{i₁ + ... + iₙ - 1})` to
`qₙ (p_{i₁} (y₀, ..., y_{i₁-1}), p_{i₂} (y_{i₁}, ..., y_{i₁ + i₂ - 1}), ..., p_{iₙ} (....)))`.
Then `g ∘ f` is obtained by summing all these multilinear functions.
The main difficulty is to make sense of this (especially the ellipsis) in a way that Lean understands. For this, this PR uses a structure containing a decomposition of `n` as a sum `i_1 + ... i_k` (called `composition`), and a whole interface around it developed in #2398. Once it is available, the main proof is not too hard.
This supersedes #2328, after a new start implementing compositions using sequences.

2020-04-17 06:57:05 715be9f
chore(scripts): update nolints.txt (#2436)
I am happy to remove some nolints for you!

2020-04-17 05:53:51 0567b7f
feat(category_theory/limits): strong epimorphisms and strong epi-mono factorizations (#2433)
This PR contains the changes I mentioned in #2374. It contains:
* the definition of a lift of a commutative square
* the definition of a strong epimorphism
* a proof that every regular epimorphism is strong
* the definition of a strong epi-mono factorization
* the class `has_strong_epi_images`
* the construction `has_strong_epi_images` -> `has_image_maps`
* a small number of changes which should have been part of #2423

2020-04-17 04:14:01 f347147
feat(category_theory):  creation of limits and reflection of isomorphisms (#2426)
Define creation of limits and reflection of isomorphisms.
Part 2 of a sequence of PRs aiming to resolve my TODO [here](https://github.com/leanprover-community/mathlib/blob/cf89963e14cf535783cefba471247ae4470fa8c3/src/category_theory/limits/over.lean#L143) - that the forgetful functor from the over category creates connected limits.
Remaining:
- [x] Add an instance or def which gives that if `F` creates limits and `K ⋙ F` `has_limit` then `has_limit K` as well.
- [x] Move the forget creates limits proof to limits/over, and remove the existing proof since this one is strictly stronger - make sure to keep the statement there though using the previous point.
- [x] Add more docstrings
Probably relevant to @semorrison and @TwoFX.

2020-04-17 02:42:19 0d3e546
chore(scripts): update nolints.txt (#2435)
I am happy to remove some nolints for you!

2020-04-17 01:11:58 d2db3e8
chore(algebra/lie_algebra): add function coercion for morphisms (#2434)
In fact three different changes are being made here:
 1. Adding direct function coercion for `lie_algebra.morphism`, allowing us to tidy up `map_lie` and increase simp scope
 2. Providing a zero element for `lie_subalgebra`, thus allowing removal of a `has_inhabited_instance` exception in nolints.txt
 3. Providing a zero element for `lie_submodule`, thus allowing removal of a `has_inhabited_instance` exception in nolints.txt

2020-04-16 14:03:47 c3d943e
feat(computability): strong reducibility and degrees (#1203)

2020-04-16 12:26:28 a113d6e
chore(scripts): update nolints.txt (#2432)
I am happy to remove some nolints for you!

2020-04-16 11:10:10 846cbab
feat(analysis/calculus): let simp compute derivatives (#2422)
After this PR:
```lean
example (x : ℝ) : deriv (λ x, cos (sin x) * exp x) x = (cos(sin(x))-sin(sin(x))*cos(x))*exp(x) :=
by { simp, ring }
```
Excerpts from the docstrings:
The simplifier is set up to prove automatically that some functions are differentiable, or differentiable at a point (but not differentiable on a set or within a set at a point, as checking automatically that the good domains are mapped one to the other when using composition is not something the simplifier can easily do). This means that one can write
`example (x : ℝ) : differentiable ℝ (λ x, sin (exp (3 + x^2)) - 5 * cos x) := by simp`.
If there are divisions, one needs to supply to the simplifier proofs that the denominators do not vanish, as in
```lean
example (x : ℝ) (h : 1 + sin x ≠ 0) : differentiable_at ℝ (λ x, exp x / (1 + sin x)) x :=
by simp [h]
```
The simplifier is not set up to compute the Fréchet derivative of maps (as these are in general complicated multidimensional linear maps), but it will compute one-dimensional derivatives.
To make sure that the simplifier can prove automatically that functions are differentiable, we tag many lemmas with the `simp` attribute, for instance those saying that the sum of differentiable functions is differentiable, as well as their product, their cartesian product, and so on. A notable exception is the chain rule: we do not mark as a simp lemma the fact that, if `f` and `g` are differentiable, then their composition also is: `simp` would always be able to match this lemma, by taking `f` or `g` to be the identity. Instead, for every reasonable function (say, `exp`), we add a lemma that if `f` is differentiable then so is `(λ x, exp (f x))`. This means adding some boilerplate lemmas, but these can also be useful in their own right. 
Tests for this ability of the simplifier (with more examples) are provided in `tests/differentiable.lean`.

2020-04-16 11:10:08 ec80061
refactor(analysis/asymptotics): make is_o irreducible (#2416)
`is_o` is currently not irreducible. Since it is a complicated type, Lean can have trouble checking if two types with `is_o` are defeq or not, leading to timeouts as described in https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/undergraduate.20calculus/near/193776607
This PR makes `is_o` irreducible.

2020-04-16 08:33:27 5fd4afc
refactor(tactic/norm_cast): simplified attributes and numeral support (#2407)
This is @pnmadelaine's work, I'm just updating it to work with current mathlib.
New and improved version of `norm_cast` as described in the paper "normalizing casts and coercions": https://arxiv.org/abs/2001.10594
The main new user-facing feature are the simplified attributes.  There is now only the `@[norm_cast]` attribute which subsumes the previous `norm_cast`, `elim_cast`, `squash_cast`, and `move_cast` attributes.
There is a new `set_option trace.norm_cast true` option to enable debugging output.

2020-04-16 04:20:38 7270af9
chore(scripts): update nolints.txt (#2430)
I am happy to remove some nolints for you!

2020-04-16 01:05:50 5ac2b48
feat(category_theory): connected categories (#2413)
- Define connected categories (using the convention that they must be nonempty) by asserting every functor to a discrete category is isomorphic to a constant functor. We also give some equivalent conditions which are more useful in practice: for instance that any function which is constant for objects which have a single morphism between them is constant everywhere.
- Give the definition of connected category as specified on wikipedia, and show it's equivalent. (This is more intuitive but it seems harder to both prove and use in lean, it also seems nicer stated with `head'`. If reviewers believe this should be removed, I have no objection, but I include it for now since it is the more familiar definition).
- Give three examples of connected categories.
- Prove that `X × -` preserves connected limits.
This PR is the first of three PRs aiming to resolve my TODO [here](https://github.com/leanprover-community/mathlib/blob/cf89963e14cf535783cefba471247ae4470fa8c3/src/category_theory/limits/over.lean#L143) - that the forgetful functor from the over category creates connected limits.
Make sure you have:
  * [x] reviewed and applied the coding style: [coding](https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/style.md), [naming](https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/naming.md)
  * [x] reviewed and applied [the documentation requirements](https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/doc.md)
  * [x] make sure definitions and lemmas are put in the right files
  * [x] make sure definitions and lemmas are not redundant
If this PR is related to a discussion on Zulip, please include a link in the discussion.
For reviewers: [code review check list](https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/code-review.md)

2020-04-15 22:29:29 66cc298
feat(data/finset): existence of a smaller set (#2420)
Show the existence of a smaller finset contained in a given finset.
The next in my series of lemmas for my combinatorics project.

2020-04-15 18:44:26 8510f07
chore(scripts): update nolints.txt (#2425)
I am happy to remove some nolints for you!

2020-04-15 17:53:24 1e212d7
fix(data/zmod/basic): typo (#2424)

2020-04-15 16:47:40 ce72cde
feat(category_theory/limits): special shapes API cleanup (#2423)
This is the 2.5th PR in a series of most likely three PRs about the cohomology functor. This PR has nothing to do with cohomology, but I'm going to need a lemma from this pull request in the final PR in the series.
In this PR, I
* perform various documentation and cleanup tasks
* add lemmas similar to the ones seen in #2396 for equalizers, kernels and pullbacks (NB: these are not needed for biproducts since the `simp` and `ext` lemmas for products and coproducts readily fire)
* generalize `prod.hom_ext` to the situation where we have a `binary_fan X Y` and an `is_limit` for that specific fan (and similar for the other shapes)
* add "bundled" versions of lift and desc. Here is the most important example:
```lean
def kernel.lift' {W : C} (k : W ⟶ X) (h : k ≫ f = 0) : {l : W ⟶ kernel f // l ≫ kernel.ι f = k} :=
⟨kernel.lift f k h, kernel.lift_ι _ _ _⟩
```
This definition doesn't really do anything by itself, but it makes proofs comforable and readable. For example, if you say `obtain ⟨t, ht⟩ := kernel.lift' g p hpg`, then the interesting property of `t` is right there in the tactic view, which I find helpful in keeping track of things when a proof invokes a lot of universal properties.

2020-04-15 13:54:37 9b797ee
feat(library_search): (efficiently) try calling symmetry before searching the library (#2415)
This fixes a gap in `library_search` we've known about for a long time: it misses lemmas stated "the other way round" than what you were looking for.
This PR fixes that. I cache the `tactic_state` after calling `symmetry`, so it is only called once, regardless of how much of the library we're searching.
When `library_search` was already succeeding, it should still succeed, with the same run time.
When it was failing, it will now either succeed (because it found a lemma after calling `symmetry`), or fail (in the same time, if `symmetry` fails, or approximately twice the time, if `symmetry` succeeds). I think this is a reasonable time trade-off for better search results.

2020-04-15 07:41:54 8e8037f
chore(category_theory/limits): remove dependency on concrete_categories (#2411)
Just move some content around, so that `category_theory/limits/cones.lean` doesn't need to depend on the development of `concrete_category`.

2020-04-14 12:45:29 fd0dc27
chore(scripts): update nolints.txt (#2418)
I am happy to remove some nolints for you!

2020-04-14 11:02:03 96a07a7
refactor(analysis/calculus/deriv): split comp and scomp (#2410)
The derivative of the composition of a function and a scalar function was written using `smul`, regardless of the fact that the first function was vector-valued (in which case `smul` is not avoidable)  or scalar-valued (in which case it can be replaced by `mul`). Instead, this PR introduces two sets of lemmas (named `scomp` for the first type and `comp` for the second type) to get the usual multiplication in the formula for the derivative of the composition of two scalar functions.

2020-04-14 11:02:02 15fcb8a
feat(algebra/lie_algebra): define equivalences, direct sums of Lie algebras (#2404)
This pull request does two things:
1. Defines equivalences of Lie algebras (and proves that these do indeed form an equivalence relation)
2. Defines direct sums of Lie algebras
The intention is to knock another chip off https://github.com/leanprover-community/mathlib/issues/1093

2020-04-14 08:19:33 ba154bc
fix(library_search): find id (#2414)
Previously `library_search` could not find theorems that did not have a head symbol (e.g. were function types with source and target both "variables all the way down"). Now it can, so it solves:
```lean
example (α : Prop) : α → α :=
by library_search -- says: `exact id`
example (p : Prop) [decidable p] : (¬¬p) → p :=
by library_search -- says: `exact not_not.mp`
example (a b : Prop) (h : a ∧ b) : a := 
by library_search -- says: `exact h.left`
example (P Q : Prop) [decidable P] [decidable Q]: (¬ Q → ¬ P) → (P → Q) :=
by library_search -- says: `exact not_imp_not.mp`
```

2020-04-14 07:18:15 af27ee3
chore(analysis): two more -T50000 challenges (#2393)
Refactor two proofs to bring them under `-T50000`, in the hope that we can later add this requirement to CI, per #2276.

2020-04-13 17:33:51 8356b79
feat(logic/basic): a few simp lemmas about `and` and `or` (#2408)

2020-04-13 17:33:49 fe878ea
feat(algebra/big-operators): some big operator lemmas (#2152)
Lemmas I found useful in my [combinatorics](https://b-mehta.github.io/combinatorics/) project
Make sure you have:
  * [x] reviewed and applied the coding style: [coding](https://github.com/leanprover/mathlib/blob/master/docs/contribute/style.md), [naming](https://github.com/leanprover/mathlib/blob/master/docs/contribute/naming.md)
  * [x] reviewed and applied [the documentation requirements](https://github.com/leanprover/mathlib/blob/master/docs/contribute/doc.md)
  * [x] make sure definitions and lemmas are put in the right files
  * [x] make sure definitions and lemmas are not redundant
If this PR is related to a discussion on Zulip, please include a link in the discussion.
For reviewers: [code review check list](https://github.com/leanprover/mathlib/blob/master/docs/contribute/code-review.md)

2020-04-13 17:33:47 67e363f
feat(data/finset): finset lemmas from combinatorics (#2149)
The beginnings of moving results from my combinatorics project
Make sure you have:
  * [x] reviewed and applied the coding style: [coding](https://github.com/leanprover/mathlib/blob/master/docs/contribute/style.md), [naming](https://github.com/leanprover/mathlib/blob/master/docs/contribute/naming.md)
  * [x] reviewed and applied [the documentation requirements](https://github.com/leanprover/mathlib/blob/master/docs/contribute/doc.md)
  * [x] make sure definitions and lemmas are put in the right files
  * [x] make sure definitions and lemmas are not redundant
For reviewers: [code review check list](https://github.com/leanprover/mathlib/blob/master/docs/contribute/code-review.md)

2020-04-13 14:53:40 f3ac7b7
feat(combinatorics/composition): introduce compositions of an integer (#2398)
A composition of an integer `n` is a decomposition of `{0, ..., n-1}` into blocks of consecutive
integers. Equivalently, it is a decomposition `n = i₀ + ... + i_{k-1}` into a sum of positive
integers. We define compositions in this PR, and introduce a whole interface around it. The goal is to use this as a tool in the proof that the composition of analytic functions is analytic

2020-04-13 13:52:21 01ac691
feat(category_theory/limits/shapes/binary_products): add some basic API for prod and coprod (#2396)
Adding explicit proofs of some basic results about maps into A x B and maps from A coprod B

2020-04-13 12:55:12 cf89963
chore(scripts): update nolints.txt (#2405)
I am happy to remove some nolints for you!

2020-04-13 08:52:34 17b2d06
refactor(order/filter): refactor filters infi and bases (#2384)
This PR expands what Yury wrote about filter bases, and takes the opportunity to bring long overdue clarification to our treatment of infimums of filters (and also improve documentation and ordering in
filter.basic). I'm sorry it mixes reorganization and some new content, but this was hard to avoid (I do keep what motivated all this for a later PR).
The fundamental problem is that the infimum construction remained mysterious in filter.basic. All lemmas about it assume a directed family of filters. Yet there are many uses of infimums without this condition, notatably things like `⨅ i, principal (s i)` without condition on the indexed family of sets `s`.
Related to this, `filter.generate` stayed mysterious. It was used only as a technical device to lift the complete lattice structure from `set (set a)`. However it has a perfectly valid mathematical existence,
as explained by the lemma 
```lean
lemma sets_iff_generate {s : set (set α)} {f : filter α} : f ≤ filter.generate s ↔ s ⊆ f.sets
```
which justifies the docstring of `generate`: `generate g` is the smallest filter containing the sets `g`.
As an example of the mess this created, consider:
https://github.com/leanprover-community/mathlib/blob/e758263/src/topology/bases.lean#L25 
```lean
def has_countable_basis (f : filter α) : Prop :=
∃ s : set (set α), countable s ∧ f = ⨅ t ∈ s, principal t
```
As it stands, this definition is not clearly related to asking for the existence of a countable `s` such that `f = generate s`.
Here the main mathematical content this PR adds in this direction:
```lean
lemma mem_generate_iff (s : set $ set α) {U : set α} : U ∈ generate s ↔
∃ t ⊆ s, finite t ∧ ⋂₀ t ⊆ U
lemma infi_eq_generate (s : ι → filter α) : infi s = generate (⋃ i, (s
i).sets) 
lemma mem_infi_iff {ι} {s : ι → filter α} {U : set α} : (U ∈ ⨅ i, s i) ↔
  ∃ I : set ι, finite I ∧ ∃ V : {i | i ∈ I} → set α, (∀ i, V i ∈ s i) ∧
  (⋂ i, V i) ⊆ U
```
All the other changes in filter.basic are either:
* moving out stuff that should have been in other files (such as the lemmas that used to be at
the very top of this file)
* reordering lemmas so that we can have section headers and things are easier to find, 
* adding to the module docstring. This module docstring contains more mathematical explanation than our usual ones. I feel this is needed because many people think filters are exotic (whereas I'm more and more convinced we should teach filters).
The reordering stuff makes it clear we could split this file into a linear chain of files, like we did with topology, but this is open for discussion.
Next I added a lot to `filter.bases`. Here the issue is filter bases are used in two different ways. If you already have a filter, but you want to point out it suffices to use certain sets in it. Here you want to use Yury's `has_basis`. Or you can start with a (small) family of sets having nice properties, and build a filter out of it. Currently we don't have this in mathlib, but this is crucial for incoming PRs from the perfectoid project. For instance, in order to define the I-adic topology, you start with powers of I, make a filter and then make a topology. This also reduces the gap with Bourbaki which uses filter bases everywhere.
I turned `has_basis` into a single field structure. It makes it very slightly less convenient to prove (you need an extra pair of angle brackets) but much easier to extend when you want to record more
properties of the basis, like being countable or decreasing. Also I proved the fundamental property that `f.has_basis p s` implies that `s` (filtered by `p`) actually *is* a filter basis. This is of course easy but crucial to connect with real world maths.
At the end of this file, I moved the countable filter basis stuff that is currently in topology.bases (aiming for first countable topologies) except that I used the foundational work on filter.basic to clearly prove all different formulations. In particular:
```lean
lemma generate_eq_generate_inter (s : set (set α)) : generate s = generate (sInter '' { t | finite t ∧ t ⊆ s})
```
clarifies things because the right-hand colleciton is countable if `s` is, and has the nice directedness condition.
I also took the opportunity to simplify a proof in topology.sequences, showcasing the power of the newly introduced
```lean
lemma has_antimono_basis.tendsto [semilattice_sup ι] [nonempty ι] {l :
filter α} {p : ι → Prop} {s : ι → set α} (hl : l.has_antimono_basis p s)
{φ : ι → α} (h : ∀ i : ι, φ i ∈ s i) : tendsto φ at_top l
```
(I will add more to that sequences file in the next PR).

2020-04-13 08:52:32 92c8d93
feat(algebra/homology): the cohomology functor (#2374)
This is the second in a series of most likely three PRs about the cohomology functor. As such, this PR depends on #2373.
In the project laid out in `homology.lean`, @semorrison asks what the minimal assumptions are that are needed to get induced maps on images. In this PR, I offer a tautologial answer to this question: We get induced maps on images when there are induced maps on images. In this way, we can let type class resolution answer the question whether cohomology is functorial.
In particular, the third PR will contain the fact that if our images are strong epi-mono factorizations, then we get induced maps on images. Since the regular coimage construction in regular categories is a strong epi-mono factorization, the approach in this PR generalizes the previous suggestion of requiring `V` to be regular.
A quick remark about cohomology and dependent types: As you can see, at one point Lean forces us to write `i - 1 + 1` instead of `i` because these two things are not definitionally equal. I am afraid, as we do more with cohomology, there will be many cases of this issue, and to compose morphisms whose types contain different incarnations of the same integer, we will have to insert some `eq_to_hom`-esque glue and pray that we will be able to rewrite them all away in the proofs without getting the beloved `motive is not type correct` error. Maybe there is some better way to solve this problem? (Or am I overthinking this and it is not actually going to be an issue at all?)

2020-04-13 07:55:23 ca98659
chore(scripts): update nolints.txt (#2403)
I am happy to remove some nolints for you!

2020-04-13 05:19:08 51f7319
chore(algebra/module): rename type vars, minor cleanup, add module docstring (#2392)
* Use `R`, `S` for rings, `k` for a field, `M`, `M₂` etc for modules;
* Add a `semiring` version of `ring_hom.to_module`;
* Stop using `{rα : ring α}` trick as Lean 3.7 tries unification before class search;
* Add a short module docstring

2020-04-13 03:08:38 64fa9a2
chore(*): futureproof import syntax (#2402)
The next community version of Lean will treat a line starting in the first column
after an import as a new command, not a continuation of the import.

2020-04-12 20:36:49 ef4d235
feat(category_theory): biproducts, and biproducts in AddCommGroup (#2187)
This PR
1. adds typeclasses `has_biproducts` (implicitly restricting to finite biproducts, which is the only interesting case) and `has_binary_biproducts`, and the usual tooling for special shapes of limits.
2. provides customised `has_products` and `has_coproducts` instances for `AddCommGroup`, which are both just dependent functions (for `has_coproducts` we have to assume the indexed type is finite and decidable)
3. because these custom instances have identical underlying objects, it's trivial to put them together to get a `has_biproducts AddCommGroup`.
4. as for 2 & 3 with binary biproducts for AddCommGroup, implemented simply as the cartesian group.

2020-04-12 18:17:30 1433f05
fix(tactic/norm_cast): typo (#2400)

2020-04-12 06:01:35 d84de80
feat(set_theory/game): short games, boards, and domineering (#1540)
This is a do-over of my previous attempt to implement the combinatorial game of domineering. This time, we get a nice clean definition, and it computes!
To achieve this, I follow Reid's advice: generalise! We define 
```
class state (S : Type u) :=
(turn_bound : S → ℕ)
(L : S → finset S)
(R : S → finset S)
(left_bound : ∀ {s t : S} (m : t ∈ L s), turn_bound t < turn_bound s)
(right_bound : ∀ {s t : S} (m : t ∈ R s), turn_bound t < turn_bound s)
```
a typeclass describing `S` as "the state of a game", and provide `pgame.of [state S] : S \to pgame`.
This allows a short and straightforward definition of Domineering:
```lean
/-- A Domineering board is an arbitrary finite subset of `ℤ × ℤ`. -/
def board := finset (ℤ × ℤ)
...
/-- The instance describing allowed moves on a Domineering board. -/
instance state : state board :=
{ turn_bound := λ s, s.card / 2,
  L := λ s, (left s).image (move_left s),
  R := λ s, (right s).image (move_right s),
  left_bound := _
  right_bound := _, }
```
which computes:
```
example : (domineering ([(0,0), (0,1), (1,0), (1,1)].to_finset) ≈ pgame.of_lists [1] [-1]) := dec_trivial
```

2020-04-12 00:32:35 0f89392
chore(scripts): update nolints.txt (#2395)
I am happy to remove some nolints for you!

2020-04-11 22:53:11 ee8cb15
feat(category_theory): functorial images (#2373)
This is the first in a series of most likely three PRs about the cohomology functor. In this PR, I
* add documentation for `comma.lean`,
* introduce the arrow category as a special case of the comma construction, and
* introduce the notion of functorial images, which means that commutative squares induce morphisms on images making the obvious diagram commute.

2020-04-11 21:19:21 aa42f3b
chore(scripts): update nolints.txt (#2391)
I am happy to remove some nolints for you!

2020-04-11 18:44:17 5f1bfcf
chore(tactic/lean_core_docs): add API docs for core Lean tactics (#2371)
This is an attempt to get some documentation of most core Lean tactics into the API docs.
See https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/undocumented.20core.20tactics (and the link in my second message in that thread) for background.
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
Co-Authored-By: Scott Morrison <scott@tqft.net>
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>

2020-04-11 18:44:15 80340d8
feat(category_theory): define action_category (#2358)
This is a simple construction that I couldn't find anywhere else: given a monoid/group action on X, we get a category/groupoid structure on X. The plan is to use to use the action groupoid in the proof of Nielsen-Schreier, where the projection onto the single object groupoid is thought of as a covering map.
To make sense of "stabilizer is mul_equiv to End", I added the simple fact that the stabilizer of any multiplicative action is a submonoid. This already existed for group actions. As far as I can tell, this instance shouldn't cause any problems as it is a Prop.

2020-04-11 16:16:28 e1feab4
refactor(*): rename ordered groups/monoids to ordered add_ groups/monoids (#2347)
In the perfectoid project we need ordered commutative monoids, and they are multiplicative. So the additive versions should be renamed to make some place.

2020-04-11 14:27:08 c9fca15
chore(algebra/category): remove some [reducible] after Lean 3.8 (#2389)
Now that Lean 3.8 has arrived, we can essentially revert #2290, but leave in the examples verifying that everything still works.
Lovely!

2020-04-11 13:00:39 83359d1
chore(scripts): update nolints.txt (#2390)
I am happy to remove some nolints for you!

2020-04-11 09:58:11 4fa2924
chore(scripts): update nolints.txt (#2388)
I am happy to remove some nolints for you!

2020-04-11 09:58:09 81d8104
feat(actions): manage labels on PR review (#2387)
Github actions will now add "ready-to-merge" to PRs that are approved by writing "bors r+" / "bors merge" in a PR reviews. It will also remove the "request-review" label, if present.

2020-04-11 09:58:07 c68f23d
chore(category_theory/types): add documentation, remove bad simp lemmas and instances, add notation for functions as morphisms (#2383)
* Add module doc and doc strings for `src/category_theory/types.lean`.
* Remove some bad simp lemmas and instances in that file and `src/category_theory/category/default.lean`.
* Add a notation `↾f` which enables Lean to see a function `f : α → β` as a morphism `α ⟶ β` in the category of types.

2020-04-11 09:58:05 00b510e
perf(data/*): add inline attributes (#2380)
This is part of an effort to bring `rewrite_search` to mathlib. Depends on #2375.

2020-04-11 09:58:03 690643a
fix(tactic/equiv_rw): don't use `subst` unnecessarily (#2334)
This removes an unnecessary `subst` from the algorithm in `equiv_rw`, which was responsible for inserting `eq.rec`'s in data terms.

2020-04-11 07:17:19 8556499
feat(category_theory): make defining groupoids easier (#2360)
The point of this PR is to lower the burden of proof in showing that a category is a groupoid. Rather than constructing well-defined two-sided inverses everywhere, with `groupoid.of_trunc_split_mono` you'll only need to show that every morphism has some retraction. This makes defining the free groupoid painless. There the retractions are defined by recursion on a quotient, so this saves the work of showing that all the retractions agree.
I used `trunc` instead of `nonempty` to avoid choice / noncomputability.
I don't understand why the @'s are needed: it seems Lean doesn't know what category structure C has without specifying it?

2020-04-11 04:27:56 597704a
chore(*): switch to lean 3.8.0 (#2361)
Switch to Lean 3.8.

2020-04-10 20:56:06 ebdeb3b
chore(scripts): update nolints.txt (#2386)
I am happy to remove some nolints for you!

2020-04-10 18:03:50 29080c8
feat(data/list/range): add sum lemmas (#2385)
Adding the proof that left and right multiplication in a ring commute with list sum.

2020-04-10 18:03:48 61fa489
feat(tactic/trunc_cases): a tactic for case analysis on trunc hypotheses (#2368)
```
/--
Perform case analysis on a `trunc` expression, 
preferentially using the recursor `trunc.rec_on_subsingleton` 
when the goal is a subsingleton, 
and using `trunc.rec` otherwise.
Additionally, if the new hypothesis is a type class, 
reset the instance cache.
-/
```

2020-04-10 15:39:37 3cc7a32
feat(order/complete_lattice): add a constructor from `partial_order` and `Inf` (#2359)
Also use `∃!` in `data/setoid`.

2020-04-10 13:48:32 5169595
chore(tactic/omega): add trace.omega option to show internal representation (#2377)
This is helpful when debugging issues such as #2376 and #1484.

2020-04-10 13:48:30 bf8f25a
feat(algebra/lie_algebra): quotients of Lie modules are Lie modules (#2335)

2020-04-10 12:54:03 1a099b3
chore(scripts): update nolints.txt (#2381)
I am happy to remove some nolints for you!

2020-04-10 12:54:02 a714245
feat(group_theory/order_of_element): order_of_dvd_iff_pow_eq_one (#2364)

2020-04-10 11:53:26 55814dc
fix(.github/workflows/add_label): add missing outputs (#2379)
I hope this fixes the `add_label` workflow.

2020-04-10 11:53:24 808fa8d
chore(.github): remove linebreaks from pull request template (#2378)
github treats a newline in the markdown text as a linebreak.

2020-04-10 10:19:59 e758263
refactor(ring_theory/algebra): use bundled homs, allow semirings (#2303)
Fixes #2297
Build fails because of some class instance problems, asked [on Zulip](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Need.20help.20with.20class.20instance.20resolution), no answer yet.

2020-04-10 07:02:46 f723f37
feat(ci): switch from mergify to bors (#2322)
This PR (joint work with @gebner) changes the automation that merges our PRs from mergify to a service called [bors](https://bors.tech/). Currently, the "time-to-master" of an approved PR grows linearly with the number of currently queued PRs, since mergify builds PRs against master one at a time. bors batches approved PRs together before building them against master so that most PRs should merge within 2*(current build time).
As far as day-to-day use goes, the main difference is that maintainers will approve PRs by commenting with the magic words "`bors r+`" instead of "approving" on Github and adding the "ready-to-merge" label. Contributors should be aware that pushing additional commits to an approved PR will now require a new approval.
Some longer notes on bors and mathlib can be found [here](https://github.com/leanprover-community/mathlib/blob/2ea15d65c32574aaf513e27feb24424354340eea/docs/contribute/bors.md).

2020-04-10 06:01:10 495deb9
chore(scripts): update nolints.txt

2020-04-10 05:27:11 6152d45
refactor(field_theory/perfect_closure): use bundled homs, review (#2357)
* refactor(field_theory/perfect_closure): use bundled homs, review
Also add lemmas like `monoid_hom.iterate_map_mul`.
* Fix a typo spotted by `lint`
* Apply suggestions from code review
Co-Authored-By: Johan Commelin <johan@commelin.net>

2020-04-10 02:46:37 b15c213
chore(*): replace uses of `---` delimiter in tactic docs (#2372)
* update abel doc string
the tactic doc entry seems completely fine as the doc string,
I don't know why these were separated
* replace uses of --- in docs

2020-04-09 23:56:46 19e1a96
doc(add_tactic_doc): slight improvement to docs (#2365)
* doc(add_tactic_doc): slight improvement to docs
* Update docs/contribute/doc.md
Co-Authored-By: Yury G. Kudryashov <urkud@urkud.name>
* sentence
* update add_tactic_doc doc entry

2020-04-09 21:05:16 4a1dc42
chore(scripts): update nolints.txt

2020-04-09 20:31:33 6a7db27
feat(tactic/ring_exp) allow ring_exp inside of conv blocks (#2369)
* allow ring_exp inside of conv blocks
* Update test/ring_exp.lean
* Update test/ring_exp.lean
* Update test/ring_exp.lean
* add docstrings

2020-04-09 17:41:23 d240f38
feat(tactic/simp_result): tactics for simplifying the results of other tactics (#2356)
* feat(tactic/simp_result): tactics for simplifying the results of other tactics
* word
* better tests
* order of arguments
* Revert "order of arguments"
This reverts commit 38cfec6867459fcc4c5ef2d41f5313a5b0466c53.
* fix add_tactic_doc
* slightly robustify testing
* improve documentation

2020-04-09 12:44:49 63fc23a
feat(data/list): chain_iff_nth_le (#2354)
* feat(data/list): chain_iff_nth_le
* Update src/data/list/basic.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* move
* fix

2020-04-09 10:08:54 bda8a05
doc(docs/extras/tactic_writing) add cheap method (#2198)
* doc(docs/extras/tactic_writing) add cheap method
About 50% of my personal use cases for writing tactics are just because I want a simple way of stringing several tactics together, so I propose adding this so I will know where to look when I realise I can't remember the syntax.
* style fixes
* Update tactic_writing.md
* Update tactic_writing.md
* Update docs/extras/tactic_writing.md

2020-04-09 09:03:53 a8797ce
feat(data/set/basic): add lemmata (#2353)
* feat(data/set/basic): add lemmata
* switch to term mode proof
* removing dupe
* make linter happy
* Update src/data/set/basic.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* change proof

2020-04-09 06:10:23 80d3ed8
fix(algebra/euclidean_domain): remove decidable_eq assumption (#2362)
This PR removes the `decidable_eq` assumption on the `field.to_euclidean_domain` instance.  Decidable equality was only used to define the remainder with an if-then-else, but this can also be done by exploiting the fact that `0⁻¹ = 0`.
The current instance is a bit problematic since it can cause `a + b : ℝ` to be noncomputable if type-class inference happens to choose the wrong instance (going through `euclidean_domain` instead of "directly" through some kind of ring).

2020-04-09 03:16:05 67b121e
chore(scripts): update nolints.txt

2020-04-09 02:50:30 fbc9592
chore(data/list): move some sections to separate files (#2341)
* move list.func namespace to its own file
* move erase_dup to its own file
* move rotate to its own file
* move tfae to its own file
* move bag_inter and intervals
* move range out
* move nodup
* move chain and pairwise
* move zip
* move forall2
* move of_fn
* add copyright headers
* remove unnecessary sections, move defns to func.set and tfae
* fixes
* oops, forgot to add file

2020-04-09 00:00:42 e4e483e
Bugfix for norm num when testing divisibility of integers (#2355)
they were assumed nats somehow

2020-04-08 21:12:22 c3d9cf9
feat(analysis/analytic/basic): change origin of power series (#2327)
* feat(analysis/analytic/basic): move basepoint of power series
* docstring
* Update src/analysis/analytic/basic.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/analysis/analytic/basic.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/analysis/analytic/basic.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>

2020-04-08 18:19:54 dae7154
chore(scripts): update nolints.txt

2020-04-08 17:46:11 55d430c
feat(tactic/linter): add decidable_classical linter (#2352)
* feat(tactic/linter): add decidable_classical linter
* docstring
* cleanup
* fix build, cleanup
* fix test
* Update src/tactic/lint/type_classes.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/tactic/lint/type_classes.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/tactic/lint/default.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/tactic/lint/type_classes.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/data/dfinsupp.lean
Co-Authored-By: Yury G. Kudryashov <urkud@urkud.name>

2020-04-08 15:10:31 65a5dc0
feat(data/support): define support of a function and prove some properties (#2340)
* feat(data/support): define support of a function and prove some properties
* Add `support_mul'` for `group_with_zero`

2020-04-08 12:29:19 b550c16
fix(tactic/solve_by_elim): fix metavariable bug from #2269 (#2289)
* chore(tactic/solve_by_elim): fix metavariable bug from #2269
* tests
* forgot to save file?
* fix bug, and tweak docs
* fix
* oops, remove stray
* provide both `lemmas` and `lemma_thunks` fields
* fix
* fix
* remove code duplication
* fix indenting
* add comments about evaluating thunks in mk_assumption_set

2020-04-08 09:55:55 bd21cff
feat(data/list/basic): some lemmas about sum/head/tail for list ℕ (#2342)
* feat(data/list/basic): some lemmas about sum/head/tail for list ℕ
* Add comment
* remove lemma, moving to another PR
* suggestion from review

2020-04-08 07:20:14 cb8d8ac
feat (data/list/basic): lemmas about prod and take (#2345)
* feat (data/list/basic): lemmas about prod and take
* move lemma
* one more
* using to_additive properly

2020-04-08 01:12:13 732f710
feat(data/list/basic): nth_le 0 = head (#2350)
* feat(data/list/basic): nth_le 0 = head
* oops

2020-04-07 22:38:07 0e2970c
feat(algebra/group/basic.lean): add inv_mul_eq_one (#2349)

2020-04-07 19:50:30 34ae62a
feat(algebra/homology): functoriality of induced maps on cycles (#2338)
* feat(algebra/homology): Functoriality of induced maps on cycles
* Rename cycles to cocycles, induced_maps_on_cocycles_functor to kernels_functor
* update names

2020-04-07 17:07:59 e2fa8b2
chore(test/refine_struct): remove dead code (#2348)

2020-04-07 16:06:37 abccc30
chore(scripts): update nolints.txt

2020-04-07 15:31:37 6f75c57
refactor(measure_theory/borel): `borel` is not an `instance` (#2326)
Redo Borel spaces in a way similar to `closed_order_topology`/`order_topology`.
* `borel` is no longer an `instance`;
* define typeclass `opens_measurable_space` for a space with `measurable_space` and `topological_space` structures such that all open sets are measurable;
* define typeclass `borel_space` for a space with `measurable_space` and `topological_space` structures such that `measurable_space` structure is equal to `borel`;
* use dot syntax in more cases;
* review some proofs that started to fail because of this change.

2020-04-07 12:40:05 97c4302
feat(data/list/basic): add map_take/drop_take (#2344)

2020-04-07 10:10:41 2f2e016
chore(data/list/basic): rename take_all -> take_length (#2343)
* chore(data/list/basic): rename take_all -> take_length
* also rename drop_all

2020-04-07 08:48:42 d936c28
feat(data/real/nnreal): coe_max and coe_min (#2346)

2020-04-07 06:44:18 c85453d
fix(tactic/refine_struct): don't add unnecessary `eq.mpr` or `id` (#2319)
* fix(tactic/interactive): don't unfold non-Prop goals
The old behaviour caused `eq.mpr`'s in `pi_instance` output.
* add a test file
* move test
* actually move test
* Update test/refine_struct.lean
* test: fix compile
* Apply suggestions from code review
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* Try a fix by @gebner and @cipher1024
* Update test/refine_struct.lean
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* apply Gabriel's suggestion

2020-04-07 04:14:25 df64ea9
chore(scripts): update nolints.txt

2020-04-07 03:42:42 60d1457
chore(algebra/big_operators): drop some `decidable_eq` assumptions (#2332)
* chore(algebra/big_operators): drop some `decidable_eq` assumptions
I wonder why `lint` didn't report them.
* Drop unused arguments

2020-04-06 23:32:14 7628c6c
chore(scripts): update nolints.txt

2020-04-06 23:05:14 48cc0c8
feat(algebra/group_with_zero): groups with a zero element adjoined (#2242)
* feat(algebra/group_with_zero*): Basics on groups with a zero adjoined
* feat(algebra/group_with_zero*): Basics on groups with a zero adjoined
* Make argument implicit
* Move inv_eq_zero out of gwz namespace
* Partial refactor
* Remove open_locale classical
* Fix build
* Factor out monoid_with_zero
* Fix linter errors, hopefully
* Fix build
* Fix tests
* Replace G with G0
* Add spaces around `^`
* Add spaces and backticks in docstrings
* Fix docstring of `mk0`
* Fix statement of inv_eq_iff
* Golf inv_injective
* Golf inv_eq_zero
* Remove the gwz namespace
* Fix build

2020-04-06 21:01:55 89fdec6
fix(data/finset): add comment (#2336)
* doc(data/finset): adding comment
* fix(topology/metric_space/basic): comment typo

2020-04-06 18:20:25 7b120a3
feat(data/mv_polynomial): add pderivative_eq_zero_of_not_mem_vars (#2324)
* feat(data/mv_polynomial): add pderivative_eq_zero_of_not_mem_vars
* Added doc comment for `pderivative.add_monoid_hom`
* Fix formatting
* fixed issues from review
* change begin end to braces.
* fix issues from review

2020-04-06 15:34:03 ff910dc
feat(topology/bounded_continuous_function): composition of limits when uniform convergence (#2260)
* feat(topology/bounded_continuous_function): composition of limits when uniform convergence
* better statement
* uniform space version
* cleanup
* fix linter
* reviewer's comments

2020-04-06 12:39:52 572fad1
chore(topology/instances/ennreal): prove `tendsto_iff_edist_tendsto_0` (#2333)

2020-04-06 10:15:13 3d60e13
chore(algebra/field): move some lemmas from `field` to `division_ring` (#2331)

2020-04-05 23:39:22 a2e7639
feat(order/filter): more eventually/frequently API (#2330)
* feat(order/filter): more eventually/frequently API
* Update after review
* Add simp attribute
* Update src/order/filter/basic.lean
Co-Authored-By: Yury G. Kudryashov <urkud@urkud.name>
* Update src/order/filter/basic.lean
Co-Authored-By: Yury G. Kudryashov <urkud@urkud.name>

2020-04-05 17:46:07 26bf273
feat(logic/embedding): embedding punit/prod (#2315)
* feat(logic/embedding): embedding punit/prod
* renaming to sectl
* Revert disambiguations no longer needed

2020-04-05 05:53:08 23681c3
feat(tactic/linarith): split conjunctions in hypotheses (#2320)
* feat(tactic/linarith): split conjunctions in hypotheses
* update doc

2020-04-04 17:59:00 dea8bd4
feat(*/multilinear): more material (#2197)
* feat(*/multilinear): more material
* improvements
* docstring
* elaboration strategy
* remove begin ... end
* fix build
* linter

2020-04-04 16:43:46 8406896
chore(ci): always push release to azure (#2321)
PR #2048 changed the CI so that olean caches are not pushed to Azure if a later commit on the same branch occurs. The reasoning was that it was unlikely that anyone would fetch those caches. That's changed as of #2278, since `fetch_olean_cache.sh` now looks for caches from commits earlier in the history. This means that currently, we can observe the following wasteful sequence of events in several PRs (e.g. #2258):
1. commit A gets pushed to a certain branch and CI_A starts.
2. While CI_A is still running the `leanpkg build` step, commit B is pushed and CI_B starts.
3. CI_A finishes `leanpkg build` but doesn't upload its cache to Azure because of #2048 
4. Now commit C is pushed and can't use the results of CI_A
5. CI_B finishes `leanpkg build` but doesn't upload its cache
6. Commit D is pushed and can't use the results of CI_A or CI_B ...
(This can keep happening as long as the next commit arrives before the most recent CI uploads to Azure).
I also cleaned up some stuff that was left over from when we ran the build on both "pr" and "push" events.

2020-04-04 08:11:40 63aa8b1
feat(data/mv_polynomial): add partial derivatives (#2298)
* feat(data/mv_polynomial): add partial derivatives
* Added suggestions from PR.
* trying to placate simp linter
* Updated implementation of `pderivative`
* formatting suggestions from Bryan
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* Suggestions from review.
* rearrange aux lemmas

2020-04-04 05:20:52 906874e
feat(category_theory): quotient categories (#2310)
This constructs the quotient of a category by an arbitrary family of relations on its hom-sets. Analogous to "quotient of a group by the normal closure of a subset", as opposed to "quotient of a group by a normal subgroup".
The plan is to eventually use this together with the path category to construct the free groupoid on a graph.

2020-04-03 12:34:08 a590d4b
feat(group_theory/monoid_localization): some homs induced on localizations: lift, map (#2118)
* should I be changing and committing toml idk
* initial monoid loc lemmas
* responding to PR comments
* removing bad @[simp]
* inhabited instances
* remove #lint
* additive inhabited instance
* using is_unit & is_add_unit
* doc string
* remove simp
* submonoid.monoid_loc... -> submonoid.localization
* submonoid.monoid_loc... -> submonoid.localization
* generalize inhabited instance
* remove inhabited instance
* 2nd section
* docs and linting
* removing questionable `@[simp]s`
* removing away
* adding lemmas, removing 'include'
* removing import
* responding to PR comments
* use eq_of_eq to prove comp_eq_of_eq
* name change
* trying to update mathlib
* make lemma names consistent
* Update src/algebra/group/is_unit.lean
* Update src/algebra/group/is_unit.lean
* fix build
* documentation and minor changes
* spacing
* fix build
* applying comments

2020-04-03 08:57:48 6af5901
chore(scripts): update nolints.txt

2020-04-03 08:24:57 8af4bb8
refactor(tactic/lint): split into multiple files (#2299)
The `lint.lean` file is getting too long for me to comfortably navigate.  This PR splits the file up into several parts:
 * `tactic.lint.basic` defining the `linter` structure and the `@[linter]` and `@[nolint]` attributes
 * `tactic.lint.frontend` defined the functions to run the linters and the various `#lint` commands
 * The linters are split into three separate files, the simp linters, the type class linters, and the rest.
 * `tactic.lint` imports all of the files above so `import tactic.lint` still works as before

2020-04-03 06:55:45 cb0a1b5
feat(order/filter): add lemmas about `∀ᶠ`, `∃ᶠ` and logic operations (#2314)
* feat(order/filter): add lemmas about `∀ᶠ`, `∃ᶠ` and logic operations
* Remove `@[congr]`
* Apply suggestions from code review
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>

2020-04-03 04:11:38 1b24e0a
chore(test/*): move tests into individual files (#2317)

2020-04-02 19:25:32 d3b8622
fix(tactic/lint): simp_nf: do not ignore errors (#2266)
This PR fixes some bugs in the `simp_nf` linter.  Previously it ignored all errors (from failing tactics).  I've changed this so that errors from linters are handled centrally and reported as linter warnings.  The `simp_is_conditional` function was also broken.
As usual, new linters find new issues:
 1. Apparently Lean sometimes throws away simp lemmas.  https://github.com/leanprover-community/lean/issues/163
 2. Some types define `has_coe` but have an incorrect `has_coe_to_fun`, causing the simplifier to loop `⇑f a = ⇑↑f a = ⇑f a`.  See the new library note:

2020-04-02 16:19:33 654533f
feat(logic/basic): a few lemmas about `exists_unique` (#2283)
The goal is to be able to deal with formulas like `∃! x ∈ s, p x`. Lean parses them as `∃! x, ∃! (hx : x ∈ s), p x`. While this is equivalent to `∃! x, x ∈ s ∧ p x`, it is not defeq to this formula.

2020-04-02 13:55:30 a88356f
chore(topology/metric_space): use dot notation (#2313)
* in `continuous.dist` and `continuous.edist`;
* in `tendsto.dist` and `tendsto.edist`.

2020-04-02 11:19:51 3c27d28
feat(algebra/pi_instances): bundled homs for apply and single (#2186)
feat(algebra/pi_instances): bundled homs for apply and single (#2186)
This adds some bundled monoid homomorphisms, in particular
```
def monoid_hom.apply (i : I) : (Π i, f i) →* f i := ...
```
and
```
def add_monoid_hom.single (i : I) : f i →+ Π i, f i :=
```
and supporting lemmas.

2020-04-02 08:17:59 313cc2f
chore(category_theory/concrete_category): take an instance, rather than extending, category (#2195)
chore(category_theory/concrete_category): take an instance, rather than extending, category (#2195)
Our current design for `concrete_category` has it extend `category`.
This PR changes that so that is takes an instance, instead.
I want to do this because I ran into a problem defining `concrete_monoidal_category`, which is meant to be a monoidal category, whose faithful functor to Type is lax monoidal. (The prime example here is `Module R`, where there's a map `F(X) \otimes F(Y) \to F(X \otimes Y)`, but not the other way: here `F(X) \otimes F(Y)` is just the monoidal product in Type, i.e. cartesian product, and the function here is `(x, y) \mapsto x \otimes y`.)
Now, `monoidal_category` does not extend `category`, but instead takes a typeclass, so with the old design `concrete_monoidal_category` was going to be a Frankenstein, extending `concrete_category` and taking a `[monoidal_category]` type class. However, when 3.7 landed this went horribly wrong, and even defining `concrete_monoidal_category` caused an unbounded typeclass search.
So.... I've made everything simpler, and just not used `extends` at all. It's all just typeclasses. This makes some places a bit more verbose, as we have to summon lots of separate typeclasses, but besides that everything works smoothly.
(Note, this PR makes the change to `concrete_category`, but does not yet introduce `concrete_monoidal_category`.)

2020-04-02 05:51:39 f55e3ce
refactor(*): move `algebra` below `polynomial` in the `import` chain (#2294)
* Move `algebra` below `polynomial` in the `import` chain
This PR only moves code and slightly generalizes
`mv_polynomial.aeval`.
* Fix compile
* Update src/data/mv_polynomial.lean
* Apply suggestions from code review
* Apply suggestions from code review
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>

2020-04-02 03:27:11 652fc17
chore(data/set/lattice): add `set_of_exists` and `set_of_forall` (#2312)

2020-04-01 22:05:57 5b972be
chore(scripts): update nolints.txt

2020-04-01 21:30:30 33764ab
chore(tactic/transport): rename to transform_decl (#2308)
* chore(tactic/transport): rename to transform_decl
* satisfying the linter
* oops, wrong comment format

2020-04-01 18:42:34 badc615
chore(scripts): update nolints.txt

2020-04-01 18:06:00 a8076b2
refactor(data/real/irrational): review (#2304)
* refactor(data/real/irrational): review
* Update src/data/real/irrational.lean
* Update src/data/real/irrational.lean
* Apply suggestions from code review

2020-04-01 13:29:58 203ebb2
feat(tactic/simp_rw): support `<-` in `simp_rw` (#2309)

2020-04-01 10:26:28 fb658ac
chore(scripts): update nolints.txt

2020-04-01 09:50:28 003141c
chore(algebra/module): cleanup `is_linear_map` (#2296)
* reuse facts about `→+`;
* add `map_smul`
* add a few docstrings

2020-04-01 06:47:48 c7fb84b
refactor(group_theory/submonoid): review API (#2173)
The old API was mirroring the API for unbundled submonoids, while the
new one is based on the API of `submodule`.
Also move some facts about `monoid`/`group` structure on `M × N` to
`algebra/group/prod`.

2020-04-01 04:05:06 67e7f90
fix(algebra/category): make has_coe_to_sort instances for bundled categories reducible (#2290)
* fix(algebra/category): make has_coe_to_sort instances for bundled categories reducible
* fix library notes
* fix import
* Update src/algebra/category/CommRing/basic.lean
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* fix notes

2020-04-01 01:14:10 cc20a86
feat(data/nat/basic): `simp` lemmas about inequalities with `bit*` (#2207)
* feat(data/nat/basic): `simp` lemmas about inequalities with `bit*`
* Fix compile of `computability/partrec_code`
* Fix `nat.bit_cases` to work for `Type*` too
* Generalize some lemmas to `linear_ordered_semiring`s
* Apply suggestions from code review
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* Apply suggestions from code review
Co-Authored-By: Scott Morrison <scott@tqft.net>
* fixing a proof

2020-03-31 22:26:22 7d89f2e
feat(data/fintype/card): prod_univ_sum (#2284)
* feat(data/fintype/card): prod_univ_sum
* Update src/data/fintype.lean
* Update src/data/fintype/card.lean
* docstrings
* fix build
* remove unused argument
* fix build

2020-03-31 19:02:55 224ba7e
feat(data/finset): card_image_le (#2295)
* feat(data/finset): card_image_le
* add list.to_finset_card_le

2020-03-31 16:02:27 72d3b6e
feat(tactic/equiv_rw): incorporating equiv_functor (#2301)
* feat(tactic): rewriting along equivalences
* header
* minor
* type
* actually, rewriting the goal under functors is easy
* rewriting inside function types
* more
* way better
* improving comments
* fun
* feat(data/equiv): pi_congr
* various
* feat(data/equiv): sigma_congr
* docstrings
* change case for consistency
* tidying up
* minor
* minor
* switching names
* fixes
* add some tracing routines for convenience
* feat(tactic/core): trace_for
* typo
* oops
* oops
* various
* chore(tactic/solve_by_elim): cleanup
* cleanup
* what happened to my commit?
* fix
* fix
* rename to trace_if_enabled
* fixed?
* Tweak comments
* feat(tactic/solve_by_elim): add accept parameter to prune tree search
* when called with empty lemmas, use the same default set as the interactive tactic
* trace_state_if_enabled
* Update src/data/equiv/basic.lean
* implicit arguments
* stop cheating with [] ~ none
* indenting
* yay, working via solve_by_elim
* pretty good
* various
* various
* docstring
* fix docstrings
* more docs
* docs
* feat(data/equiv/functor): bifunctor.map_equiv
* bifunctors
* test rewriting under unique
* start
* sketch of equiv_functor
* rewriting in subtypes
* add documentation, and make the function an explicit argument
* documentation
* fix doc-strings
* typos
* minor
* adding demonstration of transporting semigroup
* update
* removing unimpressive inhabited example; easier later
* Update .vscode/settings.json
* err
* trying to transport through monoid
* err?
* much better
* improve documentation of accept, and add doc-string
* fix duplicated namespace
* improve docs
* feat(logic/basic): trivial transport lemmas
* try again with documentation
* update
* oops
* oops
* omit
* revert unnecessary change
* fix doc-string
* chore(data/equiv/basic): simp to_fun to coe
* feat(tactic/equiv_rw): incorporating equiv_functor
* rename adapt_equiv
* simplify the equivalence produced, and provide a tactic to access the equivalence
* add max_steps option
* add decl_name to add_tactic_doc
* fix add_tactic_doc
* satisfying linter
* fix names
* finish fix
* add defaults for cfg arguments
* remove simplify_term, which already existed as expr.simp
* remove duplicate functions that have been PRd separately
* no need for accept
* Update src/tactic/equiv_rw.lean
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* Update src/tactic/equiv_rw.lean
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* replace max_steps with max_depth
* use solve_aux
* add missing simp lemmas about arrow_congr'
* fix failing test, by making sure we don't leave any ≃ goals on the table
* add comment
* comment out trace output
* fix fields

2020-03-31 14:30:05 b508d0e
feat(tactic/equiv_rw): rewriting along equivalences (#2246)
* feat(tactic): rewriting along equivalences
* header
* minor
* type
* actually, rewriting the goal under functors is easy
* rewriting inside function types
* more
* way better
* improving comments
* fun
* feat(data/equiv): pi_congr
* various
* feat(data/equiv): sigma_congr
* docstrings
* change case for consistency
* tidying up
* minor
* minor
* switching names
* fixes
* add some tracing routines for convenience
* feat(tactic/core): trace_for
* typo
* oops
* oops
* various
* chore(tactic/solve_by_elim): cleanup
* cleanup
* what happened to my commit?
* fix
* fix
* rename to trace_if_enabled
* fixed?
* Tweak comments
* feat(tactic/solve_by_elim): add accept parameter to prune tree search
* when called with empty lemmas, use the same default set as the interactive tactic
* trace_state_if_enabled
* Update src/data/equiv/basic.lean
* implicit arguments
* stop cheating with [] ~ none
* indenting
* yay, working via solve_by_elim
* pretty good
* various
* various
* docstring
* fix docstrings
* more docs
* docs
* feat(data/equiv/functor): bifunctor.map_equiv
* bifunctors
* test rewriting under unique
* rewriting in subtypes
* add documentation, and make the function an explicit argument
* documentation
* fix doc-strings
* typos
* minor
* adding demonstration of transporting semigroup
* Update .vscode/settings.json
* err
* trying to transport through monoid
* err?
* much better
* improve documentation of accept, and add doc-string
* fix duplicated namespace
* improve docs
* try again with documentation
* update
* oops
* rename adapt_equiv
* simplify the equivalence produced, and provide a tactic to access the equivalence
* add max_steps option
* add decl_name to add_tactic_doc
* fix add_tactic_doc
* satisfying linter
* add defaults for cfg arguments
* remove simplify_term, which already existed as expr.simp
* remove duplicate functions that have been PRd separately
* no need for accept
* Update src/tactic/equiv_rw.lean
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* Update src/tactic/equiv_rw.lean
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* replace max_steps with max_depth
* use solve_aux
* add missing simp lemmas about arrow_congr'
* fix failing test, by making sure we don't leave any ≃ goals on the table
* add comment
* comment out trace output

2020-03-31 11:30:19 2669062
feat(data/monoid_algebra): some lemmas about group rings (#2239)
* feat(algebra/ring): generalize mul_ite
* fix proofs
* going off the deep-end
* cleaning up
* much better
* getting there
* no new congr lemma
* oops
* ...
* to_additive
* removing bad simp lemmas again...
* fix proof
* fix'
* oops
* feat(data/monoid_algebra): some lemmas about group rings
* Update src/algebra/ring.lean
* remove unnecessary arguments, thanks linter
* err.. marking simp again, because I can't remember what goes wrong and need CI to compile for me
* handing it back to CI for another try
* fix prod_ite as well
* cast_ite
* gross fix for quadratic reciprocity argument
* remove simp from add_ite, add comment
* sadness
* slight improvement
* remove redundant lemmas

2020-03-31 09:10:23 1763220
chore(scripts): update nolints.txt

2020-03-31 08:35:51 85affa4
refactor(*): migrate more files to bundled `ring_hom`s (#2286)
* refactor(*): migrate more files to bundled `ring_hom`s
* Fix lint

2020-03-31 05:47:42 66f3090
feat(analysis/analytic): first take on analytic functions (#2199)
* analytic: first definitions
* docstrings
* cleanup
* Update src/analysis/analytic/basic.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* comment on polydisk of convergence
* coefficient at 0
* protect sum
* rename with_top.dense_coe

2020-03-31 03:13:56 20bff2c
chore(scripts): update nolints.txt

2020-03-31 02:43:53 4168aba
refactor(data/fintype): move data/fintype to data/fintype/basic (#2285)

2020-03-31 00:17:23 c5181d1
feat(*): more `prod`-related (continuous) linear maps and their derivatives (#2277)
* feat(*): more `prod`-related (continuous) linear maps and their derivatives
* Make `R` argument of `continuous_linear_equiv.refl` explicit

2020-03-30 20:48:51 64f835b
chore(scripts): update nolints.txt

2020-03-30 20:13:52 8a61723
fix(algebra/punit_instance): punit.smul_eq is marked simp and can be proved by simp (#2291)

2020-03-30 16:48:08 3f0e700
doc(algebra/group/type_tags): add docs (#2287)
* doc(algebra/group/type_tags): add docs
* Update src/algebra/group/type_tags.lean

2020-03-30 13:16:33 1331e29
chore(*): completing most of the -T50000 challenge (#2281)

2020-03-30 10:46:51 37212a7
feat(data/fin*): uniqueness of increasing bijection (#2258)
* feat(data/fin*): uniqueness of increasing bijection
* protect
* remove tidy call
* Update src/data/finset.lean
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* Update src/data/finset.lean
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* Update src/data/fintype/card.lean
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* Update src/data/fintype/card.lean
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* Update src/data/fintype/card.lean
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* prove prod_add, and use this to prove sum_pow_mul_eq_add_pow
* forgot to save
* fix build
* remove card_sub_card

2020-03-30 08:09:21 cd38923
docs(algebraic_geometry/prime_spectrum): linkify url in module docs (#2288)

2020-03-30 06:25:08 9288d10
chore(scripts): update nolints.txt

2020-03-30 05:50:58 51553e3
chore(data/set/lattice): use dot syntax for `disjoint.*` (#2282)

2020-03-30 03:22:11 cf64860
chore(*): remove 'using_well_founded wf_tacs', fixed in core (#2280)

2020-03-30 00:45:51 8c1e32f
chore(scripts): update nolints.txt

2020-03-30 00:11:57 7dad872
feat(ci): try fetching olean caches from older commits (#2278)
* feat(ci): try fetching older branch oleans
* docstring edits for set_theory.surreal
* debug
* debug 2
* formatting
* try fetching
* just increase depth
* improve script, improve surreal docstrings
* env context
* quieter curl
* fix overwriting
* git clean
* ci test: delete surreal.lean
* fix env var GIT_HISTORY_DEPTH
* add back surreal
* reviewer comments

2020-03-29 21:31:54 c14c84e
chore(topology/algebra/ordered): `le_of_tendsto`: use `∀ᶠ`, add primed versions (#2270)
Also fix two typos in `order/filter/basic`

2020-03-29 19:03:26 8b679d9
fix(tactic/squeeze): make suggestion at correct location (#2279)
Fixes #2267.

2020-03-29 16:22:44 38544f1
feat(tactic/core): basic interaction monad functions (#1658)
* feat(tactic/core): basic interaction monad functions
* review
* remove get_result
* update comments
* whitespace
* american spelling

2020-03-29 13:46:46 c4fb403
fix(tactic/core): remove all_goals option from apply_any (#2275)
* fix(tactic/core): remove all_goals option from any_apply
* remove unnecessary imports

2020-03-29 11:19:27 da8b23f
chore(data/opposite): two trivial lemmas (#2274)

2020-03-29 08:42:21 79880e8
chore(data/fintype/intervals): `simp` `Ico_*_card` lemmas (#2271)

2020-03-29 05:46:53 5d9e7f5
feat(analysis/calculus/fderiv): define `has_strict_fderiv_at` (#2249)
* Move code aroud
* general constructions (product, chain rule) before arithmetic;
* bundled `E →L[𝕜] F` maps before unbundled
* Use `maps_to` instead of `f '' _ ⊆ _`
* feat(analysis/calculus/fderiv): define `has_strict_fderiv_at`
Prove strict differentiability of all functions found in this file, cleanup.
* Update src/analysis/calculus/fderiv.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Docs, var name

2020-03-29 03:24:03 de8c207
chore(scripts): update nolints.txt

2020-03-29 02:52:21 8454c10
doc(ring_theory/noetherian): add docstring, normalise notation (#2219)
* change notation; add module docstring
* adding reference to A-M
* Update src/ring_theory/noetherian.lean
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* Apply suggestions from code review

2020-03-29 00:11:06 ecdb138
feat(category/equiv_functor): type-level functoriality w.r.t. equiv (#2255)
* feat(data/equiv/functor): bifunctor.map_equiv
* start
* sketch of equiv_functor
* update
* removing unimpressive inhabited example; easier later
* omit
* revert unnecessary change
* fix doc-string
* fix names
* finish fix

2020-03-28 21:19:19 d500210
feat(algebra/big_operators): missing lemmas (#2259)

2020-03-28 18:32:12 ad53e0b
feat(tactic/solve_by_elim): add accept parameter to prune tree search (#2245)
* chore(tactic/solve_by_elim): cleanup
* cleanup
* what happened to my commit?
* fix
* fix
* fixed?
* Tweak comments
* feat(tactic/solve_by_elim): add accept parameter to prune tree search
* when called with empty lemmas, use the same default set as the interactive tactic
* stop cheating with [] ~ none
* indenting
* various
* various
* docstring
* fix docstrings
* more docs
* docs
* fix doc-strings
* improve documentation of accept, and add doc-string
* improve docs
* try again with documentation
* clarify when accept runs
* Update src/tactic/solve_by_elim.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Update src/tactic/solve_by_elim.lean
* Update src/tactic/solve_by_elim.lean

2020-03-28 17:37:54 0187cb5
fix(scripts/deploy_docs.sh): cd before git log (#2264)
* fix(scripts/deploy_docs.sh): cd before git log
* Update scripts/deploy_docs.sh

2020-03-28 12:46:28 17f8340
chore(data/equiv/basic): simp to_fun to coe (#2256)
* chore(data/equiv/basic): simp to_fun to coe
* fix proofs
* Update src/data/equiv/basic.lean
* fix proof
* partially removing to_fun
* finish switching to coercions

2020-03-28 06:05:30 d470ae7
fix(tactic/squeeze): do not fail when closing the goal (#2262)

2020-03-28 03:34:11 6732788
feat(analysis/normed_space/operator_norm): a few more estimates (#2233)
* feat(*): a few more theorems about `unique` and `subsingleton`
* Fix compile, fix two non-terminate `simp`s
* Update src/topology/metric_space/antilipschitz.lean
This lemma will go to another PR
* feat(analysis/normed_space/operator_norm): a few more estimates
* `le_op_norm_of_le` : `∥x∥ ≤ c → ∥f x∥ ≤ ∥f∥ * c`;
* `norm_id` → `norm_id_le`, new `norm_id` assumes `∃ x : E, x ≠ 0`
* estimates on the norm of `e : E ≃L[𝕜] F`` and `e.symm`.
* rename `(anti)lipschitz_with.to_inverse` to `to_right_inverse`

2020-03-28 02:36:23 1b13ccd
chore(scripts/deploy_docs.sh): skip gen_docs if already built (#2263)
* chore(scripts/deploy_docs.sh): skip gen_docs if already built
* Update scripts/deploy_docs.sh

2020-03-28 00:46:23 211c5d1
chore(data/int/basic): change instance order (#2257)

2020-03-27 22:08:58 3c0b35c
chore(scripts): update nolints.txt

2020-03-27 21:37:51 d0a8507
feat(algebra/ring): generalize mul_ite (#2223)
* feat(algebra/ring): generalize mul_ite
* fix proofs
* going off the deep-end
* cleaning up
* much better
* getting there
* no new congr lemma
* oops
* ...
* to_additive
* removing bad simp lemmas again...
* fix proof
* fix'
* oops
* Update src/algebra/ring.lean
* err.. marking simp again, because I can't remember what goes wrong and need CI to compile for me
* handing it back to CI for another try
* fix prod_ite as well
* cast_ite
* gross fix for quadratic reciprocity argument
* remove simp from add_ite, add comment

2020-03-27 18:48:08 786c737
feat(logic/basic): trivial transport lemmas (#2254)
* feat(logic/basic): trivial transport lemmas
* oops

2020-03-27 16:08:17 451de27
chore(tactic/lint): typo (#2253)

2020-03-27 13:19:03 21ad1d3
chore(tactic/*): update tags (#2224)
* add missing tactic tags
* add missing command tags
* add missing hole command tags
* add missing attribute tags
* combine tags 'type class' and 'type classes'
* combine tags 'logical manipulation' and 'logic'
* attribute additions and changes
* more tag updates
* hypothesis management -> context management
* remove 'simplification', add more tags
* classical reasoning -> classical logic
* substitution -> rewrite
* normalization -> simplification

2020-03-27 12:12:17 d3cbd4d
chore(ci): update nolints before docs and leanchecker (#2250)
* Update build.yml
* run lint+tests if build step succeeds (see #2250) (#2252)
* run lint+tests if build succeeds
* move lint (and nolints.txt) before tests
* Apply suggestions from code review

2020-03-26 16:57:24-04:00 de39b9a
chore(.mergify.yml): cleanup (#2248)
remove [skip-ci] and pr bits that no longer apply.

2020-03-26 20:55:31 2fbf007
doc(docs/install/project.md): mention that projects are git repositories (#2244)

2020-03-26 20:00:59 75b4ee8
feat(data/equiv/local_equiv): construct from `bij_on` or `inj_on` (#2232)
* feat(data/equiv/local_equiv): construct from `bij_on` or `inj_on`
Also fix usage of `nonempty` vs `inhabited` in `set/function`. Linter
didn't catch these bugs because the types use the `.to_nonempty`
projection of the `[inhabited]` arguments.
* Add `simps`/`simp` attrs

2020-03-26 17:30:38 8943351
feat(topology/algebra/module): define `fst` and `snd`, review (#2247)
* feat(topology/algebra/module): define `fst` and `snd`, review
* Fix compile

2020-03-26 14:41:41 5b44363
chore(scripts): update nolints.txt

2020-03-26 13:38:06 0fc4e6a
refactor(data/set/function): move `function.restrict` to `set`, redefine (#2243)
* refactor(data/set/function): move `function.restrict` to `set`, redefine
We had `subtype.restrict` and `function.restrict` both defined in the
same way using `subtype.val`. This PR moves `function.restrict` to
`set.restrict` and makes it use `coe` instead of `subtype.val`.
* Fix compile
* Update src/data/set/function.lean

2020-03-26 11:00:48 fa36a8e
chore(scripts): update nolints.txt

2020-03-26 10:05:36 ea10e17
feat(data/equiv/functor): bifunctor.map_equiv (#2241)
* feat(data/equiv/functor): bifunctor.map_equiv
* add documentation, and make the function an explicit argument
* Update src/data/equiv/functor.lean

2020-03-26 07:48:43 ab33237
chore(scripts): update nolints.txt

2020-03-26 06:56:37 dbc4284
feat(tactic/squeeze): improve suggestion of `cases x; squeeze_simp` (#2218)
* feat(tactic/squeeze): improve produced argument list and format
* feat(tactic/squeeze): combine suggestions of repeated executions
* add documentation
* remove dead code
* suggestion from reviewers
* Apply suggestions from code review
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* Update squeeze.lean
* Apply suggestions from code review
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* simplify and remove comparison of proof terms
* simplify goal comparison data structure
* add documentation and fix meta-variable handling
* add example
* fix tests
* move tests
* use binders with trivial names to abstract meta variables

2020-03-26 04:20:05 30146a0
chore(tactic/solve_by_elim): refactor (#2222)
* chore(tactic/solve_by_elim): cleanup
* cleanup
* what happened to my commit?
* fix
* fix
* fixed?
* Tweak comments
* when called with empty lemmas, use the same default set as the interactive tactic
* stop cheating with [] ~ none
* indenting
* docstring
* fix docstrings

2020-03-26 01:26:44 2755eae
chore(ci): only run on push (#2237)
* chore(ci): only run on push
* update contribution docs

2020-03-26 00:32:53 6e6c81a
feat(algebra/homology): chain complexes (#2174)
* thoughts on chain complexes
* minor
* feat(category_theory): split epis and monos, and a result about (co)projections
* total functor faithful
* homology!
* remove lint
* something something homology
* comment out broken stuff
* adding comments
* various
* rewrite
* fixes
* Update src/category_theory/epi_mono.lean
* Update src/category_theory/epi_mono.lean
* Update src/category_theory/epi_mono.lean
* better use of ext
* feat(category_theory): subsingleton (has_zero_morphisms)
* revert some independent changes moved to #2180
* revert some independent changes moved to #2181
* revert independent changes moved to #2182
* fix
* Apply suggestions from code review
Co-Authored-By: Johan Commelin <johan@commelin.net>
* changes from review
* module docs
* various
* Update src/category_theory/shift.lean
Co-Authored-By: Kevin Buzzard <k.buzzard@imperial.ac.uk>
* various
* various fixes
* fix
* all the minor suggestions
Co-Authored-By: Markus Himmel <markus@himmel-villmar.de>
* ugh... fix reverting stuff from #2180
* off by one
* various
* use abbreviation
* chain as well as cochain
* satisfy the linter
* some simp lemmas
* simp lemmas

2020-03-25 21:56:35 e04892e
feat(topology/metric_space/isometry): add_left/right, neg (#2234)
Also add some lemmas from `equiv` namespace to `isometric`.

2020-03-25 19:18:04 bb01537
feat(topology/local_homeomorph): a few facts about `local_homeomorph` (#2231)
* `eventually_inv_right`, `eventually_inv_left`
* `is_O_congr`, `is_o_congr`

2020-03-25 16:34:50 05aa955
chore(scripts): update nolints.txt

2020-03-25 15:44:21 bedb810
feat(*): a few more theorems about `unique` and `subsingleton` (#2230)
* feat(*): a few more theorems about `unique` and `subsingleton`
* Fix compile, fix two non-terminate `simp`s
* Update src/topology/metric_space/antilipschitz.lean
This lemma will go to another PR

2020-03-25 13:11:33 1eae0be
feat(data/equiv): pi_congr (#2204)
* feat(data/equiv): pi_congr
* docstrings
* change case for consistency
* tidying up
* switching names
* fixes
* Update src/data/equiv/basic.lean
* implicit arguments

2020-03-25 10:30:42 83014bf
chore(README): add Bryan; alphabetize (#2238)

2020-03-25 03:10:56 d9083bc
chore(algebra/ordered_field): merge `inv_pos` / `zero_lt_inv` with `inv_pos'` / `inv_neg` (#2226)
* chore(algebra/ordered_field): merge `inv_pos` / `zero_lt_inv` with `inv_pos'` / `inv_neg`
Also move some lemmas to `linear_ordered_field`
* Update src/data/real/hyperreal.lean
* Fix compile
* Actually fix compile of `data/real/hyperreal`

2020-03-25 00:53:41 24b82c9
feat(tactic/core): trace_if_enabled (#2209)
* feat(tactic/core): trace_for
* typo
* oops
* oops
* rename to trace_if_enabled
* trace_state_if_enabled

2020-03-24 22:07:53 efdc850
feat(tactic/conv/apply_congr): using congruence lemmas inside conv (#2221)
* Update interactive.lean
Added Keeley Hoeks Zoom tactic.
* Add files via upload
Added operand.lean file to the tactic folder.
* Add files via upload
Added the test files for zoom and operand.
* Rename operand_test.lean to operand.lean
* Update and rename zoom_test.lean to zoom.lean
Fixed the imports
* Update operand.lean
* Update tactics.md
* Update operand.lean
Fixed the lamda problem.
* Update operand.lean
Added tests without lamdas
* Update operand.lean
Added header
* Update operand.lean
Added header
* Update operand.lean
deleted zoom
* Update zoom.lean
Added comment to self
* Update operand.lean
Added doc_string to operand
* Update interactive.lean
Added doc_string to zoom
* Update tactics.md
Fixed colon and brackets in operand doc
* Update operand.lean
Fixed colon placements and brackets
* merge
* feat(tactic/converter/apply_congr): apply congruence lemmas in conv
* last example
* fix docs
* Apply suggestions from code review
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* remove docs from tactics.md
* merge doc comment fragments
* import in tactic.basic
* docs
* add to conv doc tactic

2020-03-24 18:51:00 5437b10
feat(tactic/show_term): show_term { t } prints the term constructed by t (#2227)
* feat(tactic): show_term { t } prints the term constructed by t
* add to tactic.basic
* move tests
* silencing
* Update src/tactic/show_term.lean
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* clean up
* remove tests
* Update src/tactic/show_term.lean
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>

2020-03-24 16:01:34 5f376b2
feat(data/equiv): sigma_congr (#2205)

2020-03-24 12:31:39 bb6e1d4
chore(README,docs/*): replace tactic doc files with links to mathlib docs (#2225)
* chore(README,doc/*): replace tactic doc files with links to mathlib docs
Other cleanup:
- replaced leanprover/lean and leanprover/mathlib with
  leanprover-community/lean and leanprover-community/mathlib
- updated pull request template and instructions for contributors with
  info about tactic doc entries
- formatting / style for simp.md and tactic_writing.md
- fixed broken link in category_theory.category.default
* reword contributor suggestion for tactic tests
* reviewer comments

2020-03-24 09:46:52 b504430
feat(linear_algebra): add range_le_ker_iff (#2229)

2020-03-23 18:23:19 6a7e55e
chore(scripts): update nolints.txt

2020-03-23 17:30:32 9a9794d
doc(data/int/gcd): attribution + module doc (#2217)
* doc(data/int/gcd): attribution + module doc
* reword

2020-03-23 14:57:34 9832fba
refactor(topology/metric_space/contracting): redefine using emetric (#2070)
* refactor(topology/metric_space/contracting): redefine using emetric
* Fix a typo produced by "copy+paste"
* Fix compile
* Refactor `efixed_point`, `efixed_point'`
* Prove a version of Banach fixed point theorem for a map contracting
  on a complete forward-invariant set.
* Separately prove "primed" lemmas.
I Tried to define `efixed_point'` in terms of `efixed_point` and
failed: every time I use it, it generates a goal `complete_space ↥s`.
So, I decided to deduce `exists_fixed_point'` from
`exists_fixed_point`, then use it in the proofs.

2020-03-23 12:25:53 25df50e
chore(scripts): update nolints.txt

2020-03-23 11:21:48 5b2c952
feat(analysis/convex.cone): prove M. Riesz extension theorem, Hahn-Banach theorem (#2120)
* feat(analysis/convex.cone): prove M. Riesz extension theorem
WIP
* Complete the proof
TODO: move many facts to `linear_algebra/basic`,
fix possible build failures in other files
* Fix compile of `analysis/convex/cone`
* Cleanup, rewrite using `linear_pmap`s
* Deduce Hahn-Banach theorem from M. Riesz extension theorem
* Fix lint
* Apply suggestions from code review [skip_ci]
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Expand comments, prove properties of `convex.to_cone`.
* Docstrings
* Apply suggestions from code review
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update src/analysis/convex/cone.lean
* Update src/linear_algebra/basic.lean

2020-03-23 04:27:27 d3d78a9
chore(ring_theory/algebra): generalize restrict_scalars to noncommutative algebras (#2216)

2020-03-23 01:53:56 fe40a15
chore(scripts): update nolints.txt

2020-03-23 01:05:38 6aa5572
feat(algebra/module): `f : E →+ F` is `ℚ`-linear (#2215)
* feat(algebra/module): `f : E →+ F` is `ℚ`-linear
Also cleanup similar lemmas about `ℕ` and `ℤ`.
* Fix a typo

2020-03-22 22:10:26 b9ee94d
chore(scripts): update nolints.txt

2020-03-22 21:15:30 7f103fd
fix(tactic/transport): make `to_additive` copy `protected`status (#2212)
* fix(tactic/transport): make `to_additive` copy `protected`status
Fixes #2210, also slightly cleanup `algebra/group/units`
* Fix compile (protected `finset.sum`)
* Fix usage of `finset.sum`
* Update src/tactic/transport.lean
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* fix build

2020-03-22 17:01:05 6febc8c
feat(tactic/doc_commands): allow doc strings on add_tactic_doc (#2201)
* feat(tactic/doc_commands): allow doc strings on add_tactic_doc
* Add link to Lean issue.
* Update src/tactic/doc_commands.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Change all `description :=` to docstrings.
* Change suggested by Bryan.
* Use docstrings in library_note
* Factor out `tactic.eval_pexpr`.
* Add add_decl_doc command.
* Update docs/contribute/doc.md
* Update src/tactic/doc_commands.lean
* Update src/tactic/doc_commands.lean
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>

2020-03-22 13:55:54 4e46b30
chore(scripts): update nolints.txt

2020-03-22 13:06:37 7d02c23
chore(linear_algebra/*): rename copair, pair to coprod, prod (#2213)
* chore(linear_algebra/*): rename copair, pair to coprod, prod
* add back mistakenly deleted lemma
* fix sensitivity, change comments to module docs
* docstrings, linting
* Update archive/sensitivity.lean

2020-03-22 08:44:10 3a71499
feat(ring_theory/algebra) : generalize `rat.algebra_rat` to `division_ring` (#2208)
Other changes:
* add lemmas about field inverse to `algebra/semiconj` and `algebra/commute`;
* drop `rat.cast`, define `instance : has_coe` right away to avoid
  accidental use of `rat.cast` in theorems;
* define `rat.cast_hom` instead of `is_ring_hom rat.cast`;
* generalize some theorems about from `field` to `division_ring`.

2020-03-22 04:38:42 9485a85
fix(linear_algebra/basic): make R explicit in linear_equiv.refl (#2161)
* fix(linear_algebra/basic): make R explicit in linear_equiv.refl
* getting mathlib to compile again
* better variablism

2020-03-22 02:00:48 19de416
doc(ring_theory/adjoin_root): add docstring (#2211)
* docstring for adjoin_root
* adding some quotes

2020-03-21 14:18:51-07:00 09401b7
revert accidental push to master

2020-03-21 14:00:51-07:00 3375126
feat(tactic/core): trace_for

2020-03-21 19:24:58 af0cf30
chore(scripts): update nolints.txt

2020-03-21 18:41:30 0bd8b94
refactor(scripts/mk_nolint): produce nolints.txt file during linting (#2194)
* Factor out code to determine automatically-generated declarations.
* Mark bool.decidable_eq and decidable.to_bool as [inline]
* Execute linters in parallel.
* Add lint_mathlib.lean script.
* Switch CI to new lint_mathlib.lean script.
* Make linter fail.
* Revert "Make linter fail."
This reverts commit 8b509c5815d862d0d060eac407cf6d22d743f960.
* Remove one line from nolints.txt
* Change shebang in rm_all.sh to be nixos-compatible
* Disable parallel checking.
* Make linter fail.
* Revert "Make linter fail."
This reverts commit 8f5ec62030ecaec93d01981b273c2a737d67eddf.
* Move is_auto_decl to meta/expr.lean
* Remove list.mmap_async
* Factor out name.from_string

2020-03-21 10:35:34 dd85db0
doc(docs/contribute/index.md): remove obsolete recommendation to use lean-3.7.2 branch (#2206)

2020-03-21 08:46:38 bc84a20
chore(leanpkg.toml): Lean 3.7.2c (#2203)
* chore(leanpkg.toml): Lean 3.7.2c
Lean 3.7.1c had a bug that prevented Lean on windows from importing oleans properly (see https://github.com/leanprover-community/lean/pull/155). This is fixed in Lean 3.7.2c.
* update contribute/index.md

2020-03-21 02:10:50 34bac8d
feat(category_theory): add naturality_assoc simp lemma (#2200)

2020-03-20 23:38:07 99ba8f4
chore(category_theory): change monoidal_of_has_finite_products to use binary products (#2190)
* chore(category_theory): change monoidal_of_has_finite_products to use binary products
* remove some simp annotations for now
* fixes

2020-03-20 21:22:50 9420167
feat(category_theory): unbundled functors and lax monoidal functors (#2193)
* feat(category_theory): unbundled functors and lax monoidal functors
* doc string

2020-03-20 18:53:45 b224943
chore(scripts): update nolints.txt

2020-03-20 17:26:39 8d44098
feat(finsupp): move convolution product to type wrapper `add_monoid_algebra`. (#2135)
* pulling out convolution product
* various
* chore(ring_theory/polynomial): refactor proof of is_noetherian_ring_fin
* not there yet
* feat(ring_theory/polynomial): refactor of is_integral_domain_fin
* fix
* ..
* refactor
* fix
* yay
* cleanup
* satisfying the linter
* linter
* improving documentation
* add distrib instance for pointwise multiplication
* move files per Johan's suggestion
* fix import
* Update src/data/polynomial.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* type annotation

2020-03-20 15:01:46 0f1b465
feat(category_theory/limits): the isomorphism expressing preservation of chosen limits (#2192)
* feat(category_theory/limits): the isomorphism expressing preservation of chosen limits
* Update src/category_theory/limits/limits.lean

2020-03-20 12:24:26 c66c4af
chore(algebra/Module/monoidal): add the simp lemmas for unitors and associativity (#2196)
* feat(algebra/category/Module/monoidal): simp lemmas
* oops
* depressingly easy
* order of arguments

2020-03-20 10:05:42 d93e0dd
chore(category_theory): missing simp lemmas (#2188)
* chore(category_theory): missing simp lemmas
* Apply suggestions from code review
Co-Authored-By: Johan Commelin <johan@commelin.net>

2020-03-20 07:32:29 b4e6313
feat(category_theory): subsingleton (has_zero_morphisms) (#2180)
* feat(category_theory): subsingleton (has_zero_morphisms)
* fix
* Update src/category_theory/limits/shapes/zero.lean
Co-Authored-By: Markus Himmel <markus@himmel-villmar.de>
* Update src/category_theory/limits/shapes/zero.lean
Co-Authored-By: Markus Himmel <markus@himmel-villmar.de>
* non-terminal simp
* add warning message
* Update src/category_theory/discrete_category.lean
Co-Authored-By: Markus Himmel <markus@himmel-villmar.de>
* Apply suggestions from code review

2020-03-20 05:08:55 cc04132
chore(scripts): update nolints.txt

2020-03-20 03:59:59 6c97ce0
feat(category_theory): some natural isomorphisms related to composition by functors (#2189)
* feat(category_theory): some natural isomorphisms related to composition by functors
* tidy up
* cleanup
* fix
* better design

2020-03-20 01:35:59 d12bbc0
feat(data/zmod): lemmas about totient and zmod (#2158)
* feat(data/zmod): lemmas about totient and zmod
* docstring
* Changes based on Johan's comments
* fix build
* subsingleton (units(zmod 2))

2020-03-19 23:15:04 3dd95a2
chore(scripts): update nolints.txt

2020-03-19 21:56:33 1a398a7
docs(category_theory/limits): adding many docstrings (#2185)
* lots of comments!
* remove #lint
* Apply suggestions from code review
lots of missing "co"s
Co-Authored-By: Johan Commelin <johan@commelin.net>

2020-03-19 18:52:34 344a41e
feat(data/finset): monotone bijection from fin k (#2163)
* feat(data/finset): increasing bijection between fin k and an ordered finset
* fix build
* fix linter
* make argument explicit
* add equiv for fintype

2020-03-19 16:32:37 b3ef685
chore(scripts): update nolints.txt

2020-03-19 15:12:14 9dbc606
refactor(*): drop `lattice` namespace (#2166)
* refactor(*): drop `lattice` namespace
Other changes:
* rename `*neg*` to `*compl*` in `boolean_algebra`.
I didn't touch `sub` in `boolean_algebra`; should it become `sdiff`?
* Fix some compile failures
* Fix the rest of compile failures
Drop `real.Sup` and `real.Inf`, define instances instead.
* fix build
* fix build
* Fix build

2020-03-19 10:59:44 a20f378
chore(category_theory/images): fix some minor problems (#2182)
* chore(category_theory/images): fix some minor problems
* minor
* oops, misplaced comment

2020-03-19 08:46:53 4bc32ae
feat(category_theory): regular monos (#2154)
* feat(category_theory): regular and normal monos
* fixes
* Apply suggestions from code review
Co-Authored-By: Markus Himmel <markus@himmel-villmar.de>
* shorter proofs
* typos, thanks
Co-Authored-By: Markus Himmel <markus@himmel-villmar.de>
* Update src/category_theory/limits/shapes/regular_mono.lean
Co-Authored-By: Markus Himmel <markus@himmel-villmar.de>
* linting

2020-03-19 06:18:29 445e332
chore(category_theory/isomorphism): use @[simps] (#2181)

2020-03-19 03:47:29 e2b0e38
chore(category_theory/binary_products): tweak spacing in notation (#2184)

2020-03-19 01:12:44 034685b
chore(scripts): update nolints.txt

2020-03-18 23:51:31 00d9f1d
feat(topology/algebra/infinite_sum): dot notation, cauchy sequences (#2171)
* more material on infinite sums
* minor fixes
* cleanup
* yury's comments

2020-03-18 21:14:22 e719f8e
chore(*): switch to lean 3.7.1c (#2106)
* fix(deprecated/group): remove dangerous instances
* Update Lean version to nightly.
* Remove composition instances for group homomorphisms.
* Remove dangerous is_submonoid instances.
* Flip instance arguments.
* Various Lean 3.7 fixes.
* Correctly use lemma.
* Use new elan 0.8.0 lean version name.
* Remove dangerous *.comp instances.
* Fix comp instance fallout.
* Fix more *.comp fallout
* Fix more *.comp fallout.
* More *.comp fallout.
* Fix *.comp fallout
* Fix *.comp fallout
* Port to has_attribute and copy_attribute changes.
* Fix monad_writer_adapter_trans instance.
* Revert 3.6 hacks.
* Update library note for *.comp morphisms.
* fix(scripts/deploy_docs.sh): use lean_version from mathlib leanpkg.toml
* Do not mention is_mul_hom.mul in library note.
* Update lean version to 3.7.0.
* Remove of_tactic'
* switch to 3.7.1c

2020-03-18 18:36:06 69f7bf8
chore(scripts): update nolints.txt

2020-03-18 17:04:44 5f62d3b
feat(topology/bounded_continuous_functions): more general uniform convergence (#2165)
* feat(topology/buonded_continuous_functions): more general uniform convergence
* yury's comments

2020-03-18 14:55:37 739e831
feat(analysis/complex/exponential): real powers of nnreals (#2164)
* feat(analysis/complex/exponential): real powers of nnreals
* cleanup
* mean inequalities in nnreal
* mean inequalities
* use < instead of >
* reviewer's comments

2020-03-18 03:19:02 f07a1eb
feat(category_theory): images in Ab and Type (#2101)
* not stacked on top of limits/colimits
* comment
* add ext to add_monoid_hom.ext
* fix
* cleanup
* suggestions from review
* fix
* use more existing structure
* fix names
* oops
* linter

2020-03-18 00:03:33 6af37d3
fix(category_theory/limits): require explicit instances of has_zero_morphisms (#2169)
* fix(category_theory/limits): require explicit instances of has_zero_morphisms
* Fix unused arguments

2020-03-17 14:49:48+01:00 422f640
fix(scripts/mk_nolint): fix error introduced by #2090 (#2170)

2020-03-17 03:38:32 e94fef0
feat(lint): run some linters on automatically generated declarations (#2090)
* style(lint): remove double periods
remove spacing in the OK-results of #lint
add newline after ever failed result of #lint_mathlib (1 newline between two files, 2 newlines between two linters)
* run some linters on automatically generated declarations
* fix doc string
* fix mk_nolint
* fix test
* fix linter errors
also explain how to fix linter errors for automatically generated declarations
* fix linter errors

2020-03-17 01:31:51 496939c
feat(data/real/*nnreal): add division lemmas (#2167)
* feat(data/real/*nnreal): add division lemmas
* fix build
* elim_cast
* another elim_cast

2020-03-16 23:16:44 4754368
feat(category_theory): split epis and monos, and a result about (co)projections (#2146)
* feat(category_theory): split epis and monos, and a result about (co)projections
* rearranging
* reviewers' suggestions
* A split mono `f` equalizes `(retraction f ≫ f)` and `(𝟙 Y)`.
* fix
* cleanup
* split_epi_coequalizes
* fix
* cleanup
* reduce priorities
* Update src/category_theory/epi_mono.lean
Co-Authored-By: Yury G. Kudryashov <urkud@urkud.name>
* Update src/category_theory/epi_mono.lean

2020-03-16 21:22:20 bc087d8
chore(scripts): update nolints.txt

2020-03-16 20:04:17 7a5496f
chore(order/liminf_limsup): lint and cleanup the file (#2162)
* chore(order/liminf_limsup): lint and cleanup the file, add some statements
* use eventually_mono

2020-03-16 19:22:51 007b575
chore(scripts): update nolints.txt

2020-03-16 17:51:32 42b92aa
feat(tactic): command for adding tactic, command, and attribute documentation (#2114)
* chore(*): switch to lean 3.6.0
* begin tactic_doc command
* merge add_tactic_doc with library_note
* fix library_note imports
* undo accidental revert
* better attribute description
* unneeded to_expr
* fix doc string attribution
* unicode input error
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* display and collect doc entries
* missing doc string
* update for lean 3.6
* document core tactics
I considered adding these as doc strings in core. But the entry for `conv` mentions mathlib-specific things.
* move tfae and rcases docs
* move rintros and obtain
* simpa
* move part of tactic.interactive
* move more of tactic.interactive
* finish tactic.interactive
* move omega
* move renaming tactics
* move more
* move norm_cast
* more
* move more
* doc commands in core + docstring tweaks
* abel, alias, cache
* elide, finish
* hint, linearith, pi_instances
* norm_num, rewrite
* ring, ring_exp
* solve_by_elim, suggest
* doc_commands, rcases
* ext
* explode, find
* lint
* tidy
* localized
* reassoc_axiom, replacer, restate_axiom, where
* simps
* markdown files
* interactive
* new additions
* revert changes to md files
* fix merge
* allow entries with different categories to share the same name
* better error messages
* fix merge
* linter errors
* use derive handler for inhabited instances
* shorten doc entry names after category fix
* copy simp.md to doc entry, tag: "simp" -> "simplification"
* update add_tactic_doc_command docstring and doc.md
* simp doc entry changed to its doc string
* Apply suggestions from code review
* doc: horizontal rules must be surrounded by new lines
* address reviewer suggestions
* Update docs/contribute/doc.md
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* fix add_tactic_doc_command docstring

2020-03-16 15:33:24 04c7381
doc(docs/install/windows): emphasize projects link (#2150)
You can't use mathlib in the test project created in step 6. I've seen a couple of Windows users get tripped up here.

2020-03-16 14:46:06 555528e
feat(category_theory/image): comparison maps for precomposition (#2153)
* feat(category_theory/image): comparison maps for precomposition
* remove duplicate argument
* unused argument

2020-03-16 09:18:06 1e38cb1
chore(scripts): update nolints.txt

2020-03-16 08:00:01 ff84bf4
feat(category_theory/monad/limits): forgetful creates colimits (#2138)
* forgetful creates colimits
* tidy up proofs
* add docs
* suggestions from review

2020-03-16 05:54:25 4aed862
feat(analysis/normed_space/operator_norm): completeness of the space of operators (#2160)
* feat(analysis/normed_space/operator_norm): completeness of the space of operators
* add some comments

2020-03-16 03:42:23 d8e5d99
feat(category_theory/limits): Convenience methods for building limit (co)forks (#2155)
* feat(category_theory/limits): Convenience methods for building limit (co)forks
* Formatting
* Rework a proof about kernels
* feat(category_theory/limits): kernel forks

2020-03-16 01:31:06 c240fcb
feat(category_theory/limits): pullbacks from binary products and equalizers (#2143)
* feat(category_theory/limits): derive has_binary_products from has_limit (pair X Y)
* Rename *_of_diagram to diagram_iso_*
* feat(category_theory/limits): pullbacks from binary products and equalizers
* Fix build
* Fix indentation
* typos
* Fix proof
* Remove some simp lemmas that were duplicated during merge

2020-03-15 23:30:43 fbe2ce0
feat(category_theory/limits): kernel forks (#2156)

2020-03-15 21:15:49 87f8ab2
chore(nnreal): replace coe_le with coe_le_coe (#2159)

2020-03-15 15:21:50 7104132
chore(field_theory/finite): spelling mistake (#2157)

2020-03-15 04:22:33 0cbfbab
refactor(logic/function): inv_fun takes a nonempty instance instead of inhabited (#2148)

2020-03-15 03:04:18 b314df2
chore(scripts): update nolints.txt

2020-03-15 01:43:38 8c2a254
feat(category_theory): comonads and coalgebras (#2134)
* Comonads and coalgebras
* Update docstring
* add docstrings
* Update src/category_theory/monad/algebra.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/category_theory/monad/algebra.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/category_theory/monad/algebra.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* make the linter happy
* revert change to nolints
* disable inhabited instance linter

2020-03-15 00:49:28 e4bf0bf
chore(scripts): update nolints.txt

2020-03-14 23:31:44 5433973
feat(category_theory): limits and colimits in Ab (#2097)
* limits and colimits in AddCommGroup
* feat(category_theory): limits and colimits in Ab
* to_additive comes last
* add to nolints
* Update src/algebra/category/Group/limits.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* docstrings
* use bundled homs throughout
* comment about better model of colimits
* fix comments
* fixes
* linter

2020-03-14 21:19:35 2e781eb
doc(docs/install/*): emphasize projects link (#2151)

2020-03-14 20:14:08 2065438
feat(category_theory/comma): some limits in the over category and iterated slices (#2131)
* iterated slice and limits in over category
* A bit more docs
* changes from review
* removed simp attributes
* over prod map left
* Update src/category_theory/comma.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* simplify equivalence definition
* fix indentation
* make lemmas simp again
* removed simp
* fix equalizers proof

2020-03-14 18:14:17 cc39a15
chore(scripts): update nolints.txt

2020-03-14 17:09:36 7b2be40
refactor(data/equiv/algebra): split (#2147)
* refactor(data/equiv/algebra): split
I want to use `≃*` without importing `ring`.
* Update src/data/equiv/ring.lean

2020-03-14 15:02:52 e6ccfe0
feat(algebra): the forgetful functor Module ℤ ⥤ Ab is an equivalence (#2130)
* feat(algebra): the forgetful functor Module ℤ ⥤ Ab is an equivalence
* oops, forgot to add file
* missing conversion
* not there yet
* fixes
* doc-strings, and remove more instances
* various
* oops
* revert
* Delete multilinear.olean.lock
* revert
* move instances
* Remove note about a bug fixed in #1586.
* whitespace

2020-03-14 12:47:55 d313d14
chore(scripts): update nolints.txt

2020-03-14 11:28:34 559921a
feat(algebra/category/Group): the free-forgetful adjunction for AddCommGroup (#2141)
* feat(algebra/category/Group): the free-forgetful adjunction for AddCommGroup
* fixes
* Update src/group_theory/free_abelian_group.lean
* oops

2020-03-14 09:21:38 465f599
chore(scripts): update nolints.txt

2020-03-14 08:02:49 81d3ebf
feat(algebra): monoidal category of R-modules (#2125)
* feat(algebra): monoidal category of R-modules
* docstrings
* minor
* tweaks
* fix import
* fixes
* reduce use of @
* broken
* fixes
* Update src/algebra/category/Module/basic.lean
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>

2020-03-14 04:10:31 3d621b5
refactor(ring_theory/subring): use bundled homs (#2144)

2020-03-14 01:59:21 ade1ee3
feat(category_theory/limits): derive has_binary_products from has_limit (pair X Y) (#2139)
* feat(category_theory/limits): derive has_binary_products from has_limit (pair X Y)
* Rename *_of_diagram to diagram_iso_*

2020-03-13 18:31:09 49f5fb8
chore(algebra/category/CommRing/limits): avoid `is_ring_hom` (#2142)
define a `ring_hom` instead

2020-03-13 12:20:20 32c2768
chore(linear_algebra/basic): simplify two proofs (#2123)
* chore(linear_algebra/basic): simplify two proofs
Also drop `linear_map.congr_right` in favor of
`linear_equiv.congr_right`. I'll restore the deleted `congr_right`
as `comp_map : (M₂ →ₗ[R] M₃) →ₗ[R] (M →ₗ[R] M₂) →ₗ[R] (M →ₗ[R] M₃)` soon.
* Fix compile
* Restore `congr_right` under the name `comp_right`.

2020-03-13 10:18:27 aec62dc
chore(scripts): update nolints.txt

2020-03-13 09:00:12 b54960d
refactor(*): migrate some files to bundled ring homs (#2133)
* refactor(*): migrate some files to bundled ring homs
* Rename ring_hom.is_local back to is_local_ring_hom
* Apply suggestions from code review
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Restore 2 instances, make `map` use bundled homs
* More bundled homs
* Add a docstring

2020-03-12 18:52:10 1c449b6
chore(algebra/field*, field_theory/subfield): drop some `x ≠ 0`, use `division_ring` (#2136)
* chore(algebra/field*, field_theory/subfield): drop some `x ≠ 0`, use `division_ring`
We have `0⁻¹=0` in `division_ring` now, so no need to assume `field`
in `ring_hom.map_inv` etc.
* Fix lint

2020-03-12 16:38:40 5fe72b6
chore(scripts): update nolints.txt

2020-03-12 15:18:41 f5787f5
doc(*): switch from update-mathlib to leanproject (#2093)
* doc(*): switch from update-mathlib to leanproject
* Apply suggestions from code review
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Use shiny new `leanproject new` and `leanproject get`
* documentation tweaks
* project.md tweaks

2020-03-12 13:07:30 8131108
feat(category_theory/opposites): add nat_iso.unop (#2132)
* Add nat_iso.unop
* Add docstrings to nat_iso.op, nat_iso.unop

2020-03-12 10:56:40 7d357d7
Fix a typo (#2137)

2020-03-12 05:14:27 35a6e68
chore(scripts): update nolints.txt

2020-03-12 04:06:30 1b0a749
feat(topology): is_closed_proj_of_compact (#2069)
* feat(lattice): add inf_le_inf_left/right
* feat(set/lattice): image_inter_subset
* feat(set/lattice): push_pull
* feat(order/filter): push_pull and product notation
* feat(topology/subset_properties): is_closed_proj_of_compact
* feat(set/lattice): push_pull'
* fix(order/filter): forgotten doc
* lint (including old missing docstrings in filter).
* Apply Yury's suggestions.
* Forgotten style fix
* urkud's suggestions
Co-Authored-By: Yury G. Kudryashov <urkud@urkud.name>
* Update src/order/filter/basic.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>

2020-03-11 22:56:21 7c8dc2a
feat(category_theory/limits): construct equalizers from pullbacks and products (#2124)
* construct equalizers from pullbacks and products
* ...
* changes from review
* Add docstrings
* golf proofs a little
* linter

2020-03-11 18:57:43 7cffe25
chore(category_theory/cones): make functor argument of forget explicit (#2128)

2020-03-11 10:15:41 43431be
chore(category_theory): remove functor.of (#2127)
* chore(category_theory): remove functor.of
* fix

2020-03-11 07:13:33 d909a61
fix(algebra/category): avoid deprecated lemmas (#2126)

2020-03-10 19:54:59 36ac916
Add two missing duals (#2122)

2020-03-10 17:38:33 699401b
feat(ci): look for equivalent oleans on Azure (#2094)
* first attempt at avoiding recompilation in ci
* avoid using leanproject
* delete most of library for testing
* modify non-lean file for testing
* Revert "delete most of library for testing"
This reverts commit b4f298e866513a6e1517f7fb370fcf9e03eb8030.
* unnecessary to look up the exact git sha
* simplify
* apply Gabriel's suggestion
* untar all and only src directory
* Revert "modify non-lean file for testing"
This reverts commit 3157cb1d0d0b3530445c36f8a1e9f725847f71ce.
* simplify
* add git reset to script
* Revert "add git reset to script"
This reverts commit c63a8281fef1a16ad0133521b7c8b002ef47907e.

2020-03-10 15:29:25 668a98e
feat(measurable_space): is_measurable_supr lemma (#2092)
* feat(data/set/lattice): add @[simp] to lemmas
* feat(measurable_space): is_measurable_supr lemma
* fix proof
* fix proof
* fix proof
* oops
* fix proofs
* typo in doc string
* remove @[simp]

2020-03-10 13:12:10 9feefee
feat(ring_theory/polynomial): refactor of is_integral_domain_fin (#2119)
* chore(ring_theory/polynomial): refactor proof of is_noetherian_ring_fin
* not there yet
* feat(ring_theory/polynomial): refactor of is_integral_domain_fin
* fix
* refactor
* fix
* fix
* suggestion from linter
* Update src/data/mv_polynomial.lean

2020-03-10 10:57:20 cdc56ba
feat(analysis/calculus/tangent_cone): prove that all intervals are `unique_diff_on` (#2108)
* feat(analysis/calculus/tangent_cone): prove that all intervals are `unique_diff_on`
* Drop some unneeded assumptions

2020-03-10 06:39:45 e8ad2e3
feat(category_theory/limits): the pullback of a monomorphism is a monomorphism (#2113)
* The pullback of a monomorphism is a monomorphism
* The pushout of an epimorphism is an epimorphism
* Fix a proof
* renaming

2020-03-10 04:22:40 945845d
feat(linter): include linter name in report (#2116)
* feat(linter): include linter name in report (closes #2098)
* Update src/tactic/lint.lean

2020-03-10 02:12:06 4089712
chore(ring_theory/polynomial): refactor proof of is_noetherian_ring_fin (#2117)

2020-03-09 23:57:38 25df884
reflexive transitive closure is symmetric of original (#2115)
* reflexive transitive closure is symmetric if original
* Update src/logic/relation.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/logic/relation.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>

2020-03-09 21:54:46 f90803c
feat(algebra/group/hom): cancel injective/surjective `monoid_hom`s (#2112)
* feat(algebra/group/hom): cancel injective/surjective `monoid_hom`s
* Add a `ring_hom` version

2020-03-09 19:43:42 b39713f
feat(analysis/calculus/darboux): IVT for derivatives (#2110)
* feat(analysis/calculus/darboux): IVT for derivatives
* whitespace
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>

2020-03-09 14:27:32 62abc4d
feat(category_theory): images (#2100)
* feat(category_theory): images
* oops, forgot to add file
* Update src/category_theory/category/default.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* some improvements
* linting
* oops
* Update src/category_theory/limits/shapes/images.lean

2020-03-09 12:22:18 d8d0927
refactor(topology/algebra/ordered): rename `tendsto_of_tendsto_of_tendsto_of_le_of_le` to `tendsto_of_tendsto_of_tendsto_of_le_of_le'` (#2111)
The new `tendsto_of_tendsto_of_tendsto_of_le_of_le` assumes that
the inequalities hold everywhere.

2020-03-09 10:19:36 4258f5e
refactor(analysis/normed_space/banach): use bundled `→L[𝕜]` maps (#2107)

2020-03-09 07:16:17 434b629
chore(scripts): update nolints.txt

2020-03-09 05:00:06 ce7248a
doc(docs/tutorial/category_theory): introductory category theory tutorial (#2104)
* doc(docs/tutorial/category_theory): Adding WIP beginner category theory docs
* linewraps
* presumably uncontroversial edits
* oops
* whitespace
* explaining more about universes
* warning about definitional associativity
* add TODO
* Update docs/tutorial/category_theory/category_theory_intro.md
* rename
* cleanup
* adding lean version
* various
* add a note about debugging universe problems
* rename
* delete old markdown tutorial
* adding sections to make variable names nicer
* tidy up universes
* url escape parentheses inside links
* tweaking text
* Update docs/tutorial/category_theory/intro.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>

2020-03-09 02:49:14 61d70ce
chore(algebra/group): streamlining imports (#2099)
* chore(algebra/group): streamlining imports
* reducing imports

2020-03-09 00:56:10 ca370cb
fix(deprecated/group): remove dangerous instances (#2096)

2020-03-08 22:46:03 15d3268
chore(category_theory/functor): make arguments implicit (#2103)

2020-03-08 05:53:07 b7444b0
Remove limits.lean which is superseded by limits_of_products_and_equalizers.lean (#2105)

2020-03-07 21:37:38 d53bbb6
feat(data/fin_enum): `fin_enum` class for finite types with an enumeration order (#1368)
* feat(data/enum): `enumerable` class for finite types with an
enumeration order
* little fixes
* Update enum.lean
* Update enum.lean
* Update finset.lean
* add documentation
* Update src/data/enum.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/data/enum.lean [skip ci]
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update fin.lean [skip ci[
* Update enum.lean
* Update enum.lean
* Update fin.lean [skip ci]
* Update enum.lean
* Update src/data/enum.lean [skip ci]
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* Update interactive.lean [skip ci]
* Rename enum.lean to fin_enum.lean [skip ci]
* add `mono using` to doc/tactics.md [skip ci]
* update to Lean 3.5.1
* address lint comments
* Update src/data/fin_enum.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update fin_enum.lean
* Apply suggestions from code review
Co-Authored-By: Scott Morrison <scott@tqft.net>
* remove unneeded lemmas
* add `nodup_to_list`

2020-03-07 02:22:02 726d83f
feat(lint): add two new linters (#2089)
* feat(lint): add two new linters
checks whether type-class inference searches end relatively quickly
checks that there are no instances has_coe a t with variable a
* remove `is_fast` from `has_coe_variable`
* add link to note
* typo in priority
* fix error, implement comments

2020-03-07 00:15:07 c5437b4
chore(scripts): update nolints.txt

2020-03-06 21:32:35 6c23bad
feat(data/set/lattice): add @[simp] to lemmas (#2091)
* feat(data/set/lattice): add @[simp] to lemmas
* fix proof
* fix proof
* fix proof
* oops
* fix proofs
* typo in doc string

2020-03-06 19:21:21 4f10d1e
refactor(group_theory/monoid_localization): use characteristic predicate (#2004)
* should I be changing and committing toml idk
* initial monoid loc lemmas
* responding to PR comments
* removing bad @[simp]
* inhabited instances
* remove #lint
* additive inhabited instance
* using is_unit & is_add_unit
* doc string
* remove simp
* submonoid.monoid_loc... -> submonoid.localization
* submonoid.monoid_loc... -> submonoid.localization
* generalize inhabited instance
* remove inhabited instance

2020-03-06 11:43:23 36b336c
chore(scripts): update nolints.txt

2020-03-06 09:04:50 8fb9881
fix(category_theory/limits): Add some missing instances for special shapes of limits (#2083)
* Add some instances for limit shapes
* Deduce has_(equalizers|kernels|pullbacks) from has_finite_limits

2020-03-06 06:56:58 f81f861
feat(category_theory/limits): the kernel of the cokernel of an epimorphism is an isomorphism (#2088)
* The kernel of the cokernel of an epimorphism is an isomorphism
* Fix unused argument warnings
* Remove a set_option
* Fix a typo

2020-03-05 18:58:12-08:00 0f9751c
feat(data/traversable): improve support for instances for recursive types (#2072)

2020-03-06 01:31:18 093ac77
feat(analysis/calculus/specific_functions): smoothness of exp(-1/x) (#2087)
* feat(analysis/calculus/specific_functions): smoothness of exp(-1/x)
* use namespace; shorter names
* fix field_simp

2020-03-05 16:05:27 50c4adf
chore(scripts): update nolints.txt

2020-03-05 13:17:04 78ffbae
chore(*): switch to lean 3.6.1 (#2064)
* chore(*): switch to lean 3.6.0
* Port `src/linear_algebra` to Lean 3.6c
* Port `src/ring_theory` to Lean 3.6c
* Port `src/algebra` and its dependencies to Lean 3.6c
* Port `src/group_theory` to Lean 3.6c
* WIP: Ports part of `src/data` to Lean 3.6c
* Port `src/data` (and dependencies) to Lean 3.6
* fix set_theory.lists
* fix ring2
* fix pell.lean
these aren't the cleanest proofs, but pell.lean is kind of a standalone thing.
* fix dioph.lean
* Port `src/number_theory/sum_four_squares.lean` to Lean 3.6c
* Port `src/field_theory` to Lean 3.6
* Port `src/computability` to Lean 3.6c
* Port `src/measure_theory` (and dependencies) to Lean 3.6c
* fix manifold/real_instances
* fix analysis/complex/polynomial
* Fix some compile errors in `real_inner_product`
* Upgrade to Lean 3.6.1
* perf: speed up calls to linarith
* Reduce instance priorities for potentially noncomputable instances.
* Remove cyclic instance.
* Make arguments {implicit} in instances where they can be filled in via unification.
* Make inner_product_space compile.
* Style.
* Port data.nat.modeq
* Port data.int.parity
* Port data.int.modeq
* Port data.real.hyperreal
* fix(ci): always run git setup step
closes #2079
(cherry picked from commit 8a0157dc8dfc946d98eba02417052c3c9556559e)
* Remove pre-3.6 legacy code.
* Fix test/monotonicity.lean
* Fix test/ring_exp.lean
* Fix test/conv.lean
* Fix archive/imo1988_q6.lean
* Fix docs/tutorial/Zmod37.lean
* Fix archive/sensitivity.lean
* refactor(algebra/lie_algebra): lie_algebra should not extend lie_ring
* remove unused argument
* add doc-string to instance that became a def
* add docstring
* Fix linting error ☺
* Fix data.real.irrational
* fixing a proof
* cleaning up proof
* fix broken proof
* fix proof
* fix some more proofs
* fix
* fix proofs

2020-03-05 00:24:49 8535132
refactor(algebra/lie_algebra): lie_algebra should not extend lie_ring (#2084)
* refactor(algebra/lie_algebra): lie_algebra should not extend lie_ring
* Fix linting error ☺

2020-03-04 22:23:00 7d6c4fb
fix(congruence): use has_coe_t instead of has_coe (#2086)
* fix(congruence): use has_coe_t instead of has_coe
* capitalization
Does that matter for doc generation?

2020-03-04 19:56:00 9fc675c
chore(analysis/normed_space/basic): rename `ne_mem_of_tendsto_norm_at_top` (#2085)
It uses `∀ᶠ` now, so rename to `eventually_ne_of_tendsto_norm_at_top`.

2020-03-04 13:10:10 f112408
fix(ci): adjust conditions for fixing steps (#2082)
* fix(ci): always run git setup step
closes #2079
* fix(ci): always test doc gen
documentation will still be pushed only under the same conditions as before
closes #2081
* Update scripts/deploy_docs.sh
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>

2020-03-04 07:09:20 cc4ac8a
chore(scripts): update nolints.txt

2020-03-03 20:45:05-08:00 0f1eb80
fix(CI/documentation): add a name back

2020-03-03 22:24:50 13f04c0
feat(tactic/extract_goal): improve formatting to put assumptions on their own line (#2076)

2020-03-03 20:14:28 545dd03
feat(topology/metric_space/antilipschitz): define `antilipschitz_with` (#2075)
* chore(data/real/ennreal): weaker assumptions in `sub_mul`, add `coe_inv_le`
* feat(topology/metric_space/antilipschitz): define `antilipschitz_with`
Also make some proofs use facts about `antilipschitz_with`.
* Rename inequalities, move `K` to the other side
This way it's easier to glue it with the rest of the library, and
we can avoid assuming `0 < K` in many lemmas.

2020-03-03 14:39:18 02d22c3
chore(scripts): update nolints.txt

2020-03-03 11:51:46 f7e82d0
feat(tactic/lint): check for redundant simp lemmas (#2066)
* chore(*): fix simp lemmas
* feat(tactic/lint): check for redundant simp lemmas

2020-03-03 09:04:21 2d1bd45
fix some docstrings [ci skip] (#2078)

2020-03-03 07:18:28 2a9ad03
feat(data/list/basic): more lemmas about `list.chain'`; `chain'_of_pairwise` → `pairwise.chain'` (#2071)

2020-03-03 05:29:57 e003014
feat(analysis/calculus/iterated_deriv): iterated derivative of a function defined on the base field (#2067)
* iterated deriv
* cleanup
* fix docstring
* add iterated_deriv_within_succ'
* remove n.succ
* n+1 -> n + 1

2020-03-03 00:17:40 262a39e
chore(scripts): update nolints.txt

2020-03-02 21:45:35 fe9d7ff
feat(tactic/nat_cases): a tactic to case bash inequalities on natural numbers (#1596)
* starting on finset_cases
* looking pretty nice
* moving lemma that rewrites nat.add back to (+)
* update tactics.md
* cleanup
* suggestions from review
* Update src/tactic/fin_cases.lean
Co-Authored-By: semorrison <scott@tqft.net>
* incomplete implementation of `with` syntax
* looks good
* failed attempt to use unification
* test showing elaboration problem
* elaborating the `with` argument with respect to the expected type
* testing the type of A in `x ∈ A` using unification rather than syntactic matching
* refactor and cleanup
* refactor
* initial start on nat_cases
* initial start on nat_cases
* resuming work on nat_cases
* looks reasonable
* documentation
* reverting bad merge in fin_cases
* fix module comment
* move non-meta lemmas
* add tests for Chris' use case
* cleanup
* oops
* starting on fintype instances for Icos
* finishing fintypes
* minor
* not really sure what to do next
* oops, forgot to commit??
* oops
* bit more work
* more progress
* everything works?
* moving everything to their natural homes
* rearrange
* cleanup
* linting
* doc-strings
* merge two interactive tactics, via `using` keyword
* improve documentation, in response to review
* add interval_cases to tactic.default
* Apply suggestions from code review

2020-03-02 19:54:08 1d82a7c
doc(data/fin): add docs; fin_zero_elim -> fin.elim0; fin_zero_elim' -> fin_zero_elim (#2055)
* doc(data/fin): add some docs
Also drom `fin_zero_elim` in favor of `fin.elim0` from `stdlib` and
rename `fin_zero_elim'` to `fin_zero_elim`.
* Update src/data/fin.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Update docs, fix `Π` vs `∀`.

2020-03-02 18:11:18 8919541
feat(data/finset): new basic material on finsets and fintypes (#2068)
* feat(data/finset): additional basic material
* minor fixes
* golfed
* Update src/data/finset.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/data/finset.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/data/finset.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* golfed

2020-03-02 16:19:30 62756bd
chore(data/real/ennreal): weaker assumptions in `sub_mul`, add `coe_inv_le` (#2074)

2020-03-02 14:25:59 bfbd093
chore(algebra/group): move `is_mul/monoid/group_hom` to `deprecated/` (#2056)
* Move `is_mul/monoid/group_hom` to `deprecated/`
Also improve deprecation docstring.
TODO: fix compile
* chore(algebra/group): move `is_mul/monoid/group_hom` to `deprecated/`
Also migrate a few definitions to bundled homs:
* use `monoid_hom.map_is_conj` instead of `is_group_hom.is_conj`;
* `with_one.lift` and `with_one.map` now take `f` and an explicit
  argument `h : ∀ x y, f (x * y) = f x * f y` instead of `f` and
  `[is_mul_hom f]`, and produce a `monoid_hom`. As a side effect, they
  are now defined for semigroup homomorphisms only.
* Adjust module docstring
* Update src/algebra/group/with_one.lean
I wonder if mergify will do its job now.

2020-03-02 12:33:13 3055b3c
chore(topology/metric_space/isometry): rename `(e)metric.isometry.diam_image` to `isometry.(e)diam_image` (#2073)
This way we can use dot notation to access these lemmas. Also add `(e)diam_range`.

2020-03-02 10:42:53 2683fa0
feat(order/galois_connection): lemmas about galois insertions and supr/infi (#2052)
* feat(order/galois_connection): lemmas about galois insertions and supr/infi
* Fix build, hopefully

2020-03-02 08:53:22 d5d907b
feat(algebra/free_monoid): define `lift` and `map`, move out of `algebra/group` (#2060)
* Move `free_monoid` from `algebra/group/` to `algebra/`
* feat(algebra/free_monoid): define `lift` and `map`
* Expand docstring, drop unneeded arguments to `to_additive`
* Fix compile
* Update src/algebra/free_monoid.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>

2020-03-01 23:09:46-08:00 aec54b3
fix(.mergify.yml): remove " (leanprover-community/lean:3.5.1)" (#2077)

2020-02-28 18:23:59+01:00 19a9bdc
fix(tactic/omega): reify nonconstant ints and nats (#1748)

2020-02-28 16:36:14+01:00 354a4ed
chore(ci): remove unneeded Lean version restrictions (#2065)
* remove lean version from CI
* more version references
* fix?
* persist environment var between steps

2020-02-28 15:33:18 0760829
feat(ring_theory): Fractional ideals (#2062)
* Some WIP work on fractional ideals
* Fill in the `sorry`
* A lot of instances for fractional_ideal
* Show that an invertible fractional ideal `I` has inverse `1 : I`
* Cleanup and documentation
* Move `has_div submodule` to algebra_operations
* More cleanup and documentation
* Explain the `non_zero_divisors R` in the `quotient` section
* whitespace
Co-Authored-By: Scott Morrison <scott@tqft.net>
* `has_inv` instance for `fractional_ideal`
* `set.univ.image` -> `set.range`
* Fix: `mem_div_iff.mpr` should be `mem_div_iff.mp`
(but both reduce to reflexivity anyway)
* Add `mem_div_iff_smul_subset`
Since that is how the definition of `I / J` is traditionally done,
but it is not as convenient to work with, I didn't change the definition
but added a lemma stating the two are equivalent
* whitespace again
(it got broken because I merged changes incorrectly)
* Fix unused argument to `inv_nonzero`

2020-02-28 13:49:48 4149099
fix(tactic/ring): more precise pattern match for div (#1557)
* fix(tactic/ring): more precise pattern match for div
* add test
* fix instance check for div
* chore(algebra/quadratic_discriminant): add braces in have steps
* use norm_num instead of ring to evaluate exponents
* fix norm_num uses
* fix norm_num pow bug
* bugfix
* fix proof

2020-02-28 04:02:06 0bf2064
chore(scripts): update nolints.txt

2020-02-28 01:50:01 4637e5c
refactor(analysis/calculus/times_cont_diff): massive refactor (#2012)
* feat(data/fin): append
* Update fin.lean
* Update fintype.lean
* replace but_last with init
* cons and append commute
* feat(*/multilinear): better multilinear
* docstrings
* snoc
* fix build
* comp_snoc and friends
* refactor(analysis/calculus/times_cont_diff): massive refactor
* fix docstring
* move notation
* fix build
* linter
* linter again
* Update src/analysis/calculus/times_cont_diff.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/analysis/calculus/times_cont_diff.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/analysis/calculus/times_cont_diff.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/analysis/calculus/times_cont_diff.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/analysis/calculus/times_cont_diff.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* curryfication -> currying

2020-02-27 22:04:31 0e4eb09
feat(ci): avoid push to Azure if branch has been updated (#2048)
* avoid push to Azure if branch has been updated
* changes to git config in deploy_nightly.sh break git fetch
* I don't understand why this is different than on my own repo
* artifact upload breaks fetch, I guess?
* factor out git config
* fix env variable
* adjustments
* removed repo check

2020-02-27 17:35:47 691456c
chore(scripts): update nolints.txt

2020-02-27 15:18:39 7907f8f
feat(tactic/tidy): include norm_cast in tidy (#2063)
* feat(tactic/tidy): include norm_cast in tidy
* Update src/tactic/core.lean

2020-02-27 13:32:50 6c2411b
chore(scripts): update nolints.txt

2020-02-27 11:54:47 a46b3e5
doc(data/finsupp): module docs and docstrings  (#2059)
* doc(data/finsupp): module docs and docstrings
* chore(data/finsupp): squeeze_simp, cleanup, style
* reviewer comments

2020-02-27 01:35:32 ef1e38e
chore(scripts): update nolints.txt

2020-02-26 23:31:28 f0bb2f8
feat(ring_theory/polynomial): mv_polynomial.integral_domain (#2021)
* feat(ring_theory/polynomial): mv_polynomial.integral_domain
* Add docstrings
* Add docstrings
* Fix import
* Fix build
* Please linter, please
* Update src/algebra/ring.lean
* Clean up code, process comments
* Update src/data/equiv/fin.lean
* Update src/data/equiv/fin.lean
* Update src/data/equiv/fin.lean
* Update src/ring_theory/polynomial.lean

2020-02-26 10:53:53 73b41b2
chore(data/prod): rename `injective_prod` to `injective.prod` (#2058)
This way we can use dot notation

2020-02-25 22:59:53 6a6beaa
chore(data/list/basic): drop `append_foldl` and `append_foldr`, add `map_nil` and `prod_singleton` (#2057)
`append_foldl` and `append_foldr` were unused duplicates of
`foldl_append` and `foldr_append`

2020-02-25 21:09:35 7be3e93
chore(field_theory/minimal_polynomial): fix timeout (#2054)
* chore(field_theory/minimal_polynomial): fix timeout
* Update src/field_theory/minimal_polynomial.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>

2020-02-25 19:22:49 06c5594
chore(analyis/normed_space/banach): split proof to avoid timeout (#2053)
* chore(analyis/normed_space/banach): split proof to avoid timeout
* delay introducing unnecessary variable
* Apply suggestions from code review
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* fix indent

2020-02-25 16:06:50 089d058
feat(tactic/lint): linter for commutativity lemmas that are marked simp (#2045)
* feat(tactic/lint): linter for commutativity lemmas that are marked simp
* chore(*): remove simp from commutativity lemmas
* doc(*): document simp_comm linter

2020-02-25 14:16:23 450dcdf
refactor(order/bounds): use dot notation, reorder, prove more properties (#2028)
* refactor(order/bounds): use dot notation, prove more properties
Also make parts of `complete_lattice` and
`conditionally_complete_lattice` use these lemmas.
* Comments
* Add a module docstring
* Fixes from review, +4 lemmas about images
* Fix a typo in the previous commit
* Update src/order/bounds.lean
* Update src/order/bounds.lean

2020-02-25 12:27:02 a227e06
Unify naming of lemmas related to the (co)lim functor (#2040)

2020-02-25 10:39:52 f77cb57
chore(data/fintype): move  results depending on big_operators (#2044)

2020-02-25 08:51:21 61d75bb
chore(scripts): update nolints.txt

2020-02-25 06:38:57 17a33f0
refactor(order/copy): move complete_lattice.copy to its own file (#2050)
* refactor(order/copy): move complete_lattice.copy to its own file
* Docstrings
* Update src/order/copy.lean

2020-02-24 23:51:03 5770369
refactor(topology/metric_space/isometry): remove isometry_inv_fun from isometric (#2051)
* refactor(topology/metric_space/isometry): remove isometry_inv_fun from isometric; it is automatic
* Alternative constructor for isometric bijections

2020-02-24 22:06:59 3ff50d9
chore(scripts): update nolints.txt

2020-02-24 19:58:16 fb878e7
feat(tactic/lint): add linter for simp lemmas whose lhs has a variable as head symbol (#2038)

2020-02-24 18:12:09 cb4bdd8
doc(category_theory): add a few docstrings (#2046)
* doc(category_theory): add a few docstrings
* Apply suggestions from code review
Co-Authored-By: Johan Commelin <johan@commelin.net>

2020-02-24 17:33:16+01:00 8030469
Revert "Update README.md"
This reverts commit 4d3ef8368051e45e1b20e77462b958be3e427c87.

2020-02-24 17:31:46+01:00 4d3ef83
Update README.md

2020-02-24 15:43:04 0fc45dc
feat(tactic/lint): support @[nolint unused_arguments] (#2041)
* feat(tactic/lint): support @[nolint unused_arguments]
* refactor(scripts/mk_nolint): include failing linter name in nolints.txt
* chore(scripts/nolints): update nolints.txt
* doc(category/functor): add docstrings

2020-02-24 11:42:56 32b32ad
docs(data/set/basic): add module docstring (#1991)
* adding module docstring
* tidying up
* markdown fixes
* more md tidying
* remove some unnecessary {alpha : Type*}
* responding to comments
* responding to comments

2020-02-23 17:01:48 28e4bdf
feat(topology): an `is_complete` set is a `complete_space` (#2037)
* feat(*): misc simple lemmas
* +1 lemma
* Rename `inclusion_range` to `range_inclusion`
Co-Authored-By: Johan Commelin <johan@commelin.net>
* feat(topology): an `is_complete` set is a `complete_space`
Also simplify a proof in `topology/metric_space/closeds`.
* Use in `finite_dimension`

2020-02-23 13:57:52 16c1d9d
chore(*): minimise imports of data.list.basic (#2042)

2020-02-23 12:16:38 256bedc
chore(test): don't use sorry in tests, to reduce noise (#2043)

2020-02-22 22:26:53 bfa2465
refactor(topology/metric_space/lipschitz): redefine for an `emetric_space` (#2035)
* refactor(topology/metric_space/lipschitz): redefine for an `emetric_space`
* Fix compile
* Fixes, thanks @sgouzel

2020-02-22 20:47:15 ea149c8
feat(algebraic_geometry/prime_spectrum): prime spectrum of a ring is compact (#1987)
* wip
* wip
* wip
* wip
* WIP
* WIP
* Reset changes that belong to other PR
* Docstrings
* Add Heine--Borel to docstring
* Cantor's intersection theorem
* Cantor for sequences
* Revert "Reset changes that belong to other PR"
This reverts commit e6026b8819570ef6a763582a25d7ae5ad508134b.
* Move submodule lemmas to other file
* Fix build
* Update prime_spectrum.lean
* Docstring
* Update prime_spectrum.lean
* Slight improvement?
* Slightly improve structure of proof
* WIP
* Cleaning up proofs
* Final fixes

2020-02-22 19:10:31 d615ee6
feat(ci): skip Azure upload if archive already exists (#2039)
* skip upload if archive already exists
* simplify script
* remove unused variable
* fix

2020-02-22 16:24:24 1c6a317
feat(*): misc simple lemmas (#2036)
* feat(*): misc simple lemmas
* +1 lemma
* Rename `inclusion_range` to `range_inclusion`
Co-Authored-By: Johan Commelin <johan@commelin.net>

2020-02-22 13:59:03 603c7ba
chore(scripts): update nolints.txt

2020-02-22 12:05:43 eabcd13
feat(category_theory/limits): kernels (#1988)
* chore(category_theory): require morphisms live in Type
* move back to Type
* fixes
* feat(category_theory/limits): kernels
* finishing basic API for kernels
* update post #1412
* fix
* documentation
* documentation
* more docs
* replacing dumb code
* forall -> Pi
* removing all instances
* working on Reid's suggested lemmas
* experiments
* lots to do
* Show that equalizers are monomorphisms
* Show that equalizer of (f, f) is always an iso
* Show that an equalizer that is an epimorphism is an isomorphism
* Clean up
* Show that the kernel of a monomorphism is zero
* Fix
* Show that the kernel of a linear map is a kernel in the categorical sense
* Modify proof
* Compactify proof
* Various cleanup
* Some more cleanup
* Fix bibtex
* Address some issues raised during discussion of the PR
* Fix some more incorrect indentation
* Some more minor fixes
* Unify capitalization in Bibtex entries
* Replace equalizer.lift.uniq with equalizer.hom_ext
* Some more slight refactors
* Typo

2020-02-22 11:14:19+01:00 a9ed54c
feat(ci): upload all branch builds to Azure server (#2032)

2020-02-22 09:45:22 928496a
feat(category_theory/limits) Binary product from pullbacks and terminal object (#1998)
* Binary product from pullbacks and terminal object
* Update binary_products.lean
* simplifications
* pare down the proof a bit more
* changes from review
* adjust simp to rw

2020-02-22 08:15:14 03af46c
chore(presheafed_space): avoid deterministic timeout (#1617)
* chore(presheafed_space): avoid deterministic timeout
* fix proofs: now works with -T16000
* fix

2020-02-22 00:36:59 11797e6
chore(topology/metric_space/emetric_space): use filter bases in 2 proofs (#2034)

2020-02-21 22:47:11 ffb6d6e
feat(tactic): add various tactics about local definitions (#1953)
* feat(tactic): add various tactics about local definitions
* remove {α β}
* rename generalize' in monotonicity.
* updates after reviews

2020-02-21 21:54:18+01:00 86c9417
doc(topology/dense_embedding): fix list syntax in a comment (#2033)

2020-02-21 19:29:22 ff36e0f
chore(scripts): update nolints.txt

2020-02-21 17:46:31 472156f
feat(tactic/lint): check that left-hand side of all simp lemmas is in simp-normal form (#2017)
* feat(tactic/lint): check that lhs of simp lemmas are in simp nf
* fix(topology/metric_space/basic): remove @[simp] from lemmas with {x,y} on the lhs
* chore(topology/local_homeomorph): remove redundant lemmas from the simp set
* fix(topology/algebra/module): fix simp-nf lints
* chore(ring_theory/localization): mark fewer things as simp
* fix(set_theory/ordinal): put lhs into simp-normal form
* chore(algebra/big_operators): fix simp lemmas
* chore(data/set/lattice): remove redundant simp lemmas
* chore(data/set/basic): remove redundant simp lemma
* chore(data/zsqrtd/basic): make simp_nf lint happy
* fix(order/complete_lattice): remove lemmas from simp set
* chore(order/filter/filter_product): fix linting issues
* feat(data/mv_polynomial): add simp lemmas about neg
* fix(data/multiset): fix simp_nf linter issues
* chore(data/list/sigma): fix simp_nf linter issues
* fix(data/list/basic): remove redundant and unapplicable simp lemmas
* fix(measure_theory/set_integral): remove redundant simp lemma
* fix(measure_theory/l1_space): remove redundant simp lemmas
* fix(algebra/group_power): remove simp lemmas that are not in nf
* fix(algebra/field): remove redundant simp lemma
* chore(data/list/alist): remove simp lemmas
* fix(data/int/basic): simp-normal form for coercions...
* fix(data/finset): formulate simp-lemmas for simp-nf
* fix(data/int/parity): use simp-normal form
* fix(data/equiv/denumerable): remove redundant simp lemma
* fix(category_theory/**): fix simp-normal forms
* fix(set_theory/zfc): put simp lemmas in simp-normal form
* fix(tactlic/lint): ignore sub_eq_add_neg for simp_nf lint
* doc(tactic/lint): add simp_nf linter to module doc
* doc(docs/commands): add simp_nf linter
* fix(*): put lemmas in simp-normal form

2020-02-21 11:26:12 bb7631f
feat(algebraic_geometry/prime_spectrum): vanishing ideal (#1972)
* wip
* wip
* Remove stuff for next PR
* Update prime_spectrum.lean
* Process comments

2020-02-21 05:36:39 b30b5e9
feat(tactic/hint): update tactic list (#2024)
* feat(tactic/hint): update tactic list
* Removing `fsplit` in favour of `fconstructor`.
Co-Authored-By: Floris van Doorn <fpvdoorn@gmail.com>
* fix test
* silence a test

2020-02-21 02:50:57 888e75b
refactor(*/multilinear): better right curryfication (#1985)
* feat(data/fin): append
* Update fin.lean
* Update fintype.lean
* replace but_last with init
* cons and append commute
* feat(*/multilinear): better multilinear
* docstrings
* snoc
* fix build
* comp_snoc and friends
* fix docstring
* typo

2020-02-20 15:52:23-08:00 eeedc6a
fix(*): remove loopy simp lemmas (#2026)

2020-02-20 21:25:20 b0eeea4
fix(data/bool): remove simp attribute from commutativity lemmas (#2027)

2020-02-20 16:55:22 aefdb86
feat(data/int/basic): format -42 as -42 instead of -(41+1) (#2025)

2020-02-20 15:24:23 d933ea5
doc(lint): add linter missing from list of defaults (#2023)

2020-02-20 14:50:00+01:00 43dd938
chore(ci): check roadmap directory (#2022)
* chore(ci): check roadmap directory
partially addresses #2016
* fix roadmap compilation

2020-02-20 11:06:30 4e398cc
chore(scripts): update nolints.txt

2020-02-20 09:21:34 68b9c16
feat(algebra/group): add `units.lift_right` and `is_unit.lift_right` (#2020)
* Rename type variables, add a docstring
* feat(algebra/group): add `units.lift_right` and `is_unit.lift_right`
These defs/lemmas may be useful for `monoid_localization`.

2020-02-20 02:23:59 d42d29b
fix(tactic/tauto): fix typos (#2019)
* fix(tactic/tauto): fix typos
* fix same error in tactics.md

2020-02-20 00:52:33 34724f4
chore(scripts): update nolints.txt

2020-02-19 23:20:36 2d6556d
feat(analysis/mean_inequalities) : Prove AM-GM (#1836)
* feat(analysis/mean_inequalities) : Prove AM-GM
* Update, add more inequalities
* Update src/analysis/convex/specific_functions.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update src/analysis/mean_inequalities.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update src/analysis/mean_inequalities.lean
* Small fixes, thanks @sgouezel
* Update src/analysis/mean_inequalities.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>

2020-02-19 21:46:28 5b77b64
refactor(analysis/calculus/tangent_cone): split a proof into parts (#2013)
* refactor(analysis/calculus/tangent_cone): split a proof into parts
Prove `submodule.eq_top_of_nonempty_interior` and use it in the
proof of `unique_diff_on_convex`.
* Update src/analysis/normed_space/basic.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Fix a docstring.
* Update src/topology/algebra/module.lean

2020-02-19 12:42:42 bcdb4c3
chore(scripts): update nolints.txt

2020-02-19 11:05:33 8563695
refactor(algebra/associated): move `is_unit` def to `algebra/group` (#2015)
* refactor(algebra/associated): move `is_unit` def to `algebra/group`
I think it makes sense to have it near `units`.
* Add a docstring to `units`, mention `is_unit` there.

2020-02-19 08:48:40 177c06f
chore(measure_theory/*): make a few proofs slightly shorter (#2014)

2020-02-18 23:13:13 8700aa7
feat(docs): install mathlibtools package with pip (#2010)

2020-02-18 20:06:18 2198d2c
feat(roadmap): add some formal roadmaps in topology (#1914)
* feat(roadmap): add some formal roadmaps in topology
* Update roadmap/topology/paracompact.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update roadmap/todo.lean
* Update roadmap/topology/shrinking_lemma.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* add `todo` tactic as a wrapper for `exact todo`
* Update roadmap/topology/shrinking_lemma.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* copyright notices and module docs
* oops

2020-02-18 17:07:17 0c2dbd5
chore(analysis/normed_space/basic): implicit args (#2011)
Arguments to these `iff`s should be implicit.

2020-02-18 14:56:44 8a660ec
feat(scripts/deploy_nightly): change pre-release to release (#2009)
The `--pre-release` doesn't really achieve anything as far as we can tell, and complicates some scripting: see https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20nightlies

2020-02-18 12:09:47 115e513
chore(topology/constructions): rename `tendsto_prod_mk_nhds` (#2008)
New name is `tendsto.prod_mk_nhds`. Also use it in a few proofs and
generalize `tendsto_smul` to a `topological_semimodule`.

2020-02-18 09:33:08 1435a19
refactor(topology/maps): split the proof of `is_open_map_iff_nhds_le` (#2007)
Extract a lemma `is_open_map.image_mem_nhds` from the proof, and make
the proof use this lemma.

2020-02-18 02:10:56 2d00f20
feat(data/fin): init and snoc (#1978)
* feat(data/fin): append
* Update fin.lean
* Update fintype.lean
* replace but_last with init
* cons and append commute
* change append to snoc
* comp_snoc and friends
* markdown in docstrings
* fix docstring

2020-02-18 00:40:07 b373dae
feat(linear_algebra/contraction): define contraction maps between a module and its dual (#1973)
* feat(linear_algebra/contraction): define contraction maps between a module and its dual
* Implicit carrier types for smul_comm
* Add comment with license and file description
* Build on top of extant linear_map.smul_right
* Feedback from code review

2020-02-17 23:10:41 4299a80
refactor(topology/subset_properties): use finite subcovers indexed by types (#1980)
* wip
* wip
* wip
* wip
* WIP
* WIP
* Reset changes that belong to other PR
* Docstrings
* Add Heine--Borel to docstring
* Cantor's intersection theorem
* Cantor for sequences
* Generalise Cantor intersection thm
* More fixes

2020-02-17 21:45:03 bbf5d1a
refactor(algebra/field): partially migrate to bundled homs (#1999)
* refactor(algebra/field): partially migrate to bundled homs
* Add a few `@[simp]` attrs

2020-02-17 20:10:20 6cdd96b
chore(*): reduce proof size (#2006)

2020-02-17 18:37:15 5eefae2
chore(set_theory/ordinal): shorten proofs (#2005)

2020-02-17 17:00:24 5f06692
feat(data/set/intervals): add `Ici_subset_Ici`, `Iic_subset_Iic` (#2003)

2020-02-17 13:55:11 f8d0931
feat(tactic/rename_var): A teaching tactic (#1974)
* feat(tactic/rename_var): A teaching tactic
The goal is to teach that bound variables names are irrelevant, and also
help clarify local context.
* allow rename_var to act on several locations at once
* Apply suggestions from code review
by Rob.
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>

2020-02-17 12:19:30 cd0e2f6
add "Try this: " to squeeze_simp and suggest (#1990)
* add "Try this" to squeeze_simp and suggest
* update docs
* fix suggest tests
* add "try this" to rcases, rintro, and tidy
* add "try this" to hint

2020-02-17 10:45:46 557b01d
chore(analysis/calculus/tangent_cone): simplify a proof (#2002)
Use `linear_map.span_inl_union_inr` instead of repeating its proof.

2020-02-17 09:07:47 b42e568
chore(algebra/group_power): rename type vars, minor cleanup (#1997)
The only non-BC change should be removing
is_group_hom.map_gpow` / `is_add_group_hom.map_gsmul` in favor of `monoid_hom.map_gpow`.

2020-02-17 07:29:08 d673e55
feat(ring_theory/algebra): add ext_iff (#1996)
* feat(ring_theory/algebra): add ext_iff
* also add eq_top_iff
* Update src/ring_theory/algebra.lean

2020-02-17 05:59:51 770c56b
doc(topology/metric_space/basic): add 1 docstring (#2000)
* doc(topology/metric_space/basic): add 1 docstring
* Update src/topology/metric_space/basic.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>

2020-02-17 04:35:05 dbb21c8
chore(scripts): update nolints.txt

2020-02-17 02:59:50 1b1b626
chore(topology/sequences): use filter bases, minor fixes (#2001)

2020-02-15 23:38:34 c7eb6f8
chore(algebra/group/hom): add a missing `simp` lemma (#1994)

2020-02-15 13:33:39 dbb61ea
feat(tactic/hint): try out a customisable list of tactics, and report which ones make progress (#1955)
* feat(tactic/hint): try out a fixed list of tactics, and report which ones make progress
* add hint to tactic.default
* make the list of hint tactics customisable
* suggestion
* fix linting errors
* simplify use of add_hint, and add hints
* remove TODO
* Update src/tactic/hint.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* various
* Update docs/tactics.md

2020-02-15 09:59:41 0b6d398
chore(algebra/group/basic): rename type vars (#1989)

2020-02-14 17:55:38 d36930b
chore(scripts): update nolints.txt

2020-02-14 16:27:08 edefe20
feat(ci): update nolints.txt after master builds (#1979)
* feat(ci): update nolints.txt after master builds
* avoid failure when no changes
* update for production
* update condition
* header override is already unset

2020-02-14 10:30:14 938960e
fix(scripts/deploy_docs): remove last trace of nightly builds (#1986)

2020-02-14 01:44:12 4441394
chore(category_theory/conj): avoid `is_mul_hom` (#1984)

2020-02-14 00:07:30 9a91125
chore(group_theory/sub*) : rename type vars (#1982)
Use `M`, `G`, `A` instead of greek letters

2020-02-13 22:27:55 db1c500
refactor(data/set/function): use dot notation (#1934)

2020-02-13 21:47:45+01:00 0372fb0
fix(scripts/deploy_docs.sh): header override is already unset
Before, the nightly and doc deploys were running in different builds.
Now they're in the same build, so we don't need to (and can't) unset the
variable twice.

2020-02-13 20:44:53 56a5240
feat(calculus/fderiv): invariance of fderiv under linear equivs (#1977)
* feat(calculus/fderiv): invariance of fderiv under linear equivs
* missing material
* coherent naming conventions
* fix build
* coherent naming conventions
* yury's comments

2020-02-13 19:03:11 a79a055
refactor(group_theory/submonoid): redefine `subtype.monoid` manually (#1981)
* refactor(group_theory/submonoid): redefine `subtype.monoid` manually
This way `group.to_monoid subtype.group` is defeq `subtype.monoid group.to_monoid`.
* Fix compile of `ring_theory/integral_closure`

2020-02-13 18:26:28+01:00 b7ffc6f
fix(mergify): remove references to nightly builds

2020-02-13 13:18:09+01:00 aa4da84
chore(ci): don't build with Lean nightly (#1975)
* chore(ci): don't build with Lean nightly
* fix condition for doc upload

2020-02-11 15:33:16 abd412b
chore(scripts): update nolints (#1976)

2020-02-11 13:43:45 176852d
feat(tactic/lint): check if inhabited instances should be nonempty (#1971)
* add inhabited vs nonempty linter
* add new linter to ci
* start updating files to pass linter
* more linter fixes
* fix more linter errors
* more fixes
* fix build
* remove unnecessary instances
* nicer proof
* adjust inhabit tactic
* improve proof
* move instance to better place
* generalize instance
* fix build
* inhabited -> nonempty
* fix build

2020-02-11 09:25:41 4e2c7e3
feat(topology/subset_properties): alternative definitions of irreducible and connected (#1970)
* refactor(topology/*): irreducible and connected sets are nonempty
* Fix typos
* Fix more typos
* Update src/topology/subset_properties.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update src/topology/subset_properties.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Refactor 'nonempty' fields
* Fix spacing in set-builder
* Use dot notation
* Write a comment on the nonempty assumption
* Apply suggestions from code review
* irreducible_iff statements
* Fix build
* Tiny improvements
* Justify that connected spaces are nonempty
* Add docstrings
* Update src/topology/subset_properties.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update subset_properties.lean

2020-02-10 16:32:09 93ba8b6
refactor(topology/metric_space): introduce&use `edist`/`dist` bases (#1969)
* refactor(topology/metric_space): introduce&use `edist`/`dist` bases
* Introduce bases for `emetric_space` and `metric_space`.
* Make some proofs use general facts about filter bases.
* Fix some lint errors
* Update src/topology/metric_space/emetric_space.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* +2 docstrings

2020-02-09 09:33:32 777f214
refactor(data/matrix,linear_algebra): Use `matrix.mul` as default multiplication in matrix lemmas (#1959)
* Change `has_mul.mul` to `matrix.mul` in a few `simp` lemmas
* Standardise more lemmas for matrix multiplication
* Generalize `to_pequiv_mul_matrix` to rectangular matrices

2020-02-08 13:25:39 bcb63eb
refactor(topology/*): irreducible and connected sets are nonempty (#1964)
* refactor(topology/*): irreducible and connected sets are nonempty
* Fix typos
* Fix more typos
* Update src/topology/subset_properties.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update src/topology/subset_properties.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Refactor 'nonempty' fields
* Fix spacing in set-builder
* Use dot notation
* Write a comment on the nonempty assumption
* Apply suggestions from code review
* Fix build
* Tiny improvements

2020-02-08 10:42:31 2e18388
feat(linear_algebra): The Special linear group SL(n, R) (#1960)
* Define the special linear group
* Make definitions independent of PR #1959
That PR changes `det_mul` to have another, still definitionally equal, type.
If the invocations to `det_mul` are independent of syntactic equality, i.e. we
only pass `det_mul` to `erw`, this branch should be compatible with the state
before the change and after.
* Documentation and code style improvements
* Improve module docstring
* Fix documentation
`matrix.special_linear_group` is not a set but a type
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Don't directly coerce from SL to linear maps
Now we coerce from `matrix.special_linear_group n R` to `matrix n n R` instead
of `general_linear_group R (n -> R)`
* Whitespace fixes
* Fix failing build in `src/linear_algebra/dual.lean`
* Give an almost generic formula for `det_adjugate`
* Move `det_eq_one_of_card_eq_zero` to the correct section
* Replace the ad-hoc assumption of `det_adjugate_of_invertible` with `is_unit`
* Fix linting error
There was an unnecessary assumption [decidable_eq α] floating around
* Replace `special_linear_group.val` with the appropriate coercions
* whitespace
Correctly indent continued line
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Docstrings for the `det_adjugate_of_...` lemmas

2020-02-07 16:57:48 2007d34
feat(analysis/normed_space/multilinear): norm on continuous multilinear maps (#1956)
* feat(analysis/normed_space/multilinear): norm on continuous multilinear maps
* docstring
* improved docstrings

2020-02-07 06:21:24 f912a6b
feat(algebraic_geometry/prime_spectrum): first definitions (#1957)
* Start on prime spectrum
* Define comap betwee prime spectra; prove continuity
* Update src/algebraic_geometry/prime_spectrum.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* chore(*): rename `filter.inhabited_of_mem_sets` to `nonempty_of_mem_sets` (#1943)
In other names `inhabited` means that we have a `default` element.
* refactor(linear_algebra/multilinear): cleanup of multilinear maps (#1921)
* staging [ci skip]
* staging
* staging
* cleanup norms
* complete currying
* docstrings
* docstrings
* cleanup
* nonterminal simp
* golf
* missing bits for derivatives
* sub_apply
* cleanup
* better docstrings
* remove two files
* reviewer's comments
* use fintype
* line too long
* feat(ring_theory/power_series): several simp lemmas (#1945)
* Small start on generating functions
* Playing with Bernoulli
* Finished sum_bernoulli
* Some updates after PRs
* Analogue for mv_power_series
* Cleanup after merged PRs
* feat(ring_theory/power_series): several simp lemmas
* Remove file that shouldn't be there yet
* Update src/ring_theory/power_series.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Generalise lemma to canonically_ordered_monoid
* Update name
* Fix build
* feat(tactic/lint): Three new linters, update illegal_constants (#1947)
* add three new linters
* fix failing declarations
* restrict and rename illegal_constants linter
* update doc
* update ge_or_gt test
* update mk_nolint
* fix error
* Update scripts/mk_nolint.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Update src/meta/expr.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* clarify unfolds_to_class
* fix names since name is no longer protected
also change one declaration back to instance, since it did not cause a linter failure
* fix errors, move notes to docstrings
* add comments to docstring
* update mk_all.sh
* fix linter errors
* feat(number_theory/bernoulli): Add definition of Bernoulli numbers (#1952)
* Small start on generating functions
* Playing with Bernoulli
* Finished sum_bernoulli
* Some updates after PRs
* Analogue for mv_power_series
* Cleanup after merged PRs
* feat(number_theory/bernoulli): Add definition of Bernoulli numbers
* Remove old file
* Process comments
* feat(topology/algebra/multilinear): define continuous multilinear maps (#1948)
* feat(data/set/intervals): define intervals and prove basic properties (#1949)
* things about intervals
* better documentation
* better file name
* add segment_eq_interval
* better proof for is_measurable_interval
* better import and better proof
* better proof
* refactor(*): migrate from `≠ ∅` to `set.nonempty` (#1954)
* refactor(*): migrate from `≠ ∅` to `set.nonempty`
Sorry for a huge PR but it's easier to do it in one go.
Basically, I got rid of all `≠ ∅` in theorem/def types, then fixed
compile.
I also removed most lemmas about `≠ ∅` from `set/basic` to make sure
that I didn't miss something I should change elsewhere. Should I
restore (some of) them?
* Fix compile of `archive/`
* Drop +1 unneeded argument, thanks @sgouezel.
* Fix build
* Update src/algebraic_geometry/prime_spectrum.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update src/algebraic_geometry/prime_spectrum.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Change I to s, and little fixes
* Update src/algebraic_geometry/prime_spectrum.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Update src/algebraic_geometry/prime_spectrum.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Update src/algebraic_geometry/prime_spectrum.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Update src/algebraic_geometry/prime_spectrum.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Indentation
* Update prime_spectrum.lean
* fix build

2020-02-06 15:25:57 fb160f0
refactor(topology/continuous_on): use filter bases (#1968)

2020-02-06 12:20:38 0e533d0
refactor(topology/basic): rewrite some proofs using filter bases (#1967)

2020-02-06 10:51:04 b4c2ec2
chore(topology/metric_space/basic): simplify `tendsto_nhds` (#1966)
* chore(topology/metric_space/basic): simplify `tendsto_nhds`
No reason to have an extra `∃ n ∈ f`.
* whitespace
Co-Authored-By: Johan Commelin <johan@commelin.net>

2020-02-06 09:12:40 34f9a17
feat(*): a few simple lemmas (#1965)

2020-02-05 20:37:51 8c086a6
chore(tactic/basic,default): add missing tactics (#1962)

2020-02-05 17:46:23 8786ea6
refactor(measure_theory/set_integral): move set integral into namespace set and add some lemmas (#1950)
* move set integral into namespace set and add some lemmas
* Update bochner_integration.lean
* better theorem names
* Update set_integral.lean
* Update set_integral.lean

2020-02-05 14:27:45 08581cc
feat(tactic/rename): Add improved renaming tactic (#1916)
* feat(tactic/rename): Add improved renaming tactic
We add a tactic `rename'` which works like `rename`, with the following
improvements:
* Multiple hypotheses can be renamed at once.
* Renaming always preserve the position of a hypothesis in the context.
* Move private def `drop_until_inclusive` to `list.after`
* Change `rename'` docs to rely less on knowledge of `rename`
* Improve formatting of list.after docs

2020-02-05 13:11:44+01:00 6845aaa
chore(*): bump Lean version to 3.5.1c (#1958)
* chore(leanpkg.toml): bump lean version to 3.5.0
* update CI to build with 3.5.0
* update mergify
* update contribute docs
* update deploy_nightly.sh
* 3.5.0 -> 3.5.1

2020-02-05 06:25:59 dd8da51
refactor(*): migrate from `≠ ∅` to `set.nonempty` (#1954)
* refactor(*): migrate from `≠ ∅` to `set.nonempty`
Sorry for a huge PR but it's easier to do it in one go.
Basically, I got rid of all `≠ ∅` in theorem/def types, then fixed
compile.
I also removed most lemmas about `≠ ∅` from `set/basic` to make sure
that I didn't miss something I should change elsewhere. Should I
restore (some of) them?
* Fix compile of `archive/`
* Drop +1 unneeded argument, thanks @sgouezel.

2020-02-04 22:11:27 253f75c
feat(data/set/intervals): define intervals and prove basic properties (#1949)
* things about intervals
* better documentation
* better file name
* add segment_eq_interval
* better proof for is_measurable_interval
* better import and better proof
* better proof

2020-02-04 19:56:41 475a669
feat(topology/algebra/multilinear): define continuous multilinear maps (#1948)

2020-02-04 14:32:21 9dbc894
feat(number_theory/bernoulli): Add definition of Bernoulli numbers (#1952)
* Small start on generating functions
* Playing with Bernoulli
* Finished sum_bernoulli
* Some updates after PRs
* Analogue for mv_power_series
* Cleanup after merged PRs
* feat(number_theory/bernoulli): Add definition of Bernoulli numbers
* Remove old file
* Process comments

2020-02-04 12:42:22 c5febb5
feat(tactic/lint): Three new linters, update illegal_constants (#1947)
* add three new linters
* fix failing declarations
* restrict and rename illegal_constants linter
* update doc
* update ge_or_gt test
* update mk_nolint
* fix error
* Update scripts/mk_nolint.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Update src/meta/expr.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* clarify unfolds_to_class
* fix names since name is no longer protected
also change one declaration back to instance, since it did not cause a linter failure
* fix errors, move notes to docstrings
* add comments to docstring
* update mk_all.sh
* fix linter errors

2020-02-03 13:52:06 bfa7055
feat(ring_theory/power_series): several simp lemmas (#1945)
* Small start on generating functions
* Playing with Bernoulli
* Finished sum_bernoulli
* Some updates after PRs
* Analogue for mv_power_series
* Cleanup after merged PRs
* feat(ring_theory/power_series): several simp lemmas
* Remove file that shouldn't be there yet
* Update src/ring_theory/power_series.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Generalise lemma to canonically_ordered_monoid
* Update name
* Fix build

2020-02-03 11:26:46 6264667
refactor(linear_algebra/multilinear): cleanup of multilinear maps (#1921)
* staging [ci skip]
* staging
* staging
* cleanup norms
* complete currying
* docstrings
* docstrings
* cleanup
* nonterminal simp
* golf
* missing bits for derivatives
* sub_apply
* cleanup
* better docstrings
* remove two files
* reviewer's comments
* use fintype
* line too long

2020-02-03 09:55:20 59629da
chore(*): rename `filter.inhabited_of_mem_sets` to `nonempty_of_mem_sets` (#1943)
In other names `inhabited` means that we have a `default` element.

2020-02-03 07:14:34 a342132
refactor(topology/metric_space/emetric_space): redefine `diam` (#1941)
* feat(data/set/basic): define `set.subsingleton`
Also rename `nonempty.of_subset` to `nonempty.mono`
* Add a missing lemma
* refactor(topology/metric_space/emetric_space): redefine `diam`
* Give a more readable definition of `emetric.diam`;
* Add a few lemmas including diameter of a pair and of a triple of
  points;
* Simplify some proofs;
* Reformulate some theorems to use `∀ (x ∈ s) (y ∈ s)` instead
  of `∀ x y ∈ s` because the former plays better with existing `simp`
  lemmas.
* Redefine `set.subsingleton` using `(x ∈ s) (y ∈ s)`, prove `metric.diam_triangle`

2020-02-02 12:18:31 1843bfc
feat(algebra/pointwise): pointwise scalar-multiplication lemmas (#1925)
* feat(algebra/pointwise): more lemmas about scaling sets
- rename `smul_set` to `scale_set` for disambiguation
- define `scale_set_action`, which subsumes `one_smul_set`
- additional lemmas lemmas
* fix(analysis/convex): refactor proofs for `scale_set`
* feat(algebra/pointwise): re-organise file
- subsume `pointwise_mul_action`
* feat(algebra/pointwise): remove `pointwise_mul_action`
- subsumed by `smul_set_action` with left-regular action.

2020-02-02 10:49:49 58899d4
feat(data/set/basic): define `set.subsingleton` (#1939)
* feat(data/set/basic): define `set.subsingleton`
Also rename `nonempty.of_subset` to `nonempty.mono`
* Add a missing lemma

2020-02-02 01:12:16 bacd4da
chore(data/subtype): fix `∀` vs `Π` (#1940)

2020-02-01 23:40:10 11b9497
feat(data/fintype): range_prod_eq_univ_prod (#1937)
* feat(algebra/big_operators): range_prod_eq_univ_prod
* fix build, part 1
* fix build, part 2
* fix build, part 3
* Fix build, part 4

2020-02-01 18:15:45 6e6e6da
feat(data/nat/basic): two identities for `choose` (#1936)
* feat(data/nat/basic): two identities for `choose`
* fix build

2020-02-01 16:26:13 a500c24
Update units.lean (#1938)

2020-02-01 10:59:44 50bbb8d
fix(data/nat/basic): make arguments to `choose_succ_right_eq` explicit (#1935)

2020-01-31 17:07:56 5ce0c0a
feat(linear_algebra/matrix): Add proof that trace AB = trace BA, for matrices. (#1913)
* feat(linear_algebra/matrix): trace AB = trace BA
* Remove now-redundant matrix.smul_sum
In a striking coincidence,
  https://github.com/leanprover-community/mathlib/pull/1910
was merged almost immediately before
  https://github.com/leanprover-community/mathlib/pull/1883
thus rendering matrix.smul_sum redundant.
* Make arguments explicit for matrix.trace, matrix.diag
* Tidy up whitespace
* Remove now-redundant type ascriptions
* Update src/linear_algebra/matrix.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Feedback from code review
* Generalize diag_transpose, trace_transpose.
With apologies to the CI for triggering another build :-/
* Explicit arguments trace, diag defs but not lemmas

2020-01-31 14:13:56+01:00 ddba2ae
chore(scripts/nolints): regenerate

2020-01-31 12:11:16 a8ba81b
feat(analysis/convex): define convex hull (#1915)
* feat(analysis/convex): define convex hull
fixes #1851
* Fix compile
* Drop an unused argument
* Split line
* Rename some `_iff`s, drop others
* Mention `std_simplex` in the docs
* More docs
* Rename `α` to `ι`, other small fixes
* Use `range` instead of `f '' univ`
* More docs

2020-01-30 15:28:23-08:00 cae9cc9
chore(ci): remove unused olean-rs setup from build (#1932)

2020-01-30 18:49:20 80f5bd5
feat(ci): build and push html documentation (#1927)
* feat(ci): build and push html doc generation
* fix(scripts/deploy_docs): change from temporary doc repo
* chore(ci): re-enable check for deployment
* fix git add
* Update scripts/deploy_docs.sh
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* Update .github/workflows/build.yml
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* Update scripts/deploy_docs.sh
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* Update scripts/deploy_docs.sh
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* remove chmod line
* revert additional check for testing purposes
* is this the error?
Try a test build before I get to the office
* rmeove _test
* reapply author attribution change
* revert change for testing
* missing --
* revert email and name config

2020-01-30 17:24:56 4c2d678
fix(data/set/finite): finite.fintype is a def (#1931)

2020-01-30 15:16:25 b7e5f75
fix(tactic/scc): detect Props (#1930)
* fix(tactic/scc): detect Props
* test(test/tactics): add test

2020-01-30 13:41:06 1bd23bf
feat(tactic/use): apply exists_prop after use (#1882)
* feat(tactic/use): apply exists_prop after use
* change implementation

2020-01-30 11:13:26 dcbc719
fix(tactic/squeeze): compatibility with `simp [<-...]` (#1923)
* Add polyfills to `squeeze_simp` which should ensure compatibility with Lean 3.4 and 3.5
* Use `decode_simp_arg_list` so `squeeze_simp` doesn't have to pattern-match
(Except of course for the polyfill `has_to_tactic_format simp_arg_type` instance...)
* Reword comment for `erase_simp_args`

2020-01-30 08:20:49 9bc0178
fix(tactic/finish): fix one classical leak, document another (#1929)
* fix(tactic/finish): fix one classical leak, document another
* fix(src/tactic): deprecate intuitionistic versions in docstrings. Closes #1927.

2020-01-30 00:09:21 868333b
feat(data/W): show finitely branching W types are encodable (#1817)
* feat(data/equiv,data/fintype): an encodable fintype is equiv to a fin
* feat(data/W): finitely branching W types are encodable
* feat(archive/examples/prop_encodable): show a type of propositional formulas is encodable
* fix(data/W): remove unused type class argument
* fix(data/equiv): add two docstrings
* fix(*): multiple fixes from code review

2020-01-29 18:36:33 4ac87ab
chore(category_theory): use the new @[ext] attribute on structures (#1663)
* chore(category_theory): use the new @[ext] attribute on structures
* fixes
* unnecessary repeated exts

2020-01-29 17:00:12 4aa3eee
chore(*): add inhabited instances (#1898)
* chore(*): add inhabited instances
* Fix linting errors.

2020-01-28 21:32:29+01:00 b368312
fix(ci): set GITHUB_TOKEN environment variable for gothub (#1920)

2020-01-28 20:04:21+01:00 99962ad
fix(ci): unshallow repo before pushing nightly tags (#1919)

2020-01-28 18:53:21 a948e31
chore(analysis/convex): move to `analysis/convex/basic` (#1918)

2020-01-28 18:27:54+01:00 e36d7ec
fix(ci): work around github hack

2020-01-28 16:36:42+01:00 8e0d47a
fix(ci): try again to fix authentication

2020-01-28 14:09:28+01:00 75743ac
fix(scripts/deploy_nightly.sh): try to fix CI (#1917)

2020-01-28 11:49:19 cafd193
chore(*): use filter.eventually (#1897)
* chore(*): use filter.eventually
* Update src/measure_theory/integration.lean
Co-Authored-By: Yury G. Kudryashov <urkud@ya.ru>
* Fix closeds.complete_space.
* Fix tendsto_integral_of_dominated_convergence
* Fix tendsto_exp_at_top
* Fix exists_norm_eq_infi_of_complete_convex
* Use obtain.
* Use filter.eventually_of_forall

2020-01-27 20:50:19 bba8473
feat(linear_algebra): Matrix inverses for square nonsingular matrices (#1816)
* Prove that some matrices have inverses
* Finish the proof: show that the determinant is 0 if a column is repeated
* Show that nonsingular_inv is also a right inverse
* Cleanup and code movement
* Small lemmata on transpose
* WIP: some work on inverse matrices
* Code cleanup and documentation
* More cleanup and documentation
* Generalize det_zero_of_column_eq to remove the linear order assumption
* Fix linting issues.
* Unneeded import can be removed
* A little bit more cleanup
* Generalize nonsing_inv to any ring with inverse
* Improve comments for `nonsingular_inverse`
* Remove the less general `det_zero_of_column_eq_of_char_ne_two` proof
* Rename `cramer_map_val` -> `cramer_map_def`
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* whitespace
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* whitespace: indent tactic proofs
* More renaming `cramer_map_val` -> `cramer_map_def`
* `swap_mul_self_mul` can be a `simp` lemma
* Make parameter σ to `swap_mul_eq_iff` implicit
* Update usage of `function.update_same` and `function.update_noteq`
* Replace `det_permute` with `det_permutation`
Although the statement now gives the determinant of a permutation matrix,
the proof is easier if we write it as a permuted identity matrix.
Thus the proof is basically the same, except a different line showing that the
entries are the same.
* Re-introduce `matrix.det_permute` (now based on `matrix.det_permutation`)
* Delete `cramer_at` and clean up the proofs depending on it
* Replace `cramer_map` with `cramer` after defining `cramer`
* Apply suggestions from code review
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Clean up imports
* Formatting: move } to previous lines
* Move assumptions of `det_zero_of_repeated_column` from variable to argument
* whitespace
Insert space between `finset.filter` and the filter condition.
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Improve docstrings
* Make argument to `prod_cancels_of_partition_cancels` explicit
* Rename `replace_column` and `replace_row` to `update_column` and `update_row`
* Replace `update_column_eq` with `update_column_self` + rewriting step
* whitespace
Newlines between all lemmas
* whitespace
Newline before 'begin'
* Fix conflicts with latest mathlib
* Remove unnecessary explicitification of arguments

2020-01-27 16:29:02 5f01591
fix(.github/workflows/build): set pipefail (#1911)
Without `pipefail`, the shell command `false | cat` terminates
successfully.

2020-01-27 14:52:05 898cd70
fix(archive/cubing_a_cube): roof broken by #1903 (#1912)

2020-01-26 21:08:12 497e692
feat(linear_algebra/matrix): define the trace of a square matrix (#1883)
* feat(linear_algebra/matrix): define the trace of a square matrix
* Move ring carrier to correct universe
* Add lemma trace_one, and define diag as linear map
* Define diag and trace solely as linear functions
* Diag and trace for module-valued matrices
* Fix cyclic import
* Rename matrix.mul_sum' --> matrix.smul_sum
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Trigger CI

2020-01-26 19:37:06 587b312
refactor(order/filter/basic): redefine `filter.pure` (#1889)
* refactor(order/filter/basic): redefine `filter.pure`
New definition has `s ∈ pure a` definitionally equal to `a ∈ s`.
* Update src/order/filter/basic.lean
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* Minor fixes suggested by @gebner
* Fix compile
* Update src/order/filter/basic.lean

2020-01-26 15:54:48 ce2e7a8
feat(linear_algebra/multilinear): image of sum (#1908)
* staging
* fix build
* linting
* staging
* docstring

2020-01-26 13:49:29 ab155ef
refactor(*): refactor `sum_smul`/`smul_sum` (#1910)
* refactor(*): refactor `sum_smul`/`smul_sum`
API changes:
* Define both versions for `list, `multiset`, and `finset`;
* new `finset.smul_sum` is the old `finset.smul_sum` or `_root_.sum_smul.symm``
* new `finset.sum_smul` is the old `finset.smul_sum'`
* new `smul_smul` doesn't need a `Type` argument
* some lemmas are generalized to a `semimodule` or a `distrib_mul_action`
* Fix compile

2020-01-26 03:58:09 2297d20
feat(tactic/clear): add clear' tactic (#1899)
* feat(tactic/clear): add clear' tactic
We add an improved version of the `clear` tactic. When clearing multiple
hypotheses, `clear` can fail even though all hypotheses could be
cleared. This happens when the hypotheses depend on each other and are
given in the wrong order:
```lean
example : ∀ {α : Type} {β : α → Type} (a : α) (b : β a), unit :=
  begin
    intros α β a b,
    clear a b, -- fails
    exact ()
  end
```
When `clear` tries to clear `a`, `b`, which depends on `a`, is still in the
context, so the operation fails. We give a tactic `clear'` which
recognises this and clears `b` before `a`.
* refactor(tactic/clear): better implementation of clear'
We refactor `clear'`, replacing the old implementation with one that is
more concise and should be faster. The new implementation strategy also
gives us a new variant of `clear`, `clear_dependent`, almost for free.
`clear_dependent` works like `clear'`, but in addition to the given
hypotheses, it also clears any other hypotheses which depend on them.
* style(test/tactics, docs/tactics): less indentation
* test(test/tactics): better tests for clear' and clear_dependent
We make the tests for `clear'` and `clear_dependent` more meaningful:
They now permit less illegal behaviours.
* refactor(tactic/clear): simplify error message formatting

2020-01-26 01:12:21 9decec2
feat(*): some simple lemmas about sets and finite sets (#1903)
* feat(*): some simple lemmas about sets and finite sets
* More lemmas, simplify proofs
* Introduce `finsup.nonempty` and use it.
* Update src/algebra/big_operators.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Revert "Update src/algebra/big_operators.lean"
This reverts commit 17c89a808545203dc5a80a4f11df4f62e949df8d. It
breaks compile if we rewrite right to left.
* simp, to_additive
* Add a missing docstring

2020-01-25 23:45:34 d3e5621
feat(data/real/ereal): add `ereal` := [-oo,oo] (#1703)
* feat(data/real/ereal): add `ereal` := [-oo,oo]
* some updates
* some cleanup in ereal
* move pattern attribute
* works
* more docstring
* don't understand why this file was broken
* more tidyup
* deducing complete lattice from type class inference
* another neg theorem
* adding some module doc
* tinkering
* deriving addition

2020-01-25 21:18:30 d4aa088
fix(scripts/deploy_nightly): fill in blank env vars (#1909)
* fix(scripts/deploy_nightly): fill in blank env vars
* fix: LEAN_VERSION="lean-3.4.2"

2020-01-25 14:01:56 7077242
doc (analysis/normed_space/operator_norm): cleanup (#1906)
* doc (analysis/normed_space/operator_norm): cleanup
* typo

2020-01-25 12:31:17 8c9a15e
feat(topology/instances/ennreal): continuity of multiplication by const (#1905)
* feat(topology/instances/ennreal): continuity of multiplication by const
* Fix compile

2020-01-25 10:51:17 20f153a
fix(scripts/deploy_nightly): token is now just the PAT, need to add user (#1907)

2020-01-25 08:42:04 3bbf8eb
feat(data/real/nnreal): a few lemmas about subtraction (#1904)

2020-01-24 23:34:43 3b9ee8e
doc(geometry/manifold): fix markdown (#1901)
* doc(geometry/manifold): fix markdown
* Update src/geometry/manifold/manifold.lean
* Update src/geometry/manifold/manifold.lean
* Update src/geometry/manifold/manifold.lean
* Update src/geometry/manifold/manifold.lean

2020-01-24 21:56:45+01:00 d075695
fix(build): typo in deploy_nightly script name (#1902)

2020-01-24 20:01:58+01:00 2db02b8
feat(.github): switch to github actions for ci (#1893)

2020-01-24 12:07:12 601d5b1
feat(tactic/simp_rw): add `simp_rw` tactic, a mix of `simp` and `rw` (#1900)
* add `simp_rw` tactic that is a mix of `simp` and `rw`
* Style fixes
* Module documentation for the file `tactic/simp_rw.lean`
* Apply suggestions to improve documentation of `simp_rw`
* Documentation and tests for `simp_rw [...] at ...`

2020-01-24 09:09:29 69099f0
feat(order/filter/bases): define `filter.has_basis` (#1896)
* feat(*): assorted simple lemmas, simplify some proofs
* feat(order/filter/bases): define `filter.has_basis`
* Add `@[nolint]`
* +1 lemma, +1 simplified proof
* Remove whitespaces
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Ref. note nolint_ge

2020-01-24 00:47:07 aad853b
docs(data/mv_polynomial): add module docstring [ci skip] (#1892)
* adding docstring
* fix markdown
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* fix markdown
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* variables have type sigma
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* don't tell the reader about the interface
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* consistent conventions for monomial
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* variables are terms of type sigma
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* Update src/data/mv_polynomial.lean
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* Update src/data/mv_polynomial.lean
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* version 2
* one last tinker
* removing $ signs
* next attempt
* Update src/data/mv_polynomial.lean
* Update src/data/mv_polynomial.lean
* Update src/data/mv_polynomial.lean

2020-01-22 20:10:27 b686bc2
feat(algebra/lie_algebra): define Lie subalgebras, morphisms, modules, submodules, quotients (#1835)
* feat(algebra/lie_algebra): define Lie subalgebras, morphisms, modules, submodules, quotients
* Code review: colons at end of line
* Update src/algebra/lie_algebra.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/algebra/lie_algebra.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/algebra/lie_algebra.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Catch up after GH commits from code review
* Remove accidentally-included '#lint'
* Rename: lie_subalgebra.bracket --> lie_subalgebra.lie_mem
* Lie ideals are subalgebras
* Add missing doc string
* Update src/algebra/lie_algebra.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Allow quotients of lie_modules by lie_submodules (part 1)
The missing piece is the construction of a lie_module structure on
the quotient by a lie_submodule, i.e.,:
`instance lie_quotient_lie_module : lie_module R L N.quotient := ...`
I will add this in due course.
* Code review: minor fixes
* New lie_module approach based on add_action, linear_action
* Remove add_action by merging into linear_action.
I would prefer to keep add_action, and especially like to keep the feature
that linear_action extends has_scalar, but unfortunately this is not
possible with the current typeclass resolution algorithm since we should
never extend a class with fewer carrier types.
* Add missing doc string
* Simplify Lie algebra adjoing action definitions
* whitespace tweaks
* Remove redundant explicit type
* Update src/algebra/lie_algebra.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/algebra/lie_algebra.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/algebra/lie_algebra.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/algebra/lie_algebra.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Catch up after rename bracket --> map_lie in morphism
* Update src/linear_algebra/linear_action.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/linear_algebra/linear_action.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/linear_algebra/linear_action.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/linear_algebra/linear_action.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/linear_algebra/linear_action.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/linear_algebra/linear_action.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/linear_algebra/linear_action.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/linear_algebra/linear_action.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/linear_algebra/linear_action.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>

2020-01-22 00:57:34 96ee2a6
feat(order/filter/basic): prove `@cofinite ℕ = at_top` (#1888)
* feat(order/filter/basic): prove `@cofinite ℕ = at_top`
Also generalize `not_injective_(nat/int)_fintype`, and use `[infinite
α]` instead of `set.infinite (@univ α)` as an argument.
* Update src/data/equiv/basic.lean
Co-Authored-By: Gabriel Ebner <gebner@gebner.org>
* Drop a duplicate definition, thanks @ChrisHughes24

2020-01-21 21:29:04 aa6cc06
feat(measure_theory/set_integral): integrals over subsets (#1875)
* feat(measure_theory/set_integral): integral on a set
* mismached variables
* move if_preimage
* Update src/measure_theory/l1_space.lean
Co-Authored-By: Yury G. Kudryashov <urkud@ya.ru>
* Small fixes
* Put indicator_function into data folder
* Use antimono as names
* Change name to antimono
* Fix everything
* Use binder notation for integrals
* delete an extra space
* Update set_integral.lean
* adjust implicit and explicit variables
* measurable_on_singleton
* prove integral_on_Union
* Update indicator_function.lean
* Update set_integral.lean
* lint
* Update bochner_integration.lean
* reviewer's comment
* use Yury's proof

2020-01-21 18:58:28 217b5e7
refactor(algebra/char_zero): use `function.injective` (#1894)
No need to require `↔` in the definition.

2020-01-21 09:56:58 f3835fa
feat(*): assorted simple lemmas, simplify some proofs (#1895)
* feat(*): assorted simple lemmas, simplify some proofs
* +1 lemma, +1 simplified proof

2020-01-18 08:16:09 d32c797
feat(data/bool): coe_bool_iff (#1891)

2020-01-18 05:20:13 d548d92
chore(ring_theory/polynomial): remove decidable_eq assumptions (#1890)

2020-01-17 18:46:09 c8ae79d
feat(measure_theory/bochner_integration): dominated convergence theorem for filters (#1884)
* Dominated convergence theorem for filters
* Update bases.lean
* Update bochner_integration.lean
* reviewer's comments

2020-01-17 03:02:01 9ac26cb
feat(geometry/manifold/mfderiv): derivative of functions between smooth manifolds (#1872)
* feat(geometry/manifold/mfderiv): derivative of functions between smooth manifolds
* Update src/geometry/manifold/mfderiv.lean
Co-Authored-By: Yury G. Kudryashov <urkud@ya.ru>
* more details in docstrings [ci skip]
* fix docstrings [ci skip]
* reviewer's comments

2020-01-16 11:40:38 4f81942
feat(logic/basic): forall_or_distrib (#1887)

2020-01-16 10:23:06 58610ff
chore(order/filter/*): use `s ∈ f` instead of `s ∈ f.sets` (#1885)
Other changes:
* compose old `mem_infi` and `mem_binfi` with `mem_Union` and
  `mem_bUnion_iff` to avoid `.sets` and simplify usage (it was
  `rw [mem_infi, mem_Union]` every time)
* drop `lift_sets_eq` and `mem_lift_iff` in favor of `mem_lift_sets`

2020-01-16 08:11:17 05457fd
feat(analysis/calculus/tangent_cone): define and use `tangent_cone_congr` (#1886)
* feat(analysis/calculus/tangent_cone): define and use `tangent_cone_congr`
This way some proofs become shorter and hopefully more readable.
* Add a docstring

2020-01-15 15:04:46 b3ed6e6
chore(*): use `ne_` instead of `neq_` in lemma names (#1878)
One exception: `mem_sets_of_neq_bot` is now `mem_sets_of_eq_bot`
because it has an equality as an assumption.
Also add `filter.infi_ne_bot_(iff_?)of_directed'` with a different
`nonempty` assumption, and use it to simplify the proof of
`lift_ne_bot_iff`.

2020-01-15 10:13:40 8e70388
docs(README): add new maintainers (#1881)

2020-01-15 09:15:30 d614736
feat(linear_algebra/tensor_product): tensor product right identity (#1880)
* feat(linear_algebra/tensor_product): tensor product right identity
* Golf proof of tensor_product.rid
* Add missing docstrings

2020-01-15 07:24:37 819939f
refactor(order/lattice): generalize `directed_of_mono` (#1879)
It suffices to have `semilattice_sup`, not `decidable_linear_order`.
Also add `directed_of_antimono`.

2020-01-14 16:00:47 9f7ae9a
chore(data/set/lattice): use `∃ x ∈ s` instead of `∃ x, x ∈ s ∧` in `mem_bUnion_iff` (#1877)
This seems to be more in line with the rest of the library

2020-01-14 14:20:21 416b7d8
fix doc strings (#1876)

2020-01-14 06:33:00 e095e30
feat(analysis/ODE/gronwall): A version of Grönwall's inequality (#1846)
* feat(analysis/ODE/gronwall): A version of Gronwall's inequality
+ uniqueness of solutions of an ODE with a Lipschitz continuous RHS
* Consistently use ö in Grönwall
* Fix a typo
* Fix docs, drop assumption `0 < K`, add a version for functions `ℝ → ℝ`.
* Fix docs
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Fix docs

2020-01-12 06:48:46 c5d91bc
feat(topology/algebra/ordered): add order topology for partial orders… (#1276)
* feat(topology/algebra/ordered): doc, add convergence in ordered groups criterion
* docstring
* reviewer's comments

2020-01-11 14:51:07 25dded2
chore(measure_theory/bochner_integration): make proofs shorter (#1871)
* More consistent use of the dot notation
* Revert "More consistent use of the dot notation"
This reverts commit 854a499a9be105b42ca486eb25593a2379b07404.
* Revert "Revert "More consistent use of the dot notation""
This reverts commit 57aaf22695c031fc8dcc581110cc9d1ac397f695.
* fix things

2020-01-11 00:42:53 f67df78
chore(algebra/module): add some missing `*_cast` tags (#1863)

2020-01-10 01:05:49 ff2a41e
refactor(docs): additions, modifications, reorganization (#1815)
* move cc.md to tactics.md
* change h3 to h2
* remove h3
* update simp.md headers
* updates to casts.md
* update holes.md
* update docstrings
* add commands.md
* hole commands in emacs
* reference library_search from find
* delete casts.md
* minor updates
* minor fixes
* more minor fixes
* fix header level
* updating mathlib-overview and removing a bunch of useless  files

2020-01-09 22:58:55 baa3aa7
refactor(data/set/basic): change def of `⊂` to match `<` (#1862)

2020-01-09 21:23:09 d7cebcf
feat(linear_algebra/multilinear): basics of multilinear maps (#1814)
* multilinear maps
* progress
* isomorphisms
* Update src/logic/function.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* better docstring
* variable module
* dep cons
* make everything dependent
* remove print statement
* fix build
* Update src/linear_algebra/multilinear.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Update src/linear_algebra/multilinear.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* fixes
* docstrings
* reviewer's comments
* cleanup

2020-01-09 04:14:44 39c10cd
docs(tactic/tauto): elaborate tauto docs [ci skip] (#1869)

2020-01-09 02:47:17 5289994
feat(analysis/calculus/mean_value): add generalized "fencing" inequality (#1838)
* feat(analysis/calculus/mean_value): add generalized "fencing" inequality
This version can be used to deduce, e.g., Gronwall inequality as well
as its generalized version that deals with approximate solutions.
* Adjust to merged branches, use `liminf` instead of `limsup`, add more variations
* Go through dim-1 liminf estimates
* Fix: use `b ∈ Ioc a c` as a hypothesis for `I??_mem_nhds_within_Iio`
* Update src/analysis/calculus/mean_value.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Drop `Prop`-valued `variables`, add some docs
* More docstrings
* Drop `Prop`-valued `variables`, drop assumption `x ∉ s`.

2020-01-08 20:16:58 9afc6f2
docs(tactics): tautology (#1860)
* added a short description of the tautology tactic
* added a short description of the tautology tactic
* Update docs/tactics.md
Co-Authored-By: Johan Commelin <johan@commelin.net>

2020-01-08 13:16:54 92841c2
refactor(analysis/asymptotics): introduce `is_O_with` (#1857)
* refactor(analysis/asymptotics): introduce `is_O_with`
I use it to factor out common parts of the proofs of facts about
`is_O` and `is_o`. It can also be used with `principal s` filter to
operate with `∀ x ∈ s, ∥f x∥ ≤ C * ∥g x∥` is a manner similar to `is_O`.
* lint
* Fix compile
* Drop `(s)mul_same` lemmas.
It's easy to use `(s)mul_is_O (is_O_refl _ _)` or `(is_O_refl _
_).mul_is_o _` instead
* docs: say explicitly that `is_O` is better than `is_O_with`

2020-01-07 00:44:17 69e07e2
chore(order/zorn): add docstrings, drop `chain.directed` (#1861)
`chain.directed_on` is almost the same and uses a named predicate.

2020-01-06 23:48:35 a1b7312
feat(topology/maps): a few lemmas about `is_open_map` (#1855)
* feat(topology/maps): a few lemmas about `is_open_map`
Also fix arguments order in all `*.comp` in this file.
* Use restricted version of `continuous_of_left_inverse` to prove non-restricted
* Fix compile by reverting a name change

2020-01-06 03:49:33 15c434a
chore(*): various simple lemmas about `*_equiv`, add missing attrs (#1854)
* chore(*): various simple lemmas about `*_equiv`, add missing attrs
* Fix compile of `ring_theory/localization`

2020-01-05 21:25:17 63670b5
feat(data/real/nnreal): add a few simple lemmas (#1856)

2020-01-04 15:28:27 585e107
feat(topology/algebra/module): continuous linear equiv (#1839)
* feat(topology/algebra/module): continuous linear equiv
* linting
* reviewer's comments

2020-01-02 22:16:08 5c3606d
feat(order/filter/basic): define `filter.eventually` and `filter.frequently` (#1845)
* feat(order/filter/basic): define `filter.eventually` and `filter.frequently`
As suggested in #119
* More lemmas, use notation
* Fix a typo
* Update src/order/filter/basic.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/order/filter/basic.lean
* Add a short file docstring
* Update src/order/filter/basic.lean

2020-01-02 19:10:24 840bd1f
feat(analysis/calculus/deriv): add aliases for `const op f` and `f op const` (#1843)
* feat(analysis/calculus/deriv): add aliases for `const op f` and `f op const`
Often this leads to simpler answers.
* Docs
* Fix compile of `mean_value.lean`
* Drop comments, use `open_locale classical`

2020-01-02 18:35:24 7b18bbf
feat(topology/algebra/ordered): add `*_mem_nhds_within_Ioi`, reorder args of `is_closed.Icc_subset_of_forall_exists_gt` (#1844)

2020-01-02 10:40:36 033ecbf
chore(topology/*): add a few more trivial `continuous_(within_)at` lemmas (#1842)

2020-01-02 09:04:12 ffa9785
feat(topology/algebra/ordered): prove that `nhds_within (Ioi a) b ≠ ⊥` if `a ≤ b` (#1841)
+ few similar statements
Also drop decidability assumption in `closure_Ioo` etc. We don't care
about using classical reasoning anyway, and usage of `classical.DLO`
here doesn't lead to any `noncomputable` defs.

2020-01-01 22:13:19 d08d509
fix(metric_space/gromo_hausdorff): lemma should be instance + linting (#1840)

2019-12-29 08:52:23 acf2038
feat(analysis/calculus/mean_value): more corollaries of the MVT (#1819)
* feat(analysis/calculus/mean_value): more corolaries of the MVT
* Fix compile, add "strict inequalities" versions of some theorems, add docs
* Update src/analysis/calculus/mean_value.lean
* Add theorems for `convex_on univ`
* Fix comments
* @sgouezel adds missing articles
Thanks a lot! We don't have them in Russian, so it's hard for me to put them right.
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update src/analysis/calculus/mean_value.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Add more `univ` versions

2019-12-28 20:31:03 64770a8
feat(analysis/calculus/deriv): Prove equivalence of Fréchet derivative and the classical definition (#1834)
* feat(analysis/calculus/deriv): Prove equivalence of Fréchet derivative and the classical definition
* Fix a typo
* Move, change doc, add versions for `has_deriv_within_at` and `has_deriv_at`.
* Fix docstring, remove an unsed argument

2019-12-28 13:01:45 e43905b
refactor(topology/algebra/ordered): formulate a few "Icc induction" principles (#1833)
* refactor(topology/algebra/ordered): use `tfae`, prove equality of some `nhds_within`
* Add missing `order_dual.*` instances
* Try to fix the build
* Fix formatting, rename some variables
* refactor(topology/algebra/ordered): formulate a few "Icc induction" principles
They have other applications than proving `is_connected_Icc`.
* Fix doc
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Rephraze docs
* Drop an unused argument

2019-12-28 11:42:42 a6a8a11
refactor(data/equiv/encodable): bring `directed.sequence*` from `integration`, use `quotient.rep` instead of `quot.rep` (#1825)
* refactor(data/equiv/encodable): bring `directed.sequence*` from `integration`, use `quotient.rep` instead of `quot.rep`
`sequence_of_directed` in `measure_theory/integration` did not belong
there.
Also add some docstrings.
* doc/style fixes by @sgouezel
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Remove an unused argument, add a docstring
* Completely remove the `reflexive r` assumption

2019-12-28 10:05:30 340fa14
feat(analysis/specific_limits): add a few more limits (#1832)
* feat(analysis/specific_limits): add a few more limits
* Drop 1 lemma, generalize two others.
* Rename `tendsto_inverse_at_top_nhds_0`, fix compile

2019-12-27 20:26:09 0a9a1ff
refactor(topology/algebra/ordered): use `tfae`, prove equality of some `nhds_within` (#1831)
* refactor(topology/algebra/ordered): use `tfae`, prove equality of some `nhds_within`
* Add missing `order_dual.*` instances
* Try to fix the build
* Fix formatting, rename some variables
* Fix compile

2019-12-27 18:11:30 82ca731
refactor(calculus): simplify derivative extension (#1826)
* refactor(calculus): simplify derivative extension
* generalize continuous_within_at.closure_le
* Simplify proof following Sébastien
* Update src/analysis/calculus/extend_deriv.lean

2019-12-27 15:35:17 3a78f49
feat(order/basic): add `dual_le` and `dual_lt` lemmas (#1830)

2019-12-27 14:05:28 c9a81b0
refactor(*): unify API of `list/multiset/finset.prod_hom` (#1820)
* refactor(*): unify API of `list/multiset/finset.prod_hom`
Also remove `is_group_hom.map_prod`; use `*.prod_hom.symm` or
`monoid_hom.map_*prod` instead.
* Update src/ring_theory/ideal_operations.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Restore explicit args of `list.fold(l/r)_hom`
* Fix `group_theory/perm/sign`
* Fix `quadratic_reciprocity`
* Fix compile

2019-12-27 12:40:25 0a87dd8
feat(topology/basic): a few simple lemmas (#1829)
* feat(topology/basic): a few simple lemmas
* Fix compile

2019-12-27 11:08:24 89854fa
refactor(analysis/calculus/deriv): Use equality of functions (#1818)
* refactor(analysis/calculus/deriv): Use equality of functions
This way we can rewrite, e.g., in `deriv (deriv sin)`.
* Restore some old lemmas
* Restore old `deriv_cos`, fix `deriv_id'`
* Update src/analysis/calculus/deriv.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Fix compile

2019-12-27 09:41:58 c1a993d
feat(data/set/intervals): unions of adjacent intervals (#1827)

2019-12-26 16:34:12 7e2d4b8
feat(analysis/calculus/extend_deriv): extend differentiability to the boundary (#1794)
* feat(analysis/calculus/extend_deriv): extend differentiability to the boundary
* fix build

2019-12-24 05:40:16 9a9f617
fix(topology/algebra/infinite_sum): add a hint to speed up elaboration (#1824)
Fix suggested by Joe on Zulip.

2019-12-23 23:32:58 64921a4
refactor(topology/*): migrate to `uniform_space.complete_of_convergent_controlled_sequences` (#1821)
* refactor(topology/*): migrate to `uniform_space.complete_of_convergent_controlled_sequences`
Also rewrite
`uniform_space.complete_of_convergent_controlled_sequences` in terms
of `has_countable_basis`, and add a lemma useful to prove
`l = ⨅ i, f i` for filters.
* Revert some implicit/explicit argument changes
No reason to have them, at least in this PR
* Fix docstrings
* Fix a docstring
* Fix imports
* `cau_seq_filter`: change namespaces, adjust `hensel`
* Fix compile
* Update src/topology/metric_space/cau_seq_filter.lean
* Update src/topology/uniform_space/cauchy.lean

2019-12-23 22:13:46 439ac4e
feat(analysis/calculus/local_extr): Fermat's Theorem, Rolle's Theorem, Lagrange's MVT, Cauchy's MVT (#1807)
* feat(analysis/calculus/local_extr): Rolle's Theorem, Lagrange's MVT, Cauchy's MVT
* feat(order/filter/extr,topology/algebra/local_extr): local min/max points
This commit contains facts that do not require smooth structure on the domain.
* Rewrite: introduce `is_min_filter`, `pos_tangent_cone_at`.
* Fix compile, move code around
* Drop a TODO, add some docs
* Fix compile
* Fix a typo
* Fix #lint error
* Add some docstrings
* Add some missing lemmas
* Use `differentiable_on`
* Add/rewrite file-level docs, rename some lemmas.
* Update src/analysis/calculus/local_extr.lean
* Update src/order/filter/extr.lean
* Fix a docstring, add Wiki links
* Add refs and tags
* File docstring: provide Lean names of the main lemmas.
* Update src/analysis/calculus/local_extr.lean
* Update src/analysis/calculus/local_extr.lean

2019-12-20 20:34:56 883d974
feat(algebra/module): sum_smul' (for semimodules) (#1752)
* feat(algebra/module): sum_smul' (for semimodules)
* adding docstring
* use `classical` tactic
* moving ' name to the weaker theorem

2019-12-19 06:24:53 e875492
chore(algebra/module) remove an unneeded commutativity assumption (#1813)

2019-12-18 12:57:28 5dae5d2
chore(ring_theory/algebra): redefine module structure of Z-algebra instance (#1812)
This redefines the Z-algebra instance, so that the module structure is definitionally equal to the Z-module structure of any `add_comm_group`

2019-12-18 09:23:47 bec46af
refactor(topology/*): use dot notation with `compact`, prove `compact.image` with `continuous_on` (#1809)
* refactor(topology/*): use dot notation, prove `compact.image` with `continuous_on`
* Apply suggestions from code review
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Fix compile, update some proofs
* Make `range_quot_mk` a `simp` lemma
* Fix lint errors

2019-12-18 06:01:42 1207518
feat(*): add command for declaring library notes (#1810)
* feat(*): add command for declaring library notes
* add missing file
* make note names private
* update docs
* Update library_note.lean
* Update library_note.lean

2019-12-17 22:12:07 acdf272
chore(data/fintype): use `list.fin_range` for `fin.fintype` (#1811)

2019-12-17 18:02:26 52e1872
refactor(topology/algebra/ordered): prove IVT for a connected set (#1806)
* refactor(topology/algebra/ordered): prove IVT for a connected set
Also prove that intervals are connected, and deduce the classical IVT
from this.
* Rewrite the proof, move `min_le_max` to the root namespace
* Adjust `analysis/complex/exponential`
* Add comments/`obtain`
* Add some docs
* Add more docs
* Move some proofs to a section with weaker running assumptions
* Remove empty lines, fix a docstring
* +1 docstring

2019-12-17 14:48:50 d8dc144
feat(geometry/manifold): smooth bundles, tangent bundle (#1607)
* feat(geometry/manifold): smooth bundles, tangent bundle
* remove decidable in preamble
* Update src/geometry/manifold/basic_smooth_bundle.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/geometry/manifold/basic_smooth_bundle.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/geometry/manifold/basic_smooth_bundle.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* comments
* cleanup
* oops, forgot squeeze_simp
* simpa instead of simp
* oops
* much better docstrings
* improved formatting
* space after forall
* fix build
* fix build, continuous.smul
* minor improvements

2019-12-17 13:38:54 308a08c
refactor(topology/metric_space/closeds): migrate to `cauchy_seq_of_edist_le_geometric_two` (#1760)
* feat(data/real/ennreal): more lemmas, `*_cast` tags, use `lift` tactic
* Undo name change
* Fix compile
* nnreal: add `move_cast`
* ennreal: more lemmas
* Fix compile
* feat(topology/instances/ennreal): more lemmas
* Fix compile
* Rewrite `cauchy_seq_of_edist_le_geometric` etc in terms of `ennreal`s
I tried to actually use `nnreal`s, and it leads to coercions nightmare.
* Simplify some proofs using new lemmas
* Fix compile
* Fix compile
* refactor(topology/metric_space/closeds): migrate to `cauchy_seq_of_edist_le_geometric_two`

2019-12-17 08:52:57 3053a16
feat(tactic/field_simp): tactic to reduce to one division in fields (#1792)
* feat(algebra/field): simp set to reduce to one division in fields
* tactic field_simp
* fix docstring
* fix build

2019-12-17 07:44:28 abea298
refactor(analysis/specific_limits): use `ennreal`s instead of `nnreal`s in `*_edist_le_geometric` (#1759)
* feat(data/real/ennreal): more lemmas, `*_cast` tags, use `lift` tactic
* Undo name change
* Fix compile
* nnreal: add `move_cast`
* ennreal: more lemmas
* Fix compile
* feat(topology/instances/ennreal): more lemmas
* Fix compile
* Rewrite `cauchy_seq_of_edist_le_geometric` etc in terms of `ennreal`s
I tried to actually use `nnreal`s, and it leads to coercions nightmare.
* Simplify some proofs using new lemmas
* Fix compile
* Fix compile

2019-12-16 14:15:11 cd53e27
chore(topology/algebra/ordered): use interval notation here and there (#1802)
* chore(topology/algebra/ordered): use interval notation here and there
Also prove a slightly more general version of `mem_nhds_orderable_dest`
* Fix a few compile errors
* Rename a lemma, fix compile, add docs and `dual_I??` lemmas
* Fix names, add comments
* Make some lemmas simp

2019-12-16 10:20:01 de25b10
refactor(analysis/convex): simplify proofs, use implicit args and  dot notation (#1804)
* feat(data/set/intervals): add `nonempty_Icc` etc, `image_(add/mul)_(left/right)_Icc`
* refactor(analysis/convex): simplify proofs, use implicit args and  dot notation
* Use dot notation.
* Swap LHS and RHS of `image_Icc_zero_one_eq_segment`.
* Introduce `finset.center_mass`, prove basic properties.
* Deduce Jensen's inequality from the corresponding property of convex
  sets; rename corresponding lemmas.
* Fix a typo
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update src/analysis/convex.lean

2019-12-16 08:11:28 6188b99
feat(topology/instances/ennreal): more lemmas about tsum (#1756)
* feat(data/real/ennreal): more lemmas, `*_cast` tags, use `lift` tactic
* Undo name change
* Fix compile
* nnreal: add `move_cast`
* ennreal: more lemmas
* Fix compile
* feat(topology/instances/ennreal): more lemmas
* Fix compile

2019-12-16 07:01:34 ee981c2
refactor(analysis/calculus/fderiv): prove `has_fderiv_within_at.lim` for any filter (#1805)
* refactor(analysis/calculus/fderiv): prove `has_fderiv_within_at.lim` for any filter
Also prove two versions of "directional derivative agrees with
`has_fderiv_at`": `has_fderiv_at.lim` and `has_fderiv_at.lim_real`.
* Rename a lemma as suggested by @sgouezel

2019-12-15 22:29:01 699da42
feat(data/set/intervals): add `nonempty_Icc` etc, `image_(add/mul)_(left/right)_Icc` (#1803)

2019-12-15 21:28:53 7cda8bb
feat(data/real/ennreal): more lemmas, `*_cast` tags, use `lift` tactic (#1754)
* feat(data/real/ennreal): more lemmas, `*_cast` tags, use `lift` tactic
* Undo name change
* Fix compile
* nnreal: add `move_cast`
* ennreal: more lemmas
* Fix compile

2019-12-15 19:32:42 871a36f
feat(group_theory/monoid_localization) add localizations of commutative monoids at submonoids (#1798)
* 1st half of monoid_localization
* change in implementation notes
* fixing naming clashes
* change additive version's name
* oops, had a /- instead of /--
* generalize comm_monoid instance
* remove notes to self
* responding to PR comments

2019-12-15 17:52:56 7dfbcdd
(docs/tactics.md) adding `norm_num` [ci skip] (#1799)
* (docs/tactics.md) adding `norm_num` [ci skip]
* fixing example
* clarifying explanation, adding more examples
* one more example
* one more example
* editing norm_num docstring

2019-12-15 16:39:49 9a37e3f
refactor(*): make vector_space an abbreviation for module (#1793)
* refactor(*): make vector_space an abbreviation for module
* Remove superfluous instances
* Fix build
* Add Note[vector space definition]
* Update src/algebra/module.lean
* Fix build (hopefully)
* Update src/measure_theory/bochner_integration.lean

2019-12-13 22:04:36 a3844c8
chore(algebra/group/basic): DRY, add `mul_left_surjective` (#1801)
Some lemmas explicitly listed arguments already declared using
`variables`, remove them.

2019-12-13 18:10:30+01:00 bb7d4c9
chore(data/set/lattice): drop `Union_eq_sUnion_range` and `Inter_eq_sInter_range` (#1800)
* chore(data/set/lattice): drop `Union_eq_sUnion_range` and `Inter_eq_sInter_range`
Two reasons:
* we already have `sUnion_range` and `sInter_range`, no need to repeat
  ourselves;
* proofs used wrong universes.
* Try to fix compile

2019-12-12 21:45:20 3281698
feat(data/padics/padic_integers): algebra structure Z_p -> Q_p (#1796)
* feat(data/padics/padic_integers): algebra structure Z_p -> Q_p
* Update src/data/padics/padic_integers.lean
Co-Authored-By: Floris van Doorn <fpvdoorn@gmail.com>
* Fix build

2019-12-12 09:05:22 69e861e
feat(measure_theory/bochner_integration): connecting the Bochner integral with the integral on `ennreal`-valued functions (#1790)
* shorter proof
* feat(measure_theory/bochner_integration): connecting the Bochner integral with the integral on `ennreal`
This PR proves that `∫ f = ∫ f⁺ - ∫ f⁻`, with the first integral sign being the Bochner integral of a real-valued function `f : α → ℝ`, and second and third integral sign being the integral on `ennreal`-valued functions. See `integral_eq_lintegral_max_sub_lintegral_min`.
I feel that most of the basic properties of the Bochner integral are proved. Please let me know if you think something else is needed.
* various things :
* add guides for typeclass inference;
* add `norm_cast` tags;
* prove some corollaries;
* add doc strings;
* other fixes
* Update bochner_integration.lean
* add some doc strings
* Fix doc strings
* Update bochner_integration.lean
* Update bochner_integration.lean
* fix doc strings
* Update bochner_integration.lean
* Use dot notation
* use dot notation
* Update Meas.lean

2019-12-11 17:17:17 a8f6e23
feat(data/list/basic): list.lex.not_nil_right (#1797)

2019-12-11 09:52:57 23e8ac7
feat(ring_theory/algebra): elementary simp-lemmas for aeval (#1795)

2019-12-10 19:03:24+01:00 3a10c60
chore(.mergify.yml): don't wait for travis when [ci skip] is present (#1789)

2019-12-10 16:39:32 361793a
refactor(linear_algebra/finite_dimensional): universe polymorphism, doc  (#1784)
* refactor(linear_algebra/finite_dimensional): universe polymorphism, doc
* docstrings
* improvements
* typo
* Update src/linear_algebra/dimension.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/linear_algebra/finite_dimensional.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/linear_algebra/finite_dimensional.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* fix comments
* fix build
* fix build
* remove pp.universe
* keep docstring in sync

2019-12-10 14:22:20 6bb1728
feat(analysis/convex): interiors/closures of convex sets are convex in a tvs (#1781)
* feat(topology/algebra/module): scalar multiplication homeomorphisms
* feat(topology/algebra/module): more lemmas
- homeomorphisms given by scalar multiplication by unit is open/closed map.
* feat(analysis/convex): interior of convex set is convex in a tvs
- in separate file for interpretation time reasons.
* feat(analysis/convex): extract lemma
* feat(analysis/convex): closure of a convext set is convex
* style(analysis/convex): place lemmas at reasonable locations
* style(topology/algebra/module): fix bracketing style
* feat(analysis/convex): introduce `smul_set` and `pointwise_mul`
- also additional equivalent statements for convexity using those definitions.
* feat(algebra/pointwise): lemmas for `smul_set`
* doc(algebra/pointwise): add docstrings
* doc(algebra/pointwise): add global docstring
* docs(algebra/pointwise): amend global docstring

2019-12-09 20:49:33 5c09372
A `ring_exp` tactic for dealing with exponents in rings (#1715)
* Test for ring_exp
* Implement -a/b * -a/b = a/b * a/b
* Hide extra information in the `ex` type in `ex_info`
* Some attempts to make the proof returned by ring_exp shorter
* Fix that ring_exp wouldn't handle pow that isn't monomial.has_pow
* Some optimizations in ring_exp
* Make all proofs explicit, halving execution time more or less
* Cache `has_add` and `has_mul` instances for another 2x speedup
* ring_exp can replace ring to compile mathlib
* Revert `ring` to non-test version
* Code cleanup and documentation
* Revert the test changes to `linarith`
* Undo the test changes to `ring2`
* Whitespace cleanup
* Fix overzealous error handling
Instead of catching any `fail` in eval, we just catch the operations that can
safely `fail` (i.e. `invert` and `negate`). This should make internal errors
visible again.
* Fix the TODO's
* Example use of ring_exp in data.polynomial
* Check that `ring_exp` deals well with natural number subtraction
* Fix incorrect docstring
* Improve documentation
* Small stylistic fixes
* Fix slow behaviour on large exponents
* Add `ring_exp` to the default tactics
* Use applicative notation where appropriate
* The `ring_exp` tactic also does normalization
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Move `normalize` from `tactic.interactive` to `ring_exp` namespace
* Fix name collision between `equiv` in data.equiv.basic and `equiv` in `test/tactics.lean`
I just renamed the definition in `test/tactics.lean` to `my_equiv`
and the operator to `my≅`.
* Fixes for the linter
* Fix the usage of type classes for `sub_pf` and `div_pf`
* Fix an additional linting error
* Optimization: we don't need norm_num to determine `x * 1 = x`
* Improve documentation of `test/ring_exp.lean`
* Rename `resolve_atoms` to `resolve_atom_aux` for clarity
* Small stylistic fixes
* Remove unneccessary hidden fields to `ex`
* Control how much unfolding `ring_exp` does by putting a `!` after it
* Reword comment for `ex_type`
* Use `ring_exp!` to deal with `(n : ℕ) + 1 - 1 = n`
* Document the `!` flag for `ring`, `ring_exp` and `ring_exp_eq`
* Get rid of searching for another cached instance
* Fix `ring_exp` failing on terms on the form `0^succ (succ ...)`

2019-12-09 11:40:19 1809eb4
feat(tactic/default): import suggest (#1791)

2019-12-09 07:40:52 acd769a
feat(analysis/calculus/deriv): derivative of division and polynomials (#1769)
* feat(data/set/intervals): more properties of intervals
* fix docstrings
* blank space
* iff versions
* fix docstring
* more details in docstrings
* initial commit
* div_deriv
* more derivatives
* cleanup
* better docstring
* fix
* better
* minor fix
* simp attributes
* Update src/analysis/calculus/deriv.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Update src/analysis/calculus/deriv.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* nolint
* pow derivative
* Update src/topology/continuous_on.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* comp_add and friends
* remove useless variable

2019-12-07 19:47:19 4c382b1
(tactic/tidy): add docstring [skip ci] (#1788)
* (tactic/tidy): add docstring [skip ci]
* Update src/tactic/tidy.lean
* mention [tidy] attribute

2019-12-07 17:48:37 3c9f8f0
feat(algebra/field_power): fpow is a strict mono (#1778)
* WIP
* feat(algebra/field): remove is_field_hom
A field homomorphism is just a ring homomorphism.
This is one trivial tiny step in moving over to bundled homs.
* Fix up nolints.txt
* Process comments from reviews
* Rename lemma

2019-12-07 13:49:21 0455962
refactor(order/bounds,*): move code around to make `order.bounds` not depend on `complete_lattice` (#1783)
* refactor(order/bounds,*): move code around to make `order.bounds` not depend on `complete_lattice`
In another PR I'm going to prove more facts in `order/bounds`, then
replace many proofs of lemmas about `(c)Sup`/`(c)Inf` with references to lemmas
about `is_lub`/`is_glb`.
* Move more code to `basic`, rewrite the only remaining proof in `default`
* Rename
* Add `default.lean`

2019-12-06 22:09:41 6968d74
chore(travis): add instance priority linter to CI (#1787)
* add instance priority to linter
* Update mk_nolint.lean
* fix fintype.compact_space prio

2019-12-06 16:24:38 8ca9263
feat(topology/subset_properties): fintype.compact_space (#1786)
Finite topological spaces are compact.

2019-12-06 15:20:53 7084182
feat(topology/dense_embedding): dense_range.equalizer (#1785)
* feat(topology/dense_embedding): dense_range.equalizer
Two continuous functions to a t2-space
that agree on a dense set are equal.
* Fix docstring

2019-12-05 21:00:24 7221900
feat(data/set/basic): more lemmas about `set.nonempty` (#1780)
* feat(data/set/basic): more lemmas about `set.nonempty`
* Fix compile

2019-12-05 17:22:16 2adc122
feat(data/set/finite): remove exists_finset_of_finite (#1782)
* feat(data/set/finite): remove exists_finset_of_finite
exists_finset_of_finite is a duplicate of finite.exists_finset_coe
At same time, provide a `can_lift` instance to lift sets to finsets.
* Add docstring

2019-12-05 15:23:56 3e6fe84
feat(meta/expr): use structure_fields (#1766)
removes is_structure_like
simplifies definition of is_structure
renames and simplifies definition get_projections. It is now called structure_fields_full

2019-12-05 06:07:31 de377ea
feat(algebra/field): remove is_field_hom (#1777)
* feat(algebra/field): remove is_field_hom
A field homomorphism is just a ring homomorphism.
This is one trivial tiny step in moving over to bundled homs.
* Fix up nolints.txt
* Remove duplicate instances

2019-12-05 01:31:42 324ae4b
feat(data/set/basic): define `set.nonempty` (#1779)
* Define `set.nonempty` and prove some basic lemmas
* Migrate `well_founded.min` to `set.nonempty`
* Fix a docstring and a few names
Based on comments in PR
* More docs
* Linebreaks
* +2 docstrings
* Fix compile
* Fix compile of `archive/imo1988_q6`

2019-12-04 19:03:55 d4ee5b6
fix(order.basic|ring_theory.algebra): lower instance priority (#1729)
* algebra
* algebra2
* algebra3
* algebra4
* order.basic
* module
* algebra/ring
* explain default priority of 100
* undo priority changes

2019-12-04 15:51:17 4353167
doc(topology/basic): add a few doc strings [skip ci] (#1775)
* doc(topology/basic): add a few doc strings
* Apply suggestions from code review

2019-12-04 13:46:21 c43b332
feat(data/set/intervals): more properties of intervals (#1753)
* feat(data/set/intervals): more properties of intervals
* fix docstrings
* blank space
* iff versions
* fix docstring
* more details in docstrings

2019-12-04 09:12:47 2c2cbb0
feat(data/nat/prime): monoid.prime_pow and docs (#1772)
* feat(data/nat/prime): monoid.prime_pow and docs
From the perfectoid project.
Also add some documentation.
* Add backticks in docs

2019-12-04 06:44:31 71247eb
feat(lift): check whether target is proposition (#1767)
* feat(lift): check whether target is proposition
* simplify

2019-12-04 04:29:28 c1105de
feat(tactic): mk_simp_attribute command that includes doc string (#1763)
* feat(tactic): mk_simp_attr command that includes doc string
* Update tactics.md
* rename mk_simp_attr to mk_simp_set
* rename again to mk_simp_attribute
* explain  syntax better
* simp with, not simp using
* simp with, not simp using
* avoid parsing ambiguity
* fix build
* Update docs/tactics.md
Co-Authored-By: Floris van Doorn <fpvdoorn@gmail.com>

2019-12-04 00:28:08 b031290
feat(data/finset): lemmas for folding min and max (#1774)
From the perfectoid project.

2019-12-03 20:55:07 827e78b
feat(lint): avoid Travis error when declarations are renamed (#1771)

2019-12-03 18:35:15 866be5f
feat(data/polynomial): monic.as_sum (#1773)
From the perfectoid project.
It is often useful to write a monic polynomial f in the form
`X^n + sum of lower degree terms`.

2019-12-03 16:50:35 922a4eb
feat(set_theory/cardinal): eq_one_iff_subsingleton_and_nonempty (#1770)
* feat(set_theory/cardinal): eq_one_iff_subsingleton_and_nonempty
From the perfectoid project
* Update src/set_theory/cardinal.lean

2019-12-03 14:47:38 3266b96
feat(tactic/lift): automatically handle pi types (#1755)
* feat(tactic/lift): automatically handle pi types
* Add missing docs
* Update docs/tactics.md
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>

2019-12-03 07:46:12 89e7f6f
feat(README): add link to Lean Links [skip ci] (#1768)

2019-12-02 17:29:31 3913d30
refactor(topology/algebra): use dot notation in tendsto.add and friends (#1765)

2019-12-02 14:48:24 87929bf
doc(*): correct bad markdown (#1764)
* Update bochner_integration.lean
* Update mean_value.lean
* Update expr.lean
* Update doc.md

2019-12-02 09:14:36 1c4a296
chore(topology/*): dots for continuity proofs (#1762)
* chore(topology/*): dots for continuity proofs
This is a sequel to 431551a891a270260b6ece53dcdff39a0527cf78
* fix build

2019-12-02 07:57:47 89fd088
feat(topology/uniform_space/cauchy): sequentially complete space with a countable basis is complete (#1761)
* feat(topology/uniform_space/cauchy): sequentially complete space with a countable basis is complete
This is a more general version of what is currently proved in
`cau_seq_filter`. Migration of the latter file to the new code will be
done in a separate PR.
* Add docs, drop unused section vars, make arguments `U` and `U'` explicit.
* Update src/topology/uniform_space/cauchy.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Fix some comments

2019-12-01 17:32:14 177cced
feat(measure/bochner_integration): dominated convergence theorem (#1757)
* feat(measure/bochner_integration): dominated convergence theorem
This PR
* proves the dominated convergence theorem
* and some other lemmas including `integral_congr_ae`, `norm_integral_le_lintegral_norm`.
* adds several equivalent definitions of the predicate `integrable` and shortens some proofs.
* fix linting error
* Add some section doc strings
* Indentation is very wrong
* Remove useless assumptions; fix doc strings
* remove `private`; add a doc string for Lebesgue's dominated convergence theorem
* Update basic.lean

2019-12-01 16:14:54 8a89b06
refactor(analysis/calculus/mean_value): prove the mean value theorem using 1D derivative (#1740)
* refactor(analysis/calculus/mean_value): prove the mean value theorem using 1D derivative
* docstring
* use iff.rfl
* fix build
* fix docstring

2019-12-01 15:07:11 431551a
refactor(topology/algebra): use the dot notation in `continuous_mul` and friends (#1758)
* continuous_add
* fixes
* more fixes
* fix
* tendsto_add
* fix tendsto
* last fix

2019-12-01 15:36:14+01:00 a350f03
chore(scripts/nolint.txt): regenerate

2019-11-30 16:23:56 343c54d
feat(analysis/complex/exponential): limits of exp (#1744)
* staging
* exp div pow
* cleanup
* oops
* better proof
* cleanup
* docstring
* typo in docstring

2019-11-29 21:47:26 e68b2be
doc(docs/contribute, meta/expr): sectioning doc strings  (#1723)
* doc(docs/contribute, meta/expr): explain sectioning doc strings and show in practice
* updates

2019-11-29 20:59:58 b46ef84
doc(windows.md): update [ci skip] (#1742)
* doc(windows.md): update [ci skip]
* small
* Update docs/install/windows.md
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* wording

2019-11-29 18:51:59 9bb69dc
feat(analysis/specific_limits): add `cauchy_seq_of_edist_le_geometric` (#1743)
* feat(analysis/specific_limits): add `cauchy_seq_of_edist_le_geometric`
Other changes:
* Estimates on the convergence rate both in `edist` and `dist` cases.
* Swap lhs with lhs in `ennreal.tsum_coe` and `nnreal.tsum_coe`,
  rename accordingly
* Use `(1 - r)⁻¹` instead of `1 / (1 - r)` in `has_sum_geometric`
* Add some docstrings
* Update src/analysis/specific_limits.lean

2019-11-29 16:54:30 817711d
feat(measure_theory/bochner_integration): linearity of the Bochner Integral (#1745)
* Linearity of the Bochner Integral
* prove integral_neg and integral_smul with less assumptions; make integral irreducible
* remove simp tag
* create simp set for integral
* Add simp_attr.integral to nolint
* Make it possible to unfold the definition of `integral`
and other things.
* Update nolints.txt
* Make it possible to unfold l1.integral
* Update bochner_integration.lean
* Update bochner_integration.lean

2019-11-29 14:50:53 65bdbab
chore(topology/instances/ennreal): simplify some statements&proofs (#1750)
API changes:
* `nhds_top`: use `⨅a ≠ ∞` instead of `⨅a:{a:ennreal // a ≠ ⊤}`
* `nhds_zero`, `nhds_of_ne_top` : similarly to `nhds_top`
* `tendsto_nhds`: get rid of the intermediate set `n`.

2019-11-29 13:45:43 8f11c46
feat(data/real/ennreal): more simp lemmas about `inv` and continuity of `inv` (#1749)
* Prove some algebraic properties of `ennreal.inv`
* More algebraic lemmas
* Prove continuity of `inv`

2019-11-29 11:45:14 1b3347d
feat(algebra/*,data/real/*): add some inequalities about `canonically_ordered_comm_semiring`s (#1746)
Use them for `nnreal` and `ennreal`.

2019-11-29 07:22:29 8e74c62
chore(data/finset,order/filter): simplify a few proofs (#1747)
Also add `finset.image_mono` and `finset.range_mono`.

2019-11-27 19:49:59 198fb09
feat(analysis/complex/exponential): derivatives (#1695)
* feat(analysis/complex/exponential): derivatives
* nhds
* nhds
* remove omega
* remove set_option
* simp attributes, field type
* restrict scalar
* staging
* complete proof
* staging
* cleanup
* staging
* cleanup
* docstring
* docstring
* reviewer's comments
* real derivatives of exp, sin, cos, sinh, cosh
* fix build
* remove priority
* better proofs

2019-11-27 17:34:07 01b1576
feat(topology/algebra/infinite_sum): prove `cauchy_seq_of_edist_le_of_summable` (#1739)
* feat(topology/algebra/infinite_sum): prove `cauchy_seq_of_edist_le_of_summable`
Other changes:
* Add estimates on the distance to the limit (`dist` version only)
* Simplify some proofs
* Add some supporting lemmas
* Fix a typo in a lemma name in `ennreal`
* Add `move_cast` attrs
* More `*_cast` tags, use `norm_cast`

2019-11-26 14:35:37 255bebc
feat(data/nat/multiplicity): multiplicity_choose and others (#1704)

2019-11-26 12:10:33 3443a7d
feat(analysis/complex/basic): restriction of scalars, real differentiability of complex functions (#1716)
* restrict scalar
* staging
* complete proof
* staging
* cleanup
* staging
* cleanup
* docstring
* docstring
* reviewer's comments
* Update src/analysis/complex/basic.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Update src/analysis/calculus/fderiv.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* add ! in docstrings [ci skip]
* more doc formatting in fderiv
* fix comments
* add docstrings

2019-11-26 09:03:27 33df7e8
feat(order/conditionally_complete_lattice): with_top (with_bot L) ins… (#1725)
* feat(order/conditionally_complete_lattice): with_top (with_bot L) instances
* dealing with most of Sebastien's comments
* initial defs. Now what happens?
* half way there
* compiles!
* tidy
* removing dead code
* docstring tinkering
* removing unused code
* is_lub_Sup' added
* refactor final proofs
* conforming to mathlib conventions
* def -> lemma

2019-11-25 19:40:41 ef47de4
chore(data/nat/basic): add some docs, drop unused arguments (#1741)
* add a docstring
* chore(data/nat/basic): add some docs, drop unused arguments

2019-11-25 17:00:45 73735ad
feat(topology/metric_space/basic): define `cauchy_seq_of_le_tendsto_0` (#1738)
* Define `cauchy_seq_of_le_tendsto_0`
Sometimes it is convenient to avoid proving `0 ≤ b n`.
* Fix the comment, generalize to an inhabitted `sup`-semilattice.

2019-11-25 09:29:09 242159f
feat(measure_theory/bochner_integration): bochner integral of simple functions (#1676)
* Bochner integral of simple functions
* Update bochner_integration.lean
* Change notation for simple functions in L1 space; Fill in blanks in `calc` proofs
* Better definitions of operations on integrable simple functions
* Update src/measure_theory/bochner_integration.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update src/measure_theory/bochner_integration.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update src/measure_theory/bochner_integration.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update src/measure_theory/bochner_integration.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update src/measure_theory/bochner_integration.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Update src/measure_theory/bochner_integration.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Several fixes - listed below
* K -> \bbk
* remove indentation after `calc`
* use local instances
* one tactic per line
* add `elim_cast` attributes
* remove definitions from nolints.txt
* use `linear_map.with_bound` to get continuity
* Update documentation and comments
* Fix things
* norm_triangle_sum -> norm_sum_le
* fix documentations and comments (The Bochner integral)
* Fix typos and grammatical errors
* Update src/measure_theory/ae_eq_fun.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>

2019-11-25 00:45:56 6af35ec
feat(topology/algebra/infinite_sum): add `has_sum` versions of a few `tsum` lemmas (#1737)
Also add a few lemmas in `analysis/specific_limits`

2019-11-24 23:51:18 bf509d7
feat(order/filter/basic): add more lemmas about `tendsto _ _ at_top` (#1713)
* feat(order/filter/basic): add more lemmas about `tendsto _ _ at_top`
* Use explicit arguments as suggested by @sgouezel
* Add lemmas for an `ordered_comm_group`
* Add a missing lemma

2019-11-24 23:02:27 a03a072
chore(topology/metric_space/emetric_space): define `edist_le_zero` (#1735)
This makes a few proofs slightly more readable.

2019-11-24 20:38:04 13fedc1
feat(algebra/group): define `mul/add_left/right_injective` (#1730)
Same as `mul_left_cancel` etc but uses `function.injective`.
This makes it easier to use functions from `function.injective` namespace.

2019-11-24 19:51:44 7b1cdd4
feat(topology/metric_space/emetric_space): polygonal inequalities (#1736)
Migrate #1572 from `dist` to `edist`

2019-11-24 17:44:38 ca53b5d
feat(data/real/ennreal): 3 simple lemmas (#1734)

2019-11-24 10:11:36 2d54a70
feat(analysis/normed_space): prove more lemmas, rename some old lemmas (#1733)
Renamed lemmas:
* `norm_triangle` → `norm_add_le`
* `norm_triangle_sub` → `norm_sub_le`
* `norm_triangle_sum` → `norm_sum_le`
* `norm_reverse_triangle'` → `norm_sub_norm_le`
* `norm_reverse_triangle`: deleted; was a duplicate of `abs_norm_sub_norm_le`
* `nnorm_triangle` → `nnorm_add_le`
New lemmas:
* `dist_add_left`, `dist_add_right`, `dist_neg_neg`, dist_sub_left`,
  dist_sub_right`, `dist_smul`, `dist_add_add_le`, `dist_sub_sub_le`:
  operate with distances without rewriting them as norms.
* `norm_add_le_of_le`, `dist_add_add_le_of_le`,
  `dist_sub_sub_le_of_le`, `norm_sum_le_of_le` : chain a triangle-like
  inequality with an appropriate estimates on the right hand side.
Also simplify a few proofs and fix a typo in a comment.

2019-11-23 11:38:03 f95c01e
feat(algebra/ordered_*): add three simple lemmas (#1731)

2019-11-23 00:15:59 f86abc7
fix(*): lower instance priority (#1724)
* fix(*): lower instance priority
use lower instance priority for instances that always apply
also do this for automatically generated instances using the `extend` keyword
also add a comment to most places where we short-circuit type-class inference. This can lead to greatly increased search times (see issue #1561), so we might want to delete some/all of them.
* put default_priority option inside section
Default priority also applies to all instances, not just automatically-generates ones
the scope of set_option is limited to a section
* two more low priorities
* fix some broken proofs
* fix proof
* more fixes
* more fixes
* increase max_depth a bit
* update notes
* fix linter issues

2019-11-22 21:37:11 2b3eaa8
feat(README) Point users to the tutorial project (#1728)
I think the tutorial project is a good place to start, and if other people don't think it is then I think they might want to consider adding more files to the tutorial project. I think mathlib is intimidating for beginners and this is a much better idea. However the link to the tutorial project is not even available on the main page -- you have to click through an installation procedure and find it at the bottom, and even then the first thing is suggests is that you make a new project, which I think is harder than getting the tutorial project up and running. This PR proposes that we point people directly to the tutorial project -- they will probably notice the existence of the tutorial project before they have even installed Lean/mathlib and will hence have it at the back of their mind once they've got things up and running.

2019-11-22 21:18:35 013e914
fix(docs/install/project) compiling is quick (#1727)
I think the "it takes a long time" comment must either have been from before `update-mathlib` or from when we were pointing people to the perfectoid project.

2019-11-22 20:20:52 62c1bc5
doc(topology/metric_space,measure_theory): move text in copyright docs to module docs (#1726)

2019-11-22 17:45:25+01:00 5a1a469
docs(README): revert 96ebf8cc
Revert "docs(README): Remove Patrick from the maintainer list."
This reverts commit 96ebf8cc7c446e977637a13740645a7f8e0c8992.

2019-11-21 22:11:03 004618a
feat(data/nat): two lemmas about choose (#1717)
* Two lemmas about choose
* swap choose_symm order

2019-11-21 19:22:23 58fc830
fix(tactic/ext): handle case where goal is solved early (#1721)
* fix(tactic/ext): handle case where goal is solved early
* add test

2019-11-21 17:17:19 a13027a
feat(data/finset): add cardinality of map (#1722)
* Add cardinality of map
* Update src/data/finset.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>

2019-11-21 11:57:54 faf3289
add div_le_div_iff (#1720)

2019-11-21 07:04:43 af9dcb9
make  set_of_eq_eq_singleton a simp lemma (#1719)

2019-11-20 20:03:27 9d031be
feat(group_theory/congruence): quotients of monoids by congruence relations (#1710)
* add congruence.lean
* add has_mul
* add definition of congruence relation
* minor changes
* Tidy up second half of congruence.lean
* tidying docstrings
* tidying
* constructive 3rd isom in setoid used in congruence
* remove import
* open namespaces earlier
* responding to PR comments

2019-11-20 17:12:35 f34bb6b
refactor(topology/metric_space/lipschitz): review API of `lipschitz_with` (#1700)
* refactor(topology/metric_space/lipschitz): review API of `lipschitz_with`
* Take `K : ℝ≥0` instead of using a conjuction;
* Rename each `*_of_lipschitz` to `lipschitz_with.*`;
* Define convenience constructors (e.g., `of_le_add`);
* Move facts about contracting maps to a separate file&namespace;
* Adjust other files to API changes.
* Make the first argument of `lipschitz_with.weaken` implicit
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Fix compile
* Fix 'unused args' bug reported by `#lint`

2019-11-20 15:36:42 5a6a67f
fix(data/padics): misstated lemma (#1718)

2019-11-20 01:38:56 0744a3a
feat(analysis/normed_space/operator_norm): extension of a uniform continuous function (#1649)
* Extension of a uniform continuous function
* Use characteristic properties of an extended function, instead of the explicit construction
* Add documentation on similar results in the library
* Update src/topology/algebra/uniform_extension.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Travis failed for no reason
* Update uniform_extension.lean
* eliminate `uniform_extension.lean`
* Update operator_norm.lean
* Update operator_norm.lean
* Remove `M`
* Fix docstring; extend_zero should be a simp lemma

2019-11-19 23:41:43 d67e527
feat(algebra/group_power): prove Bernoulli's inequality for `a ≥ -2` (#1709)
* feat(algebra/group_power): prove Bernoulli's inequality for `a ≥ -2`
* Restate inequalities as suggested by @fpvandoorn
* Fix docs

2019-11-19 20:49:00 d4fd722
feat(algebra/group; data/nat) lemmas for sub sub assoc (#1712)
* Lemmas for sub sub assoc
* Removed a lemma

2019-11-19 18:41:34 db6eab2
fix(tactic/ring): bugfix ring sub (#1714)

2019-11-19 18:03:43 740168b
feat(.travis): add linting of new changes to CI (#1634)
* feat(.travis): add linting of new changes to CI
* explicitly list which linters to use
* upate nolints
* fix nolints.txt
* fix nolints
* remove instance_priority test

2019-11-19 16:06:05+01:00 02659d6
chore(scripts/nolint): regenerate nolints

2019-11-19 13:09:36 8d7f093
fix(tactic/omega): use eval_expr' (#1711)
* fix(tactic/omega): use eval_expr'
* add test

2019-11-19 11:07:21 e3be70d
lemmas about powers of elements (#1688)
* feat(algebra/archimedean): add alternative version of exists_int_pow_near
- also add docstrings
* feat(analysis/normed_space/basic): additional inequality lemmas
- that there exists elements with large and small norms in a nondiscrete normed field.
* doc(algebra/archimedean): edit docstrings
* Apply suggestions from code review
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>

2019-11-19 04:28:27 b0520a3
feat(algebra/order): define `forall_lt_iff_le` and `forall_lt_iff_le'` (#1707)

2019-11-19 02:27:10 5d5da7e
feat(data/set/intervals): more lemmas (#1665)
* feat(data/set/intervals): more lemmas
* Use `simp` in more proofs, drop two `@[simp]` attrs
* Drop more `@[simp]` attrs
It's not clear which side is simpler.

2019-11-18 23:52:03 895f1ae
feat(data/option): add `some_ne_none`, `bex_ne_none`, `ball_ne_none` (#1708)

2019-11-18 20:32:48 6b408eb
feat(data/real/nnreal): define `nnreal.gi : galois_insertion of_real coe` (#1699)

2019-11-18 18:18:25 af43a2b
feat(data/nat/enat): add_right_cancel and other (#1705)

2019-11-18 16:16:44 0d94020
feat(algebra/order_functions): define `min/max_mul_of_nonneg` (#1698)
Also define `monotone_mul_right_of_nonneg` and rename
`monotone_mul_of_nonneg` to `monotone_mul_left_of_nonneg`.

2019-11-18 14:10:09 3f9c4d8
chore(data/set): use `Sort*` in more lemmas (#1706)
Also replace `nonempty_of_nonempty_range` with
`range_ne_empty_iff_nonempty` and `range_ne_empty`.
The old lemma is equivalent to `range_ne_empty_iff_nonempty.mp`.

2019-11-18 12:21:07 428aec9
feat(group_theory/congruence): create file about congruence relations (#1690)
* add congruence.lean
* add has_mul
* add definition of congruence relation
* minor changes
* responding to review comments
* fix docstring mistake in setoid.lean

2019-11-18 10:15:17 0a794fa
feat(data/finset): new union, set difference, singleton lemmas (#1702)
* Singleton iff unique element lemma
* Set difference lemmas
* Changes from review

2019-11-18 08:08:24 fafdcfd
chore(data/set/lattice): get most proofs from `pi` instance. (#1685)
This way we only provide proofs that don't come from `pi`

2019-11-18 04:03:50 d19f7bc
feat(analysis/normed_space/finite_dimension): finite-dimensional spaces on complete fields (#1687)
* feat(analysis/normed_space/finite_dimension): equivalence of norms, continuity of linear maps
* improve doc
* cleanup
* cleanup
* Update src/data/equiv/basic.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* exact_mod_cast, remove classical
* unfreezeI
* remove typeclass assumption
* Update src/analysis/normed_space/finite_dimension.lean
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* Update src/linear_algebra/basic.lean
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* Update src/linear_algebra/finite_dimensional.lean
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* cleanup

2019-11-18 02:08:50 7c5f282
chore(algebra/order_functions): rename `min/max_distrib_of_monotone` (#1697)
New names `monotone.map_min/max` better align with `monoid_hom.map_mul` etc.

2019-11-18 00:18:22 9607bbf
feat(algebra/big_operators): sum_Ico_succ_top and others (#1692)
* feat(Ico): sum_Ico_succ_top and others
* get rid of succ_bot and rename eq_cons

2019-11-17 21:17:19 f5385fe
chore(order_functions): use weakly implicit brackets in strict mono (#1701)
* chore(order_functions): use weakly implicit brackets in strict mono
* fix build

2019-11-17 19:31:14 474004f
fix(topology/dense_embeddings): tweaks (#1684)
* fix(topology/dense_embeddings): tweaks
This fixes some small issues with last summer dense embedding refactors.
This is preparation for helping with Bochner integration. Some of those
fixes are backported from the perfectoid project.
* chore(dense_embedding): remove is_closed_property'
* Update src/topology/uniform_space/completion.lean
* Update src/topology/dense_embedding.lean

2019-11-17 17:46:28 1805f16
refactor(order/bounds): make the first argument of `x ∈ upper_bounds s` implicit (#1691)
* refactor(order/bounds): make the first argument of `x ∈ upper_bounds s` implicit
* Use `∈ *_bounds` in the definition of `conditionally_complete_lattice`.

2019-11-17 15:38:07 1034357
feat(data/int/parity): not_even_iff (#1694)

2019-11-17 05:49:52 e863c08
feat(algebra/pointwise): set.add_comm_monoid (#1696)
* feat(algebra/pointwise): set.add_comm_monoid
* defs not instances
* fixing instance names

2019-11-17 01:34:34 6b1ab64
Add lemma for injective pow (#1683)
* Add lemma for injective pow
* Rename lemma and remove spaces
* Use strict-mono for monotonic pow
* Rename iff statements
* Add left injective pow as well

2019-11-15 16:11:27 6ebb7e7
feat(data/nat/modeq): add_div and others (#1689)
* feat(data/nat/modeq): add_div and others
* remove unnecessary positivity assumptions.
* fix build
* brackets

2019-11-14 21:06:24 40de4fc
doc(order/bounds,order/conditionaly_complete_lattice): add some docs (#1686)
* doc(order/bounds,order/conditionaly_complete_lattice): add some docs
* Fixes by @jcommelin
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Fix docs: `is_least` are not unique unless we have a partial order.

2019-11-13 22:27:06 6fbf9f7
doc(*): proper markdown urls [ci skip] (#1680)

2019-11-13 20:20:04 10ced76
doc(*): move detailed headers into real module docs (#1681)
* doc(*): move detailed headers into real module docs
* update zmod

2019-11-13 17:53:09 4729624
doc(data/rel): add docs to some definitions (#1678)
* doc(data/rel): add docs to some definitions
* Update src/data/rel.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/data/rel.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>

2019-11-13 14:36:39 6f5ad3c
add dvd_gcd_iff for nat (#1682)

2019-11-13 12:44:49 6625f66
feat(analysis/calculus/deriv): one-dimensional derivatives (#1670)
* feat(analysis/calculus/deriv): one-dimensional derivatives
* Typos.
* Define deriv f x as fderiv 𝕜 f x 1
* Proof style.
* Fix failing proofs.

2019-11-13 10:53:30 3bb2b5c
feat(algebra/big_operators): dvd_sum (#1679)
* feat(data/multiset): dvd_sum
* feat(algebra/big_operators): dvd_sum
* fix build
* fix build
* fix build

2019-11-12 23:38:13 dfd25ff
chore(meta/expr): delete local_binder_info; rename to_implicit (#1668)
* chore(meta/expr): delete local_binder_info; rename to_implicit
local_binder_info duplicated local_binding_info.
to_implicit has been renamed to_implicit_local_const, to distinguish it
from to_implicit_binder
* file missing from commit

2019-11-12 18:51:50 1749a8d
feat(group_theory/submonoid): add bundled submonoids and various lemmas (#1623)
* WIP -- removing  and everything is broken
* test
* test
* tidy
* fixed localization
* starting on coset
* WIP
* submonoid.lean now compiles but no to_additive stuff
* submonoid.lean compiles
* putting is_submonoid back
* docstrings
* terrible docstrings up to line 370
* finished docstrings
* more to_additive stuff
* WIP -- removing  and everything is broken
* test
* test
* tidy
* fixed localization
* starting on coset
* WIP
* submonoid.lean now compiles but no to_additive stuff
* submonoid.lean compiles
* putting is_submonoid back
* docstrings
* terrible docstrings up to line 370
* finished docstrings
* more to_additive stuff
* WIP quotient monoids
* quotient monoids WIP
* quotient_monoid w/o ideals.lean all compiles
* removing lemma
* adjunction
* some tidying
* remove pointless equiv
* completion compiles (very slowly)
* add lemma
* tidying
* more tidying
* mul -> smul oops
* might now compile
* tidied! I think
* fix
* breaking/adding stuff & switching branch
* add Inf relation
* removing sorrys
* nearly updated quotient_monoid
* updated quotient_monoid
* resurrecting computability
* tidied congruence.lean, added some docstrings
* extending setoids instead, WIP
* starting Galois insertion
* a few more bits of to_additive and docs
* no battery
* up to line 800
* congruence'll compile when data.setoid exists now
* more updates modulo existence of data.setoid
* rearranging stuff
* docstrings
* starting additive docstrings
* using newer additive docstring format in submonoid
* docstrings, tidying
* fixes and to_additive stuff, all WIP
* temporary congruence fixes
* slightly better approach to kernels, general chaos
* aahh
* more mess
* deleting doomed inductive congruence closure
* many fixes and better char pred isoms
* docstrings for group_theory.submonoid
* removing everything but bundled submonoids/lemmas
* removing things etc
* removing random empty folder
* tidy
* adding lemma back
* tidying
* responding to PR comments
* change 2 defs to lemmas
* @[simp] group_power.lean lemmas
* responding to commute.lean comments
* Remove unnecessary add_semiconj_by.eq
* Change prod.submonoid to submonoid.prod
* replacing a / at the end of docstring
Sorry - don't make commits on your phone when your laptop's playing up :/
* removing some not very useful to_additives
* fix pi_instances namespaces
* remove unnecessary prefix
* change extensionality to ext
not sure this is necessary because surely merging will change this automatically, but Travis told me to, and I really want it to compile, and I am not at my laptop

2019-11-12 16:51:10 7b07932
feat(analysis/normed_space/operator_norm): continuity of linear forms; swap directions of `nnreal.coe_*` (#1655)
* feat(analysis/normed_space/operator_norm): continuity of linear forms
* use lift, change nnreal.coe_le direction

2019-11-12 15:22:02 14435eb
feat(algebra/lie_algebra): Define lie algebras (#1644)
* feat(algebra/module): define abbreviation module.End
The algebra of endomorphisms of a module over a commutative ring.
* feat(ring_theory/algebra): define algebra structure on square matrices over a commutative ring
* feat(algebra/lie_algebras.lean): define Lie algebras
* feat(algebra/lie_algebras.lean): simp lemmas for Lie rings
Specifically:
  * zero_left
  * zero_right
  * neg_left
  * leg_right
* feat(algebra/lie_algebras): more simp lemmas for Lie rings
Specifically:
  * gsmul_left
  * gsmul_right
* style(algebra/lie_algebras): more systematic naming
* Update src/algebra/lie_algebras.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/algebra/lie_algebras.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/algebra/lie_algebras.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/algebra/lie_algebras.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/algebra/lie_algebras.lean
Catch up with renaming in recent Co-authored commits
* Rename src/algebra/lie_algebras.lean --> src/algebra/lie_algebra.lean
* Place lie_ring simp lemmas into global namespace
* Place lie_smul simp lemma into global namespace
* Drop now-redundant namespace qualifiers
* Update src/algebra/lie_algebra.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Update src/algebra/lie_algebra.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Catch up after recent Co-authored commits making carrier types implicit
* Add missing docstrings
* feat(algebra/lie_algebra): replace `instance` definitions with vanilla `def`s
* style(algebra/lie_algebra): Apply suggestions from code review
Co-Authored-By: Patrick Massot
* Update src/algebra/lie_algebra.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Minor tidy ups

2019-11-12 13:20:50 08880c9
feat(data/equiv,category_theory): prove equivalences are the same as isos (#1587)
* refactor(category_theory,algebra/category): make algebraic categories not [reducible]
Adapted from part of #1438.
* Update src/algebra/category/CommRing/basic.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* adding missing forget2 instances
* Converting Reid's comment to a [Note]
* adding examples testing coercions
* feat(data/equiv/algebra): equivalence of algebraic equivalences and categorical isomorphisms
* more @[simps]
* more @[simps]

2019-11-12 11:23:31 2cbeed9
style(*): use notation `𝓝` for `nhds` (#1582)
* chore(*): notation for nhds
* Convert new uses of nhds

2019-11-12 07:05:03 3cae70d
feat(extensionality): generate ext_iff for structures (#1656)
* feat(extensionality): generate ext_iff for structures
* fix
* core.lean [skip ci]
* Update ext.lean
* Update ext.lean
* Update tactics.md
* Update src/tactic/ext.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>

2019-11-12 05:02:30 f58f340
feat(order/lattice): add `monotone.le_map_sup` and `monotone.map_inf_le` (#1673)
Use it to simplify some proofs in `data/rel`.

2019-11-12 03:02:15 c28497f
chore(*): use `iff.rfl` instead of `iff.refl _` (#1675)

2019-11-11 21:44:54 d077887
cleanup(data/equiv/basic): drop `quot_equiv_of_quot'`, rename `quot_equiv_of_quot` (#1672)
* cleanup(data/equiv/basic): drop `quot_equiv_of_quot'`, rename `quot_equiv_of_quot`
* `quot_equiv_of_quot` was the same as `quot.congr`
* rename `quot_equiv_of_quot` to `quot.congr_left` to match
  `quot.congr` and `quot.congr_right`.
* Add docs

2019-11-11 15:19:29 a5b3af3
fix(tactic/core): correct `of_int` doc string (#1671)

2019-11-11 02:02:13 6ecdefc
chore(analysis/calculus/deriv): rename to fderiv (#1661)

2019-11-10 23:56:06 886b15b
doc(measure_theory/l1_space): add doc and some lemmas (#1657)
* Add doc and lemmas
* Remove unnecessary assumption
* Fix integrable_neg
* Remove extra assumptions
* Wrong variable used

2019-11-10 21:49:19 ce48727
fix(order/conditionally_complete_lattice): fix 2 misleading names (#1666)
* `cSup_upper_bounds_eq_cInf` → `cSup_lower_bounds_eq_cInf`;
* `cInf_lower_bounds_eq_cSup` → `cInf_upper_bounds_eq_cSup`.

2019-11-10 19:42:35 f738ec7
refactor(data/zmod/quadratic_reciprocity): simplify proof of quadratic reciprocity and prove when 2 is a square (#1609)
* feat(number_theory/sum_four_squares): every natural number is the sum of four square numbers
* gauss_lemma
* Johan's suggestions
* some better parity proofs
* refactor(data/finset): restate disjoint_filter
* fix build
* fix silly lemmas in finite_fields
* generalize a lemma
* work on add_sum_mul_div_eq_mul
* fix build
* Update src/number_theory/sum_four_squares.lean
* feat(data/multiset): map_eq_map_of_bij_of_nodup
* finish proof of quad_rec
* minor fix
* Add docs
* add docs in correct style
* Use Ico 1 p instead of (range p).erase 0

2019-11-10 17:58:18 4e68129
feat(data/finset): Ico.subset (#1669)
Does not have the `m1 < n1` assumption required for `subset_iff`

2019-11-10 15:51:47 2cd59b4
feat(coinduction): add identifier list to `coinduction` tactic (#1653)
* feat(coinduction): add identifier list to `coinduction` tactic
* Update coinductive_predicates.lean
* two doc strings [skip ci]
* Update coinductive_predicates.lean
* fix merge
* move definitions around
* move more stuff
* fix build
* move and document functions

2019-11-10 13:45:26 209e039
cleanup(tactic/core): removing unused tactics (#1641)
* doc(tactic/core): begin to add docstrings
* a few more doc strings
* more additions
* more doc
* deal with an undocumented definition by removing it
* minor
* add doc string
* remove some unused core tactics
* Revert "remove some unused core tactics"
This reverts commit 52de333c0c3fd4294930b270eeac503425f0070f.
* document get_classes
* Revert "deal with an undocumented definition by removing it"
This reverts commit 07b56e7456911466a15f1c340d9964e08aab195e.
* more doc strings
* dead code
* revert changing `subobject_names` to private
* remaining doc strings
* cleanup(tactic/core): removing unused tactics
* remove file_simp_attribute_decl and simp_lemmas_from_file
* delete drop_binders
* fix merge, delete check_defn

2019-11-10 11:28:40 4ecc17b
fix(scripts/mk_all): don't add `lint_mathlib` to `all.lean` [ci skip] (#1667)

2019-11-09 22:41:00 c497f96
feat(tactic/norm_cast): add push_cast simp attribute (#1647)
* feat(tactic/norm_cast): add push_cast simp attribute
* test and docs

2019-11-09 19:14:09 1236ced
feat(data/nat/basic): succ_div (#1664)
* feat(data/nat/basic): succ_div
Rather long proof, but it was the best I could do.
* Update basic.lean
* add the two lemmas for each case
* get rid of positivity assumption

2019-11-09 14:11:28 1c24f92
feat(data/list/basic): nth_le_append_right (#1662)

2019-11-09 11:29:30 b0c36df
feat(measure_theory/integration) lemmas for calculating integral of simple functions (#1659)
* lemmas for calculating integration on simple functions
* Updates
* `finsupp` changed to `fin_vol_supp`
* less conditions for `to_real_mul_to_real`
* `sum_lt_top` with more abstraction
* Fix extra arguments
* One tactic per line

2019-11-08 14:09:26+01:00 ca21616
chore(scripts): add linter and update nolints

2019-11-08 13:57:15+01:00 8afcc5a
feat(scripts): add nolints.txt

2019-11-08 11:03:46 3223ba7
doc(linear_algebra): rename lin_equiv to linear_equiv (#1660)

2019-11-07 23:25:38 362acb5
feat(tactic/lint, script/mk_nolint): generate list of failing declarations to be ignored (#1636)
* feat(tactic/lint): return names of failing declarations
* feat(scripts/mk_nolint): produce sorted list of declarations failing lint tests
* fix copyright
* fix test
* Update scripts/mk_nolint.lean

2019-11-07 03:43:41 c718a22
feat(extensionality): rename to `ext`; generate `ext` rules for structures (#1645)
* Update core.lean
* Update tactics.lean
* integrate generation of extensionality lemma of structures into `ext`
* Update src/tactic/ext.lean [skip ci]
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Update src/tactic/ext.lean [skip ci]
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Update src/tactic/ext.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Update ext.lean [skip ci]
* Update tactics.md [skip ci]
* fix build
* fix build

2019-11-06 22:22:23 17a7f69
doc(measure_theory/ae_eq_fun): add documentations and some lemmas (#1650)
* Add documentations. `to_fun`.
* More precise comments

2019-11-06 07:01:00 3c8bbdc
chore(topology/subset_properties): simplify a proof (#1652)

2019-11-05 23:56:57 62815e3
doc(tactic/core): docstrings on all definitions (#1632)
* doc(tactic/core): begin to add docstrings
* a few more doc strings
* more additions
* more doc
* deal with an undocumented definition by removing it
* minor
* add doc string
* remove some unused core tactics
* Revert "remove some unused core tactics"
This reverts commit 52de333c0c3fd4294930b270eeac503425f0070f.
* document get_classes
* Revert "deal with an undocumented definition by removing it"
This reverts commit 07b56e7456911466a15f1c340d9964e08aab195e.
* more doc strings
* dead code
* revert changing `subobject_names` to private
* remaining doc strings
* Apply suggestions from code review
Co-Authored-By: Bryan Gin-ge Chen <bryangingechen@gmail.com>
* remove todo

2019-11-05 21:26:42 d9578a6
docs(tactic/lint) add code fence around #print statement to avoid its args looking like html tags. (#1651)

2019-11-05 15:37:42 986e58c
refactor(sum_two_square): extract lemmas about primes in Z[i] (#1643)
* refactor(sum_two_square): extract lemmas about primes in Z[i]
* forgot to save
* docztring
* module docstrings

2019-11-04 22:23:15 f3f1fd8
feat(floor): one more lemma (#1646)
* feat(floor): one more lemma
and #lint fix
* Update src/algebra/floor.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>

2019-11-04 20:13:48 2dcc6c2
fix(tactic/tfae,scc): change the strongly connected component algorithm (#1600)
* fix(tactic/tfae,scc): change the strongly connected component algorithm
* add example
* fix scc algorithm and add documentation
* documentation [skip ci]
* Update scc.lean [skip ci]
* Update src/tactic/scc.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update scc.lean
* Update tactics.lean
* Update src/tactic/scc.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* rename mk_closure, add line breaks, grammar tweaks
* Update scc.lean
* add to `to_tactic_format` output and docstring, more minor fixes

2019-11-04 15:02:31 ee5b38d
feat(simps): allow the user to specify the projections (#1630)
* feat(simps): allow the user to specify the projections
Also add option to shorten generated lemma names
Add the attribute to more places in the category_theory library
The projection lemmas of inl_ and inr_ are now called inl__obj and similar
* use simps partially in limits/cones and whiskering
* revert whiskering
* rename last_name to short_name
* Update src/category_theory/products/basic.lean
* Update src/category_theory/limits/cones.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/category_theory/products/associator.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/data/string/defs.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* clarify is_eta_expansion docstrings

2019-11-03 15:40:43 a6ace34
feat(analysis/normed_space): Riesz's lemma (#1642)
* fix(topology/metric_space/hausdorff_distance): fix typo
* feat(analysis/normed_space): Riesz's Lemma
* fix(analysis/normed_space): fix silly mistake in statement of riesz lemma
* style(analysis/normed_space/riesz_lemma): variable names & indent
* doc(analysis/normed_space/riesz_lemma): add attribution
* doc(analysis/normed_space/riesz_lemma): fix module docstring style
* style(analysis/normed_space/riesz_lemma): more style & documentation
- recall statement in module header comment
- typecast instead of unfold

2019-11-01 11:28:15 9af7e5b
refactor(linear_algebra/basic): use smul_right (#1640)
* refactor(linear_algebra/basic): use smul_right
* Update src/linear_algebra/basic.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/linear_algebra/basic.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>

2019-11-01 03:25:06 1710fd8
feat(lint): add priority test for instances that always apply (#1625)
* feat(lint): add priority test for instances that always apply
also move a defn from coinductive_predicates to expr
also slightly refactor incorrect_def_lemma
* update doc
* add priorities to linters
Now they are run in the order specified by the doc
* always run tests in the extra set
even when they are slow and  is false
* move some more declarations from coinductive_predicates to expr
remove coinductive_predicates as import from some (but not all) files
* reviewer comments
* remove unsafe prefixes

2019-11-01 01:22:43 5f17abc
fix(tactic/elide): was untested and buggy. Fixed a few issues (#1638)
* fix(tactic/elide): was untested and buggy. Fixed a few issues
* Update tactics.lean
* add copyright header
* Update src/tactic/elide.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>

2019-10-31 23:37:26 df91623
chore(category_theory/whiskering): clean up (#1613)
* chore(category_theory/whiskering): clean up
* ugh, the stalks proofs are so fragile
* fixes
* minor
* fix
* fix

2019-10-31 21:03:05 cd0bc32
chore(data/set/finite): move defns up hierarchy; rename fintype_of_finset, card_fintype_of_finset (#1615)
* chore(data/set/finite): move defns up hierarchy
* get namespaces right
* fixes
* fix build

2019-10-31 13:24:24 6b51787
feat(order/conditionally_complete_lattice): add complete_linear_order instance for enat (#1633)

2019-10-31 11:20:33 780cbc9
feat(tactic/simps): allow let-expressions (#1626)
* feat(simps); allow let-expressions
* Update src/meta/expr.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>

2019-10-30 20:31:06 d43f7f9
feat(.travis.yml): add linting to test stage (#1606)

2019-10-30 17:35:02 aadfde6
feat(data/fintype): fintype.card_subtype_lt (#1635)
* feat(data/fintype): fintype.card_subtype_lt
* Update src/data/fintype.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>

2019-10-29 22:34:46 ca90081
feat(number_theory/sum_four_squares): every natural number is the sum of four square numbers (#1560)
* feat(number_theory/sum_four_squares): every natural number is the sum of four square numbers
* Johan's suggestions
* some better parity proofs
* fix silly lemmas in finite_fields
* generalize a lemma
* fix build
* Update src/number_theory/sum_four_squares.lean
* add docs in correct style

2019-10-29 09:22:53 6030ff0
chore(category_theory): speed-up monoidal.of_has_finite_products (#1616)

2019-10-29 07:16:16 e6e25d0
cleanup(order|string) (#1629)
move data.string to data.string.basic
remove classical.decidable_linear_order. was duplicate of classical.DLO

2019-10-29 05:05:10 b9e3dbb
feat(rat): give Q-algebra structure on field (#1628)
also move around some declarations in rat.cast
the only new declaration in that file is is_ring_hom_cast

2019-10-29 03:03:51 b5b674c
fix(*): use has_coe_t (#1627)

2019-10-29 00:42:49 0ea3dfe
feat(tactic/rcases): transport the `cases h : e` syntax to `rcases` (#1611)
* Update rcases.lean
* Update rcases.lean
* Update rcases.lean
* Update lift.lean
* Update rcases.lean
* Update tactics.md
* Update rcases.lean

2019-10-28 21:23:53 7a8f53e
feat(tactic/lint): silent linting (#1580)
* feat(tactic/lint): silent linting
* doc(tactic/lint): doc silent linting and nolint features
* fix test
* change notation for silent linting
* style(tactic/lint): remove commented lines

2019-10-28 16:28:58 94e368c
chore(ring_theory/algebra): add docstring to algebra.comap and remove unused instances (#1624)
* doc(ring_theory/algebra): add docstring to algebra.comap
* Update algebra.lean

2019-10-28 10:34:50 c2e81dd
fix(tactic/omega): fix omega bugs, add docstring (closes #1484) (#1620)
* Fix omega bugs, add docstring
* style(tactic/omega/main): trivial cleaning

2019-10-27 17:05:13 1fa03c2
feat(linear_algebra/basic): define algebra structure on endomorphisms of module (#1618)
* feat(linear_algebra/basic): define algebra structure on endomorphisms of module
* Update algebra.lean

2019-10-27 07:06:37 89ece14
fix(data/mv_polynomial): generalize equivs to comm_semiring (#1621)
This apparently makes the elaborator's job a lot easier, and
reduces the compile time of the whole module by a factor of 3.

2019-10-27 02:35:54 8a45d98
chore(category_theory): remove superfluous lemma (#1614)

2019-10-26 12:58:23 8eaf478
feat(linear_algebra/basis): Dedekind's linear independence of characters (#1595)
* feat(linear_algebra/basis): Dedekind's linear independence of characters
* feat(linear_algebra/basis): generalize independence of characters to integral domains
* chore(linear_algebra/basis): change proofs
* commenting the proof

2019-10-26 10:17:39 b9798dc
feat(data/nat): a lemma about min_fac (#1603)
* feat(data/nat): a lemma about min_fac
* feat(data/nat): a lemma about min_fac
* use Rob's proof
* fix
* let's play golf
* newline
* use Chris' proof
* cleaning up
* rename per Chris' suggestions

2019-10-26 08:23:59 b46f5b0
feat(data/set/intervals): fintype instances for ℕ and ℤ (#1602)
* starting on fintype instances for Icos
* finishing fintypes
* minor
* move file
* oops
* redone
* formatting
* cleaning up

2019-10-25 15:46:12 6ee8bf9
refactor(data/rat/meta): rename to meta_defs (#1612)
* refactor(data/rat/meta): rename to meta_defs
* fix build

2019-10-24 21:13:25 9db43a5
chore(data/nat/basic): remove pos_iff_ne_zero' (#1610)
This used to be different from pos_iff_ne_zero because the latter
was phrased in terms of `n > 0`, not `0 < n`. Since #1436 they
are the same.

2019-10-24 17:11:21 151bcbe
feat(meta/expr,data/rat/basic): add rat.reflect (#1565)
* feat(meta/expr,data/rat/basic): add rat.reflect
* doc(meta/expr,data/rat/basic): clarify type restrictions for mk_numeral functions
* fix name clash with norm_num functions
* fix doc string to expr.of_rat
* Update src/data/rat/basic.lean
Co-Authored-By: Reid Barton <rwbarton@gmail.com>
* fix declaration and move to new file
* tests
* fix import
* protect rat.reflect
* to_pos_rat --> to_nonneg_rat
* correctly test rat.reflect

2019-10-24 15:08:35 3f8a492
chore(category_theory): replace some @[simp] with @[simps] (#1605)

2019-10-24 13:48:11 b1f44ba
chore(group_theory/free_group,order/zorn): rename zorn.zorn and sum.sum (#1604)
* chore(order/zorn): rename zorn.zorn
* chore(group_theory/free_group): rename sum.sum
* chore(group_theory/free_group,order/zorn): remove nolint

2019-10-24 11:26:19 5da754c
fix(tactic/solve_by_elim): parameter parsing (#1591)
* fix(tactic/solve_by_elim): parameter parsing
* revert accidental commenting out
* doc comments for solve_by_elim
* fix build

2019-10-24 06:28:15 4b9cdf4
chore(*): pass dup_namespace and def_lemma lint tests (#1599)
* chore(*): pass dup_namespace and def_lemma lint tests
* Update src/group_theory/free_group.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/number_theory/pell.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/order/lattice.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/set_theory/ordinal.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/set_theory/ordinal.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/tactic/transfer.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/group_theory/free_group.lean
Co-Authored-By: Reid Barton <rwbarton@gmail.com>
* using nolint

2019-10-24 02:49:46 31c73c1
feat(data/multiset): map_eq_map_of_bij_of_nodup (#1590)

2019-10-24 00:47:18 08977be
feat(algebra/semiconj): define `semiconj_by` and some operations (#1576)
* feat(algebra/semiconj): define `semiconj_by` and some operations
Also rewrite `algebra/commute` to reuse results from `algebra/semiconj`.
* Some `@[simp]` attributes
* Fixes by @rwbarton, more docs
* Add two more constructors

2019-10-23 23:11:12 e2a8e63
feat(geometry/manifold): improvements for smooth manifolds (#1593)
* feat(geometry/manifold): improvements to smooth manifolds
* fix
* better definition for half-space
* fix docstring
* address comments
* more comments

2019-10-23 20:48:14 b433afa
feat(algebra/big_operators): sum_ite (#1598)
* feat(algebra/big_operators): sum_ite
rename the current `sum_ite` to `sum_ite_eq` and add a more general version
* Update src/algebra/big_operators.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>

2019-10-23 20:28:52 36dfcfc
doc(topology/topological_fiber_bundle): documentation improvements (#1594)
* feat(topology/topological_fiber_bundle): improvements
* minor fixes

2019-10-23 17:05:43 d214c61
feat(data/nat/modeq): div_mod_eq_mod_mul_div (#1597)

2019-10-23 14:43:45 36f7113
fix(suggest): focus1 at the correct moment (#1592)

2019-10-23 12:50:43 24dd80b
chore(src/data/mv_polynomial): doc comments and removing unused arguments (#1585)
* chore(src/data/mv_polynomial): doc comments and removing unused arguments
* Update src/data/mv_polynomial.lean

2019-10-23 10:48:29 079e6ec
feat(analysis/normed_space): norms on ℤ and ℚ (#1570)
* feat(analysis/normed_space): norms on ℤ and ℚ
* Add some `elim_cast` lemmas
* Add `@[simp]`, thanks @robertylewis
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>

2019-10-23 07:50:35 ee5518c
fix(category_theory/adjunctions): fix deterministic timeouts (#1586)

2019-10-23 00:26:28 5722ee8
refactor(data/finset): restate disjoint_filter (#1583)
* refactor(data/finset): restate disjoint_filter
* fix build
* fix build

2019-10-22 16:25:55 31906d8
chore(algebra/category/CommRing/limits): fix typo, remove private (#1584)
* chore(algebra/category/CommRing/limits): fix typo, remove private
* Update src/algebra/category/CommRing/limits.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/algebra/category/CommRing/limits.lean
* Update src/algebra/category/CommRing/limits.lean
* bleh
* Update src/algebra/category/CommRing/limits.lean

2019-10-22 14:30:51 e8bdb05
feat(algebra/group): conversion between `→*` and `→+` (#1569)
* feat(algebra/group): conversion between `→*` and `→+`
* docs
* Rename to allow use of projection notation

2019-10-22 12:22:04 93b1786
feat(archive): add proof of sensitivity conjecture (#1553)
* feat(*): various lemmas from the sensitivity project
* fix proof broken by nonterminal simp
* Update src/linear_algebra/dual.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* lint dual.lean
* remove decidable_mem_of_fintype instance
this leads to loops with `subtype.fintype` under the right decidable_eq assumptions
* dual_lc is invalid simp lemma
* fix namespace
* add extra lemma
* feat(archive): add proof of sensitivity conjecture
* suggestions from Johan
* undo removed whitespace
* update header

2019-10-22 08:36:07 1b4d1ea
chore(algebra/category/*/colimits): remove unnecessary projections (#1588)
* refactor(category_theory,algebra/category): make algebraic categories not [reducible]
Adapted from part of #1438.
* Update src/algebra/category/CommRing/basic.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* adding missing forget2 instances
* Converting Reid's comment to a [Note]
* adding examples testing coercions
* chore(algebra/category/*/colimits): remove unnecessary projections

2019-10-22 06:42:16 2b98d47
feat(category_theory): add `reassoc` annotations (#1558)
* feat(category_theory): add `reassoc` annotations
* Update reassoc_axiom.lean
* Update src/tactic/reassoc_axiom.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/tactic/reassoc_axiom.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/tactic/reassoc_axiom.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/tactic/reassoc_axiom.lean
* Update src/tactic/reassoc_axiom.lean
* Update reassoc_axiom.lean
* Update tactics.lean
* Update tactics.md
* Update reassoc_axiom.lean

2019-10-22 04:37:39 1741a1d
feat(data/nat/basic): division inequalities (#1579)
* feat(data/nat/basic): division inequalities
* whitespace
* fix
* shorten proof

2019-10-22 02:29:49 c9ba7a5
refactor(category_theory,algebra/category): make algebraic categories not [reducible] (#1491)
* refactor(category_theory,algebra/category): make algebraic categories not [reducible]
Adapted from part of #1438.
* Update src/algebra/category/CommRing/basic.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* adding missing forget2 instances
* Converting Reid's comment to a [Note]
* adding examples testing coercions

2019-10-22 00:57:19 340178d
feat(data/finset): inj_on_of_surj_on_of_card_le (#1578)
* feat(data/finset): inj_on_of_surj_on_of_card_le
* Type ascriptions
* function namespace

2019-10-21 22:57:07 39092ab
feat(*): various lemmas from the sensitivity project (#1550)
* feat(*): various lemmas from the sensitivity project
* fix proof broken by nonterminal simp
* Update src/linear_algebra/dual.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* lint dual.lean
* remove decidable_mem_of_fintype instance
this leads to loops with `subtype.fintype` under the right decidable_eq assumptions
* dual_lc is invalid simp lemma
* fix namespace
* add extra lemma
* fix sum_const
* remove unnecessary dec_eq assumptions
* remove decidable_eq assumptions
* document dual.lean
* use classical locale
* remove some unnecessary includes
* remove an unused variable
* Update src/linear_algebra/dual.lean
* fixing a doc comment

2019-10-21 20:49:04+02:00 96ebf8c
docs(README): Remove Patrick from the maintainer list.

2019-10-21 15:12:24 6cf3d04
fix(algebra/group/hom): Fix spurrious arguments (#1581)
This bug was introduced in eb230d3b48f4da49b

2019-10-21 14:34:56 f19dbf2
feat(geometric/manifold): smooth manifolds (#1555)
* smooth manifolds
* fix docstrings
* update docstring
* remove out_param

2019-10-21 12:39:30 f52e952
feat(data/finset): define `finset.Ico.subset_iff` (#1574)

2019-10-21 10:18:48 a4bbbde
feat(topology/topological_fiber_bundle): topological fiber bundles (#1421)
* feat(topology/topological_fiber_bundle): topological fiber bundles
* better definition of fiber bundles

2019-10-21 08:23:05 d2d29ff
feat(algebra/geom_sum): sum of a geom_series over an Ico (#1573)
* feat(algebra/geom_sum): sum of a geom_series over an Ico
* Add two more versions as requested by @jcommelin

2019-10-21 08:06:20 0b660a9
fix(scripts): sanity_check -> lint [ci skip] (#1575)
* fix(scripts): sanity_check -> lint [ci skip]
* also fix in .gitignore

2019-10-21 12:08:57+11:00 809276c
feat(topology/metric_space): polygonal version of the triangle inequality (#1572)
* feat(topology/metric_space): "polygon" version of the triangle inequality
* Add two more versions of the "polygonal" inequality
* Use `dist_le_Ico_sum_dist` in `cauchy_seq_of_summable_dist`

2019-10-20 15:33:20 b1654df
feat(meta/rb_map,tactic/monotonicity): replace rb_map.insert_cons (#1571)
rb_map key (list value) is the same as rb_lmap. Usages of this function
should be replaced with rb_lmap.insert

2019-10-20 10:46:47 74bed0c
feat(tactic/suggest): generalize and reimplement library_search (#1552)
* Create refine_list.lean
The refine_list tactic.
* Create refine_list.lean
The refine_list.lean file
* Update tactics.md
Added refine_list docs.
* Update library_search.lean
Added replace_mvars function
* Update library_search.lean
Added tactic_statement function and some code in the main library_search function which uses it.
* commits
* refine_list commits
* Scott's work
* update tactics.md
* doc strings
* update
* Update refine_list.lean
Removes stray TODO line and changed the docstring for the main refine_list function.
* Update refine_list.lean
Spelling...
* get_state and set_state replace by read and write
* Combined functions and removed run_and_save_state
* removed symmetry from library_search
* removing test that doesn't work without symmetry
* test properly
* rename `refine_list` to `suggest`
* cleaning up
* minor
* better sorting of results
* oops, turn off trace messages again
* type annotation
* optimisation, and simpler logic
* further explanation
* a little more cleanup
* Update src/tactic/library_search.lean
Rob Lewis's refactoring of `tactic_statement`
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Update src/tactic/suggest.lean
Remove `do` in line 82
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Update src/tactic/suggest.lean
Rob's update of suggest in tactic.interactive.
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* changed interactive to tactic.interactive
* used /--/ for copyright headers
* adding comments explaining logic in apply_and_solve, and an optimisation
* refactor no_mvars_in_target
* add missing argument to interactive tactic
* move all printing to the interactive tactic
* refactoring
* cleanup
* refactoring
* complete refactor; library_search is defined in terms of suggest_core now
* restore protect to list.traverse and option.traverse
* Update src/tactic/suggest.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* some doc comments

2019-10-19 22:11:22 f544632
feat(algebra/big_operators): products and sums over `finset.Ico` (#1567)

2019-10-19 19:57:42 173e70a
feat(tactic/lint): rename and refactor sanity_check (#1556)
* chore(*): rename sanity_check to lint
* rename sanity_check files to lint
* refactor(tactic/lint): use attributes to add new linters
* feat(tactic/lint): restrict which linters are run
* doc(tactic/lint): document
* doc(tactic/lint): document list_linters
* chore(tactic/doc_blame): turn doc_blame into a linter
* remove doc_blame import
* fix(test/lint)
* feat(meta/rb_map): add name_set.insert_list
* feat(tactic/lint): better control over which linters are run
* ignore instances in doc_blame
* update lint documentation
* minor refactor
* correct docs
* correct command doc strings
* doc rb_map.lean
* consistently use key/value
* fix command doc strings

2019-10-19 19:04:46 ee398b6
feat(algebra/floor): prove `⌈x⌉ ≤ ⌊x⌋ + 1` (#1568)

2019-10-18 19:41:32 05102ec
chore(category_theory): using simps (#1500)
* chore(category_theory): using simps
* more simps
* remove simp lemma
* revertings overlapping @[simps]

2019-10-18 03:27:47 a1c0ad5
feat(category_theory): def `is_isomorphic_setoid`, `groupoid.iso_equiv_hom` (#1506)
* feat(category_theory): def `is_isomorphic_setoid`, `groupoid.iso_equiv_hom`
* Move to a dedicated file, define `isomorphic_class_functor`
* explicit/implicit arguments
* Update src/category_theory/groupoid.lean
* Update src/category_theory/groupoid.lean
* Update src/category_theory/isomorphism_classes.lean
* Update src/category_theory/isomorphism_classes.lean
* Update src/category_theory/isomorphism_classes.lean

2019-10-17 20:03:17 e5fc2a7
refactor(topology,calculus): change subset condition for composition (#1549)
* refactor(topology,calculus): change subset condition for composition
* improve docstrings
* add is_open Ioi
* reviewer's comments
* typo

2019-10-17 21:46:14+02:00 cc19e30
docs(project): change example project [ci skip]

2019-10-17 07:58:42 905beb0
fix(topology/metric_space): fix uniform structure on Pi types (#1551)
* fix(topology/metric_space): fix uniform structure on pi tpype
* cleanup
* better construction of metric from emetric
* use simp only instead of simp

2019-10-16 21:40:58 ee863ec
feat(ring_theory/algebraic): algebraic extensions, algebraic elements (#1519)
* chore(ring_theory/algebra): make first type argument explicit in alg_hom
Now this works, and it didn't work previously even with `@`
```lean
structure alg_equiv (α β γ : Type*) [comm_ring α] [ring β] [ring γ]
  [algebra α β] [algebra α γ] extends alg_hom α β γ :=
```
* Update algebra.lean
* feat(field_theory/algebraic_closure)
* Remove sorries about minimal polynomials
* Define alg_equiv.symm
* typo
* Remove another sorry, in base_extension
* Work in progress
* Remove a sorry in maximal_extension_chain
* Merge two sorries
* More sorries removed
* More work on transitivity of algebraicity
* WIP
* Sorry-free definition of algebraic closure
* More or less sorries
* Removing some sorries
* WIP
* Fix algebraic.lean
* Fix build, mostly
* Remove stuff about UMP of alg clos
* Prove transitivity of algebraic extensions
* Add some docstrings
* Remove files with stuff for future PRs
* Add a bit to the module docstring
* Fix module docstring
* Include assumption in section injective
* Aesthetic changes to is_integral_of_mem_of_fg
* Little improvements of proofs in algebraic.lean
* Improve some proofs in integral_closure.lean
* Make variable name explicit
* Process comments

2019-10-16 18:45:00 cbf81df
archive(imo1988_q6): a formalization of Q6 on IMO1988 (#1455)
* archive(imo1988_q6): a formalization of Q6 on IMO1988
* WIP
* Clean up, document, and use omega
* Remove some non-terminal simps
* Non-terminal simp followed by ring is fine
* Include copyright statement
* Add comment justifying example
* Process review comments
* Oops, forgot a line
* Improve comments in the proof

2019-10-16 17:05:22 ad8387c
feat(field_theory/finite): cardinality of images of polynomials (#1554)
* feat(field_theory/finite): cardinality of images of polynomials
* docstrings
* Johan's suggestions
* slightly shorten proof

2019-10-16 03:46:48 09fd631
feat(data/zmod/basic): val_min_abs (#1548)
* feat(data/zmod/basic): val_min_abs
* Update basic.lean
* docstring and fix `zmodp` versions

2019-10-14 12:13:21 c3d1bd7
feat(data/polynomial): card_roots' (#1546)

2019-10-13 12:52:09 0ee1272
fix(doc/contribute): fix broken link (#1547)

2019-10-13 09:57:58 d716648
docs(topology): some more module docstrings (#1544)

2019-10-13 08:08:28 d10fd1e
feat(data/int/basic): int.nat_abs_eq_zero (#1545)
* feat(data/int/basic): int.nat_abs_eq_zero
* Update basic.lean
* Update basic.lean

2019-10-12 20:07:23 646c035
refactor(topology): mild reorganization (#1541)
* refactor(topology): mild reorganization
Another attempt to increase cohesion of modules in topology.
The old `constructions` module was starting to turn into a collection
of miscellaneous results, and didn't actually contain any constructions
themselves.
The major changes are:
* `constructions` now contains the definitions of the product, subspace,
  ... topologies, which used to be in `order`. This means that theorems
  involving concepts from `maps` (e.g., embeddings) and constructions
  (e.g., products) are now in `constructions`, not `maps`.
* `subset_properties` and `separation` now import `constructions`
  rather than the other way around. This means that theorems like
  "a product of compact spaces is compact" are now in `subset_properties`,
  not `constructions`.
* `homeomorph` is split off into its own file, which was easy because
  it was at the end of `constructions` anyways.
* reorder universes in constructions
* move README.md to docs/theories/topology.md
* expand documentation of metric/uniform spaces slightly
* update pointers to docs/theories/topological_spaces.md

2019-10-12 18:21:51 92a9a78
fix(topology/continuous_on): avoid duplicate instance arguments (#1542)
This was broken by #1516, caught by sanity_check.

2019-10-12 18:05:26 995add3
fix(topology/algebra/group_completion): remove redundant instance parameters (#1543)

2019-10-12 16:02:53+02:00 76090be
chore(docs/install/debian): Remove old sentence [ci skip]

2019-10-12 10:28:08 2751561
minor updates to the installation instructions (#1538)

2019-10-11 17:54:17 d5de803
refactor(ring_theory/algebra): alg_hom extends ring_hom and use curly brackets (#1529)
* chore(algebra/ring): use curly brackets for ring_hom where possible
* refactor(ring_theory/algebra): alg_hom extends ring_hom and use curly brackets
* fix build
* Update src/ring_theory/algebra.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* fix build

2019-10-11 13:15:04 6b7377a
chore(algebra/ring): use curly brackets for ring_hom where possible (#1525)
* chore(algebra/ring): use curly brackets for ring_hom where possible
* add comments explaining motivation
* move explanation to header
* fix build
* Update src/algebra/ring.lean
* scott's suggestion

2019-10-11 11:48:51 38a0ffe
refactor(ring_theory/algebra): algebra should extend has_scalar not module (#1532)
* refactor(ring_theory/algebra): algebra should extend has_scalar not module
* fix build
* fix build
* Update algebra.lean
* Update module.lean
* fx build
* fix build
* fix again
* fix build
* fix build

2019-10-11 11:26:29 338146b
fix(algebra/char_p): typo in docstring (#1537)
I don't know anything about semirings but I do know there isn't a homomorphism from int to them in general. Do people talk about kernels? (this would be some semi-ideal or something). My change is probably better than what we had but someone who knows what a semiring is might want to check that my suggestion makes sense.

2019-10-11 03:41:02 eb230d3
chore(algebra/group/hom): use curly brackets for instances where possible (#1524)
* chore(algebra/group/hom): use curly brackets for instances where possible
* add comments mentioning motivation behind brackets
* move explanation to header
* fix build
* Update src/algebra/group/hom.lean

2019-10-11 01:59:31 364c26e
chore(algebra/module): use curly brackets instead of square brackets in more places (#1523)
* chore(algebra/module): use curly brackets instead of square brackets in more places
* Add explanation behind implicit brackets
* Update src/algebra/module.lean

2019-10-10 11:14:36 43d3dee
chore(linear_algebra): rename type variables (#1521)
* doc(linear_algebra/basis): add doc
* doc(linear_algebra/basis): shorten docstrings
* refactor(linear_algebra/basis): rename type vars
* style(linear_algebra/basic): change variable names
* chore(linear_algebra/dimension): rename type variables
* remove commented code
* style(linear_algebra/bilinear_form): change variable names
* style(linear_algebra/direct_sum_module): change variable names
* style(linear_algebra/matrix): change variable names
* Rename variables in finsupp_vector_space.lean
* style(linear_algebra/sesquilinear_form): change variable names
* style(linear_algebra/tensor_product): change variable names
* change kappas to bb k's
* style(linear_algebra/finsupp): change variable names
* change universe levels
* change bb k to K

2019-10-10 09:00:38 dc788a0
feat(topology/sequences): every first-countable space is sequential (#1528)
* feat(topology/sequences): every first-countable space is sequential
* fixup style
* fixup comments
* remove redundant type ascription

2019-10-09 19:53:01 7d792ec
chore(ring_theory/adjoin_root): remove some unused decidable_eq (#1530)

2019-10-09 16:00:50 a17a9a6
fix(tactic/{use,ring}): instantiate metavariables in goal (#1520)
`use` now tidies up the subgoals that it leaves behind after instantiating constructors.
`ring` is sensitive to the presence of such metavariables, and we can't guarantee that it doesn't see any,
so it should check for them before it runs.

2019-10-09 14:59:54 45633aa
refactor(topology/algebra/polynomial): move topology.instances.polynomial (#1527)

2019-10-09 14:24:19 0ea83c0
docs(data/holor): some additional documentation (#1526)

2019-10-09 05:24:44 6ccfe5a
feat(algebra/ordered...): Two tiny lemmas (#1522)
* feat(algebra/ordered...): Two tiny lemmas
* style(src/algebra/ordered_field)
Co-Authored-By: Reid Barton <rwbarton@gmail.com>

2019-10-08 16:33:02 7c56051
doc(linear_algebra/basis): add doc (#1503)
* doc(linear_algebra/basis): add doc
* doc(linear_algebra/basis): shorten docstrings

2019-10-08 15:54:18 6b15eb2
chore(analysis): put lemmas in normed_field namespace (#1517)
The motivation is to be able to state, say norm_mul for subrings of a
normed field, typically p-adic integers. That way we can have
padic_int.norm_mul, open the padic_int namespace and have no ambiguous
name.

2019-10-08 13:51:59 afda1a2
refactor(topology/continuous_on): move continuous_{on,within_at} to own file (#1516)
* refactor(topology/continuous_on): move continuous_{on,within_at} to own file
* Update src/topology/continuous_on.lean

2019-10-08 02:26:24 045d931
feat(tactic/find): find defs as well as theorems (#1512)
* feat(tactic/find): find defs as well as theorems
* use env.mfold
* use try

2019-10-08 00:28:49 ef7248f
feat(data/quot): define `quotient.map₂'`, use it for group quotient (#1507)

2019-10-07 22:43:00 bf22408
chore(topology/algebra/group_completion): missing namespace (#1518)

2019-10-07 21:52:59 1bf831f
refactor(topology/dense_embedding): move dense embeddings to new file (#1515)

2019-10-07 21:06:26 b3eb34d
doc(topology/order): module and definition docstrings (#1505)

2019-10-07 17:24:46 f519a12
refactor(topology/list): move topology of lists, vectors to new file (#1514)

2019-10-07 16:34:46 ddbeb7e
refactor(topology/maps): avoid repetition in dense embeddings (#1513)

2019-10-05 15:44:17 78a78ef
feat(group_theory/submonoid): define `subtype.comm_monoid` (#1511)

2019-10-05 12:20:29 7df0e35
chore(topology): sanity_check pass (#1510)
* chore(topology): sanity_check pass
* fix(topology/uniform_space/separation): fix build
* fix(topology/metric_space): some more namespace fixes

2019-10-05 05:18:27 98dbe27
feat(algebra/opposites): add some trivial `@[simp]` lemmas (#1508)

2019-10-04 14:25:15 2f1bd1e
fix(data/list/min_max): docs typo (#1504)

2019-10-04 14:08:27 343237d
feat(algebra/Module): the category of R-modules (#1420)
* Adds Module category
* Move punit module instance to punit_instances.lean
* Minor formatting
* Use coercions for Module morphisms to functions
* Small formatting improvements to Module
* Move module_id to id_apply
* Be specific about the universe Modules live in
* Minor indentation formatting
* updates for #1380
* oops
* remove ext lemma, unnecessary
* reverting changes in TopCommRing
* Change name of `module_hom_comp`
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update todo in src/algebra/category/Module/basic.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>

2019-10-04 11:56:55 494132e
feat(algebra): commuting elements (#1089)
* Not sure how this works
* Small refactor of geometric sums
* Properties of commuting elements
* Geometric sums moved to geom_sum.lean
* Geometric sums, two commuting variables
* Import geom_sum.lean
* Cover commuting elements of noncommutative rings
* Whitespace
* Add file headers
* Delete stray file
* Sum/prod over range 0, range 1
* Add simp lemmas
* Various changes from PR review
* Add semigroup case
* Changes from PR review
* Corrected all_commute to commute.all
* Minor changes from PR review
* Change line endings back to unix
* `@[to_additive]` can't be a `local attribute`
* Rename `add_pow_comm` to `add_pow_of_commute` as suggested by @jcommelin
* Add a few missing instances
* DRY
* Notation for `gsmul` should go into `add_group`, not `group`
* Prove `gsmul_one`
* Reorder `algebra/commute`, add more lemmas
* Add docs, rename `geom_sum₂_mul_add_comm` to `commute.geom_sum₂_mul_add`.
* Rename, add a docstring
* Fix a typo spotted by @ChrisHughes24
* Move common args to `variables`
* Rename `commute.mul` to `commute.mul_right` etc.
* Add some `@[simp]` attributes.
* More `@[simp]`
* Add some `_iff` versions

2019-10-04 00:45:14 3c58f16
doc(linear_algebra/basic): add module and declaration doc strings (#1501)
* doc(linear_algebra/basic): declaration doc strings
* doc(linear_algebra/basic): improve module doc
* Update src/linear_algebra/basic.lean
Co-Authored-By: Floris van Doorn <fpvdoorn@gmail.com>

2019-10-03 19:53:03 f854371
feat(tactic/squeeze_simp): better handling of private declarations (#1498)
* feat(tactic/squeeze_simp): better handling of private declarations
* Update core.lean

2019-10-03 17:37:55 4ca1e63
chore(*): fix errors in library and sanity_check (#1499)
* chore(*): some cleanup by sanity_check
* fix(is_auto_generated): also check for ginductives
* fix(sanity_check): imp_intro is sanity_skip
* fix(sanity_check): don't report names of instances
* first errors
* second errors
* doc(logic/basic): add note
* add link to note
* mention letI

2019-10-03 09:33:33 4bb8d44
feat(data/equiv/algebra): automorphism groups for other structures (#1141)
* Added automorphism groups to data/algebra/lean
* feat(data/equiv/algebra):
added automorphism groups
* feat(data/equiv/algebra)
Added automorphism groups
* Minor formatting
* feat(data/equiv/algebra):  add automorphism groups
* Changes based on comments
* minor change
* changes to namespaces and comments added
* expanding comments
* Update src/data/equiv/algebra.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Update src/data/equiv/algebra.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Update src/data/equiv/algebra.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Update src/data/equiv/algebra.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Update src/data/equiv/algebra.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Update src/data/equiv/algebra.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Update src/data/equiv/algebra.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Update src/data/equiv/algebra.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Update src/data/equiv/algebra.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>
* Added monoid case
* Changed Type to Type* also further up in the file
* typo
* I made it compile but not pretty
* More changes
* fixed typo
* fix universes
* update docs
* minor change
* use coercion rather than to_fun in ext lemmas
* Use ≃+* and coercion in ring_equiv.ext
* arguments of group.aut?
* generalize ring_equiv.ext to semirings
* Various changes
* Use only `mul_aut`, `add_aut`, and `ring_aut` for automorphisms.
* Make `*_equiv.ext` arguments agree with `equiv.ext`.
* Adjust documentation.
* Fix compile, add `add_aut.to_perm`

2019-10-02 16:42:34 bea1c20
fix(dioph): remove global vector3 notation (#1502)
* fix(dioph): remove global vector3 notation
it overloads list notation, and then tries to find a coercion from vector3 to list
* also make other notations in dioph local
* undo localizing ++, overloading that is probably fine
* add comment

2019-10-02 17:27:04+02:00 39ca4f1
chore(.): delete CODEOWNERS

2019-10-01 18:48:13 5ed5f59
feat(tactic/delta_instance): handle parameters and use in library (#1483)
* feat(tactic/core): improve delta_instance handler
* feat(*): use delta_instance derive handler
* feat(tactic/delta_instance): cleaner handling of application under binders
* Revert "feat(tactic/delta_instance): cleaner handling of application under binders"
This reverts commit 4005a2fad571bf922c98f94cbc1154666abc259d.
* comment apply_under_pis
* properly get unused name
* feat(tactic/delta_instance): run with high priority and don't run on inductives
* Update src/tactic/core.lean
Co-Authored-By: Floris van Doorn <fpvdoorn@gmail.com>

2019-10-01 07:53:40 800dba4
chore(linear_map): use curly brackets for type class in linear_map coe_to_fun (#1493)
* chore(linear_map): use curly brackets for type class in linear_map coe_to_fun
*  fix

2019-09-30 14:17:53 374c290
chore(linear_algebra): continue removing decidable_eq assumptions (#1404)
* chore(linear_algebra): continue remocing decidable_eq assumptions
* chore(data/mv_polynomial): get rid of unnecessary changes to instance depth
* fix build
* change class instance depth
* class_instance depth
t Please enter the commit message for your changes. Lines starting
* delete some more decidable_eq
* Update finite_dimensional.lean
* Update finite_dimensional.lean
* Update finite_dimensional.lean

2019-09-30 08:55:58 c6fab42
feat(ring_theory/power_series): order (#1292)
* First start on power_series
* Innocent changes
* Almost a comm_semiring
* Defined hom from mv_polynomial to mv_power_series; sorrys remain
* Attempt that seem to go nowhere
* Working on coeff_mul for polynomials
* Small progress
* Finish mv_polynomial.coeff_mul
* Cleaner proof of mv_polynomial.coeff_mul
* Fix build
* WIP
* Finish proof of mul_assoc
* WIP
* Golfing coeff_mul
* WIP
* Crazy wf is crazy
* mv_power_series over local ring is local
* WIP
* Add empty line
* wip
* wip
* WIP
* WIP
* WIP
* Add header comments
* WIP
* WIP
* Fix finsupp build
* Fix build, hopefully
* Fix build: ideals
* More docs
* Update src/data/power_series.lean
Fix typo.
* Fix build -- bump instance search depth
* Make changes according to some of the review comments
* Use 'formal' in the names
* Use 'protected' in more places, remove '@simp's
* Make 'inv_eq_zero' an iff
* Generalize to non-commutative scalars
* Order of a power series
* Start on formal Laurent series
* WIP
* Remove file. It's for another PR.
* Add stuff about order
* Remove old file
* Basics on order of power series
* Lots of stuff
* Move stuff on kernels
* Move stuff on ker to the right place
* Fix build
* Add elim_cast attributes, update documentation
* Bundle homs
* Fix build
* Remove duplicate trunc_C
* Fix build

2019-09-28 22:44:16 30aa8d2
chore(order/basic): rename `monotone_comp` to `monotone.comp`, reorder arguments (#1497)

2019-09-27 22:59:45 708faa9
feat(geometry/manifold/manifold): define manifolds (#1422)
* feat(geometry/manifold/manifold): define manifolds
* Update src/geometry/manifold/manifold.lean
Typo
Co-Authored-By: Johan Commelin <johan@commelin.net>
* reviewer comments
* notations, comments
* Update src/geometry/manifold/manifold.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* Update src/geometry/manifold/manifold.lean
Co-Authored-By: Scott Morrison <scott@tqft.net>
* manifolds: reviewers comments
* comment on notation for composition
* add documentation on atlases and structomorphisms

2019-09-27 18:10:21 e0c204e
chore(algebra/group_power): move inv_one from group_power to field (#1495)
* chore(algebra/group_power): move inv_one from group_power to field
*  fix

2019-09-27 16:05:10 74f09d0
chore(algebra/char_p): remove some decidable_eq assumptions (#1492)
* chore(algebra/char_p): remove some decidable_eq assumptions
*  fix build

2019-09-27 14:10:25 ce7c94f
feat(reduce_projections): add reduce_projections attribute (#1402)
* feat(reduce_projections): add attribute
This attribute automatically generates simp-lemmas for an instance of a structure stating what the projections of this instance are
* add tactic doc
* use lean code blocks
* missing `lemma`
* checkpoint
* recursively apply reduce_projections and eta-reduce structures
* reviewer comments, shorten name
new name is simps
* avoid name clashes
* remove recursive import
* fix eta-expansion bug
* typo
* apply whnf to type
* add test
* replace nm by decl_name

2019-09-27 11:47:32 efd5ab2
feat(logic/function): define `function.involutive` (#1474)
* feat(logic/function): define `function.involutive`
* Prove that `inv`, `neg`, and `complex.conj` are involutive.
* Move `inv_inv'` to `algebra/field`

2019-09-27 09:36:44 6a79f8a
feat(data/int/basic): to_nat lemmas (#1479)
* feat(data/int/basic): of_nat lemmas
* Adding lt_of_to_nat_lt
* reversing sides of <->

2019-09-27 07:02:36 0bc5de5
chore(*): drop some unused args reported by `#sanity_check_mathlib` (#1490)
* Drop some unused arguments
* Drop more unused arguments
* Move `round` to the bottom of `algebra/archimedean`
Suggested by @rwbarton

2019-09-26 20:42:25 15ed039
fix(scripts/mk_all): ignore hidden files (#1488)
* fix(scripts/mk_all): ignore hidden files
Emacs sometimes creates temporary files with names like `.#name.lean`.
* Fix comment
Co-Authored-By: Floris van Doorn <fpvdoorn@gmail.com>

2019-09-26 13:55:55 3cd3341
feat(field_theory/minimal_polynomial): Basics on minimal polynomials (#1449)
* chore(ring_theory/algebra): make first type argument explicit in alg_hom
Now this works, and it didn't work previously even with `@`
```lean
structure alg_equiv (α β γ : Type*) [comm_ring α] [ring β] [ring γ]
  [algebra α β] [algebra α γ] extends alg_hom α β γ :=
```
* Update algebra.lean
* feat(field_theory/algebraic_closure)
* Remove sorries about minimal polynomials
* Define alg_equiv.symm
* typo
* Remove another sorry, in base_extension
* Work in progress
* Remove a sorry in maximal_extension_chain
* Merge two sorries
* More sorries removed
* More work on transitivity of algebraicity
* WIP
* Sorry-free definition of algebraic closure
* More or less sorries
* Removing some sorries
* WIP
* feat(field_theory/minimal_polynomial): Basics on minimal polynomials
* Remove protected; add docstrings
* Open classical locale
* Stuff is broken
* Rewrite the module doc a bit, revert change to classical
* Little fixes
* explicit-ify proof
* feat(algebra/big_operators): simp lemmas
* Remove decidable_eq instances
* fix(ring_theory/algebra): get ris of dec_eq assumptions so simp triggers again
* break as_sum into its constituent pieces
* fix namespace
* not sure if this is better or worse
* Fix ext naming
* More fixes
* Fix some renaming issues

2019-09-26 12:04:21 f92e812
feat(data/setoid): create file about setoids (#1453)
* setoid complete lattice
* order iso and Galois insertion
* added documentation
* editing docstrings
* not opening lattice twice
* partitions
* typo
* minor edits
* editing docstrings
* applying review comments
* editing implementation notes
* partly applied review comments
* moved length_scanl
* whoops, and removed length_scanl from setoid
* editing implementation notes
* generalising `of_quotient` a bit more
* style tweaks + reviewer changes
* removing Bell numbers for now
* revert docstring
* applying review comments
* generalising to_quotient
* partly applying review comments
* applying review comments
* readding list length lemmas

2019-09-26 07:39:54 7afdab6
refactor(data/equiv/algebra): rewrite `ring_equiv` using bundled homs (#1482)
* refactor(data/equiv/algebra): rewrite `ring_equiv` using bundled homs
Fix some compile errors
* Fix compile, add missing docs
* Docstrings
* Use less `ring_equiv.to_equiv` outside of `data/equiv/algebra`
* Join lines

2019-09-26 00:29:27 2e35a7a
feat(int/basic): add simp-lemma int.of_nat_eq_coe (#1486)
* feat(int/basic): add simp-lemma int.of_nat_eq_coe
* fix errors
in the process also add some lemmas about bxor to simplify proofs
* use coercion in rat.mk

2019-09-25 18:11:13 b39040f
feat(sanity_check): improvements  (#1487)
* checkpoint
* checkpoint
* checkpoint
* feat(sanity_check): improvements
* Now check for classical.[some|choice] and [gt|ge] in theorem statements
* Add [sanity_skip] attribute to skip checks
* Add #sanity_check_all to check all declarations
* Add `-` after command to only execute fast tests
* Reduce code duplication
* Make the performed checks configurable.
* some cleanup
* fix tests
* clarification
* reviewer comments
* fix typo in docstring
* reviewer comments
* update docstring
* Update tactics.md

2019-09-25 04:39:17 3e5dc88
chore(scripts): add executable bit to scripts/mk_all.sh, and create/delete sanity_check_mathlib.lean (#1480)
* chore(scripts): add executable bit to scripts/mk_all.sh
* another
* modify mk_all/rm_all to create a file containing #sanity_check_mathlib
* add sanity_check_mathlib.lean to .gitignore
* Update scripts/mk_all.sh
* Update scripts/mk_all.sh
Co-Authored-By: Johan Commelin <johan@commelin.net>

2019-09-25 01:30:42 491a68e
cleanup(*): use priority 10 for low priority (#1485)
Now we can locally use priorities lower than this low-priority

2019-09-24 15:16:11 00d440a
feat(tactic/import_private): make private definitions available outside of their scope (#1450)
* new user command: `import_private`
* test case
* Update expr.lean
* Update examples.lean
* Update tactics.md
* Update src/tactic/core.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* Update tactics.md
* Update examples.lean
* Update core.lean
* Update core.lean
* Update src/meta/expr.lean
* Update docs/tactics.md
* Update examples.lean
* Update examples.lean

2019-09-24 13:36:31 1eaa292
feat(finset): add has_sep instance (#1477)

2019-09-24 08:39:19 5344da4
feat(algebra/big_operators): simp lemmas (#1471)
* feat(algebra/big_operators): simp lemmas
* remove @[simp]

2019-09-24 08:13:37 201174d
feat(algebra/continued_fractions): add basic defs/lemmas for continued fractions (#1433)
* feat(algebra/continued_fractions): add basic defs/lemmas for continued fractions
* Rename termiantes_at to terminated_at, use long names for cont. fracts.
* Fix indentation, remove subfolders, fix docstrings

2019-09-24 05:46:35 327098b
feat(tactic/library_search): a more powerful library_search (#1470)
* experimental extensions to library_search
* upgrades to library_search
* remove ! for a later PR
* move `run_norm_num`
* oops
* Update src/tactic/library_search.lean
Co-Authored-By: Floris van Doorn <fpvdoorn@gmail.com>
* remove run_norm_num for later

2019-09-24 03:51:35 88f37b5
fix(tactic.lift): fix error messages (#1478)

2019-09-24 00:00:49 425644f
refactor(algebra/*): Make `monoid_hom.ext` etc use `∀ x, f x = g x` as an assumption (#1476)

2019-09-23 22:04:22 604699b
feat(data|set_theory): various new lemmas (#1466)
* various changes
* move section on map down
I need some lemmas about nth for maps, and this seemed like the nicest way to do it
* some lemmas
* replace app by append in names
* lemmas from various proving grounds problems
* sanity_check on list.basic
* small fixes in ordinal and cardinal
also open namespace equiv in ordinal
* small changes
* add docstring
* fix
* rename variable
* simp caused a problem
* update docstring
* fix last two comments

2019-09-23 19:57:18 fd7840a
feat(topology/constructions): is_open_prod_iff' (#1454)
* feat(topology/constructions): open_prod_iff'
* reviewer's comments
* fix build
* golfed; is_open_map_fst

2019-09-23 17:36:28 87d1240
feat(tactic/core): derive handler for simple instances (#1475)
* feat(tactic/core): derive handler for simple algebraic instances
* change comment
* use mk_definition
* Update src/tactic/core.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>

2019-09-22 04:34:09 61ccaf6
chore(*): fix various issues reported by `sanity_check_mathlib` (#1469)
* chore(*): fix various issues reported by `sanity_check_mathlib`
* Drop a misleading comment, fix the proof

2019-09-21 06:12:35 65bf45c
fix(category_theory/finite_limits): fix definition, and construct from finite products and equalizers (#1427)
* chore(category_theory): require morphisms live in Type
* move back to Type
* fix(category_theory/finite_limits): fix definition, and construct from finite products and equalizers
* fixes
* fix duplicate name
* make fin_category a mixin
* fix
* fix
* oops
* fixes
* oops missing universe change
* finish documentation
* fix namespace
* move variables to the right place
* don't repeat yourself
* update module doc-string now that the files have been merged
* inlining has_limit instances

2019-09-21 00:47:17 9c89fa5
feat(tactic/interactive): add fconstructor (#1467)

2019-09-20 11:08:05 708a28c
chore(algebra/group/units): use `def to_units` instead of `has_lift` (#1431)
* chore(algebra/group/units): use `def to_units` instead of `has_lift`
* Move, upgrade to `mul_equiv`, add documentation

2019-09-20 03:28:58 bfe9c6c
chore(data/pfun): run `#sanity_check` (#1463)

2019-09-19 15:32:04 ce105fd
chore(algebra/group): rename `as_monoid_hom` into `monoid_hom.of`, define `ring_hom.of` (#1443)
* chore(algebra/group): rename `as_monoid_hom` into `monoid_hom.of`
This is similar to `Mon.of` etc.
* Fix compile
* Docs, missing universe
* Move variables declaration up as suggested by @jcommelin
* doc-string

2019-09-19 13:17:33 d910283
chore(category_theory/endomorphism): make `map_End` and `map_Aut` use bundled homs (#1461)
* Migrate `functor.map_End` and `functor.map_Aut` to bundled homs
Adjust implicit arguments of `iso.ext`
* Add docstrings

2019-09-19 13:21:35+02:00 1b8285e
chore(readme): Add new maintainers [ci skip]

2019-09-19 02:38:18 b11f0f1
refactor(category_theory): refactor concrete categories (#1380)
* trying to use bundled homs
* bundled monoids should use bundled homs
* fixes
* fixes
* refactor(*): rewrite concrete categories
* Add module documentation
* local instance
* Move files around; don't touch content yet
* Move code around, fix some compile errors
* Add `unbundled_hom.lean`
* Turn `hom` into an argument of `(un)bundled_hom`
For some reason, it helps Lean find coercions from `Ring` category
morphisms to functions.
* Define `unbundled_hom.mk_has_forget`; fix compile
* Add some documentation
* Fix compile
* chore(category_theory): require morphisms live in Type
* move back to Type
* tweaks to doc-comments
* fixing some formatting
* Revert most of the changes to `data/mv_polynomials`
* Drop unused argument, add a comment
* Simplify universe levels in `concrete_category/basic`.
Still fails to compile.
* Simplify universe levels in `concrete_category/{un,}bundled_hom`
* fixes
* Fix an `import`
* Doc cleanup
* update post #1412
* Drop `simp`
* Rename variable
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Rename variable
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Fix more issues reported by @rwbarton
* Rename variable
Co-Authored-By: Reid Barton <rwbarton@gmail.com>
* Use `subtype.eq` instead of `subtype.ext.2`
* Cleanup
* Fix compile: now `ring_hom.ext` takes fewer explicit args
* Fix compile
* Run `sanity_check` on all files modified in this branch
* Fix most of the issues reported
* Except for the old ones in `mv_polynomial` (postponed to a separate
  PR) and a false positive in `single_obj`
* Review `∀` vs `Π`
* Remove some unnecessary parentheses
* add comment
* punit_instances: no need to explicitly provide constants and operations
* Rename `has_forget` to `has_forget₂`
* add comment, simplify comm_ring punit
* Drop `private def free_obj`
* documentation
* fix comment
* tweaks
* comments
* documentation on touched files
* many doc-strings

2019-09-18 17:59:44 066d053
chore(topology/maps): a few tweaks to open_embedding and closed embeddings (#1459)
* chore(topology/maps): a few tweaks to open_embedding and closed
embeddings
aligning them with recent modification to embedding. From the perfectoid
project.
* chore(topology/maps): add missing empty line

2019-09-18 15:46:57 08390f5
refactor(algebra/big_operators,data/finset): use `finset.disjoint` in definitions (#1456)
* Use `finset.disjoint` in `algebra/big_operators`
* New lemma `disjoint_filter`
It should be a painless step from using `filter_inter_filter_neg_eq`
to using this lemma
* Update other dependencies of finset.prod_union and finset.prod_bind
* Reformat some lines to make them fit within 100 characters
* We can actually do away with two non-terminal `simp`s now

2019-09-18 15:43:01+02:00 b51978d
chore(data/mllist): Typo in author name [ci skip] (#1458)

2019-09-18 15:40:20+02:00 874a15a
Update lattice.lean (#1457)

2019-09-17 18:02:24 b41277c
feat(set_theory/game): the theory of combinatorial games (#1274)
* correcting definition of addition, and splitting content into two files, one about games, one about surreals
* add_le_zero_of_le_zero, but without well-foundedness
* progress
* Mario's well-foundedness proof
* getting there!
* success!
* minor
* almost there
* progress
* off to write some tactics
* not quite there
* hmmm
* getting there!
* domineering is hard
* removing unneeded theorems
* cleanup
* add_semigroup surreal
* cleanup
* short proof
* cleaning up
* remove equiv_rw
* move lemmas about pempty to logic.basic
* slightly more comments; still lots to go
* documentation
* finishing documentation
* typo
* Update src/logic/basic.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* fix references
* oops
* change statement of equiv.refl_symm
* more card_erase lemmas; golf domineering proofs
* style changes
* fix comment
* fixes after Reid's review
* some improvements
* golfing
* subsingleton short
* diagnosing decidable
* hmmmhmmm
* computational domineering
* fix missing proofs (need golfing?)
* minor
* short_of_relabelling
* abbreviating
* various minor
* removing short games and domineering from this PR
* style / proof simplification / golfing
* some minor golfing
* adding Reid to the author line
* add @[simp]
* adding two lemmas characterising the order relation
* separating out game and pgame, and discarding lame lemmas
* comment
* fixes

2019-09-17 15:50:00 19a246c
fix(category_theory): require morphisms are in Type, again (#1412)
* chore(category_theory): require morphisms live in Type
* move back to Type
* fixes

2019-09-17 05:06:09 ab2c546
feat(data/quot): define `quotient.map` and `quotient.map₂` (dep: 1441) (#1442)
* chore(algebra/group,logic/relator): review some explicit/implicit arguments
* ring_hom.ext too
* feat(data/quot): define `quotient.map` and `quotient.map₂`
* Add comments
* Fix a typo
Co-Authored-By: Johan Commelin <johan@commelin.net>

2019-09-17 02:44:20 d4cc179
feat(logic/basic): eq_iff_eq_cancel (#1447)
* feat(logic/basic): eq_iff_eq_cancel
These lemmas or not meant for `rw` but to be applied, as a sort of congruence lemma.
* State lemmas as iff
* Make'm simp

2019-09-17 00:58:35 c412527
feat(data/list/sort): ordered_insert lemmas (#1437)
* feat(data/list/sort): ordered_insert lemmas
* add a lemma about L.tail.count

2019-09-16 23:07:50 dd0ff1c
feat(data/nat/basic): dvd_add_self_{left,right} (#1448)
* feat(data/nat/basic): dvd_add_self_{left,right}
Two simp-lemmas of the form
```lean
@[simp] protected lemma dvd_add_self_left {m n : ℕ} :
  m ∣ m + n ↔ m ∣ n :=
dvd_add_right (dvd_refl m)
```
* Oops, lemmas were protected
* Provide version for rings

2019-09-16 22:49:24 929c186
fix(docs/tutorial/category_theory): fix import (#1440)
* fix(docs/tutorial/category_theory): fix import
* fix(.travis.yml): Travis stages to build docs/
* cache docs/ in travis build

2019-09-16 21:07:29 a3ccc7a
chore(category_theory/notation): update notation for prod and coprod (#1413)
* updating notation for categorical prod and coprod
* update notation

2019-09-16 16:01:04+02:00 b2b0de4
feat(algebra/group/basic): mul_left_eq_self etc (#1446)
Simp-lemmas for groups of the form a * b = b ↔ a = 1.

2019-09-16 09:26:53 d7f0e68
chore(algebra/group,logic/relator): review some explicit/implicit args (#1441)
* chore(algebra/group,logic/relator): review some explicit/implicit arguments
* ring_hom.ext too

2019-09-14 05:00:40 81a31ca
chore(data/*): flipping inequalities (#1436)
* chore(data/*): flipping inequalities
* some more
* Update src/algebra/order_functions.lean
* fixing some names
* fix
* fixes
* fixes
* making names/comments uniform
* fixes
* fixes
* fix
* rename
* fixes
* fixes
* fix
* renames
* I'm so bad at this
* ...
* fixes

2019-09-13 07:38:04 e3234f0
feat(algebra/ring): add coercions from →+* to →* and →+ (#1435)
* feat(algebra/ring): add coercions from →+* to →* and →+
* two lemmas simplifying casts
* add squash_cast attributes

2019-09-11 23:51:16 590fb89
chore(category_theory/functor_category): improve comment warning about hcomp_assoc [ci skip] (#1434)
* expanding comment
* no scare quotes

2019-09-11 17:42:41 140a606
feat(well_founded_tactics):  patch default_dec_tac (#1419)
* let simp flip inequalities
* feat(well_founded_tactics):  patch default_dec_tac
* Keeley's suggested syntax, and adding to the docs
* more
* add docs

2019-09-11 12:46:21 e27142a
chore(*): renaming files constructing category instances (#1432)

2019-09-11 03:52:18 8a5156f
fix(algebra/*/colimits): avoid explicit `infer_instance` (#1430)
With an explicit universe level Lean can do it automatically.

2019-09-11 01:49:04 45fe081
feat(logic): make some decidability proofs [inline] (#1393)
* feat(logic): make some decidability proofs [inline]
* inline more decidability proofs
* test
* import logic.basic in test

2019-09-10 23:38:55 8e46fa5
chore(algebra/group/to_additive): map_namespace should make a meta constant (#1409)
* chore(algebra/group/to_additive): map_namespace should make a meta constance
`map_namespace` now produces a `meta constant` instead of a constant. This means that after importing `group_theory/coset` and typing `#print axioms`, `quotient_group._to_additive` is not in the list, since it is now a `meta constant`. This is a little bit neater, and it doesn't look like we're adding any axioms.
* Update to_additive.lean
* Update to_additive.lean

2019-09-10 22:44:22 e2f904e
feat(tactic/auto_cases): run auto_cases on false and psigma (#1428)

2019-09-10 19:55:17 c87ec0e
feat(tactic/{abel,ring}): state conditions of tactics more precisely (#1423)

2019-09-10 15:33:29 2dd6398
let simp flip inequalities (#1418)

2019-09-10 11:26:37 0935e8b
feat(algebra/group/units): add some lemmas about `divp` (#1388)
* feat(algebra/group/units): add some lemmas about `divp`
* Rename lemmas, add new ones

2019-09-10 09:32:30 fe1575a
chore(topology): sanity_check pass (#1416)
* chore(topology): sanity_check pass
* improvement
* avoid _inst_3 to recover instance

2019-09-10 01:55:13 72d6325
feat(sanity_check): greatly improve performance (#1389)
* feat(sanity_check): greatly improve performance
* move and rename is_in_mathlib_aux
* use boolean connectives in some other places
* remove some whitespace
* fix parentheses, fix tests
the tests correctly spotted a mistake I made
* add ! as boolean negation
* fix binding strength
* undo the use of boolean connectives
* add back notation ! for bnot

2019-09-09 21:11:13 228d5ba
feat(algebra/big_operators): sum_eq_zero_iff_of_nonpos (#1424)
* feat(algebra/big_operators): sum_eq_zero_iff_of_nonpos
* more order_dual instances

2019-09-08 16:37:05 313fe11
feat(algebra/floor): Split floor from archimedean file. (#1372)
* feat(algebra/floor): Split floor from archimedean file.
* feat({algebra,rat}/floor): move lemmas/defs from rat.floor to algebra.floor

2019-09-08 12:00:15 37b6746
feat(data/list/basic): make chain.nil a simp lemma (#1414)

2019-09-08 08:47:37 6f7224c
feat(data/list/defs): move list.sum to list/defs.lean (#1415)
* feat(data/list/defs): move list.sum to list/defs.lean
* add comment

2019-09-08 06:22:25 8bdb147
feat(topology/local_homeomorph): local homeomorphisms (#1398)
* feat(topology/local_homeomorph): local homeomorphisms
* local_homeomorph: reviewer comments

2019-09-07 05:32:33 10cb0d1
feat(topology/constructions): distributivity of products over sums (#1059)
* feat(topology/constructions): distributivity of products over sums
* Update src/topology/maps.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Reverse direction of sigma_prod_distrib

2019-09-07 05:17:43 d6a0ac5
refactor(category_theory/limits/shapes/pullbacks): proof golf (#1407)
* refactor(category_theory/limits): make is_[co]limit not a class
* refactor(category_theory/limits/shapes/pullbacks): proof golf

2019-09-07 05:00:00 8eab714
refactor(category_theory/limits): make is_[co]limit not a class (#1405)

2019-09-06 22:20:07+02:00 a7f268b
fix(category_theory/limits/shapes): doc typo [ci skip] (#1406)

2019-09-06 12:45:57+02:00 a5fa162
chore(data/mv_polynomial): use classical logic (#1391)
* refactor(linear_algebra/lc): use families not sets
* refactor(linear_algebra/lc): merge lc into finsupp
* refactor(linear_algebra/lc): localize decidability
* refactor(linear_algebra/lc): finsupp instances
* refactor(linear_algebra/lc): use families instead of sets
* refactor(linear_algebra/lc): remove set argument in lin_indep
* refactor(linear_algebra/lc): clean up
* refactor(linear_algebra/lc): more clean up
* refactor(linear_algebra/lc): set_option in section
* refactor(linear_algebra/lc): decidability proof
* refactor(linear_algebra/lc): arrow precedence
* refactor(linear_algebra/lc): more cleanup
* make data.finsupp classical
* trouble with data/polynomial
* ...
* more classical
* merge
* merge
* merge
* fix
* removing more
* minor
* ?
* progress, using convert
* working?
* remove some unnecessary converts
* fixes
* err
* oops
* various
* various
* fix free_comm_ring
* remove test lines
* fix linear_algebra/matrix.lean
* Fix errors in power_series.lean
* trying to turn instances back on
* restore some instances
* no joy
* fix mv_polynomial errors
* another convert

2019-09-05 21:37:18 1a0ed80
fix(naming): typo [ci skip] (#1401)
* fix(naming): typo [ci skip]
* more typos

2019-09-05 11:03:20 b1920f5
chore(algebra/ordered_field): add simp attributes to inv_pos' and others (#1400)

2019-09-05 09:22:42 7f20843
chore(order/filter): rephrase filter.has_le (#1399)
The goal of this tiny refactor is to prevent `filter.sets` leaking when
proving a filter g is finer than another one f. We want the goal to be
`s ∈ f → s ∈ g` instead of the definitionaly equivalent
`s ∈ f.sets ∈ g.sets`

2019-09-05 02:48:09 2854909
feat(bounded_lattice/has_lt): add a `lt` relation independent from `l… (#1366)
* feat(bounded_lattice/has_lt): add a `lt` relation independent from `le` for `has_top`
* use priority 10 instead of 0

2019-09-05 00:46:57 6292825
feat(data/equiv/local_equiv): define local equivalences  (#1359)
* feat(data/equiv/local_equiv): define local equivalences
* add doc
* add extensionality attribute
* sanity_check

2019-09-04 22:48:55 79a1f84
fix(tactic/norm_num): bugfix bad proof application (#1387)
* fix(tactic/norm_num): bugfix bad proof application
* add test case that used to fail
* add try_for
* fix typecheck test
* increase test timeout

2019-09-04 20:52:45 3c224f0
feat (logic/basic): exists_eq' (#1397)
Not a great name, but `exists_eq_left` and `exists_eq_right` are taken, and it's unlikely to be used except in `simp`

2019-09-04 19:28:57 65ffb7b
fix(topology/uniform_space): simplify continuity proof (#1396)

2019-09-04 17:22:01 06cffeb
feat(order): add lemma (#1375)

2019-09-04 12:59:55 5d59e8b
feat(category_theory): finite products give a monoidal structure (#1340)
* providing minimal API for limits of special shapes
* apis for special shapes
* start
* fintype instances
* copy-paste from monoidal-categories-reboot
* associators, unitors, braidings for binary product
* minor
* minor
* map
* minor
* instances
* blah
* chore(category_theory/monoidal): monoidal_category doesn't extend category
* minor
* minor
* assoc lemma
* coprod
* done?
* fix import
* names
* cleanup
* fix reassoc
* comments
* comments

2019-09-04 12:27:02 8cd16b9
feat(category_theory/sums): sums (disjoint unions) of categories (#1357)
* feat(category_theory/sum): direct sums of categories
* minor
* tidying
* Fix white space, remove old comments
* rearranging, associator
* add TODO comment about unitors
* fix import
* create /basic.lean files

2019-09-04 06:33:49 b079298
feat(tactic/doc_blame): Use is_auto_generated (#1395)

2019-09-03 21:08:11 ff47fa3
feat(measure_theory): prove that the Giry monad is a monad in the category_theory sense (#1259)
* feat(measure_theory): prove that the Giry monad is a monad in the category_theory sense
* Add spaces to fix alignment
* document Measure
* Add documentation
* Add space before colon

2019-09-03 18:22:38 b5b40c7
chore(*): use localized command in mathlib (#1319)
* chore(*): use localized command in mathlib
remove some open_locale instances
in files that do not import tactic.basic
fix some errors
type class inference failure
fix some more errors
typo
fully specify all names in localized notation
also add some comments to the doc
one more localized import
checkpoint
there is something seriously wrong with type class inference + the transition from constructive to classical logic. Suppose you want to work purely classically, and state a lemma where the statement requires a proof of decidable equality on one of the types. For an abstract type, the only instance of this is classical.prop_decidable, unless you add explicitly an argument that the respective type has decidable equality (which you tend to not want to do if you only work classically). Now when you apply this lemma to a concrete type, where we can infer decidability of equality, type class inference will complain that we used the wrong instance (which is kinda insane: by unification it knows exactly which instance we want to use). A big problem with this, is that you have no idea you will run into this issues later when stating the lemma: Lean will happily accept it
* add TODOs
* fix some errors
* update .gitignore
* fix some timeouts
* replace a couple more local notations

2019-09-03 17:52:30 4b6fcd9
perf(data/gaussian_int): speed up div and mod (#1394)
avoid using `int.cast`, and use `rat.of_int`.
This sped up `#eval (⟨1414,152⟩ : gaussian_int) % ⟨123,456⟩` from about 5 seconds to 2 milliseconds

2019-09-03 17:20:07 974d413
chore(linear_algebra/determinant): simplify det_mul proof (#1392)
* chore(linear_algebra/determinant): simplify det_mul proof
Minor improvement to the proof of `det_mul`
* make det_mul_aux more readable

2019-09-03 15:36:36 3a58b50
feat(data/equiv/basic): add more functions for equivalences between complex types (#1384)
* Add more `equiv` combinators
* Fix compile
* Minor fixes
* Update src/data/equiv/basic.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>

2019-09-03 13:42:57 a199f85
feat(topology/uniform_space): Abstract completions (#1374)
* feat(topology/uniform_space): Abstract completions
Define abstract completions, study their properties and derived
constructions. Use this study in the concrete completion files,
and for comparing completions constructed at different level of
generality, especially for real numbers.
This comes from the perfectoid spaces project.
* Apply suggestions from code review by Johan
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Fix build.
When I created the PR, github complained it couldn't automatically
merge, and I was not careful enough when I merged...
* chore(topology/uniform_space): rename completion_pkg
* fix(compare_reals): create namespace
* Fix build

2019-09-03 11:51:43 c7d3629
fix(restate_axiom): create lemmas from lemmas (#1390)

2019-09-03 09:24:11+02:00 94205c4
feat(data/fintype): prove `card (subtype p) ≤ card α` (#1383)
* feat(data/fintype): prove `card (subtype p) ≤ card α`
* Add `cardinal.mk_le_of_subtype`
* Rename `mk_le_of_subtype` to `mk_subtype_le`, use it in `mk_set_le`
Earlier both `mk_subtype_le` and `mk_set_le` took `set α` as an
argument. Now `mk_subtype_le` takes `α → Prop`.

2019-09-02 14:19:49 227b682
feat(category_theory): define `iso.conj` and friends (#1381)
* feat(category_theory): define `iso.conj` and friends
* Drop 2 `@[simp]` attributes

2019-09-02 12:18:38 57d4b41
feat(category_theory/limits): construct limits from products and equalizers (#1362)
* providing minimal API for limits of special shapes
* apis for special shapes
* fintype instances
* associators, unitors, braidings for binary product
* map
* instances
* assoc lemma
* coprod
* fix import
* names
* adding some docs
* updating tutorial on limits
* minor
* uniqueness of morphisms to terminal object
* better treatment of has_terminal
* various
* not there yet
* deleting a dumb file
* remove constructions for a later PR
* getting there
* oops
* of_nat_iso
* feat(category_theory/limits/of_nat_isp)
* progress on limits from products and equalizers
* Update src/category_theory/limits/limits.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/category_theory/limits/limits.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* use @[reassoc]
* fixing after rename
* use @[reassoc]
* fix renaming
* complete construction of limits from products and equalizers
* cleanup
* cleanup
* name instance
* whitespace
* Update src/category_theory/limits/limits.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* use simpa

2019-09-02 07:54:36 fe7695b
chore(data/nat/gcd): remove pointless parentheses (#1386)

2019-09-02 06:00:19 d35dc13
feat(data/nat/gcd): add simple lemmas (#1382)
* feat(data/nat/gcd): more simple lemmas
* Prove `iff` instead of one side implication

2019-09-01 11:29:41 6d2b3ed
chore(category_theory/notation): consistently use notation for functor.id (#1378)
* chore(category_theory/notation): consistently use notation for functor.id
* oops, overzealous search-and-replace
* more
* more
* more

2019-08-31 22:37:28 df65dde
feat(data/option/basic): eq_some_iff_get_eq (#1370)
* feat(data/option/basic): eq_some_iff_get_eq
* Update basic.lean

2019-08-31 20:38:30 72ce940
feat(category_theory/limits/of_nat_iso): missing parts of the limits API (#1355)
* feat(category_theory/limits/of_nat_isp)
* Update src/category_theory/limits/limits.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/category_theory/limits/limits.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* use @[reassoc]
* fixing after rename
* fix renaming

2019-08-30 20:07:24 455f060
chore(unicode): improve arrows (#1373)
* chore(unicode): improve arrows
* grammar
Co-Authored-By: Johan Commelin <johan@commelin.net>
* moar

2019-08-30 13:16:52-04:00 4c5c4dc
doc(contribute): add detailed instructions for cache-olean [skip ci] (#1367)

2019-08-30 16:13:59 2db7fa4
feat(sanity_check): improve sanity_check (#1369)
* feat(sanity_check): improve sanity_check
- add hole command for sanity check (note: hole commands only work when an expression is expected, not when a command is expected, which is unfortunate)
- print the type of the unused arguments
- print whether an unused argument is a duplicate
- better check to filter automatically generated declarations
- do not print arguments of type `parse _`
- The binding brackets from `tactic.where` are moved to `meta.expr`. The definition is changed so that strict implicit arguments are printed as `{{ ... }}`
* typos
* improve docstring
* Also check for duplicated namespaces
Fun fact: I had to remove an unused argument from `decidable_chain'` for my function to work.

2019-08-30 11:48:46 afe51c7
feat(category_theory/limits): special shapes (#1339)
* providing minimal API for limits of special shapes
* apis for special shapes
* fintype instances
* associators, unitors, braidings for binary product
* map
* instances
* assoc lemma
* coprod
* fix import
* names
* adding some docs
* updating tutorial on limits
* minor
* uniqueness of morphisms to terminal object
* better treatment of has_terminal
* various
* not there yet
* deleting a dumb file
* remove constructions for a later PR
* use @[reassoc]
* Update src/category_theory/limits/shapes/finite_products.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* improving the colimits tutorial
* minor
* notation for `prod_obj` and `sigma_obj`.
* reverting to `condition`
* implicit arguments
* more implicit arguments
* minor
* notational for initial and terminal objects
* various
* fix notation priorities
* remove unused case bash tactic
* fix whitespace
* comment
* notations

2019-08-29 21:31:25 1278efd
Fix `tactic.exact` timeout in `apply'` (#1371)
Sometimes `tactic.exact` may timeout for no reason. See zulip discussion https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.60apply'.60timeout/near/174415043

2019-08-29 12:31:24 1ff3585
feat(analysis/calculus/times_cont_diff): adding a lemma (#1358)
* feat(analysis/calculus/times_cont_diff): adding a lemma
* doc
* change k to \bbk

2019-08-28 21:31:26 3b19503
refactor(category_theory/single_obj): migrate to bundled morphisms (#1330)
* Define equivalence between `{ f // is_monoid_hom f }` and `monoid_hom`
* Migrate `single_obj` to bundled homomorphisms
Fix a bug in `to_End`: the old implementation used a wrong monoid
structure on `End`.
* Fix `Mon.hom_equiv_monoid_hom` as suggested by @jcommelin

2019-08-28 16:20:58 d4c1c0f
fix(tactic.basic): add sanity_check import (#1365)

2019-08-28 10:14:09 721d67a
fix(topology/uniform_space): sanity_check pass (#1364)

2019-08-28 09:17:30 79dccba
refactor: change field notation from k to \bbk (#1363)
* refactor: change field notation from k to \bbK
* change \bbK to \bbk

2019-08-27 23:19:25+02:00 45df75b
fix(topology/algebra/uniform_group): tiny priority tweak

2019-08-26 17:11:07 cc04ba7
chore(algebra/ring): change semiring_hom to ring_hom (#1361)
* added bundled ring homs
* removed comment
* Tidy and making docstrings consistent
* fix spacing
* fix typo
Co-Authored-By: Johan Commelin <johan@commelin.net>
* fix typo
Co-Authored-By: Johan Commelin <johan@commelin.net>
* whoops, actually removing instances
* change semiring_hom to ring_hom
* corrected docstring

2019-08-26 14:50:25 914c572
feat(data/rat): add lt, le, and eq def lemmas, move casts into rat to basic (#1348)

2019-08-26 08:13:13 7bc18a8
feat(data/fin): coe_eq_val and coe_mk (#1321)

2019-08-23 12:07:10+02:00 253a9f7
fix(docs/install): resize extensions icons for consistency [ci skip]

2019-08-23 12:00:49+02:00 91a9b4b
doc(install/*): new VS-code icon [ci skip]

2019-08-23 08:45:41 9a42572
feat(tactic/apply'): apply without unfolding type definitions (#1234)
* feat(tactic/apply'): apply without unfolding type definitions
* Update src/tactic/interactive.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* improve doc
* more doc
* Update core.lean
* add test case
* add test case
* improve treatment of type class instances for apply'
* tweak application of instance resolution
* fix
* move `apply'` to its own file
* adjust docs
* import apply from tactic.default
* fix import in test
* Update tactics.lean

2019-08-22 18:22:53 f74cc70
fix(tactic/tauto): use intro1 to deal with negations (#1354)
* fix(tactic/tauto): use intro1 to deal with negations
* test(tactic/tauto): add tests

2019-08-22 15:27:06 40b09aa
feat(*): small lemmas from the sensitivity formalization (#1352)
* feat(set_theory/cardinal): norm_cast attributes and extra lemma
* feat(logic/basic): ne.symm_iff
* feat(data/fin): succ_ne_zero
* feat(data/bool): bxor_of_ne
* feat(algebra/big_operators, data/fintype): {finset,fintype}.card_eq_sum_ones
* feat(data/set): range_restrict
* feat(data/finset): inter lemmas
* Reid's corrections
* fixes
* fix cardinal power lemma
* fixes
* Update bool.lean

2019-08-22 10:31:24 f442a41
docs(category/monad,bitraversable): add module docstrings #1260  (#1286)
* docs(category/monad,bitraversable): add module docstrings
* more docs
* still more doc
* doc about traversable

2019-08-22 09:32:22+02:00 a489719
Rename Groupoid.lean to groupoid_category.lean (#1353)
This fixes a problem with `category_theory/groupoid` and `category_theory/Groupoid` having the same name except for the case of the first letter, which causes a problem on case insensitive file systems.

2019-08-21 19:35:06 8de4273
feat(category_theory/Groupoid): category of groupoids (#1325)
* feat(category_theory/Groupoid): category of groupoids
* fix comment
* more articles

2019-08-21 12:19:41 35144f2
feat(conv/conv): conv tactics for zooming/saving state (#1351)
* feat(conv/conv): conv tactics for zooming/saving state
* rob's doc fixes
* nicer docs

2019-08-21 11:04:30 3f915fc
feat(archive): add the cubing a cube proof (#1343)
* feat(archive): add the cubing a cube proof
* rename file
* add leanpkg configure to travis

2019-08-21 05:42:55 c512875
refactor(*): rewrite `to_additive` attribute (#1345)
* chore(algebra/group/to_additive): auto add structure fields
* Snapshot
* Rewrite `@[to_additive]`
* Drop more explicit `name` arguments to `to_additive`
* Drop more explicit arguments to `to_additive`
* Map namespaces with `run_cmd to_additive.map_namespace`
* fix(`group_theory/perm/sign`): fix compile
* Fix handling of equational lemmas; fix warnings
* Use `list.mmap'`

2019-08-21 03:42:10 733f616
chore(gitignore): ignore files generated by mk_all script (#1328)

2019-08-21 01:39:40 8070049
feat(tactic/lift): add lift tactic (#1315)
* start on lift_to tactic
* finish lift tactic
* add instance to lift rat to int
this required me to move some lemmas from rat/order to rat/basic which had nothing to do with the order on rat
* move test to test/tactic.lean
* add header and documentation
* add more/better documentation
* typo
* more documentation
* rewrite, minor
* move import
* remove can_lift attribute
now we automatically construct the simp set used to simplify
Thanks to @cipher1024 for the idea and writing the main part of this code
* remove occurrence of [can_lift]

2019-08-20 23:38:53 26a3e31
chore(category_theory/monoidal): monoidal_category doesn't extend category (#1338)
* chore(category_theory/monoidal): monoidal_category doesn't extend category
* remove _aux file, simplifying
* make notations global, and add doc-strings

2019-08-20 21:37:32 0dbe3a9
feat(algebra,equiv,logic): add various lemmas (#1342)
* add various lemmas
* add simp lemma
* fix simp
* rename to subtype_sigma_equiv

2019-08-20 15:42:54 14024a3
feat(linear_algebra/bilinear_form, linear_algebra/sesquilinear_form, ring_theory/maps): bilinear/sesquilinear forms (#1300)
* Create involution.lean
* Update involution.lean
* Update involution.lean
* Rename involution.lean to maps.lean
* Create bilinear_form.lean
* Create sesquilinear_form.lean
* Update sesquilinear_form.lean
* Style fixes
* Update sesquilinear_form.lean
* Style fixes
* fix typo

2019-08-20 13:12:03 6f747ec
feat(data/vector2): nth_map (#1349)
* feat(data/vector2): nth_map
* Update vector2.lean
* Update vector2.lean

2019-08-20 12:14:30 8771432
doc(tactic/ring2): document parts of ring2 (#1208)
* doc(tactic/ring2): document parts of ring2
* feat(data/tree): refactor binary trees into their own module
* feat(tactic/ring2): resolve correct correctness
* chore(tactic/ring2): move copyright into comment
* doc(tactic/ring2): wording

2019-08-20 11:13:39+02:00 f3eb8c2
chore(data/matrix): simp attribute for transpose_tranpose (#1350)

2019-08-19 21:05:01 5a309a3
fix(category_theory/eq_to_hom): remove bad simp lemmas (#1346)

2019-08-19 19:01:37 9eefd40
refactor(data/list/min_max): use with_top for maximum and define argmax (#1320)
* refactor(data/list/min_max): use option for maximum and define argmax
* prove minimum_singleton
* fix build
* use with_bot for maximum
* update comments

2019-08-19 17:09:44 92fa24c
feat(data/fin): val simp lemmas (#1347)
* feat(data/fin): val simp lemmas
* Update fin.lean

2019-08-19 09:36:05-04:00 6fbcc04
feat(tactic/reassoc_axiom): produce associativity-friendly lemmas in category theory (#1341)

2019-08-19 13:15:20 8f09b0f
fix(tactic/omega): simplify with mul_one and one_mul (#1344)
* Simplify multiplication by one
* Remove debug trace
* Fix integer version of omega

2019-08-19 11:20:20 9c1718a
feat(tactic/obtain): make type argument optional (#1327)
* feat(tactic/obtain): make type argument optional
* fix(tactic/obtain): unnecessary steps
* feat(tactic/obtain): simplify cases

2019-08-18 19:43:51 ab7d39b
feat(data/vector2): update_nth (#1334)
* feat(data/vector2): update_nth
* naming and docstrings
* remove double namespace fom vector.nth_mem

2019-08-17 20:50:04 538d3f6
feat(data/vector2): to_list_map (#1335)

2019-08-17 18:55:40 66fa499
feat(data/list/basic): list.mem_insert_nth (#1336)
* feat(data/list/basic): list.mem_insert_nth
* Update src/data/list/basic.lean
Co-Authored-By: Floris van Doorn <fpvdoorn@gmail.com>

2019-08-16 10:20:57 a1dda1e
feat(linear_algebra/matrix): linear maps are linearly equivalent to matrices (#1310)
* linear map to matrix (WIP)
* WIP
* feat (linear_algebra/matrix): lin_equiv_matrix
* feat (linear_algebra.basic): linear_equiv.arrow_congr, std_basis_eq_single
* change unnecessary vector_space assumption for equiv_fun_basis to module
* add docstrings and refactor
* add docstrings
* move instance to pi_instances
* add docstrings + name change
* remove duplicate instance

2019-08-16 02:19:14 2e76f36
feat(tactic/sanity_check): add #sanity_check command (#1318)
* create a file sanity_check
Currently it contains a tactic that detects unused arguments in declarations
In the future I want to add other cleaning tactics
* fix last tactic
* update comment
* checkpoint
* checkpoint
* rewrite sanity_check
* update sanity_check
* move results to appropriate files
* move some declarations
Some declarations in tactic.core made more sense in meta.expr
tactic.core now imports string.defs (which adds very little)
add documentation
* add entry to docs/tactic.md
* fix errors
* some extra documentation
* add test
* add doc to meta.expr

2019-08-16 00:19:33 397c016
feat(tactic/finish): parse ematch lemmas with `finish using ...` (#1326)
* feat(tactic/finish): parse ematch lemmas with `finish using ...`
Add test
Add documentation
* Add docstrings
* Formatting and docstrings
* Clean up test
* Add even more docstrings
clean up match expressions
Fix typo

2019-08-15 22:29:27 2e90bed
feat(analysis/complex/exponential): prove that rpow is continuous (#1306)
* rpow is continuous
* Update exponential.lean
* Fix things
* Fix things
* Fix things
* Fix things

2019-08-15 20:26:47 74c25a5
feat(*): lemmas needed for two projects (#1294)
* feat(multiplicity|enat): add facts needed for IMO 2019-4
* feat(*): various lemmas needed for the cubing a cube proof
* typo
* some cleanup
* fixes, add choose_two_right
* projections for associated.prime and irreducible

2019-08-15 18:18:27 fa68342
feat(data/rat): move lemmas to right file, add nat cast lemmas, remove (#1333)
redundant lemma

2019-08-15 15:09:08 73cc56c
refactor(data/fintype): shorten proof of card_eq (#1332)

2019-08-15 11:27:01 ebbbb76
doc(contribute/style): remove outdated syntax [ci skip] (#1329)
* doc(contribute/style): remove outdated syntax [ci skip]
* doc(contribute/style): mistaken find/replace

2019-08-15 10:26:30 3d512f7
chore(category_theory/isomorphism): docstring, DRY, add some trivial lemmas (#1309)
- add module docstring;
- use `as_iso` more aggressively to avoid repeating proofs;
- add more trivial lemmas.

2019-08-15 05:08:24 e48ad0d
chore(*): migrate `units.map` to bundled homs (#1331)

2019-08-14 18:01:25 02548ad
fix(data/mllist): fix off-by-one bug in mllist.take (#1298)
* Update mllist.lean
Changed `n` to `n+1` in line 72. This fixes a bug in the `take` function for monadic lazy lists (mllist).
* add a test showing correct behaviour of take

2019-08-14 15:58:41 0bc4a40
feat(data/pequiv): symm_single_apply (#1324)

2019-08-13 15:12:57 2a131d9
fix(.github): typo (#1323)

2019-08-13 15:19:45+02:00 5796465
fix(algebra/ring): fix typo in docstring (#1322)

2019-08-12 17:42:15 900c53a
feat(scripts): add scripts to import all mathlib files (#1281)
* add scripts to import all mathlib files
mk_all makes a file all.lean in each subdirectory of src/, importing all files in that directory, including subdirectories
rm_all removes the files all.lean
* also delete all.olean files
* remove unnecessary maxdepth
* add comments, and generate comments

2019-08-12 17:59:16+02:00 df1fb07
doc(contribute): add link to doc requirements (#1317)

2019-08-12 15:28:09 92a5424
feat(data/fin): mem_find_iff (#1307)
* feat(data/fin): mem_find_iff
* add find_eq_some_iff (#1308)

2019-08-12 13:41:27 f46b0dc
feat(algebra/ordered_field): le_div_iff_of_neg (#1311)
* feat(algebra/ordered_field): le_div_iff_of_neg
* Update ordered_field.lean
* Update ordered_field.lean
* Update ordered_field.lean
* Update ordered_field.lean

2019-08-12 11:55:24 3bd3dcd
feat(data/option/basic): bind_eq_none' (#1312)
* feat(data/option/basic): bind_eq_none'
* Update basic.lean
* fix build and add simp

2019-08-12 10:14:40 01cb33c
feat(algebra/ordered_ring): pos_of_mul_neg_left and similar (#1313)

2019-08-11 09:21:07 37d4eda
Delete repeated item (#1316)

2019-08-10 04:04:40 3aad7f1
feat(data/matrix/pequiv): partial equivalences to represent matrices (#1228)
* feat(matrix/pequiv): partial equivalences to represent matrices
* use notation for pequiv
* correct imports
* finish correcting imports
* add some docs
* Add documentation
* improve documentation

2019-08-09 09:57:38 a79794a
feat(archive): add archive (#1295)
* feat(archive): add archive
* reformulate sentence

2019-08-08 14:14:07+02:00 dd4db5f
fix(tactic/linarith): handle neq goals (#1303)

2019-08-08 02:35:57 9c4dd95
feat (analysis/normed_space): Define real inner product space (#1248)
* Inner product space
* Change the definition of inner_product_space
The original definition introduces an instance loop.
See Zulip talks: https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/ring.20tactic.20works.20at.20one.20place.2C.20fails.20at.20another
* Orthogonal Projection
Prove the existence of orthogonal projections onto complete subspaces in an inner product space.
* Fix names
* small fixes

2019-08-07 07:50:47 a2a867e
feat(algebra/ring): bundled semiring homs (#1305)
* added bundled ring homs
* removed comment
* Tidy and making docstrings consistent
* fix spacing
* fix typo
Co-Authored-By: Johan Commelin <johan@commelin.net>
* fix typo
Co-Authored-By: Johan Commelin <johan@commelin.net>
* whoops, actually removing instances

2019-08-06 15:58:05+02:00 57c1d6d
chore(data/matrix): protect some lemmas (#1304)

2019-08-05 21:37:42 88ad3cf
feat(tactic/push_neg): add optional name argument to contrapose (#1302)

2019-08-05 15:01:21 de83205
refactor(algebra/big_operators) delete duplicates and change names (#1301)
* refactor(algebra/big_operators) delete duplicates and change names
* fix build

2019-08-05 09:15:59 fc56c85
feat(algebra/order_functions): abs_nonpos_iff (#1299)
* feat(algebra/ordered_group): abs_nonpos_iff
* Update ordered_group.lean
* move to order_functions

2019-08-04 04:21:08 b46665f
chore(ring_theory/algebra): make first type argument explicit in alg_hom (#1296)
* chore(ring_theory/algebra): make first type argument explicit in alg_hom
Now this works, and it didn't work previously even with `@`
```lean
structure alg_equiv (α β γ : Type*) [comm_ring α] [ring β] [ring γ]
  [algebra α β] [algebra α γ] extends alg_hom α β γ :=
```
* Update algebra.lean

2019-08-03 04:14:56 27d34b3
feat(algebra/direct_limit): discrete_field (#1293)

2019-08-02 17:15:07 8fe73f3
feat(data/fintype): psigma.fintype (#1291)
* feat(data/fintype): psigma.fintype
* Update fintype.lean
* Swap instance argument order

2019-08-02 15:14:38 3af92be
feat(algebra/module): linear_map.coe_mk (#1290)

2019-08-02 14:52:18 1061238
feat(topology): category of uniform spaces (#1275)
* feat(category_theory): uniform spaces
* feat(topology/uniform_spaces): CpltSepUniformSpace is a reflective subcategory

2019-08-02 12:48:54 5b4b208
feat(data/fintype): univ_unique (#1289)

2019-08-01 17:01:15 766807f
feat(data/rat): refactor into smaller files and add documentation (#1284)

2019-08-01 15:02:26 0d66c87
feat(data/seq): add ext proof, nats def, zip_with lemmas, and extract seq property (#1278)

2019-07-31 16:48:18 49be50f
doc(data/padics, data/real/cau_seq, algebra): add doc strings, remove unnecessary assumptions (#1283)
* doc(data/padics): add doc strings, remove unnecessary prime assumptions
* fix(data/real/cau_seq): remove unnecessary hypotheses
* fix(algebra/{field, ordered_field}): remove unused assumptions
* doc(data/real/cau_seq): document Cauchy sequences
* fix(algebra/field): remove obsolete lemma
* fix build
* fix build
* more unnecessary arguments
* Update src/data/padics/padic_numbers.lean
* Update src/data/padics/padic_numbers.lean
* remove another unnecessary argument (suggested by @sgouezel)

2019-07-31 14:37:08 88d60dc
feat(data/pnat/basic): coe_bit0 and coe_bit1 (#1288)

2019-07-31 13:28:58 53680f9
feat(data/matrix): mul_sum and sum_mul (#1253)
* feat(data/matrix): mul_sum and sum_mul
* Update matrix.lean
* add comment explaing funny proof

2019-07-31 10:41:10 da46b32
feat(tactic/symmetry_at): apply symmetry on assumptions (#1269)
* feat(tactic/symmetry_at): apply symmetry on assumptions
* add docstrings

2019-07-31 08:37:56 badeb48
feat(data/equiv/algebra): change mul_equiv field to map_mul (#1287)
* feat(data/equiv/algebra): bundle field for mul_equiv
* adding docs
* Update src/data/equiv/algebra.lean
* Update src/data/equiv/algebra.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>

2019-07-30 11:45:46 9d589d7
feat(data/nat/fib): add Fibonacci sequence (#1279)

2019-07-30 06:58:24 0b47675
feat(algebra,data/complex/exponential): add abs_neg_one_pow, remove hyp from div_le_div_of_le_left (#1280)

2019-07-29 21:10:06 132bc56
doc(windows.md): clarify windows instructions (#1165)
* doc(windows.md): clarify windows instructions
* fix headers
* remove msys2 from windows installation instructions
* fix sentence
* typo
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* doc(windows.md): small changes
typos, and explicitly discourage msys2

2019-07-29 16:17:43 363f187
feat(tactic/extract_goal): create stand-alone examples out of current goal (#1233)
* feat(tactic/extract_example): create stand-alone examples out of current goal
* feat(tactic/extract_example): add formatting and options
* feat(tactic/extract_goal): rename to `extract_goal`
* Update src/tactic/interactive.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* make instances anonymous when the name starts with `_`
* add doc strings
* feat(tactic/interactive): exact_goal works on defs

2019-07-29 14:13:00 ee15f68
doc(category_theory): adding headers and basic comments to files without (#1264)
* doc(category_theory): adding headers and basic comments to files without
* Update src/category_theory/instances/rel.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* fix imports
* more comments, references
* refs
* Update src/category_theory/monad/adjunction.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* fixing all the copyright headers
* Update src/category_theory/monad/adjunction.lean
Co-Authored-By: Rob Lewis <Rob.y.lewis@gmail.com>
* fix import

2019-07-29 11:22:47 5adeebf
feat(algebra/group/hom): bundled monoid and group homs (#1271)
* feat(algebra/group/hom): adding bundled group homs
* adding module docstring
* moving some group stuff into monoid
* responding to PR comments
* mk'' -> mk'
* spaces before `}`
* Update src/algebra/group/hom.lean
* Update src/algebra/group/hom.lean
* Update src/algebra/group/hom.lean
* Update src/algebra/group/hom.lean
* Update hom.lean

2019-07-28 10:35:05 879da1c
fix(algebraic_geometry/presheafedspace): fix lame proofs (#1273)
* fix(algebraic_geometry/presheafedspace): fix lame proofs
* fix
* Update src/algebraic_geometry/presheafed_space.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>

2019-07-28 05:13:16 9689f4d
feat(tactic/interactive): move `rotate` into interactive namespace (#1272)
also document `swap`
Add test

2019-07-25 14:09:56+02:00 d5a5393
doc(contribute/index.md): add line about large PRs [ci skip] (#1267)

2019-07-25 10:40:50 03c0d6c
feat(algebra/group/basic): add_add_neg_cancel'_right (#1261)
* feat(algebra/group/basic): add_add_neg_cancel'_right
* fix build

2019-07-25 10:48:28+02:00 926467d
doc(contribute/style.md): fix section on comments [ci skip] (#1265)

2019-07-25 08:45:56 1000ae8
doc(*): new documentation requirements (#1229)
* feat(docs/contribute/doc): template for documentation
* doc(data/padics/padic_norm): new doc style
* doc(docs/contribute/code-review): add link to doc requirements
* doc(.github/PULL_REQUEST_TEMPLATE): add link to doc requirements
* doc(topology/basic): adds new style documentation
* feat(tactic/doc_blame): a user command #doc_blame
It lists definitions without docstrings in the current file
* perf(tactic/doc_blame): filter declarations earlier
* doc(contribute/doc): More doc style explanations
* doc(data/padics/padic_norm): finish documenting
* doc(docs/contribute/docs): more text about documentation requirements
* feat(tactic/doc_blame): add option to blame theorems also
* doc(cardinal/ordinal): add some documentation
add header to cardinal.lean
fix some information in topological_spaces.md (but not all)
* fix(data/padics): remove leftover exit command
* doc(*): update proposed doc style
* doc(docs/contribute/doc.md): update doc style guide
* feat(docs/references): add mathlib references bibtex
* update doc style in times_cont_diff and add to list of examples
* fix(docs/contribute/doc): clarify implementation notes
* doc(tactic/doc_blame): add header

2019-07-24 15:32:15 5125f11
feat(data/matrix): smul_val (#1262)
* feat(data/matrix): smul_val
* Update src/data/matrix.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>

2019-07-24 11:03:46 ed57916
feat(category_theory): functions to convert is_lawful_functor and is_… (#1258)
* feat(category_theory): functions to convert is_lawful_functor and is_lawful_monad to their corresponding category_theory concepts
* Fix typo
* feat(category): add mjoin_map_pure, mjoin_pure to the simpset (and use <$> notation)

2019-07-24 05:14:48 b0c5251
cleanup(category_theory/monoidal): use equiv on prod/punit intead of adding new constants (#1257)

2019-07-23 11:10:07 4a5529a
feat(data/array): add some simp attributes (#1255)

2019-07-22 19:45:42 a33315d
feat(linear_algebra/dim): findim equivalence (#1217)
* feat(linear_algebra/dim): findim equivalence
* feat(linear_algebra/dim): two versions of dim_fun
* feat(linear_algebra/dim): clean up

2019-07-22 16:29:29 3e77fec
feat(linear_algebra/finite_dimensional): finite dimensional vector spaces (#1241)
* feat(linear_algebra/finite_dimensional): finite dimensional vector spaces
* rw `of_span_finite_eq_top` to `of_fg`
* prove infinite.nat_embedding
* generalize finite_of_linear_independent to noetherian modules
* fix build
* fix build (ring_theory/polynomial)

2019-07-22 11:20:31 fd91660
feat(data/power_series): Add multivariate power series and prove basic API (#1244)
* First start on power_series
* Innocent changes
* Almost a comm_semiring
* Defined hom from mv_polynomial to mv_power_series; sorrys remain
* Attempt that seem to go nowhere
* Working on coeff_mul for polynomials
* Small progress
* Finish mv_polynomial.coeff_mul
* Cleaner proof of mv_polynomial.coeff_mul
* Fix build
* WIP
* Finish proof of mul_assoc
* WIP
* Golfing coeff_mul
* WIP
* Crazy wf is crazy
* mv_power_series over local ring is local
* WIP
* Add empty line
* wip
* wip
* WIP
* WIP
* WIP
* Add header comments
* WIP
* WIP
* Fix finsupp build
* Fix build, hopefully
* Fix build: ideals
* More docs
* Update src/data/power_series.lean
Fix typo.
* Fix build -- bump instance search depth
* Make changes according to some of the review comments
* Use 'formal' in the names
* Use 'protected' in more places, remove '@simp's
* Make 'inv_eq_zero' an iff
* Generalize to non-commutative scalars
* Move file
* Undo name change, back to 'power_series'
* spelling mistake
* spelling mistake

2019-07-22 08:00:24 7c09ed5
feat(category_theory/*): define `Cat` and a fully faithful functor `Mon ⥤ Cat` (#1235)
* feat(category_theory/*): define `Cat` and a fully faithful functor `Mon ⥤ Cat`
* Drop 2 commas
* Drop `functor.id_comp` etc, add `Cat.str` instance, adjust module-level comments
* Make `α` and `β` arguments of `map_hom_equiv` explicit
This way `e α β f` is automatically interpreted as `(e α β).to_fun f`.

2019-07-22 09:13:12+02:00 b5a641e
chore(data/polynomial): clean up commented code (#1251)
Commented code that wasn't removed after a refactor.

2019-07-22 01:35:42 f24dc98
feat(logic/unique): forall_iff and exists_iff (#1249)
Maybe these should be `@[simp]`. My use case in `fin 1` and it's slightly annoying to have `default (fin 1)` everwhere instead of `0`, but maybe that should also be a `@[simp]` lemma.

2019-07-22 01:13:25 a8c2923
refactor(ring_theory/noetherian): change order of instance arguments (#1250)
Zulip discussion https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Type.20class.20failure
This change makes some type class searches work better.

2019-07-20 18:50:28 93419b3
chore(data/equiv/algebra): add `ring.to_mul/add_equiv`, DRY (#1247)

2019-07-20 17:33:46 d371da6
fix(group_theory/subgroup): fix some typos introduced in 66a86ffe0 (#1246)

2019-07-20 06:49:37 6e3516d
feat(category_theory/monad): monadic adjunctions (#1176)
* feat(category_theory/limits): equivalences create limits
* equivalence lemma
* feat(category_theory/monad): monadic adjunctions
* move file
* fix
* add @[simp]
* use right_adjoint_preserves_limits
* fix
* fix
* undo weird changes in topology files
* formatting
* do colimits too
* missing proofs
* convert monad to a typeclass decorating a functor
* changing name
* cleaning up
* oops
* minor

2019-07-19 17:09:12 9505e5b
fix(data/matrix): use pi.module for the module structure (#1242)
* fix(data/matrix): use pi.module for the module structure
* Update matrix.lean
* Update matrix.lean
* Update matrix.lean

2019-07-19 14:39:27 07ae80f
refactor(algebra/*): delete `free_monoid` from `algebra/free`, restore some functions in `algebra/group/with_one` (#1227)
* refactor(algebra/*): Remove `free_monoid` from `algebra/free`, fixes #929
* use `namespace with_one`
* Add `with_one.coe_is_mul_hom`
* Restore `with_one.lift` etc from `algebra/free` `free_monoid.lift` etc
* Define `with_one.map` based on the deleted `free_monoid.map`
Define using `option.map`, and prove equivalence to `λ f, lift $ coe ∘ f`.

2019-07-19 14:09:02 74754ac
feat(analysis/calculus/times_cont_diff): multiple differentiability (#1226)
* feat(analysis/calculus/times_cont_diff): multiple differentiability
* style
* style
* style and documentation
* better wording

2019-07-18 15:15:54 8b102eb
feat(topology/algebra/group): define filter pointwise addition (#1215)
* Create .DS_Store
* Revert "Create .DS_Store"
This reverts commit 5612886d493aef59205eddc5a34a75e6e5ba22c1.
* feat (topology/algebral/uniform_group) : prove dense_embedding.extend extends continuous linear maps linearly
* Update src/algebra/pointwise.lean
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* Fix styles
* Add homomorphism instances; fix conflicting names
* Update group.lean
* Update uniform_group.lean
* Add header; prove every topological group is regular
* Fix headers and errors
* Update pi_instances.lean

2019-07-18 06:27:03 e704f94
fix(data/{nat,int}/parity): fix definition of 'even' (#1240)

2019-07-17 17:57:06+02:00 86e7287
fix(data/zmod/basic) remove unused argument from instance (#1239)

2019-07-17 09:56:01 d6fd044
feat(*): add nat.antidiagonal and use it for polynomial.mul_coeff (#1237)

2019-07-16 22:00:41 8785bd0
refactor(data/multiset): rename diagonal to antidiagonal (#1236)
* refactor(data/multiset): rename diagonal to antidiagonal
* Add docstrings
* fix build
* Fix build

2019-07-16 21:01:49 e186fbb
feat(data/mv_polynomial): coeff_mul (#1216)
* feat(data/mv_polynomial): coeff_mul
* refactor(data/multiset): rename diagonal to antidiagonal
* Rename diagonal to antidiagonal
* Define antidiagonal as to_finsupp instead of to_finset
* Add docstrings
* fix build
* Fix build

2019-07-15 21:35:36 92ac50c
chore(data/finset): rename le_min_of_mem to min_le_of_mem (#1231)
* chore(data/finset): rename le_min_of_mem to min_le_of_mem
* fix build

2019-07-15 14:48:52 7217f13
feat(data/option/basic): bind_eq_none (#1232)
* feat(data/option/basis): bind_eq_none
* delete extra line

2019-07-15 13:09:35 46074fc
chore(data/fintype): change `unique.fintype` to priority 0 (#1230)

2019-07-15 00:44:50 0e9ac84
feat(tactic/rcases): add obtain tactic (#1218)
* feat(tactic/rcases): add obtain tactic
* style(tactic/rcases): line break
* doc(docs/tactics): document obtain
* feat(tactic/obtain): support := syntax

2019-07-14 11:14:14 dcf0130
feat(data/pequiv): partial equivalences (#1206)
* feat(data/pequiv): partial equivalences
* Update src/data/pequiv.lean
Co-Authored-By: Floris van Doorn <fpvdoorn@gmail.com>
* use notation

2019-07-14 05:25:05 03e6d0e
chore(algebra/group/hom): add `is_monoid_hom.of_mul`, use it (#1225)
* Let `to_additive` generate `is_add_monoid_hom.map_add`
* Converting `is_mul_hom` into `is_monoid_hom` doesn't require `α` to be a group
* Simplify the proof of `is_add_group_hom.map_sub`
Avoid `simp` (without `only`)

2019-07-13 20:54:54 51f2645
feat(pformat): provide `trace!` and `fail!` and allow tactic values (#1222)

2019-07-13 18:17:06 a1cfc5c
feat(logic,data/equiv,prod): various lemmas (#1224)
* feat(logic,data/equiv,prod): various lemmas
* Update basic.lean
* Update basic.lean

2019-07-13 16:25:07 0eea0d9
feat(data/{nat,int}/parity): the 'even' predicate on nat and int (#1219)
* feat(data/{nat,int}/parity): the 'even' predicate on nat and int
* fix(data/{nat,int}/parity): shorten proof
* delete extra comma

2019-07-13 01:46:58 6db5829
feat(data/finmap): extend the API (#1223)

2019-07-12 21:47:13 5a48be3
chore(data/src/pending): remove unused folder (#1221)

2019-07-12 20:05:55 fb7dfa1
feat(data/{nat,int,zmod,finset}): add a few useful facts (#1220)
* feat(data/finset): add a few useful facts
* feat(data/zmod/basic): express neg in terms of residues
* feat(data/{nat,int}): add theorem 'mod_mod_of_dvd'

2019-07-12 01:43:22 3d36966
feat(analysis/calculus/mean_value): the mean value inequality (#1212)
* feat(analysis/calculus/mean_value): the mean value inequality
* remove blank lines

2019-07-11 21:03:56 7806586
feat(analysis/calculus/deriv): extended API for derivatives (#1213)

2019-07-11 18:24:16 2511faf
feat(tactic/localized): localized notation (#1081)
* first prototype of localized notation
* update
* add test file
* shorten command, fix test
* update documentation
* rename files, add to tactic/default
* typo
* mention that we can use other commands
* optimize
* only use 1 attribute
* add localized command classical instance
* use rb_lmap
This changes the internal code to avoid import clashes and adds a test to that effect
* move rb_lmap.of_list to correct file
also update docstring
* rename open_notation to open_locale

2019-07-11 13:58:17 c2cc9a9
refactor(*): change priority of \simeq (#1210)
* change priority of \simeq
Also change priority of similar notations
Remove many unnecessary parentheses
* lower precedence on order_embedding and similar
also add parentheses in 1 place where they were needed
* spacing
* add parenthesis

2019-07-11 10:12:31 86d0f29
refactor(*): make `is_group_hom` extend `is_mul_hom` (#1214)
* map_mul/map_add: use explicit parameters
Preparing to merge `is_mul_hom` with `is_group_hom`
* make `is_group_hom` extend `is_mul_hom`, adjust many proof terms
* Add a comment

2019-07-11 07:41:05 1b1c64b
perf(algebraic_geometry/presheafed_space): replace/optimize tidy scripts (#1204)
* perf(algebraic_geometry/presheafed_space): replace/optimize tidy scripts
This file now takes 20 seconds to compile on my desktop instead of 160. This is a 9% speedup to mathlib overall.
* doc(algebraic_geometry/presheafed_space): comments

2019-07-11 04:18:40 cc5870d
feat(algebra/ordered_ring): with_top.nat_induction (#1211)

2019-07-10 21:33:20 5cdebb7
feat(*): Miscellaneous lemmas in algebra (#1188)
* Trying things out
* feat(ring_theory/*): Misc little lemmas
* More little lemmas

2019-07-10 19:39:24 5aebdc4
fix(*): fix line endings (#1209)

2019-07-10 18:25:32 0bc4a50
feat(tactic/apply_fun): adds `apply_fun` tactic (#1184)
* feat(tactic/apply_fun): adds `apply_fun` tactic
* move tests to test folder
* elaborate function with expected type
* fix merge mistake

2019-07-10 15:57:51 d2b4380
feat(data/list/basic): list.prod_range_succ, list.sum_range_succ (#1197)
* feat(data/list/basic): list.prod_range_succ, list.sum_range_succ
* changes from review
* remove simp
* shorten proof

2019-07-10 11:22:33-04:00 8939d95
docs(contribute/index.md): #1131 [skip ci]

2019-07-10 09:10:06-04:00 b00460c
doc(README): Add link to website

2019-07-10 05:49:09 fb1848b
refactor(topology/algebra/open_subgroup) Finish TODO (#1202)
* Create .DS_Store
* Revert "Create .DS_Store"
This reverts commit 5612886d493aef59205eddc5a34a75e6e5ba22c1.
* Finish TODO
* Update src/topology/algebra/open_subgroup.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>

2019-07-10 02:24:53 e25a597
feat(analysis/calculus/tangent_cone): more properties of the tangent cone (#1136)

2019-07-10 00:10:18 0cd0d4e
feat(meta/pformat): format! macro using `pp` instead of `to_fmt` (#1194)
* feat(meta/pformat): format! macro which uses `pp` instead of `to_fmt`
* Update core.lean

2019-07-09 22:27:43 60e4bb9
refactor(category_theory/endomorphism): move to a dedicated file; prove simple lemmas (#1195)
* Move definitions of `End` and `Aut` to a dedicated file
* Adjust some proofs, use `namespace`, add docstrings
* `functor.map` and `functor.map_iso` define homomorphisms of `End/Aut`
* Define `functor.map_End` and `functor.map_Aut`

2019-07-09 20:34:02 3a7c661
refactor(topology/*): define and use dense_inducing (#1193)
* refactor(topology/*): define and dense_inducing
Traditionally, topology extends functions defined on dense subspaces
(equipped by the induced topology).
In mathlib, this was made type-theory-friendly by rather factoring
through `dense_embedding` maps. A map `f : α  → β` between topological
spaces is a dense embedding if its image is dense, it is injective, and
it pulls back the topology from `β` to the topology on `α`. It turns out
that the injectivity was never used in any serious way. It used not to
be used at all until we noticed it could be used to ensure the
factorization equation `dense_embedding.extend_e_eq` could be made to
hold without any assumption on the map to be extended. But of course
this formalization trick is mathematically completely irrelevant.
On the other hand, assuming injectivity prevents direct use in uniform
spaces completion, because the map from a space to its (separated)
completion is injective only when the original space is separated. This
is why mathlib ring completion currently assumes a separated topological
ring, and the perfectoid spaces project needed a lot of effort to drop
that assumption. This commit makes all this completely painless.
Along the way, we improve consistency and readability by turning
a couple of conjunctions into structures. It also introduces long
overdue fix to `function.uncurry` (which suffered from abusive pattern
matching, similar to `prod.map`).
* Apply suggestions from code review
Co-Authored-By: Johan Commelin <johan@commelin.net>
Co-Authored-By: sgouezel <sebastien.gouezel@univ-rennes1.fr>
* minor fixes following review
* Some more dot notation, consistent naming and field naming

2019-07-09 15:55:54 0460815
fix(docs/tactics): fix code block (#1201)

2019-07-09 15:04:11 0099f06
perf(data/polynomial, field_theory/splitting_field): memory problems (#1200)
* perf(data/polynomial): avoid bad instance search
* perf(field_theory/splitting_field): local intance priority makes a big difference

2019-07-09 12:15:39 13f76d3
feat(tactic): add `convert_to` and `ac_change` (#944)
* feat(tactic): add `convert_to` and `ac_change`
* style fixes

2019-07-09 13:05:07+02:00 d50f634
feat(data/matrix): simp attributes on one_mul and mul_one (#1199)

2019-07-09 11:06:35+02:00 6670e66
feat(data/matrix): simp attributes on zero_mul and mul_zero (#1198)

2019-07-09 09:00:44 9071969
feat(data/nat/basic): some nat inequalities (#1189)
* feat(data/nat/basic): some inequalities
* remove redundant lemmas
* simplify proofs
* make implicit
* shorter proof
* rename

2019-07-08 20:51:06-04:00 7fc3283
fix(README.md): Remove the AppVeyor badge [skip ci] (#1192)
It seems to me that we don't really care about whether the AppVeyor build fails or not. And I don't like the red badge. So I propose to remove it.

2019-07-09 00:20:18+02:00 0cc67a1
chore(data/matrix): remove unnecessary decidable_eq (#1196)
This was generating annoying `decidable_eq (fin n)` goals when rewriting.

2019-07-07 20:48:20 8917419
chore(data/equiv/algebra): use `to_additive` (#1191)
- Define `add_equiv` and `add_equiv.*` using `to_additive`
- Simplify some instances

2019-07-06 22:30:41 55b0b80
fix(src/logic/basic): add [symm] attribute to ne. (#1190)

2019-07-06 11:29:31 ccf5636
feat(data/option/basic): not_is_some_iff_eq_none and ne_none_iff_is_some (#1186)

2019-07-05 20:30:47 12763b9
chore(algebra/group/type_tags): add some missing instances (#1164)
* chore(algebra/group/type_tags): add some missing instances
* Drop an unused import

2019-07-05 17:03:44 05283d2
fix(category_theory/limits): make is_limit a class, clean up proofs (#1187)
* feat(category_theory/limits): equivalences create limits
* equivalence lemma
* add @[simp]
* use right_adjoint_preserves_limits
* blech
* undo weird changes in topology files
* formatting
* do colimits too
* working!
* ?

2019-07-05 15:44:22 05550ea
feat(category_theory/limits): equivalences create limits (#1175)
* feat(category_theory/limits): equivalences create limits
* equivalence lemma
* add @[simp]
* use right_adjoint_preserves_limits
* undo weird changes in topology files
* formatting
* do colimits too

2019-07-05 05:31:07 27ae77c
feat(tactic/tidy): lower the priority of ext in tidy (#1178)
* feat(category_theory/adjunction): additional simp lemmas
* experimenting with deferring ext in tidy
* abbreviate some proofs
* refactoring CommRing/adjunctions
* renaming

2019-07-05 05:02:40 4af3976
chore(category_theory): cleanup (#1173)
* chore(category_theory): cleanup
* oops
* remove comment
* more uniform?
* fix stalks proof?
* Update src/algebra/CommRing/basic.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Apply suggestions from code review
Co-Authored-By: Johan Commelin <johan@commelin.net>

2019-07-04 19:49:02 569bcf9
feat(algebra/ordered_group): eq_of_abs_non_pos (#1185)
* feat(algebra/ordered_group): decidable_linear_ordered_comm_group.eq_of_abs_non_pos
* fix(algebra/ordered_group): new line and name

2019-07-04 18:17:29 c5d4140
feat(data/fin): fin.mk.inj_iff (#1182)
Quite surprised this insn't already there.

2019-07-04 16:47:39 1723bee
chore(algebra/order_functions): some proofs work for semirings (#1183)
* chore(algebra/order_functions): some proofs work for semirings, not only rings
* Update order_functions.lean

2019-07-04 14:31:11 0818bb2
feat(data/fin): mem_find_of_unique (#1181)

2019-07-04 12:14:42 32ce121
chore(topology/maps.lean): Delete a redundant argument (#1179)
* Create .DS_Store
* Revert "Create .DS_Store"
This reverts commit 5612886d493aef59205eddc5a34a75e6e5ba22c1.
* Redundant argument

2019-07-04 10:24:53 34d69b5
chore(data/set): set.mem_preimage_eq becomes an iff  (#1174)
* chore(data/set): set.mem_preimage_eq becomes an iff named set.mem_preimage
* fix(measure_theory/measurable_space): proof broken by mem_preimage
change
* fix(data/filter/basic)
* fix(topology/uniform_space/separation)
* fix(measure_theory/integration)

2019-07-04 08:45:49 6493bb6
feat(data/list/basic): nodup_update_nth, mem_diff_iff_of_nodup (#1170)

2019-07-04 06:57:24 00de1cb
feat(data/list/basic): list.nodup_diff (#1168)
* feat(data/list/basic): list.nodup_diff
* Update basic.lean
* Update basic.lean

2019-07-04 05:16:33 e6b9696
feat(data/option): not_mem_none and bind_assoc (#1177)

2019-07-04 03:33:42 4cca114
feat(data/fin): fin.find (#1167)
* feat(data/fin): fin.find
* add nat_find_mem_find

2019-07-04 01:39:56 3ee1f85
feat(order/basic): order_dual.inhabited (#1163)

2019-07-03 23:52:50 ae9615c
feat(order/pilex): lexicographic ordering on pi types (#1157)
* feat(order/pilex): lexicographic ordering on pi types
* fix instance name
* fix instance name properly
* Update basic.lean
* remove unnecessary import

2019-07-03 22:09:24 992354c
feat(data/fintype): well_foundedness lemmas on fintypes (#1156)
* feat(data/fintype): well_foundedness lemmas on fintypes
* Update fintype.lean
* minor fixes

2019-07-03 18:10:52 cb84234
feat(category_theory/yoneda): coyoneda lemmas (#1172)
* feat(category_theory/yoneda): coyoneda lemmas
* oops, didn't include everything I needed
* oops
* removing fully_faithful
* missing underscore...

2019-07-03 15:25:41 e4ee18b
feat(category_theory/adjunction): additional simp lemmas (#1143)
* feat(category_theory/adjunction): additional simp lemmas
* spaces
Co-Authored-By: Johan Commelin <johan@commelin.net>

2019-07-03 12:44:32 f1b5473
feat(data/list/basic): fin_range (#1159)
* feat(data/list/basic): fin_range
fin_range is like `list.range` but returns a `list (fin n)` instead of a `list nat`
* Update basic.lean

2019-07-03 09:42:00 d2c5309
refactor(linear_algebra/lc): use families not sets (#943)
* refactor(linear_algebra/lc): use families not sets
* refactor(linear_algebra/lc): merge lc into finsupp
* refactor(linear_algebra/lc): localize decidability
* refactor(linear_algebra/lc): finsupp instances
* refactor(linear_algebra/lc): use families instead of sets
* refactor(linear_algebra/lc): remove set argument in lin_indep
* refactor(linear_algebra/lc): clean up
* refactor(linear_algebra/lc): more clean up
* refactor(linear_algebra/lc): set_option in section
* refactor(linear_algebra/lc): decidability proof
* refactor(linear_algebra/lc): arrow precedence
* refactor(linear_algebra/lc): more cleanup
* refactor(linear_algebra/lc): move finset.preimage
* refactor(linear_algebra/lc): use families not sets
* refactor(linear_algebra/lc): merge lc into finsupp
* refactor(linear_algebra/lc): localize decidability
* refactor(linear_algebra/lc): finsupp instances
* refactor(linear_algebra/lc): use families instead of sets
* refactor(linear_algebra/lc): remove set argument in lin_indep
* refactor(linear_algebra/lc): clean up
* refactor(linear_algebra/lc): more clean up
* refactor(linear_algebra/lc): set_option in section
* refactor(linear_algebra/lc): decidability proof
* refactor(linear_algebra/lc): arrow precedence
* refactor(linear_algebra/lc): more cleanup
* refactor(linear_algebra/lc): move finset.preimage
* tidying up. Remove unnecessary dec_eq from dim. Shorten finset.preimage.
* fix build
* make travis rebuild
*  fix build
* shorten finsupp proofs
* shorten more proofs
* shorten more proofs
* speed up dim_bot
* fix build
* shorten dimension proof

2019-07-03 09:02:02 9a33885
chore(data/matrix): rows and columns the right way around (#1171)
* chore(data/matrix): rows and columns the right way around
* update matrix.lean

2019-07-03 00:58:19 fd5617c
feat(measure_theory): Define Bochner integration (#1149)
* Create .DS_Store
* Revert "Create .DS_Store"
This reverts commit 5612886d493aef59205eddc5a34a75e6e5ba22c1.
* Define bochner integral
* Define bochner integral
* Headings
* Change used names
* Fix styles; Get rid of redundant lemmas
* Delete dash lines
* changes
* Fix everything
Things remaining:
* extend comments in headings
* `integrable` predicate should include measurability
* better proofs for simple_func_dense.lean
* Fix everything
Things remaining:
* extend comments in headings
* `integrable` predicate should include measurability
* better proofs for simple_func_dense.lean
* Remove redundant lemma
* Fix styles

2019-07-02 13:11:09 1ef2c2d
feat(data/list/basic): filter_true and filter_false (#1169)
* feat(data/list/basic): filter_true and filter_false
* Update basic.lean
* Update basic.lean
* Update basic.lean
* Update basic.lean

2019-07-02 11:28:23 b4989a0
compute the cardinality of real (#1096)
* compute the cardinality of real
* minor improvements
* fix(data/rat/denumerable): change namespace of of_rat
* style(src/topology/algebra/infinite_sum): structure proof

2019-07-02 04:29:06 57b57b3
feat(data/equiv/basic): improve arrow_congr, define conj (#1119)
* feat(data/equiv/basic): improve arrow_congr, define conj
- redefine `equiv.arrow_congr` without an enclosing `match`
- prove some trivial lemmas about `equiv.arrow_congr`
- define `equiv.conj`, and prove trivial lemmas about it
* chore(data/equiv/basic): add @[simp]
Also split some long lines, and swap lhs with rhs in a few lemmas.
* Reorder, drop TODO

2019-07-01 19:35:44 a2c291d
feat(data/mv_polynomial): miscellaneous lemmas on eval, rename, etc (#1134)

2019-07-01 17:57:38 fcfa2a4
refactor(set_theory/ordinal): restate well_ordering_thm (#1115)
Define the relation rather than using an `exists` statement

2019-07-01 17:01:12 f0bf43b
feat(order/zorn): chain.image (#1084)
* feat(order/zorn): chain.image
* golf

2019-06-29 16:56:28 469da29
feat(data/list/basic): map_nil and map_eq_nil (#1161)
* feat(data/list/basic): map_nil and map_eq_nil
* Update basic.lean
* make Simon's changes

2019-06-29 13:28:56 0858157
refactor(category_theory/category): reorder arguments of `End.has_mul` (#1128)
* Reorder arguments of `End.has_mul` and `Aut.has_mul`, adjust `category/fold`
* clean up proofs in `category.fold`

2019-06-29 12:31:13 e310349
refactor(ring_theory/ideals): refactor local rings, add local ring homs (#1102)
* WIP
* refactor(ring_theory/ideals): refactor local rings, add local ring homs
* residue_field.map is a field hom
* make is_local_ring_hom extends is_ring_hom
* refactor local_ring
* tiny changes
* Bump instance search depth

2019-06-28 15:11:00 4a5a1a5
fix(data/list/min_max): correct names of mem_maximum and mem_minimum (#1162)
* fix(data/list/min_max): correct names of mem_maximum and mem_minimum
* Update denumerable.lean

2019-06-28 09:09:55 7d56447
feat(logic/unique): fin 1 is unique (#1158)

2019-06-27 11:12:29 6bc930a
chore(src/tactic/interactive): `convert` docstring (#1148)
* chore(src/tactic/interactive): `convert` docstring 
The `using` option to `convert` was not mentioned in the docstring, and I often struggle to remember the (perhaps slightly exotic?) `using` catchphrase
* Update src/tactic/interactive.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update interactive.lean

2019-06-26 12:11:33 9b0fd36
feat(data/fintype): unique.fintype (#1154)

2019-06-25 14:30:39 7484ab4
fix(data/matrix): add brackets to mul_neg and neg_mul to correct statement (#1151)
* fix(data/matrix): add brackets to mul_neg and neg_mul to correct statement
Each side of `mul_neg` was identical.
* fix

2019-06-25 13:00:33 a2aeabb
feat(data/finset): length_sort (#1150)

2019-06-25 13:54:02+02:00 c4a4f79
feat(algebra/pi_instances): pi.ordered_comm_group (#1152)

2019-06-24 12:33:51 c7ee110
feat(meta/expr): `simp` and `dsimp` an expr (#1147)
* feat(meta/expr): `simp` and `dsimp` an expr
* removing def that we don't need yet

2019-06-23 02:01:56 d7283d7
feat(string): `split_on` a `char` (#1145)
* lib: string
* type

2019-06-20 08:30:31 a35d682
feat(topology/order): more facts on continuous_on (#1140)

2019-06-19 21:00:28 e598894
chore(topology/*): reverse order on topological and uniform spaces (#1138)
* chore(topology/*): reverse order on topological and uniform spaces
* fix(topology/order): private lemma hiding partial order oscillation,
following Mario's suggestion
* change a temporary name
Co-Authored-By: Johan Commelin <johan@commelin.net>
* forgotten rename

2019-06-19 08:03:18 b1cb48d
feat(data/set): simple lemmas, renaming (#1137)
* feat(data/set): simple lemmas, renaming
* improve projection lemmas
* arguments order

2019-06-18 22:06:30 235b899
fix(category_theory/types): rename lemma `ulift_functor.map` (#1133)
* fix(category_theory/types): avoid shadowing `ulift_functor.map` by a lemma
Now we can use `ulift_functor.map` in the sense `functor.map ulift_functor`.
* `ulift_functor.map_spec` → `ulift_functor_map`
as suggested by @semorrison in https://github.com/leanprover-community/mathlib/pull/1133#pullrequestreview-250179914

2019-06-17 13:09:55 d8d25e9
refactor(analysis/normed_space/deriv): split and move to calculus folder (#1135)

2019-06-16 19:28:43 7b715eb
Direct limit of modules, abelian groups, rings, and fields. (#754)
* stuff
* stuff
* more stuff
* pre merge commit
* prove of_zero.exact
* remove silly rewrite
* slightly shorten proof
* direct limit of modules
* upgrade mathlib
* direct limit of rings
* direct limit of fields (WIP)
* trying to prove zero_exact for rings
* use sqrt 2 instead of F4
* direct limit of field
* cleanup for mathlib
* remove ununsed lemmas
* clean up
* docstrings
* local
* fix build
* Replace real with polynomial int in proof
* Update basic.lean

2019-06-16 19:04:52 38d5c12
feat(ring_theory/integral_closure): integral closure (#1087)
* feat(ring_theory/integral_closure): integral closure
* update

2019-06-15 01:30:00 3ad3522
feat(data/rat/denumerable): computable denumerability of Q (#1104)
* feat(data/rat/denumerable): computable denumerability of Q
* blah
* fix build
* remove unnecessary decidable_eq
* add header
* delete rat.lean and update imports
* fix build
* prove exists_not_mem_finset
* massively speed up encode
* minor change

2019-06-14 17:40:58 5040c81
feat(measure_theory/integration): dominated convergence theorem (#1123)
* Create .DS_Store
* Revert "Create .DS_Store"
This reverts commit 5612886d493aef59205eddc5a34a75e6e5ba22c1.
* feat(measure_theory/integration): dominated convergence theorem
* Changes to styles
* Update ordered.lean
* Changes to styles
* Update integration.lean
* Changes to styles

2019-06-14 13:35:52 5a183f0
provide some proof terms explicitly (#1132)

2019-06-12 04:45:45 0c627fb
chore(algebra/group/hom): drop unused section variables (#1130)

2019-06-11 21:06:39 3492206
feat(data/mv_polynomial): misc lemmas on rename, map, and eval2 (#1127)

2019-06-11 19:10:13 953c612
fix(category_theory): simplifying universes (#1122)

2019-06-11 17:46:50 98ece77
refactor(algebra/group): split into smaller files (#1121)
* rename `src/algebra/group.lean` → `src/algebra/group/default.lean`
* Split algebra/group/default into smaller files
No code changes, except for variables declaration and imports
* Fix compile
* fix compile error: import `anti_hom` in `algebra/group/default`
* Drop unused imports

2019-06-11 12:53:04-04:00 8d0e719
chore(mergify): don't dismiss reviews [ci-skip] (#1124)

2019-06-11 04:39:39 abfaf8d
refactor(group_theory/abelianization): simplify abelianization  (#1126)
* feat(group_theory/conjugates) : define conjugates
define group conjugates and normal closure
* feat(algebra/order_functions): generalize strict_mono.monotone (#1022)
* trying to merge
* feat(group_theory\presented_group):  define presented groups
Presented groups are defined as a quotient of a free group by the normal subgroup  the relations generate.
* feat(group_theory\presented_group): define presented groups
Presented groups are defined as a quotient of a free group by the normal subgroup  the relations generate
* Update src/group_theory/presented_group.lean
Co-Authored-By: Keeley Hoek <keeley@hoek.io>
* Uniqueness of extension
* Tidied up to_group.unique
* Removed unnecessary line
* Changed naming
* refactor(group_theory/abelianization): simplify abelianization
The commutator of a group was previously defined using lists.
Now it is defined using `normal_closure`.
This change simplifies some of the proofs

2019-06-10 13:38:37 bd2f35f
feat(group_theory/presented_group): define presented groups (#1118)
* feat(group_theory/conjugates) : define conjugates
define group conjugates and normal closure
* feat(algebra/order_functions): generalize strict_mono.monotone (#1022)
* trying to merge
* feat(group_theory\presented_group):  define presented groups
Presented groups are defined as a quotient of a free group by the normal subgroup  the relations generate.
* feat(group_theory\presented_group): define presented groups
Presented groups are defined as a quotient of a free group by the normal subgroup  the relations generate
* Update src/group_theory/presented_group.lean
Co-Authored-By: Keeley Hoek <keeley@hoek.io>
* Uniqueness of extension
* Tidied up to_group.unique
* Removed unnecessary line
* Changed naming

2019-06-10 08:38:52+01:00 004e0b3
feat (data/pnat): extensions to pnat  (#1073)
* Extended API, especially divisibility and primes
* Positive euclidean algorithm
* Disambiguate overloaded ::
* Tweak broken proof of flip_is_special
* Change to mathlib style
* Update src/data/pnat.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/data/pnat.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Adjust style for mathlib
* Moved and renamed
* Move some material from basic.lean to prime.lean
* Move some material from basic.lean to factors.lean
* Update import to data.pnat.basic.
* Update import to data.pnat.basic
* Fix import of data.pnat.basic
* Use monoid.pow instead of nat.pow
* Fix pnat.pow_succ -> pow_succ; stylistic changes
* More systematic use of coercion
* More consistent use of coercion
* Formatting; change flip' to prod.swap

2019-06-08 23:11:29 3f9916e
feat(tactic/rewrite_all): tactic to perform the nth occurrence of a rewrite (#999)
* feat(tactic/rewrite_all): tactic to perform the nth occurrence of a rewrite
* formatting
* formatting
* perhaps a little bit easier to read?
* try renaming
* there was a duplicate definition, just not the one lean complained about
* Namespaces
* I think kabstract works now
* Fix
* Test
* Fix guard
* updating test to reflect difference between congr and kabstract
* oops
* adding Keeley's example
* remove kabstract implementation for now
* cleanup test file
* rename common to basic
* Update src/tactic/rewrite_all/default.lean

2019-06-07 16:54:39 b55e44d
refactor(analysis/normed_space/basic): change normed_space definition (#1112)

2019-06-07 15:21:25 85ed958
feat(data/quot): quot.map: act on non-id maps (#1120)
* old version renamed to `quot.map_right`
* similar changes to `quot.congr` and `quotient.congr`

2019-06-06 16:45:38 f36fdfb
refactor(category_theory/equivalence): simplify equivalence.trans (#1114)

2019-06-05 07:54:30 a7524b6
refactor(analysis/normed_space/operator_norm): topological modules (#1085)
* refactor(analysis/normed_space/operator_norm): topological modules
* remove useless typeclass in definition of topological module
* refactor(analysis/normed_space/operator_norm): style

2019-06-04 20:49:06 a152f3a
chore(doc/install/macos): improve mac install instructions (#1106)
* tweaking install instructions
* minor
* minor
* minor
* minor
* small icon
* improve instructions for installing the extension on all OSes
* minor

2019-06-04 14:48:57+01:00 542d25d
fix(data/logic/basic): Use a Sort for classical.some_spec2 (#1111)

2019-06-03 22:11:39 dd832f0
feat(topology/basic): is_open_Inter and others (#1108)

2019-06-03 20:36:09 504c0ad
feat(data/set/basic): union_inter_distrib lemmas (#1107)
* feat(data/set/basic): union_inter_distrib lemmas
* add parentheses

2019-06-03 18:05:35 4263b2b
fix(data/nat/gcd): correct order of arguments in nat.coprime_mul_iff_right (#1105)
* Not sure how this works
* Fix order for coprime_mul_iff_right
* Remove spurious file

2019-06-01 20:38:34 38b8054
feat(data/mv_polynomial): add coeff for mv_polynomial (#1101)

2019-05-31 20:59:47 4f6307e
feat(topology/algebra/open_subgroup): basics on open subgroups  (#1067)
* Dump the file into mathlib
* feat(algebra/pi_instances): product of submonoids/groups/rings
From the perfectoid project.
* Small changes
* feat(topology/algebra/open_subgroup): basics on open subgroups
* Some proof compression
* Update src/topology/algebra/open_subgroup.lean

2019-05-31 19:49:44 6237939
fix(data/nat/enat): change [] to {} in some lemmas (#1054)
* fix(data/nat/enat): change [] to {} in some lemmas
* Update enat.lean
* remove space

2019-05-31 17:26:55 8ebea31
feat(category_theory/monoidal): the monoidal category of types (#1100)
* feat(category_theory/iso): missing lemmas
* formatting
* formatting
* almost
* oops
* getting there
* one more
* sleep
* good to go
* monoidal category of types
* fix names
* renaming
* linebreak
* temporary notations
* notations for associator, unitors?
* more notation
* names
* more names
* oops
* renaming, and namespaces
* comment
* fix comment
* remove unnecessary open, formatting
* removing dsimps
* replace with simp lemmas
* fix
* Update types.lean
* fix namespace

2019-05-31 06:43:58 2db435d
chore(category_theory): move all instances (e.g. Top, CommRing, Meas) into the root namespace (#1074)
* splitting adjunction.lean
* chore(CommRing/adjunctions): refactor proofs
* remove unnecessary assumptions
* add helpful doc-string
* cleanup
* chore(category_theory): move all instances (e.g. Top, CommRing, Meas) to the root namespace
* minor
* breaking things, haven't finished yet
* deterministic timeout
* unfold_coes to the rescue
* one more int.cast
* yet another int.cast
* fix merge
* minor
* merge
* fix imports
* fix merge
* fix imports/namespaces
* more namespace fixes
* fixes
* delete stray file

2019-05-30 12:43:47 c49ac06
feat(category_theory/monoidal): monoidal categories, monoidal functors (#1002)
* feat(category_theory/iso): missing lemmas
* formatting
* formatting
* almost
* oops
* getting there
* one more
* sleep
* good to go
* fix names
* renaming
* linebreak
* temporary notations
* notations for associator, unitors?
* more notation
* names
* more names
* oops
* renaming, and namespaces
* comment
* fix comment
* remove unnecessary open, formatting
* removing dsimps
* replace with simp lemmas
* fix

2019-05-29 22:06:00 4845b66
feat(ring_theory): free_ring and free_comm_ring (#734)
* feat(ring_theory): free_ring and free_comm_ring
* Define isomorphism with mv_polynomial int
* Ring hom free_ring -> free_comm_ring; 1 sorry left
* Coe from free_ring to free_comm_ring is ring_hom
* WIP
* WIP
* WIP
* WIP
* Refactoring a bunch of stuff
* functor.map_equiv
* Fix build
* Fix build
* Make multiset.subsingleton_equiv computable
* Define specific equivs using general machinery
* Fix build
* Remove old commented code
* feat(data/equiv/functor): map_equiv
* fix(data/multiset): remove duplicate setoid instance
* namespace changes

2019-05-29 11:10:22 d935bc3
feat(presheaves/stalks): stalks of presheafs, and presheafed spaces with extra structure on stalks (#1018)
* feat(category_theory/colimits): missing simp lemmas
* feat(category_theory): functor.map_nat_iso
* define `functor.map_nat_iso`, and relate to whiskering
* rename `functor.on_iso` to `functor.map_iso`
* add some missing lemmas about whiskering
* fix(category_theory): presheaves, unbundled and bundled, and pushforwards
* restoring `(opens X)ᵒᵖ`
* various changes from working on stalks
* rename `nbhds` to `open_nhds`
* fix introduced typo
* typo
* compactify a proof
* rename `presheaf` to `presheaf_on_space`
* fix(category_theory): turn `has_limits` classes into structures
* naming instances to avoid collisions
* breaking up instances.topological_spaces
* fixing all the other pi-type typclasses
* fix import
* oops
* fix import
* feat(category_theory): stalks of sheaves
* renaming
* fixes after rebase
* nothing
* yay, got rid of the @s
* attempting a very general version of structured stalks
* missed one
* typo
* WIP
* oops
* the presheaf of continuous functions to ℂ
* restoring eq_to_hom simp lemmas
* removing unnecessary simp lemma
* remove another superfluous lemma
* removing the nat_trans and vcomp notations; use \hom and \gg
* a simpler proposal
* getting rid of vcomp
* fix
* splitting files
* renaming
* probably working again?
* update notation
* remove old lemma
* fix
* comment out unfinished stuff
* cleanup
* use iso_whisker_right instead of map_nat_iso
* proofs magically got easier?
* improve some proofs
* moving instances
* remove crap
* tidy
* minimise imports
* chore(travis): disable the check for minimal imports
* Update src/algebraic_geometry/presheafed_space.lean
Co-Authored-By: semorrison <scott@tqft.net>
* writing `op_induction` tactic, and improving proofs
* squeeze_simping
* cleanup
* rearranging
* cleanup
* cleaning up
* cleaning up
* move
* cleaning up
* structured stalks
* comment
* structured stalks
* more simp lemmas
* formatting
* Update src/category_theory/instances/Top/presheaf_of_functions.lean
Co-Authored-By: Floris van Doorn <fpvdoorn@gmail.com>
* fixes in response to review
* tidy regressions... :-(
* oops
* Update src/algebraic_geometry/presheafed_space.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/algebraic_geometry/presheafed_space.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/algebraic_geometry/presheafed_space.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/category_theory/instances/TopCommRing/basic.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* def to lemma
* remove useless lemma
* explicit associator
* broken
* can't get proofs to work...
* remove superfluous imports
* missing headers
* change example
* reverting changes to tidy
* remove presheaf_Z, as it doesn't work at the moment
* fixes
* fixes
* fix
* postponing stuff on structured stalks for a later PR
* coercions
* getting rid of all the `erw`
* omitting some proofs
* deleting more proofs
* convert begin ... end to by
* local

2019-05-29 06:03:02 0de4bba
feat(ordered_group): add missing instance (#1094)

2019-05-28 15:01:35 b20b722
fix(tactic/rcases): add parse desc to rcases/rintro (#1091)

2019-05-26 20:12:00 d434397
feat(group_theory/conjugates) : define conjugates (#1029)
* feat(algebra/order_functions): generalize strict_mono.monotone (#1022)
* moving stuff to where it belongs
* removed unecessary import
* Changed to union
* Update src/group_theory/subgroup.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Stylistic changes
* Added authorship
* Moved mem_conjugates_of_set
* Authorship
* Trying fixes
* Putting everything in the right order
* removed import

2019-05-24 05:29:59 c6a7f30
refactor(set_theory/ordinal): shorten proof of well_ordering_thm (#1078)
* refactor(set_theory/ordinal): shorten proof of well_ordering_thm§
* Update ordinal.lean
* Update ordinal.lean
* Update ordinal.lean
* Improve readability
* shorten proof
* Shorten proof

2019-05-23 13:50:06 62acd6b
chore(CommRing/adjunctions): refactor proofs (#1049)
* splitting adjunction.lean
* chore(CommRing/adjunctions): refactor proofs
* remove unnecessary assumptions
* add helpful doc-string
* cleanup
* breaking things, haven't finished yet
* deterministic timeout
* unfold_coes to the rescue
* one more int.cast
* yet another int.cast
* Update src/data/mv_polynomial.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* Update src/data/mv_polynomial.lean
Co-Authored-By: Johan Commelin <johan@commelin.net>
* WIP
* Fix build
* Fix build

2019-05-23 11:08:00 15fecbd
doc(finsupp,category_theory): fixes (#1075)
* doc
* update emb_domain doc string
* typo

2019-05-22 19:04:36 d07e3b3
feat(linear_algebra/basic): general_linear_group basics (#1064)
* feat(linear_algebra/basic): general_linear_group basics
This patch proves that the general_linear_group (defined as units in the
endomorphism ring) are equivalent to the group of linear equivalences.
* shorten proof of ext
* Add mul_equiv
* Use coe
* Fix stupid error

2019-05-22 16:32:40 f004d32
feat(data/nat): various lemmas (#1017)
* feat(data/nat): various lemmas
* protect a definition
* fixes
* Rob's suggestions
* Mario’s proof
(Working offline, let’s see what Travis says)
* minigolf

2019-05-21 21:29:42 971ddcc
feat(*): image_closure (#1069)
Prove that the image of the closure is the closure of the image,
for submonoids/groups/rings.
From the perfectoid project.

2019-05-21 16:01:07 3461399
refactor(integration.lean): changing `measure_space` to `measurable_space` (#1072)
I've been using this file and `range_const` doesn't seem to require the spurious `measure_space` instance. `measurable_space` seems to suffice.

2019-05-20 19:27:04 cb30c97
feat(algebra/pi_instances): product of submonoids/groups/rings (#1066)
From the perfectoid project.

2019-05-20 18:35:19 0ab8a89
feat(category_theory): limits in CommRing (#1006)
* feat(category_theory): limits in CommRing
* by
* rename
* sections
* Update src/category_theory/types.lean
Co-Authored-By: Johannes Hölzl <johannes.hoelzl@gmx.de>

2019-05-20 15:36:59 8cf7c4c
chore(topology/algebra/monoid): continuous_mul_left/right (#1065)

2019-05-20 15:11:50 593938c
chore(ring_theory/algebra): simp-lemmas for alg_hom.to_linear_map (#1062)
* chore(ring_theory/algebra): simp-lemmas for alg_hom.to_linear_map
From the perfectoid project.
* Stupid error
* Update src/ring_theory/algebra.lean
Co-Authored-By: Chris Hughes <33847686+ChrisHughes24@users.noreply.github.com>

2019-05-20 11:52:29 d001abf
feat(tactic/basic): adds `contrapose` tactic (#1015)
* feat(tactic/basic): adds `contrapose` tactic
* fix(tactic/push_neg): fix is_prop testing
* Setup error message testing following Rob, add tests for `contrapose`
* refactor(tactic/interactive): move noninteractive success_if_fail_with_msg to tactic/core

2019-05-20 11:16:53 15a6af2
feat(topology/opens): continuous.comap : opens Y → opens X (#1061)
* feat(topology/opens): continuous.comap : opens Y → opens X
From the perfectoid project.
* Update opens.lean

2019-05-20 09:26:59 d4c7b7a
feat(tactic/linarith): better input syntax linarith only [...] (#1056)
* feat(tactic/ring, tactic/linarith): add reducibility parameter
* fix(tactic/ring): interactive parsing for argument to ring1
* feat(tactic/linarith): better input syntax linarith only [...]
* fix(docs/tactics): fix linarith doc

2019-05-19 17:40:09 f253401
refactor: coherent composition order (#1055)

2019-05-19 13:39:22 cb4c9ee
refactor(topology/metric/gromov_hausdorff): make Hausdorff_edist irreducible (#1052)
* refactor(topology/metric/gromov_hausdorff): remove linarith calls
* refactor(topology/metric/hausdorff_dist): make hausdorff_dist irreducible

2019-05-19 12:47:56 b9cb69c
feat(topology/order): make nhds irreducible (#1043)
* feat(topology/order): make nhds irreducible
* move nhds irreducible to topology.basic

2019-05-18 16:36:44-04:00 73c3f71
feat(tactic/squeeze): remove noise from output (#1047)

2019-05-18 13:27:57 fa0e757
refactor(data/complex/exponential): improve trig proofs (#1041)
* fix(data/complex/exponential): make complex.exp irreducible
See discussion at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/-T50000.20challenge
Using `ring` (and other tactics) on terms involving `exp` can lead to some unpleasant and unnecessary unfolding.
* refactor(data/complex/exponential): improve trig proofs
* fix build
* fix(algebra/group): prove lemma for comm_semigroup instead of comm_monoid

2019-05-17 20:21:42 5e5298b
feat(adjointify): make definition easier for elaborator (#1045)

2019-05-17 18:53:41 45afa86
fix(topology/stone_cech): faster proof from @PatrickMassot (#1042)

2019-05-17 17:38:35 901178e
feat(set_theory/surreal): surreal numbers (#958)
* feat(set_theory/surreal): surreal numbers
* doc(set_theory/surreal): surreal docs
* minor changes in surreal

2019-05-17 16:13:20 0b35022
refactor: change variables order in some composition lemmas (#1035)

2019-05-17 14:46:24 f633c94
feat(tactic/basic): add tactic.rewrite, and sort list (#1039)

2019-05-17 13:20:21 a6c1f37
fix(data/complex/exponential): make complex.exp irreducible (#1040)
See discussion at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/-T50000.20challenge
Using `ring` (and other tactics) on terms involving `exp` can lead to some unpleasant and unnecessary unfolding.

2019-05-17 06:56:38 96ea9b9
chore(opposites): merge two definitions of `opposite` (#1036)
* chore(opposites): merge two definitions of `opposite`
* merge `opposite.opposite` from `algebra/opposites` with
  `category_theory.opposite` from `category_theory/opposites`, and put
  it into `data/opposite`
* main reasons: DRY, avoid confusion if both namespaces are open
* see https://github.com/leanprover-community/mathlib/pull/538#issuecomment-459488227
* Authors merged from `git blame` output on both original files;
  I assume my contribution to be trivial
* Update opposite.lean

2019-05-17 00:16:39 def48b0
feat(data/nat/basic): make decreasing induction eliminate to Sort (#1032)
* add interface for decreasing_induction to Sort
* make decreasing_induction a def
* add simp tags and explicit type

2019-05-16 12:58:27 ad0f42d
fix(data/nat/enat): Fix typo in lemma name (#1037)

2019-05-16 07:24:12 c75c096
chore(*): reduce imports (#1033)
* chore(*): reduce imports
* restoring import in later file
* fix import

2019-05-15 17:08:22 b5aae18
feat(category_theory): monos and epis in Type and Top (#1030)
* feat(category_theory): monos and epis in Type and Top
* imports
* add file header
* use notation for adjunction

2019-05-15 13:26:27 136e67a
refactor(topology): change continuous_at_within to continuous_within_at (#1034)

2019-05-15 09:44:25 3022caf
feat(tactic/terminal_goal): determine if other goals depend on the current one (#984)
* feat(tactics): add "terminal_goal" tactic and relatives
* fix(test/tactics): renaming test functions to avoid a name collision
* fix(tactic): moving terminal_goal to tactic/basic.lean
* fix(test/tactics): open tactics
* touching a file, to prompt travis to try again
* terminal_goal
* fix
* merge

2019-05-14 20:21:21 7b579b7
feat(category_theory): adjoint equivalences and limits under equivalences (#986)
* feat(category_theory): adjoint equivalences and limits
* Define equivalences to be adjoint equivalences.
  * Show that one triangle law implies the other for equivalences
  * Prove that having a limit of shape `J` is preserved under an equivalence `J ≌ J'`.
  * Construct an adjoint equivalence from a (non-adjoint) equivalence
* Put `nat_iso.app` in the `iso` namespace, so that we can write `α.app` for `α : F ≅ G`.
* Add some basic lemmas about equivalences, isomorphisms.
* Move some lemmas from `nat_trans` to `functor_category` and state them using `F ⟶ G` instead of `nat_trans F G` (maybe these files should just be merged?)
* Some small tweaks, improvements
* opposite of discrete is discrete
This also shows that C^op has coproducts if C has products and vice versa
Also fix rebase errors
* fix error (I don't know what caused this to break)
* Use tidy a bit more
* construct an adjunction from an equivalence
add notation `⊣` for an adjunction.
make some arguments of adjunction constructors implicit
* use adjunction notation
* formatting
* do adjointify_η as a natural iso directly, to avoid checking naturality
* tersifying
* fix errors, a bit of cleanup
* fix elements.lean
* fix error, address comments

2019-05-14 18:15:35 ae8f197
feat(data/nat/basic): decreasing induction (#1031)
* feat(data/nat/basic): decreasing induction
* feat(data/nat/basic): better proof of decreasing induction

2019-05-14 14:46:29 e7b64c5
feat(data/equiv/functor): map_equiv (#1026)
* feat(data/equiv/functor): map_equiv
* golf proofs

2019-05-14 15:06:32+02:00 02857d5
fix(docs/tactics): fix layout, remove noise

2019-05-14 12:43:19 22790e0
feat(tactic): new tactics to normalize casts inside expressions (#988)
* new tactics for normalizing casts
* update using the norm_cast tactics
* minor proof update
* minor changes
* moved a norm_cast lemma
* minor changes
* fix(doc/tactics): make headers uniform
* nicer proof using discharger
* fixed numerals handling by adding simp_cast lemmas
* add documentation
* fixed unnecessary normalizations in assumption_mod_cast
* minor proof update
* minor coding style update
* documentation update
* rename flip_equation to expr.flip_eq
* update proofs to remove boiler plate code about casts
* revert to old proof
* fixed imports and moved attributes
* add test file
* new attribute system
- the attribute norm_cast is split into norm_cast and norm_cast_rev
- update of the equation flipping mechanism
- update of the numerals handling
* syntax fix
* change attributes names
* test update
* small update
* add elim_cast attribute
* add examples for attributes
* new examples

2019-05-14 11:13:33 fe19bdb
fix(data/multiset): remove duplicate setoid instance (#1027)
* fix(data/multiset): remove duplicate setoid instance
* s/ : Type uu//

2019-05-14 10:24:51 ade99c8
feat(analysis/normed_space/deriv): more material on derivatives (#966)
* feat(analysis/normed_space/deriv): more material on derivatives
* feat(analysis/normed_space/deriv): minor improvements
* feat(analysis/normed_space/deriv) rename fderiv_at_within to fderiv_within_at
* feat(analysis/normed_space/deriv): more systematic renaming
* feat(analysis/normed_space/deriv): fix style
* modify travis.yml as advised by Simon Hudon
* fix travis.yml, second try
* feat(analysis/normed_space/deriv): add two missing lemmas

2019-05-14 07:24:40 a72641b
squeeze_simp (#1019)

2019-05-14 05:35:17 cefb9d4
feat(category_theory/opposites): iso.op (#1021)

2019-05-14 01:23:18 6dc0682
feat(algebra/order_functions): generalize strict_mono.monotone (#1022)

2019-05-13 23:54:13 07ba43e
feat(topology/constructions): topology of sum types (#1016)

2019-05-13 22:28:23 f8385b1
feat(data/equiv/basic): equiv.nonempty_iff_nonempty (#1020)

2019-05-13 20:36:11 01b345c
feat(tactics/interactive): choose uses exists_prop (#1014)
* feat(tactics/interactive): choose uses exists_prop
* fix build

2019-05-13 20:00:57 c8a0bb6
feat(category_theory/products): missing simp lemmas (#1003)
* feat(category_theory/products): missing simp lemmas
* cleanup proofs
* fix proof
* squeeze_simp

2019-05-13 19:33:32 6c35df0
feat(category_theory/iso): missing lemmas (#1001)
* feat(category_theory/iso): missing lemmas
* formatting
* formatting
* oops
* one more
* sleep

2019-05-13 18:39:56+02:00 82f151f
document the change in scripts (#1024)

2019-05-13 15:42:01 70cd00b
feat(Top.presheaf_ℂ): presheaves of functions to topological commutative rings (#976)
* feat(category_theory/colimits): missing simp lemmas
* feat(category_theory): functor.map_nat_iso
* define `functor.map_nat_iso`, and relate to whiskering
* rename `functor.on_iso` to `functor.map_iso`
* add some missing lemmas about whiskering
* fix(category_theory): presheaves, unbundled and bundled, and pushforwards
* restoring `(opens X)ᵒᵖ`
* various changes from working on stalks
* rename `nbhds` to `open_nhds`
* fix introduced typo
* typo
* compactify a proof
* rename `presheaf` to `presheaf_on_space`
* fix(category_theory): turn `has_limits` classes into structures
* naming instances to avoid collisions
* breaking up instances.topological_spaces
* fixing all the other pi-type typclasses
* fix import
* oops
* fix import
* missed one
* typo
* WIP
* oops
* the presheaf of continuous functions to ℂ
* restoring eq_to_hom simp lemmas
* removing unnecessary simp lemma
* remove another superfluous lemma
* removing the nat_trans and vcomp notations; use \hom and \gg
* a simpler proposal
* getting rid of vcomp
* fix
* splitting files
* renaming
* update notation
* fix
* cleanup
* use iso_whisker_right instead of map_nat_iso
* proofs magically got easier?
* improve some proofs
* moving instances
* remove crap
* tidy
* minimise imports
* chore(travis): disable the check for minimal imports
* Update src/algebraic_geometry/presheafed_space.lean
Co-Authored-By: semorrison <scott@tqft.net>
* writing `op_induction` tactic, and improving proofs
* squeeze_simping
* cleanup
* rearranging
* cleanup
* cleaning up
* cleaning up
* move
* Update src/category_theory/instances/Top/presheaf_of_functions.lean
Co-Authored-By: Floris van Doorn <fpvdoorn@gmail.com>
* fixes in response to review

2019-05-13 11:21:50-04:00 b9b5bb4
chore(Github): no need to wait for Appveyor anymopre

2019-05-13 11:12:35-04:00 e42d808
chore(scripts): migrate scripts to own repo (#1011)

2019-05-13 18:20:20+10:00 4864515
feat(category_theory): lemmas about cancellation (#1005)
* feat(category_theory): lemmas about cancellation
* rename hypotheses
* Squeeze proofs

2019-05-12 14:51:35 1e0761e
feat(topology/maps): closed embeddings (#1013)
* feat(topology/maps): closed embeddings
* fix "is_open_map"

2019-05-12 01:21:18 de5d038
feat(logic/function): comp₂ -- useful for binary operations (#993)
* feat(logic/function): comp₂ -- useful for binary operations
For example, when working with topological groups
it does not suffice to look at `mul : G → G → G`;
we need to require that `G × G → G` is continuous.
This lemma helps with rewriting back and forth
between the curried and the uncurried versions.
* Fix: we are already in the function namespace, duh
* Replace comp₂ with a generalisation of bicompr
* fix error in bitraversable
* partially open function namespace in bitraversable

2019-05-11 18:16:49-04:00 a154ded
fix(docs/*): docs reorganization [skip ci] (#1012)

2019-05-11 14:35:23-04:00 8e71cee
chore(build): remove script testing on PRs [skip ci]

2019-05-11 13:26:30-04:00 e6d959d
docs(algebra/ring): document compatibility hack [skip ci]

2019-05-11 12:46:31-04:00 c7d870e
chore(compatibility): compatibility with Lean 3.5.0c (#1007)

2019-05-11 15:00:03 60da4f4
feat(data/polynomial): degree_eq_one_of_irreducible_of_root (#1010)

2019-05-11 13:14:21 8603e6b
refactor(algebra/associated): rename nonzero_of_irreducible to ne_zero_of_irreducible (#1009)

2019-05-11 00:09:41 6858c2f
fix(category/fold): use correct `opposite` (#1008)

2019-05-10 02:32:26 91a7fc2
fix(tactic/basic): missing `conv` from tactic.basic (#1004)

2019-05-10 00:53:48 e66e1f3
feat(set_theory): add to cardinal, ordinal, cofinality (#963)
* feat(set_theory): add to cardinal, ordinal, cofinality
The main new fact is the infinite pigeonhole principle
Also includes many basic additions
* fix name change in other files
* address all of Mario's comments
* use classical tactic in order/basic
I did not use it for well_founded.succ, because that resulted in an error in lt_succ
* fix error

2019-05-09 09:29:20 5329bf3
feat(algebra/pointwise): More lemmas on pointwise multiplication (#997)
* feat(algebra/pointwise): More lemmas on pointwise multiplication
* Fix build, hopefully
* Fix build
* to_additive + fix formatting

2019-05-09 05:36:49 df5edde
refactor(strict_mono): make definition + move to order_functions (#998)
* refactor(strict_mono): make definition + move to order_functions
* Weaken assumptions from preorder to has_lt

2019-05-08 22:40:27 8f5d240
refactor(order/basic): make type class args explicit in {*}order.lift (#995)
* refactor(order/basic): make type class arguments explicit for {*}order.lift
* Let's try again
* And another try
* Silly typo
* Fix error
* Oops, missed this one

2019-05-08 20:20:16 7f9717f
feat(*): preorder instances for with_bot and with_zero (#996)
* feat(*): preorder instances for with_bot and with_zero
* Let's try again

2019-05-08 11:42:00 c9cfafc
chore(tactics): splitting tactics and tests into more files (#985)
* chore(tactics): splitting tactics and tests into more files, cleaning up dependencies
* tweaking comment
* introducing `tactic.basic` and fixing imports
* fixes
* fix copyright
* fix some things

2019-05-08 09:47:14 73a30da
feat(group_theory/subgroup): is_subgroup.inter (#994)

2019-05-07 20:44:11-05:00 87cf6e3
feat(category_theory/category_of_elements) (#990)
* feat(category_theory/category_of_elements)
* Update src/category_theory/elements.lean
Co-Authored-By: semorrison <scott@tqft.net>
* Update src/category_theory/elements.lean
Co-Authored-By: semorrison <scott@tqft.net>
* Update src/category_theory/elements.lean
Co-Authored-By: semorrison <scott@tqft.net>
* Update src/category_theory/punit.lean
Co-Authored-By: semorrison <scott@tqft.net>
* various
* remaining simp lemmas

2019-05-07 19:03:46 820bac3
building the hyperreal library (#835)
* more instances
* fix stuff that got weirded
* fix stuff that got weird
* fix stuff that became weird
* build hyperreal library (with sorries)
* fix weirdness, prettify etc.
* spaces
* st lt le lemmas fix type
* Update src/data/real/hyperreal.lean
Co-Authored-By: abhimanyupallavisudhir <43954672+abhimanyupallavisudhir@users.noreply.github.com>
* if then
* more stuff
* Update hyperreal.lean
* Update hyperreal.lean
* Update basic.lean
* Update basic.lean
* Update hyperreal.lean
* of_max, of_min, of_abs
* Update filter_product.lean
* Update hyperreal.lean
* abs_def etc.
* Update filter_product.lean
* hole
* Update hyperreal.lean
* Update filter_product.lean
* Update filter_product.lean
* Update filter_product.lean
* Update hyperreal.lean
* Update hyperreal.lean
* Update filter_product.lean
* Update hyperreal.lean
* Update hyperreal.lean
* finally done with all sorries!
* Update hyperreal.lean
* fix (?)
* fix (?) ring issue
* real.Sup_univ
* st is Sup
* st_id_real spacebar
* sup --> Sup
* fix weirds
* dollar signs
* 100-column
* 100 columns rule
* Update hyperreal.lean
* removing uparrows
* uparrows
* some stuff that got away
* fix
* lift_id
* fix?
* fix mono, hopefully
* fix mono, hopefully
* this should work
* fix -- no more mono
* fixes
* fixes
* fixes
* fixes
* ok, fixed

2019-05-07 17:27:55 4a38d2e
feat(scripts): add --build-new flag to cache-olean (#992)

2019-05-07 10:49:02-04:00 717033e
chore(build): cron build restarts from scratch

2019-05-07 08:45:19 c726c12
feat(category/monad/cont): monad_cont instances for state_t, reader_t, except_t and option_t (#733)
* feat(category/monad/cont): monad_cont instances for state_t, reader_t,
except_t and option_t
* feat(category/monad/writer): writer monad transformer

2019-05-07 01:25:54-04:00 98ba07b
chore(build): fix stages in cron job

2019-05-07 00:28:50-04:00 505f748
chore(build): build against Lean 3.5 nightly build (#989)

2019-05-06 16:50:37 6eba20b
feat(category_theory): currying for functors (#981)
* feat(category_theory): currying for functors
* Update src/category_theory/currying.lean
Co-Authored-By: semorrison <scott@tqft.net>
* compacting
* fix import
* change from review
* rfl on same line

2019-05-06 05:34:58 f536dac
six(style.md): fix broken code (#987)

2019-05-05 11:57:30 23270e7
feat(ring_theory/adjoin): adjoining elements to form subalgebras (#756)
* feat(ring_theory/adjoin): adjoining elements to form subalgebras
* Fix build
* Change to_submodule into a coercion
* Use pointwise_mul
* add simp attribute to adjoin_empty

2019-05-05 07:50:10 3f26ba8
feat(category_theory/products): associators (#982)

2019-05-05 07:02:45 1e8f438
feat(presheaves) (#886)
* feat(category_theory/colimits): missing simp lemmas
* feat(category_theory): functor.map_nat_iso
* define `functor.map_nat_iso`, and relate to whiskering
* rename `functor.on_iso` to `functor.map_iso`
* add some missing lemmas about whiskering
* fix(category_theory): presheaves, unbundled and bundled, and pushforwards
* restoring `(opens X)ᵒᵖ`
* various changes from working on stalks
* rename `nbhds` to `open_nhds`
* fix introduced typo
* typo
* compactify a proof
* rename `presheaf` to `presheaf_on_space`
* fix(category_theory): turn `has_limits` classes into structures
* naming instances to avoid collisions
* breaking up instances.topological_spaces
* fixing all the other pi-type typclasses
* fix import
* oops
* fix import
* missed one
* typo
* restoring eq_to_hom simp lemmas
* removing unnecessary simp lemma
* remove another superfluous lemma
* removing the nat_trans and vcomp notations; use \hom and \gg
* a simpler proposal
* getting rid of vcomp
* fix
* splitting files
* update notation
* fix
* cleanup
* use iso_whisker_right instead of map_nat_iso
* proofs magically got easier?
* improve some proofs
* remove crap
* minimise imports
* chore(travis): disable the check for minimal imports
* Update src/algebraic_geometry/presheafed_space.lean
Co-Authored-By: semorrison <scott@tqft.net>
* writing `op_induction` tactic, and improving proofs
* squeeze_simping
* cleanup
* rearranging
* Update src/category_theory/instances/Top/presheaf.lean
Co-Authored-By: semorrison <scott@tqft.net>
* fix `open` statements, and use `op_induction`
* rename terms of PresheafedSpace to X Y Z. rename field from .X to .to_Top
* forgetful functor
* update comments about unfortunate proofs
* add coercion from morphisms of PresheafedSpaces to morphisms in Top

2019-05-05 02:40:54 fc8b08b
feat(data/set/basic): prod_subset_iff (#980)
* feat(data/set/basic): prod_subset_iff
* syntax

2019-05-04 23:56:50 fbce6e4
fix(data/set/finite): make fintype_seq an instance (#979)

2019-05-04 22:16:39 7dea60b
feat(logic/basic): forall_iff_forall_surj (#977)
a lemma from the perfectoid project

2019-05-04 20:01:33 b4d483e
feat(colimits): arbitrary colimits in Mon and CommRing (#910)
* feat(category_theory): working in Sort rather than Type, as far as possible
* missed one
* adding a comment about working in Type
* remove imax
* removing `props`, it's covered by `types`.
* fixing comment on `rel`
* tweak comment
* add matching extend_π lemma
* remove unnecessary universe annotation
* another missing s/Type/Sort/
* feat(category_theory/shapes): basic shapes of cones and conversions
minor tweaks
* Moving into src. Everything is borked.
* investigating sparse
* blech
* maybe working again?
* removing terrible square/cosquare names
* returning to filtered colimits
* colimits in Mon
* rename
* actually jump through the final hoop
* experiments
* fixing use of ext
* feat(colimits): colimits in Mon and CommRing
* fixes
* removing stuff I didn't mean to have in here
* minor
* fixes
* merge
* update after merge
* fix import

2019-05-04 12:06:04-05:00 c7baf8e
feat(option/injective_map) (#978)

2019-05-03 21:34:29 f98ffde
feat(tactic/decl_mk_const): performance improvement for library_search (#967)
* feat(tactic/decl_mk_const): auxiliary tactic for library_search [WIP]
* use decl_mk_const in library_search
* use decl_mk_const
* move into tactic/basic.lean

2019-05-03 13:58:06-04:00 7b1105b
chore(build): build only master and its related PRs

2019-05-03 13:37:08-04:00 e747c91
chore(README): put the badges in the README on one line (#975)

2019-05-03 12:35:46-04:00 f2db636
feat(docs/install_debian): Debian startup guide (#974)
* feat(docs/install_debian): Debian startup guide
* feat(scripts/install_debian): One-line install for Debian  [ci skip]
* fix(docs/install_debian*): Typos pointed out by Johan
Also adds a summary of what will be installed

2019-05-03 11:30:19-05:00 f5060c4
feat(category_theory/limits): support for special shapes of (co)limits (#938)
feat(category_theory/limits): support for special shapes of (co)limits

2019-05-03 15:24:11+02:00 219cb1a
chore(travis): disable the check for minimal imports (#973)

2019-05-03 14:11:01+01:00 44386cd
chore(docs): delete docs/wip.md (#972)
* chore(docs): delete docs/wip.md
long outdated
* remove link in README

2019-05-03 10:59:45 3eb7ebc
remove code duplication (#971)

2019-05-02 22:55:52+01:00 6956daa
fix(data/polynomial): change instance order in polynomial.subsingleton (#970)

2019-05-02 17:32:09 60b3c19
fix(scripts/remote-install-update-mathlib): apt shouldn't ask (#969)

2019-05-02 12:29:34-04:00 d288905
fix(script/remote-install-update-mathlib) fix answer reading and requests/urllib3 version conflict (#968)

2019-05-02 08:40:53 8a097f1
feat(ring_theory/ideal_operations): inj_iff_trivial_ker for ring homomorphisms (#951)
* feat(ring_theory/ideal_operations): inj_iff_trivial_ker for ring homomorphisms
* Update subgroup.lean
* Update ideal_operations.lean

2019-05-02 08:08:14 ef11fb3
feat(category_theory/limits/opposites): (co)limits in opposite categories (#926)
* (co)limits in opposite categories
* moving lemmas
* moving stuff about complete lattices to separate PR
* renaming category_of_preorder elsewhere
* build limits functor/shape at a time
* removing stray commas, and making one-liners
* remove non-terminal simps

2019-05-02 04:37:39 69094fc
fix(tactic/library_search): iff lemmas with universes (#935)
* fix(tactic/library_search): iff lemmas with universes
* cleaning up
* add crossreference

2019-05-02 02:35:03 9b7fb5f
feat(category_theory/limits): complete lattices have (co)limits (#931)
* feat(category_theory/limits): complete lattices have (co)limits
* Update lattice.lean

2019-05-01 08:53:51-04:00 b3433a5
feat(script/auth_github): improve messages [ci skip] (#965)

2019-04-30 20:17:17 c8a2aa9
chore(category_theory): move small_category_of_preorder to preorder namespace (#932)

2019-04-30 18:22:31+02:00 7c86814
fix(scripts/remote-install-update-mathlib): try again [ci skip]
The previous attempt to install setuptools seems to fails for timing
reasons (PyGithub need setuptools after it's downloaded but before
it is installed, this is probably also a packaging issue in PyGithub).

2019-04-30 15:20:36 a15fca5
fix(scripts/remote-install-update-mathlib): missing dependency (#964)
Also add a `--upgrade` option to `pip install` in case something is
already there but outdated

2019-04-30 12:53:25+01:00 8dcce05
feat(analysis/normed_space): open mapping (#900)
* The Banach open mapping theorem
* improve comments
* feat(analysis/normed_space): rebase, fix build

2019-04-29 20:12:03 00aaf05
refactor(tactic/interactive): remove dependencies of (#878)
`tactic/interactive` on many theories

2019-04-29 12:46:38+02:00 9b3e91b
Update elan.md

2019-04-26 20:52:03 53f9878
refactor(analysis/normed_space): use bundled type for `fderiv` (#956)
* feat(analysis/normed_space): refactor fderiv to use bounded_linear_map
- uniqueness remains sorry'd
- more simp lemmas about bounded_linear_map
* refactor uniqueness proof
* fix(analysis/normed_space/operator_norm): rename `bound_le_op_norm` to `op_norm_le_bound`
- so that the inequality goes the correct way.

2019-04-26 22:27:05+02:00 b49bf61
fix(README): update maintainer list

2019-04-26 10:52:46+01:00 0444f9c
feat(data/equiv/basic): sum_compl_apply and others (#961)
* feat(data/equiv/basic): sum_congr_apply and others
* Update basic.lean

2019-04-25 18:58:02 038f809
refactor(analysis/normed_space/operator_norm): replace subspace with … (#955)
* refactor(analysis/normed_space/operator_norm): replace subspace with structure
* refactor(analysis/normed_space/operator_norm): add coercions

2019-04-23 20:15:47 1d9ff68
feat(function/embedding): ext and ext_iff (#962)

2019-04-23 07:22:05 0d7b419
fix(ring_theory/adjoin_root): move adjoin_root out of adjoin_root namespace (#960)

2019-04-22 23:48:35 45456cf
refactor(data/equiv/basic): simplify definition of equiv.set.range (#959)
* refactor(data/equiv/basic): simplify definition of equiv.set.range
* delete duplicate

2019-04-22 15:00:53 63bbd1c
feat(data/list/basic): index_of_inj (#954)
* feat(data/list/basic): index_of_inj
* make it an iff

2019-04-21 06:07:43-04:00 3478f1f
fix(tactic/interactive): allow `convert e using 0`

2019-04-20 18:42:45-04:00 9daa1a5
feat(tactic/clear_except): clear most of the assumptions in context (#957)

2019-04-20 20:07:03 4b9d94d
feat(data/[fin]set): add some more basic properties of (finite) sets (#948)
* feat(data/[fin]set): add some more basic properties of (finite) sets
* update after reviews
* fix error, move pairwise_disjoint to lattice as well
* fix error

2019-04-20 15:39:59+02:00 7370cbf
feat(tactic/linarith): treat expr atoms up to defeq (#950)

2019-04-20 09:47:15 784a68c
fix(topology/order): Missing Prop annotation (#952)

2019-04-20 00:49:21 e4fc5af
feat(tactic/ring): treat expr atoms up to defeq (#949)

2019-04-18 22:33:17-04:00 c1aff1b
style(tactic/omega): whitespace and minor tweaks
missed the PR review cycle

2019-04-18 20:15:55 d0140dd
feat(group_theory/subgroup): additive version of inj_iff_trivial_ker (#947)

2019-04-17 15:33:51 032400b
feat(analysis/normed_space): more facts about operator norm (#927)
* refactor(analysis/normed_space): refactor and additional lemmas
- rename `bounded_linear_maps` to `bounded_linear_map`, `operator_norm` to `op_norm`.
- refactor operator norm with an equivalent definition.
- change some names and notation to be more consistent with conventions elsewhere
  in mathlib: replace `bounded_by_*` with `le_*`, `operator_norm_homogeneous` with
  `op_norm_smul`.
- more simp lemmas for bounded_linear_map.
- additional results: lipschitz continuity of the operator norm, also
  that it is submultiplicative.
* chore(analysis/normed_space/operator_norm): add attribution
* style(analysis/normed_space/operator_norm): use namespace `real`
- open `real` instead of `lattice` and omit spurious prefixes.
* feat(analysis/normed_space/operator_norm): coercion to linear_map
* style(analysis/normed_space/bounded_linear_maps): minor edits
- extract variables for brevity of theorem statements.
- more consistent naming of variables.
* feat(analysis/normed_space/operator_norm): add constructor of bounded_linear_map from is_bounded_linear_map
* fix(analysis/normed_space/operator_norm): remove spurious explicit argument
* fix(analysis/normed_space): type of bounded linear maps
- change the definition of bounded_linear_map to be a type rather than
  the corresponding subspace, and mark it for unfolding.
- rename `bounded_linear_map.from_is_bounded_linear_map` to `is_bounded_linear_map.to_bounded_linear_map`.
* feat(analysis/normed_space): analysis results for bounded_linear_maps

2019-04-17 09:53:00-04:00 8b23dad
feat(scripts): use apt-get on ubuntu and support older Python versions (#945)

2019-04-17 11:03:45+02:00 3f4b154
feat(tactic/omega): tactic for linear integer & natural number arithmetic (#827)
* feat(tactic/omega): tactic for discharging linear integer and natural number arithmetic goals
* refactor(tactic/omega): clean up namespace and notations
* Update src/data/list/func.lean
Co-Authored-By: skbaek <seulkeebaek@gmail.com>
* Add changed files
* Refactor val_between_map_div
* Use default inhabitants for list.func

2019-04-16 21:38:18 4b8106b
fix(test/local_cache): make the trace text explicit and quiet (#941)
(by default)

2019-04-16 20:12:19 7bbbee1
feat(*): various additions to low-level files (#904)
* feat(*): various additions to low-level files
* fix(data/fin): add missing universe

2019-04-16 18:10:16 2294876
feat(data/finset): powerset_len (subsets of a given size) (#899)
* feat(data/finset): powerset_len (subsets of a given size)
* fix build

2019-04-16 16:32:52 8985a43
feat(data/set/intervals): some interval lemmas (#942)
* feat(data/set/intervals): a few more lemmas
* one-liners

2019-04-16 07:19:32 361e216
feature(category_theory/instances/Top/open[_nhds]): category of open sets, and open neighbourhoods of a point (merge #920 first) (#922)
* rearrange Top
* oops, import from the future
* the categories of open sets and of open_nhds
* missing import
* restoring opens, adding headers
* Update src/category_theory/instances/Top/open_nhds.lean
Co-Authored-By: semorrison <scott@tqft.net>
* use full_subcategory_inclusion

2019-04-15 19:41:40 5f04e76
feat(nat/basic): add some basic nat inequality lemmas (#937)
* feat(nat/basic): add some basic nat inequality lemmas, useful as specific cases of existing ring cases since uses less hypothesis
* feat(nat/basic): add some basic nat inequality lemmas, with convention fixes
* feat(nat/basic): add some basic nat inequality lemmas, with convention fixes

2019-04-15 19:09:47 d06eb85
feat(topology/algebra/continuous_functions): the ring of continuous functions (#923)
* feat(topology/algebra/continuous_functions): the ring of continuous functions
* filling in the hierarchy
* use to_additive

2019-04-14 19:26:36-04:00 ca5d4c1
feat(scripts): disable testing the install scripts in external PRs (#936)

2019-04-14 15:16:28+01:00 a1b7dcd
fix(algebra/big_operators): change variables in finset.prod_map to remove spurious [comm_monoid β] (#934)
The old version involved maps α → β → γ and an instance [comm_monoid γ], but there was also a section variable [comm_monoid β].  In applications of this lemma it is not necessary, and not usually true, that β is a monoid.  Change the statement to involve maps α → γ → β so that we already have a monoid structure on the last variable and we do not make spurious assumptions about the second one.

2019-04-13 21:56:41+02:00 f01934c
docs(elan): remove reference to nightly Lean (#928)
* docs(elan): Remove reference to nightly Lean.

2019-04-13 19:13:56+01:00 49c3a04
fix(algebra.field): introduce division_ring_has_div' (#852)
* fix division_ring_has_div
* priority default
* comment

2019-04-12 12:59:14+02:00 3fe449e
feat(algebra/free): free magma, semigroup, monoid (#735)

2019-04-11 19:08:59 be79f25
refactor(data/int/basic): weaken hypotheses for int.induction_on (#887)
* refactor(data/int/basic): weaken hypotheses for int.induction_on
* fix build
* fix build

2019-04-11 14:11:00 36f0c22
feat(submonoid, subgroup, subring): is_ring_hom instances for set.inclusion (#917)

2019-04-11 04:11:18-04:00 c1e07a2
fix(tactic/explode): more accurate may_be_proof (#924)

2019-04-11 00:50:17 22fcb4e
minor changes (#921)

2019-04-10 17:49:27 f5d43a9
feat(analysis/normed_space/deriv): show that the differential is unique (2) (#916)
* Remove wrong simp attribute
* fix typo
* characterize convergence at_top in normed spaces
* copy some changes from #829
* small elements in normed fields go to zero
* derivatives are unique
* remove unnecessary lemma
* update according to review
* remove another empty line

2019-04-10 17:14:40 41014e5
rename has_sum and is_sum to summable and has_sum (#912)

2019-04-10 16:24:03+01:00 c4b65da
fix(mergify): merge if either push or pr build passes. (#918)
* fix(mergify): merge if either push or pr build passes.
* Update .mergify.yml
* Update .mergify.yml

2019-04-10 09:45:01+01:00 49ccc9f
refactor(order/lexicographic): use prod.lex and psigma.lex (#914)
* refactor(order/lexicographic): use prod.lex and psigma.lex
* update

2019-04-10 07:17:03 8992472
fix(category_theory): make the `nat_trans` arrow `⟹` a synonym for the `hom` arrow (#907)
* removing the nat_trans and vcomp notations; use \hom and \gg
* a simpler proposal
* getting rid of vcomp
* fix
* update notations in documentation
* typo in docs

2019-04-10 06:48:16 f04535d
feat(category_theory): iso_whisker_(left|right) (#908)
* feat(category_theory): iso_whisker_(left|right)
* oops, use old notation for now
* update after merge

2019-04-10 02:08:58 86bd577
refactor(algebra/group): is_monoid_hom extends is_mul_hom  (#915)
* refactor(algebra/group): is_monoid_hom extends is_mul_hom
* Fix build

2019-04-10 00:40:05 f1683a9
feat(data/set/basic): inclusion map (#906)
* feat(data/set/basic): inclusion map
* add continuous_inclusion
* minor style change

2019-04-10 00:12:57 96d748e
refactor(category_theory): rename `functor.on_iso` to `functor.map_iso` (#893)
* feat(category_theory): functor.map_nat_iso
* define `functor.map_nat_iso`, and relate to whiskering
* rename `functor.on_iso` to `functor.map_iso`
* add some missing lemmas about whiskering
* some more missing whiskering lemmas, while we're at it
* removing map_nat_iso

2019-04-09 22:44:04 d692499
reorganising category_theory/instances/rings.lean (#909)

2019-04-09 19:46:08 4494001
feat(field_theory/subfield): subfields are fields (#888)
* feat(field_theory/subfield): subfield are fields
* Update subfield.lean

2019-04-09 13:38:26-04:00 5c4f5f2
chore(build): allow PRs from separate repos to test deployment scripts

2019-04-09 10:16:41-04:00 c2d79f8
fix(mergify): require travis "push" check to push (#913)
This hopefully fixes an error where mergify does not merge a PR is the "pr" build succeeds before the "push" build. In these situations mergify does not merge, because the branch protection settings require both builds to pass.
Unfortunately, there doesn't seem to be an option to change the branch protection settings to only require the "pr" build to pass

2019-04-09 13:50:54+01:00 66a86ff
refactor(*): rename is_group_hom.mul to map_mul (#911)
* refactor(*): rename is_group_hom.mul to map_mul
* Fix splits_mul

2019-04-09 04:27:55 eb024dc
feat(order/lexicographic): lexicographic pre/partial/linear orders (#820)
* remove prod.(*)order instances
* feat(order/lexicographic): lexicographic pre/partial/linear orders
* add lex_decidable_linear_order
* identical constructions for dependent pairs
* cleaning up
* Update lexicographic.lean
forgotten `instance`
* restore product instances, and add lex type synonym for lexicographic instances
* proofs in progress
* * define lt
* prove lt_iff_le_not_le
* refactoring

2019-04-08 22:25:36+01:00 29507a4
feat(group_theory/subgroup): subtype.add_comm_group (#903)

2019-04-08 17:11:21 ec51b6e
feat(category_theory/colimits): missing simp lemmas (#894)

2019-04-08 17:49:51+02:00 6d2cf4a
fix(doc/extra/tactic_writing): rename mul_left (#902) [ci skip]
*  fix(doc/extra/tactic_writing): rename mul_left
* one more fix

2019-04-08 12:50:22+02:00 5f1329a
feat(linear_algebra/dual): add dual vector spaces (#881)
* feat(linear_algebra/dual): add dual vector spaces
Define dual modules and vector spaces and prove the basic theorems: the dual basis isomorphism and
evaluation isomorphism in the finite dimensional case, and the corresponding (injectivity)
statements in the general case. A variant of `linear_map.ker_eq_bot` and the "inverse" of
`is_basis.repr_total` are included.
Universe issues make an adaptation of `linear_equiv.dim_eq` necessary.
* style(linear_algebra/dual): adapt to remarks from PR dsicussion
* style(linear_algebra/dual): reformat proof of `ker_eq_bot'`

2019-04-08 05:21:27 10490ea
feat(analysis/complex/polynomial): fundamental theorem of algebra (#851)
* feat(data/complex/polynomia): fundamental theorem of algebra
* fix build
* add docstring
* add comment giving link to proof used.
* spag
* move to analysis/complex
* fix data/real/pi
* Update src/analysis/complex/polynomial.lean
Co-Authored-By: ChrisHughes24 <33847686+ChrisHughes24@users.noreply.github.com>
* make Reid's suggested changes
* make Reid's suggested changes

2019-04-07 23:05:06-04:00 4fecb10
feat(topology/gromov_hausdorff): the Gromov-Hausdorff space (#883)

2019-04-08 02:41:50 5d81ab1
trying to work out what was wrong with catching signals (#898)

2019-04-08 01:59:38 0a49030
fix(category_theory): turn `has_limits` classes into structures (#896)
* fix(category_theory): turn `has_limits` classes into structures
* fixing all the other pi-type typclasses
* oops

2019-04-07 19:36:21+02:00 483a6c2
feat(data/list/min_max): add minimum (#892)

2019-04-07 16:29:19 891c050
feat(subgroup, subring, subfield): directed Unions of subrings are subrings (#889)

2019-04-07 10:29:26+01:00 bd524fc
feat(field_theory/subfield): is_subfield instances (#891)

2019-04-07 01:34:16 7e70ebd
feat(data/nat/basic): b = c if b - a = c - a (#862)

2019-04-06 21:04:01-04:00 3000f32
fix(build): external PRs can't use GitHub credentials

2019-04-07 00:21:11+01:00 e4d3ca3
fix(analysis/normed_space/bounded_linear_maps): fix build (#895)

2019-04-06 16:44:31-04:00 31ff5c5
refactor(analysis/normed_space/bounded_linear_maps): nondiscrete normed field

2019-04-06 16:20:01-04:00 53e7d72
fix(appveyor): build every commit

2019-04-06 16:14:28-04:00 ae8a1fb
refactor(analysis/normed_space/bounded_linear_maps): nondiscrete normed field

2019-04-06 15:56:00-04:00 8831e0a
chore(mergify): require the AppVeyor build to succeed

2019-04-06 15:08:22-04:00 8fa071f
fix(scripts): not all files were deployed through the curl command (#879)

2019-04-06 18:45:57 8d45ccb
feat(category_theory/bifunctor): simp lemmas (#867)
* feat(category_theory/bifunctor): simp lemmas
* remove need for @, thanks Kenny and Chris!

2019-04-06 16:52:11 3360f98
more general hypotheses for integer induction (#885)

2019-04-06 10:59:07-04:00 d8a2bc5
feat(algebra/opposites): opposites of operators (#538)

2019-04-05 14:05:35-04:00 e0e231d
fix(build): match build names

2019-04-05 13:44:34-04:00 d0f8607
fix(scripts): protect `leanpkg test` against timeouts

2019-04-05 11:21:07-04:00 e809df6
fix(scripts): Mac Python's test support doesn't work on Travis

2019-04-05 11:07:11-04:00 d9ec8a8
fix(scripts): not all files were deployed through the curl command

2019-04-05 14:37:35 78a08eb
feat(data/mllist): monadic lazy lists (#865)
* feat(data/mllist): monadic lazy lists
* oops, fix header
* shove into tactic namespace
* make mllist into a monad (#880)
* make mllist into a monad
* looks good. add `take`, and some tests
* update authors
* cleanup test

2019-04-05 06:30:13 44d1c7a
feat(list.split_on): [1,1,2,3,2,4,4].split_on 2 = [[1,1],[3],[4,4]] (#866)

2019-04-05 06:11:40 901bdbf
feat(data/list/min_max): minimum and maximum over list (#884)
* feat(data/list/min_max): minimum and maximum over list
* Update min_max.lean
* replace semicolons

2019-04-05 04:01:15 858d111
feat(data/matrix): more basic matrix lemmas (#873)
* feat(data/matrix): more basic matrix lemmas
* feat(data/matrix): transpose_add

2019-04-05 03:14:12 0b7ee1b
feat(category_theory): introduce the core of a category (#832)

2019-04-04 20:42:02-04:00 b6c2be4
chore(mergify): delete head branch when merging

2019-04-04 23:27:46 7aaccae
feat(algebra/char_p,field_theory/finite_card): cardinality of finite fields (#819)
* First lemma's added
* fixed lemmas by switching arguments
* vector_space card_fin
* char p implies zmod p module
* Finite field card
* renaming
* .
* bug fix
* move to_module to is_ring_hom.to_module
* fix bug
* remove unnecessary open
* instance instead of thm and remove unnecessary variables
* moved cast_is_ring_hom and zmod.to_module to char_p
* removed redundent nat.prime
* some char_p stuff inside namespace char_p
* fix
* Moved finite field card to a different file
* Removed unnecessary import
* Remove unnecessary lemmas
* Update src/algebra/char_p.lean
Co-Authored-By: CPutz <casper.putz@gmail.com>
* rename char_p lemmas
* Minor changes

2019-04-04 16:28:11-04:00 3abfda0
chore(github/pr): enable code owners

2019-04-04 19:04:48 8183a5a
feat(data/list/perm): nil_subperm (#882)

2019-04-04 17:16:18 384c9be
feat (analysis/normed_space/basic.lean): implement reverse triangle inequality (#831)
* implement reverse triangle inequality
* make parameters explicit

2019-04-04 08:21:57-04:00 07aa1e3
fix(build): fix Lean version

2019-04-03 17:19:10-04:00 1c69b60
chore(mergify): fix config

2019-04-03 16:22:27-04:00 7762bc4
chore(mergify): fix config file

2019-04-03 16:06:06-04:00 d4fd4b2
chore(mergify): use team names instead of user names

2019-04-03 14:56:14-04:00 2230934
chore(mergify): disable `delete_head_branch`

2019-04-03 16:30:14+01:00 840ddeb
fix(README): fix mergify icon

2019-04-03 08:38:06-04:00 542d179
chore(github/pr): mergify configuration (#871)

2019-04-03 08:10:21-04:00 a0cbe3b
feat(data/fin): add `fin.clamp` (#874)

2019-04-03 05:37:35-04:00 2c735dc
feat(ring_theory/algebra_operations): submodules form a semiring (#856)

2019-04-03 05:35:05-04:00 b9e9328
feat(topology/metric_space/completion): completion of metric spaces (#743)

2019-04-03 09:38:15+02:00 c3aba26
feat(topology/uniform_space/pi): indexed products of uniform spaces (#845)
* feat(topology/uniform_space/pi): indexed products of uniform spaces
* fix(topology/uniform_space/pi): defeq topology
* fix(src/topology/uniform_space/pi): typo
Co-Authored-By: PatrickMassot <patrickmassot@free.fr>

2019-04-03 02:27:59-04:00 7043a4a
feat(algebra/pointwise): pointwise addition and multiplication of sets (#854)

2019-04-02 21:14:02-04:00 f112076
feat(tactic/basic): add `tactic.get_goal` (#876)

2019-04-02 20:45:14-04:00 e96d6b7
fix(int/basic): change order of instances to int.cast (#877)
As discussed at https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Problem.20with.20type.20class.20search/near/161848744
Changing the order of arguments lets type class inference fail quickly for `int -> nat` coercions, rather than repeatedly looking for `has_neg` on `nat`.

2019-04-02 18:34:18-04:00 ce92e8a
chore(.travis.yml): use Lean to determine the Lean version (#714)

2019-04-02 18:33:34-04:00 6c55989
build(travis): interrupt the build at the first error message (#708)
Also make travis_long.sh print its progress messages to stderr.
This sidesteps a mysterious issue where piping the output of
travis_long.sh to another program caused that output to be lost
(probably buffered somewhere?) so Travis would kill the build
after 10 minutes.

2019-04-02 11:22:44-04:00 13034ba
feat(tactic/local_cache): add tactic-block-local caching mechanism (#837)

2019-04-02 10:44:43-04:00 7eac178
fix(scripts/update-mathlib): protect file operations from interrupts (#864)

2019-04-02 08:23:50-05:00 f385ad6
Inductive limit of metric spaces (#732)

2019-04-02 07:57:52-04:00 727120c
fix(build): improve compatibility of caching scripts with Sourcetree (#863)

2019-04-01 20:04:58-05:00 5694d15
feat(data/nat/basic): nat.le_rec_on (#585)

2019-04-01 18:55:36-04:00 8e4542d
Merge branch 'congr-2'

2019-04-01 18:52:21-04:00 ec0a4ea
fix(tactic/congr'): some `\iff` goals were erroneously rejected

2019-04-01 16:48:53-04:00 5fe470b
feat(tactic/push_neg): a tactic pushing negations (#853)

2019-04-01 16:21:09-04:00 5995d46
fix(build): prevent leanchecker from timing out

2019-04-01 16:13:58-04:00 2f088fc
feat(category_theory): working in Sort rather than Type (#824)

2019-04-01 22:07:28+02:00 404e2c9
add tutorial about zmod37 (#767)
Reference to a mathlib file which no longer exists has been fixed, and a more user-friendly example of an equivalence relation has been added in a tutorial.

2019-04-01 21:58:17+02:00 867661e
docs(tactics): add introduction to the instance cache tactic section

2019-04-01 21:55:31+02:00 59e0593
docs(tactics): minor rewrite of exactI, resetI etc
I always found these tactics confusing, but I finally figured out what they do and so I rewrote the docs so that I understand them better.

2019-04-01 15:08:22-04:00 a1fe39b
refactor(analysis/convex): make instance local (#869)

2019-04-01 14:48:06-04:00 3bc0f00
fix(scripts/cache-olean): only run the post-checkout hook if we actually changed branches (#857)

2019-04-01 03:01:21-04:00 2851236
feat(data/real/pi): Compute the first three digits of pi (#822)

2019-03-31 21:33:03+02:00 c91e6c2
fix(ring_theory/algebra): remove duplicate theorems to fix build

2019-03-31 08:35:59-04:00 9480df5
refactor(computability): unpack fixed_point proof

2019-03-31 08:35:21-04:00 359cac1
feat(computability): computable_iff_re_compl_re

2019-03-31 08:32:21-04:00 514de77
feat(data/finset): to_finset_eq_empty

2019-03-31 08:31:39-04:00 72634d2
feat(data/complex/basic): smul_re,im

2019-03-31 00:48:41 e1c035d
feat(data/polynomial): eval₂_neg

2019-03-29 23:56:28 c2bb4c5
refactor(data/zsqrtd/basic): move zsqrtd out of pell and into data (#861)

2019-03-29 15:03:34-05:00 dc7de46
feat(analysis/convex): convex sets and functions (#834)

2019-03-29 13:08:29-04:00 171e913
fix(scripts/remote-install-update-mathlib): add GitPython dependency (#860)

2019-03-28 22:56:01-04:00 2e7f009
fix(scripts/deploy_nightly): pushing to the `lean-3.4.2` branch is sometimes blocked (#859)

2019-03-28 22:11:15-04:00 a4fd55c
feat(library_search): a simple library_search function (#839)

2019-03-28 20:04:39-04:00 59caf11
fix(scripts/update-mathlib): fix imports of python files

2019-03-28 19:11:34-04:00 6cd336c
fix(scripts/update-mathlib): github authentication

2019-03-28 16:32:00-04:00 1c04a32
fix(scripts/update-mathlib): update-mathlib shouldn't need github authentication

2019-03-28 14:01:35-04:00 48df321
feat(category_theory/instances): category of groups (#749)

2019-03-28 16:25:01 179d4d0
refactor(*): unify group/monoid_action, make semimodule extend action (#850)
* refactor(*): unify group/monoid_action, use standard names, make semimodule extend action
* Rename action to mul_action
* Generalize lemmas. Also, add class for multiplicative action on additive structure
* Add pi-instances
* Dirty hacky fix
* Remove #print and set_option pp.all
* clean up proof, avoid diamonds
* Fix some build issues
* Fix build
* Rename mul_action_add to distrib_mul_action
* Bump up the type class search depth in some places

2019-03-27 21:28:39-04:00 25bab56
feat(scripts/cache_olean): cache and fetch olean binaries (#766)
* script setup and documentation
* fetch mathlib nightly when relevant
* use credentials to access `github.com`
* locate correct git directory, and add prompt
* add confirmation message to setup-dev-scripts
* adding --build-all option

2019-03-27 21:47:02+01:00 8838ff3
feat(algebra/field_power): add fpow_one, one_fpow, fpow_mul, mul_fpow (closes #855)

2019-03-27 20:15:04+01:00 8429354
feat(analysis): add real.rpow_le_one

2019-03-27 20:15:04+01:00 4305ad6
feat(analysis): add rpow_pos_of_pos

2019-03-27 09:57:35-05:00 02ca494
Remove outparam in normed space (#844)

2019-03-27 08:20:35-04:00 52fddda
feat(algebra/archimedean): lemmas about powers of elements (#802)

2019-03-26 16:35:47-05:00 17e40bb
feat(tactic/congr): apply to `iff` propositions (#833)

2019-03-26 21:53:30+01:00 c3a9028
fix(data/polynomial): (nat_)degree_map' assumed a comm_ring instead of a comm_semiring

2019-03-26 19:07:18+01:00 a016652
feat(data/finset): add range_add_one'

2019-03-26 19:07:18+01:00 0ea37e9
feat(algebra/big_operators): add prod_map, sum_map

2019-03-26 19:07:18+01:00 d3c68fc
feat(analysis/normed_space): tendsto_zero_iff_norm_tendsto_zero

2019-03-26 19:07:18+01:00 df08058
refactor(analysis/normed_space): rename norm_mul -> norm_mul_le; use norm_mul for the equality in normed fields; and norm_mul_le for the inequality in normed_rings

2019-03-26 18:22:00+01:00 bd21b0e
feat(analyis/normed_space): add normed_field instance for ℂ

2019-03-26 18:22:00+01:00 a01cf86
feat(data/multiset,data/finset): add multiset./finset.le_sum_of_additive

2019-03-26 18:22:00+01:00 c912253
feat(algebra/group_power): add lt_of_pow_lt_pow

2019-03-26 18:22:00+01:00 fd37f96
feat(data/fin): add injective_cast_le

2019-03-26 18:22:00+01:00 c0c2edb
feat(algebra/big_operators): add Gauss' summation formula

2019-03-26 18:22:00+01:00 cfeb887
feat(data/polynomial): degree_map', nat_degree_map' semiring variant of degree_map, nat_degree_map

2019-03-26 18:22:00+01:00 aa2c6e2
feat(data/mv_polynomial): more about renaming

2019-03-26 18:22:00+01:00 5b73f46
chore(data/mv_polynomial): use type name as filename

2019-03-26 18:22:00+01:00 8ccca3f
feat(data/finsupp): add emb_domain

2019-03-26 18:22:00+01:00 d7bd41f
feat(linear_algebra/dimension): add exists_mem_ne_zero_of_dim_pos

2019-03-26 18:22:00+01:00 22352ff
feat(linear_algebra/dimension): add dim_span_le; add rank_finset_sum_le

2019-03-26 17:46:31+01:00 f882b8b
feat(data/polynomial): rec_on_horner (#739)

2019-03-26 00:11:19 410ae5d
feat(group_theory/subgroup): add inv_iff_ker' and related (#790)
* feat(group_theory/subgroup): add inv_iff_ker' and related
* correcting spacing and adding to_additive attribute
* changing name to ker-mk

2019-03-25 16:03:35-04:00 0bb64a2
feat(tactic/solve_by_elim): working with multiple goals (#838)

2019-03-25 19:21:49 291a4f3
refactor(algebra/group_action): use notation for monoid/group actions (#846)
* refactor(module_action): bundle and introduce notation
* fix(linear_algebra/determinant): fix the coercion issue using a local notation
* fix(linear_algebra/dimension): fix build

2019-03-25 18:24:08 a1158d8
feat(algebra/module): every abelian group is a Z-module (#848)

2019-03-25 16:59:27+01:00 cb5e185
refactor(data/equiv): equiv_injective_surjective (#849)

2019-03-23 21:28:16+01:00 cd7402d
Minor clarification to simpa doc (#842)

2019-03-23 12:56:54-04:00 b0b33ab
fix(import): remove relative imports

2019-03-22 16:02:14 c29769f
fix(ring_theory/multiplicity): correct spelling mistake in docstring

2019-03-22 13:22:43+01:00 b5bb446
fix(doc/extra/tactic_writing): fix a minor error (#841) [ci-skip]
* fix(doc/extra/tactic_writing): fix a minor error
* comma splice

2019-03-22 00:28:38 989efab
feat(data/equiv/algebra): add add_equiv and mul_equiv (#789)
* feat(data/equiv/algebra): add monoid_equiv and group_equiv
* refactor; now using mul_equiv; adding add_equiv
* tidy
* namechange broke my code; now fixed
* next effort
* switching is_mul_hom back to explicit args
* removing more implicits
* typo
* switching back to implicits (to fix mathlib breakage)
* Making is_mul_hom and is_add_hom classes
* adding more to_additive

2019-03-21 23:44:25 798a08d
feat(group_theory/submonoid): add closure_singleton (#810)
* feat(group_theory/submonoid): add closure_singleton
* adding some to_additive

2019-03-20 10:16:08-04:00 098c2cb
feat(tactic/wlog): `discharger` defaults to classical `tauto` (#836)

2019-03-18 00:04:29 d60d161
feat(linear_algebra/basic): add ring instance (#823)

2019-03-17 21:08:06 9ff5e8d
feat(algebra/punit_instances): punit instances (#828)

2019-03-17 21:07:14 df996be
fix(topology/algebra/group): fix binders for top group extensionality (#826)

2019-03-17 09:07:33-05:00 e8bdc7f
feat(order/filter/filter_product): build hyperreals (#801)
Construction of filter products, ultraproducts, some instances, hyperreal numbers.

2019-03-16 09:30:48-05:00 0c2c2bd
feat(group_theory/perm/cycles): cycle_factors (#815)

2019-03-16 09:28:41-05:00 7b001c9
feat(data/set/intervals): add missing intervals + some lemmas (#805)
The lemmas about Icc ⊆ I** are important for convexity

2019-03-14 10:32:41+01:00 2bf44d3
refactor(*): rename metric_space_subtype to subtype.metric_space (#817)

2019-03-14 10:31:53+01:00 c5afc52
feat(topology/metric_space/baire): Baire theorem (#816)

2019-03-13 23:45:07-04:00 72100bd
feat(tactic/squeeze,hole): remove needless qualifications in names

2019-03-12 13:37:46-04:00 82f79a5
feat(data/list|multiset|finset): lemmas about intervals in nat (#795)

2019-03-12 13:53:34+01:00 2738f9b
chore(topology/*): @uniformity α _ becomes 𝓤 α (#814)
This is a binder type change and a local notation

2019-03-12 01:04:54-04:00 3360267
feat(tactic/basic): folding over the environment, to get all declarations (#798)

2019-03-11 16:11:52-04:00 bde8690
feat(data/alist,data/finmap): union (#750)

2019-03-11 17:09:10+01:00 eb96a25
feat(topology/algebra/group): extensionality for top group structure

2019-03-11 14:06:20 69249d8
feat(topology/algebra/monoid): add is_submonoid.mem_nhds_one (#809)

2019-03-09 17:49:20-05:00 51c31ce
refactor(data/list): rm redundant eq_nil_of_forall_not_mem (#804)

2019-03-09 11:34:38 e8818fa
feat(data/set/finite): add finite_lt_nat (#807)

2019-03-08 20:10:50 7de57e8
feat(ring_theory/noetherian): Nakayama's Lemma (#778)
* feat(ring_theory/noetherian): Nakayama's Lemma
* Update src/ring_theory/noetherian.lean
Co-Authored-By: kckennylau <kc_kennylau@yahoo.com.hk>

2019-03-08 15:01:45+01:00 1159fa9
refactot(data/equiv/basic): rename apply_inverse_apply to apply_symm_apply (#800)

2019-03-08 13:42:54+01:00 b1af140
style(data/list/basic): clean up count_bag_inter

2019-03-08 08:46:58+01:00 ffa6d69
feat(*): has_mem (set α) (filter α) (#799)

2019-03-07 23:35:39+01:00 7e77967
refactor(localization): shorten proofs (#796)
* feat(algebra/group): units.coe_map
* refactor(localization): shorten proofs
*  swap order of equality in ring_equiv.symm_to_equiv

2019-03-07 10:17:21-05:00 26bd400
feat(data/list): lemmas about count and bag_inter (#797)

2019-03-06 20:07:22-05:00 181647b
feat(tactic/basic): utility functions for names (#791)

2019-03-06 23:01:10 48eaf05
feat(algebra/group): units.coe_map

2019-03-06 22:11:42 e286452
feat(data/nat/basic): some lemmas (#792)
* feat(data/nat/basic): some lemmas
* fixing namespace, moving lemma

2019-03-06 10:16:34-05:00 61e02dd
feat(data/finset): missing fold_map lemma (#794)

2019-03-06 14:21:24 cc753d7
feat(ring_theory/localization): adds induced ring hom between fraction rings (#781)
* feat(ring_theory/localization): adds induced ring hom between fraction rings
* Break some extremely long lines
* Put map in the fraction_ring namespace
* Move global variable into statements
* Rename rec to lift', make interface for lift, generalise map
* Improve simp-lemmas, add docstrings
* Rename circ to comp in lemma names

2019-03-05 21:55:19+01:00 1ec0a1f
fix(tactic/linarith): correctly parse 0*0

2019-03-05 14:15:40-05:00 581cf19
feat(topology): split uniform_space and topological_structure

2019-03-05 09:50:45+01:00 708c0cf
feat(data/multiset): add monad instance (#744)

2019-03-05 09:44:51+01:00 3525d21
refactor(topology/metric_space/lipschitz): Simplify proof in banach contraction (#788)

2019-03-05 09:21:46+01:00 b9f88d1
feat(data/finset): add card_sdiff

2019-03-05 09:21:46+01:00 682f4b5
feat(linear_algebra): module (vector space) structure for finsupp, matrix, and mv polynomials

2019-03-05 09:21:46+01:00 738778a
feat(data/matrix): basic definitions: transpose; row & column matrix; vector/matrix multiplication

2019-03-05 09:21:46+01:00 528ff93
refactor(linear_algebra): move multivariate_polynomial to data

2019-03-05 09:21:46+01:00 891a192
refactor(ring_theory): move matrix to data and determinant to linear_algebra

2019-03-05 09:21:46+01:00 10a586b
feat(linear_algebra): add module (vector_space) structure for function spaces

2019-03-05 09:21:46+01:00 332121d
feat(data/fintype): card_univ and card_univ_diff

2019-03-05 09:21:45+01:00 c0b1eb1
refactor(data/finset): correct name sdiff_disjoint -> disjoint_sdiff; add sdiff_disjoint

2019-03-05 09:21:45+01:00 b3c749b
remove superflous parameter from bot_eq_zero

2019-03-05 09:21:45+01:00 73f1a08
feat(data/finset): add filter_empty, filter_subset_filter, prod_filter

2019-03-05 09:21:45+01:00 b9ead4d
feat(data/finset): add disjoint_bind_left/right

2019-03-05 09:21:45+01:00 f82f5f2
refactor(algebra): canonically_ordered_monoid extends order_bot

2019-03-05 09:21:45+01:00 f07a558
feat(data/equiv): add subtype_pi_equiv_pi

2019-03-05 09:21:45+01:00 8070c05
feat(data/set/lattice): more rules for disjoint sets

2019-03-05 09:21:45+01:00 c53ac41
feat(data/set): relate range and image to Union

2019-03-05 09:21:45+01:00 41038ba
feat(data/set): add exists_maximal_wrt

2019-03-05 09:21:45+01:00 146d73c
feat(data/set): add finite_image_iff_on

2019-03-05 09:21:45+01:00 84a5f4d
feat(data/set): add subset_image_iff and subset_range_iff

2019-03-05 09:21:45+01:00 cbe2f61
feat(logic/function): add inv_fun_neg

2019-03-05 09:21:45+01:00 73db4c7
feat(logic/function): add injective.ne

2019-03-05 09:21:45+01:00 c819617
feat(logic): add plift.down_inj

2019-03-05 09:21:45+01:00 985445f
feat(linear_algebra/multivariate_polynomial): relate total_degree to degrees, add, zero, mul

2019-03-05 09:21:45+01:00 78fd58d
feat(linear_algebra/multivariate_polynomial): add degrees

2019-03-05 09:21:45+01:00 c2d8bc2
feat(data/finsupp): relatie to_multiset to 0, +, single, card, map, prod, and to_finset

2019-03-05 09:21:45+01:00 857842d
feat(data/finsupp): add support_mul

2019-03-05 09:21:45+01:00 a77797f
feat(data/multiset): add prod_smul

2019-03-05 09:21:45+01:00 e924745
feat(data/finset): add multiset.count_sup

2019-03-05 09:21:45+01:00 e07cac5
feat(data/finset): add to_finset_smul

2019-03-05 09:21:45+01:00 f24b01b
feat(algebra/group_power): smul and pow are monoid homs

2019-03-05 09:21:45+01:00 32642e1
feat(linear_algebra): add dim_sup_add_dim_inf_eq

2019-03-04 16:26:09+01:00 f46f0a6
feat(tactic/fin_cases): case bashing on finset, list, and fintype hypotheses. (#775)

2019-03-04 12:37:27+01:00 6cd0341
docs(extras/tactic_writing): add ``%%(reflect n)`` to the tactic writing guide (#786)

2019-03-03 19:05:12+01:00 201413b
chore(topology): Splits topology.basic and topology.continuity (#785)
Also, the most basic aspects of continuity are now in topology.basic

2019-03-03 11:01:43-05:00 1084868
feat(analysis/{specific_limits,infinite_sum}): Cauchy of geometric bound (#753)

2019-03-03 13:19:35 1f90e18
feat(ring_theory/ideal_operations): Chinese Remainder Theorem (#774)

2019-03-02 17:42:14-05:00 fb8001d
hopefully fixed for good this time

2019-03-02 17:42:14-05:00 182b2a3
fix properly

2019-03-02 17:42:14-05:00 a4cc8b7
fix build

2019-03-02 17:42:14-05:00 a75d57c
fix build

2019-03-02 17:42:14-05:00 8dcd071
generalize norm to zsqrtd

2019-03-02 17:42:14-05:00 d98cae7
fix build

2019-03-02 17:42:14-05:00 5cbd7fa
changing names

2019-03-02 17:42:14-05:00 a9dfaba
The year is 2019

2019-03-02 17:42:14-05:00 c36470f
put sum_two_squares in nat.prime namespace

2019-03-02 17:42:14-05:00 d8f0921
move lemmas to correct places

2019-03-02 17:42:14-05:00 4e48324
fix build

2019-03-02 17:42:14-05:00 9c9aee4
finish proof of sum two squares

2019-03-02 17:42:14-05:00 bd86c0d
commit properly

2019-03-02 17:42:14-05:00 49a85f4
prove Z[i] is a euclidean_domain

2019-03-02 19:55:17 1f4f2e4
refactor(*): move matrix.lean to data/ and determinant.lean to linear_algebra/ (#779)

2019-03-01 22:25:45-05:00 8fbf296
feat(topology/metric_space/hausdorff_distance): Hausdorff distance

2019-03-01 21:24:00-05:00 be88cec
feat(analysis/exponential): added inequality lemmas

2019-03-01 21:15:38 0bb0cec
feat(group_theory): free_group and free_abelian_group are lawful monads (#737)

2019-03-01 21:14:41 116cfff
feat(data/zmod/basic): cast_mod_nat' and cast_mod_int' (#783)
* cast_mod_int'
* cast_val_int'

2019-03-01 10:20:26-05:00 04b5f88
refactor(analysis/asymptotics): minor formatting changes

2019-03-01 10:20:26-05:00 6363212
feat(analysis/normed_space/deriv): generalize to spaces over any normed field

2019-03-01 10:20:26-05:00 89b8915
feat(analysis/normed_space/deriv): add readable proof of chain rule

2019-03-01 10:20:26-05:00 5dd1ba5
feat(analysis/*): is_bigo -> is_O, is_littleo -> is_o

2019-03-01 10:20:26-05:00 49ecc7b
fix(*): fix things from change tendsto_congr -> tendsto.congr'

2019-03-01 10:20:26-05:00 d74804b
add has_fderiv_at_filter

2019-03-01 10:20:26-05:00 21b1fcc
fix(asymptotics, deriv): minor formatting fixes

2019-03-01 10:20:26-05:00 16033bb
feat(analysis/asymptotics,analysis/normed_space/deriv): improvements and additions

2019-03-01 10:20:26-05:00 6265d26
feat(analysis/normed_space/deriv): start on derivative

2019-03-01 10:20:26-05:00 92a5e0b
feat(analysis/asymptotics): start on bigo and littlo

2019-03-01 10:20:26-05:00 206a7a1
feat(*): add various small lemmas

2019-03-01 13:10:17 4f7853a
feat(data/list/basic): mem_rotate

2019-02-28 20:55:23 05449a0
refactor(ring_theory/localization): rename of to mk, and define of (#765)
* refactor(ring_theory/localization): rename of to mk, and define of
* Make submonoid implicit variable of 'of'

2019-02-28 19:14:55 eb033cf
feat(ring_theory/ideals): make ideal.quotient.field a discrete_field (#777)

2019-02-28 17:20:01 e6a3ca8
refactor(algebra/group): generalise and extend the API for with_zero (#762)
* refactor(algebra/group): generalise and extend the API for with_zero
* Shorter proof. Thanks Chris
* Travis, try your best

2019-02-28 16:55:44 781d187
feat(group_theory/quotient_group): define ker_lift and prove simp-lemmas (#764)
* feat(group_theory/quotient_group): define ker_lift and prove simp-lemmas
* Add docstring

2019-02-28 11:09:35+01:00 81f8530
fix(tactic/linarith): typo

2019-02-28 10:33:40+01:00 08d4d17
feat(topology/basic): Add instances for subset/inter/union for opens(X) (#763)
* feat(topology/basic): Add instances for subset/inter/union for opens(X)

2019-02-27 23:53:37+01:00 477338d
refactor(data/subtype): organise in namespaces, use variables, add two simp-lemmas (#760)

2019-02-27 22:46:52 af2cf74
feat(group_theory/quotient_group): map is a group hom (#761)

2019-02-27 22:37:11 dfa855c
feat(data/finset) remove unnecessary assumption from card_eq_succ (#772)

2019-02-27 23:14:03+01:00 cfde449
fix(doc/tactics): linarith doc is outdated [ci-skip]

2019-02-27 21:33:02+01:00 6c71ac0
fix(tactic/linarith): fix bug in strengthening of strict nat/int inequalities

2019-02-27 15:25:19 4667d2c
feat(ring_theory/ideal_operations): ideals form a commutative semiring (#771)

2019-02-27 14:06:24 05d1d33
fix(algebra/archimedean): swap names of floor_add_fract and fract_add_floor (#770)

2019-02-27 12:02:24+01:00 42d1ed7
feat(linarith): improve handling of strict inequalities in nat and int (#769)
* feat(linarith): perform slightly better on ℕ and ℤ by strengthening t < 0 hyps to t + 1 ≤ 0
* remove already completed TODO item

2019-02-26 22:04:45+01:00 3f47739
fix(docs/howto-contribute): main repository has moved

2019-02-26 12:57:23-05:00 7450cc5
fix(scripts/update_mathlib): improve python style and error handling (#759)

2019-02-25 16:20:56-05:00 71a7e1c
fix(scripts/update-mathlib): cached archived were never expanded

2019-02-25 16:01:35-05:00 4222483
fix(scripts/update-mathlib): fix the commit check

2019-02-24 23:52:02-05:00 e23553a
doc(nat/decidable_prime): add docstrings explaining the two decidable_prime instances (#757)

2019-02-24 15:36:34 f922086
feat(ring_theory/polynomial): more operations on polynomials (#679)

2019-02-24 11:59:27 c9b2d0e
chore(linear_algebra/multivariate_polynomial): remove unnecessary decidable_eq assumption (#755)

2019-02-23 11:37:37 ddc016c
feat(*): polar co-ordinates, de moivre, trig identities, quotient group for angles (#745)
* feat(algebra/group_power): re-PRing polar co-ords
* Update group_power.lean
* feat(analysis/exponential): re-PRing polar stuff
* feat(data.complex.exponential): re-PR polar stuff
* fix(analysis.exponential): stylistic
* fix(data.complex.exponential): stylistic
* fix(analysis/exponential.lean): angle_eq_iff_two_pi_dvd_sub
* fix(analysis/exponential): angle_eq_iff_two_pi_dvd_sub

2019-02-23 00:41:40 63fa61d
fix(analysis/specific_limits): remove useless assumption (#751)

2019-02-21 21:35:05 e739cf5
feat(order_dual): instances for order_dual and shortening proofs (#746)
* feat(order_bot): instances for order_bot and shortening proofs
* fix(topological_structure); remove unused import

2019-02-21 16:24:47 3c3a052
feat(field_theory/subfield): closure of subset in field (#742)

2019-02-20 18:08:04-05:00 9656485
feat(data/finmap): lift_on₂ (#716)
* feat(data/finmap): define lift_on₂ with lift_on

2019-02-20 17:32:07 8b8ae32
fix(order/basic): give order_dual the correct lt (#741)

2019-02-20 12:33:02 c7202e5
feat(analysis/exponential): pow_nat_rpow_nat_inv (#740)

2019-02-18 18:07:10 78ce6e4
feat(data/fintype): fintype.of_injective

2019-02-18 09:48:21-05:00 9a2c13a
feat(data/alist,data/finmap): always insert key-value pair (#722)
* Change {alist,finmap}.insert to always insert the key-value pair
  instead of doing nothing if the inserted key is found. This allows for
  useful theorems such as lookup_insert.
* Add list.keys and used key membership instead of exists/forall. This
  makes proofs easier in some places.
* Add a few other useful theorems such as lookup_eq_none,
  lookup_erase, lookup_erase_ne.

2019-02-18 09:45:57 6b4435b
feat(data/polynomial): create nonzero_comm_semiring and generalize nonzero_comm_ring lemmas (#736)

2019-02-16 21:24:09 c64b67e
feat(ring_theory/localization): revamp, ideal embedding (#481)

2019-02-15 17:29:36-05:00 17f9bef
feat(category/monad/cont): continuation passing monad (#728)

2019-02-15 19:37:56 0a6e705
refactor(data/equiv/algebra): move polynomial lemmas from equiv/algebra to mv_polynomial (#731)
* refactor(data/equiv/algebra): move polynomial lemma from equiv/algebra to mv_polynomial
* remove update-mathlib.py

2019-02-15 14:26:25+01:00 d80b03e
chore(order/filter/basic): update documentation of filter_upwards

2019-02-15 07:40:09 8730619
chore(topology/algebra/topological_structures): remove unused import (#729)

2019-02-14 18:26:14+01:00 ce580d7
refactor(data/equiv): rename subtype_equiv_of_subtype to subtype_congr and subtype_congr to subtype_congr_prop

2019-02-14 18:04:51+01:00 683519f
feat(data/equiv/basic): generalise subtype_equiv_of_subtype (#724)

2019-02-14 18:04:24+01:00 d4568a4
fix(data/subtype): don't use pattern matching in subtype.map (#725)

2019-02-13 19:51:35-05:00 5da8605
chore(deploy): clean up deploy_nightly.sh (#720)

2019-02-13 23:30:38+01:00 a6150a3
refactor(data/real): move cau_seq_filter to analysis/metric_space (#723)

2019-02-13 17:01:08+01:00 3fd0e60
refactor(topology/algebra/infinite_sum): Cauchy condition for infinite sums generalized to complete topological groups

2019-02-12 22:44:40+01:00 246c280
feat(tactic/basic,tactic/interactive): improvements to set tactic (#712)
* feat(tactic/basic,tactic/interactive): improvements to set tactic
* feat(tactic/interactive): take optional explicit type in set tactic

2019-02-12 15:50:35-05:00 f6ca16e
fix(nightly): improve conditional (#719)

2019-02-12 20:15:49+01:00 a4afa90
refactor(analysis/specific_limits): generalize has_sum_of_absolute_convergence to normed_groups

2019-02-12 09:33:43-05:00 503a423
feat(update-mathlib): improve setup and error messages

2019-02-12 15:28:42+01:00 b6a4763
refactor(order/filter): replace tendsto_comp_succ_at_top_iff by tendsto_add_at_top_iff_nat

2019-02-12 08:46:53-05:00 c4e8414
fix(update-mathlib): install from anywhere in your directory structure

2019-02-12 14:09:42+01:00 f5a85f1
refactor(order/filter): move lift and lift' to separate file

2019-02-12 11:17:26+01:00 253fe33
refactor(order/filter): generalize map_succ_at_top_eq to arbitrary Galois insertions; generalize tendsto_coe_iff to arbitary order-preserving embeddings

2019-02-12 11:17:26+01:00 c853c33
chore(analysis/specific_limits): replace mul_add_one_le_pow by pow_ge_one_add_mul

2019-02-12 09:12:26 41e3b6f
refactor(data/list): add prop arg for easier usage (#715)

2019-02-11 20:48:17-05:00 d1ef181
feat(topology/metric_space/gluing): Gluing metric spaces (#695)

2019-02-11 15:43:36-05:00 8243300
build(nightly): fix nightly

2019-02-11 16:50:18 fb7e42d
fix(group_theory/quotient_group): remove duplicate group_hom instance (#713)

2019-02-11 10:13:54+01:00 4b84aac
fix(data/finsupp): duplicated instance

2019-02-10 21:50:00 091cad7
feat(algebra/gcd_domain): normalize (#668)

2019-02-10 12:36:00-05:00 cfe582f
Automate the deployment of nightly builds (#707)
* build(nightly): automate nightly releases of mathlib

2019-02-10 16:44:30 9b28db0
refactor(*): refactor associates (#710)

2019-02-10 14:25:05 c25122b
feat(algebra/archimedean): add fractional parts of floor_rings (#709)

2019-02-10 14:01:02+01:00 d6f84da
feat(tactic/tidy): add `tidy?` syntax for reporting a tactic script (#704)

2019-02-10 10:39:51 ed4c536
feat(data/polynomial): multiplicity of roots of polynomials (#656)
* feat(data/polynomial): multiplicity of roots of polynomials
* rename lemmas
* use section
* use `nonzero_comm_ring.of_ne`
* refactor(polynomial): weaken decidablility hypothesis
* indentation
* swap order of arguments

2019-02-09 15:41:40 088f753
refactor(geo_sum): remove duplicate proofs about geometric sums (#706)
* feat(data/finset): add range_add_one
* feat(algebra/big_operators): geometric sum for semiring, ring and division ring
* refactor(geo_sum): remove duplicate proofs about geometric sums

2019-02-09 15:38:37 484d864
add geometric sum (#701)
* feat(data/finset): add range_add_one
* feat(algebra/big_operators): geometric sum for semiring, ring and division ring

2019-02-08 20:56:33-05:00 22c7179
build(update-mathlib): adjust the header of python script

2019-02-08 18:41:17-05:00 8b51017
build(update-mathlib): fix installation and documentation

2019-02-08 17:13:15-05:00 650237b
build(update-mathlib): install update-mathlib into `~/.mathlib/bin`

2019-02-08 17:01:46-05:00 814cb03
build(update-mathlib): fix installation and documentation

2019-02-08 16:55:19-05:00 64065f4
build(update-mathlib): improve installation and documentation

2019-02-08 16:11:45-05:00 4227f5c
Deploy olean (#697)
* deploy(olean): deploy the olean files for every successful builds

2019-02-08 19:05:45 11e19d8
refactor(ring_theory/noetherian): make is_noetherian and is_noetherian_ring classes (#689)
* refactor(ring_theory/noetherian): make is_noetherian and is_noetherian_ring classes
* correct spelling mistake.
* add well_founded_submodule_gt

2019-02-08 13:11:06-05:00 1f50e0d
fix(build): fix the output keeping travis builds alive (#702)

2019-02-08 09:43:02-05:00 0f2562e
fix(build): fix the output keeping travis builds alive (#700)

2019-02-08 09:28:04-05:00 cfd2b75
feat(order/filter): break filter into smaller files

2019-02-08 09:28:04-05:00 8db042f
feat(data/rel): galois_connection (image r) (core r)

2019-02-08 09:28:04-05:00 b2ba37c
chore(*): fix errors introduced by rebasing

2019-02-08 09:28:04-05:00 8e4aafa
feat(analysis/metric): convergence wrt nhds_within

2019-02-08 09:28:04-05:00 f5d73bd
feat(analysis/topology/continuity): add some variations

2019-02-08 09:28:04-05:00 e0b8253
feat (analysis/topology/topological_space): properties of nhds, nhds_within

2019-02-08 09:28:04-05:00 a96fa3b
feat(order/filter): convergence for relations and partial functions

2019-02-08 09:28:04-05:00 4444464
feat(data/pfun): add restrict, preimage, core, etc.

2019-02-08 09:28:04-05:00 cae5c8b
fix(data/rel): make composition local notation

2019-02-08 09:28:04-05:00 4779af7
feat(data/rel): a type for binary relations

2019-02-08 09:28:04-05:00 126d573
feat(data/set/basic,logic/function): small additions and renamings

2019-02-07 22:32:47 1ed7ad1
feat(algebra/archimedean): abs_sub_lt_one_of_floor_eq_floor (#693)
* abs_diff_lt_one_of_floor_eq_floor
* better name

2019-02-07 19:37:17+01:00 177b5eb
feat(linear_algebra): dimension of the base field is 1

2019-02-07 19:36:51+01:00 0f24030
refactor(src/data/finset): supr/infi as a directed supr/infi of finite inf/sup

2019-02-07 15:56:26+01:00 eeed321
chore(linear_algebra/basic): relate map/comap/ker/range/comp with 0 and smul; use map/comap Galois connection

2019-02-07 14:58:25+01:00 e98999e
chore(algebra/pi_instances): generalize pi.list/multiset/finset_prod/sum_apply to dependent types

2019-02-07 14:58:25+01:00 ad7ef86
refactor(set_theory/cardinal): split up mk_Union_le_mk_sigma, add mk_Union_eq_mk_sigma; add equiv congruence for subtype

2019-02-07 13:13:39+01:00 8a1de24
feat(data/{list/alist,finmap}): implicit key type (#662)
* feat(data/{list/alist,finmap}): implicit key type
Make the key type α implicit in both alist and finmap. This brings these
types into line with the underlying sigma and simplifies usage since α
is inferred from the value function type β : α → Type v.
* doc(data/list/alist): alist is stored as a linked list

2019-02-07 13:02:53+01:00 46d1009
feat(analysis/metric_space): Isometries (#657)

2019-02-07 10:22:13 8911b8c
feat(algebra/order_functions): max_lt_max and min_lt_min (#692)

2019-02-06 20:15:47 51f80a3
feat(data/quot): quotient.ind' (#691)
* feat(data/quot): quotient.ind'
* correct elaborator tag; theorems not definitions

2019-02-06 10:58:04+01:00 9615b38
feat(data/real): completeness criterion for Cauchy sequences (closes #654)

2019-02-06 10:36:56+01:00 3ac7967
feat(analysis/metric_space): add premetric spaces (closes #652)

2019-02-06 10:29:32+01:00 e93fa30
feat(category/fold): `foldl` and `foldr` for `traversable` structures (#376)

2019-02-06 09:59:29+01:00 c82243a
feat(analysis/normed_space): bounded linear maps with the operator norm form a normed space (closes #680)

2019-02-05 19:47:08 d5a1b46
to_nat_le_to_nat (#685)

2019-02-05 14:26:19-05:00 9f79d2e
fix(tactic/h_generalize): fix name resolution in h_generalize (#688)

2019-02-05 14:13:55-05:00 a0d8ae1
feat(tactic/replaceable): supplement `def_replacer` with attribute `replaceable`

2019-02-04 19:35:17-05:00 178c09d
feat(natural_isomorphism): componentwise isos are isos (#671)

2019-02-04 20:49:37 9a8f1b0
feat(algebra/group_power): gpow_add_one (#683)
* feat(algebra/group_power): gpow_add_one
* feat(data/nat//basic): int.coe_nat_abs

2019-02-04 19:00:17 5395232
remove simp on set_coe_eq_subtype (#682)

2019-02-04 10:43:58+01:00 5e5f1e2
fix(data/*/Ico): succ_top is too aggressive as a simp lemma (#678)

2019-02-03 22:31:10 2539251
feat(data/nat/cast): abs_cast

2019-02-03 17:00:41-05:00 d01e523
feat(category_theory/kleisli): monoids, const applicative functor and kleisli categories (#660)
* feat(category_theory/kleisli): monoids, const applicative functor and
kleisli categories

2019-02-03 17:01:45+01:00 f5bd340
cleanup(*): removing uses of bare `have` (#676)

2019-02-03 02:14:48-05:00 544f35c
Update README.md

2019-02-03 02:06:28 b3e1e6f
fix(README): update URL for build status icon (#681)

2019-02-03 01:08:36 044b6fa
feat(algebra/euclidean_domain): discrete field to euclidean domain (#674)

2019-02-02 19:04:50-05:00 3109c4b
chore(purge_olean.sh): a few small improvements (#661)
* purge empty directories
* Only print if an .olean is rm'd. This reduces the noise and reduces the
script run time.
* use git top-level dir to make the script relocatable
* only affect src and test dirs
* use bash instead of sed

2019-02-02 18:43:29-05:00 8590ff2
fix(functor_category): remove superfluous coercions (#670)

2019-02-02 18:42:36-05:00 a09dc9f
cleanup(category_theory/cones): tidying up, after making opposites work better (#675)

2019-02-02 18:41:09-05:00 b084cfc
fix(category_theory/equivalence): duplicated namespace prefix (#669)

2019-02-02 17:59:12-05:00 e501d02
fix(replacer): better flow control in replacer when tactic fails (#673)
The main consequence is better error reporting.

2019-02-02 18:42:12 0393ccb
feat(ring_theory/algebra): subalgebra_of_subring (#664)

2019-02-01 23:00:55-05:00 f529870
feat(data/nat/gcd/coprime): some easy simp lemmas (#677)

2019-02-02 01:41:01 6925e4d
feat(algebra/euclidean_domain): lcm (#665)

2019-02-01 20:07:31-05:00 fb60145
cleanup: replace `begin intros ...` with lambdas (#672)

2019-02-01 22:48:10 ed0d24a
feat(algebra/euclidean_domain): add quotient_zero axiom to euclidean_domain (#666)

2019-02-01 12:26:22+01:00 d8f6dc4
feat(src/tactic/explode): improve printing of references

2019-02-01 12:26:22+01:00 a32de36
feat(src/tactic/explode): add printing for conclusions of sintros

2019-02-01 12:26:22+01:00 a08c9a7
add printing for conclusions of sintros

2019-02-01 12:13:59+01:00 c9e4f8e
fix(tactic/inarith): fix denominator normalization of products

2019-02-01 12:13:31+01:00 52adfd7
feat(tactic,tactic/interactive): add set tactic, a variant of let

2019-02-01 09:53:51+01:00 89bc63c
feat(ring_theory/noetherian): is_noetherian_ring_range

2019-02-01 00:30:09 8e381f6
feat(ring_theory/algebra_operations): multiplication of submodules of an algebra (#658)

2019-01-30 18:20:41-05:00 50a03f7
chore(test): fix test directory structure

2019-01-30 18:20:41-05:00 12be0aa
refactor(category_theory/instances): rename `examples` to `instances`

2019-01-30 17:15:23-05:00 829b49b
chore(.travis.yml): use git clean to clean out untracked files (#659)
* chore(.travis.yml): use git clean to clean out untracked files and delete more obsolete olean files
PR #641 involved renaming a directory. The old directory was still
present in the cache, and in this situation `git status` lists the
directory as a whole as untracked, so the grep did not find any
`.lean` files.

2019-01-30 17:07:18+01:00 0eb9db6
chore(linear_algebra/multivariate_polynomial): move rename to the right place

2019-01-30 16:37:18+01:00 a480160
feat(data/polynomial): generalize theorems from nonzero_comm_ring to comm_ring (#653)

2019-01-30 16:32:15+01:00 065f083
feat(group_theory): monoid / group closure of union

2019-01-30 16:16:31+01:00 f7b9d6b
refactor(data/equiv/algebra): mv_polynomial mv_polynomial (β ⊕ γ) α ≃r mv_polynomial β (mv_polynomial γ α)

2019-01-30 10:26:08+01:00 aa944bf
feat(analysis/exponential): real powers, `cpow_nat_inv_pow` (#647)

2019-01-30 09:57:02+01:00 626489a
feat(topology/metric_space): diameter of a set in metric spaces (#651)

2019-01-30 09:55:58+01:00 ef35c6c
second countability criteria in metric spaces

2019-01-30 09:54:34+01:00 30649f5
cleanup instances/ennreal

2019-01-30 09:49:08+01:00 afa535e
feat(ring_theory/polynomial): hilbert basis theorem

2019-01-29 19:13:38+01:00 860eba6
chore(.): change occurrences of tests directory to test

2019-01-29 19:07:10+01:00 247dcb2
feat(linear_algebra): rules for kernel of `of_le`, `cod_restrict`, and `pair`

2019-01-29 18:32:34+01:00 4fb6c7d
chore(test): rename the test directory so that `leanpkg` will find it

2019-01-29 17:18:52+01:00 fc529b6
feat(data/complex/basic): of_real_fpow (#640)

2019-01-29 17:15:53+01:00 d7d90fa
docs(tactic/monotonicity/interactive): fix `mono` documentation [ci-skip]

2019-01-29 17:15:30+01:00 0924ac0
fix build

2019-01-29 17:15:30+01:00 a0e2de9
refactor(*): use decidable_linear_order.lift

2019-01-29 17:15:15+01:00 7cfcce3
feat(data/equiv/algebra): ring equiv for mv_polynomial

2019-01-29 13:20:33+01:00 54f4b29
feat(tactic/interactive.lean): clear_aux_decl

2019-01-29 13:20:13+01:00 8faf8df
feat(field_theory/splitting_field): splits predicate on polynomials

2019-01-29 13:17:09+01:00 8ee4f2d
move continuous_of_lipschitz around

2019-01-29 11:39:45+01:00 83edba4
feat(measure_theory): integral is equal and monotone almost-everywhere and for measurable functions it is a.e. strict at 0

2019-01-29 09:37:59+01:00 cd41aca
Move tendsto_div to a better place

2019-01-28 20:15:38+01:00 042c290
refactor(category_theory/opposites): Make `opposite` irreducible

2019-01-28 20:11:16+01:00 d1b7d91
feat(category_theory/limits/cones): forgetful functors

2019-01-28 19:59:32+01:00 b39d6d8
feat(*) refactor module

2019-01-28 19:52:47+01:00 fd3e5a1
fix(topology/instances/ennreal): fix merge

2019-01-28 19:34:07+01:00 e62c534
add ennreal.to_real

2019-01-28 17:14:45+01:00 8572c6b
feat(topology): prove continuity of nndist and edist; `ball a r` is a metric space

2019-01-28 10:14:51+01:00 afa31be
refactor(linear_algebra/direct_sum_module): move to algebra/direct_sum

2019-01-28 08:02:17+01:00 7199bb3
chore(linear_algebra/dimension): simplify dim_add_le_dim_add_dim

2019-01-27 22:50:42+01:00 038e0b2
feat(ring_theory/algebra): remove out_param

2019-01-27 22:50:42+01:00 af7a7ee
feat(ring_theory/algebra): remove of_core

2019-01-27 22:50:42+01:00 79ba61c
feat(ring_theory/algebra): make algebra a class

2019-01-27 22:50:42+01:00 a0b6cae
feat(ring_theory/algebra): define algebra over a commutative ring

2019-01-27 22:44:50+01:00 1d2eda7
feat(category_theory/isomorphism): as_iso
Also clean up some proofs.

2019-01-27 22:43:45+01:00 ccd895f
feat(category_theory/types): conversions between iso and equiv

2019-01-27 22:42:53+01:00 d074b51
refactor(category_theory/concrete_category): move `bundled` to own file

2019-01-27 22:40:37+01:00 50398e5
feat(category_theory/full_subcategory): induced categories

2019-01-27 22:37:46+01:00 19c2f68
feat(analysis/exponential): complex powers

2019-01-27 22:33:10+01:00 c057758
feat(data/complex/exponential): exp_eq_one_iff

2019-01-27 22:32:41+01:00 db69173
refactor(algebra/field_power): notation for fpow

2019-01-27 22:31:44+01:00 d359aa8
feat(order/conditionally_complete_lattice): cinfi_const (#634)

2019-01-27 22:30:58+01:00 06eba7f
update authors on expr.lean (I don't know who's responsible for what)

2019-01-27 22:30:58+01:00 be5dba9
fix(tactic/norm_num): only check core norm_num output up to numeral structure

2019-01-27 22:30:58+01:00 daa7684
refactor(tactic/basic): move non-tactic decls to meta folder

2019-01-27 22:28:46+01:00 6781ff0
feat(tactic/linarith): prefer type of goal if there are multiple types

2019-01-27 22:28:46+01:00 8affebd
fix(tactic/linarith): remove unused code

2019-01-27 22:28:46+01:00 92508dc
fix(tactic/linarith): properly handle problems with inequalities in multiple types
When problems have inequalities over multiple types, it's almost safe to process everything at once, since none of the
variables overlap. But linarith deals with constants by homogenizing them and the "constant" variables do overlap.
This fix creates one call to linarith for each type that appears in a hypothesis.

2019-01-27 00:35:53-05:00 84d1c45
feat(tactic/match-stub): use Lean holes to create a pattern matching skeleton (#630)
* feat(tactic/match-stub): use Lean holes to create a pattern matching skeleton
* feat(tactic/match-stub): add hole for listing relevant constructors

2019-01-25 17:50:12+01:00 315a642
feat(measure_theory): add Hahn decomposition

2019-01-24 16:02:42+01:00 ed2ab1a
feat(measure_theory): measures form a complete lattice

2019-01-24 09:18:32+01:00 4aacae3
feat(data/equiv/algebra): instances for transporting algebra across an equiv (#618)

2019-01-24 09:17:37+01:00 c49e89d
feat(category_theory/adjunction): definitions, basic proofs, and examples (#619)

2019-01-23 16:35:39+01:00 0e6c358
feat(set_theory/cardinal): more lemmas on cardinality (#595)

2019-01-23 14:24:28+01:00 9be8905
refactor(topology/sequences): restructure proofs

2019-01-23 14:24:12+01:00 4018daf
feat(topology): sequences, sequential spaces, and sequential continuity (closes #440)
Co-Authored-By: Reid Barton <rwbarton@gmail.com>

2019-01-23 13:24:31+01:00 c06fb67
refactor(category_theory/category): split off has_hom
This gives a little more flexibility when defining a category,
which will be used for opposite categories. It should also be
useful for defining the free category on a graph.

2019-01-23 12:52:40+01:00 2c95d2a
maintain(vscode): add ruler at 100 in editor

2019-01-23 12:52:40+01:00 b2700dd
maintain(.vscode): add default settings

2019-01-23 12:45:23+01:00 6da9b21
le_induction

2019-01-23 12:38:43+01:00 60efaec
chore(topology): move contraction_mapping to metric_space/lipschitz

2019-01-23 11:48:36+01:00 5317b59
refactor(contraction_mapping): add more proves about Lipschitz continuous functions; cleanup proofs

2019-01-23 11:48:20+01:00 96198b9
feat(contraction_mapping): proof the Banach fixed-point theorem (closes #553)

2019-01-23 11:43:23+01:00 8a0fd0b
feat(order): add order instances for prod

2019-01-23 08:09:04+01:00 2ae2cf0
feat(linear_algebra/multivariate_polynomial): C_mul'

2019-01-22 17:23:23-05:00 8d44fee
style(category_theory): adjust precedence of ⥤ (#616)

2019-01-22 17:21:55-05:00 c9a0b33
refactor(category_theory/fully_faithful): move preimage_id (#615)

2019-01-22 16:49:24+01:00 edfa206
feat(linear_algebra/dimension): more dimension theorems; rank of a linear map

2019-01-22 16:02:10+01:00 6e4c9ba
feat(linear_algebra/linear_combination): lc lifts vector spaces

2019-01-22 16:00:18+01:00 d5a302f
chore(linear_algebra): rename file lc to linear_combination

2019-01-22 15:32:49+01:00 7baf093
feat(data/list,data/multiset,data/finset): add Ico intervals (closes #496)

2019-01-21 20:02:01-05:00 3dc9935
fix(tactic/instance_stub): extend the applicability of instance_stub (#612)

2019-01-21 11:12:50+01:00 bc163a6
fix(.travis.yml): produce mathlib.txt only from src/

2019-01-20 22:50:48-05:00 c1e594b
feat(meta, logic, tactic): lean 3.4.2: migrate coinductive_predicates, transfer, relator (#610)

2019-01-20 20:42:15-05:00 2c5bc21
feat(topology/emetric_space): basic facts for emetric spaces (#608)

2019-01-19 18:43:24-05:00 fa2e399
feat(topology/bounded_continuous_function): constructor in normed groups (#607)

2019-01-18 19:50:09-05:00 3fcba7d
feat(logic/basic): add class 'unique' for uniquely inhabited types (#605)

2019-01-18 16:30:23-05:00 41b3fdd
feat(topology/real): bounded iff bounded below above (#606)

2019-01-18 15:36:40+01:00 eb1253f
feat(measure_theory): add Giry monad

2019-01-18 14:10:04+01:00 739d28a
refactor(ring_theory/multiplicity): replace padic_val with multiplicity (#495)

2019-01-18 13:28:37+01:00 6144710
feat(measure_theory): add equivalence of measurable spaces

2019-01-18 13:26:32+01:00 b352d2c
refactor(topology): topological_space.induced resembles set.image; second_countable_topology on subtypes; simplify filter.map_comap

2019-01-18 13:20:03+01:00 6b6b04a
feat(order/complete_lattice): add rules for supr/infi under image and under propositions

2019-01-18 11:13:09+01:00 f0f06ca
refactor(*): analysis reorganization (#598)
* split `measure_theory` and `topology` out of analysis
* add `instances` sub directories for theories around type class instances

2019-01-17 19:21:33-05:00 c1f162c
fix(tactic/linarith): don't reject expressions with division by variables (#604)
norm_hyp_aux should have succeeded (without changing the type of h') in the case where lhs contains 1/x. But mk_single_comp_zero_pf is too clever when given the coeff 1. norm_hyp_aux will still do unnecessary work when it finds e.g. 1/(2*x), but shouldn't fail.

2019-01-17 14:37:38-05:00 ae610a0
feat(ring_theory/adjoin_root): adjoin roots to polynomials (#603)

2019-01-16 08:50:38-05:00 5c37507
doc(elan.md): fix msys2 setup (#594) [ci-skip]
For me, adding the suggested line to .profile did not change my path, even after restarting the terminal.
Moreover, elan is installed in $USERPROFILE/.elan/bin, not in $HOME/.elan/bin.
Adding $USERPROFILE/.elan/bin to the path did not work for me, so I give the full path.

2019-01-16 08:33:19-05:00 5dd9998
doc(docs/tactics): document `convert` (#601) [ci-skip]

2019-01-16 08:14:44-05:00 ab5849e
style(category_theory/opposites): increase binding power of ᵒᵖ (#600)

2019-01-15 17:43:36-05:00 024da40
refactor(logic/schroeder_bernstein): move to set_theory/ (#599)

2019-01-15 12:05:23-05:00 d4f80f6
refactor(*): Try again moving everything to src (#597)

2019-01-15 10:51:04-05:00 78f1949
refactor(*): move everything into `src` (#583)

2019-01-15 11:15:57+01:00 0c71016
feat(logic/basic): nonempty.map

2019-01-14 14:48:02+01:00 667dcf3
feat(group_theory/sylow): first sylow theorem (closes #591)

2019-01-14 14:05:58+01:00 f63fb54
doc(tactic/simpa): rewrite simpa doc

2019-01-14 13:34:42+01:00 49c059a
refactor(analysis): add metric namespace
combines changes from @sgouezel, @PatrickMassot, and @digama0

2019-01-14 13:34:16+01:00 2f9f3df
doc(tactic/simpa): update simpa documentation

2019-01-14 13:34:16+01:00 263e8a0
fix(tactic/simpa): only try given expression in "simpa using"

2019-01-14 12:27:12+01:00 4de9682
fix(PULL_REQUEST_TEMPLATE): use absolute urls
The relative urls do not resolve correctly.

2019-01-14 12:03:28+01:00 c7f13fd
feat(.vscode): add copyright snippet

2019-01-13 19:02:05+01:00 b03c0aa
feat(group_theory/sylow): Cauchy's theorem (#458)
* feat(group_theory): adding add_subgroup and add_submonoid
* feat(data/list/basic): rotate a list

2019-01-12 10:19:18-05:00 dc6c38a
fix(field_theory/subfield): is_subfield should be a Prop (#588)

2019-01-11 19:01:39+01:00 e61a464
feat(ring_theory/euclidean_domain): add more specific Euclidean domain stuff (#527)

2019-01-11 18:59:19+01:00 5c323cd
feat(category_theory): over and under categories  (#549)

2019-01-11 18:17:13+01:00 c19b4be
feat(meta/rb_map): add some monadic filtering

2019-01-11 17:06:02+01:00 7a9b2e4
Update PULL_REQUEST_TEMPLATE.md

2019-01-11 17:04:58+01:00 6516c34
doc(README): elect new maintainers

2019-01-11 15:35:42+01:00 4f3f86d
chore(ring_theory/subring): remove unused import

2019-01-11 11:37:17+01:00 4578796
feat(data/polynomial): various lemmas about degree and monic and coeff

2019-01-10 15:26:30-05:00 b1684fe
fix(principal_ideal_domain): correct spelling mistake (#582)

2019-01-10 12:11:24+01:00 6e97721
refactor(principal_ideal_domain): simplify proof of PID -> UFD

2019-01-10 12:11:24+01:00 f5bf277
refactor(unique_factorization_domain): simplify definition of UFD

2019-01-10 09:46:28+01:00 8b66ebd
functions and cardinality (#556)

2019-01-09 10:08:23+01:00 f488635
chore(tactic/monotonicity/interactive) use derive for has_reflect (#578)

2019-01-09 10:07:56+01:00 af735a5
feat(field_theory/finite): field_of_integral_domain (#579)

2019-01-09 09:48:35+01:00 d0532c1
feat(data/polynomial): lemmas about map (#530)

2019-01-05 16:41:07-05:00 2e63635
feat(group_theory/subgroup): simple groups (#572)

2019-01-05 16:38:38-05:00 d19c9bc
feat(data/fintype): decidable_left_inverse_fintype (#575)

2019-01-05 16:37:57-05:00 395aadd
feat(group_theory/sign): sign_surjective (#576)

2019-01-05 14:19:05-05:00 b9c5eb0
feat(ring_theory/multiplicity): multiplicity of elements of a ring (#523)

2019-01-05 14:17:10-05:00 bc96eca
feat(group_theory/quotient_group): quotient_ker_equiv_range (#574)

2019-01-05 14:13:47-05:00 3ff5e93
feat(data/polynomial): polynomials over a field are a normalization domain (#560)

2019-01-05 14:12:49-05:00 87bf618
feat(data/polynomial): C_neg and C_sub (#561)

2019-01-05 14:12:25-05:00 78d0ebf
feat(data/multiset): prod_hom and exists_mem_of_rel_of_mem (#562)

2019-01-05 14:11:58-05:00 4e509a8
feat(ring_theory/noetherian): irreducible_induction_on (#563)

2019-01-05 14:10:24-05:00 ea0ff05
doc(category_theory): update `category_theory` documentation (#564) [ci-skip]

2019-01-05 14:09:18-05:00 33df7ec
feat(data/nat/enat): has_well_founded for enat (#565)

2019-01-05 14:06:39-05:00 4bacdf2
feat(logic/basic): inhabited_of_nonempty with instance parameter (#566)

2019-01-05 14:05:50-05:00 125feb6
feat(data/multiset): forall_of_pairwise (#569)

2019-01-05 14:05:30-05:00 da6ec21
feat(algebra/group): is_conj_one_right (#570)

2019-01-05 14:05:06-05:00 a32fa18
feat(data/finset): finset.card_eq_one (#571)

2019-01-05 04:49:24-05:00 40fa9ad
fix(analysis/measure_theory): fix build

2019-01-04 20:28:21-05:00 93a330e
fix(data/real/cau_seq_filter): fix build

2019-01-04 19:43:43-05:00 19e7b1f
feat(analysis/topology): Bounded continuous functions (#464)

2019-01-02 10:12:17-05:00 dcd0466
feat(analysis/topology): complete sets, minor modifications (#557)

2019-01-02 08:57:30-05:00 f59f5d5
feat(data/real/ennreal): minor additions to ennreal (#558)

2019-01-02 06:39:37-05:00 50583b9
feat(algebra/order): additional theorems on cmp

2018-12-28 02:49:24-05:00 17d6263
refactor(category_theory): minimize the amount of universe annotations in category_theory (#552)

2018-12-26 19:45:48-05:00 a71628a
feat(algebra/order,...): material on orders (#554)

2018-12-24 20:12:21-05:00 a04c7e2
feat(analysis/topology): miscellaneous topology (#484)
* miscellaneous topology
* C is a proper metric space
* Sum of metric spaces is a def instead of instance
* refactor(analysis): shorten/simplify proofs

2018-12-22 01:10:55-05:00 3eb7424
refactor(data/set/basic): remove unused hypotheses in union_inter_cancel_* (#551)

2018-12-21 04:05:56-05:00 cdab35d
fix(category_theory/punit): fix regression (#550)

2018-12-21 03:12:01-05:00 b11b83b
feat(data/list/basic): rotate a list (#542)

2018-12-21 02:35:06-05:00 d7cea06
feat (ring_theory/noetherian) various lemmas (#548)

2018-12-20 23:14:00-05:00 3762d96
feat(ring_theory/ideals): lift for quotient rings (#529)

2018-12-20 23:12:51-05:00 73933b7
feat(category_theory): assorted small changes from the old limits PR (#512)

2018-12-20 09:31:22-05:00 1854dd9
feat(group_theory/order_of_element): lemmas about card of subgroups and normalizer (#545)

2018-12-20 09:30:12-05:00 95bdce8
feat(data/set/finite): card_range_of_injective (#543)

2018-12-20 09:29:35-05:00 0882f8e
feat(data/fintype): exists_ne_of_card_gt_one (#544)

2018-12-20 09:28:29-05:00 4335380
feat(data/vector2): vector_zero_subsingleton (#547)

2018-12-20 08:15:19-05:00 402e71e
feat(order/filter): tendsto_at_top_at_top (#540)

2018-12-20 08:14:46-05:00 f64b9aa
feat(data/finsupp): frange (#537)

2018-12-20 08:13:39-05:00 bc21f62
feat(ring_theory/ideal_operations): correspondence under surjection (#534)

2018-12-20 08:12:52-05:00 f7697ce
feat(data/equiv/algebra): ring_equiv (#533)

2018-12-20 08:12:00-05:00 fc90e00
feat(ring_theory/subring) various lemmas (#532)
new lemmas:
- is_ring_hom.is_subring_set_range
- ring.in_closure.rec_on
- ring.closure_mono
changed:
- ring.exists_list_of_mem_closure

2018-12-20 08:10:59-05:00 35ed7f4
feat(data/int/basic) int.cast is ring hom (#531)

2018-12-20 04:57:06-05:00 ddd1376
fix(group_theory/coset): remove bad attributes

2018-12-20 03:40:45-05:00 caa2076
feat(command): Add `#where` command, dumping environment info (#489)
The command tells you your current namespace (wherever you write it),
the current `include`s, and the current `variables` which have been
used at least once.

2018-12-18 00:51:12-05:00 293ba83
feat(category_theory/examples/topological_spaces): limits and colimits (#518)

2018-12-18 00:48:52-05:00 3d4297b
feat(category_theory/eq_to_hom): equality of functors; more simp lemmas (#526)

2018-12-18 00:45:47-05:00 76a4b15
feat(data/set/basic): make subtype_val_range a simp lemma (#524)

2018-12-17 15:19:10-05:00 2bc9354
feat(data/nat/enat): extended natural numbers (#522)

2018-12-17 15:10:48-05:00 418c116
feat(data/polynomial): degree_map (#517)

2018-12-17 14:47:05-05:00 d947a3a
refactor(analysis/topology/continuity): use subtype.val_injective (#525)

2018-12-17 12:40:24-05:00 21ce531
fix(data/list): fix build

2018-12-17 12:35:03-05:00 b405158
feat(tactic/explode): improve readability & support proofs using 'suffices' (#516)
* improve readability & support proofs using 'suffices'
* feat(tactic/explode): improve readability & support proofs using 'suffices'

2018-12-17 11:35:44-05:00 a4b699c
feat(order/basic): antisymm_of_asymm

2018-12-17 11:35:42-05:00 ebf3008
feat(tactic/elide): hide subterms of complicated expressions

2018-12-17 11:35:41-05:00 b7d74c4
feat(data/list): list.chain' for empty chains

2018-12-17 11:01:50-05:00 e9be5c1
fix(category/traversable/instances): fix build

2018-12-17 10:50:58-05:00 53b08c1
fix(*): untangle dependency hierarchy

2018-12-17 09:19:16-05:00 3ee1071
feat(data/polynomial): lemmas relating unit and irreducible with degree (#514)

2018-12-17 09:15:28-05:00 d4d05e3
feat(docs/extras/tactic_writing): Tactic writing tutorial (#513)

2018-12-17 09:14:26-05:00 e6065a7
chore(tactic/interactive): make squeeze_simp available by default (#521)

2018-12-17 09:08:53-05:00 b140a07
chore(category_theory/limits/limits): Add missing lemmas (#520)

2018-12-17 08:59:28-05:00 218fe1f
feat(category_theory/opposites): opposites of full and faithful functors (#504)

2018-12-15 12:33:43-05:00 9506e6c
feat(category_theory): functoriality of (co)cones (#507)

2018-12-15 12:32:06-05:00 072e1ba
feat(category_theory/const): Constant functor of object from punit (#508)

2018-12-15 12:31:24-05:00 b1d0501
fix(analysis/topology/topological_space): Improve the lattice structure on opens (#511)

2018-12-15 12:18:12-05:00 1f72be1
feat(category_theory/whiskering): simp-lemmas for unitors and associators (#505)

2018-12-15 12:17:49-05:00 28909a8
feat(category_theory/commas): add simp-lemmas for comma categories (#503)

2018-12-10 17:44:27-05:00 3ddfc23
fix(order/basic): define preorder.lift lt by restriction
This makes it definitionally equal to `inv_image (<) f`, which appears
for example in the type of `inv_image.wf`.

2018-12-05 12:45:33-05:00 257fd84
doc(data/list/basic): improve docstrings [ci-skip]

2018-12-05 08:55:27-05:00 b0d47ea
refactor(set_theory/ordinal): minor simplifications

2018-12-05 08:54:06-05:00 843a1c3
fix(tactic/norm_num): uninstantiated mvars can confuse things

2018-12-05 08:42:51-05:00 94d9ac1
fix(finset): removing bad simp lemmas (#491)

2018-12-02 17:36:23-05:00 5856459
fix(category_theory/limits): add subsingleton instances in preserves.lean

2018-12-02 17:36:23-05:00 af6ee09
fix(category_theory/limits): adding Type annotations in preserves.lean

2018-12-02 17:36:23-05:00 74b65e2
fix(category_theory/limits): change argument order on
cones.precompose/whisker

2018-12-02 17:36:23-05:00 4b0a82c
feat(category_theory): preservation of (co)limits, (co)limits in functor categories

2018-12-02 17:36:23-05:00 6267717
fix(category_theory/limits): namespaces for is_(co)limit

2018-12-02 17:36:23-05:00 de4f689
feat(category_theory/limits): (co)limits, and (co)limits in Type

2018-12-02 17:36:23-05:00 a5e2ebe
feat(category_theory/limits/cones): (co)cones on a diagram

2018-12-02 17:36:23-05:00 68c98eb
feat(category_theory/isomorphism): lemmas for manipulating isomorphisms

2018-12-02 17:36:23-05:00 382abaf
feat(category_theory/const): constant functors

2018-12-02 06:41:58-05:00 51afb41
fix(category_theory/yoneda): add componentwise lemma (#480)

2018-11-29 22:13:08-05:00 2a86b06
fix(order/filter): tendsto_at_top only requires preorder not partial_order

2018-11-29 17:33:38-05:00 9e6572f
fix(group_theory/group_action): make is_group_action Prop

2018-11-28 05:03:07-05:00 1c0c39c
fix(category_theory/equivalences): fixed import
(and some docs, and some clumsy proofs)

2018-11-28 04:36:21-05:00 b02bea6
feat(category_theory/equivalence): equivalences, slice tactic (#479)

2018-11-28 01:31:22-05:00 131b46f
feat(data/list): separate out list defs into `data.lists.defs`

2018-11-27 05:19:28-05:00 98eacf8
feat(tactic/basic,tactic/interactive): generalize use tactic (#497)

2018-11-24 03:58:50-05:00 452c9a2
feat(data/polynomial): nat_degree_comp (#477)

2018-11-24 03:57:05-05:00 e628a2c
feat(data/finmap): finite maps (#487)
* feat(data/list/basic): erasep
* feat(data/list/basic): lookup, ndkeys
* feat(data/list/sigma,alist): basic functions on association lists
* feat(data/finmap): finite maps on multisets
* doc(data/finmap): docstrings [ci-skip]
* refactor(data/list/{alist,sigma},data/finmap): renaming
* knodup -> nodupkeys
* val -> entries
* nd -> nodupkeys
* feat(data/finmap): change keys to finset
* fix(data/list/basic): fix build
* fix(analysis/{emetric-space,measure-theory/integration}): fix build

2018-11-24 03:56:32-05:00 e19cd0f
fix(*): adding a few @[simp] attributes (#492)
* some additional simp lemmas
* nat.add_sub_cancel

2018-11-24 03:53:52-05:00 beff80a
feat(category_theory): preliminaries for limits (#488)
* style(category_theory): avoid long lines
* style(category_theory): rename embedding -> fully_faithful
* feat(category_theory/opposites): opposite of a functor
* style(category_theory/yoneda): minor changes
* make category argument implicit
* reverse order of arguments in yoneda_lemma
* avoid long lines
* feat(category_theory/functor_category): functor.flip
* feat(category_theory/isomorphism): eq_to_hom
* feat(category_theory/comma): comma categories
* feat(category_theory): pempty, punit categories
* feat(category_theory/products): add curried evaluation bifunctor
It will be used later, to prove that (co)limits in diagram categories
are computed pointwise.
* fixing order of definitions in opposites
* constructing fully_faithful instances

2018-11-22 23:51:18-05:00 de8985c
fix(finsupp): remove superfluous typeclass argument (#490)

2018-11-21 09:56:05-05:00 e793967
feat(tactic/interactive): add use tactic (#486)

2018-11-21 05:53:45-05:00 0d56447
fix(tactic/linarith): nat preprocessing was rejecting negated hypotheses (#485)

2018-11-19 16:03:29-05:00 bfe7318
* feat(tactic/mono): new mono and ac_mono tactics (#85)
* feat(tactic/mono): new mono and ac_mono tactics
* docs(tactic/mono): improve explanation, examples and syntax
* feat(tactic/mono): cache the list of mono lemma to facilitate matching
* fix(tactic/mono): fix conflict with `has_lt`
* update mathlib
* move lemmas from ordered ring to monotonicity
* rename `monotonic` attribute to `mono`
* address PR comments
* fix build

2018-11-17 21:37:06-05:00 8c385bc
feat(category_theory): associator and unitors for functors (#478)
also check pentagon and triangle

2018-11-16 19:49:32-05:00 1c60f5b
fix(ring_theory/subring): unnecessary classical (#482)

2018-11-15 23:08:53+01:00 47b3477
feat(category_theory/whiskering): more whiskering lemmas

2018-11-15 23:02:43+01:00 c834715
style(category_theory/natural_transformation): fix hcomp/vcomp notation (#470)

2018-11-15 15:29:36-05:00 fce8e7c
refactor(algebra/euclidean_domain): euclidean_domain extends nonzero_comm_ring (#476)
The euclidean domain axioms imply integral domain, given `nonzero_comm_ring`. Therefore it should extend `nonzero_comm_ring` instead, and an `integral_domain` instance is proven for Euclidean domains.

2018-11-14 20:17:14-05:00 c7c0d2a
fix(analysis/topology/topological_structures): remove useless decidability assumption (#475)

2018-11-14 15:24:47+01:00 baf59c8
refactor(order/complete_lattice): define supr and infi with range (#474)

2018-11-13 18:48:00+01:00 291015d
fix(tactic/basic): use `lean.parser.of_tactic'` instead of builtin

2018-11-13 18:45:11+01:00 3e78b85
refactor(order/complete_lattice): make supr and infi available in has_Sup and has_Inf (#472)

2018-11-10 18:16:37+01:00 4a013fb
feat(analysis): sequential completeness

2018-11-10 17:25:26+01:00 b83fe1e
feat(analysis): metric spaces are first countable

2018-11-09 13:51:33+01:00 891dfbb
chore(*): clean up uses of zorn

2018-11-09 10:43:01+01:00 4fc67f8
feat(data/fintype): add choose_unique and construct inverses to bijections (#421)

2018-11-09 10:22:08+01:00 9f5099e
refactor(analysis): add uniform_embedding_comap

2018-11-09 10:22:08+01:00 6273837
feat(analysis): add emetric spaces

2018-11-09 09:39:52+01:00 ff8bd5b
fix(data/multiset): remove unused argument from `range_zero` (#466)

2018-11-08 10:16:03+01:00 b0564b2
feat(category_theory): propose removing coercions from category_theory/ (#463)

2018-11-08 09:29:40+01:00 2f38ed7
feat(ring_theory/ideal_operations): define ideal operations (multiplication and radical) (#462)

2018-11-08 09:28:27+01:00 41e8eb3
feat(ring_theory/localization): quotient ring of integral domain is discrete field

2018-11-06 12:40:58+01:00 89431cf
feat(linear_algebra): direct sum

2018-11-05 13:32:36-05:00 0963290
fix(data/real/irrational): fix build

2018-11-05 17:58:46+01:00 21d4d1c
feat(field_theory/perfect_closure): define the perfect closure of a field

2018-11-05 17:58:46+01:00 8eac03c
feat(algebra/char_p): define the characteristic of a semiring

2018-11-05 17:46:35+01:00 53d4883
refactor(cau_seq): unify real.lim, complex.lim and cau_seq.lim (#433)

2018-11-05 17:44:01+01:00 17da277
feat(group_theory/eckmann_hilton): add Eckmann-Hilton (#335)

2018-11-05 17:40:57+01:00 efcb1fb
feat(analysis/topology/topological_space): more about discrete spaces

2018-11-05 17:40:31+01:00 1a4d938
hotifx(analysis/topology/continuity): difference with disjoint and `s ∩ t = ∅`

2018-11-05 17:00:44+01:00 14d99a3
hotfix(data/real/irrational): cast problem

2018-11-05 10:47:04-05:00 a12d5a1
feat(linear_algebra,ring_theory): refactoring modules (#456)
Co-authored with Kenny Lau. See also
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/module.20refactoring for discussion.
Major changes made:
- `semimodule α β` and `module α β` and `vector_space α β` now take one more argument, that `β` is an `add_comm_group`, i.e. before making an instance of a module, you need to prove that it's an abelian group first.
- vector space is no longer over a field, but a discrete field.
- The idiom for making an instance `module α β` (after proving that `β` is an abelian group) is `module.of_core { smul := sorry, smul_add  := sorry, add_smul := sorry, mul_smul := sorry, one_smul := sorry }`.
- `is_linear_map` and `linear_map` are now both structures, and they are independent, meaning that `linear_map` is no longer defined as `subtype is_linear_map`. The idiom for making `linear_map` from `is_linear_map` is `is_linear_map.mk' (f : M -> N) (sorry : is_linear_map f)`, and the idiom for making `is_linear_map` from `linear_map` is `f.is_linear` (i.e. `linear_map.is_linear f`).
- `is_linear_map.add` etc no longer exist. instead, you can now add two linear maps together, etc.
- the class`is_submodule` is gone, replaced by the structure `submodule` which contains a carrier, i.e. if `N : submodule R M` then `N.carrier` is a type. And there is an instance `module R N` in the same situation.
- similarly, the class `is_ideal` is gone, replaced by the structure `ideal`, which also contains a carrier.
- endomorphism ring and general linear group are defined.
- submodules form a complete lattice. the trivial ideal is now idiomatically the bottom element, and the universal ideal the top element.
- `linear_algebra/quotient_module.lean` is deleted, and it's now `submodule.quotient` (so if `N : submodule R M` then `submodule R N.quotient`) Similarly, `quotient_ring.quotient` is replaced by `ideal.quotient`. The canonical map from `N` to `N.quotient` is `submodule.quotient.mk`, and the canonical map from the ideal `I` to `I.quotient` is `ideal.quotient.mk I`.
- `linear_equiv` is now based on a linear map and an equiv, and the difference being that now you need to prove that the inverse is also linear, and there is currently no interface to get around that.
- Everything you want to know about linear independence and basis is now in the newly created file `linear_algebra/basis.lean`.
- Everything you want to know about linear combinations is now in the newly created file `linear_algebra/lc.lean`.
- `linear_algebra/linear_map_module.lean` and `linear_algebra/prod_module.lean` and `linear_algebra/quotient_module.lean` and `linear_algebra/submodule.lean` and `linear_algebra/subtype_module.lean` are deleted (with their contents placed elsewhere).
squashed commits:
* feat(linear_algebra/basic): product modules, cat/lat structure
* feat(linear_algebra/basic): refactoring quotient_module
* feat(linear_algebra/basic): merge in submodule.lean
* feat(linear_algebra/basic): merge in linear_map_module.lean
* refactor(linear_algebra/dimension): update for new modules
* feat(ring_theory/ideals): convert ideals
* refactor tensor product
* simplify local ring proof for Zp
* refactor(ring_theory/noetherian)
* refactor(ring_theory/localization)
* refactor(linear_algebra/tensor_product)
* feat(data/polynomial): lcoeff

2018-11-05 10:08:52-05:00 37c0d53
refactor(field_theory/finite): generalize proofs (#429)

2018-11-05 09:56:33-05:00 a64be8d
feat(category/bifunctor): Bifunctor and bitraversable (#255)

2018-11-05 09:50:04-05:00 d556d6a
refactor(topology/topological_space): rename open_set to opens and unbundle it (#427)

2018-11-05 09:43:52-05:00 dcd90a3
feat(order/filter): ultrafilter monad and the Stone-Cech compactification (#434)
* feat(order/filter): simplify theory of ultrafilters slightly
Introduce an alternate characterization of ultrafilters, and use it
to prove ultrafilter_map and ultrafilter_pure.
* chore(*): rename ultrafilter to is_ultrafilter
* feat(order/filter): the ultrafilter monad
* feat(analysis/topology): closure, continuous maps and T2 spaces via ultrafilters
For these, first prove that a filter is the intersection of the ultrafilters
containing it.
* feat(analysis/topology): Normal spaces. Compact Hausdorff spaces are normal.
* feat(analysis/topology/stone_cech): the Stone-Čech compactification

2018-11-05 09:39:57-05:00 62538c8
feat(analysis/metric_spaces): Compact and proper spaces (#430)

2018-11-05 09:03:45-05:00 47a0a22
fix(algebra/ordered_group): make instances defeq (#442)

2018-11-05 09:03:15-05:00 8ae3fb8
feat(ring_theory/subring): ring.closure (#444)

2018-11-05 09:01:57-05:00 849d2a4
feat(analysis/topology/topological_space): define T0 spaces, T4 spaces, connected and irreducible sets and components (#448)

2018-11-05 08:59:28-05:00 8898f0e
feat(data/real/irrational): add basic irrational facts (#453)
Joint work by Abhimanyu Pallavi Sudhir, Jean Lo, Calle Sönne, Kenny Lau, and Chris Hughes

2018-11-05 08:57:04-05:00 94b09d6
refactor(data/real/basic): make real irreducible (#454)

2018-11-05 08:56:18-05:00 c57a9a6
fix(category_theory/isomorphism): use `category_theory.inv` in simp lemmas
`category_theory.is_iso.inv` is not the preferred name for this.

2018-11-05 08:53:41-05:00 354d59e
feat(data/nat/basic,algebra/ring): adding two lemmas about division (#385)

2018-11-05 13:47:01+01:00 279b9ed
feat(ring_theory/matrix): add minor, sub_[left|right|up|down], sub_[left|right]_[up][down] (#389)
Also add fin.nat_add.

2018-11-05 11:45:33+01:00 c56bb3b
feat(tactic/norm_num): permit `norm_num(1)` inside `conv`

2018-11-05 11:45:33+01:00 b092755
doc(docs/conv): document additions

2018-11-05 11:45:33+01:00 fb57843
feat(tactic/ring(2)): permit `ring` and `ring2` inside `conv`

2018-11-05 11:45:33+01:00 d560431
feat(tactic/basic): add `lock_tactic_state`
For state-preserving tactic invocations (extracting the result)

2018-11-05 11:45:33+01:00 350e6e2
feat(tactic/conv): add `erw`, `conv_lhs`, and `conv_rhs`

2018-11-05 05:21:48-05:00 aed8194
feat(docs/extras) add doc about coercions between number types (#443)

2018-11-05 05:20:29-05:00 072a11e
feat(data/polynomial): polynomial.comp (#441)

2018-11-05 05:19:00-05:00 1cadd48
feat(data/list): mfoldl, mfoldr theorems; reverse_foldl

2018-11-05 05:07:45-05:00 b934956
feat(data/int/basic): make coe_nat_le, coe_nat_lt, coe_nat_inj' into simp lemmas

2018-11-05 05:07:04-05:00 f5ce71f
fix(tactic/eval_expr): often crashes when reflecting expressions (#358)

2018-11-05 05:03:22-05:00 f00ed77
feat(data/complex/basic): I_ne_zero and cast_re, cast_im lemmas

2018-11-03 20:19:22-04:00 3f5ec68
fix(*): make three `trans_apply`s rfl-lemmas

2018-10-31 21:17:26+01:00 74ae8ce
fix(data/real,data/rat): make orders on real and rat irreducible

2018-10-30 12:26:55-04:00 58909bd
feat(*): monovariate and multivariate eval\2 now do not take is_semiring_hom as an argument

2018-10-30 12:24:35-04:00 90982d7
feat(tactic/fin_cases): a tactic to case bash on `fin n` (#352)
* feat(tactic/fin_cases): a tactic to case bash on `fin n`
* using core is_numeral
* removing guard
just rely on eval_expr to decide if we have an explicit nat
* add parsing, tests, documentation
* don't fail if the rewrite fails
* fixes

2018-10-30 12:23:50-04:00 e585bed
feat(data/int/basic): bounded forall is decidable for integers

2018-10-30 12:23:04-04:00 489050b
feat(tactic/tauto): add an option for `tauto` to work in classical logic

2018-10-19 00:14:30+02:00 ed84298
feat(analysis/topology): add continuity rules for list and vector insert/remove_nth

2018-10-19 00:03:08+02:00 f6812d5
feat(analysis/topology): add type class for discrete topological spaces

2018-10-18 23:05:00+02:00 99e14cd
feat(group_theory/quotient_group): add map : quotient N -> quotient M

2018-10-18 23:02:03+02:00 f52d2cc
chore(group_theory/free_abelian_group, abelianization): rename to_comm_group, to_add_comm_group -> lift

2018-10-18 13:48:14+02:00 c3e489c
chore(data/fin): add cast_add

2018-10-18 09:43:01+02:00 f2beca8
feat(ring_theory): prove principal_ideal_domain is unique factorization domain

2018-10-18 09:41:00+02:00 7b876a2
cleanup(data/nat/choose,binomial): move binomial into choose

2018-10-18 09:08:54+02:00 a46e8f7
cleanup(ring_theory/principal_ideal_domain): restructure

2018-10-18 00:33:42+02:00 a3ac630
feat(algebra,group_theory): add various closure properties of subgroup and is_group_hom w.r.t gsmul, prod, sum

2018-10-17 23:01:03+02:00 ea962a7
chore(analysis/topology/continuity): locally_compact_space is Prop

2018-10-17 22:49:26+02:00 bac655d
feature(data/vector2, data/list): add insert_nth for vectors and lists

2018-10-17 20:57:36+02:00 085b1bc
cleanup(algebra/group_power): remove inactive to_additive

2018-10-17 20:56:45+02:00 1008f08
cleanup(tactic): remove example

2018-10-17 16:12:26+02:00 5a8e28d
doc(docs/tactic): unify choose doc (#426)

2018-10-17 13:50:02+02:00 72308d8
chore(data/fin): use uniform names; restructure

2018-10-17 13:50:02+02:00 d2b3940
feat(data/fin): ascend / descend for fin

2018-10-17 13:50:02+02:00 f789969
feat(data/finset): add min' / max' for non-empty finset

2018-10-17 13:50:02+02:00 ef9566d
feat(data/equiv): equivalences for fin * fin and fin + fin

2018-10-17 13:50:02+02:00 b085915
feat(data/list): length_attach, nth_le_attach, nth_le_range, of_fn_eq_pmap, nodup_of_fn (by @kckennylau)

2018-10-17 13:50:02+02:00 b454dae
feat(group_theory/perm): swap_mul_swal / swap_swap_apply (by @kckennylau)

2018-10-17 09:46:54+02:00 530e1d1
refactor (data/finset): explicit arguments for subset_union_* and inter_subset_*
This change makes them a little easier to apply, and also makes them consistent with their analogues in set.basic.

2018-10-17 09:25:02+02:00 b5cd974
feat(*): trigonometric functions: exp, log, sin, cos, tan, sinh, cosh, tanh, pi, arcsin, argcos, arg (#386)
* `floor_ring` now is parameterized on a `linear_ordered_ring` instead of extending it.
*

2018-10-16 13:07:50+02:00 792c673
feat(order/galois_connection): make arguemnts to dual implicit

2018-10-15 17:21:09+02:00 80d688e
feat(data/nat/choose): nat.prime.dvd_choose (#419)
* feat(data/nat/choose): nat/prime.dvd_choose
* use nat namespace
* Update prime.lean
* improve readability

2018-10-15 15:12:23+02:00 c5930f5
feat(group_theory.order_of_element): subgroups of cyclic groups are cyclic (#423)
* feat(group_theory.order_of_element): subgroups of cyclic groups are cyclic
* delete new line

2018-10-15 13:39:24+02:00 a33ab12
refactor(analysis/topology): move separation ring to quotient_topological_structures

2018-10-15 13:39:24+02:00 1308077
feature(data/equiv/algebra): add mul left/right and inverse as equivalences

2018-10-15 13:39:24+02:00 c8ecae8
feature(analysis/topology/continuity): start homeomorphism

2018-10-15 13:39:24+02:00 af434b5
refactor(analysis/topology): move is_open_map to continuity

2018-10-15 13:39:24+02:00 29675ad
refactor(analysis/topology/topological_structures): use to_additive to derive topological_add_monoid and topological_add_group

2018-10-15 13:39:24+02:00 75046c2
chore(data/quot): add setoid.ext

2018-10-15 13:39:24+02:00 2395183
feat(analysis/topology/quotient_topological_structures): endow quotient
of topological groups, add groups and rings with a topological whatever
structure
This is not yet sorted. I'd like to push completions before cleaning
this.

2018-10-15 13:35:49+02:00 7358605
feat(analysis/topology/completion): comm_ring on separation quotient, completion (separation_quotient A) is equivalent to completion A

2018-10-15 13:33:05+02:00 13be74f
feat(analysis/topology/topological_structure): ideal closure is ideal

2018-10-15 13:33:05+02:00 7697a84
feat(analysis/topology/topological_groups): construct topologies out of a group and a neighbourhood filter at 0

2018-10-15 13:33:05+02:00 96d3f95
doc(analysis/topology/completion): document changed organization

2018-10-15 13:33:05+02:00 fbb6e9b
feat(analysis/topology): group completion

2018-10-14 23:27:04-04:00 8150f19
feat(logic/basic): classical.not_not (#418)
* feat(logic/basic): classical.not_not
* mark as protected

2018-10-12 23:59:58+02:00 019b236
fix(category_theory/open_set): Restore the correct order on open_set

2018-10-12 10:55:25+02:00 131cf14
feat(group_theory/quotient_group): add to_additive attribute

2018-10-12 10:54:58+02:00 c8d3c96
feat(tactic/interactive): congr' tries harder

2018-10-11 08:53:11-04:00 62451d3
cleanup(data/polynomial): simplify proof of coeff_mul_left (#414)

2018-10-11 13:22:43+02:00 0fe2849
chore(analysis/measure_theory): finish characterization of lintegral

2018-10-10 22:50:06+02:00 40f5565
feat(analysis/measure_theory): lower Lebesgue integral under addition, supremum

2018-10-10 22:50:06+02:00 a25e4a8
feat(analysis/measure_theory/integration): lebesgue integration [WIP]

2018-10-10 12:53:24-04:00 4dbe0cd
doc(elan): further improvements to installation instructions (#412) [ci-skip]

2018-10-10 04:04:54-04:00 979e238
fix(*): fix build continued

2018-10-10 03:27:18-04:00 1a4156d
fix(data/nat): fix build

2018-10-10 03:03:09-04:00 fedee98
feat(data/nat/basic): a few choiceless proofs
not sure I can take this much farther without modifying core...

2018-10-10 03:01:34-04:00 1daf4a8
fix(data/set/lattice): fixing simp lemmas for set monad

2018-10-09 22:59:15-04:00 d867240
feat(data/set/finite): finiteness of set monad ops

2018-10-09 01:14:15-04:00 5c209ed
fix(linear_algebra/dimension): fix build

2018-10-08 15:17:51-04:00 2c11641
refactor(data/polynomial): consistently use coeff not apply (#409)

2018-10-08 14:51:29-04:00 a694628
fix(tactic/rcases): declare ? token

2018-10-08 14:30:13-04:00 3aeb64c
refactor(*): touching up proofs from 'faster' branch

2018-10-08 14:30:12-04:00 f02a88b
chore(*): replace rec_on with induction and match for readability

2018-10-08 14:30:12-04:00 cc2e1ec
refactor(*): making mathlib faster again

2018-10-08 04:07:24-04:00 136ef25
feat(ring_theory/determinants): det is a monoid_hom (#406)

2018-10-08 03:07:28-04:00 61d8776
fix(ring_theory/determinant): remove #print (#405)

2018-10-08 00:49:30-04:00 13febee
fix(group_theory/perm): fix to_additive use

2018-10-07 21:29:00-04:00 73f51b8
feat(ring_theory/determinant): determinants (#404)
* clean up determinant PR
* remove unnecessary type annotations
* update copyright
* add additive version of prod_attach_univ

2018-10-07 21:27:20-04:00 04d8c15
feat(solve_by_elim): improve backtracking behaviour when there are multiple subgoals (#393)

2018-10-07 09:22:24-04:00 8c68fd1
feat(tactic/auto_cases): split `iff`s into two implications (#344)
* feat(tactic/auto_cases): split `iff`s into two implications
* add Johan's test case

2018-10-07 09:17:40-04:00 49fea31
feat(tactics/solve_by_elim): add or remove lemmas from the set to apply, with `simp`-like parsing (#382)
* feat(tactic/solve_by_elim): modify set of lemmas to apply using `simp`-like syntax
* update to syntax: use `with attr` to request all lemmas tagged with an attribute
* use non-interactive solve_by_elim in tfae
* fix parser

2018-10-07 09:12:40-04:00 3b09151
feat(tactic/squeeze): squeeze_simp tactic (#396)
* feat(tactic/squeeze): just the squeeze_simp tactic
* docs(tactic/squeeze): add header comments and documentation
* Provide a means for other tactics to use squeeze

2018-10-07 09:09:49-04:00 c1f13c0
fix(data/int.basic): rename sub_one_le_iff (#394)

2018-10-07 09:09:28-04:00 d1e34fd
fix(algebra/big_operators): remove `comm_monoid` assumption from `sum_nat_cast` (#401)

2018-10-07 09:08:52-04:00 276c472
fix(algebra/ring): delete duplicate lemma zero_dvd_iff_eq_zero (#399)

2018-10-07 07:16:14-04:00 e4ce469
fix(docs/elan): fix homebrew instructions for macOS (#395)

2018-10-07 07:15:56-04:00 64431ae
doc(hole/instance_stub) (#400)

2018-10-07 06:35:55-04:00 46a37a7
feat(hole/instance_stub): tool support for providing snippets (#397)

2018-10-07 02:28:18-04:00 0ddb58c
workaround(tactic/tfae): tfae is broken, comment out its tests (#398)

2018-10-06 22:41:00-04:00 2bf7b4b
refactor(tactic/tfae): minor tfae modifications

2018-10-06 22:33:52-04:00 568e405
feat(data/finset): embedding properties of finset.map

2018-10-05 02:18:56-04:00 74f52f1
Expand and contract fin (#387)

2018-10-04 15:08:19+02:00 9ec21e4
perf(tactic/scc): produce smaller proofs

2018-10-04 15:08:19+02:00 025b73a
chore(tactic/scc): small cleanup

2018-10-04 15:08:19+02:00 ff12b35
docs(tactic/tfae): move doc string

2018-10-04 15:08:19+02:00 d935519
docs(tactic/tfae): fix oversights

2018-10-04 15:08:19+02:00 b7d314f
feat(tactic/tfae): tactic for decomposing a proof into a set of
equivalent propositions which can be proved equivalent by cyclical
implications

2018-10-03 12:54:45+02:00 a243126
chore(*): replace more axiom_of_choice, classical.some and classical.choice using the choose tactic

2018-10-03 11:24:50+02:00 c1f9f2e
refactor(tactics/interactive, *): rename choice to choose and change syntax; use chooose instead of cases of axiom_of_choice

2018-10-03 09:30:54+02:00 0cfbf5a
feat(tactic/linarith): handle negations of linear hypotheses

2018-10-02 22:17:27+02:00 fff12f5
chore(analysis/topology): remove duplicate theorems interior_compl_eq and closure_compl_eq (as discovered by @kckennylau)

2018-10-02 22:13:59+02:00 c2df6b1
feat(tactics/interactive): add choice (closes #38)

2018-10-02 15:12:09+02:00 b84e2db
feat(docs/theories): document padics development (close #337)
(it hurts to write "maths in lean")

2018-10-02 14:08:34+02:00 1562cc2
feat(data/padics): use prime typeclass

2018-10-02 14:08:34+02:00 e6a1bc3
feat(data/real/cau_seq): relate cauchy sequence completeness and filter completeness

2018-10-02 14:08:34+02:00 e0b0c53
feat(data/padics): prove Hensel's lemma

2018-10-02 14:02:23+02:00 f040aef
feat(data/padics): use has_norm typeclasses for padics

2018-10-02 13:38:45+02:00 963fc83
doc(docs/elan.md): instructions for building all of a dependency
Closes #308.

2018-10-02 13:38:05+02:00 9339754
docs(elan): updating documentation on installing via elan (#371)
* updating documentation for elan
* minor
* further update of elan docs
* update instructions for elan 0.7.1
* noting additional prerequisite on macOS

2018-10-02 13:36:09+02:00 28443c8
feat(ring_theory/noetherian): zero ring (and finite rings) are Noetherian (closes #341)

2018-10-02 11:34:24+02:00 44b55e6
feat(category_theory/groupoid): groupoids

2018-10-02 11:34:04+02:00 efa9459
feat(category_theory/whiskering): whiskering nat_trans by functors (#360)
* feat(category_theory/whiskering): whiskering nat_trans by functors
* simplify whiskering

2018-10-02 08:05:06+02:00 470b6da
feat(data/sum): add monad instance

2018-10-01 20:53:49+02:00 dbb3ff0
feat(data/zmod/quadratic_reciprocity): quadratic reciprocity (#327)
* multiplicative group of finite field is cyclic
* more stuff
* change chinese remainder to def
* get rid of nonsense
* delete extra line break
* one prod_bij left
* move lemmas to correct places
* delete prod_instances
* almost done
* move lamms to correct places
* more moving lemmas
* finished off moving lemmas
* fix build
* move quadratic reciprocity to zmod
* improve readability
* remove unnecessary alphas
* move `prod_range_id`
* fix build
* fix build
* fix build
* fix build
* delete mk_of_ne_zero
* move odd_mul_odd_div_two
* extra a few lemmas
* improving readability
* delete duplicate lemmas
* forgot to save
* delete duplicate lemma
* indent calc proofs
* fix build
* fix build
* forgot to save
* fix build

2018-10-01 20:35:10+02:00 f3850c2
feat(algebra/group): add units.map and prove that it is a group hom (#374)

2018-10-01 20:34:14+02:00 decb030
style(tactic/*): minor simplifications to tidy-related tactics

2018-10-01 20:26:32+02:00 87a963b
feat(tactic/ext): add apply_cfg argument to ext1 (#346)
* feat(tactics/ext): use `applyc _ {new_goals := new_goals.all}`
This causes goals to appear in the same order they appear as hypotheses of the
`@[extensionality]` lemma, rather than being reordered to put dependent
goals first.
This doesn't appear to affect any uses of `ext` in mathlib,
but is occasionally helpful in the development of category theory.
(Indeed, I have been running into tactic mode proofs that fail to
typecheck, when using ext, and this avoids the problem)
* adding configuration to non-interactive ext1
and a wrapper so tidy can sometimes produce shorter tactic scripts

2018-10-01 20:24:42+02:00 1923c23
feat(data/polynomial): interface general coefficients of a polynomial (#339)
* feat(data/polynomial): interface general coefficients of a polynomial
* fix(data/polynomial): fixing the code I broke when defining polynomial.ext
* fix(data/polynomial): tidy up comments
* Update polynomial.lean
* adding interface for scalar multiplication and coefficients
* feat(data/polynomial): coeff is R-linear

2018-10-01 20:19:59+02:00 282754c
fix(tactic/linarith): symmetric case

2018-10-01 20:19:59+02:00 31ef46a
feat(tactic/linarith): don't reject nonlinear hypotheses

2018-10-01 18:10:17+02:00 4ba7f23
cleanup(data/holor)

2018-10-01 14:51:42+02:00 7c361fa
feat(data/holor): holor library

2018-10-01 14:40:27+02:00 b66614d
refactor(analysis/topology): renamed compact_open to continuous_map; moved locally_compact to a more general position

2018-09-29 09:32:55-04:00 b5d8fbe
fix(data/nat/prime): fix build, add simp attr

2018-09-29 07:48:43-04:00 6997caf
feat(data/nat/basic): remove superfluous assumptions

2018-09-24 21:31:25+02:00 6434658
feat(analysis/topology): locally compact spaces and the compact-open topology

2018-09-24 15:33:35+02:00 68acd76
feat(group_theory/perm): perm.fintype and card_perm (closed #366)

2018-09-24 08:48:09+02:00 cbfe372
fix(category_theory/functor): make obj_eq_coe a rfl-lemma
This is needed to, for example, let `dsimp` turn `𝟙 (F.obj X)` into `𝟙 (F X)`.

2018-09-23 19:54:43-04:00 ce43eae
fix(topological_structures): fix imports

2018-09-23 18:55:03-04:00 8c76cac
fix(*): tweaks to 7944cc

2018-09-23 09:40:57+02:00 e7c7552
feat(analysis/topology/continuity): compactness and embeddings

2018-09-23 09:40:57+02:00 ab20b5f
style(analysis/topology/continuity): minor reorganizations

2018-09-21 17:57:07+02:00 ca7f118
fix(docs/tactics.md): missing backquote, formatting
I think I never previewed when I updated the `linarith` doc before, sorry.

2018-09-21 17:46:47+02:00 9a7a611
feat(analysis/topology, order/filter): theorems for the applicative structure on filter; add list topology

2018-09-21 17:46:47+02:00 568a15f
refactor(category/traversable): proofs about list instance for traverse, simplify multiset.traverse

2018-09-21 17:46:47+02:00 618aac9
feat(data/set): add set.seq (use it for the appliative.seq instance for set)

2018-09-21 17:46:47+02:00 a62ec36
refactor(order/filter): remove monad instance on filters; add applicative instance inducing the expected products

2018-09-21 17:46:47+02:00 f53c776
feat(analysis/topology): pi-spaces: topolopgy generation, prove second countability

2018-09-21 17:46:47+02:00 da7bbd7
feat(data/set): add set.pi

2018-09-21 17:46:47+02:00 7944cc5
fix(*): fix some problems introduced with 98152392bcd4b3f783602d030a5ab6a9e47e0088 and 9aec1d18d3c4cbad400d7ddcdd63b94d647b0a01

2018-09-21 00:09:04-04:00 2485d8e
fix(*): fix build

2018-09-20 19:46:48-04:00 a4108eb
fix(algebra/pi_instances): bugfix

2018-09-20 19:21:02-04:00 9aec1d1
refactor(algebra/pi_instances): move prod instances to pi_instances file

2018-09-20 17:49:40-04:00 3ba4e82
feat(data/set/finite): finite_subset_Union, disjoint_mono

2018-09-20 17:48:53-04:00 bd26b06
refactor(linear_algebra/basic): move some lemmas to the right place

2018-09-20 17:46:38-04:00 1758092
feat(data/subtype): subtype.coe_ext

2018-09-20 17:45:33-04:00 9815239
feat(logic/basic): more coe_trans instances

2018-09-20 17:44:42-04:00 0d6bae7
refactor(order/filter): move directed to order.basic, swap definition
directed means containing upper bounds, not lower bounds

2018-09-20 17:41:18-04:00 e054277
feat(order/bounded_lattice): eq_top_mono

2018-09-20 17:40:57-04:00 84024be
feat(order/zorn): more zorn's lemma variants

2018-09-20 16:00:07+02:00 1da8cc5
feat(analysis/topology/uniform_structure): uniform_space.comap extra
lemmas

2018-09-20 10:45:52+02:00 d0f1b21
feat(data/prod): add id_prod

2018-09-19 11:24:25+02:00 318ec36
feat(group_theory/perm): sign_cycle and sign_bij (#347)

2018-09-19 11:19:01+02:00 ad9309f
feat(data/polynomial): C_inj and dvd_iff_is_root (#359)

2018-09-18 23:07:02-04:00 ae0da3d
feat(algebra/group_power): zero_pow et al
written by Chris Hughes

2018-09-18 18:27:23-04:00 61d0c65
refactor(ring_theory/matrix): use pi instances

2018-09-18 17:03:51-04:00 5260ab8
feat(ring_theory/matrix): diagonal matrices
Joint work with Johan Commelin

2018-09-18 13:08:42-04:00 a72807f
feat(ring_theory/matrix): (finally!) adding matrices (#334)
Joint work by: Ellen Arlt, Blair Shi, Sean Leather, Scott Morrison, Johan Commelin, Kenny Lau, Johannes Hölzl, Mario Carneiro

2018-09-18 15:20:04+02:00 7dedf3c
feat(analysis/topology): injective_separated_pure_cauchy

2018-09-17 14:40:15-04:00 2e204f2
feat(category/functor): make `sum` `functor` instance more universe polymorphic

2018-09-17 14:39:36-04:00 9d28f8b
feat(tactic/ext): remove lambda abstractions when inferring a type's name

2018-09-17 13:25:46+02:00 62c69b7
feat(tactic/linarith): option to prove arbitrary goals by exfalso, enabled by default

2018-09-17 11:58:19+02:00 e9af59d
feat(algebra/order_functions): add simp rules for min/max_eq_left/right (closes #306)

2018-09-17 09:15:23+02:00 cf260ca
feat(category_theory/*): some lemmas about universes

2018-09-15 17:30:09+02:00 04c4abf
fix(algebra/group): fix bit0_zero to use (0 : alpha) not (0 : nat)

2018-09-15 17:29:12+02:00 39bab47
feat(linear_algebra): dimension theorem (#345)
* dimension theorem
* more theorems about dimension
* cardinal stuff
* fix error
* move A/S x S = A to quotient_module.lean
* remove pempty_equiv_empty

2018-09-14 14:57:58+02:00 52bc8b6
fix(analysis/normed_space): Add instance showing that normed field is a normed space over itself

2018-09-14 14:51:33+02:00 9daf78b
feat(tactic/linarith): basic support for nat (#343)
* feat(tactic/linarith): basic support for nats
* fix(tactic/linarith): typo

2018-09-14 14:47:42+02:00 21233b7
fix(category_theory/*): several minor fixes, preparatory to presheaves (#342)
* fix(category_theory/*): several minor fixes, preparatory to PR’ing the category of presheaves
In category.lean, better proofs in `instance [preorder α] : small_category α := …`.
In natural_isomorphism.lean, some rfl lemmas, natural isomorphisms describing functor composition, and formatting
In examples/topological_spaces.lean, deciding to reverse the arrows in `open_set X` (the category of open sets, with restrictions), to reduce using opposites later, as well as describing the functoriality of `open_set`.
* additional simp lemmas

2018-09-13 13:42:52-04:00 a770ee5
fix(data/padics/padic_rationals): fix proof

2018-09-13 12:28:42-04:00 46502df
feat(algebra/ordered_ring): mul_self_pos

2018-09-13 12:07:41-04:00 bebe170
feat(data/int/order): delete int.order and prove all commented out lemmas (#348)

2018-09-11 13:05:07+02:00 1206356
fix(doc/tactics): fix typo in documentation of `ext`

2018-09-11 10:40:33+02:00 36a82cb
feat(tactic/ext): use `rcases` patterns to intro `ext` variables

2018-09-11 10:07:59+02:00 ffc6bc0
feat(tactic/ext): add support for propext

2018-09-11 10:07:59+02:00 c25ca3b
feat(tactic/ext): address reviewers' comments

2018-09-11 10:07:59+02:00 4e3b89c
feat(tactic/ext): make the attribute incremental

2018-09-11 10:07:59+02:00 6557f51
feat(tactic/ext): add indexing of extensionality lemmas

2018-09-11 10:07:59+02:00 4efdbdb
feat(tactic/ext): match extensionality lemma more exactly

2018-09-11 10:07:19+02:00 ba7bd74
feat(category_theory): Yoneda, basic facts about natural isomorphisms, and an extensionality lemma using Yoneda lemma (#326)
* feat(category_theory/yoneda_lemma)
* feat(category_theory/natural_isomorphisms): basic facts about natural isomorphisms, and an extensionality lemma using Yoneda

2018-09-10 20:50:08-04:00 40a365a
feat(tactic/replacer): add support for parameters in replacer

2018-09-10 22:46:23+02:00 a7995c9
fix(set_theory/cofinality): fix type of omega_is_regular

2018-09-10 22:44:42+02:00 0e06944
feat(data/equiv/basic): quot_equiv_of_quot(')
quot_equiv_of_quot matches matches the existing subtype_equiv_of_subtype,
but quot_equiv_of_quot' is useful in practice and this definition is careful
to use eq.rec only in proofs.

2018-09-10 22:40:31+02:00 61f4827
fix(logic/basic): remove unnecessary hypothesis from proof_irrel_heq

2018-09-10 13:57:55-04:00 b33764d
feat(algebra/module): semimodules

2018-09-10 03:23:58-04:00 56c4919
feat(tactic/abel): decision procedure for comm groups

2018-09-09 23:23:59-04:00 f10e7ad
refactor(tactic/ring): remove unnecessary rat from horner_expr

2018-09-09 23:23:53-04:00 eab064e
refactor(tactic/ring): use horner_expr instead of destruct on expr

2018-09-09 23:23:45-04:00 484afdf
test(tests/ring): add test file for ring

2018-09-09 20:45:05-04:00 181905e
refactor(tactic/linarith): refactoring

2018-09-09 18:34:27+02:00 4be1ef1
fix

2018-09-09 18:34:27+02:00 5b7edec
feat(category_theory): redesign of concrete categories
Also exercising it further with `def forget_to_Mon : CommRing ⥤ Mon := …`

2018-09-09 18:32:02+02:00 aaa113a
fix(tactic/linarith): improve earlier fix

2018-09-09 18:32:02+02:00 fa747b0
fix(tactic/linarith): proper handling of 0 coefficients in input

2018-09-09 18:32:02+02:00 675c235
fix(tactic/linarith): make more use of equality hypotheses

2018-09-09 15:01:18+02:00 53cc7ce
refactor(data/polynomial): generalize leading_coeff_X_pow (#329)
Generalize `leading_coeff_X_pow` to `comm_semiring`

2018-09-08 19:25:06-04:00 fc1fd3d
feat(set_theory/cofinality): sum_lt_of_is_regular

2018-09-08 20:54:21+02:00 73abe2e
fix(category_theory/products): fix types of inl/inr/fst/snd (#320)

2018-09-08 20:17:26+02:00 5613d2e
feat(tactic): add support for quotients to rcases

2018-09-08 11:44:06+02:00 1b9b139
refactor(linear_algebra/prod_module): move prod.ring (#322)

2018-09-07 17:43:56+02:00 5aa65d6
order(filter): rename `vmap` to `comap`

2018-09-07 17:32:23+02:00 2524dba
fix(algebra/big_operators): change name of `sum_attach` to `finset.sum_attach`

2018-09-07 17:30:25+02:00 8f89324
style(linear_algebra/submodule): changed import order; added product construction

2018-09-07 17:30:25+02:00 085c012
refactor(linear_algebra, ring_theory): rework submodules; move them to linear_algebra

2018-09-07 17:30:25+02:00 4421f46
feat(ring_theory): submodules and quotients of Noetherian modules are Noetherian

2018-09-07 17:27:38+02:00 dce0e64
fix(algebra/big_operators): change name of `sum_eq_single` to `finset.sum_eq_single` (#321)

2018-09-07 11:42:25+02:00 4085ca1
feat(category_theory): add measurable space example

2018-09-07 11:42:25+02:00 c2a4cf9
feat(category_theory): lift morphism map proof to concrete categories

2018-09-07 11:42:25+02:00 93e9043
style(category_theory): concrete categories as type class

2018-09-07 11:42:25+02:00 5c48489
feat(category_theory): construction for a concrete category

2018-09-07 11:42:25+02:00 840a733
removing unnecessary class

2018-09-07 11:42:25+02:00 d91428c
feat(category_theory): the category of topological spaces, and of neighbourhoods of a point. also the category of commutative rings

2018-09-07 09:20:27+02:00 e95111d
fix(tactic/tidy): fix interactive tidy ignoring cfg

2018-09-06 15:59:41-04:00 77e104c
fix(tests/tactics): remove test
I don't think this test demonstrates reasonable/expected behavior of `wlog`, and it is not maintained by the modification, so I've removed it.

2018-09-06 15:39:55-04:00 ea61c21
fix(tactic/wlog): fix segfault

2018-09-06 20:28:13+02:00 3842244
fix(linear_algebra/subtype): simplify lifted operations by using projections instead of match

2018-09-06 01:04:28+02:00 f262a07
fix(linear_algebra/quotient_module): ring parameter for base ring of quotient module needs to be implicit, otherwise type class search loops

2018-09-05 23:46:03+02:00 e24f54e
fix(linear_algebra/prod): field is implicit parameter of the module / vector space product instances

2018-09-05 21:44:40+02:00 016f538
fix(algebra/module): add out_param to base field of vector spaces

2018-09-05 14:33:30+02:00 3a3249e
feat(data/finsupp): multiset_map_sum/_sum_sum/_index

2018-09-05 14:19:36+02:00 92b9a00
feat(data/finsupp): to_/of_multiset, curry/uncurry

2018-09-05 14:05:50+02:00 e105c9e
feat(data/multiset): add prod_map_add

2018-09-05 14:04:54+02:00 abd6ab5
refactor(data/prod): add map_fst, map_snd

2018-09-05 13:15:42+02:00 ac4f7b1
Revert "doc(docs/elan.md): Clarify instructions for leanpkg build"
This reverts commit 89e8cfee313b8bffe70362949577bd575cd09ea5.

2018-09-05 11:54:07+02:00 9ea38e1
feat(data/finset): option.to_finset

2018-09-05 11:53:36+02:00 2997ce6
feat(logic/embedding): embedding into option

2018-09-05 11:52:47+02:00 a2acc61
doc(docs/howto-contribute.md): fix broken links

2018-09-05 11:51:46+02:00 89e8cfe
doc(docs/elan.md): Clarify instructions for leanpkg build

2018-09-05 11:51:18+02:00 97cd01b
refactor(linear_algebra/quotient_module): avoid using type class inference for setoids (#310)
Continuation of #212 . Avoid using type class inference for quotient modules, and introduce a version of `quotient.mk` specifically for quotient modules, whose output type is `quotient β s` rather than `quotient (quotient_rel s)`, which should help type class inference.

2018-09-05 11:49:04+02:00 681c98f
feat(category_theory): full subcategories, preorders, Aut, and End

2018-09-05 09:08:50+02:00 600d3cf
cleanup(data/polynomial): shorten some proofs

2018-09-04 19:56:23+02:00 76de588
feat(data/polynomial): prove degree_derivative_eq

2018-09-04 10:43:33+02:00 eb20fd0
feat(data/polynomial): derivative on polynomials

2018-09-04 02:25:20-04:00 fd43fe0
fix(data/polynomial): fix proofs

2018-09-04 01:53:38-04:00 7a4125b
feat(algebra/field): field homs

2018-09-04 01:49:52-04:00 2dd78b8
feat(data/polynomial): add eval2 for univariate polys

2018-09-04 00:35:50-04:00 b8ea49b
fix(ring_theory/ufd): fix simpa uses

2018-09-03 18:31:34-04:00 4de119e
fix(*): fix simpa uses

2018-09-03 16:58:55-04:00 2021a1b
perf(tactic/ring): don't do any implicit unfolds

2018-09-03 16:58:38-04:00 1edb79a
refactor(ring_theory/associated): rename associated_elements

2018-09-03 16:58:38-04:00 956398c
refactor(tactic/interactive): improve error reporting for simpa
also make simpa fail on no goals or when applied where simp will work

2018-09-03 12:33:54+02:00 36dd78e
feat(category_theory): full and faithful functors, switching products
also the evaluation functor, and replace the ↝ arrow with ⥤, by request

2018-09-03 12:32:04+02:00 6ddc3fc
feat(data/finset): max_of_ne_empty, min_of_ne_empty

2018-09-03 01:27:28+02:00 7ee7614
feat(category_theory/isomorphisms): introduce isomorphisms (#278)
* refactor(category_theory): renaming `ulift` to `ulift_functor` to avoid name clashes
* feat(category_theory): introduce isomorphisms
* doc(category_theory): rewrite
* Resolving issues raised by Johannes
* moving heterogenous_identity.lean into isomorphism.lean
* remove unnecessary `obviously` replacement
* refactor(category_theory): using tidy in the category theory library

2018-09-03 00:10:15+02:00 0df6f77
style(linear_algebra/tensor_product): rename of -> tmul and ⊗ₛ -> ⊗ₜ; some cleanup in free_abelian_group

2018-09-02 23:49:36+02:00 40ef7a2
doc(ring_theory/unique_factorization_domain): add document strings

2018-09-02 16:35:13-04:00 b3afef5
perf(tactic/ring): fix long-running mk_app invocations

2018-09-02 20:50:34+02:00 dd0c0ae
feat(ring_theory): add unique factorization domain

2018-09-02 20:50:34+02:00 5f8fafc
feat(ring_theory): add associated elements

2018-09-02 20:07:13+02:00 059f937
feat(tactic): add linear arithmetic tactic (#301)
* feat(data/list, tactic): small helper functions
* feat(meta/rb_map): extra operations on native rb_maps
* feat(tactic/linarith): add tactic for solving linear arithmetic goals
* doc(tactic/linarith): add documentation and tests
* chore(tactic/linarith): add copyright
* feat(tactic/linarith): allow products of coefficients
* feat(tactic/linarith): cut off search early if contradiction is found
* feat(tests/linarith_tests): add test
* doc(doc/tactics): update doc
* feat(tactic/linarith): add config options
* feat(tactic/linarith): support equality goals
* chore(tactic/linarith): move non-tactic code out of tactic monad
* feat(tactic/linarith): support rational coefficients
* doc(tactic/linarith): update doc
* feat(tactic/linarith): fix obvious inefficiency in canceling denoms
* feat(tactic/linarith): efficiency improvements
* fix(tactic/linarith): remove unnecessary import and dead code
* fix(data/list/basic, meta/rb_map): shorter proofs

2018-09-02 19:58:41+02:00 8c19da7
feat(data/polynomial): has_repr for polynomials (#302)
Not sure if I should change this so that it will always return a string that will not cause any problems if copied and pasted into a lemma. It does this for rationals and integers, although for rationals, it returns something equal to the polynomial you would like, but probably not the polynomial you actually want, i.e. `(2 / 3 : polynomial ℚ)` more or less gives you `(C 2 / C 3)`, rather than `C (2 / 3)`. These expressions are def eq, but not in any reasonable amount of time as soon as the size gets slightly larger.

2018-09-02 19:54:22+02:00 2594f48
style(linear_algebra/tensor_product): renaming and changing some proofs

2018-09-02 19:54:22+02:00 4b5ad0e
feat(linear_algebra,group_theory): add tensor product and supporting material

2018-09-02 13:36:43-04:00 dd6b035
feat(data/option): add simp lemmas for orelse

2018-09-02 17:21:22 3de3cfb
feat(tactic/subtype_instance): generating subtype instances

2018-09-01 13:10:14+02:00 b7b05fb
style(ring_theory): rename PID to principal_ideal_domain

2018-08-31 17:48:25+02:00 20b4143
feat(algebra): add normalization and GCD domain; setup for int

2018-08-31 17:48:25+02:00 5df7cac
refactor(data/int/gcd): move int gcd proofs to the GCD theory

2018-08-31 17:48:25+02:00 a89f28e
feat(data/int/gcd): extended gcd to integers (#218)
Resurrected by @johoelzl. The original commit was not available anymore.

2018-08-31 14:44:58+02:00 ee9bf5c
feat(data/equiv): equiv_congr and perm_congr

2018-08-31 09:14:34+02:00 4068d00
feat(data/nat): simp rules for find_greatest

2018-08-31 01:45:14+02:00 2946088
feat(tactic/explode): line by line proof display for proof terms

2018-08-30 18:39:48+02:00 86c955e
feat(data/nat): find_greatest is always bounded

2018-08-30 17:30:19+02:00 c238aad
refactor(data/nat): simplify find_greatest; fix namespace nat.nat.find_greatest -> nat.find_greatest

2018-08-30 15:34:45+02:00 83edcc0
refactor(data/nat,int): separate int from nat, i.e. do not import any int theory in nat

2018-08-30 14:55:56+02:00 d245165
refactor(algebra): add more facts about units

2018-08-30 13:27:07+02:00 b4b05dd
feat(logic/basic): introduce pempty

2018-08-29 15:07:11+02:00 afd1c06
feat(algebra/group): is_add_group_hom

2018-08-29 14:48:07+02:00 b0aadaa
cleanup(analysis/bounded_linear_maps): some reorganization

2018-08-29 14:48:07+02:00 21a9355
feat(analysis/continuous_linear_maps)

2018-08-29 14:38:32+02:00 49f700c
feat(analysis/topology/uniform_space): prepare for completions (#297)

2018-08-29 02:55:13+02:00 0c11112
feat(logic/function): adds uncurry_def (#293)

2018-08-29 02:53:42+02:00 b82ba3c
feat(data/multiset): multisets are traversable using commutative, applicative functors (#220)

2018-08-29 02:46:53+02:00 3e38b73
feat(analysis/topology): density and continuity lemmas (#292)
Still from the perfectoid project

2018-08-29 02:45:15+02:00 4eca29f
doc(docs/howto-contribute.md): How to contribute to mathlib (#291)

2018-08-29 02:42:39+02:00 79bb95c
feat(analysis/topology, data/set): some zerology (#295)

2018-08-29 02:26:04+02:00 49fb2db
fix(docs/style): precise a style rule and fixes a github markdown issue (#290)

2018-08-29 00:28:03+02:00 bab3813
feat(ring_theory/PID): PIDs and xgcd for ED (#298)

2018-08-28 20:10:13+02:00 cd73115
refactor(data/set/basic): clean up #288 and #289

2018-08-28 20:09:53+02:00 8d3bd80
feat(tactic/tidy): add tidy tactic (#285)

2018-08-28 19:40:10+02:00 9ad32e7
feat(order/filter): More lemmas from perfectoid project (#289)

2018-08-28 19:38:58+02:00 3f65a93
fix(tactic/restate_axiom): change default naming in restate_axiom (#286)
* beginning renaming
* modifying names in restate_axiom
* removing ematch attributes from category_theory
* improving behaviour of `restate_axiom`, documenting and testing
* oops

2018-08-28 17:33:14+02:00 ed5a338
feat(data/set/basic): some more basic set lemmas (#288)

2018-08-28 15:08:37+02:00 39ffeab
feat(analysis): add normed spaces

2018-08-28 15:05:42+02:00 2b9c9a8
refactor(analysis): add nndist; add finite product of metric spaces; prepare for normed spaces

2018-08-28 15:05:42+02:00 41f5674
fix(algebra/pi_modules): pi instance for module shouldn't search for the ring structure

2018-08-28 14:39:03+02:00 5c221a3
feat(order/conditionally_complete_lattic): nat is a conditionally complete linear order with bottom

2018-08-28 10:22:25+02:00 de67f54
feat(data/real): cauchy sequence limit lemmas (#61)

2018-08-28 00:08:50+02:00 c420885
fix(tactic/interactive): try reflexivity after substs (#275)
This brings `substs` closer to being equivalent to a sequence of `subst`.

2018-08-28 00:06:47+02:00 bca8d49
chore(data/array, data/buffer): Array and buffer cleanup (#277)

2018-08-27 23:02:59+02:00 c52b317
refactor(data/finsupp): generalise finsupp.to_module (#284)

2018-08-27 16:48:59+02:00 9aa2bb0
feat(data/fin): last (#273)

2018-08-27 16:48:29+02:00 a3a9e24
bug(tactic/interactive): make `solve_by_elim` fail on no goals (#279)

2018-08-27 16:46:13+02:00 c13a771
feat(data/list): join_eq_nil, join_repeat_nil (#274)

2018-08-27 14:37:37+02:00 92e9d64
feat(category_theory): restating functor.map and nat_trans.app (#268)

2018-08-27 14:18:50+02:00 e955897
fix(travis.yml): adding a third stage to the travis build (#281)

2018-08-22 19:50:16+02:00 58cfe9f
bug(ext): failure on ext lemmas with no hypotheses (#269)

2018-08-22 19:48:06+02:00 d18a3a8
doc(docs/tactics): add information on congr' (#270) [ci-skip]

2018-08-22 19:46:57+02:00 0934d7d
refactor(data/nat/prime): mem_factors_iff_dvd (#272)

2018-08-22 19:37:12+02:00 974987c
refactor(data/nat/prime): cleanup exists_infinite_primes (#271)
* removing unnecessary initial step
* giving names to ambiguous copies of `this`

2018-08-21 22:05:08+02:00 b3fc801
refactor(data/real/nnreal): derive order structure for ennreal from with_top nnreal

2018-08-21 21:22:03+02:00 82512ee
refactor(analysis/ennreal): use canonically_ordered_comm_semiring (with_top α)

2018-08-21 21:22:03+02:00 6f31637
refactor(analysis/nnreal): split up into data.real and analysis part

2018-08-21 21:22:03+02:00 ca1b2d1
refactor(analysis/measure_theory/measurable_space): derive complete lattice structure from Galois insertion

2018-08-18 12:55:12+02:00 29ad1c8
feat(order/complete_lattice): add rewrite rules for Inf/Sup/infi/supr for pi and Prop

2018-08-18 12:55:12+02:00 202ac15
refactor(analysis/topology/topological_space): simplify proof of nhds_supr using Galois connection

2018-08-18 12:55:12+02:00 6cab92e
refactor(analysis/topology/topological_space): derive complete lattice structure from Galois insertion

2018-08-18 12:55:12+02:00 f9434fa
refactor(order/filter): derive complete lattice structure from Galois insertion

2018-08-18 12:55:12+02:00 a423cc7
refactor(order/filter): simplify filter structure

2018-08-18 12:55:12+02:00 849ed4f
feat(order/galois_connection): add Galois insertion and lattice lifts along a Galois insertion

2018-08-18 01:02:27-04:00 0ff11df
refactor(group_theory/order_of_element): use gpowers instead of range (#265)

2018-08-18 01:00:59-04:00 29508f2
doc(tactic/solve_by_elim): update doc (#266) [ci-skip]

2018-08-18 01:00:24-04:00 157004c
feat(data/list/basic): some more theorems about sublist (#264)

2018-08-18 00:57:52-04:00 dfc9f8e
chore(build): prune deleted .lean files and their .olean files

2018-08-18 00:55:17-04:00 cfb27cb
feat(category_theory): opposites, and the category of types (#249)

2018-08-16 11:32:39-04:00 12d103c
fix(padics/padic_norm): remove spurious import

2018-08-16 11:31:57-04:00 1bca59b
refactor(tactic/basic): simplify definition

2018-08-16 11:23:04-04:00 93817f1
feat(data/padics): p-adic numbers (#262)

2018-08-16 07:09:33-04:00 47a377d
refactor(group_theory/quotient_group): remove duplicate definition (#259)

2018-08-16 06:58:15-04:00 032e21d
feat(topological_structures): frontier_lt_subset_eq
Based on a suggestion by Luca Gerolla

2018-08-15 20:54:08-04:00 d468921
fix(tactic/basic): fix build

2018-08-15 20:47:08-04:00 bde2132
feat(category/traversable): derive traversable instances
Authors: Simon Hudon, Mario Carneiro

2018-08-15 20:29:33-04:00 d288f07
feat(docs/*): Docs theories (#251)
Authors: Patrick Massot, Kevin Buzzard, Chris Hughes, Scott Morrison

2018-08-15 20:25:34-04:00 5d791c6
feat(data/polynomial): nth_roots (#260)

2018-08-15 20:22:47-04:00 6e21c48
feat(data/multiset): count_filter

2018-08-15 18:43:52-04:00 46229d2
feat(data/multiset): filter_congr, filter_filter

2018-08-15 18:17:20-04:00 4c843f2
refactor(category/basic): move {list,option}.traverse to category.basic

2018-08-15 18:16:17-04:00 1aae37c
refactor(tactic/basic): move meta.expr to tactic.basic, cleanup

2018-08-15 18:14:01-04:00 0738d4e
feat(tactic/basic): environment.is_structure

2018-08-15 15:47:27-04:00 4a7103d
refactor(topology/uniform_space): proof simplification / extension

2018-08-15 10:16:37-04:00 b4dc0a5
feat(analysis/metric_space): Lebesgue number lemma for uniform spaces and metric spaces (#237)

2018-08-14 13:14:13-04:00 7c1d3b4
refactor(data/equiv/basic): simplify definition of `equiv.of_bijective`

2018-08-14 16:11:37+02:00 add16e9
feat(order): add order_dual (similar to with_top/with_bot) and dual order instances

2018-08-14 05:14:40-04:00 f81c764
doc(data/rat): todo [ci-skip]

2018-08-14 05:07:05-04:00 6359010
feat(data/list/perm): subperm_cons_diff and subset_cons_diff (#256)

2018-08-14 04:59:55-04:00 e53c2bb
perf(data/rat): add more extra typeclass instances

2018-08-14 01:44:16-04:00 638b7fd
feat(set_theory/cardinal): finite lower bound on cardinality

2018-08-14 01:42:29-04:00 9699f8d
feat(data/multiset): some more theorems about diagonal

2018-08-14 01:41:49-04:00 d016186
fix(tactic/norm_num): make norm_num only apply to current goal

2018-08-13 07:53:08-04:00 8692959
feat(data/list/basic): diff_sublist_of_sublist

2018-08-13 11:25:34+02:00 4bc2287
fix(.): fix up ext usages (c.f. 7cfc299fcdcae715dc0ac33cba0cd1aefa9777cd)

2018-08-13 03:50:00-04:00 89d71ad
fix(tactic/basic): make `try_intros` not fail given too few names

2018-08-13 03:05:01-04:00 9ea9324
fix(category/basic): change "try" to "mtry"

2018-08-13 02:53:31-04:00 7714632
fix(category/basic): fix build

2018-08-13 02:46:45-04:00 7cfc299
refactor(tactic/interactive): minor cleanup, change `ext` notation

2018-08-12 08:52:56-04:00 522d3ea
refactor(data/list/basic): simplify proof

2018-08-12 17:09:22+10:00 26ef0a0
feat(data/list/basic): diff_subset and mem_diff_of_mem

2018-08-11 03:59:51-04:00 6bf879d
fix(category_theory): consistent use of coercions, consistent naming (#248)

2018-08-10 14:02:33-04:00 e34fec8
fix(tests/examples): fix test

2018-08-10 12:44:38-04:00 57194fa
fix(tactic/wlog): fix issue causing segfault

2018-08-10 12:44:38-04:00 a679c98
refactor(data/multiset): shorten proof

2018-08-10 10:05:03-04:00 24aeeaf
feat(data/zmod): integers mod n (#159)

2018-08-10 09:44:20-04:00 e1312b4
feat(group_theory/perm): signatures of permutations (#231)

2018-08-10 09:14:19-04:00 251a8c3
feat(tactic/assoc_rewrite): new tactic for implicitly applying associativity before rewriting (#228)

2018-08-10 09:07:20-04:00 ff25083
feat(data/list/basic): nil_diff and diff_sublist (#235)

2018-08-10 09:06:41-04:00 26ef419
feat(data/fintype): fintype and decidable_eq for partial functions (#236)

2018-08-10 09:04:15-04:00 e2521c3
feat(data/set/finite): card_image_of_injective and other minor lemmas (#245)

2018-08-10 08:52:34-04:00 d400510
feat(data/nat/binomial): the binomial theorem (#214)

2018-08-10 08:50:52-04:00 54ce15b
refactor(ring_theory/ideals): avoid using type class inference for setoids in quotient rings and groups (#212)

2018-08-10 07:12:29-04:00 5b9914b
style(group_theory/quotient_group): code style

2018-08-10 07:05:33-04:00 d279ddb
feat(group_theory): adding basic theory of quotient groups

2018-08-10 07:04:00-04:00 0f42b27
feat(group_theory/submonoid,subgroup): merge with add_* versions

2018-08-10 07:04:00-04:00 1d5dd0d
feat(group_theory): adding add_subgroup and add_submonoid

2018-08-10 05:37:13-04:00 e1d92c2
fix(tactic/replacer): fix tests

2018-08-09 12:09:07-04:00 bf3dde1
refactor(set_theory/cardinal): remove noncomputable theory

2018-08-09 12:09:07-04:00 a995a3a
perf(tactic/replacer): use if instead of match

2018-08-09 12:06:27-04:00 55c2cfd
fix(docs/theories/integers): typo pointed out by Bryan Gin-ge Chen (#244)

2018-08-09 02:41:57-04:00 a52c240
doc(replacer): documentation and test (#243)

2018-08-08 14:39:58-04:00 a917810
refactor(tactic/interactive): merge rcases_hint -> rcases?

2018-08-08 10:51:30-04:00 8a19a98
feat(tactic/replacer): replaceable tactics

2018-08-08 06:57:37-04:00 732ec0e
feat(tactic/rcases): rcases_hint, rintro_hint

2018-08-08 00:44:37-04:00 fe7cd33
refactor(category_theory/products): tweak PR after merge

2018-08-08 00:32:10-04:00 02cf7a6
feat(category_theory): product categories and functor categories (#239)

2018-08-08 00:29:39-04:00 47a6a6f
fix(tactic/interactive): try_for should fail if the tactic fails

2018-08-08 00:29:39-04:00 417f29a
fix(linear_algebra/multivariate_polynomial): remove some @[simp]

2018-08-07 20:28:50-04:00 bd7f1b0
feat(data/fintype): injective_iff_surjective (#240)

2018-08-07 06:43:17-04:00 9b1be73
feat(category_theory): basic definitions (#152)
* feat(category_theory): basic definitions
* fixing formatting in documentation
* corrections from review
* removing second ematch attribute on associativity_lemma
* being slightly more careful about variables
(I don't think there were any actual errors,
but I was sometimes using an argument
when there was a variable of the same
name available.)
* fix(notation): transformation components
Using `@>` per @rwbarton's suggestion.
* fix(notation): more conventional notation for composition
* adjusting namespaces, capitalisation, and headers
* move functor/default.lean to functor.lean
(Later PRs will add more files to the functor/ directory, but that can wait.)
* oops
* fixing indentation
* namespace for instances
* removing unnecessary `@>` notation for natural transformations
* renaming, namespacing, and removing a spurious attribute
* better naming, namespaces, and coercions
* updating documentation
* renaming id
* reordering definitions
* rfl lemmas for has_one
* formatting
* formatting
* renaming: snake_case
* renaming coe rfl lemmas
* functoriality -> map_comp
* rfl lemmas for identity C and identity F (reducing both to `1`)
* renaming ext lemma to `ext`
* rename `natural_transformation` to `nat_trans`
* rename `make_lemma` to `restate_axiom`
* renaming nat_trans.components to nat_trans.app
* oops, fix import
* adding doc_comments, and `protected`
* formatting
* removing `has_one` instances, per zulip chat, and adding a `vcomp.assoc` lemma
* removing the attribute that `restate_axiom` used to add
(it was causing a problem on travis, but not locally? anyway it's useless)
* fixing names

2018-08-07 05:51:20-04:00 235129a
feat(linear_algebra/multivariate_polynomial): Add `_sub` and `_neg` lemmas, and make them simp. (#238)

2018-08-06 20:05:15-04:00 8dc0393
feat(data/multiset): adding two lemmas about singletons (#234)

2018-08-06 11:05:42-04:00 18bd614
feat(algebra/group_power): adding various cast power lemmas for nat and int (#230)

2018-08-06 06:43:02-04:00 cf0bf2a
fix(data/seq/wseq): fix build

2018-08-06 05:08:26-04:00 8d13bb9
feat(list/basic,multiset): list.revzip, multiset.diagonal

2018-08-05 22:52:53-04:00 e4b652f
refactor(data/real/basic): rename for consistency

2018-08-05 22:50:26-04:00 e7f1103
fix(topology/topological_structures): remove decidability assumption

2018-08-05 22:48:47-04:00 599df28
feat(linear_algebra/mv_polynomial): composition lemmas

2018-08-04 19:53:15-04:00 2d0eb8c
feat(linear_algebra/mv_polynomial): map function, map2

2018-08-04 18:47:15-04:00 1b93719
feat(algebra/ring): units.neg and associated matter

2018-08-04 18:43:51-04:00 e40bee5
feat(algebra/ring): semiring homs

2018-08-04 18:40:37-04:00 7ec5e87
feat(set_theory/lists): finite ZFA

2018-08-03 05:53:29-04:00 8731789
feat(data/vector2): vector.ext (#232)

2018-07-30 20:35:12+02:00 cecbf2b
doc(tactics/pi_instance): add description in `tactics.md` (#229)

2018-07-30 12:01:49+02:00 fed6c58
feat(algebra/euclidean_domain): change definition of ED and instance for polynomials (#211)

2018-07-30 11:48:54+02:00 08e0e1d
feat(category/traversable): instances for various collections (#217)

2018-07-30 11:27:47+02:00 7dc1f5d
feat(algebra/pi_instances): more automation (#222)

2018-07-30 11:06:42+02:00 fc88dd4
fix(tactic/split_ifs): do not process the same condition twice (#224)

2018-07-30 11:01:09+02:00 22d811d
chore(doc/style): mention how to handle ';'

2018-07-30 10:56:07+02:00 0371f6e
feat(data/equiv/basic): basic equiv lemmas and decidable_eq (#225)

2018-07-30 10:41:45+02:00 e67f2ad
chore(analysis/topology/uniform_space): remove redundant prod_uniformity (redundant to uniformity_prod)

2018-07-30 10:25:10+02:00 8d4f582
chore(data/list): add prod.erase; cleanup

2018-07-27 23:51:05-04:00 460df5e
feat(tactic/norm_num): add support for primality proving

2018-07-27 13:21:15-04:00 4d8ce7e
feat(data/fin): linear order and eta (#223)

2018-07-25 19:05:48+02:00 85bc75a
fix(data/list/basic): typo in pariwise_iff

2018-07-24 16:33:28+02:00 f9cf9d3
feat(category/traversable): basic classes for traversable collections

2018-07-24 05:15:31-04:00 8270475
doc(wip): finite map (#215) [ci-skip]

2018-07-23 20:06:20-04:00 6abb0d4
feat(algebra/pi_instances): more pi instances

2018-07-22 15:03:49-04:00 e74ff76
refactor(data/nat/gcd): simplify proof of pow_dvd_pow_iff

2018-07-22 14:37:11-04:00 ffb7229
feat(data/nat/gcd): dvd_of_pow_dvd_pow

2018-07-21 14:23:10-04:00 e429aac
fix(computability/turing_machine): missed a spot

2018-07-21 14:02:13-04:00 8bf72b2
chore(tactic/interactive): change swap so it does what it says
it is supposed to move the nth goal to the front, not rotate all the goals

2018-07-21 13:58:02-04:00 682025f
fix(*): fix build, use rw consistently

2018-07-21 12:10:36-04:00 e7321bb
fix(data/option): fix universe levels in option.map_some etc.

2018-07-21 02:09:53-04:00 fb952fe
refactor(analysis/ennreal): split and move to data.real

2018-07-20 01:17:21-04:00 23a5591
feat(tactic/h_generalize): remove `cast` expressions from goal (#198)

2018-07-19 15:34:44-04:00 29639b3
feat(analysis/measure_theory): optimize proofs; trim, is_complete

2018-07-19 10:10:59-04:00 bd90a93
fix(group_theory/group_action): move is_group_action out of namespace

2018-07-19 09:29:24-04:00 2b9780a
feat(data/finset): disjoint_val (#206)

2018-07-19 09:29:24-04:00 1e0c38b
feat(data/multiset): sup and inf for multisets

2018-07-19 06:54:38-04:00 50f18e6
feat(group_theory/group_action): group actions and orbit stabilizer (#204)

2018-07-19 03:56:30-04:00 9f79309
fix(data/multiset): fix build, cleanup mem_pi

2018-07-19 03:18:09-04:00 37f3e32
fix(algebra/big_operators): fix build

2018-07-19 02:36:49-04:00 aedbc12
feat(data/fintype): card lemmas (#168)

2018-07-19 00:25:14-04:00 c2f54ad
fix(tactic/refine_struct): fix support for source structures

2018-07-18 14:10:50+02:00 9a30235
chore(data/polynomial): move auxiliary definitions/theorems to appropriate places

2018-07-18 14:10:50+02:00 d9daeff
refactor(data/polynomial): move polynomials to data; replace monomial by `C a * X^n`

2018-07-18 14:10:50+02:00 ce990c5
feat(linear_algebra/univariate_polynomial): univariate polynomials

2018-07-17 22:43:01-04:00 a0dd286
fix(*): fix build

2018-07-17 18:00:59-04:00 7f8b088
feat(tactic/basic): fix environment.in_current_file

2018-07-17 17:16:55-04:00 980a01e
feat(ring_theory/ideals): quotient rings (#196)

2018-07-17 01:32:25-04:00 421a1cd
fix(measure_theory/measure_space): fix build

2018-07-17 00:35:02-04:00 f92d239
chore(travis.yml): checkout old files in both stages

2018-07-17 00:30:54-04:00 b267edc
refactor(data/set/countable): define countable in terms of encodable

2018-07-16 23:17:06-04:00 ee4ff47
chore(travis.yml): update lean files before pre-build

2018-07-16 22:13:58-04:00 95a3c47
fix(.): fix build

2018-07-16 20:46:11-04:00 bdc90f6
feat(data/set/basic): more set theorems, normalize naming

2018-07-16 20:17:22-04:00 9f6bcd0
refactor(data/bool): decidable forall bool

2018-07-16 20:16:24-04:00 8685bf2
refactor(topology/continuity): remove inhabited from dense extend

2018-07-16 20:03:13-04:00 57f07e0
refactor(data/set/basic): rename set.set_eq_def -> set.ext_iff

2018-07-16 19:52:54-04:00 4c6d7e2
feat(tactic/interactive): add apply_rules tactic (#190)

2018-07-16 19:44:31-04:00 6495c20
feat(algebra/order_functions): abs_eq

2018-07-16 19:42:41-04:00 b0de694
feat(tactic/tauto): improve coverage and performances of tauto (#180)

2018-07-16 19:40:28-04:00 c3e24f3
docs(code-review): add check list (#195) [ci-skip]

2018-07-16 19:39:17-04:00 3a79975
feat(data/quot): quot.hrec_on₂, quotient.hrec_on₂ (#197)

2018-07-16 19:34:21-04:00 dd6cc57
chore(build): make travis build fail quicker when errors are found

2018-07-16 19:33:09-04:00 631207b
feat(data/multiset,...): card_eq_one
based on #200

2018-07-16 19:25:02-04:00 ab8813a
feat(tactic/interactive): alias "rintros" for "rintro"

2018-07-16 15:11:29+01:00 df8fc18
feat(data/list/perm): extract cons_subperm_of_mem from subperm_of_subset_nodup (#173)

2018-07-16 14:06:55+02:00 20fca1c
feat(data/finset): disjoint finsets

2018-07-16 12:59:35+01:00 844c665
feat(category/applicative): `id` and `comp` functors; proofs by `norm` (#184)

2018-07-12 18:02:46-04:00 8dda9cd
fix(analysis/topology/continuity): remove an extraneous constraint

2018-07-12 18:00:11-04:00 42ba098
feat(data/set/basic): diff_subset_iff, diff_subset_comm

2018-07-12 17:59:05-04:00 17bf1ae
feat(analysis/topology/continuity): embedding_inl, embedding_inr

2018-07-12 08:42:03-04:00 21b918b
feat(data/fintype): decidable forall and exists (#189)

2018-07-11 21:00:56-04:00 b1a314f
chore(build): Break build process into two parts

2018-07-11 01:33:37-04:00 8d72f62
Revert "chore(build): Break build process into two parts"
This reverts commit 890847df6618c5559a4170c36d61bf693f57086d.

2018-07-11 00:08:43-04:00 890847d
chore(build): Break build process into two parts

2018-07-08 15:26:47-04:00 c8ad5cf
fix(computability/turing_machine): fix import

2018-07-08 14:39:57-04:00 e5d5abd
feat(data/pfun,...): add some isomorphism theorems

2018-07-07 02:03:44-04:00 71953e0
feat(order/basic): add extensionality for order structures

2018-07-06 09:04:17-04:00 ab1861a
feat(data/subtype): setoid (subtype p)

2018-07-06 09:04:17-04:00 d54950a
refactor(data/subtype): move out of data/sigma/basic.lean

2018-07-06 03:46:34-04:00 d194f38
refactor(tactic/rcases): use haveI in tactic.cache

2018-07-06 03:44:23-04:00 28e011d
feat(tactic/cache): split cache related tactics off from `tactic.interactive`

2018-07-06 03:44:23-04:00 06f4778
feat(tactic/tauto): handle `or` in goal

2018-07-06 02:31:12-04:00 b4a8548
feat(tactic/rcases): add rintro tactic

2018-07-04 13:08:30-04:00 a784602
feat(tactic/tauto): consider `true` and `false`

2018-07-02 18:50:42-04:00 a2e847d
fix(algebra/ordered_group): define (0:with_bot) to unfold correctly

2018-07-02 07:22:16-04:00 ff4eeed
feat(computability/turing_machine): reduce to 2-symbol TMs

2018-07-02 13:11:51+02:00 b5e07ad
fix(analysis/topology): prod.ext is now prod.ext_iff

2018-07-02 11:47:11+02:00 3f66b3a
feat(analysis/topology/continuity): generalized tube lemma and some corollaries

2018-07-02 11:47:11+02:00 225dd84
feat(data/set/lattice): add more lemmas pertaining to bInter, bUnion

2018-06-30 23:04:40-04:00 7b0c150
refactor(data/equiv): reorganize data.equiv deps

2018-06-30 00:43:36-04:00 913f702
feat(computability/turing_machine): rework proofs, simplify TM lang

2018-06-30 00:36:55-04:00 cfb5dfd
refactor(data/finset): use partial_order to define lattice structure

2018-06-30 00:36:27-04:00 ddbb813
feat(data/fintype): finite choices, computably

2018-06-25 20:05:43-04:00 a7b749f
fix(order/boolean_algebra): neg_unique: replace rsimp proof, speed up build

2018-06-25 05:45:48-04:00 97a1d1b
feat(data/fintype): more fintype instances (#145)

2018-06-25 05:43:26-04:00 90aeb8e
feat(tactic/solve_by_elim): writing a symm_apply tactic for solve_by_elim (#164)
writing a symm_apply tactic, and have solve_by_elim use it, per discussion with @SimonHudon

2018-06-25 05:42:30-04:00 a39c5ca
correcting comment

2018-06-25 05:41:01-04:00 0a13c05
feat(list/basic): map_subset
from #166

2018-06-25 05:35:22-04:00 4ec65f5
fix(data/list/basic): simplify last_append, speed up build

2018-06-25 05:29:11-04:00 516b254
feat(tactic/ring2): alternative ring tactic

2018-06-21 08:06:52-04:00 4082136
feat(tactic/refine_struct): match `{ .. }` in subexpressions (#162)

2018-06-21 08:05:27-04:00 aa55cba
fix(order/lattice): typo

2018-06-20 22:42:18-04:00 905345a
fix(data/array/lemmas,...): fix build

2018-06-20 21:42:57-04:00 a30b7c7
feat(data/string): fix string_lt, add repr for multiset, pnat

2018-06-19 14:32:22-04:00 fbe1047
feat(tactic/refine_struct): add `refine_struct` to use goal tags (#147)

2018-06-19 09:53:45-04:00 2216460
Merge branch 'master' of github.com:leanprover/mathlib

2018-06-19 08:25:55-04:00 f22285c
feat(algebra/pi_instances): add apply lemmas (#149)

2018-06-19 08:19:49-04:00 0a0e8a5
feat(tactic/ext): `ext` now applies to `prod`; fix `ext` on function types (#158)

2018-06-19 08:17:52-04:00 0087c2c
feat(analysis/topology): quotient spaces and quotient maps (#155)
* style(analysis/topology): simplify induced_mono and induced_sup
* style(analysis/topology/topological_space): reorganize section constructions
* feat(analysis/topology/topological_space): add more galois connection lemmas
* feat(analysis/topology): quotient spaces and quotient maps

2018-06-19 08:13:31-04:00 5e0b137
feat (group_theory/coset): quotient by normal subgroup is a group

2018-06-19 08:12:39-04:00 8609a3d
feat(split_ifs): fail if no progress (#153)

2018-06-19 08:11:25-04:00 f8e3965
blah

2018-06-19 08:09:27-04:00 4e2aea5
feat(data/option): is_some and is_none simp theorems

2018-06-19 08:08:36-04:00 e1f795d
chore(data/list/basic): minor cleanup of find variables (#137)

2018-06-17 10:20:07-04:00 896455c
feat(category): add functor_norm simp_attr, and class is_comm_applicative

2018-06-16 17:39:03-04:00 85bc56a
feat(computability/turing_machine): finish stack machine proof

2018-06-15 05:11:08+07:00 fba4d89
fix(analysis/topology/continuity): remove unused code

2018-06-13 01:28:56+07:00 fe590ca
fix(data/num/lemmas): fix formatting

2018-06-13 00:32:23+07:00 4f32a4b
feat(data/num/basic): to_nat' function for efficient nat -> num in VM

2018-06-12 22:37:08+07:00 99101ea
feat(data/num/basic): add div,mod,gcd for num,znum

2018-06-12 22:37:08+07:00 3c554a3
refactor(data/equiv): move subtype.map

2018-06-12 22:37:08+07:00 0865bce
fix(tactic/ring): fix normalization bugs
fixes #84

2018-06-11 14:05:37+07:00 90fc912
feat(data/list): add parametricity for perm

2018-06-11 14:05:37+07:00 9546e62
feat(data/list): add parametricity rules for list operations

2018-06-11 14:05:09+07:00 1416ebb
feat(data/option): add relator option.rel

2018-06-11 14:04:44+07:00 205e3b4
feat(logic/relation): add relation composition, map, and bi_unique

2018-06-02 10:36:21-04:00 344192a
refactor(computability): move out of data directory

2018-06-02 10:36:16-04:00 5603595
feat(computability/turing_machine): proving the TM reductions

2018-06-01 22:49:29-04:00 dd1c558
feat(algebra/ordered_group): with_bot as an ordered monoid

2018-06-01 22:48:49-04:00 372bdab
feat(algebra/archimedean): some more floor thms

2018-05-31 03:00:24-04:00 b375264
feat(computability/turing_machine): add TMs and reductions

2018-05-30 15:29:43-04:00 bdd54ac
feat(data/computablility): reduced partrec

2018-05-29 18:57:49-04:00 00a2eb4
feat(algebra/group_power): mul_two_nonneg

2018-05-29 17:20:24-04:00 40bd947
feat(computability/primrec): add traditional primrec definition
This shows that the pairing function with its square roots does not give any additional power.

2018-05-29 17:20:24-04:00 5fea16e
feat(category/basic): $< notation for reversed application

2018-05-29 15:48:54+02:00 a2d2537
feat(analysis/probability_mass_function): add bernoulli

2018-05-29 15:08:43+02:00 4f9e951
feat(analysis): add probability mass functions

2018-05-29 04:19:54-04:00 eaa1b93
feat(data.list.basic): forall_mem_singleton, forall_mem_append

2018-05-29 03:47:46-04:00 a6be523
feat(data/list/basic): map_erase, map_diff, map_union

2018-05-28 15:36:19+02:00 0022068
fix(tactics/wlog): allow union instead of disjunction; assume disjunction in strict associcated order; fix discharger

2018-05-28 14:30:41+02:00 1dbd8c6
feat(data/equiv): image, preimage under equivalences; simp rules for perm.val  (#102)

2018-05-27 22:50:42-04:00 c53f9f1
refactor(algebra/euclidean_domain): clean up proofs

2018-05-27 19:47:56-04:00 9f0d1d8
fix(analysis/limits): fix ambiguous import (fin)set.range

2018-05-27 18:15:30-04:00 ad92a9b
feat(algebra/group,...): add with_zero, with_one structures
other ways to add an element to an algebraic structure:
* Add a top or bottom to an order (with_top, with_bot)
* add a unit to a semigroup (with_zero, with_one)
* add a zero to a multiplicative semigroup (with_zero)
* add an infinite element to an additive semigroup (with_top)

2018-05-27 18:15:30-04:00 431d997
feat(nat/basic): mod_mod

2018-05-27 18:15:30-04:00 4c1a826
refactor(data/set/finite): use hypotheses for fintype assumptions
in simp rules

2018-05-27 18:15:30-04:00 f563ac8
chore(data/pnat): remove nat -> pnat coercion

2018-05-27 18:15:30-04:00 b7012fb
fix(tactic/norm_num): use norm_num to discharge simp goals

2018-05-25 16:15:06+02:00 6811f13
fix(data/list/perm): remove unused code (#143)

2018-05-25 05:57:39-04:00 bcec475
chore(leanpkg.toml): update version to 3.4.1

2018-05-25 05:55:41-04:00 1991869
feat(order/bounded_lattice): with_bot, with_top structures

2018-05-25 01:14:13-04:00 94dc067
refactor(order/lattice): move top/bot to bounded_lattice

2018-05-25 01:14:13-04:00 4117ff4
refactor(algebra/order_functions): reorganize new lemmas

2018-05-24 15:55:26+02:00 9303bc0
feat(analysis/ennreal): add further type class instances for nonnegative reals

2018-05-24 15:55:26+02:00 02f8f48
feat(analysis/nnreal): define the nonnegative reals
NB: This file has a lot in common with `ennreal.lean`, the extended nonnegative reals.

2018-05-24 09:39:41+02:00 2c94668
fix(data/fin): rename raise_fin -> fin.raise; simp lemmas for fin (#138)

2018-05-23 19:20:55+02:00 d91a267
fix(data/list/basic): protected list.sigma (#140)

2018-05-23 19:20:25+02:00 94a4b07
doc(docs/extras): some notes on well founded recursion (#127)

2018-05-23 19:16:42+02:00 23bd3f2
doc(docs/extra/simp): adding reference to simpa (#106)

2018-05-23 18:54:35+02:00 add172d
chore(tactic/default): move split_ifs import to tactic.interactive

2018-05-23 18:54:35+02:00 d442907
fix(tactic/split_if): clarify behavior

2018-05-23 18:54:35+02:00 509934f
feat(tactic/split_ifs): add if-splitter

2018-05-23 17:29:32+02:00 f458eef
feat(analysis/topology): add tendsto and continuity rules for big operators

2018-05-23 17:17:56+02:00 a54be05
feat(analysis/topology): add continuity rules for supr, Sup, and pi spaces

2018-05-23 15:22:09+02:00 cff886b
feat(data/finset): max and min

2018-05-23 15:22:09+02:00 d1ea272
feat(data/option): lift_or_get

2018-05-22 05:26:41-04:00 d62bf56
feat(computability/halting): halting problem

2018-05-21 11:44:37-04:00 f0bcba5
feat(computability/partrec_code): Kleene normal form theorem
among other things

2018-05-21 11:41:40-04:00 fe5c86c
fix(tactic/interactive): fix congr bug, rename congr_n to congr'

2018-05-20 06:37:12-04:00 741469a
fix(tactic/interactive): make rcases handle nested constructors correctly
The line changed by this commit was wrong because `k` might contain
further constructors, which also need to be "inverted".
Fixes #56.
* doc(tactic): Internal documentation for rcases
* style(tactic/rcases): eliminate an unused recursive parameter
* style(*): use rcases more

2018-05-19 21:28:26-04:00 fc20442
feat(computability/partrec): partial recursion, Godel numbering

2018-05-18 05:14:19-04:00 38d5536
feat(computability/partrec): starting work on partial recursive funcs

2018-05-18 05:10:04-04:00 92feaf9
feat(computability/primrec): list definitions are primrec

2018-05-17 04:23:08-04:00 e017f0f
feat(data/computability): primrec, denumerable

2018-05-16 10:16:22+02:00 fe7d573
refactor(data/set/enumerate): proof enumeration_inj using wlog

2018-05-16 10:16:22+02:00 d8c33e8
feat(tactic): generalize wlog to support multiple variables and cases, allow to provide case rule

2018-05-10 15:29:47+02:00 2cd640a
feat(data/multiset): add sections

2018-05-10 15:29:29+02:00 62833ca
feat(data/multiset): add relator

2018-05-10 12:12:25+02:00 d10c3bb
fix(order/complete_boolean_algebra): replace finish proof by simp (finish was very slow)

2018-05-09 06:19:46-04:00 fc6f57a
feat(data/list/basic): list.forall2, list.sections

2018-05-09 06:04:38-04:00 42f5ea0
feat(data/semiquot): semiquotient types

2018-05-09 06:04:38-04:00 b31c30d
refactor(logic/function): constructive proof of cantor_injective

2018-05-09 11:41:31+02:00 54df4d9
feat(linear_algebra/multivariate_polynomial): change order of eval arguments; show that eval is ring homomorphism
(closes https://github.com/leanprover/mathlib/pull/134)

2018-05-09 10:46:03+02:00 b5eddd8
fix(data/set/basic): mark subset.refl as @[refl]

2018-05-04 16:10:27+02:00 e4c64fd
feat(tactic/mk_iff_of_inductive_prop): add tactic to represent inductives using logical connectives

2018-05-03 13:46:52-04:00 fa7a180
feat(tactic/solve_by_elim): make solve_by_elim easier to use correctly (#131)

2018-05-03 14:41:35+02:00 ef43edf
feat(data/finset): add list.to_finset theorems

2018-05-03 11:23:10+02:00 02c2b56
feat(analysis/topology/topological_space): t2 instances for constructions of limit type

2018-04-29 01:27:12-04:00 a97101d
fix(docs/naming): use names in use (#122)

2018-04-26 18:29:10+02:00 48485a2
refactor(logic/relation,group_theory/free_group): add theory for reflextive/transitive relations & use them for the free group reduction

2018-04-25 14:35:58+02:00 5df2ee7
style(group_theory): move free_group from algebra to group_theory

2018-04-25 14:28:21+02:00 716decc
feat(algebra): add free groups (#89)

2018-04-25 13:44:07+02:00 e6264eb
feat(order/conditionally_complete_lattice): add instance complete_linear_order -> conditionally_complete_linear_order; add cSup/cInf_interval

2018-04-25 13:06:49+02:00 bf04127
feat(order): add liminf and limsup over filters (c.f. Sébastien Gouëzel's #115)

2018-04-24 22:18:49-04:00 78d28c5
fix(*): update to lean

2018-04-24 21:11:29-04:00 44271cf
feat(tactic/interactive): add `clean` tactic
for removing identity junk and annotations added to terms by common tactics like dsimp

2018-04-24 20:17:52-04:00 e4c09d4
feat(analysis/topology/topological_space): a finite union of compact sets is compact (#117)

2018-04-24 20:16:10-04:00 e4e4659
feat(tactic/generalize_hyp): a version of `generalize` that also applies to assumptions (#110)

2018-04-24 17:00:19-04:00 f87135b
feat(algebra/pi_instances): Adds pi instances for common algebraic structures

2018-04-24 15:57:06-04:00 3b73ea1
feat(tactic/convert): tactic similar to `refine` (#116)
... but which generates equality proof obligations for every discrepancy between the goal and
the type of the rule

2018-04-24 14:30:20-04:00 7dcd6f5
feat(tactic/interactive): adding a discharger argument to solve_by_elim (#108)

2018-04-24 14:26:32-04:00 009968e
feat(docs/tactic): document congr_n and unfold_coes (#105)

2018-04-24 14:25:48-04:00 44391c9
doc(docs/elan.md): a short setup guide
A short guide on getting started with Lean, mathlib and elan.
Adds a link to docs/elan.md in README.md

2018-04-24 14:24:59-04:00 23c07fd
feat(docs/extras/cc) Documents the cc tactic
From explanations and experiments by Simon, Gabriel and Kenny at
https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/cc.20is.20so.20powerful

2018-04-24 14:22:35-04:00 e2c7421
feat(tactic/ext): new `ext` tactic and corresponding `extensionality` attribute

2018-04-24 14:15:55-04:00 d862939
fix(tactic/wlog): in the proof of completeness, useful assumptions were not visible

2018-04-19 08:49:27-04:00 c13c5ea
fix(ordinal): fix looping simp

2018-04-19 07:58:36-04:00 2d935cb
refactor(lebesgue_measure): clean up proofs

2018-04-19 04:40:28-04:00 7d1ab38
feat(list/basic,...): minor modifications & additions
based on Zulip conversations and requests

2018-04-17 21:08:42-04:00 ed09867
feat(data/list/basic): prefix_or_prefix

2018-04-17 01:53:53-04:00 d9daa10
chore(group_theory): fixups

2018-04-16 19:39:05-04:00 4f42fbf
feat(data/option): more option stuff

2018-04-16 19:01:44-04:00 d5c73c0
chore(*): trailing spaces

2018-04-16 19:00:13-04:00 b7db508
feat(analysis/topology/topological_space): basis elements are open

2018-04-16 19:00:13-04:00 6dd2bc0
feat(data/option): more option decidability

2018-04-16 20:29:17+02:00 f2361dc
fix(group_theory/coset): left_cosets.left_cosets -> left_cosets.eq_class_eq_left_coset is now a theorem

2018-04-16 20:09:50+02:00 910de7e
refactor(group_theory/coset): left_cosets is now a quotient (#103)

2018-04-15 17:58:13+02:00 479a122
doc(doc): add topological space doc (#101)

2018-04-15 17:41:57+02:00 c34f202
Adding some notes on calc

2018-04-15 17:39:03+02:00 21d5618
feat(docs/styles): Some more indentation guidelines (#95)
Fixed also a typo pointed out by Scott

2018-04-15 17:36:59+02:00 f1179bd
feat(algebra/big_operators): update prod_bij_ne_one (#100)

2018-04-13 19:25:49+02:00 5605233
feat(algebra/big_operators): add prod_sum (equating the product over a sum to the sum of all combinations)

2018-04-11 17:11:19+02:00 f1e46e1
fix(.travis.yml): fix some elan

2018-04-11 16:41:07+02:00 b13f404
chore(.travis.yml): show some elan

2018-04-11 15:17:30+02:00 5f360e3
feat(group_theory): add group.closure, the subgroup generated by a set

2018-04-11 14:49:46+02:00 fea2491
chore(group_theory): move order_of into its own file; base costes on left_coset

2018-04-11 13:50:33+02:00 d2ab199
chore(group_theory): simplify proofs; generalize some theorems

2018-04-11 10:25:21+02:00 ea0fb11
style(group_theory): try to follow conventions (calc indentation, lowercase names, ...)

2018-04-11 10:24:33+02:00 fa86d34
feat(group_theory): add left/right cosets and normal subgroups

2018-04-10 14:38:56+02:00 f85330a
feat(group_theory/submonoid): relate monoid closure to list product

2018-04-10 13:58:37+02:00 4a15503
refactor(ring_theory): unify monoid closure in ring theory with the one in group theory

2018-04-10 13:13:52+02:00 ec18563
feat(group_theory): add subtype instanes for group and monoid; monoid closure

2018-04-10 13:02:43+02:00 88960f0
refactor(algebra): move is_submonoid to group_theory and base is_subgroup on is_submonoid

2018-04-09 14:39:12-04:00 bd0a555
fix(algebra/group_power): remove has_smul
This was causing notation overload problems with module smul

2018-04-09 11:32:20+02:00 b02733d
fix(data/finset): change argument order of finset.induction(_on) so that the induction tactic accepts them

2018-04-09 10:30:13+02:00 018cfdd
feat(linear_algebra/multivariate_polynomial): make theory computational

2018-04-08 01:00:54-04:00 2bd5e21
feat(data/int/modeq): Modular arithmetic for integers

2018-04-08 00:45:25-04:00 6815830
chore(measure_theory/measure_space): add coe_fn instance

2018-04-08 00:35:55-04:00 03d5bd9
fix(*): update to lean

2018-04-07 22:38:50-04:00 e9b9014
feat(data/erased): VM-erased data type

2018-04-05 01:29:34-04:00 22e671c
fix(travis.yml): fix travis setup for new nightlies

2018-04-05 01:05:02-04:00 81264ec
fix(leanpkg.toml): remove lean_version
I will keep marking the nightly version here, but I will leave it commented out until I can figure out how to make travis work with it

2018-04-05 00:59:52-04:00 08f19fd
chore(data/nat/prime): style and minor modifications

2018-04-05 00:35:23-04:00 efa4f92
feat(data/nat/prime): lemmas about nat.factors

2018-04-05 00:22:45-04:00 2d370e9
feat(algebra/euclidean_domain): euclidean domains / euclidean algorithm

2018-04-05 00:16:34-04:00 467f60f
feat(data/nat/basic): add div_le_div_right
Based on #91 by @MonoidMusician

2018-04-05 00:13:56-04:00 47f1384
doc(docs/extras): Adding notes on simp

2018-04-05 00:12:09-04:00 73d481a
adding explanation of "change"

2018-04-05 00:07:53-04:00 c87f1e6
fix(*): finish lean update

2018-04-03 21:23:26-04:00 5717986
fix(*): update to lean
also add mathlib nightly version to leanpkg.toml

2018-04-01 22:10:37-04:00 777f6b4
feat(data/set/basic): add some more set lemmas

2018-04-01 21:30:17-04:00 d80ca59
feat(data/fin): add fz/fs recursor for fin

2018-03-30 14:05:43+02:00 162edc3
feat(order): add complete lattice of fixed points (Knaster-Tarski) by Kenny Lau https://github.com/leanprover/mathlib/pull/88

2018-03-29 17:23:46+02:00 c54d431
fix(.): unit is now an abbreviation: unit := punit.{1}

2018-03-25 19:59:40-04:00 d84af03
fix(data/option): revert to lean commit 28f414

2018-03-22 14:08:02+01:00 e5c1c5e
fix(number_theory/dipoh): has_map.map -> functor.map

2018-03-22 11:27:24+01:00 a357b79
feat(analysis): measurable_if

2018-03-21 19:31:04-04:00 868bbc6
fix(*): update to lean

2018-03-21 19:31:04-04:00 638265c
fix(set_theory/zfc): improve pSet.equiv.eq
I claimed in the comment that this converse was not provable, but it is (because equiv is embedded in the definition of mem). Thanks to Vinoth Kumar Raman for bringing this to my attention.

2018-03-21 19:31:04-04:00 f3660df
chore(logic/basic): protect classical logic theorems
You can't use these theorems with `open classical` anyway, because of disambiguation with the `_root_` theorems of the same name.

2018-03-21 18:56:23-04:00 486e4ed
fix(test suite): remove `sorry` warning in test suite

2018-03-15 00:57:20-04:00 f7977ff
feat(data/finset): add finset.powerset

2018-03-13 05:57:49-04:00 4ceb545
feat(data/list/basic): stuff about `list.sublists`

2018-03-12 20:45:43+01:00 5f8c26c
feat(analysis/measure_theory): measures are embedded in outer measures; add map, dirac, and sum measures

2018-03-12 17:09:31+01:00 36a061b
feat(analysis/measure_theory): outer_measures form a complete lattice

2018-03-11 14:26:05+01:00 64a8d56
chore(order/filter): simplify definition of filter.prod; cleanup

2018-03-10 20:37:53+01:00 b154092
feat(data/finsupp): make finsupp computable; add induction rule; removed comap_domain

2018-03-10 13:38:59+01:00 b97b7c3
feat(group_theory): add a little bit of group theory; prove of Lagrange's theorem

2018-03-10 12:39:38+01:00 d010717
chore(linear_algebra): flatten hierarchy, move algebra/linear_algebra to linear_algebra

2018-03-09 15:55:09+01:00 d78c8ea
chore(ring_theory): cleaned up ideals

2018-03-09 14:39:42+01:00 06c54b3
chore(ring_theory): introduce r_of_eq for localization

2018-03-09 14:39:42+01:00 e658d36
chore(ring_theory): fix indentation

2018-03-08 16:21:02+01:00 a6960f5
chore(ring_theory): add copyright headers

2018-03-08 13:57:16+01:00 fe0f2a3
fix(analysis/topology/topological_structures): remove unnecessary hypothesis

2018-03-08 11:45:04+01:00 a7d8c5f
feat(tactic): add `wlog` (without loss of generality), `tauto`, `auto` and `xassumption`
* `tauto`: for simple tautologies;
* `auto`: discharging the goals that follow directly from a few assumption applications;
* `xassumption`: similar to `assumption` but matches against the head of assumptions instead of the whole thing

2018-03-08 11:25:28+01:00 c852939
feat(ring_theory): move localization

2018-03-08 10:42:28+01:00 0b81b24
feat(analysis/topological_structures): add tendsto_of_tendsto_of_tendsto_of_le_of_le

2018-03-08 09:55:42+01:00 353c494
fix(docs): more converter -> conversion

2018-03-08 09:51:03+01:00 fa25539
feat(docs/extras/conv): Documents conv mode (#73)

2018-03-07 13:47:04+01:00 22237f4
feat(data/fintype): pi is closed under fintype & decidable_eq

2018-03-07 13:47:00+01:00 e6afbf5
feat(data/finset): add Cartesian product over dependent functions

2018-03-07 13:46:54+01:00 10cf239
feat(data/multiset): add Cartesian product over dependent functions

2018-03-07 13:46:54+01:00 be4a35f
feat(data/multiset): add dependent recursor for multisets

2018-03-07 13:46:39+01:00 eef3a4d
feat(data/multiset): add map_hcongr, bind_hcongr, bind_bind, attach_zero, and attach_cons

2018-03-07 13:46:39+01:00 bbd0203
feat(data/multiset): decidable equality for functions whose domain is bounded by multisets

2018-03-07 13:46:32+01:00 dc8c35f
feat(logic/function): add hfunext and funext_iff

2018-03-06 16:12:46-05:00 33be7dc
doc(docs/theories): Description of other set-like types
From #75

2018-03-05 21:58:36+01:00 65cab91
doc(order/filter): add documentation for `filter_upward`

2018-03-05 18:18:38+01:00 5193194
feat(order/filter): reorder filter theory; add filter_upwards tactic

2018-03-05 17:55:59+01:00 0487a32
chore(*): cleanup

2018-03-05 16:11:22+01:00 ec9dac3
chore(*): update to Lean d6d44a19

2018-02-26 19:33:33-05:00 f98626c
chore(.travis.yml): add notification hook

2018-02-25 08:41:54-05:00 8f680d0
fix(docs/tactics): update instance cache tactics doc (#70)

2018-02-25 05:09:48-05:00 14e10bb
fix(*): update to lean

2018-02-25 00:08:30-05:00 c88a9e6
doc(docs/tactics): Document the find command (#67)

2018-02-22 19:42:03-05:00 1630725
feat(data/finset): insert_union_distrib (#66)
* chore(data/finset): match style guide
* feat(data/finset): insert_union_distrib

2018-02-22 15:14:26-05:00 49b196c
feat(data/multiset): erase_lt

2018-02-22 14:08:57-05:00 d68c8ae
feat(set_theory/cardinal): some missing power theorems

2018-02-21 20:14:45-05:00 22a52c3
fix(tactic/find): update to lean

2018-02-21 04:29:29-05:00 8ae1cef
feat(tactic/find): add @Kha's #find command

2018-02-20 22:14:23-05:00 e2a562a
refactor(analysis/topology): simplify is_topological_basis_of_open_of_nhds

2018-02-20 22:12:18-05:00 ebcbb6b
doc(.): MD documentation (#58)

2018-02-20 15:36:49+01:00 140c672
feat(algebra/order_functions): add abs_le_max_abs_abs; and relations between mul and max / min (suggested by @PatrickMassot)

2018-02-20 15:22:36+01:00 3e683f4
chore(algebra,order): cleanup min / max using the lattice theory

2018-02-20 10:43:29+01:00 504a2dc
Create choose.lean (#48)
deat(data/nat): add choose function to compute the binomial coefficients

2018-02-19 11:00:25+01:00 3c25d94
feat(algebra/archimedean): pow_unbounded_of_gt_one (#50)

2018-02-19 10:55:46+01:00 500dcc9
feat(analysis/metric_space): add tendsto_iff_dist_tendsto_zero

2018-02-19 10:38:12+01:00 3ef7c7d
fix(analysis/metric_space): remove unnecessary topological_space assumption from tendsto_dist

2018-02-18 00:16:10-05:00 9b306b2
feat(option.to_list)

2018-02-15 11:21:33+01:00 ff4af0d
feat(data/list): add append_eq_nil and update_nth_eq_nil

2018-02-15 10:43:12+01:00 c0153c1
feat(data/multiset): add smielattie_sup_bot instance; add disjoint_union_left/_right

2018-02-15 09:34:21+01:00 8741b64
feat(algebra/group_power): add pow_inv and pow_abs

2018-02-14 13:33:17+01:00 eb32bfb
feat(data/multiset): disjoint_ndinsert theorems

2018-02-12 07:11:07-05:00 6ff5f3e
feat(data/equiv): generalize list_equiv_of_equiv over universes (#52)

2018-02-08 22:50:08-05:00 5dd3419
feat(order/conditionally_complete_lattice): Conditionally complete lattices

2018-02-08 22:39:23-05:00 6ef721e
feat(data/finset): not_mem theorems
Adapted from #44

2018-02-06 17:03:30-05:00 14a19bf
fix(*): update to lean
Adding typeclasses to the context must now be done with `haveI`, `introsI`, etc.

2018-02-05 01:47:42-05:00 5da3eb0
Fix universe parameter in permutation group

2018-02-05 01:47:42-05:00 cb4449f
Permutation group instance for any type

2018-02-01 22:14:26-05:00 03fefd4
Create localization.lean

2018-02-01 19:43:27-05:00 e0539dd
fix(data/hash_map,...): update to lean

2018-01-26 03:15:01-05:00 edd62de
fix(set_theory/zfc): update to lean

2018-01-26 02:52:13-05:00 f46d32b
feat(algebra/archimedean): generalize real thms to archimedean fields

2018-01-25 01:34:48-05:00 0e42187
fix(algebra/module): fix module typeclass resolution
Before this change, any looping typeclass instance on `ring` (like `ring A -> ring (f A)`) would cause unrelated typeclass problems such as `has_add B` to search for `module ?M B` and then `ring ?M`, leading to an infinite number of applications of the looping ring instance. leanprover/lean#1881 promises to fix this, but until then here is a workaround.

2018-01-24 14:25:32-05:00 7fba1af
fix(analysis/metric_space): remove superfluous typeclass assumptions

2018-01-23 03:30:58-05:00 acb9093
feat(analysis/complex): complex numbers are a top ring

2018-01-23 03:07:52-05:00 65c5cb9
refactor(data/real): generalize cau_seq to arbitrary metrics
the intent is to use this also for the complex numbers

2018-01-23 00:14:20-05:00 5fe8fbf
feat(data/complex): properties of the complex absolute value function

2018-01-21 23:57:42-05:00 5a65212
feat(data/real): real square root function, sqrt 2 is irrational

2018-01-20 21:28:43-05:00 ffafdc6
feat(tactic/ring): extend ring tactic to allow division by constants

2018-01-20 17:03:57-05:00 bcbf0d5
refactor(data/complex): clean up proofs

2018-01-19 17:05:43-05:00 baa4b09
feat(analysis/real): swap out the definition of real, shorten proofs

2018-01-19 16:18:40-05:00 bb1a9f2
feat(data/real,*): supporting material for metric spaces

2018-01-17 17:53:52-05:00 0ac694c
fix(tactic/interactive): update to lean

2018-01-16 16:08:50-05:00 e11da6e
feat(data/real): variants on archimedean property

2018-01-16 05:29:44-05:00 d84dfb1
feat(data/real): completeness of the (new) real numbers

2018-01-15 07:59:59-05:00 04cac95
feat(data/real): reals from first principles
This is beginning work on a simpler implementation of real numbers, based on Cauchy sequences, to help alleviate some of the issues we have seen with loading times and timeouts when working with real numbers. If everything goes according to plan, `analysis/real.lean` will be the development for the topology of the reals, but the initial construction will have no topology prerequisites.

2018-01-14 21:59:50-05:00 65db966
feat(algebra/field): more division lemmas

2018-01-14 17:36:13-05:00 0d6d12a
feat(tactic/interactive): replace tactic

2018-01-14 01:53:04-05:00 edde6f5
feat(tactic/ring): use `ring` for rewriting into pretty print format

2018-01-13 19:43:41-05:00 c75b072
fix(*): update to lean

2018-01-13 10:22:46-05:00 df7175f
fix(tactic/ring): bugfix

2018-01-13 04:32:47-05:00 341fd51
fix(tactic/ring): bugfix

2018-01-13 03:25:35-05:00 2e2d89b
feat(tactic/ring): tactic for ring equality

2018-01-12 13:08:48-05:00 c39b43f
feat(analysis/metric_space): sup metric for product of metric spaces

2018-01-11 23:22:32-05:00 1dddcf6
doc(*): blurbs galore
Document all `def`, `class`, and `inductive` that are reasonably public-facing

2018-01-11 16:26:08-05:00 2ffd72c
refactor(order/basic): remove "increasing/decreasing" unusual defs

2018-01-11 16:21:21-05:00 09e0899
fix(analysis/ennreal): fix long-running proofs

2018-01-11 12:23:27-05:00 7fd7ea8
fix(analysis/real): more irreducible

2018-01-11 06:57:19-05:00 27920e9
fix(data/list/basic,...): update to lean

2018-01-10 03:03:39-05:00 dc28573
fix(number_theory/pell,...): update to lean

2018-01-07 14:32:08-05:00 5ff51dc
feat(analysis/complex): complex numbers as a field

2018-01-06 18:57:25-05:00 182c303
feat(set_theory/cofinality): regular/inaccessible cards, Konig's theorem, next fixpoint function

2018-01-06 00:50:12+01:00 4f7835e
feat(analysis): add default setup for uniform space of metric space

2018-01-04 09:05:50-05:00 0b7b912
feat(set_theory/ordinal_notation): correctness of ordinal power

2018-01-04 09:05:02-05:00 3f2435e
refactor(algebra/group): clean up PR commit

2018-01-02 16:52:49-05:00 12bd22b
Group morphisms (#30)
* feat(algebra/group): morphisms and antimorphisms
Definitions, image of one and inverses,
and computation on a product of more than two elements in big_operators.

2018-01-02 04:28:01-05:00 37c3120
feat(set_theory/ordinal_notation): ordinal notations for ordinals < e0
This allows us to compute with small countable ordinals using trees of nats.

2017-12-31 16:53:38-05:00 1bc2ac7
feat(data/ordinal): is_normal, omin, power/log, CNF, indecomposables,
addition and multiplication of infinite cardinals

2017-12-23 10:06:18-05:00 0abe086
feat(data/ordinal): mul, div, mod, dvd, sub, power

2017-12-21 06:51:34-05:00 5f4d890
feat(data/ordinal): omega is least limit ordinal

2017-12-20 23:25:17-05:00 49a63b7
refactor(data/ordinal): rearrange files, more cofinality

2017-12-19 04:59:43-05:00 7726a92
feat(data/ordinal): sup, cofinality, subtraction

2017-12-18 08:38:41-05:00 f6bbca7
feat(data/ordinal): universe lifts, alephs

2017-12-17 14:11:42-05:00 52330fa
fix(data/ordinal): update to lean

2017-12-17 04:47:45-05:00 dba8d0e
fix(data/ordinal): fix unsound proof
here's hoping lean will notice that the last proof is not correct

2017-12-17 02:45:25-05:00 b19c222
feat(data/ordinal): ordinal collapse, ordinals ordering,

2017-12-15 22:45:11-05:00 95507bf
chore(algebra/module): update to lean
inout => out_param

2017-12-15 13:40:09+01:00 01f1d23
refactor(style.md): copy naming conventions from the library_dev repository.

2017-12-14 21:29:14+01:00 7948318
feat(logic/basic): add rewrite rules for nonempty

2017-12-14 12:50:11+01:00 d27f7ac
chore(style.md): rename and some cleanup

2017-12-14 12:42:51+01:00 f8476fd
feat(library_style): resurrecting Jeremy's library_style.org as md file

2017-12-14 11:39:08+01:00 0f50ba7
feat(.travis.yml): export and run leanchecker
This should detect multiple definitions with the same name as in #27.

2017-12-14 11:13:01+01:00 86e494d
fix(data/encodable): make decidable_eq_of_encodable priority 0

2017-12-14 11:08:41+01:00 2dbf07a
chore(.): adapt to change `by_cases t with h` to  `by_cases h : t` 746134d11ceec378a53ffd3b7ab8626fb291f3bd

2017-12-13 17:34:22+01:00 ea19776
refactor(data/finsupp): generalize module construction for finsupp

2017-12-13 16:52:33+01:00 b29ab1b
feat(data/finsupp): add support_neg

2017-12-13 13:09:54+01:00 a2d6148
feat(algebra/linear_algebra): add multivariate polynomials

2017-12-13 13:09:17+01:00 8369c7d
feat(data/finsupp): big product over finsupp (big sum is now derived from it)

2017-12-13 12:21:45+01:00 421c332
fix(algebra/big_operators): congruence rules need to provide equations for all rewritable positions

2017-12-13 12:21:45+01:00 81908b0
chore(algebra/linear_algebra): second isomorphism proof

2017-12-13 04:31:56-05:00 a243710
feat(data/ordinal): well ordering theorem
Note to self: this proof seems more cumbersome than it should be. I will see if the proof is easier if we bypass Zorn's lemma.

2017-12-12 16:06:26-05:00 bd99ad7
feat(data/fin): fin.succ.inj

2017-12-11 23:34:49-05:00 d3149ba
fix(*): update to lean

2017-12-11 12:19:07-05:00 6b10d8d
chore(tests/finish3): rename definition with same name

2017-12-11 12:19:07-05:00 be79f9f
chore(data/cardinal): put embedding into cardinal namespace

2017-12-11 14:09:28+01:00 ee7ede9
feat(algebra/linear_algebra): proof first and second isomorphism laws

2017-12-11 14:09:28+01:00 01c3b8f
feature(algebra/linear_algebra): define linear equivalence

2017-12-11 14:09:28+01:00 85a1667
refactor(data/equiv): state refl, symm, and trans rules for equiv using projection. This gives more powerful rfl rules

2017-12-11 05:07:46-05:00 03074f1
feat(data/ordinal): more ordinals

2017-12-10 08:36:32-05:00 a758ffb
feat(data/ordinal): ordinal numbers

2017-12-09 22:14:32-05:00 aef5c88
feat(algebra/group_power): more gpow lemmas

2017-12-08 17:29:17+01:00 8cfcef0
feat(algebra/linear_algebra): add product construction for modules

2017-12-08 17:29:17+01:00 8fab107
refactor(algebra/module): split of type constructions and move quotient, subtype and linear_map to their own theories in algebra/linear_algebra

2017-12-08 17:29:17+01:00 fccc5d3
refactor(algebra/linear_algebra): move zero_not_mem_of_linear_independent from vector_space to module (zero_ne_one should be a typeclass in Prop not in Type)

2017-12-08 08:32:13-05:00 bd013e8
feat(data/dardinal): wellordering of cardinals

2017-12-08 10:51:42+01:00 b547de0
chore(data/finsupp): replace { n with ... } syntax with { ..., .. n } (the former is deprecated)

2017-12-08 10:48:54+01:00 e1e80b4
chore(.): replace ginduction by induction; changed in lean revision 49e7a642c35e83ed16cbc573deef5bd3b6dfc627

2017-12-07 17:25:25+01:00 c32d01d
feat(algebra/linear_algebra): add basic theory on linear algebra

2017-12-07 17:24:30+01:00 f09abb1
feat(data/finsupp): add type of functions with finite support

2017-12-07 17:22:37+01:00 fcf0bfa
feat(data/set/finite): add finite_to_set, finset.coe_to_finset

2017-12-07 17:18:54+01:00 5e42425
fix(algebra/module): fix type universes in is_linear_map.sum

2017-12-07 14:42:09+01:00 0995ac1
feat(algebra/module): the inverse of a linear map is linear

2017-12-07 14:04:24+01:00 645bf60
core(algebra/module): generalize map_smul_left; add is_submodule.range

2017-12-07 00:39:32-05:00 5f642d8
refactor(*): remove local simp AC lemmas
Using local simp lemmas everywhere for mul_assoc and friends defeats the purpose of the change in core. Now theorems are proven with only the AC lemmas actually used in the proof.

2017-12-06 17:16:14+01:00 a3a2faa
feat(algebra/big_operators): add renameing rules under bijection

2017-12-06 16:48:38+01:00 e5c4eb1
feat(data/set): add lift converting finset to set

2017-12-06 16:42:20+01:00 7f9dd51
feat(data/finset): add strong induction rules for finset

2017-12-06 16:21:41+01:00 81e53e8
feat(data/finset): add ssubset

2017-12-06 13:30:50+01:00 f9b39eb
feature(.): add various theorems

2017-12-06 06:02:26-05:00 fd803b6
chore(.): adapt to change bc89ebc19c93392419b7bab8b68271db12855dc5 (improve how induction hypotheses are named)

2017-12-05 15:23:53-05:00 c43e013
fix(theories/number_theory/pell,*): fix broken proofs, less simp AC

2017-12-05 18:39:28+01:00 e9e51db
fix(data/sigma): use Sort for psigma

2017-12-05 18:13:32+01:00 0e3b156
fix(algebra/module): remove instance endomorphism_ring, it breaks real.lean

2017-12-05 18:03:32+01:00 394d721
feat(algebra/module): add quotient module

2017-12-05 17:24:36+01:00 dcfb9a0
refactor(algebra/module): add is_linear_map as predicate

2017-12-05 14:35:49+01:00 88202b6
refactor(algebra/module): clean up is_submodule projections

2017-12-05 14:15:07+01:00 90ed0ab
refactor(algebra/module): rename submodule -> is_submodule, smul_left_distrib -> smul_add, smul_right_distrib -> add_smul, smul_sub_left_distrib -> smul_sub, sub_smul_right_distrib -> sub_smul

2017-12-05 12:33:55+01:00 6ebe286
refactor(.): use new funext tactic

2017-12-05 12:04:46+01:00 8273536
chore(.): adapt to change 6d96741010f5f36f2f4f046e4b2b8276eb2b04d4 (provide names for constructor arguments)

2017-12-05 11:24:13+01:00 f6474f0
chore(.): adapt to change b7322e28c12d274ccec992b7fc49d35b2e56a2a4 (remove AC simp rules)

2017-12-04 23:24:01-05:00 2dadfdb
feat(tactic/norm_num): add {nat,int}.mod

2017-12-04 23:05:57-05:00 8d27f70
feat(tactic/norm_num): add support for {nat,int}.div

2017-12-04 21:23:11-05:00 b1981c9
chore(theories/number_theory/dioph): cleanup

2017-12-01 08:02:15-05:00 7191e39
feat(theories/number_theory/dioph): Pell equation, diophantine equations

2017-11-30 22:10:19-05:00 f57e59f
feat(data/analysis): calculations with filters / topologies + misc

2017-11-30 22:10:19-05:00 b207991
refactor(data/multiset): move multiset, finset, ordered_monoid

2017-11-30 22:10:19-05:00 f9b6671
Revert "fix(algebra/group): workaround for #1871"
This reverts commit b9dcc64a998c417551d95f3b0d9b8ee8b690d21b.

2017-11-28 19:14:05+01:00 67aecac
fix(data/option): adapt to https://github.com/leanprover/lean/commit/f6b113849b367d49fc4a506f0698c7f1e062851e

2017-11-24 05:22:02-05:00 2c84af1
feat(data/set/finite): unify fintype and finite developments
Here fintype is the "constructive" one, which exhibits a list enumerating the set (quotiented over permutations), while "finite" merely states the existence of such a list.

2017-11-24 05:19:35-05:00 e576429
feat(data/multiset): filter_map

2017-11-24 05:18:50-05:00 bade51a
feat(data/quot): add trunc type (like nonempty in Type)
It is named after the propositional truncation operator in HoTT, although of course the behavior is a bit different in a proof irrelevant setting.

2017-11-23 23:33:09-05:00 16d40d7
feat(data/finset): fintype, multiset.sort, list.pmap

2017-11-23 22:09:45-05:00 c03c16d
feat(algebra/group_power): remove overloaded ^ notation, add smul

2017-11-23 06:50:37-05:00 33aa50b
feat(tactic/generalize_proofs): generalize proofs tactic
Borrowed from leanprover/lean#1704

2017-11-22 05:33:59-05:00 902b94d
refactor(data/finset): redefine finsets as subtype of multisets

2017-11-22 05:32:47-05:00 df546eb
feat(data/set/basic): add coercion from set to type

2017-11-22 05:26:27-05:00 d548725
feat(tactic/rcases): support 'rfl' in rcases patterns for subst
Using the special keyword `rfl` in an rcases pattern, as in `rcases h with ⟨a, rfl⟩ | b`, will now perform `subst` on the indicated argument, when it is an equality.

2017-11-20 20:36:26-05:00 b9dcc64
fix(algebra/group): workaround for #1871
Currently, user attributes are not stored in `olean` files, which leads to segfault issues when referencing them using `user_attribute.get_param`. To work around this, we duplicate the stored data in an extra `def`, which *is* stored in the `olean` file.

2017-11-20 01:30:51-05:00 40d2b50
fix(algebra/order): update to lean
The new `not_lt_of_lt` in core is not substitutable for this one because it is in the new algebraic hierarchy and mathlib is still on the old one. But this isn't used anywhere, so I'll just remove it instead of renaming.

2017-11-20 01:09:21-05:00 f467c81
feat(data/multiset): disjoint, nodup, finset ops

2017-11-19 21:14:37-05:00 76a5fea
fix(*): finish converting structure notation to {, ..s} style

2017-11-19 19:49:02-05:00 5d65b0a
fix(algebra/ring): update to lean

2017-11-19 05:53:48-05:00 8067812
feat(data/multiset): filter, count, distrib lattice

2017-11-19 00:41:14-05:00 f9de183
feat(data/multiset): working on multisets, fix rcases bug

2017-11-18 23:18:32-05:00 d579a56
fix(*): update to lean

2017-11-15 13:52:33-05:00 6e9d2d5
fix(data/num): update to lean

2017-11-10 11:32:15+01:00 afddab6
chore(algebra/module): hide ring parameters, vector_space is no a proper class, remove dual, change variables to implicits
the ring type is often unnecessary it can be computed from the module instance. Also a lot of parameters to lemmas should be implicits as they can be computed from assumptions or the expteced type..
@kckennylau: I removed `dual` as it does not make sense to take about all possible *module structures* possible on the function space `linear_map α β α`. I guess `dual` should be just `linear_map α β α`.

2017-11-10 05:26:42-05:00 0f8a5c8
refactor(algebra/group): Use a user attr for to_additive
Parts of this commit are redundant pending leanprover/lean#1857 .

2017-11-09 12:33:00+01:00 04dd132
feat(algebra/big_operators): exists_ne_(one|zero)_of_(prod|sum)_ne_(one|zero)

2017-11-09 12:33:00+01:00 5923cd0
feat(data/set/finite): finite_of_finite_image

2017-11-07 19:26:04-05:00 d95bff0
refactor(data/hash_map): improve hash_map proof
Decrease dependence on implementation details of `array`

2017-11-07 06:09:41-05:00 4ae6a57
fix(data/array): update to lean

2017-11-06 11:35:36+01:00 2bc7fd4
feat(data/cardinal): theory for cardinal arithmetic

2017-11-06 03:28:38-05:00 d62cefd
refactor(algebra/module): clean up PR commit

2017-11-06 01:31:01-05:00 5cb7fb0
feat(algebra/vector_space): modules and vector spaces, linear spaces

2017-11-06 01:26:58-05:00 0947f96
feat(data/multiset): working on multiset.union

2017-11-05 17:42:46-05:00 2aa6c87
feat(tactic/norm_num): add support for inv and locations in norm_num

2017-11-05 01:30:21-04:00 d743fdf
feat(data/sigma): duplicate sigma basics for psigma

2017-11-05 00:29:59-05:00 8e99f98
fix(algebra/field): update to lean

2017-11-02 17:13:43-04:00 2da9bef
feat(data/nat/cast,...): add char_zero typeclass for cast_inj
As pointed out by @kbuzzard, the complex numbers are an important example of an unordered characteristic zero field for which we will want cast_inj to be available.

2017-11-02 02:32:37-04:00 2883c1b
feat(data/num/lemmas): finish znum isomorphism proof

2017-11-02 00:06:37-04:00 efb37f8
fix(theories/set_theory): workaround for noncomputability bug in lean

2017-11-01 22:19:53-04:00 0c0c007
test(tests/norm_num): more tests from #16

2017-11-01 22:14:14-04:00 7339f59
fix(tactic/norm_num): bugfix

2017-11-01 21:23:52-04:00 5a262df
fix(tactic/norm_num): fix performance bug in norm_num

2017-11-01 04:36:53-04:00 6eedc0e
feat(tactic/norm_num): rewrite norm_num to use simp instead of reflection

2017-11-01 04:35:13-04:00 0663945
feat(data/num,data/multiset): more properties of binary numbers, begin multisets

2017-10-25 22:24:56-04:00 ff43691
fix(analysis/real): remove import for old file
note: exists_subtype is now subtype.exists in logic/basic

2017-10-25 21:55:10-04:00 3cd6229
refactor(analysis/real): use more coe instead of of_rat

2017-10-24 22:57:22-04:00 2dd035a
Merge remote-tracking branch 'cipher1024/master'

2017-10-24 22:31:12-04:00 dd9f766
feat(data/num,data/nat/cast,...): nat,num,int,rat.cast, list stuff

2017-10-17 00:02:03-04:00 2e7651a
feat(data/num): add tactics for evaluating arithmetic expressions made of literals, including `x \le y` and `x ^ y`

2017-10-15 02:26:24-04:00 5ad8020
Merge remote-tracking branch 'minchaowu/master'

2017-10-15 01:58:58-04:00 8f4327a
feat(*): working on list/basic, robusting simp proofs

2017-10-02 00:06:27-05:00 e951a75
Merge branch 'master' into master

2017-09-28 19:28:00-04:00 e7b2a0f
style(analysis): renames the topology directory to analysis and introduced topology and measure_theory subdirectories

2017-09-28 19:16:36-04:00 afefdcb
chore(topology): move general theorems to the corresponding theories

2017-09-28 18:16:44-04:00 7e7c6f5
feat(topology): various additions (preparation for the nonnegative integral)

2017-09-28 18:08:23-04:00 c3aeb53
feat(topology): add Lebesgue measure

2017-09-28 18:07:43-04:00 4297eeb
feat(topology): add Borel spaces

2017-09-22 12:52:07-05:00 865ba36
feat(data/set): add functions over sets

2017-09-22 12:31:19-04:00 e0abdab
feat(topology/topological_space): add countablility and separability axioms for topological spaces

2017-09-21 15:10:53-05:00 d5e009f
Merge branch 'master' of https://github.com/leanprover/mathlib

2017-09-21 13:22:44-04:00 5bb145e
feat(topology/lebesgue_measure): add Lebesgue outer measure; show that the lower half open interval is measurable

2017-09-21 10:33:23-05:00 d9865ae
Merge branch 'master' of https://github.com/leanprover/mathlib

2017-09-20 20:02:04-04:00 4235594
feat(topology/outer_measure): add outer measures and tools for Caratheodorys extension method

2017-09-20 18:29:06-04:00 4698828
feat(topology): prove geometric series

2017-09-19 02:55:14-04:00 6b93e93
refactor(data/equiv,encodable): refactor/simplify proofs

2017-09-18 22:41:41-04:00 1e4c869
doc(tactic/interactive): rename simpf -> simpa, document rcases and simpa

2017-09-18 22:08:42-04:00 cb4a92e
chore(algebra/ordered_ring): fix names, update to lean

2017-09-18 21:57:48-04:00 06e797b
refactor(data/nat/pairing): improve proof readability
in response to review comments on 0acdf1c

2017-09-17 15:38:03-04:00 0acdf1c
feat(data/nat): better sqrt + pairing, prime numbers, renames...

2017-09-16 03:26:54-04:00 f542d42
chore(algebra/ordered_ring): update to lean

2017-09-16 02:55:01-04:00 fe1ad4b
feat(data/rat): derive properties of rat floor and ceil

2017-09-16 02:53:53-04:00 a1c3e2d
feat(algebra): new algebra theorems (more iff)

2017-09-16 02:51:50-04:00 a967d8d
feat(tactic/interactive): allow exprs in simpf, interactive try_for

2017-09-13 17:34:12-04:00 f705963
feat(topology/measure): introduce measures

2017-09-13 14:20:42-04:00 0b16336
feat(topology/infinite_sum): strengten bijection proof

2017-09-13 14:19:50-04:00 e9b077c
chore(data/equiv): use has_coe_to_fun

2017-09-11 21:55:00-04:00 bf58bf4
feat(topology/measurable_space): induction rule for sigma-algebras with intersection-stable generators; uses Dynkin systems

2017-09-11 14:57:55-04:00 74c3e6e
feat(topology/measurable_space): measurable sets invariant under (countable) set operations

2017-09-11 13:56:06-04:00 b890425
feat(topology/ennreal): ennreal forms a topological monoid

2017-09-11 11:58:16-04:00 8ed673d
feat(data/set/countable): finite sets are countable

2017-09-11 11:32:25-04:00 28b46a2
fix(data/set/countable): finish proof countable_sUnion

2017-09-10 23:28:41-04:00 8ee2629
feat(data/set): add countable sets

2017-09-10 20:33:16-04:00 7e06124
feat(logic): add small theory on inverse functions

2017-09-09 12:48:22-04:00 a5f32d2
feat(data/encodable): port countable choice from Lean2

2017-09-08 20:06:26-04:00 3399baa
feat(data/encodable): ported data/encodable.lean from Lean2

2017-09-08 18:07:24-04:00 741065b
chore(data/equiv): using nat pairing

2017-09-08 18:05:53-04:00 22c8fae
feat(data/nat/pairing): ported data/nat/pairing.lean from Lean2

2017-09-08 17:19:17-04:00 7c67c29
feat(data/nat/sqrt): ported data/nat/sqrt.lean from Lean2

2017-09-08 14:50:51-04:00 445a5a4
fix(topology/real): remove (unnecessary) admit

2017-09-08 14:49:07-04:00 8ef8f81
feat(data/equiv): port data/equiv.lean from Lean2

2017-09-07 20:38:33-04:00 ddeefb8
feat(topology/topological_structures,ennreal): show continuity of of_ennreal and of_real

2017-09-06 19:31:17-04:00 32f3f45
feat(topology): restructure order topologies; (start) proof that ennreal is a topological monoid

2017-09-06 16:19:02-04:00 17e48db
fix(data/list/comb): implement fix from rlewis1988

2017-09-05 22:38:07-04:00 f80ae1f
feat(topology/infinite_sum): add tsum (with ∑ notation) and has_sum; add lemmas for different algebraic structures

2017-09-05 19:48:25-04:00 1e4f6cc
chore(data/seq,data/hash_map): adapt to changes in injection tactic (https://github.com/leanprover/lean/commit/8a10d4c72c948cd1b7af02f316e553e202b1368f)

2017-09-05 19:32:31-04:00 c6747ee
chore(topology/uniform_space): use Type* and Sort*

2017-09-05 19:32:31-04:00 7c38416
feat(data/sigma,data/finset,algebra): add support for the sigma type to finset and big operators

2017-09-05 19:24:56-04:00 7d8e3f3
feat(algebra): add ordered (non-cancellative) additive monoid; use for sum-big operator

2017-09-05 15:09:41-04:00 fde992f
chore(*): use `induction generalizing`

2017-09-05 15:05:29-04:00 a8a1a91
chore(topology/uniform_space): simplify proof (suggested by @gebner)

2017-09-05 14:15:01-04:00 ba95269
feat(topology): introduce infinite sums on topological monoids

2017-09-05 12:47:49-05:00 6c321fe
Merge branch 'master' of https://github.com/leanprover/mathlib

2017-09-05 10:33:20-04:00 c7a3c75
fix(data/seq): option_bind, option_map -> option.bind, option.map (changed in Lean)

2017-09-04 12:33:01-04:00 80e1474
fix(logic/basic): fix simp performance issue
Having `forall_true_iff'` as a simp lemma caused way too much backtracking, so only the 2 and 3 implication versions are added as simp lemmas, and the user can add `forall_true_iff'` to their simp set if they need to reduce more.

2017-09-03 23:13:00-04:00 086ac36
feat(tactic/interactive): simpf tactic, more logic refactor

2017-09-03 20:55:23-04:00 8faac5f
refactor(logic/basic): refactor logic theorems

2017-09-02 19:56:17-04:00 74cfa93
fix(data/list/perm): fix broken match
This reverts commit 3d817686fdb02eba0f51ab303a4d5b50ac2a9f5e.

2017-08-30 20:12:20-04:00 dbc8f86
feat(topology/measurable_space): measurability is closed under id and comp

2017-08-30 18:33:58-04:00 4ef0ea8
feat(topology/ennreal): add subtraction

2017-08-30 11:17:07-05:00 f93f7e7
Merge branch 'master' of https://github.com/leanprover/mathlib

2017-08-29 23:40:45-04:00 cb7fb9b
feat(topology): basic setup for measurable spaces

2017-08-29 19:20:11-04:00 51042cd
feat(topology/ennreal): add extended non-negative real numbers

2017-08-28 21:34:47-04:00 76ae12c
fix(algbera/big_operators): remove simp attr for sum/mul-distributivity rules

2017-08-28 21:30:00-04:00 edfbf3c
feat(algebra/big_operators): add semiring and integral_domain rules

2017-08-28 19:34:30-04:00 50ed0e4
feat(algebra/big_operators): add congruence rule and morphism laws

2017-08-28 18:34:33-04:00 4ed43d9
feat(data/finset): add fold; add simp rules for insert, empty, singleton and mem

2017-08-28 12:56:25-05:00 1aa7efa
Merge remote-tracking branch 'upstream/master'

2017-08-27 20:58:30-04:00 b031441
feat(algebra): add small theory of big operators on commutative monoids

2017-08-27 20:57:59-04:00 c17d11b
fix(data/finset): use the type class projections for insert; hide most constants using protected; add image of finset

2017-08-27 13:33:07-04:00 f2b4d2e
refactor(data/finset): use generic set notation for finsets

2017-08-27 13:33:07-04:00 79ed1c3
refactor(data/finset): add type class instances

2017-08-27 13:33:07-04:00 73ae11b
refactor(data/finset): fix formatting issues

2017-08-27 13:33:07-04:00 8dbee5b
feat(data/finset): add basics for finsets

2017-08-27 12:30:11-05:00 e678531
refactor(data/finset): use generic set notation for finsets

2017-08-27 12:05:34-05:00 b64eb68
refactor(data/finset): use generic set notation for finsets

2017-08-27 12:05:00-05:00 5292cf1
Merge branch 'master' of https://github.com/leanprover/mathlib

2017-08-27 12:26:42-04:00 1f992c9
fix(.): adapt to Lean changes: type class parameters to structures are now type class parameters in the projections and constructor

2017-08-26 15:40:07-04:00 5b3b136
feat(topology): port metric space from lean2

2017-08-26 15:40:07-04:00 f1fba68
feat(algebra): porting modules from lean2

2017-08-26 15:40:07-04:00 d1cbb8f
fix(algebra/group): add every transport theorem from main Lean repository

2017-08-26 13:03:40-05:00 67a2f39
refactor(data/finset): add type class instances

2017-08-26 12:24:58-05:00 cde1bd8
Merge branch 'master' of https://github.com/leanprover/mathlib

2017-08-25 13:00:17-05:00 dff0ffd
refactor(data/finset): fix formatting issues

2017-08-24 19:09:36-04:00 7c72de2
feat(topology): add topological structures for groups, ring, and linear orders; add instances for rat and real

2017-08-24 16:21:01-05:00 7df585e
feat(data/finset): add basics for finsets

2017-08-24 13:50:09-04:00 33b22b0
data/option: add filter

2017-08-24 13:46:34-04:00 4320c41
chore(*): rename stdlib to mathlib

2017-08-24 13:34:45-04:00 9566a5b
Merge pull request #10 from johoelzl/repair
rat is order-dense in real; cleanup continuity proof for inv

2017-08-23 16:42:36-04:00 963bcad
rat is order-dense in real; cleanup continuity proof for inv

2017-08-23 16:41:48-04:00 d708489
adapt to Lean changes

2017-08-22 17:03:16-04:00 3d81768
fix(data/list/perm): replace broken match with cases proof

2017-08-22 16:36:24-04:00 2780e70
Adapt to changes in equation compiler:
* Names are not necessary propagated when `rfl` is eliminated on two
  variables. Replace `rfl` by `eq.refl n`.
* it looks like that delta, beta, eta conversion rules are applied later now,
  so some statements of the form `assume <x, (h : t), ...` do not work anymore.
* there is still a problem in `data/list/perm.lean`

2017-08-18 03:14:49-04:00 c5c5b50
feat(tactic/rcases): recursive cases (with patterns)
This variant on `cases` (which I hope will eventually replace `cases`) allows the specification of patterns for the `with` clause, composed of anonymous constructors and vertical bars, as in `rcases (t : a ∧ b ∨ c ∧ (d ∨ e)) with ⟨ha, hb⟩ | ⟨hc, hd | he⟩`. As with destructuring `let`, if too many arguments are given to a constructor it is treated as a right-associative nested case, i.e. `⟨ha, hb, hc⟩` becomes `⟨ha, ⟨hb, hc⟩⟩` and `ha | hb | hc` becomes `ha | ⟨hb |  hc⟩`.

2017-08-16 14:06:45-07:00 fb6bab2
fix(data/list/perm): pending issues

2017-08-16 14:05:41-07:00 11bcaeb
refactor(data/lazy_list): lazy_list was moved back to core lib

2017-08-16 13:48:22-07:00 af0b10c
fix(data/num/basic): vector and bitvec are not in the init folder anymore

2017-08-16 13:47:32-07:00 9b2b11f
refactor(data): stream library was moved back to core lib

2017-08-11 19:03:01-04:00 6d90728
use Galois connections in filter library

2017-08-11 18:26:35-04:00 ce09c18
add Galois connection, also add a couple of order theoretic results

2017-08-11 18:14:46-04:00 2e8bd34
add set.range function
`range` is stronger than `f '' univ`, as `f` can be a function from an arbitrary `Sort` instead of `Type`

2017-08-11 18:06:23-04:00 e27aae8
introduce top level dir `order`: move `algebra.order` and content of `algebra.lattice`

2017-08-11 17:57:57-04:00 218c1dd
algebra/lattice/filter: cleanup move theorems to appropriate places

2017-08-10 16:50:12-04:00 178e746
rename towards -> tendsto

2017-08-10 16:41:03-04:00 2ac1f20
rename open -> is_open, closed -> is_closed

2017-08-10 16:36:59-04:00 7882677
construct reals as complete, linear ordered field

2017-08-02 22:32:47+01:00 64b6151
refactor(data/set/basic,*): vimage -> preimage, add notation

2017-08-02 22:17:36+01:00 41a2376
refactor(algebra/group,group_power): clean up proofs

2017-08-02 16:24:02+01:00 3e9e4b6
refactor(*): move theorems and do minor polishing

2017-08-02 16:21:24+01:00 da0c346
fix(*): fix wrt changes in lean

2017-08-02 15:24:33+01:00 6392b05
refactor(*): switch from order_pair to partial_order

2017-08-01 03:44:00+01:00 fe81186
fix(tactic/alias): autogenerated alias names

2017-08-01 02:30:49+01:00 1191b4d
feat(tactic/alias): support biconditional aliases

2017-08-01 00:53:25+01:00 fb21c1a
feat(tactic/alias): alias command

2017-07-30 00:50:04+01:00 8f65496
feat(data/fp): first pass at a floating point model
Hopefully this will be eventually moved to init so it can get a native representation.

2017-07-30 00:48:02+01:00 bce43b3
feat(data/rat): new rat representation using canonical elements
This yields better performance in long rational computations provided the numbers can be simplified.

2017-07-28 16:56:17+01:00 bfe2db7
fix(*): adapt to lean

2017-07-27 14:02:57+01:00 b37966e
chore(.travis.yml): add Travis CI support

2017-07-26 14:25:09+01:00 b8ea20f
fix(data): bitvec and vector are in the main repo

2017-07-25 13:51:39+01:00 9451087
refactor(*): move in list lemmas, adapt to change in list.union

2017-07-24 00:42:20+01:00 aa78466
refactor(*): move in some nat lemmas
and other lemmas from init

2017-07-23 19:02:57+01:00 1b6322f
chore(*): rfl-lemmas on same line

2017-07-23 18:59:39+01:00 4a28535
refactor(*): attributes on same line

2017-07-23 18:39:51+01:00 a4b157b
chore(data/nat): remove addl

2017-07-23 18:29:16+01:00 5816424
refactor(*): use 'lemma' iff statement is private

2017-07-23 18:13:37+01:00 b9f1d64
refactor(*): use . instead of ^.

2017-07-23 18:07:49+01:00 9d01cb8
refactor(algebra/lattice): use *experiment files, move set.lattice to .basic

2017-07-23 15:39:35+01:00 32beb92
refactor(*): tools -> tactic, remove experimental stuff

2017-07-23 15:31:56+01:00 bb8b8f8
refactor(tests): consolidate tests

2017-07-23 15:24:21+01:00 ae65643
refactor(*): use absolute paths

2017-07-23 15:16:51+01:00 deb1681
refactor(*): import content from lean/library/data and library_dev

2017-07-21 01:02:10-07:00 21aca92
Initial commit